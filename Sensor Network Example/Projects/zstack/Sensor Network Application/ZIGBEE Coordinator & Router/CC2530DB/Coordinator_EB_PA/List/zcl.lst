###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                02/Aug/2013  13:47:59 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network        #
#                          Example\Components\stack\zcl\zcl.c                 #
#    Command line       =  -f "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network    #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network    #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Components\stack\zcl\zcl.c" -D CC2530 -D   #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\List\" -lA       #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\CC2530_ZStack-2.3.0-1. #
#                          4.0\Sensor Network Example\Projects\zstack\Sensor  #
#                          Network Application\ZIGBEE Coordinator &           #
#                          Router\CC2530DB\" -I "D:\CC2530_ZStack-2.3.0-1.4.0 #
#                          \Sensor Network Example\Projects\zstack\Sensor     #
#                          Network Application\ZIGBEE Coordinator &           #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sen #
#                          sor Network Example\Projects\zstack\Sensor         #
#                          Network Application\ZIGBEE Coordinator &           #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor       #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network    #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sen #
#                          sor Network Example\Projects\zstack\Sensor         #
#                          Network Application\ZIGBEE Coordinator &           #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\List\zcl.lst     #
#    Object file        =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\Obj\zcl.r51      #
#                                                                             #
#                                                                             #
###############################################################################

D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network Example\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2009-12-22 17:20:57 -0800 (Tue, 22 Dec 2009) $
      4            Revision:       $Revision: 21402 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            Should you have any questions regarding your right to use this Software,
     11            contact Texas Instruments Incorporated at www.TI.com. 
     12          **************************************************************************************************/
     13          
     14          /*********************************************************************
     15           * INCLUDES
     16           */
     17          #include "ZComDef.h"
     18          #include "OSAL.h"
     19          #include "OSAL_Tasks.h"
     20          #include "AF.h"
     21          #include "ZDConfig.h"
     22          
     23          /* ZCL */
     24          #include "zcl.h"
     25          #include "zcl_general.h"
     26          
     27          #if defined ( INTER_PAN )
     28            #include "stub_aps.h"
     29          #endif
     30          
     31          /* HAL */
     32          #include "hal_uart.h"
     33          #include "hal_timer.h"
     34          #include "hal_led.h"
     35          #if defined (LCD_SUPPORTED)
     36            #include "hal_lcd.h"
     37          #endif
     38          
     39          /* MT */
     40          #include "MT_UART.h"
     41          #include "MT.h"
     42          
     43          /*********************************************************************
     44           * MACROS
     45           */
     46          /*** Frame Control ***/
     47          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     48          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     49          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     50          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     51          
     52          /*** Attribute Access Control ***/
     53          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     54          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     55          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     56          
     57          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     58          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     59          
     60          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     61                                                  (zclHdr).fc.manuSpecific == 0          && \
     62                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     63          
     64          // Commands that have corresponding responses
     65          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ            || \
     66                                                  (cmd) == ZCL_CMD_WRITE           || \
     67                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED || \
     68                                                  (cmd) == ZCL_CMD_CONFIG_REPORT   || \
     69                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG || \
     70                                                  (cmd) == ZCL_CMD_DISCOVER        || \
     71                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     72          
     73          /*********************************************************************
     74           * CONSTANTS
     75           */
     76          
     77          /*********************************************************************
     78           * TYPEDEFS
     79           */
     80          typedef struct zclLibPlugin
     81          {
     82            struct zclLibPlugin *next;
     83            uint16              startClusterID;    // starting cluster ID
     84            uint16              endClusterID;      // ending cluster ID
     85            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
     86          } zclLibPlugin_t;
     87          
     88          // Attribute record list item
     89          typedef struct zclAttrRecsList
     90          {
     91            struct zclAttrRecsList *next;
     92            uint8                  endpoint;      // Used to link it into the endpoint descriptor
     93            uint8                  numAttributes; // Number of the following records
     94            CONST zclAttrRec_t     *attrs;        // attribute records
     95          } zclAttrRecsList;
     96          
     97          // Cluster option list item
     98          typedef struct zclClusterOptionList
     99          {
    100            struct zclClusterOptionList *next;
    101            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    102            uint8                       numOptions; // Number of the following records
    103            zclOptionRec_t              *options;   // option records
    104          } zclClusterOptionList;
    105          
    106          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    107          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    108          
    109          typedef struct
    110          {
    111            zclParseInProfileCmd_t   pfnParseInProfile;
    112            zclProcessInProfileCmd_t pfnProcessInProfile;
    113          } zclCmdItems_t;
    114          
    115          
    116          /*********************************************************************
    117           * GLOBAL VARIABLES
    118           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    120          
    121          // The task Id of the Application where the unprocessed Foundation
    122          // Command/Response messages will be sent to.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    123          uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
   \                     zcl_RegisteredMsgTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    124          
    125          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          zclValidateAttrData_t zcl_ValidateAttrDataCB = NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    127          
    128          // ZCL Sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          uint8 zcl_SeqNum = 0x00;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    130             
    131          /*********************************************************************
    132           * EXTERNAL VARIABLES
    133           */
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL VARIABLES
    141           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          static zclLibPlugin_t *plugins;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          static zclAttrRecsList *attrList;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          static zclClusterOptionList *clusterOptionList;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          static uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt );  // Not static for ZNP build.
    151          
    152          void zclZigbeeReceiverMSG(afIncomingMSGPacket_t *msg);
    153          
    154          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    155          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    156          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    157          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    158          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    159          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    160          
    161          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    162          
    163          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)
    164            static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf );
    165          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
    166          
    167          #ifdef ZCL_READ
    168            static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    169            static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    170          #endif // ZCL_READ
    171          
    172          #ifdef ZCL_WRITE
    173            static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    174            static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    175            static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    176            static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    177          #endif // ZCL_WRITE
    178          
    179          #ifdef ZCL_REPORT
    180            static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    181            static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    182          #endif // ZCL_REPORT
    183          
    184          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    185          
    186          #ifdef ZCL_DISCOVER
    187            static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint16 *attrId, zclAttrRec_t *pAttr );
    188            static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd );
    189            static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    190          #endif // ZCL_DISCOVER
    191          
    192          static uint8 zclSendMsg( zclIncoming_t *pInMsg );
    193          
    194          /*********************************************************************
    195           * Parse Profile Command Function Table
    196           */

   \                                 In  segment CODE_C, align 1
    197          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ........     DW ??zclParseInReadCmd?relay, ??zclProcessInReadCmd?relay
   \   000004   ........     DW ??zclParseInReadRspCmd?relay, ??zclSendMsg?relay
   \   000008   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay
   \   00000C   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteUndividedCmd?relay
   \   000010   ........     DW ??zclParseInWriteRspCmd?relay, ??zclSendMsg?relay
   \   000014   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay, 0H, 0H, 0H
   \            00000000
   \            0000    
   \   00001E   00000000     DW 0H, 0H, 0H, 0H, 0H, 0H, 0H, ??zclParseInDefaultRspCmd?relay
   \            00000000
   \            00000000
   \            0000....
   \   00002E   ....0000     DW ??zclSendMsg?relay, 0H, 0H, 0H, 0H
   \            00000000
   \            0000    
    198          {
    199          #ifdef ZCL_READ
    200            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    201            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zclSendMsg                      },
    202          #else
    203            /* ZCL_CMD_READ */                { NULL,                          NULL                            },
    204            /* ZCL_CMD_READ_RSP */            { NULL,                          NULL                            },
    205          #endif // ZCL_READ
    206          
    207          #ifdef ZCL_WRITE
    208            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    209            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    210            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zclSendMsg                      },
    211            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    212          #else
    213            /* ZCL_CMD_WRITE */               { NULL,                          NULL                            },
    214            /* ZCL_CMD_WRITE_UNDIVIDED */     { NULL,                          NULL                            },
    215            /* ZCL_CMD_WRITE_RSP */           { NULL,                          NULL                            },
    216            /* ZCL_CMD_WRITE_NO_RSP */        { NULL,                          NULL                            },
    217          #endif // ZCL_WRITE
    218          
    219          #ifdef ZCL_REPORT
    220            /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zclSendMsg                      },
    221            /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zclSendMsg                      },
    222            /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zclSendMsg                      },
    223            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zclSendMsg                      },
    224            /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zclSendMsg                      },
    225          #else
    226            /* ZCL_CMD_CONFIG_REPORT */       { NULL,                          NULL                            },
    227            /* ZCL_CMD_CONFIG_REPORT_RSP */   { NULL,                          NULL                            },
    228            /* ZCL_CMD_READ_REPORT_CFG */     { NULL,                          NULL                            },
    229            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { NULL,                          NULL                            },
    230            /* ZCL_CMD_REPORT */              { NULL,                          NULL                            },
    231          #endif // ZCL_REPORT
    232          
    233            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zclSendMsg                      },
    234            
    235          #ifdef ZCL_DISCOVER  
    236            /* ZCL_CMD_DISCOVER */            { zclParseInDiscCmd,             zclProcessInDiscCmd             },
    237            /* ZCL_CMD_DISCOVER_RSP */        { zclParseInDiscRspCmd,          zclSendMsg                      }
    238          #else
    239            /* ZCL_CMD_DISCOVER */            { NULL,                          NULL                            },
    240            /* ZCL_CMD_DISCOVER_RSP */        { NULL,                          NULL                            }
    241          #endif // ZCL_DISCOVER
    242          };
    243          
    244          /*********************************************************************
    245           * PUBLIC FUNCTIONS
    246           *********************************************************************/
    247          
    248          /*********************************************************************
    249           * @fn          zcl_Init
    250           * @brief       Initialization function for the zcl layer.
    251           * @param       task_id - ZCL task id
    252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    254          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    255            zcl_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#zcl_TaskID
   \   000008   F0           MOVX    @DPTR,A
    256          
    257            plugins = (zclLibPlugin_t  *)NULL;
   \   000009   90....       MOV     DPTR,#plugins
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
    258            attrList = (zclAttrRecsList *)NULL;
   \   000010   90....       MOV     DPTR,#attrList
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    259            clusterOptionList = (zclClusterOptionList *)NULL;
   \   000016   90....       MOV     DPTR,#clusterOptionList
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    260          }
   \   00001C   02....       LJMP    ?Subroutine102 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    261          
    262          /*********************************************************************
    263           * @fn          zcl_event_loop
    264           * @brief       Event Loop Processor for zcl.
    265           * @param       task_id - task id
    266           *              events - event bitmap
    267           * @return      unprocessed events
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    270          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    271            uint8 *msgPtr;
    272            (void)task_id;  // Intentionally unreferenced parameter
    273            
    274            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??zcl_event_loop_0
   \   000011   E9           MOV     A,R1
   \                     ??zcl_event_loop_0:
   \   000012   604B         JZ      ??zcl_event_loop_1
    275            {
    276              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000014                ; Setup parameters for call to function osal_msg_receive
   \   000014   800E         SJMP    ??zcl_event_loop_2
    277              while ( msgPtr != NULL )
    278              {
    279                uint8 dealloc = TRUE;
    280                
    281                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    282                {
    283                  zclProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_3:
   \   000016                ; Setup parameters for call to function zclProcessMessageMSG
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??zclProcessMessageMSG?relay
    284                }
    285                else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
    286                {
    287                  osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr ); // send it to another task to process.
    288                  dealloc = FALSE;
    289                }
    290                if ( dealloc ) // Release the memory
    291                {
    292                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_4:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    293                }
    294                msgPtr = osal_msg_receive( zcl_TaskID ); // Next
   \                     ??zcl_event_loop_2:
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \   000024   90....       MOV     DPTR,#zcl_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   \   000030   AE..         MOV     R6,?V0 + 2
   \   000032   AF..         MOV     R7,?V0 + 3
   \   000034   EE           MOV     A,R6
   \   000035   7001         JNZ     ??zcl_event_loop_5
   \   000037   EF           MOV     A,R7
   \                     ??zcl_event_loop_5:
   \   000038   601C         JZ      ??zcl_event_loop_6
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   641A         XRL     A,#0x1a
   \   000041   60D3         JZ      ??zcl_event_loop_3
   \   000043   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FF         XRL     A,#0xff
   \   000049   60D2         JZ      ??zcl_event_loop_4
   \   00004B                ; Setup parameters for call to function osal_msg_send
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_send?relay
   \   000054   80CE         SJMP    ??zcl_event_loop_2
    295              } 
    296              return (events ^ SYS_EVENT_MSG);// return unprocessed events
   \                     ??zcl_event_loop_6:
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   7480         MOV     A,#-0x80
   \   00005A   65..         XRL     A,?V0 + 1
   \   00005C   FB           MOV     R3,A
   \   00005D   8004         SJMP    ??zcl_event_loop_7
    297            }
    298            return 0; // Discard unknown events
   \                     ??zcl_event_loop_1:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??zcl_event_loop_7:
   \   000063   02....       LJMP    ?Subroutine103 & 0xFFFF
    299          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    300          
    301          /*********************************************************************
    302           * @fn          zcl_registerPlugin
    303           * @brief       Add a Cluster Library handler
    304           * @param       startClusterID - starting cluster ID
    305           *              endClusterID - ending cluster ID
    306           *              pfnHdlr - function pointer to incoming message handler
    307           * @return      ZSuccess if OK
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    310                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    311          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine40 & 0xFFFF
    312            zclLibPlugin_t *pNewItem;
    313            zclLibPlugin_t *pLoop;
    314          
    315            // Fill in the new profile list
    316            pNewItem = osal_mem_alloc( sizeof( zclLibPlugin_t ) );
   \                     ??CrossCallReturnLabel_46:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A08         MOV     R2,#0x8
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_mem_alloc?relay
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
   \   000020   A8..         MOV     R0,?V0 + 4
   \   000022   A9..         MOV     R1,?V0 + 5
    317            if ( pNewItem == NULL )
   \   000024   E8           MOV     A,R0
   \   000025   7001         JNZ     ??zcl_registerPlugin_0
   \   000027   E9           MOV     A,R1
   \                     ??zcl_registerPlugin_0:
   \   000028   7004         JNZ     ??zcl_registerPlugin_1
    318              return (ZMemError);
   \   00002A   7910         MOV     R1,#0x10
   \   00002C   8051         SJMP    ??CrossCallReturnLabel_14
    319          
    320            // Fill in the plugin record.
    321            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_1:
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine14 & 0xFFFF
    322            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_17:
   \   000038   A3           INC     DPTR
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   12....       LCALL   ?Subroutine14 & 0xFFFF
    323            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_18:
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0 + 3
   \   00004B   F0           MOVX    @DPTR,A
    324            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ?Subroutine17 & 0xFFFF
    325          
    326            if (  plugins == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_281:
   \   00005B   90....       MOV     DPTR,#plugins
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   7002         JNZ     ??zcl_registerPlugin_2
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \                     ??zcl_registerPlugin_2:
   \   000063   90....       MOV     DPTR,#plugins
   \   000066   6014         JZ      ??zcl_registerPlugin_3
    327            {
    328              plugins = pNewItem;
    329            }
    330            else
    331            {
    332              // Look for end of list
    333              pLoop = plugins;
   \   000068   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00006B   8003         SJMP    ??zcl_registerPlugin_4
    334              while ( pLoop->next != NULL )
    335                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_5:
   \   00006D   EA           MOV     A,R2
   \   00006E   FC           MOV     R4,A
   \   00006F   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_4:
   \   000070   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000073   7001         JNZ     ??zcl_registerPlugin_6
   \   000075   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_6:
   \   000076   70F5         JNZ     ??zcl_registerPlugin_5
    336          
    337              pLoop->next = pNewItem; // Put new item at end of list
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
    338            }
   \                     ??zcl_registerPlugin_3:
   \   00007C   12....       LCALL   ?Subroutine11 & 0xFFFF
    339            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_14:
   \   00007F                REQUIRE ?Subroutine104
   \   00007F                ; // Fall through to label ?Subroutine104
    340          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine119_0
   \   000005                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine146_0
   \   000002                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    341          
    342          /*********************************************************************
    343           * @fn          zcl_registerAttrList
    344           * @brief       Register an Attribute List with ZCL Foundation
    345           * @param       endpoint - endpoint the attribute list belongs to
    346           *              numAttr - number of attributes in list
    347           *              newAttrList - array of Attribute records.
    348           *
    349           *              NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN ASCENDING ORDER.
    350           *                    OTHERWISE, THE DISCOVERY RESPONSE COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    351           * @return      ZSuccess if OK
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    354          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine62 & 0xFFFF
    355            zclAttrRecsList *pNewItem;
    356            zclAttrRecsList *pLoop;
    357          
    358            pNewItem = osal_mem_alloc( sizeof( zclAttrRecsList ) ); // Fill in the new profile list
    359            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_75:
   \   000008   7001         JNZ     ??zcl_registerAttrList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerAttrList_0:
   \   00000B   7004         JNZ     ??zcl_registerAttrList_1
    360              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_15
    361          
    362            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    363            pNewItem->endpoint = endpoint;
    364            pNewItem->numAttributes = numAttr;
    365            pNewItem->attrs = newAttrList;
    366          
    367            if ( attrList == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_0:
   \   000014   90....       MOV     DPTR,#attrList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerAttrList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerAttrList_2:
   \   00001C   90....       MOV     DPTR,#attrList
   \   00001F   6014         JZ      ??zcl_registerAttrList_3
    368            {
    369              attrList = pNewItem;
    370            }
    371            else
    372            {
    373              pLoop = attrList; // Look for end of list
   \   000021   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000024   8003         SJMP    ??zcl_registerAttrList_4
    374              while ( pLoop->next != NULL )
    375                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_4:
   \   000029   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00002C   7001         JNZ     ??zcl_registerAttrList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_6:
   \   00002F   70F5         JNZ     ??zcl_registerAttrList_5
    376          
    377              pLoop->next = pNewItem; // Put new item at end of list
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    378            }
   \                     ??zcl_registerAttrList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    379            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_15:
   \   000038   02....       LJMP    ?Subroutine103 & 0xFFFF
    380          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   89..         MOV     ?V0 + 0,R1
   \   000002   8A..         MOV     ?V0 + 1,R2
   \   000004   EC           MOV     A,R4
   \   000005   FE           MOV     R6,A
   \   000006   ED           MOV     A,R5
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A06         MOV     R2,#0x6
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 2,R2
   \   000011   8B..         MOV     ?V0 + 3,R3
   \   000013   A8..         MOV     R0,?V0 + 2
   \   000015   A9..         MOV     R1,?V0 + 3
   \   000017   E8           MOV     A,R0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00000A   A3           INC     DPTR
   \   00000B   E5..         MOV     A,?V0 + 0
   \   00000D   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000010   E5..         MOV     A,?V0 + 1
   \   000012   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000015   A3           INC     DPTR
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EF           MOV     A,R7
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    381          
    382          /*********************************************************************
    383           * @fn          zcl_registerClusterOptionList
    384           * @brief       Register a Cluster Option List with ZCL Foundation
    385           * @param       endpoint - endpoint the option list belongs to
    386           *              numOption - number of options in list
    387           *              optionList - array of cluster option records.
    388           *                           
    389           *              NOTE: This API should be called to enable 'Application Link Key' security and/or
    390           *                    'APS ACK' for a specific Cluster. The 'Application Link Key' is discarded 
    391           *                    if security isn't enabled on the device. The default behavior is 'Network Key'
    392           *                    when security is enabled and no 'APS ACK' for the ZCL messages.
    393           * @return      ZSuccess if OK
    394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    395          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    396          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine62 & 0xFFFF
    397            zclClusterOptionList *pNewItem;
    398            zclClusterOptionList *pLoop;
    399          
    400            // Fill in the new profile list
    401            pNewItem = osal_mem_alloc( sizeof( zclClusterOptionList ) );
    402            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_76:
   \   000008   7001         JNZ     ??zcl_registerClusterOptionList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerClusterOptionList_0:
   \   00000B   7004         JNZ     ??zcl_registerClusterOptionList_1
    403              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_16
    404          
    405            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    406            pNewItem->endpoint = endpoint;
    407            pNewItem->numOptions = numOption;
    408            pNewItem->options = optionList;
    409          
    410            // Find spot in list
    411            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_1:
   \   000014   90....       MOV     DPTR,#clusterOptionList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerClusterOptionList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerClusterOptionList_2:
   \   00001C   90....       MOV     DPTR,#clusterOptionList
   \   00001F   6014         JZ      ??zcl_registerClusterOptionList_3
    412            {
    413              clusterOptionList = pNewItem;
    414            }
    415            else
    416            {
    417              // Look for end of list
    418              pLoop = clusterOptionList;
   \   000021   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000024   8003         SJMP    ??zcl_registerClusterOptionList_4
    419              while ( pLoop->next != NULL )
    420                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_4:
   \   000029   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00002C   7001         JNZ     ??zcl_registerClusterOptionList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_6:
   \   00002F   70F5         JNZ     ??zcl_registerClusterOptionList_5
    421          
    422              // Put new item at end of list
    423              pLoop->next = pNewItem;
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    424            }
   \                     ??zcl_registerClusterOptionList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    425          
    426            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_16:
   \   000038   02....       LJMP    ?Subroutine103 & 0xFFFF
    427          }
    428          
    429          /*********************************************************************
    430           * @fn          zcl_registerValidateAttrData
    431           * @brief       Add a validation function for attribute data
    432           * @param       pfnValidateAttrData - function pointer to validate routine
    433           * @return      ZSuccess if OK
    434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    436          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    437            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL   ??Subroutine146_0 & 0xFFFF
    438            
    439            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_277:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   80..         SJMP    ?Subroutine102
    440          }
    441          
    442          /*********************************************************************
    443           * @fn      zcl_registerForMsg
    444           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    445           *          messages that aren't processed to one task (if a task is
    446           *          registered).
    447           * @param   taskId - task Id of the Application where commands will be sent to
    448           * @return  TRUE if task registeration successful, FALSE otherwise
    449           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    450          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    451          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    452            // Allow only the first task
    453            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000004   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64FF         XRL     A,#0xff
   \   00000A   7006         JNZ     ??zcl_registerForMsg_0
    454            {
    455              zcl_RegisteredMsgTaskID = taskId;  
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
    456              return ( true );
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8002         SJMP    ??zcl_registerForMsg_1
    457            }
    458            return ( false );
   \                     ??zcl_registerForMsg_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??zcl_registerForMsg_1:
   \   000014                REQUIRE ?Subroutine102
   \   000014                ; // Fall through to label ?Subroutine102
    459          }
    460          
    461          /*********************************************************************
    462           * @fn      zcl_DeviceOperational
    463           * @brief   Used to see whether or not the device can send or respond 
    464           *          to application level commands.
    465           * @param   srcEP - source endpoint
    466           *          clusterID - cluster ID
    467           *          frameType - command type
    468           *          cmd - command ID
    469           * @return  TRUE if device is operational, FALSE otherwise
    470           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    471          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, 
   \                     zcl_DeviceOperational:
    472                                              uint8 frameType, uint8 cmd, uint16 profileID )
    473          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    474            zclAttrRec_t attrRec;
    475            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
    476            
    477            (void)profileID;  // Intentionally unreferenced parameter
    478            
    479            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it 
    480            // cannot send or respond to application level commands, other than commands
    481            // to read or write attributes. Note that the Identify cluster cannot be 
    482            // disabled, and remains functional regardless of this setting.
    483            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000013   EC           MOV     A,R4
   \   000014   700A         JNZ     ??zcl_DeviceOperational_0
   \   000016   ED           MOV     A,R5
   \   000017   C3           CLR     C
   \   000018   9406         SUBB    A,#0x6
   \   00001A   5004         JNC     ??zcl_DeviceOperational_0
    484              return ( TRUE );
   \                     ??zcl_DeviceOperational_1:
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   804E         SJMP    ??zcl_DeviceOperational_2
    485            
    486            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV     A,#0x3
   \   000022   6A           XRL     A,R2
   \   000023   7001         JNZ     ??zcl_DeviceOperational_3
   \   000025   EB           MOV     A,R3
   \                     ??zcl_DeviceOperational_3:
   \   000026   60F4         JZ      ??zcl_DeviceOperational_1
    487              return ( TRUE );
    488            
    489            // Is device enabled?
    490            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC, ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000028                ; Setup parameters for call to function zclFindAttrRec
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   8582..       MOV     ?V0 + 0,DPL
   \   000030   8583..       MOV     ?V0 + 1,DPH
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C12         MOV     R4,#0x12
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??zclFindAttrRec?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6016         JZ      ??zcl_DeviceOperational_4
    491              zclReadAttrData( &deviceEnabled, &attrRec );
   \   00004B                ; Setup parameters for call to function zclReadAttrData
   \   00004B   7401         MOV     A,#0x1
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AC82         MOV     R4,DPL
   \   000052   AD83         MOV     R5,DPH
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??zclReadAttrData?relay
    492            
    493            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_4:
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   60B0         JZ      ??zcl_DeviceOperational_1
   \   00006C   7900         MOV     R1,#0x0
   \                     ??zcl_DeviceOperational_2:
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   02....       LJMP    ?Subroutine112 & 0xFFFF
    494          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    495          
    496          /*********************************************************************
    497           * @fn      zcl_SendCommand
    498           * @brief   Used to send Profile and Cluster Specific Command messages.
    499           *          NOTE: The calling application is responsible for incrementing the Sequence Number.                
    500           * @param   srcEp - source endpoint
    501           *          destAddr - destination address 
    502           *          clusterID - cluster ID
    503           *          cmd - command ID
    504           *          specific - whether the command is Cluster Specific
    505           *          direction - client/server direction of the command
    506           *          disableDefaultRsp - disable Default Response command
    507           *          manuCode - manufacturer code for proprietary extensions to a profile
    508           *          seqNumber - identification number for the transaction
    509           *          cmdFormatLen - length of the command to be sent
    510           *          cmdFormat - command to be sent
    511           * @return  ZSuccess if OK
    512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
    514                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
    515                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
    516                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    517          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
   \   000010   742A         MOV     A,#0x2a
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   742B         MOV     A,#0x2b
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
   \   00001F   742C         MOV     A,#0x2c
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   742D         MOV     A,#0x2d
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
   \   00002F   742E         MOV     A,#0x2e
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 12,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 13,A
   \   00003B   7430         MOV     A,#0x30
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 7,A
   \   000043   7431         MOV     A,#0x31
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 14,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 15,A
    518            endPointDesc_t *epDesc;
    519            zclFrameHdr_t hdr;
    520            uint8 *msgBuf;
    521            uint16 msgLen;
    522            uint8 *pBuf;
    523            afAddrType_t dstAddr;
    524            uint8 options;
    525            ZStatus_t status;
    526          
    527            osal_memcpy( &dstAddr, destAddr, sizeof ( afAddrType_t ) );
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8A..         MOV     ?V0 + 4,R2
   \   000051   8B..         MOV     ?V0 + 5,R3
   \   000053   75..00       MOV     ?V0 + 6,#0x0
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C0C         MOV     R4,#0xc
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    528          
    529            epDesc = afFindEndPointDesc( srcEP );
   \   00006E                ; Setup parameters for call to function afFindEndPointDesc
   \   00006E   EF           MOV     A,R7
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??afFindEndPointDesc?relay
   \   000073   8A..         MOV     ?V0 + 10,R2
   \   000075   8B..         MOV     ?V0 + 11,R3
    530            if ( epDesc == NULL )
   \   000077   EA           MOV     A,R2
   \   000078   7001         JNZ     ??zcl_SendCommand_0
   \   00007A   EB           MOV     A,R3
   \                     ??zcl_SendCommand_0:
   \   00007B   7005         JNZ     ??zcl_SendCommand_1
    531              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_2:
   \   00007D   7902         MOV     R1,#0x2
   \   00007F   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    532          
    533            if ( clusterID == ZCL_INVALID_CLUSTER_ID )
   \                     ??zcl_SendCommand_1:
   \   000082   74FF         MOV     A,#-0x1
   \   000084   65..         XRL     A,?V0 + 0
   \   000086   7004         JNZ     ??zcl_SendCommand_4
   \   000088   74FF         MOV     A,#-0x1
   \   00008A   65..         XRL     A,?V0 + 1
   \                     ??zcl_SendCommand_4:
   \   00008C   60EF         JZ      ??zcl_SendCommand_2
    534              return ( ZInvalidParameter ); // EMBEDDED RETURN
    535          
    536          #if defined ( INTER_PAN )
    537            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
    538              options = AF_TX_OPTIONS_NONE;
    539            else
    540          #endif
    541              options = zclGetClusterOption( srcEP, clusterID );
   \   00008E                ; Setup parameters for call to function zclGetClusterOption
   \   00008E   AA..         MOV     R2,?V0 + 0
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   EF           MOV     A,R7
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??zclGetClusterOption?relay
   \   000097   E9           MOV     A,R1
   \   000098   F5..         MOV     ?V0 + 2,A
    542            
    543            osal_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \   00009A                ; Setup parameters for call to function osal_memset
   \   00009A   7C06         MOV     R4,#0x6
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??osal_memset?relay
    544          
    545            // Not Profile wide command (like READ, WRITE)
    546            if ( specific )
   \   0000AD   E5..         MOV     A,?V0 + 3
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   6015         JZ      ??zcl_SendCommand_5
    547              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   54FC         ANL     A,#0xfc
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   7401         MOV     A,#0x1
   \   0000C0   48           ORL     A,R0
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E9           MOV     A,R1
   \   0000CA   8006         SJMP    ??zcl_SendCommand_6
    548            else
    549              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_5:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   54FC         ANL     A,#0xfc
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \                     ??zcl_SendCommand_6:
   \   0000D2   F0           MOVX    @DPTR,A
    550          
    551            if ((epDesc->simpleDesc == NULL) ||
    552                (zcl_DeviceOperational(srcEP, clusterID, hdr.fc.type, cmd, epDesc->simpleDesc->AppProfId) == FALSE))
   \   0000D3   85..82       MOV     DPL,?V0 + 10
   \   0000D6   85..83       MOV     DPH,?V0 + 11
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000DF   7002         JNZ     ??zcl_SendCommand_7
   \   0000E1   E583         MOV     A,DPH
   \                     ??zcl_SendCommand_7:
   \   0000E3   6020         JZ      ??zcl_SendCommand_8
   \   0000E5                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E5   A3           INC     DPTR
   \   0000E6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000E9   EE           MOV     A,R6
   \   0000EA   FD           MOV     R5,A
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   5403         ANL     A,#0x3
   \   0000F3   FC           MOV     R4,A
   \   0000F4   AA..         MOV     R2,?V0 + 0
   \   0000F6   AB..         MOV     R3,?V0 + 1
   \   0000F8   EF           MOV     A,R7
   \   0000F9   F9           MOV     R1,A
   \   0000FA   12....       LCALL   ??zcl_DeviceOperational?relay
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000102   E9           MOV     A,R1
   \   000103   7005         JNZ     ??zcl_SendCommand_9
    553              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_8:
   \   000105   7901         MOV     R1,#0x1
   \   000107   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    554            
    555            if ( manuCode != 0 ) // Fill in the Maufacturer Code
   \                     ??zcl_SendCommand_9:
   \   00010A   E5..         MOV     A,?V0 + 12
   \   00010C   7002         JNZ     ??zcl_SendCommand_10
   \   00010E   E5..         MOV     A,?V0 + 13
   \                     ??zcl_SendCommand_10:
   \   000110   6019         JZ      ??zcl_SendCommand_11
    556            {
    557              hdr.fc.manuSpecific = 1;
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   4404         ORL     A,#0x4
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F0           MOVX    @DPTR,A
    558              hdr.manuCode = manuCode;
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E5..         MOV     A,?V0 + 12
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   E5..         MOV     A,?V0 + 13
   \   00012A   F0           MOVX    @DPTR,A
    559            }
    560            
    561            if ( direction ) // Set the Command Direction
   \                     ??zcl_SendCommand_11:
   \   00012B   E5..         MOV     A,?V0 + 9
   \   00012D   85..82       MOV     DPL,?XSP + 0
   \   000130   85..83       MOV     DPH,?XSP + 1
   \   000133   6005         JZ      ??zcl_SendCommand_12
    562              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000135   E0           MOVX    A,@DPTR
   \   000136   4408         ORL     A,#0x8
   \   000138   8003         SJMP    ??zcl_SendCommand_13
    563            else
    564              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_12:
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   54F7         ANL     A,#0xf7
   \                     ??zcl_SendCommand_13:
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F0           MOVX    @DPTR,A
    565          
    566            if ( disableDefaultRsp ) // Set the Disable Default Response field
   \   000141   E5..         MOV     A,?V0 + 8
   \   000143   85..82       MOV     DPL,?XSP + 0
   \   000146   85..83       MOV     DPH,?XSP + 1
   \   000149   6005         JZ      ??zcl_SendCommand_14
    567              hdr.fc.disableDefaultRsp = 1;
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   4410         ORL     A,#0x10
   \   00014E   8003         SJMP    ??zcl_SendCommand_15
    568            else
    569              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_14:
   \   000150   E0           MOVX    A,@DPTR
   \   000151   54EF         ANL     A,#0xef
   \                     ??zcl_SendCommand_15:
   \   000153   F0           MOVX    @DPTR,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F0           MOVX    @DPTR,A
    570                               
    571            hdr.transSeqNum = seqNum; // Fill in the Transaction Sequence Number
   \   000157   7404         MOV     A,#0x4
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E5..         MOV     A,?V0 + 7
   \   00015E   F0           MOVX    @DPTR,A
    572            
    573            hdr.commandID = cmd; // Fill in the command
   \   00015F   7405         MOV     A,#0x5
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   EE           MOV     A,R6
   \   000165   F0           MOVX    @DPTR,A
    574            
    575            msgLen = zclCalcHdrSize( &hdr ); // calculate the needed buffer size
   \   000166   75..03       MOV     ?V0 + 4,#0x3
   \   000169   85..82       MOV     DPL,?XSP + 0
   \   00016C   85..83       MOV     DPH,?XSP + 1
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   5404         ANL     A,#0x4
   \   000172   6003         JZ      ??zcl_SendCommand_16
   \   000174   75..05       MOV     ?V0 + 4,#0x5
    576            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_16:
   \   000177   E5..         MOV     A,?V0 + 14
   \   000179   25..         ADD     A,?V0 + 4
   \   00017B   F5..         MOV     ?V0 + 12,A
   \   00017D   E5..         MOV     A,?V0 + 15
   \   00017F   3400         ADDC    A,#0x0
   \   000181   F5..         MOV     ?V0 + 13,A
    577          
    578            msgBuf = osal_mem_alloc( msgLen ); // Allocate the buffer needed
   \   000183                ; Setup parameters for call to function osal_mem_alloc
   \   000183   AA..         MOV     R2,?V0 + 12
   \   000185   FB           MOV     R3,A
   \   000186   12....       LCALL   ??osal_mem_alloc?relay
   \   000189   8A..         MOV     ?V0 + 8,R2
   \   00018B   8B..         MOV     ?V0 + 9,R3
    579            if ( msgBuf != NULL )
   \   00018D   EA           MOV     A,R2
   \   00018E   7001         JNZ     ??zcl_SendCommand_17
   \   000190   EB           MOV     A,R3
   \                     ??zcl_SendCommand_17:
   \   000191   606B         JZ      ??zcl_SendCommand_18
    580            {
    581              pBuf = zclBuildHdr( &hdr, msgBuf ); // Fill in the ZCL Header
    582          
    583              osal_memcpy( pBuf, cmdFormat, cmdFormatLen ); // Fill in the command frame
   \   000193                ; Setup parameters for call to function osal_memcpy
   \   000193   7433         MOV     A,#0x33
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00019B   78..         MOV     R0,#?V0 + 4
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A0                ; Setup parameters for call to function zclBuildHdr
   \   0001A0   AC..         MOV     R4,?V0 + 8
   \   0001A2   AD..         MOV     R5,?V0 + 9
   \   0001A4   7403         MOV     A,#0x3
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   AA82         MOV     R2,DPL
   \   0001AB   AB83         MOV     R3,DPH
   \   0001AD   12....       LCALL   ??zclBuildHdr?relay
   \   0001B0   AC..         MOV     R4,?V0 + 14
   \   0001B2   AD..         MOV     R5,?V0 + 15
   \   0001B4   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
    584          
    585              status = AF_DataRequest( &dstAddr, epDesc, clusterID, msgLen, msgBuf, 
    586                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );  
   \   0001BA                ; Setup parameters for call to function AF_DataRequest
   \   0001BA   75..1E       MOV     ?V0 + 3,#0x1e
   \   0001BD   78..         MOV     R0,#?V0 + 3
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C2   75....       MOV     ?V0 + 4,#(zcl_TransID & 0xff)
   \   0001C5   75....       MOV     ?V0 + 5,#((zcl_TransID >> 8) & 0xff)
   \   0001C8   78..         MOV     R0,#?V0 + 4
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CD   78..         MOV     R0,#?V0 + 8
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   78..         MOV     R0,#?V0 + 12
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   78..         MOV     R0,#?V0 + 0
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   A9..         MOV     R1,?V0 + 2
   \   0001DE   AC..         MOV     R4,?V0 + 10
   \   0001E0   AD..         MOV     R5,?V0 + 11
   \   0001E2   740F         MOV     A,#0xf
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   AA82         MOV     R2,DPL
   \   0001E9   AB83         MOV     R3,DPH
   \   0001EB   12....       LCALL   ??AF_DataRequest?relay
   \   0001EE   7409         MOV     A,#0x9
   \   0001F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F3   E9           MOV     A,R1
   \   0001F4   FE           MOV     R6,A
    587              osal_mem_free ( msgBuf );
   \   0001F5                ; Setup parameters for call to function osal_mem_free
   \   0001F5   AA..         MOV     R2,?V0 + 8
   \   0001F7   AB..         MOV     R3,?V0 + 9
   \   0001F9   12....       LCALL   ??osal_mem_free?relay
   \   0001FC   8002         SJMP    ??zcl_SendCommand_19
    588            }
    589            else
    590              status = ZMemError;
   \                     ??zcl_SendCommand_18:
   \   0001FE   7E10         MOV     R6,#0x10
    591          
    592            return ( status );
   \                     ??zcl_SendCommand_19:
   \   000200   EE           MOV     A,R6
   \   000201   F9           MOV     R1,A
   \                     ??zcl_SendCommand_3:
   \   000202                REQUIRE ?Subroutine118
   \   000202                ; // Fall through to label ?Subroutine118
    593          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   7412         MOV     A,#0x12
   \   000002   80..         SJMP    ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    594          
    595          #ifdef ZCL_READ
    596          /*********************************************************************
    597           * @fn      zcl_SendRead
    598           * @brief   Send a Read command
    599           * @param   srcEP - Application's endpoint
    600           *          dstAddr - destination address
    601           *          clusterID - cluster ID
    602           *          readCmd - read command to be sent
    603           *          direction - direction of the command
    604           *          seqNum - transaction sequence number
    605           * @return  ZSuccess if OK
    606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    607          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
    608                                  uint16 clusterID, zclReadCmd_t *readCmd,
    609                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
    610          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 8,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 9,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 12,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 13,A
    611            uint8 dataLen;
    612            uint8 *buf;
    613            uint8 *pBuf;
    614            ZStatus_t status;
    615          
    616            dataLen = readCmd->numAttr * 2; // Attribute ID
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   33           RLC     A
   \   000036   FA           MOV     R2,A
    617          
    618            buf = osal_mem_alloc( dataLen );
   \   000037   8A82         MOV     DPL,R2
   \   000039   8582..       MOV     ?V0 + 6,DPL
   \   00003C   75..00       MOV     ?V0 + 7,#0x0
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   12....       LCALL   ?Subroutine63 & 0xFFFF
    619            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_77:
   \   000042   7001         JNZ     ??zcl_SendRead_0
   \   000044   EB           MOV     A,R3
   \                     ??zcl_SendRead_0:
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??zcl_SendRead_1 & 0xFFFF
    620            {
    621              uint8 i;
    622          
    623              pBuf = buf; // Load the buffer - serially
   \   00004A   A8..         MOV     R0,?V0 + 2
   \   00004C   A9..         MOV     R1,?V0 + 3
    624              for (i = 0; i < readCmd->numAttr; i++)
   \   00004E   75..00       MOV     ?V0 + 10,#0x0
   \   000051   801F         SJMP    ??zcl_SendRead_2
    625              {
    626                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_3:
   \   000053   E5..         MOV     A,?V0 + 10
   \   000055   C3           CLR     C
   \   000056   33           RLC     A
   \   000057   FA           MOV     R2,A
   \   000058   E4           CLR     A
   \   000059   33           RLC     A
   \   00005A   FB           MOV     R3,A
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   2A           ADD     A,R2
   \   00005E   F582         MOV     DPL,A
   \   000060   E5..         MOV     A,?V0 + 5
   \   000062   3B           ADDC    A,R3
   \   000063   F583         MOV     DPH,A
   \   000065   A3           INC     DPTR
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ?Subroutine42 & 0xFFFF
    627                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   \                     ??CrossCallReturnLabel_156:
   \   00006D   12....       LCALL   ?Subroutine28 & 0xFFFF
    628              }
   \                     ??CrossCallReturnLabel_165:
   \   000070   05..         INC     ?V0 + 10
   \                     ??zcl_SendRead_2:
   \   000072   85..82       MOV     DPL,?V0 + 4
   \   000075   85..83       MOV     DPH,?V0 + 5
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FA           MOV     R2,A
   \   00007A   E5..         MOV     A,?V0 + 10
   \   00007C   C3           CLR     C
   \   00007D   9A           SUBB    A,R2
   \   00007E   40D3         JC      ??zcl_SendRead_3
    629              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
    630                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );  
   \   000080                ; Setup parameters for call to function zcl_SendCommand
   \   000080   78..         MOV     R0,#?V0 + 2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   78..         MOV     R0,#?V0 + 6
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   E5..         MOV     A,?V0 + 13
   \   00008C   F5..         MOV     ?V0 + 4,A
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..00       MOV     ?V0 + 4,#0x0
   \   000096   75..00       MOV     ?V0 + 5,#0x0
   \   000099   78..         MOV     R0,#?V0 + 4
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   E5..         MOV     A,?V0 + 12
   \   0000A0   F5..         MOV     ?V0 + 4,A
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   E5..         MOV     A,?V0 + 9
   \   0000A9   F5..         MOV     ?V0 + 4,A
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..00       MOV     ?V0 + 4,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   78..         MOV     R0,#?V0 + 4
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   AC..         MOV     R4,?V0 + 0
   \   0000BF   AD..         MOV     R5,?V0 + 1
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   A9..         MOV     R1,?V0 + 8
   \   0000C7   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
   \   0000CE   FE           MOV     R6,A
    631              osal_mem_free( buf );
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V0 + 2
   \   0000D1   AB..         MOV     R3,?V0 + 3
   \   0000D3   12....       LCALL   ??osal_mem_free?relay
   \   0000D6   8002         SJMP    ??zcl_SendRead_4
    632            }
    633            else
    634              status = ZMemError;
   \                     ??zcl_SendRead_1:
   \   0000D8   7E10         MOV     R6,#0x10
    635          
    636            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000DA                REQUIRE ?Subroutine114
   \   0000DA                ; // Fall through to label ?Subroutine114
    637          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine121_0
   \   000002                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine122_0
   \   000005                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   A882         MOV     R0,DPL
   \   000002   A983         MOV     R1,DPH
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_mem_alloc?relay
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   7418         MOV     A,#0x18
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   02....       LJMP    ?Subroutine109 & 0xFFFF
    638          
    639          /*********************************************************************
    640           * @fn      zcl_SendReadRsp
    641           * @brief   Send a Read Response command.
    642           * @param   srcEP - Application's endpoint
    643           *          dstAddr - destination address
    644           *          clusterID - cluster ID
    645           *          readRspCmd - read response command to be sent
    646           *          direction - direction of the command
    647           *          seqNum - transaction sequence number
    648           * @return  ZSuccess if OK
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7404         MOV     A,#0x4
   \   000004                REQUIRE ??Subroutine120_0
   \   000004                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
    651                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
    652                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    653          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 10,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 9,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 8,A
    654            uint8 *buf;
    655            uint8 *pBuf;
    656            zclReadRspStatus_t *statusRec;
    657            uint8 len = 0;
   \   00002E   7E00         MOV     R6,#0x0
    658            uint8 i;
    659            ZStatus_t status;
    660            
    661            // calculate the size of the command
    662            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000030   8E..         MOV     ?V0 + 5,R6
   \   000032   8021         SJMP    ??zcl_SendReadRsp_0
    663            {
    664              statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_1:
   \   000034   E5..         MOV     A,?V0 + 5
   \   000036   75F006       MOV     B,#0x6
   \   000039   12....       LCALL   ?Subroutine73 & 0xFFFF
    665              
    666              len += 2 + 1; // Attribute ID + Status
   \                     ??CrossCallReturnLabel_93:
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   0E           INC     R6
    667          
    668              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   700F         JNZ     ??zcl_SendReadRsp_2
    669              {
    670                len++; // Attribute Data Type
    671                len += zclGetAttrDataLength( statusRec->dataType, statusRec->data); // Attribute Data
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine43 & 0xFFFF
    672              }
    673            }
   \                     ??CrossCallReturnLabel_53:
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000050   04           INC     A
   \   000051   2E           ADD     A,R6
   \   000052   FE           MOV     R6,A
   \                     ??zcl_SendReadRsp_2:
   \   000053   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_0:
   \   000055   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000058   40DA         JC      ??zcl_SendReadRsp_1
    674          
    675            buf = osal_mem_alloc( len );
   \   00005A   12....       LCALL   ?Subroutine64 & 0xFFFF
    676            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_79:
   \   00005D   7001         JNZ     ??zcl_SendReadRsp_3
   \   00005F   EB           MOV     A,R3
   \                     ??zcl_SendReadRsp_3:
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??zcl_SendReadRsp_4 & 0xFFFF
    677            {
    678              // Load the buffer - serially
    679              pBuf = buf;
   \   000065   AE..         MOV     R6,?V0 + 6
   \   000067   AF..         MOV     R7,?V0 + 7
    680              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000069   75..00       MOV     ?V0 + 5,#0x0
   \   00006C   8028         SJMP    ??zcl_SendReadRsp_5
    681              {
    682                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_6:
   \   00006E   E5..         MOV     A,?V0 + 5
   \   000070   75F006       MOV     B,#0x6
   \   000073   12....       LCALL   ?Subroutine1 & 0xFFFF
    683                
    684                *pBuf++ = LO_UINT16( statusRec->attrID );
    685                *pBuf++ = HI_UINT16( statusRec->attrID );
    686                *pBuf++ = statusRec->status;
   \                     ??CrossCallReturnLabel_2:
   \   000076   FA           MOV     R2,A
   \   000077   E9           MOV     A,R1
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FB           MOV     R3,A
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   12....       LCALL   ?Subroutine97 & 0xFFFF
    687          
    688                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_127:
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   700B         JNZ     ??CrossCallReturnLabel_152
    689                {
    690                  *pBuf++ = statusRec->dataType;
   \   000089   E8           MOV     A,R0
   \   00008A   2403         ADD     A,#0x3
   \   00008C   12....       LCALL   ?Subroutine44 & 0xFFFF
    691                  zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
    692                  
    693                  // move pass attribute data
    694                  pBuf += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
    695                }
    696              } // for loop
   \                     ??CrossCallReturnLabel_55:
   \   00008F   2404         ADD     A,#0x4
   \   000091   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000094   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_5:
   \   000096   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000099   40D3         JC      ??zcl_SendReadRsp_6
    697          
    698              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE, 
    699                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \   00009B                ; Setup parameters for call to function zcl_SendCommand
   \   00009B   78..         MOV     R0,#?V0 + 6
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   E5..         MOV     A,?V0 + 8
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   75..00       MOV     ?V0 + 0,#0x0
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   E5..         MOV     A,?V0 + 9
   \   0000B8   F5..         MOV     ?V0 + 0,A
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   E5..         MOV     A,?V0 + 10
   \   0000C1   F5..         MOV     ?V0 + 0,A
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   75..00       MOV     ?V0 + 0,#0x0
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   75..01       MOV     ?V0 + 0,#0x1
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   740B         MOV     A,#0xb
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0000E0   740D         MOV     A,#0xd
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   \   0000EC   FE           MOV     R6,A
    700              osal_mem_free( buf );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV     R2,?V0 + 6
   \   0000EF   AB..         MOV     R3,?V0 + 7
   \   0000F1   12....       LCALL   ??osal_mem_free?relay
   \   0000F4   8002         SJMP    ??zcl_SendReadRsp_7
    701            }
    702            else
    703              status = ZMemError;
   \                     ??zcl_SendReadRsp_4:
   \   0000F6   7E10         MOV     R6,#0x10
    704          
    705            return ( status );
   \                     ??zcl_SendReadRsp_7:
   \   0000F8   02....       LJMP    ?Subroutine113 & 0xFFFF
    706          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000005   E9           MOV     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000007                REQUIRE ?Subroutine109
   \   000007                ; // Fall through to label ?Subroutine109

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   75..00       MOV     ?V0 + 1,#0x0
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   AA..         MOV     R2,?V0 + 0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   EA           MOV     A,R2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   741E         MOV     A,#0x1e
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F5..         MOV     ?V0 + 12,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 13,A
   \   000007   85..82       MOV     DPL,?V0 + 12
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   E5..         MOV     A,?V0 + 5
   \   00000A   C3           CLR     C
   \   00000B   9A           SUBB    A,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   A9..         MOV     R1,?V0 + 4
   \   000005   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F5..         MOV     ?V0 + 14,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007   EE           MOV     A,R6
   \   000008   FC           MOV     R4,A
   \   000009   EF           MOV     A,R7
   \   00000A   FD           MOV     R5,A
   \   00000B   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00000E   12....       LCALL   ??zclSerializeData?relay
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000014   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000017   E9           MOV     A,R1
   \   000018   F8           MOV     R0,A
   \   000019   EE           MOV     A,R6
   \   00001A   28           ADD     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C                REQUIRE ?Subroutine108
   \   00001C                ; // Fall through to label ?Subroutine108

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   85..82       MOV     DPL,?V0 + 12
   \   00000E   85..83       MOV     DPH,?V0 + 13
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   EC           MOV     A,R4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   ED           MOV     A,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   89..         MOV     ?V0 + 4,R1
   \   000012   741C         MOV     A,#0x1c
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   AE82         MOV     R6,DPL
   \   00000C   AF83         MOV     R7,DPH
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000016   2402         ADD     A,#0x2
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine129_0
   \   000003                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 3
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   FD           MOV     R5,A
   \   000004   22           RET
    707          #endif // ZCL_READ
    708          
    709          #ifdef ZCL_WRITE
    710          /*********************************************************************
    711           * @fn      sendWriteRequest
    712           * @brief   Send a Write command
    713           * @param   dstAddr - destination address
    714           *          clusterID - cluster ID
    715           *          writeCmd - write command to be sent
    716           *          cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
    717           *          direction - direction of the command
    718           *          seqNum - transaction sequence number
    719           * @return  ZSuccess if OK
    720           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    721          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, 
   \                     zcl_SendWriteRequest:
    722                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction, 
    723                                          uint8 disableDefaultRsp, uint8 seqNum )
    724          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 10,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 9,A
   \   00002E   7421         MOV     A,#0x21
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 8,A
    725            uint8 *buf;
    726            uint8 *pBuf;
    727            zclWriteRec_t *statusRec;
    728            uint8 attrDataLen;
    729            uint8 dataLen = 0;
   \   000036   7E00         MOV     R6,#0x0
    730            uint8 i;
    731            ZStatus_t status;
    732            
    733            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000038   8E..         MOV     ?V0 + 5,R6
   \   00003A   8014         SJMP    ??zcl_SendWriteRequest_0
    734            {
    735              statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   00003C   E5..         MOV     A,?V0 + 5
   \   00003E   75F005       MOV     B,#0x5
   \   000041   12....       LCALL   ?Subroutine73 & 0xFFFF
    736              
    737              attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    738              dataLen += 2 + 1 + attrDataLen; // Attribute ID + Attribute Type + Attribute Data
   \                     ??CrossCallReturnLabel_94:
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   12....       LCALL   ?Subroutine43 & 0xFFFF
    739            }
   \                     ??CrossCallReturnLabel_54:
   \   000047   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   00004A   2403         ADD     A,#0x3
   \   00004C   2E           ADD     A,R6
   \   00004D   FE           MOV     R6,A
   \   00004E   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_0:
   \   000050   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000053   40E7         JC      ??zcl_SendWriteRequest_1
    740          
    741            buf = osal_mem_alloc( dataLen );
   \   000055   12....       LCALL   ?Subroutine64 & 0xFFFF
    742            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_80:
   \   000058   7001         JNZ     ??zcl_SendWriteRequest_2
   \   00005A   EB           MOV     A,R3
   \                     ??zcl_SendWriteRequest_2:
   \   00005B   607C         JZ      ??zcl_SendWriteRequest_3
    743            {
    744              // Load the buffer - serially
    745              pBuf = buf;
   \   00005D   AE..         MOV     R6,?V0 + 6
   \   00005F   AF..         MOV     R7,?V0 + 7
    746              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000061   75..00       MOV     ?V0 + 5,#0x0
   \   000064   8012         SJMP    ??zcl_SendWriteRequest_4
    747              { 
    748                statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_5:
   \   000066   E5..         MOV     A,?V0 + 5
   \   000068   75F005       MOV     B,#0x5
   \   00006B   12....       LCALL   ?Subroutine1 & 0xFFFF
    749                
    750                *pBuf++ = LO_UINT16( statusRec->attrID );
    751                *pBuf++ = HI_UINT16( statusRec->attrID );
    752                *pBuf++ = statusRec->dataType;
    753                
    754                zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
    755                
    756                attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    757                pBuf += attrDataLen; // move pass attribute data
    758              }
   \                     ??CrossCallReturnLabel_3:
   \   00006E   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000071   2403         ADD     A,#0x3
   \   000073   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000076   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_4:
   \   000078   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00007B   40E9         JC      ??zcl_SendWriteRequest_5
    759          
    760              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE, 
    761                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007D                ; Setup parameters for call to function zcl_SendCommand
   \   00007D   78..         MOV     R0,#?V0 + 6
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   E5..         MOV     A,?V0 + 8
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   75..00       MOV     ?V0 + 0,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   E5..         MOV     A,?V0 + 9
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   E5..         MOV     A,?V0 + 10
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   75..00       MOV     ?V0 + 0,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   E5..         MOV     A,?V0 + 11
   \   0000B4   F5..         MOV     ?V0 + 0,A
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000C3   740D         MOV     A,#0xd
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   E9           MOV     A,R1
   \   0000CF   FE           MOV     R6,A
    762              osal_mem_free( buf );
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   AA..         MOV     R2,?V0 + 6
   \   0000D2   AB..         MOV     R3,?V0 + 7
   \   0000D4   12....       LCALL   ??osal_mem_free?relay
   \   0000D7   8002         SJMP    ??zcl_SendWriteRequest_6
    763            }
    764            else
    765              status = ZMemError;
   \                     ??zcl_SendWriteRequest_3:
   \   0000D9   7E10         MOV     R6,#0x10
    766          
    767            return ( status);
   \                     ??zcl_SendWriteRequest_6:
   \   0000DB   02....       LJMP    ?Subroutine113 & 0xFFFF
    768          }
    769          
    770          /*********************************************************************
    771           * @fn      zcl_SendWriteRsp
    772           * @brief   Send a Write Response command
    773           * @param   dstAddr - destination address
    774           *          clusterID - cluster ID
    775           *          wrtieRspCmd - write response command to be sent
    776           *          direction - direction of the command
    777           *          seqNum - transaction sequence number
    778           * @return  ZSuccess if OK
    779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    780          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
    781                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
    782                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    783          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 6,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 7,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 10,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 11,A
    784            uint8 dataLen;
    785            uint8 *buf;
    786            uint8 *pBuf;
    787            uint8 i;
    788            ZStatus_t status;
    789            
    790            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \   00002D   75F003       MOV     B,#0x3
   \   000030   85..82       MOV     DPL,?V0 + 4
   \   000033   85..83       MOV     DPH,?V0 + 5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   A4           MUL     AB
   \   000038   F5..         MOV     ?V0 + 12,A
    791          
    792            buf = osal_mem_alloc( dataLen );
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   FA           MOV     R2,A
   \   00003B   12....       LCALL   ?Subroutine63 & 0xFFFF
    793            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_78:
   \   00003E   7001         JNZ     ??zcl_SendWriteRsp_0
   \   000040   EB           MOV     A,R3
   \                     ??zcl_SendWriteRsp_0:
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??zcl_SendWriteRsp_1 & 0xFFFF
    794            {
    795              // Load the buffer - serially
    796              pBuf = buf;
   \   000046   A8..         MOV     R0,?V0 + 2
   \   000048   A9..         MOV     R1,?V0 + 3
    797              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   00004A   75..00       MOV     ?V0 + 8,#0x0
   \   00004D   802E         SJMP    ??zcl_SendWriteRsp_2
    798              { 
    799                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_3:
   \   00004F   E5..         MOV     A,?V0 + 8
   \   000051   75F003       MOV     B,#0x3
   \   000054   A4           MUL     AB
   \   000055   FA           MOV     R2,A
   \   000056   ABF0         MOV     R3,B
   \   000058   E5..         MOV     A,?V0 + 4
   \   00005A   2A           ADD     A,R2
   \   00005B   FA           MOV     R2,A
   \   00005C   E5..         MOV     A,?V0 + 5
   \   00005E   3B           ADDC    A,R3
   \   00005F   FB           MOV     R3,A
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine42 & 0xFFFF
    800                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_157:
   \   000068   EA           MOV     A,R2
   \   000069   2402         ADD     A,#0x2
   \   00006B   0A           INC     R2
   \   00006C   0A           INC     R2
   \   00006D   EB           MOV     A,R3
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    801                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_164:
   \   000078   12....       LCALL   ?Subroutine28 & 0xFFFF
    802              }
   \                     ??CrossCallReturnLabel_166:
   \   00007B   05..         INC     ?V0 + 8
   \                     ??zcl_SendWriteRsp_2:
   \   00007D   85..82       MOV     DPL,?V0 + 4
   \   000080   85..83       MOV     DPH,?V0 + 5
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   E5..         MOV     A,?V0 + 8
   \   000087   C3           CLR     C
   \   000088   9A           SUBB    A,R2
   \   000089   40C4         JC      ??zcl_SendWriteRsp_3
    803              
    804              // If there's only a single status record and its status field is set to 
    805              // SUCCESS then omit the attribute ID field.
    806              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6401         XRL     A,#0x1
   \   00008E   7007         JNZ     ??zcl_SendWriteRsp_4
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   7003         JNZ     ??zcl_SendWriteRsp_4
    807                dataLen = 1;
   \   000094   75..01       MOV     ?V0 + 12,#0x1
    808                
    809              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
    810                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_4:
   \   000097                ; Setup parameters for call to function zcl_SendCommand
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   75..00       MOV     ?V0 + 13,#0x0
   \   00009F   78..         MOV     R0,#?V0 + 12
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   E5..         MOV     A,?V0 + 11
   \   0000A6   F5..         MOV     ?V0 + 4,A
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   75..00       MOV     ?V0 + 4,#0x0
   \   0000B0   75..00       MOV     ?V0 + 5,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   E5..         MOV     A,?V0 + 10
   \   0000BA   F5..         MOV     ?V0 + 4,A
   \   0000BC   78..         MOV     R0,#?V0 + 4
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   E5..         MOV     A,?V0 + 7
   \   0000C3   F5..         MOV     ?V0 + 4,A
   \   0000C5   78..         MOV     R0,#?V0 + 4
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   75..00       MOV     ?V0 + 4,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   75..04       MOV     ?V0 + 4,#0x4
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   AC..         MOV     R4,?V0 + 0
   \   0000DC   AD..         MOV     R5,?V0 + 1
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FB           MOV     R3,A
   \   0000E2   A9..         MOV     R1,?V0 + 6
   \   0000E4   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   FE           MOV     R6,A
    811              osal_mem_free( buf );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   AA..         MOV     R2,?V0 + 2
   \   0000EE   AB..         MOV     R3,?V0 + 3
   \   0000F0   12....       LCALL   ??osal_mem_free?relay
   \   0000F3   8002         SJMP    ??zcl_SendWriteRsp_5
    812            }
    813            else
    814              status = ZMemError;
   \                     ??zcl_SendWriteRsp_1:
   \   0000F5   7E10         MOV     R6,#0x10
    815          
    816            return ( status );
   \                     ??zcl_SendWriteRsp_5:
   \   0000F7   02....       LJMP    ?Subroutine114 & 0xFFFF
    817          }
    818          #endif // ZCL_WRITE
    819          
    820          #ifdef ZCL_REPORT
    821          /*********************************************************************
    822           * @fn      zcl_SendConfigReportCmd
    823           * @brief   Send a Configure Reporting command
    824           * @param   dstAddr - destination address
    825           *          clusterID - cluster ID
    826           *          cfgReportCmd - configure reporting command to be sent
    827           *          direction - direction of the command
    828           *          seqNum - transaction sequence number
    829           * @return  ZSuccess if OK
    830           */
    831          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    832                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
    833                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    834          {
    835            uint8 *buf;
    836            uint8 *pBuf;
    837            uint8 dataLen = 0;
    838            zclCfgReportRec_t *reportRec;
    839            uint8 reportChangeLen; // length of Reportable Change field
    840            uint8 i;
    841            ZStatus_t status;
    842            
    843            // Find out the data length
    844            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    845            {
    846              reportRec = &(cfgReportCmd->attrList[i]);
    847              
    848              dataLen += 1 + 2; // Direction + Attribute ID
    849              reportChangeLen = 0;
    850              
    851              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    852              {
    853                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    854                
    855                // Find out the size of the Reportable Change field (for Analog data types)
    856                if ( zclAnalogDataType( reportRec->dataType ) )
    857                {
    858                  reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    859                  dataLen += reportChangeLen;
    860                }
    861              }
    862              else
    863              {
    864                dataLen += 2; // Timeout Period
    865              }
    866            }
    867            
    868            buf = osal_mem_alloc( dataLen );
    869            if ( buf != NULL )
    870            {
    871              // Load the buffer - serially
    872              pBuf = buf;
    873              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    874              {
    875                reportRec = &(cfgReportCmd->attrList[i]);
    876                
    877                *pBuf++ = reportRec->direction;
    878                *pBuf++ = LO_UINT16( reportRec->attrID );
    879                *pBuf++ = HI_UINT16( reportRec->attrID );
    880                
    881                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    882                {
    883                  *pBuf++ = reportRec->dataType;
    884                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
    885                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
    886                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
    887                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
    888          
    889                  if ( zclAnalogDataType( reportRec->dataType ) )
    890                  {
    891                    zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
    892                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    893                    pBuf += reportChangeLen;
    894                  }
    895                }
    896                else
    897                {
    898                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
    899                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
    900                } 
    901              } // for loop
    902              
    903              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE, 
    904                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    905              osal_mem_free( buf );
    906            }
    907            else
    908              status = ZMemError;
    909            
    910            return ( status );
    911          }
    912          
    913          /*********************************************************************
    914           * @fn      zcl_SendConfigReportRspCmd
    915           * @brief   Send a Configure Reporting Response command
    916           * @param   dstAddr - destination address
    917           *          clusterID - cluster ID
    918           *          cfgReportRspCmd - configure reporting response command to be sent
    919           *          direction - direction of the command
    920           *          seqNum - transaction sequence number
    921           * @return  ZSuccess if OK
    922           */
    923          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    924                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
    925                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    926          {
    927            uint8 dataLen;
    928            uint8 *buf;
    929            uint8 *pBuf;
    930            uint8 i;
    931            ZStatus_t status;
    932            
    933            // Atrribute list (Status, Direction and Attribute ID)
    934            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 ); 
    935            
    936            buf = osal_mem_alloc( dataLen );
    937            if ( buf != NULL )
    938            {
    939              // Load the buffer - serially
    940              pBuf = buf; 
    941              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
    942              {
    943                *pBuf++ = cfgReportRspCmd->attrList[i].status;
    944                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
    945                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
    946                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
    947              }
    948              
    949              // If there's only a single status record and its status field is set to 
    950              // SUCCESS then omit the attribute ID field.
    951              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
    952                dataLen = 1;
    953              
    954              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    955                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction, 
    956                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
    957              osal_mem_free( buf );
    958            }
    959            else
    960              status = ZMemError;
    961            
    962            return ( status );
    963          }
    964          
    965          /*********************************************************************
    966           * @fn      zcl_SendReadReportCfgCmd
    967           * @brief   Send a Read Reporting Configuration command
    968           * @param   dstAddr - destination address
    969           *          clusterID - cluster ID
    970           *          readReportCfgCmd - read reporting configuration command to be sent
    971           *          direction - direction of the command
    972           *          seqNum - transaction sequence number
    973           * @return  ZSuccess if OK
    974           */
    975          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
    976                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
    977                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    978          {
    979            uint8 dataLen;
    980            uint8 *buf;
    981            uint8 *pBuf;
    982            uint8 i;
    983            ZStatus_t status;
    984           
    985            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
    986            
    987            buf = osal_mem_alloc( dataLen );
    988            if ( buf != NULL )
    989            {
    990              // Load the buffer - serially
    991              pBuf = buf;
    992              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
    993              {
    994                *pBuf++ = readReportCfgCmd->attrList[i].direction;
    995                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
    996                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
    997              }
    998              
    999              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE, 
   1000                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1001              osal_mem_free( buf );
   1002            }
   1003            else
   1004              status = ZMemError;
   1005            
   1006            return ( status );
   1007          }
   1008          
   1009          /*********************************************************************
   1010           * @fn      zcl_SendReadReportCfgRspCmd
   1011           * @brief   Send a Read Reporting Configuration Response command
   1012           * @param   dstAddr - destination address
   1013           *          clusterID - cluster ID
   1014           *          readReportCfgRspCmd - read reporting configuration response command to be sent
   1015           *          direction - direction of the command
   1016           *          seqNum - transaction sequence number
   1017           * @return  ZSuccess if OK
   1018           */
   1019          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1020                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1021                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1022          {
   1023            uint8 *buf;
   1024            uint8 *pBuf;
   1025            uint8 dataLen = 0;
   1026            zclReportCfgRspRec_t *reportRspRec;
   1027            uint8 reportChangeLen;
   1028            uint8 i;
   1029            ZStatus_t status;
   1030          
   1031            // Find out the data length
   1032            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1033            {
   1034              reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1035              
   1036              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1037              
   1038              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1039              {
   1040                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1041                {
   1042                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1043                
   1044                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1045                  {
   1046                    reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   1047                    dataLen += reportChangeLen; // Reportable Change field
   1048                  }
   1049                }
   1050                else
   1051                {
   1052                  dataLen += 2; // Timeout Period
   1053                }
   1054              }
   1055            }
   1056            
   1057            buf = osal_mem_alloc( dataLen );
   1058            if ( buf != NULL )
   1059            {
   1060              // Load the buffer - serially
   1061              pBuf = buf;
   1062          
   1063              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1064              {
   1065                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1066          
   1067                *pBuf++ = reportRspRec->status;
   1068                *pBuf++ = reportRspRec->direction;
   1069                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1070                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1071               
   1072                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1073                {
   1074                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1075                  {
   1076                    *pBuf++ = reportRspRec->dataType;
   1077                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1078                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1079                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1080                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1081          
   1082                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1083                    {
   1084                      zclSerializeData( reportRspRec->dataType, 
   1085                                        reportRspRec->reportableChange, pBuf );
   1086                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   1087                      pBuf += reportChangeLen;
   1088                    }
   1089                  }
   1090                  else
   1091                  {
   1092                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1093                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1094                  }
   1095                }
   1096              }
   1097             
   1098              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1099                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1100                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1101              osal_mem_free( buf );
   1102            }
   1103            else
   1104              status = ZMemError;
   1105            
   1106            return ( status );
   1107          }
   1108          
   1109          /*********************************************************************
   1110           * @fn      zcl_SendReportCmd
   1111           * @brief   Send a Report command
   1112           * @param   dstAddr - destination address
   1113           *          clusterID - cluster ID
   1114           *          reportCmd - report command to be sent
   1115           *          direction - direction of the command
   1116           *          seqNum - transaction sequence number
   1117           * @return  ZSuccess if OK
   1118           */
   1119          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1120                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1121                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1122          {
   1123            zclReport_t *reportRec;
   1124            uint8 attrDataLen;
   1125            uint8 dataLen = 0;
   1126            uint8 *buf;
   1127            uint8 *pBuf;
   1128            uint8 i;
   1129            ZStatus_t status;
   1130            
   1131            // calculate the size of the command
   1132            for ( i = 0; i < reportCmd->numAttr; i++ )
   1133            {
   1134              reportRec = &(reportCmd->attrList[i]);
   1135              
   1136              dataLen += 2 + 1; // Attribute ID + data type
   1137          
   1138              attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1139              dataLen += attrDataLen; // Attribute Data
   1140            }
   1141            
   1142            buf = osal_mem_alloc( dataLen );
   1143            if ( buf != NULL )
   1144            {
   1145              // Load the buffer - serially
   1146              pBuf = buf;
   1147              for ( i = 0; i < reportCmd->numAttr; i++ )
   1148              {
   1149                reportRec = &(reportCmd->attrList[i]);
   1150                
   1151                *pBuf++ = LO_UINT16( reportRec->attrID );
   1152                *pBuf++ = HI_UINT16( reportRec->attrID );
   1153                *pBuf++ = reportRec->dataType;
   1154          
   1155                zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1156                attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1157                pBuf += attrDataLen; // move pass attribute data
   1158              }
   1159           
   1160              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE, 
   1161                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1162              osal_mem_free( buf );
   1163            }
   1164            else
   1165              status = ZMemError;
   1166            
   1167            return ( status );
   1168          }
   1169          #endif // ZCL_REPORT
   1170                 
   1171          /*********************************************************************
   1172           * @fn      zcl_SendDefaultRspCmd
   1173           * @brief   Send a Default Response command
   1174           *
   1175           *          Note: The manufacturer code field should be set if this command is being sent
   1176           *           in response to a manufacturer specific command.
   1177           * @param   dstAddr - destination address
   1178           *          clusterID - cluster ID
   1179           *          defaultRspCmd - default response command to be sent
   1180           *          direction - direction of the command
   1181           *          manuCode - manufacturer code for proprietary extensions to a profile
   1182           *          seqNum - transaction sequence number
   1183           * @return  ZSuccess if OK
   1184           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1185          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1186                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1187                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1188          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 3,A
   \   00002F   7416         MOV     A,#0x16
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
   1189            uint8 buf[2]; // Command ID and Status;
   1190          
   1191            // Load the buffer - serially
   1192            buf[0] = defaultRspCmd->commandID;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   12....       LCALL   ?Subroutine14 & 0xFFFF
   1193            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_19:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   1194          
   1195            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1196                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) ); 
   \   000050                ; Setup parameters for call to function zcl_SendCommand
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   75..02       MOV     ?V0 + 0,#0x2
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   E5..         MOV     A,?V0 + 5
   \   00006E   F5..         MOV     ?V0 + 0,A
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   EF           MOV     A,R7
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV     ?V0 + 0,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..0B       MOV     ?V0 + 0,#0xb
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   02....       LJMP    ?Subroutine104 & 0xFFFF
   1197          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   22           RET
   1198          
   1199          #ifdef ZCL_DISCOVER
   1200          /*********************************************************************
   1201           * @fn      zcl_SendDiscoverCmd
   1202           * @brief   Send a Discover command
   1203           * @param   dstAddr - destination address
   1204           *          clusterID - cluster ID
   1205           *          discoverCmd - discover command to be sent
   1206           *          direction - direction of the command
   1207           *          seqNum - transaction sequence number
   1208           * @return  ZSuccess if OK
   1209           */
   1210          ZStatus_t zcl_SendDiscoverCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1211                                      uint16 clusterID, zclDiscoverCmd_t *discoverCmd,
   1212                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1213          {
   1214            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1215            uint8 *buf;
   1216            uint8 *pBuf;
   1217            ZStatus_t status;
   1218            
   1219            buf = osal_mem_alloc( dataLen );
   1220            if ( buf != NULL )
   1221            {
   1222              // Load the buffer - serially
   1223              pBuf = buf;
   1224              *pBuf++ = LO_UINT16(discoverCmd->startAttr);
   1225              *pBuf++ = HI_UINT16(discoverCmd->startAttr);
   1226              *pBuf++ = discoverCmd->maxAttrIDs;
   1227              
   1228              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER, FALSE, 
   1229                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1230              osal_mem_free( buf );
   1231            }
   1232            else
   1233              status = ZMemError;
   1234            
   1235            return ( status );
   1236          }
   1237          
   1238          /*********************************************************************
   1239           * @fn      zcl_SendDiscoverRspCmd
   1240           * @brief   Send a Discover Response command
   1241           * @param   dstAddr - destination address
   1242           *          clusterID - cluster ID
   1243           *          reportRspCmd - report response command to be sent
   1244           *          direction - direction of the command
   1245           *          seqNum - transaction sequence number
   1246           * @return  ZSuccess if OK
   1247           */
   1248          ZStatus_t zcl_SendDiscoverRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1249                                uint16 clusterID, zclDiscoverRspCmd_t *discoverRspCmd,
   1250                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1251          {
   1252            uint8 dataLen = 1; // Discovery complete
   1253            uint8 *buf;
   1254            uint8 *pBuf;
   1255            uint8 i;
   1256            ZStatus_t status;
   1257            
   1258            // calculate the size of the command
   1259            dataLen += discoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   1260            
   1261            buf = osal_mem_alloc( dataLen );
   1262            if ( buf != NULL )
   1263            {
   1264              // Load the buffer - serially
   1265              pBuf = buf;
   1266              *pBuf++ = discoverRspCmd->discComplete;    
   1267              for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1268              {
   1269                *pBuf++ = LO_UINT16(discoverRspCmd->attrList[i].attrID);
   1270                *pBuf++ = HI_UINT16(discoverRspCmd->attrList[i].attrID);
   1271                *pBuf++ = discoverRspCmd->attrList[i].dataType;
   1272              }
   1273              
   1274              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_RSP, FALSE,
   1275                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1276              osal_mem_free( buf );
   1277            }
   1278            else
   1279              status = ZMemError;
   1280            
   1281            return ( status );
   1282          }
   1283          #endif // ZCL_DISCOVER
   1284          
   1285          /*********************************************************************
   1286           * PRIVATE FUNCTIONS
   1287           *********************************************************************/
   1288          
   1289          /*********************************************************************
   1290           * @fn      zclProcessMessageMSG
   1291           * @brief   Data message processor callback.  This function processes
   1292           *          any incoming data - probably from other devices.  So, based
   1293           *          on cluster ID, perform the intended action.
   1294           * @param   pkt - incoming message
   1295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1296          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zclProcessMessageMSG:
   1297          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 51
   \   000005   74CD         MOV     A,#-0x33
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   1298          #if defined(Coor_receiver) // The coordinator receive data
   1299            byte recv_data[30]; // receive data array
   1300            uint16 len;
   1301          #endif
   1302            
   1303          #if defined(End_Device) || defined(Router_Device) // The End Device receive data
   1304            byte receive[20];
   1305            uint16 len;
   1306          #endif  
   1307          
   1308            endPointDesc_t *epDesc;
   1309            zclIncoming_t inMsg;
   1310            zclLibPlugin_t *pInPlugin;
   1311            zclDefaultRspCmd_t defautlRspCmd;
   1312            uint8 options;
   1313            uint8 securityEnable;
   1314            uint8 interPanMsg;
   1315            ZStatus_t status = ZFailure;
   1316          
   1317            if ( pkt->cmd.DataLength == 0 ) return;   // Error, ignore the message
   \   00000E   EA           MOV     A,R2
   \   00000F   241F         ADD     A,#0x1f
   \   000011   FE           MOV     R6,A
   \   000012   EB           MOV     A,R3
   \   000013   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000016   7002         JNZ     ??zclProcessMessageMSG_0
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_0:
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1318          
   1319          #if defined(Coor_receiver)
   1320            if (pkt->cmd.DataLength > 0)
   1321            {
   1322              for(len = 0; len < pkt->cmd.DataLength; len++) // Send the recv_data to UART
   \   00001F   75..00       MOV     ?V0 + 4,#0x0
   \   000022   75..00       MOV     ?V0 + 5,#0x0
   \   000025   EA           MOV     A,R2
   \   000026   2421         ADD     A,#0x21
   \   000028   F5..         MOV     ?V0 + 0,A
   \   00002A   EB           MOV     A,R3
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   F5..         MOV     ?V0 + 1,A
   \   00002F   803D         SJMP    ??zclProcessMessageMSG_2
   1323              {
   1324                recv_data[len] = pkt->cmd.Data[len+3]; // the cmd.Data[0~2] is cluster ID.
   \                     ??zclProcessMessageMSG_3:
   \   000031   85..82       MOV     DPL,?V0 + 0
   \   000034   85..83       MOV     DPH,?V0 + 1
   \   000037   E0           MOVX    A,@DPTR
   \   000038   25..         ADD     A,?V0 + 4
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   35..         ADDC    A,?V0 + 5
   \   00003F   8A82         MOV     DPL,R2
   \   000041   F583         MOV     DPH,A
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FB           MOV     R3,A
   \   000048   7415         MOV     A,#0x15
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E582         MOV     A,DPL
   \   00004F   25..         ADD     A,?V0 + 4
   \   000051   F582         MOV     DPL,A
   \   000053   E583         MOV     A,DPH
   \   000055   35..         ADDC    A,?V0 + 5
   \   000057   F583         MOV     DPH,A
   \   000059   EB           MOV     A,R3
   \   00005A   F0           MOVX    @DPTR,A
   1325                #if defined ( LCD_SUPPORTED )
   1326                  HalLcdWriteChar(HAL_LCD_LINE_4, len, recv_data[len]);
   \   00005B                ; Setup parameters for call to function HalLcdWriteChar
   \   00005B   AA..         MOV     R2,?V0 + 4
   \   00005D   7904         MOV     R1,#0x4
   \   00005F   12....       LCALL   ??HalLcdWriteChar?relay
   1327                #endif
   1328              }
   \   000062   E5..         MOV     A,?V0 + 4
   \   000064   2401         ADD     A,#0x1
   \   000066   F5..         MOV     ?V0 + 4,A
   \   000068   E5..         MOV     A,?V0 + 5
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F5..         MOV     ?V0 + 5,A
   \                     ??zclProcessMessageMSG_2:
   \   00006E   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000071   C3           CLR     C
   \   000072   E5..         MOV     A,?V0 + 4
   \   000074   98           SUBB    A,R0
   \   000075   E5..         MOV     A,?V0 + 5
   \   000077   99           SUBB    A,R1
   \   000078   40B7         JC      ??zclProcessMessageMSG_3
   1329              HalUARTWrite(MT_UART_DEFAULT_PORT, recv_data, pkt->cmd.DataLength-2);
   \   00007A                ; Setup parameters for call to function HalUARTWrite
   \   00007A   74FE         MOV     A,#-0x2
   \   00007C   28           ADD     A,R0
   \   00007D   FC           MOV     R4,A
   \   00007E   74FF         MOV     A,#-0x1
   \   000080   39           ADDC    A,R1
   \   000081   FD           MOV     R5,A
   \   000082   7415         MOV     A,#0x15
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   AA82         MOV     R2,DPL
   \   000089   AB83         MOV     R3,DPH
   \   00008B   7900         MOV     R1,#0x0
   \   00008D   12....       LCALL   ??HalUARTWrite?relay
   1330            }
   1331          #endif
   1332          
   1333          // The device receive the uart command with RF
   1334          #if defined(End_Device) || defined(Router_Device)
   1335            if(pkt->cmd.DataLength > 0)
   1336            {
   1337              for(len = 0; len < pkt->cmd.DataLength; len++)
   1338              {
   1339                receive[len] = pkt->cmd.Data[len+3];
   1340                #if defined ( LCD_SUPPORTED )
   1341                  HalLcdWriteChar(HAL_LCD_LINE_3, len, receive[len]);
   1342                #endif
   1343              }
   1344              // Write receive coordinator command to UART
   1345              HalUARTWrite(MT_UART_DEFAULT_PORT, receive, pkt->cmd.DataLength-2);
   1346              
   1347              return ;
   1348            }
   1349          #endif  
   1350            
   1351            // Initialize
   1352            inMsg.msg = pkt;
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E5..         MOV     A,?V0 + 2
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   E5..         MOV     A,?V0 + 3
   \   00009B   F0           MOVX    @DPTR,A
   1353            inMsg.attrCmd = NULL;
   \   00009C   740E         MOV     A,#0xe
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   F0           MOVX    @DPTR,A
   1354            inMsg.pData = NULL;
   \   0000A5   740A         MOV     A,#0xa
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E4           CLR     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   F0           MOVX    @DPTR,A
   1355            inMsg.pDataLen = 0;
   \   0000AE   740C         MOV     A,#0xc
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E4           CLR     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   12....       LCALL   ?Subroutine18 & 0xFFFF
   1356          
   1357            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \                     ??CrossCallReturnLabel_20:
   \   0000B9   FC           MOV     R4,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FD           MOV     R5,A
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   AA82         MOV     R2,DPL
   \   0000C4   AB83         MOV     R3,DPH
   \   0000C6   12....       LCALL   ??zclParseHdr?relay
   \   0000C9   740A         MOV     A,#0xa
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   1358            inMsg.pDataLen = pkt->cmd.DataLength;
   1359            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_278:
   \   0000D1   740A         MOV     A,#0xa
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C3           CLR     C
   \   0000DF   98           SUBB    A,R0
   \   0000E0   F8           MOV     R0,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   99           SUBB    A,R1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   85..82       MOV     DPL,?V0 + 0
   \   0000E8   85..83       MOV     DPH,?V0 + 1
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   28           ADD     A,R0
   \   0000ED   F8           MOV     R0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   39           ADDC    A,R1
   \   0000F1   F9           MOV     R1,A
   \   0000F2   740C         MOV     A,#0xc
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   1360          
   1361            // Find the wanted endpoint
   1362            epDesc = afFindEndPointDesc( pkt->endPoint );
   \                     ??CrossCallReturnLabel_220:
   \   0000FA   E5..         MOV     A,?V0 + 2
   \   0000FC   2414         ADD     A,#0x14
   \   0000FE   FE           MOV     R6,A
   \   0000FF   E5..         MOV     A,?V0 + 3
   \   000101   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000104   12....       LCALL   ??afFindEndPointDesc?relay
   \   000107   8A..         MOV     ?V0 + 0,R2
   \   000109   8B..         MOV     ?V0 + 1,R3
   \   00010B   A8..         MOV     R0,?V0 + 0
   \   00010D   A9..         MOV     R1,?V0 + 1
   1363            if ( epDesc == NULL )
   \   00010F   E8           MOV     A,R0
   \   000110   7001         JNZ     ??zclProcessMessageMSG_4
   \   000112   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_4:
   \   000113   7003         JNZ     $+5
   \   000115   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1364              return;   // Error, ignore the message
   1365          
   1366            if ( pkt->clusterId == ZCL_INVALID_CLUSTER_ID )
   \   000118   E5..         MOV     A,?V0 + 2
   \   00011A   2404         ADD     A,#0x4
   \   00011C   F5..         MOV     ?V0 + 4,A
   \   00011E   E5..         MOV     A,?V0 + 3
   \   000120   3400         ADDC    A,#0x0
   \   000122   F5..         MOV     ?V0 + 5,A
   \   000124   85..82       MOV     DPL,?V0 + 4
   \   000127   F583         MOV     DPH,A
   \   000129   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00012C   7003         JNZ     ??zclProcessMessageMSG_5
   \   00012E   74FF         MOV     A,#-0x1
   \   000130   6B           XRL     A,R3
   \                     ??zclProcessMessageMSG_5:
   \   000131   7003         JNZ     $+5
   \   000133   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1367              return;   // Error, ignore the message
   1368            
   1369            if ((epDesc->simpleDesc == NULL) ||
   1370                (zcl_DeviceOperational(pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type, inMsg.hdr.commandID,
   1371                                             epDesc->simpleDesc->AppProfId) == FALSE))
   \   000136   E8           MOV     A,R0
   \   000137   2403         ADD     A,#0x3
   \   000139   F5..         MOV     ?V0 + 6,A
   \   00013B   E9           MOV     A,R1
   \   00013C   3400         ADDC    A,#0x0
   \   00013E   F5..         MOV     ?V0 + 7,A
   \   000140   85..82       MOV     DPL,?V0 + 6
   \   000143   F583         MOV     DPH,A
   \   000145   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000148   7002         JNZ     ??zclProcessMessageMSG_6
   \   00014A   E583         MOV     A,DPH
   \                     ??zclProcessMessageMSG_6:
   \   00014C   7003         JNZ     $+5
   \   00014E   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   000151                ; Setup parameters for call to function zcl_DeviceOperational
   \   000151   A3           INC     DPTR
   \   000152   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000155   740B         MOV     A,#0xb
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   FD           MOV     R5,A
   \   00015C   7406         MOV     A,#0x6
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   E0           MOVX    A,@DPTR
   \   000162   5403         ANL     A,#0x3
   \   000164   FC           MOV     R4,A
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   F9           MOV     R1,A
   \   00016B   12....       LCALL   ??zcl_DeviceOperational?relay
   \   00016E   7402         MOV     A,#0x2
   \   000170   12....       LCALL   ?DEALLOC_XSTACK8
   \   000173   E9           MOV     A,R1
   \   000174   7003         JNZ     $+5
   \   000176   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1372            {
   1373              return; // Error, ignore the message
   1374            }
   1375          
   1376          #if defined ( INTER_PAN )
   1377            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   1378            {
   1379              // No foundation command is supported thru Inter-PAN communication
   1380              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   1381                return;
   1382          
   1383              interPanMsg = TRUE; 
   1384              options = AF_TX_OPTIONS_NONE;
   1385            }
   1386            else
   1387          #endif
   1388            {
   1389              interPanMsg = FALSE;
   1390              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \   000179                ; Setup parameters for call to function zclGetClusterOption
   \   000179   85..82       MOV     DPL,?V0 + 4
   \   00017C   85..83       MOV     DPH,?V0 + 5
   \   00017F   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   1391            }
   \                     ??CrossCallReturnLabel_181:
   \   000182   8E82         MOV     DPL,R6
   \   000184   8F83         MOV     DPH,R7
   \   000186   E0           MOVX    A,@DPTR
   \   000187   F9           MOV     R1,A
   \   000188   12....       LCALL   ??zclGetClusterOption?relay
   \   00018B   E9           MOV     A,R1
   \   00018C   FA           MOV     R2,A
   1392            
   1393            // Local and remote Security options must match except for Default Response command
   1394            if ( !zcl_DefaultRspCmd( inMsg.hdr ) )
   \   00018D   7404         MOV     A,#0x4
   \   00018F   12....       LCALL   ?XSTACK_DISP0_8
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F8           MOV     R0,A
   \   000194   5407         ANL     A,#0x7
   \   000196   700D         JNZ     ??zclProcessMessageMSG_7
   \   000198   7409         MOV     A,#0x9
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   640B         XRL     A,#0xb
   \   0001A0   7003         JNZ     $+5
   \   0001A2   02....       LJMP    ??zclProcessMessageMSG_8 & 0xFFFF
   1395            {
   1396              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zclProcessMessageMSG_7:
   \   0001A5   EA           MOV     A,R2
   \   0001A6   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001A8   5004         JNC     ??zclProcessMessageMSG_9
   \   0001AA   D2F0         SETB    B.0
   \   0001AC   8002         SJMP    ??zclProcessMessageMSG_10
   \                     ??zclProcessMessageMSG_9:
   \   0001AE   C2F0         CLR     B.0
   \                     ??zclProcessMessageMSG_10:
   \   0001B0   A2F0         MOV     C,B.0
   \   0001B2   E4           CLR     A
   \   0001B3   92E0         MOV     0xE0 /* A   */.0,C
   \   0001B5   F5..         MOV     ?V0 + 0,A
   1397              if ( pkt->SecurityUse != securityEnable )
   \   0001B7   E5..         MOV     A,?V0 + 2
   \   0001B9   2419         ADD     A,#0x19
   \   0001BB   F582         MOV     DPL,A
   \   0001BD   E5..         MOV     A,?V0 + 3
   \   0001BF   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0001C2   65..         XRL     A,?V0 + 0
   \   0001C4   7003         JNZ     $+5
   \   0001C6   02....       LJMP    ??zclProcessMessageMSG_8 & 0xFFFF
   1398              {
   1399                if ( UNICAST_MSG( inMsg.msg ) )
   \   0001C9   7402         MOV     A,#0x2
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001D1   6003         JZ      $+5
   \   0001D3   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0001D6   7402         MOV     A,#0x2
   \   0001D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DB   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0001DE   7002         JNZ     ??zclProcessMessageMSG_11
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_11:
   \   0001E2   6003         JZ      $+5
   \   0001E4   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1400                {
   1401                  // Send a Default Response command back with no Application Link Key security
   1402                  if ( securityEnable )
   \   0001E7   E5..         MOV     A,?V0 + 0
   \   0001E9   6005         JZ      ??CrossCallReturnLabel_32
   1403                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   0001EB                ; Setup parameters for call to function zclSetSecurityOption
   \   0001EB   7C00         MOV     R4,#0x0
   \   0001ED   12....       LCALL   ?Subroutine30 & 0xFFFF
   1404                  
   1405                  defautlRspCmd.statusCode = status;
   \                     ??CrossCallReturnLabel_32:
   \   0001F0   7401         MOV     A,#0x1
   \   0001F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F5   7401         MOV     A,#0x1
   \   0001F7   F0           MOVX    @DPTR,A
   1406                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001F8   7409         MOV     A,#0x9
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   12....       LCALL   ?Subroutine51 & 0xFFFF
   1407                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1408                                         inMsg.msg->clusterId, &defautlRspCmd, 
   1409                                         ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1410                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_63:
   \   000200   12....       LCALL   ?XSTACK_DISP0_8
   \   000203   E0           MOVX    A,@DPTR
   \   000204   F5..         MOV     ?V0 + 1,A
   \   000206   78..         MOV     R0,#?V0 + 1
   \   000208   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020B   7407         MOV     A,#0x7
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000213   75..01       MOV     ?V0 + 1,#0x1
   \   000216   78..         MOV     R0,#?V0 + 1
   \   000218   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00021B   78..         MOV     R0,#?V0 + 1
   \   00021D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000220   7405         MOV     A,#0x5
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   8582..       MOV     ?V0 + 2,DPL
   \   000228   8583..       MOV     ?V0 + 3,DPH
   \   00022B   78..         MOV     R0,#?V0 + 2
   \   00022D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000230   7409         MOV     A,#0x9
   \   000232   12....       LCALL   ?XSTACK_DISP0_8
   \   000235   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000238   7409         MOV     A,#0x9
   \   00023A   12....       LCALL   ?XSTACK_DISP0_8
   \   00023D   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000240   12....       LCALL   ?XSTACK_DISP0_8
   \   000243   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000246   12....       LCALL   ?DEALLOC_XSTACK8
   1411                  if ( securityEnable )
   \   000249   E5..         MOV     A,?V0 + 0
   \   00024B   7003         JNZ     $+5
   \   00024D   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1412                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );       
   \   000250                ; Setup parameters for call to function zclSetSecurityOption
   \   000250   7C01         MOV     R4,#0x1
   \   000252   12....       LCALL   ?Subroutine30 & 0xFFFF
   1413                }
   1414                return;   // Error, ignore the message
   1415              }
   1416            }
   \                     ??CrossCallReturnLabel_33:
   \   000255   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1417            
   1418            // Is this a foundation type message
   1419            if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zclProcessMessageMSG_8:
   \   000258   E8           MOV     A,R0
   \   000259   5403         ANL     A,#0x3
   \   00025B   6003         JZ      $+5
   \   00025D   02....       LJMP    ??zclProcessMessageMSG_12 & 0xFFFF
   1420            { 
   1421              if ( inMsg.hdr.fc.manuSpecific )
   \   000260   E8           MOV     A,R0
   \   000261   5404         ANL     A,#0x4
   \   000263   6005         JZ      ??zclProcessMessageMSG_13
   1422              {
   1423                // We don't support any manufacturer specific command
   1424                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   000265   7A84         MOV     R2,#-0x7c
   \   000267   02....       LJMP    ??zclProcessMessageMSG_14 & 0xFFFF
   1425              }
   1426              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) && 
   1427                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zclProcessMessageMSG_13:
   \   00026A   7409         MOV     A,#0x9
   \   00026C   12....       LCALL   ?XSTACK_DISP0_8
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   F5..         MOV     ?V0 + 0,A
   \   000272   C3           CLR     C
   \   000273   940E         SUBB    A,#0xe
   \   000275   4003         JC      $+5
   \   000277   02....       LJMP    ??zclProcessMessageMSG_15 & 0xFFFF
   \   00027A   75..00       MOV     ?V0 + 1,#0x0
   \   00027D   7402         MOV     A,#0x2
   \   00027F   78..         MOV     R0,#?V0 + 0
   \   000281   12....       LCALL   ?S_SHL
   \   000284   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000287   F8           MOV     R0,A
   \   000288   7401         MOV     A,#0x1
   \   00028A   93           MOVC    A,@A+DPTR
   \   00028B   F9           MOV     R1,A
   \   00028C   E8           MOV     A,R0
   \   00028D   7001         JNZ     ??zclProcessMessageMSG_16
   \   00028F   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_16:
   \   000290   7003         JNZ     $+5
   \   000292   02....       LJMP    ??zclProcessMessageMSG_15 & 0xFFFF
   1428              {
   1429                zclParseCmd_t parseCmd;
   1430                
   1431                parseCmd.endpoint = pkt->endPoint;
   \   000295   8E82         MOV     DPL,R6
   \   000297   8F83         MOV     DPH,R7
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   C0E0         PUSH    A
   \   00029C   7410         MOV     A,#0x10
   \   00029E   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A1   D0E0         POP     A
   \   0002A3   F0           MOVX    @DPTR,A
   1432                parseCmd.dataLen = inMsg.pDataLen;
   \   0002A4   740C         MOV     A,#0xc
   \   0002A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A9   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   0002AC   7411         MOV     A,#0x11
   \   0002AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B1   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   1433                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_221:
   \   0002B4   740A         MOV     A,#0xa
   \   0002B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B9   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0002BC   7413         MOV     A,#0x13
   \   0002BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C1   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   1434                
   1435                // Parse the command, remember that the return value is a pointer to allocated memory
   1436                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_222:
   \   0002C4                ; Setup parameters for indirect call
   \   0002C4   7410         MOV     A,#0x10
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   AA82         MOV     R2,DPL
   \   0002CB   AB83         MOV     R3,DPH
   \   0002CD   7409         MOV     A,#0x9
   \   0002CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D2   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0002D5   12....       LCALL   ?S_SHL
   \   0002D8   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0002DB   C0E0         PUSH    A
   \   0002DD   7401         MOV     A,#0x1
   \   0002DF   93           MOVC    A,@A+DPTR
   \   0002E0   F583         MOV     DPH,A
   \   0002E2   D082         POP     DPL
   \   0002E4   12....       LCALL   ?CALL_IND
   \   0002E7   740E         MOV     A,#0xe
   \   0002E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EC   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   1437                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_279:
   \   0002EF   740E         MOV     A,#0xe
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   7002         JNZ     ??zclProcessMessageMSG_17
   \   0002F7   A3           INC     DPTR
   \   0002F8   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_17:
   \   0002F9   6047         JZ      ??zclProcessMessageMSG_18
   \   0002FB   7409         MOV     A,#0x9
   \   0002FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000300   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000303   12....       LCALL   ?S_SHL
   \   000306   E5..         MOV     A,?V0 + 0
   \   000308   24..         ADD     A,#((zclCmdTable + 2) & 0xff)
   \   00030A   F582         MOV     DPL,A
   \   00030C   E5..         MOV     A,?V0 + 1
   \   00030E   34..         ADDC    A,#(((zclCmdTable + 2) >> 8) & 0xff)
   \   000310   F583         MOV     DPH,A
   \   000312   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000315   E8           MOV     A,R0
   \   000316   7001         JNZ     ??zclProcessMessageMSG_19
   \   000318   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_19:
   \   000319   601C         JZ      ??zclProcessMessageMSG_20
   1438                { 
   1439                  // Process the command
   1440                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   00031B                ; Setup parameters for indirect call
   \   00031B   7402         MOV     A,#0x2
   \   00031D   12....       LCALL   ?XSTACK_DISP0_8
   \   000320   AA82         MOV     R2,DPL
   \   000322   AB83         MOV     R3,DPH
   \   000324   8882         MOV     DPL,R0
   \   000326   8983         MOV     DPH,R1
   \   000328   12....       LCALL   ?CALL_IND
   1441                  {
   1442                    // Couldn't find attribute in the table.
   1443                  }
   1444                }
   1445                 
   1446                // Free the buffer
   1447                if ( inMsg.attrCmd )
   \   00032B   740E         MOV     A,#0xe
   \   00032D   12....       LCALL   ?XSTACK_DISP0_8
   \   000330   E0           MOVX    A,@DPTR
   \   000331   7002         JNZ     ??zclProcessMessageMSG_21
   \   000333   A3           INC     DPTR
   \   000334   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_21:
   \   000335   600B         JZ      ??zclProcessMessageMSG_18
   1448                  osal_mem_free( inMsg.attrCmd );
   \                     ??zclProcessMessageMSG_20:
   \   000337                ; Setup parameters for call to function osal_mem_free
   \   000337   740E         MOV     A,#0xe
   \   000339   12....       LCALL   ?XSTACK_DISP0_8
   \   00033C   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00033F   12....       LCALL   ??osal_mem_free?relay
   1449                
   1450                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zclProcessMessageMSG_18:
   \   000342   7409         MOV     A,#0x9
   \   000344   12....       LCALL   ?XSTACK_DISP0_8
   \   000347   E0           MOVX    A,@DPTR
   \   000348   FA           MOV     R2,A
   \   000349   7003         JNZ     $+5
   \   00034B   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   00034E   7402         MOV     A,#0x2
   \   000350   6A           XRL     A,R2
   \   000351   7003         JNZ     $+5
   \   000353   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   000356   7403         MOV     A,#0x3
   \   000358   6A           XRL     A,R2
   \   000359   7003         JNZ     $+5
   \   00035B   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   00035E   7406         MOV     A,#0x6
   \   000360   6A           XRL     A,R2
   \   000361   7003         JNZ     $+5
   \   000363   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   000366   7408         MOV     A,#0x8
   \   000368   6A           XRL     A,R2
   \   000369   7003         JNZ     $+5
   \   00036B   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   00036E   740C         MOV     A,#0xc
   \   000370   6A           XRL     A,R2
   \   000371   7003         JNZ     $+5
   \   000373   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   000376   740B         MOV     A,#0xb
   \   000378   6A           XRL     A,R2
   \   000379   7003         JNZ     $+5
   \   00037B   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1451                  return; // We're done
   1452                
   1453                status = ZSuccess;
   \   00037E   7A00         MOV     R2,#0x0
   \   000380   02....       LJMP    ??zclProcessMessageMSG_14 & 0xFFFF
   1454              }
   1455              else
   1456              {
   1457                // Unsupported message
   1458                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zclProcessMessageMSG_15:
   \   000383   7A82         MOV     R2,#-0x7e
   \   000385   02....       LJMP    ??zclProcessMessageMSG_14 & 0xFFFF
   1459              }
   1460            }
   1461            else  // Not a foundation type message, so it must be specific to the cluster ID.
   1462            {
   1463              if (epDesc->simpleDesc == NULL)
   \                     ??zclProcessMessageMSG_12:
   \   000388   85..82       MOV     DPL,?V0 + 6
   \   00038B   85..83       MOV     DPH,?V0 + 7
   \   00038E   E0           MOVX    A,@DPTR
   \   00038F   7002         JNZ     ??zclProcessMessageMSG_22
   \   000391   A3           INC     DPTR
   \   000392   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_22:
   \   000393   607D         JZ      ??zclProcessMessageMSG_23
   1464              {
   1465                pInPlugin = NULL;
   1466              }
   1467              else
   1468              {
   1469                // Find the appropriate plugin
   1470                pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   000395   85..82       MOV     DPL,?V0 + 4
   \   000398   85..83       MOV     DPH,?V0 + 5
   \   00039B   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00039E   7003         JNZ     ??zclProcessMessageMSG_24
   \   0003A0   74FF         MOV     A,#-0x1
   \   0003A2   6B           XRL     A,R3
   \                     ??zclProcessMessageMSG_24:
   \   0003A3   6035         JZ      ??zclProcessMessageMSG_25
   \   0003A5   90....       MOV     DPTR,#plugins
   \   0003A8   8004         SJMP    ??zclProcessMessageMSG_26
   \                     ??zclProcessMessageMSG_27:
   \   0003AA   8882         MOV     DPL,R0
   \   0003AC   8983         MOV     DPH,R1
   \                     ??zclProcessMessageMSG_26:
   \   0003AE   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0003B1   7001         JNZ     ??zclProcessMessageMSG_28
   \   0003B3   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_28:
   \   0003B4   6024         JZ      ??zclProcessMessageMSG_25
   \   0003B6   8882         MOV     DPL,R0
   \   0003B8   8983         MOV     DPH,R1
   \   0003BA   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0003BD   C3           CLR     C
   \   0003BE   EA           MOV     A,R2
   \   0003BF   9C           SUBB    A,R4
   \   0003C0   EB           MOV     A,R3
   \   0003C1   9D           SUBB    A,R5
   \   0003C2   40E6         JC      ??zclProcessMessageMSG_27
   \   0003C4   8882         MOV     DPL,R0
   \   0003C6   8983         MOV     DPH,R1
   \   0003C8   A3           INC     DPTR
   \   0003C9   A3           INC     DPTR
   \   0003CA   A3           INC     DPTR
   \   0003CB   A3           INC     DPTR
   \   0003CC   C3           CLR     C
   \   0003CD   E0           MOVX    A,@DPTR
   \   0003CE   9A           SUBB    A,R2
   \   0003CF   A3           INC     DPTR
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   9B           SUBB    A,R3
   \   0003D2   40D6         JC      ??zclProcessMessageMSG_27
   \   0003D4   8882         MOV     DPL,R0
   \   0003D6   8983         MOV     DPH,R1
   \   0003D8   8006         SJMP    ??zclProcessMessageMSG_29
   \                     ??zclProcessMessageMSG_25:
   \   0003DA   758200       MOV     DPL,#0x0
   \   0003DD   758300       MOV     DPH,#0x0
   1471              }
   1472              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zclProcessMessageMSG_29:
   \   0003E0   E582         MOV     A,DPL
   \   0003E2   7002         JNZ     ??zclProcessMessageMSG_30
   \   0003E4   E583         MOV     A,DPH
   \                     ??zclProcessMessageMSG_30:
   \   0003E6   602A         JZ      ??zclProcessMessageMSG_23
   \   0003E8   A3           INC     DPTR
   \   0003E9   A3           INC     DPTR
   \   0003EA   A3           INC     DPTR
   \   0003EB   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0003EE   7001         JNZ     ??zclProcessMessageMSG_31
   \   0003F0   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_31:
   \   0003F1   601F         JZ      ??zclProcessMessageMSG_23
   1473              { 
   1474                // The return value of the plugin function will be ZSuccess - Supported and need default response
   1475                //                                                 ZFailure - Unsupported
   1476                //                                                 ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   1477                //                                                 ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   1478                //                                                 ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   1479                //                                                 ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   1480                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   0003F3                ; Setup parameters for indirect call
   \   0003F3   7402         MOV     A,#0x2
   \   0003F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F8   AA82         MOV     R2,DPL
   \   0003FA   AB83         MOV     R3,DPH
   \   0003FC   8882         MOV     DPL,R0
   \   0003FE   8983         MOV     DPH,R1
   \   000400   12....       LCALL   ?CALL_IND
   \   000403   E9           MOV     A,R1
   \   000404   FA           MOV     R2,A
   1481                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   000405   74FF         MOV     A,#-0x1
   \   000407   6A           XRL     A,R2
   \   000408   7003         JNZ     $+5
   \   00040A   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1482                  return; // We're done      
   1483              }
   1484              
   1485              if ( status == ZFailure )
   \   00040D   7401         MOV     A,#0x1
   \   00040F   6A           XRL     A,R2
   \   000410   7010         JNZ     ??zclProcessMessageMSG_14
   1486              {
   1487                // Unsupported message
   1488                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zclProcessMessageMSG_23:
   \   000412   7404         MOV     A,#0x4
   \   000414   12....       LCALL   ?XSTACK_DISP0_8
   \   000417   E0           MOVX    A,@DPTR
   \   000418   5404         ANL     A,#0x4
   \   00041A   6004         JZ      ??zclProcessMessageMSG_32
   1489                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   00041C   7A83         MOV     R2,#-0x7d
   \   00041E   8002         SJMP    ??zclProcessMessageMSG_14
   1490                else
   1491                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zclProcessMessageMSG_32:
   \   000420   7A81         MOV     R2,#-0x7f
   1492              }
   1493            }
   1494            
   1495            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zclProcessMessageMSG_14:
   \   000422   7402         MOV     A,#0x2
   \   000424   12....       LCALL   ?XSTACK_DISP0_8
   \   000427   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00042A   7070         JNZ     ??zclProcessMessageMSG_1
   \   00042C   7402         MOV     A,#0x2
   \   00042E   12....       LCALL   ?XSTACK_DISP0_8
   \   000431   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000434   7002         JNZ     ??zclProcessMessageMSG_33
   \   000436   A3           INC     DPTR
   \   000437   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_33:
   \   000438   7062         JNZ     ??zclProcessMessageMSG_1
   \   00043A   7404         MOV     A,#0x4
   \   00043C   12....       LCALL   ?XSTACK_DISP0_8
   \   00043F   E0           MOVX    A,@DPTR
   \   000440   5410         ANL     A,#0x10
   \   000442   7058         JNZ     ??zclProcessMessageMSG_1
   1496            {
   1497              // Send a Default Response command back
   1498              defautlRspCmd.statusCode = status;
   \   000444   7401         MOV     A,#0x1
   \   000446   12....       LCALL   ?XSTACK_DISP0_8
   \   000449   EA           MOV     A,R2
   \   00044A   F0           MOVX    @DPTR,A
   1499              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   00044B   7409         MOV     A,#0x9
   \   00044D   12....       LCALL   ?XSTACK_DISP0_8
   \   000450   12....       LCALL   ?Subroutine51 & 0xFFFF
   1500              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1501                                     inMsg.msg->clusterId, &defautlRspCmd, 
   1502                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1503                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   1504            }
   \                     ??CrossCallReturnLabel_64:
   \   000453   12....       LCALL   ?XSTACK_DISP0_8
   \   000456   E0           MOVX    A,@DPTR
   \   000457   F5..         MOV     ?V0 + 0,A
   \   000459   78..         MOV     R0,#?V0 + 0
   \   00045B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00045E   7407         MOV     A,#0x7
   \   000460   12....       LCALL   ?XSTACK_DISP0_8
   \   000463   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000466   75..01       MOV     ?V0 + 0,#0x1
   \   000469   78..         MOV     R0,#?V0 + 0
   \   00046B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00046E   78..         MOV     R0,#?V0 + 0
   \   000470   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000473   7405         MOV     A,#0x5
   \   000475   12....       LCALL   ?XSTACK_DISP0_8
   \   000478   8582..       MOV     ?V0 + 0,DPL
   \   00047B   8583..       MOV     ?V0 + 1,DPH
   \   00047E   78..         MOV     R0,#?V0 + 0
   \   000480   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000483   7409         MOV     A,#0x9
   \   000485   12....       LCALL   ?XSTACK_DISP0_8
   \   000488   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00048B   7409         MOV     A,#0x9
   \   00048D   12....       LCALL   ?XSTACK_DISP0_8
   \   000490   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000493   12....       LCALL   ?XSTACK_DISP0_8
   \   000496   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000499   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zclProcessMessageMSG_1:
   \   00049C   7433         MOV     A,#0x33
   \   00049E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004A1                REQUIRE ?Subroutine115
   \   0004A1                ; // Fall through to label ?Subroutine115
   1505          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   24..         ADD     A,#(zclCmdTable & 0xff)
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   34..         ADDC    A,#((zclCmdTable >> 8) & 0xff)
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   74FF         MOV     A,#-0x1
   \   000005   6A           XRL     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   75..00       MOV     ?V0 + 1,#0x0
   \   000006   7402         MOV     A,#0x2
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008   7408         MOV     A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   7409         MOV     A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2415         ADD     A,#0x15
   \   000003   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??zclSetSecurityOption?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2414         ADD     A,#0x14
   \   000003   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??zcl_SendDefaultRspCmd?relay
   \   00000A   7407         MOV     A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zclParseHdr
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E4           CLR     A
   \   000001   93           MOVC    A,@A+DPTR
   \   000002   F8           MOV     R0,A
   \   000003   7401         MOV     A,#0x1
   \   000005   93           MOVC    A,@A+DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine124_0
   \   000003                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FF           MOV     R7,A
   \   000003                ; Setup parameters for call to function afFindEndPointDesc
   \   000003                REQUIRE ?Subroutine105
   \   000003                ; // Fall through to label ?Subroutine105

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine138_0
   \   000001                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003                REQUIRE ??Subroutine143_0
   \   000003                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine144_0
   \   000002                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine145_0
   \   000002                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine147_0
   \   000004                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1506          
   1507          /*********************************************************************
   1508           * @fn      zclParseHdr
   1509           * @brief   Parse header of the ZCL format
   1510           * @param   hdr - place to put the frame control information
   1511           *          pData - incoming buffer to parse
   1512           * @return  pointer past the header
   1513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1514          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   1515          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1516            // Clear the header
   1517            osal_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV     R4,#0x6
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??osal_memset?relay
   1518          
   1519            // Parse the Frame Control
   1520            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   54FC         ANL     A,#0xfc
   \   00001F   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7403         MOV     A,#0x3
   \   000026   5A           ANL     A,R2
   \   000027   48           ORL     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   1521            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_219:
   \   000032   74FB         MOV     A,#-0x5
   \   000034   58           ANL     A,R0
   \   000035   FA           MOV     R2,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00003D   E4           CLR     A
   \   00003E   92E0         MOV     0xE0 /* A   */.0,C
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   75..00       MOV     ?V0 + 3,#0x0
   \   000045   7402         MOV     A,#0x2
   \   000047   78..         MOV     R0,#?V0 + 2
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   7404         MOV     A,#0x4
   \   00004E   55..         ANL     A,?V0 + 2
   \   000050   4A           ORL     A,R2
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   1522            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_134:
   \   00005A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00005C   85..82       MOV     DPL,?V0 + 0
   \   00005F   85..83       MOV     DPH,?V0 + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5004         JNC     ??zclParseHdr_0
   1523              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000065   4408         ORL     A,#0x8
   \   000067   8002         SJMP    ??zclParseHdr_1
   1524            else
   1525              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_0:
   \   000069   54F7         ANL     A,#0xf7
   \                     ??zclParseHdr_1:
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   12....       LCALL   ?Subroutine18 & 0xFFFF
   1526            
   1527            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_21:
   \   000071   54EF         ANL     A,#0xef
   \   000073   FA           MOV     R2,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FB           MOV     R3,A
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   A2E4         MOV     C,0xE0 /* A   */.4
   \   00007E   E4           CLR     A
   \   00007F   92E0         MOV     0xE0 /* A   */.0,C
   \   000081   F5..         MOV     ?V0 + 2,A
   \   000083   7404         MOV     A,#0x4
   \   000085   78..         MOV     R0,#?V0 + 2
   \   000087   12....       LCALL   ?S_SHL
   \   00008A   7410         MOV     A,#0x10
   \   00008C   55..         ANL     A,?V0 + 2
   \   00008E   4A           ORL     A,R2
   \   00008F   F8           MOV     R0,A
   \   000090   EB           MOV     A,R3
   \   000091   F9           MOV     R1,A
   \   000092   85..82       MOV     DPL,?V0 + 0
   \   000095   85..83       MOV     DPH,?V0 + 1
   \   000098   E8           MOV     A,R0
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E9           MOV     A,R1
   \   00009C   12....       LCALL   ??Subroutine132_0 & 0xFFFF
   1528            pData++;  // move past the frame control field
   1529          
   1530            // parse the manfacturer code
   1531            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_198:
   \   00009F   E8           MOV     A,R0
   \   0000A0   5404         ANL     A,#0x4
   \   0000A2   6014         JZ      ??CrossCallReturnLabel_10
   1532            {
   1533              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   EA           MOV     A,R2
   \   0000AA   85..82       MOV     DPL,?V0 + 0
   \   0000AD   85..83       MOV     DPH,?V0 + 1
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E9           MOV     A,R1
   \   0000B5   12....       LCALL   ?Subroutine9 & 0xFFFF
   1534              pData += 2;
   1535            }
   1536          
   1537            // parse the Transaction Sequence Number
   1538            hdr->transSeqNum = *pData++;
   \                     ??CrossCallReturnLabel_10:
   \   0000B8   8E82         MOV     DPL,R6
   \   0000BA   8F83         MOV     DPH,R7
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   85..82       MOV     DPL,?V0 + 0
   \   0000C0   85..83       MOV     DPH,?V0 + 1
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   12....       LCALL   ?Subroutine5 & 0xFFFF
   1539          
   1540            // parse the Cluster's command ID
   1541            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_8:
   \   0000C9   85..82       MOV     DPL,?V0 + 0
   \   0000CC   85..83       MOV     DPH,?V0 + 1
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   1542          
   1543            // Should point to the frame payload
   1544            return ( pData );
   \                     ??CrossCallReturnLabel_204:
   \   0000D7   AA82         MOV     R2,DPL
   \   0000D9   AB83         MOV     R3,DPH
   \   0000DB                REQUIRE ?Subroutine103
   \   0000DB                ; // Fall through to label ?Subroutine103
   1545          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   02....       LJMP    ?Subroutine108 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   02....       LJMP    ?Subroutine111 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   02....       LJMP    ?Subroutine105 & 0xFFFF
   1546          
   1547          /*********************************************************************
   1548           * @fn      zclBuildHdr
   1549           * @brief   Build header of the ZCL format
   1550           * @param   hdr - outgoing header information
   1551           *          pData - outgoing header space
   1552           * @return  pointer past the header
   1553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1554          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   1555          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1556            // Build the Frame Control byte
   1557            *pData = hdr->fc.type;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   5403         ANL     A,#0x3
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   1558            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_169:
   \   000013   5404         ANL     A,#0x4
   \   000015   12....       LCALL   ?Subroutine16 & 0xFFFF
   1559            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_167:
   \   000018   5408         ANL     A,#0x8
   \   00001A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1560            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_168:
   \   00001D   5410         ANL     A,#0x10
   \   00001F   FE           MOV     R6,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   4E           ORL     A,R6
   \   000026   12....       LCALL   ?Subroutine8 & 0xFFFF
   1561            pData++;  // move past the frame control field
   1562          
   1563            // Add the manfacturer code
   1564            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_212:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5404         ANL     A,#0x4
   \   00002C   6013         JZ      ??CrossCallReturnLabel_68
   1565            {
   1566              *pData++ = LO_UINT16( hdr->manuCode );
   \   00002E   EA           MOV     A,R2
   \   00002F   2402         ADD     A,#0x2
   \   000031   F8           MOV     R0,A
   \   000032   EB           MOV     A,R3
   \   000033   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000036   12....       LCALL   ?Subroutine53 & 0xFFFF
   1567              *pData++ = HI_UINT16( hdr->manuCode );
   \                     ??CrossCallReturnLabel_67:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine53 & 0xFFFF
   1568            }
   1569          
   1570            // Add the Transaction Sequence Number
   1571            *pData++ = hdr->transSeqNum;
   \                     ??CrossCallReturnLabel_68:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   12....       LCALL   ?Subroutine8 & 0xFFFF
   1572            
   1573            // Add the Cluster's command ID
   1574            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_213:
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   8C82         MOV     DPL,R4
   \   000059   8D83         MOV     DPH,R5
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   1575          
   1576            // Should point to the frame payload
   1577            return ( pData );
   \   00005D   AA82         MOV     R2,DPL
   \   00005F   AB83         MOV     R3,DPH
   \   000061   7F01         MOV     R7,#0x1
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
   1578          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0C           INC     R4
   \   000008   AD83         MOV     R5,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   FE           MOV     R6,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   E0           MOVX    A,@DPTR
   \   000006   4E           ORL     A,R6
   \   000007                REQUIRE ??Subroutine123_0
   \   000007                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AC82         MOV     R4,DPL
   \   000004   AD83         MOV     R5,DPH
   \   000006                REQUIRE ?Subroutine110
   \   000006                ; // Fall through to label ?Subroutine110

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   22           RET
   1579          
   1580          /*********************************************************************
   1581           * @fn      zclCalcHdrSize
   1582           * @brief   Calculate the number of bytes needed for an outgoing
   1583           *          ZCL header.
   1584           * @param   hdr - outgoing header information
   1585           * @return  returns the number of bytes needed
   1586           */
   1587          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   1588          {
   1589            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   1590          
   1591            // Add the manfacturer code
   1592            if ( hdr->fc.manuSpecific )
   1593              needed += 2;
   1594          
   1595            return ( needed );
   1596          }
   1597          
   1598          /*********************************************************************
   1599           * @fn      zclFindPlugin
   1600           * @brief   Find the right plugin for a cluster ID
   1601           * @param   clusterID - cluster ID to look for
   1602           *          profileID - profile ID
   1603           * @return  pointer to plugin, NULL if not found
   1604           */
   1605          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   1606          {
   1607            zclLibPlugin_t *pLoop;
   1608            
   1609            (void)profileID;  // Intentionally unreferenced parameter
   1610          
   1611            if ( clusterID != ZCL_INVALID_CLUSTER_ID )
   1612            {
   1613              pLoop = plugins;
   1614              while ( pLoop != NULL )
   1615              {
   1616                if ( clusterID >= pLoop->startClusterID && clusterID <= pLoop->endClusterID )
   1617                  return ( pLoop );
   1618                pLoop = pLoop->next;
   1619              }
   1620            }
   1621            return ( (zclLibPlugin_t *)NULL );
   1622          }
   1623          
   1624          /*********************************************************************
   1625           * @fn      zclFindAttrRec
   1626           * @brief   Find the attribute record that matchs the parameters
   1627           * @param   endpoint - Application's endpoint
   1628           *          clusterID - cluster ID
   1629           *          attrId - attribute looking for
   1630           * @return  TRUE if record found. FALSE, otherwise.
   1631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1632          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   1633          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   1634            uint8 x;
   1635            zclAttrRecsList *pLoop;
   1636          
   1637            pLoop = attrList;
   \                     ??CrossCallReturnLabel_263:
   \   000017   90....       MOV     DPTR,#attrList
   \   00001A   8004         SJMP    ??zclFindAttrRec_0
   1638          
   1639            while ( pLoop != NULL )
   1640            {
   1641              if ( pLoop->endpoint == endpoint )
   1642              {
   1643                for ( x = 0; x < pLoop->numAttributes; x++ )
   1644                {
   1645                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId == attrId )
   1646                  {
   1647                    *pAttr = pLoop->attrs[x];
   1648                    return ( TRUE ); // EMBEDDED RETURN
   1649                  }
   1650                }
   1651              }
   1652              pLoop = pLoop->next;
   \                     ??zclFindAttrRec_1:
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \                     ??zclFindAttrRec_0:
   \   000020   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000023   7001         JNZ     ??zclFindAttrRec_2
   \   000025   EB           MOV     A,R3
   \                     ??zclFindAttrRec_2:
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??zclFindAttrRec_3 & 0xFFFF
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   65..         XRL     A,?V0 + 2
   \   000034   70E6         JNZ     ??zclFindAttrRec_1
   \   000036   75..00       MOV     ?V0 + 3,#0x0
   \   000039   EA           MOV     A,R2
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V0 + 4,R0
   \   000043   89..         MOV     ?V0 + 5,R1
   \   000045   8002         SJMP    ??zclFindAttrRec_4
   \                     ??zclFindAttrRec_5:
   \   000047   05..         INC     ?V0 + 3
   \                     ??zclFindAttrRec_4:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   C3           CLR     C
   \   000055   98           SUBB    A,R0
   \   000056   50C4         JNC     ??zclFindAttrRec_1
   \   000058   85....       MOV     ?V0 + 8,?V0 + 3
   \   00005B   75..00       MOV     ?V0 + 9,#0x0
   \   00005E   7403         MOV     A,#0x3
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?S_SHL
   \   000065   85....       MOV     ?V0 + 6,?V0 + 8
   \   000068   85....       MOV     ?V0 + 7,?V0 + 9
   \   00006B   85..82       MOV     DPL,?V0 + 4
   \   00006E   85..83       MOV     DPH,?V0 + 5
   \   000071   E0           MOVX    A,@DPTR
   \   000072   25..         ADD     A,?V0 + 6
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   35..         ADDC    A,?V0 + 7
   \   000079   F9           MOV     R1,A
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000081   EE           MOV     A,R6
   \   000082   68           XRL     A,R0
   \   000083   7002         JNZ     ??zclFindAttrRec_6
   \   000085   EF           MOV     A,R7
   \   000086   69           XRL     A,R1
   \                     ??zclFindAttrRec_6:
   \   000087   70BE         JNZ     ??zclFindAttrRec_5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00008E   E5..         MOV     A,?V0 + 0
   \   000090   68           XRL     A,R0
   \   000091   7003         JNZ     ??zclFindAttrRec_7
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   69           XRL     A,R1
   \                     ??zclFindAttrRec_7:
   \   000096   70AF         JNZ     ??zclFindAttrRec_5
   \   000098   85..82       MOV     DPL,?V0 + 4
   \   00009B   85..83       MOV     DPH,?V0 + 5
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   25..         ADD     A,?V0 + 6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   35..         ADDC    A,?V0 + 7
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   F583         MOV     DPH,A
   \   0000AA   7408         MOV     A,#0x8
   \   0000AC   12....       LCALL   ?MOVE_LONG8_XDATA_CODE
   \   0000AF   7901         MOV     R1,#0x1
   \   0000B1   8002         SJMP    ??zclFindAttrRec_8
   1653            }
   1654          
   1655            return ( FALSE );
   \                     ??zclFindAttrRec_3:
   \   0000B3   7900         MOV     R1,#0x0
   \                     ??zclFindAttrRec_8:
   \   0000B5   7F0A         MOV     R7,#0xa
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA
   1656          }
   1657          
   1658          /*********************************************************************
   1659           * @fn      zclFindClusterOption
   1660           *
   1661           * @brief   Find the option record that matchs the cluster id
   1662           *
   1663           * @param   endpoint - Application's endpoint
   1664           * @param   clusterID - cluster ID looking for
   1665           *
   1666           * @return  pointer to clutser option, NULL if not found
   1667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1668          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   1669          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   1670            uint8 x;
   1671            zclClusterOptionList *pLoop;
   1672          
   1673            pLoop = clusterOptionList;
   \   000007   90....       MOV     DPTR,#clusterOptionList
   \   00000A   8004         SJMP    ??zclFindClusterOption_0
   1674          
   1675            while ( pLoop != NULL )
   1676            {
   1677              if ( pLoop->endpoint == endpoint )
   1678              {
   1679                for ( x = 0; x < pLoop->numOptions; x++ )
   1680                {
   1681                  if ( pLoop->options[x].clusterID == clusterID )
   1682                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   1683                }
   1684              }
   1685              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000010   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000013   7001         JNZ     ??zclFindClusterOption_2
   \   000015   E9           MOV     A,R1
   \                     ??zclFindClusterOption_2:
   \   000016   605F         JZ      ??zclFindClusterOption_3
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   65..         XRL     A,?V0 + 0
   \   000021   70E9         JNZ     ??zclFindClusterOption_1
   \   000023   75..00       MOV     ?V0 + 2,#0x0
   \   000026   E8           MOV     A,R0
   \   000027   2404         ADD     A,#0x4
   \   000029   FC           MOV     R4,A
   \   00002A   E9           MOV     A,R1
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   FD           MOV     R5,A
   \   00002E   EC           MOV     A,R4
   \   00002F   FE           MOV     R6,A
   \   000030   ED           MOV     A,R5
   \   000031   FF           MOV     R7,A
   \   000032   8002         SJMP    ??zclFindClusterOption_4
   \                     ??zclFindClusterOption_5:
   \   000034   05..         INC     ?V0 + 2
   \                     ??zclFindClusterOption_4:
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   E5..         MOV     A,?V0 + 2
   \   000041   C3           CLR     C
   \   000042   9C           SUBB    A,R4
   \   000043   50C7         JNC     ??zclFindClusterOption_1
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   75F003       MOV     B,#0x3
   \   00004A   A4           MUL     AB
   \   00004B   FC           MOV     R4,A
   \   00004C   85F0..       MOV     ?V0 + 1,B
   \   00004F   AD..         MOV     R5,?V0 + 1
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2C           ADD     A,R4
   \   000057   F5..         MOV     ?V0 + 1,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   3D           ADDC    A,R5
   \   00005C   85..82       MOV     DPL,?V0 + 1
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6A           XRL     A,R2
   \   000063   7003         JNZ     ??zclFindClusterOption_6
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6B           XRL     A,R3
   \                     ??zclFindClusterOption_6:
   \   000068   70CA         JNZ     ??zclFindClusterOption_5
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   2C           ADD     A,R4
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   3D           ADDC    A,R5
   \   000074   FB           MOV     R3,A
   \   000075   8004         SJMP    ??zclFindClusterOption_7
   1686            }
   1687          
   1688            return ( NULL );
   \                     ??zclFindClusterOption_3:
   \   000077   7A00         MOV     R2,#0x0
   \   000079   7B00         MOV     R3,#0x0
   \                     ??zclFindClusterOption_7:
   \   00007B                REQUIRE ?Subroutine116
   \   00007B                ; // Fall through to label ?Subroutine116
   1689          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1690          
   1691          /*********************************************************************
   1692           * @fn      zclGetClusterOption
   1693           *
   1694           * @brief   Get the option record that matchs the cluster id
   1695           *
   1696           * @param   endpoint - Application's endpoint
   1697           * @param   clusterID - cluster ID looking for
   1698           *
   1699           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   1700           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1701          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   1702          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1703            uint8 option;
   1704            zclOptionRec_t *pOption;
   1705          
   1706             pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL   ??zclFindClusterOption?relay
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   1707            if ( pOption != NULL )
   \   00000C   E582         MOV     A,DPL
   \   00000E   7002         JNZ     ??zclGetClusterOption_0
   \   000010   E583         MOV     A,DPH
   \                     ??zclGetClusterOption_0:
   \   000012   6008         JZ      ??zclGetClusterOption_1
   1708            {
   1709              option = pOption->option;
   1710              if ( !ZG_SECURE_ENABLED )
   1711                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   1712          
   1713              return ( option ); // EMBEDDED RETURN
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   54BF         ANL     A,#0xbf
   \   000019   F9           MOV     R1,A
   \   00001A   8002         SJMP    ??zclGetClusterOption_2
   1714            }
   1715          
   1716            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_1:
   \   00001C   7900         MOV     R1,#0x0
   \                     ??zclGetClusterOption_2:
   \   00001E   80..         SJMP    ?Subroutine112
   1717          }
   1718          
   1719          /*********************************************************************
   1720           * @fn      zclSetSecurityOption
   1721           *
   1722           * @brief   Set the security option for the cluster id
   1723           *
   1724           * @param   endpoint - Application's endpoint
   1725           * @param   clusterID - cluster ID looking for
   1726           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   1727           *
   1728           * @return  none
   1729           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1730          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   1731          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   1732            zclOptionRec_t *pOption;
   1733          
   1734            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL   ??zclFindClusterOption?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
   1735            if ( pOption != NULL )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??zclSetSecurityOption_0
   \   000015   E9           MOV     A,R1
   \                     ??zclSetSecurityOption_0:
   \   000016   6016         JZ      ??zclSetSecurityOption_1
   1736            {
   1737              if ( enable )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   EE           MOV     A,R6
   \   000023   6005         JZ      ??zclSetSecurityOption_2
   1738                pOption->option |= AF_EN_SECURITY;
   \   000025   E0           MOVX    A,@DPTR
   \   000026   D2E6         SETB    0xE0 /* A   */.6
   \   000028   8003         SJMP    ??zclSetSecurityOption_3
   1739              else
   1740                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_2:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C2E6         CLR     0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_3:
   \   00002D   F0           MOVX    @DPTR,A
   1741            }
   1742          }
   \                     ??zclSetSecurityOption_1:
   \   00002E                REQUIRE ?Subroutine112
   \   00002E                ; // Fall through to label ?Subroutine112
   1743          
   1744          #ifdef ZCL_DISCOVER
   1745          /*********************************************************************
   1746           * @fn      zclFindNextAttrRec
   1747           *
   1748           * @brief   Find the attribute (or next) record that matchs the parameters
   1749           *
   1750           * @param   endpoint - Application's endpoint
   1751           * @param   clusterID - cluster ID
   1752           * @param   attr - attribute looking for
   1753           *
   1754           * @return  pointer to attribute record, NULL if not found
   1755           */
   1756          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID,
   1757                                           uint16 *attrId, zclAttrRec_t *pAttr )
   1758          {
   1759            uint16 x;
   1760            zclAttrRecsList *pLoop;
   1761          
   1762            pLoop = attrList;
   1763          
   1764            while ( pLoop != NULL )
   1765            {
   1766              if ( pLoop->endpoint == endpoint )
   1767              {
   1768                for ( x = 0; x < pLoop->numAttributes; x++ )
   1769                {
   1770                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId >= *attrId )
   1771                  {
   1772                    *pAttr = pLoop->attrs[x];
   1773                    
   1774                    // Update attribute ID
   1775                    *attrId = pAttr->attr.attrId; 
   1776                    return ( TRUE ); // EMBEDDED RETURN
   1777                  }
   1778                }
   1779              }
   1780              pLoop = pLoop->next;
   1781            }
   1782          
   1783            return ( FALSE );
   1784          }
   1785          #endif // ZCL_DISCOVER
   1786          
   1787          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)
   1788          /*********************************************************************
   1789           * @fn      zclSerializeData
   1790           * @brief   Builds a buffer from the attribute data to sent out over
   1791           *          the air.
   1792           * @param   dataType - data types defined in zcl.h
   1793           *          attrData - pointer to the attribute data
   1794           *          buf - where to put the serialized data
   1795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1796          static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   1797          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   1798            uint8 *pStr;
   1799            uint8 len;
   1800          
   1801            switch ( dataType )
   \   00000D   8E..         MOV     ?V0 + 0,R6
   \   00000F   8F..         MOV     ?V0 + 1,R7
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000021   03           DB        3
   \   000022   41           DB        65
   \   000023   42           DB        66
   \   000024   ....         DW        ??zclSerializeData_0
   \   000026   E0           DB        224
   \   000027   E2           DB        226
   \   000028   ....         DW        ??zclSerializeData_1
   \   00002A   E8           DB        232
   \   00002B   E9           DB        233
   \   00002C   ....         DW        ??zclSerializeData_2
   \   00002E   19           DB        25
   \   00002F   08           DB        8
   \   000030   ....         DW        ??zclSerializeData_3
   \   000032   09           DB        9
   \   000033   ....         DW        ??zclSerializeData_2
   \   000035   0A           DB        10
   \   000036   ....         DW        ??zclSerializeData_4
   \   000038   0B           DB        11
   \   000039   ....         DW        ??zclSerializeData_1
   \   00003B   10           DB        16
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   18           DB        24
   \   00003F   ....         DW        ??zclSerializeData_3
   \   000041   19           DB        25
   \   000042   ....         DW        ??zclSerializeData_2
   \   000044   1A           DB        26
   \   000045   ....         DW        ??zclSerializeData_4
   \   000047   1B           DB        27
   \   000048   ....         DW        ??zclSerializeData_1
   \   00004A   20           DB        32
   \   00004B   ....         DW        ??zclSerializeData_3
   \   00004D   21           DB        33
   \   00004E   ....         DW        ??zclSerializeData_2
   \   000050   22           DB        34
   \   000051   ....         DW        ??zclSerializeData_4
   \   000053   23           DB        35
   \   000054   ....         DW        ??zclSerializeData_1
   \   000056   24           DB        36
   \   000057   ....         DW        ??zclSerializeData_5
   \   000059   25           DB        37
   \   00005A   ....         DW        ??zclSerializeData_6
   \   00005C   28           DB        40
   \   00005D   ....         DW        ??zclSerializeData_3
   \   00005F   29           DB        41
   \   000060   ....         DW        ??zclSerializeData_2
   \   000062   2A           DB        42
   \   000063   ....         DW        ??zclSerializeData_4
   \   000065   2B           DB        43
   \   000066   ....         DW        ??zclSerializeData_1
   \   000068   30           DB        48
   \   000069   ....         DW        ??zclSerializeData_3
   \   00006B   31           DB        49
   \   00006C   ....         DW        ??zclSerializeData_2
   \   00006E   38           DB        56
   \   00006F   ....         DW        ??zclSerializeData_2
   \   000071   39           DB        57
   \   000072   ....         DW        ??zclSerializeData_1
   \   000074   EA           DB        234
   \   000075   ....         DW        ??zclSerializeData_1
   \   000077   F0           DB        240
   \   000078   ....         DW        ??zclSerializeData_7
   \   00007A   ....         DW        ??zclSerializeData_8
   1802            {
   1803              case ZCL_DATATYPE_DATA8:
   1804              case ZCL_DATATYPE_BOOLEAN:
   1805              case ZCL_DATATYPE_BITMAP8:
   1806              case ZCL_DATATYPE_INT8:
   1807              case ZCL_DATATYPE_UINT8:
   1808              case ZCL_DATATYPE_ENUM8:
   1809                *buf = *((uint8 *)attrData);
   \                     ??zclSerializeData_3:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \                     ??zclSerializeData_9:
   \   000080   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   02....       LJMP    ??zclSerializeData_8 & 0xFFFF
   1810                 break;
   1811          
   1812              case ZCL_DATATYPE_DATA16:
   1813              case ZCL_DATATYPE_BITMAP16:
   1814              case ZCL_DATATYPE_UINT16:
   1815              case ZCL_DATATYPE_INT16: 
   1816              case ZCL_DATATYPE_ENUM16:
   1817              case ZCL_DATATYPE_SEMI_PREC:
   1818              case ZCL_DATATYPE_CLUSTER_ID:
   1819              case ZCL_DATATYPE_ATTR_ID:
   1820                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_2:
   \   000087   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00008A   12....       LCALL   ?Subroutine15 & 0xFFFF
   1821                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_207:
   \   00008D   A3           INC     DPTR
   \   00008E   80F0         SJMP    ??zclSerializeData_9
   1822                break;
   1823          
   1824              case ZCL_DATATYPE_DATA24:
   1825              case ZCL_DATATYPE_BITMAP24: 
   1826              case ZCL_DATATYPE_UINT24:
   1827              case ZCL_DATATYPE_INT24:
   1828                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_4:
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   12....       LCALL   ?Subroutine15 & 0xFFFF
   1829                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_208:
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   0A           INC     R2
   \   0000B0   AB83         MOV     R3,DPH
   1830                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?L_MOV_X
   \   0000BB   7410         MOV     A,#0x10
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?UL_SHR
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   E5..         MOV     A,?V0 + 0
   \   0000C8   80B9         SJMP    ??CrossCallReturnLabel_214
   1831                break;
   1832                
   1833              case ZCL_DATATYPE_DATA32:
   1834              case ZCL_DATATYPE_BITMAP32:
   1835              case ZCL_DATATYPE_UINT32:
   1836              case ZCL_DATATYPE_INT32:
   1837              case ZCL_DATATYPE_SINGLE_PREC:
   1838              case ZCL_DATATYPE_TOD:
   1839              case ZCL_DATATYPE_DATE:
   1840              case ZCL_DATATYPE_UTC:
   1841              case ZCL_DATATYPE_BAC_OID:
   1842                buf = osal_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_1:
   \   0000CA                ; Setup parameters for call to function osal_buffer_uint32
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D1   12....       LCALL   ??osal_buffer_uint32?relay
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   8043         SJMP    ??zclSerializeData_8
   1843                break;
   1844                
   1845              case ZCL_DATATYPE_UINT40:
   1846                pStr = (uint8*)attrData;
   1847                osal_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_5:
   \   0000DB                ; Setup parameters for call to function osal_memcpy
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E0   7C05         MOV     R4,#0x5
   \   0000E2   8032         SJMP    ??zclSerializeData_10
   1848                break;
   1849                
   1850              case ZCL_DATATYPE_UINT48:
   1851                pStr = (uint8*)attrData;
   1852                osal_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_6:
   \   0000E4                ; Setup parameters for call to function osal_memcpy
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E9   7C06         MOV     R4,#0x6
   \   0000EB   8029         SJMP    ??zclSerializeData_10
   1853                break;
   1854                
   1855              case ZCL_DATATYPE_IEEE_ADDR:
   1856                pStr = (uint8*)attrData;
   1857                osal_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_7:
   \   0000ED                ; Setup parameters for call to function osal_memcpy
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C08         MOV     R4,#0x8
   \   0000F4   8020         SJMP    ??zclSerializeData_10
   1858                break;
   1859                
   1860              case ZCL_DATATYPE_CHAR_STR:
   1861              case ZCL_DATATYPE_OCTET_STR:
   1862                pStr = (uint8*)attrData;
   1863                len = *pStr++;
   \                     ??zclSerializeData_0:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F5..         MOV     ?V0 + 3,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   AE82         MOV     R6,DPL
   \   000100   AF83         MOV     R7,DPH
   1864                *buf++ = len;
   \   000102   8A82         MOV     DPL,R2
   \   000104   8B83         MOV     DPH,R3
   \   000106   F0           MOVX    @DPTR,A
   \   000107   EC           MOV     A,R4
   \   000108   FA           MOV     R2,A
   \   000109   ED           MOV     A,R5
   \   00010A   FB           MOV     R3,A
   1865                osal_memcpy( buf, pStr, len );
   \   00010B                ; Setup parameters for call to function osal_memcpy
   \   00010B   8E..         MOV     ?V0 + 0,R6
   \   00010D   8F..         MOV     ?V0 + 1,R7
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000114   AC..         MOV     R4,?V0 + 3
   \                     ??zclSerializeData_10:
   \   000116   7D00         MOV     R5,#0x0
   1866                break;
   1867                
   1868              case ZCL_DATATYPE_NO_DATA:
   1869              case ZCL_DATATYPE_UNKNOWN:
   1870                // Fall through
   1871          
   1872              default:
   1873                break;
   1874            }
   \   000118   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   1875          }
   \                     ??zclSerializeData_8:
   \   00011E   02....       LJMP    ?Subroutine103 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   FA           MOV     R2,A
   \   000003   ED           MOV     A,R5
   \   000004   FB           MOV     R3,A
   \   000005                REQUIRE ?Subroutine111
   \   000005                ; // Fall through to label ?Subroutine111

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine136_0
   \   000004                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   02....       LJMP    ?Subroutine110 & 0xFFFF
   1876          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
   1877          
   1878          #ifdef ZCL_REPORT
   1879          /*********************************************************************
   1880           * @fn      zclAnalogDataType
   1881           * @brief   Checks to see if Data Type is Analog
   1882           * @param   dataType - data type
   1883           * @return  TRUE if data type is analog
   1884           */
   1885          uint8 zclAnalogDataType( uint8 dataType )
   1886          {
   1887            uint8 analog;
   1888            
   1889            switch ( dataType )
   1890            {
   1891              case ZCL_DATATYPE_UINT8:
   1892              case ZCL_DATATYPE_UINT16:
   1893              case ZCL_DATATYPE_UINT24:
   1894              case ZCL_DATATYPE_UINT32:
   1895              case ZCL_DATATYPE_UINT40:
   1896              case ZCL_DATATYPE_UINT48:
   1897              case ZCL_DATATYPE_INT8:
   1898              case ZCL_DATATYPE_INT16:
   1899              case ZCL_DATATYPE_INT24:
   1900              case ZCL_DATATYPE_INT32:
   1901              case ZCL_DATATYPE_SEMI_PREC:
   1902              case ZCL_DATATYPE_SINGLE_PREC:
   1903              case ZCL_DATATYPE_DOUBLE_PREC:
   1904              case ZCL_DATATYPE_TOD:
   1905              case ZCL_DATATYPE_DATE:
   1906              case ZCL_DATATYPE_UTC:
   1907                analog = TRUE;
   1908                break;
   1909                
   1910              default:
   1911                analog = FALSE;
   1912                break;
   1913            }
   1914            return ( analog );
   1915          }
   1916          
   1917          /*********************************************************************
   1918           * @fn      zcl_BuildAnalogData
   1919           * @brief   Build an analog arribute out of sequential bytes.
   1920           * @param   dataType - type of data
   1921           *          pData - pointer to data
   1922           *          pBuf - where to put the data
   1923           */
   1924          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf)
   1925          {
   1926            switch ( dataType )
   1927            {
   1928              case ZCL_DATATYPE_UINT8:
   1929              case ZCL_DATATYPE_INT8:
   1930                *pData = *pBuf;
   1931                break;
   1932          
   1933              case ZCL_DATATYPE_UINT16:
   1934              case ZCL_DATATYPE_INT16:
   1935              case ZCL_DATATYPE_SEMI_PREC:
   1936                *((uint16*)pData) = BUILD_UINT16( pBuf[0], pBuf[1] ); 
   1937                break;
   1938           
   1939              case ZCL_DATATYPE_UINT24:
   1940              case ZCL_DATATYPE_INT24:
   1941                *((uint32*)pData) = osal_build_uint32( pBuf, 3 );
   1942                break;
   1943                
   1944              case ZCL_DATATYPE_UINT32:
   1945              case ZCL_DATATYPE_INT32:
   1946              case ZCL_DATATYPE_SINGLE_PREC:
   1947              case ZCL_DATATYPE_TOD:
   1948              case ZCL_DATATYPE_DATE:
   1949              case ZCL_DATATYPE_UTC:
   1950                *((uint32*)pData) = osal_build_uint32( pBuf, 4 );
   1951                break;
   1952                
   1953              case ZCL_DATATYPE_DOUBLE_PREC:
   1954                *pData = 0;
   1955                break;
   1956           
   1957              default:
   1958                break;
   1959            }
   1960          }
   1961          #endif // ZCL_REPORT
   1962          
   1963          /*********************************************************************
   1964           * @fn      zclGetDataTypeLength
   1965           * @brief   Return the length of the datatype in length. 
   1966           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or 
   1967           *                ZCL_DATATYPE_CHAR_STR data types.
   1968           * @param   dataType - data type
   1969           * @return  length of data
   1970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1971          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   1972          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1973            uint8 len;
   1974            
   1975            switch ( dataType )
   \   000004   E9           MOV     A,R1
   \   000005   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclGetDataTypeLength>_0`:
   \   000008   02           DB        2
   \   000009   E0           DB        224
   \   00000A   E2           DB        226
   \   00000B   ....         DW        ??zclGetDataTypeLength_0
   \   00000D   E8           DB        232
   \   00000E   E9           DB        233
   \   00000F   ....         DW        ??zclGetDataTypeLength_1
   \   000011   1A           DB        26
   \   000012   08           DB        8
   \   000013   ....         DW        ??zclGetDataTypeLength_2
   \   000015   09           DB        9
   \   000016   ....         DW        ??zclGetDataTypeLength_1
   \   000018   0A           DB        10
   \   000019   ....         DW        ??zclGetDataTypeLength_3
   \   00001B   0B           DB        11
   \   00001C   ....         DW        ??zclGetDataTypeLength_0
   \   00001E   10           DB        16
   \   00001F   ....         DW        ??zclGetDataTypeLength_2
   \   000021   18           DB        24
   \   000022   ....         DW        ??zclGetDataTypeLength_2
   \   000024   19           DB        25
   \   000025   ....         DW        ??zclGetDataTypeLength_1
   \   000027   1A           DB        26
   \   000028   ....         DW        ??zclGetDataTypeLength_3
   \   00002A   1B           DB        27
   \   00002B   ....         DW        ??zclGetDataTypeLength_0
   \   00002D   20           DB        32
   \   00002E   ....         DW        ??zclGetDataTypeLength_2
   \   000030   21           DB        33
   \   000031   ....         DW        ??zclGetDataTypeLength_1
   \   000033   22           DB        34
   \   000034   ....         DW        ??zclGetDataTypeLength_3
   \   000036   23           DB        35
   \   000037   ....         DW        ??zclGetDataTypeLength_0
   \   000039   24           DB        36
   \   00003A   ....         DW        ??zclGetDataTypeLength_4
   \   00003C   25           DB        37
   \   00003D   ....         DW        ??zclGetDataTypeLength_5
   \   00003F   28           DB        40
   \   000040   ....         DW        ??zclGetDataTypeLength_2
   \   000042   29           DB        41
   \   000043   ....         DW        ??zclGetDataTypeLength_1
   \   000045   2A           DB        42
   \   000046   ....         DW        ??zclGetDataTypeLength_3
   \   000048   2B           DB        43
   \   000049   ....         DW        ??zclGetDataTypeLength_0
   \   00004B   30           DB        48
   \   00004C   ....         DW        ??zclGetDataTypeLength_2
   \   00004E   31           DB        49
   \   00004F   ....         DW        ??zclGetDataTypeLength_1
   \   000051   38           DB        56
   \   000052   ....         DW        ??zclGetDataTypeLength_1
   \   000054   39           DB        57
   \   000055   ....         DW        ??zclGetDataTypeLength_0
   \   000057   3A           DB        58
   \   000058   ....         DW        ??zclGetDataTypeLength_6
   \   00005A   EA           DB        234
   \   00005B   ....         DW        ??zclGetDataTypeLength_0
   \   00005D   F0           DB        240
   \   00005E   ....         DW        ??zclGetDataTypeLength_6
   \   000060   ....         DW        ??zclGetDataTypeLength_7
   1976            {
   1977              case ZCL_DATATYPE_DATA8:
   1978              case ZCL_DATATYPE_BOOLEAN:
   1979              case ZCL_DATATYPE_BITMAP8:
   1980              case ZCL_DATATYPE_INT8:
   1981              case ZCL_DATATYPE_UINT8:
   1982              case ZCL_DATATYPE_ENUM8:
   1983                len = 1;
   \                     ??zclGetDataTypeLength_2:
   \   000062   7901         MOV     R1,#0x1
   \   000064   801A         SJMP    ??zclGetDataTypeLength_8
   1984                break;
   1985                
   1986              case ZCL_DATATYPE_DATA16:
   1987              case ZCL_DATATYPE_BITMAP16:
   1988              case ZCL_DATATYPE_UINT16:
   1989              case ZCL_DATATYPE_INT16: 
   1990              case ZCL_DATATYPE_ENUM16:
   1991              case ZCL_DATATYPE_SEMI_PREC:
   1992              case ZCL_DATATYPE_CLUSTER_ID:
   1993              case ZCL_DATATYPE_ATTR_ID:
   1994                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000066   7902         MOV     R1,#0x2
   \   000068   8016         SJMP    ??zclGetDataTypeLength_8
   1995                break;
   1996                
   1997              case ZCL_DATATYPE_DATA24:
   1998              case ZCL_DATATYPE_BITMAP24: 
   1999              case ZCL_DATATYPE_UINT24:
   2000              case ZCL_DATATYPE_INT24:
   2001                len = 3;
   \                     ??zclGetDataTypeLength_3:
   \   00006A   7903         MOV     R1,#0x3
   \   00006C   8012         SJMP    ??zclGetDataTypeLength_8
   2002                break;
   2003                
   2004              case ZCL_DATATYPE_DATA32:
   2005              case ZCL_DATATYPE_BITMAP32:
   2006              case ZCL_DATATYPE_UINT32:
   2007              case ZCL_DATATYPE_INT32:
   2008              case ZCL_DATATYPE_SINGLE_PREC:
   2009              case ZCL_DATATYPE_TOD:
   2010              case ZCL_DATATYPE_DATE:
   2011              case ZCL_DATATYPE_UTC:
   2012              case ZCL_DATATYPE_BAC_OID:
   2013                len = 4;
   \                     ??zclGetDataTypeLength_0:
   \   00006E   7904         MOV     R1,#0x4
   \   000070   800E         SJMP    ??zclGetDataTypeLength_8
   2014                break;                       
   2015                          
   2016             case ZCL_DATATYPE_UINT40:
   2017                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   000072   7905         MOV     R1,#0x5
   \   000074   800A         SJMP    ??zclGetDataTypeLength_8
   2018                 break;
   2019                 
   2020             case ZCL_DATATYPE_UINT48:
   2021                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000076   7906         MOV     R1,#0x6
   \   000078   8006         SJMP    ??zclGetDataTypeLength_8
   2022                 break;
   2023                 
   2024             case ZCL_DATATYPE_DOUBLE_PREC:
   2025             case ZCL_DATATYPE_IEEE_ADDR:
   2026               len = 8;
   \                     ??zclGetDataTypeLength_6:
   \   00007A   7908         MOV     R1,#0x8
   \   00007C   8002         SJMP    ??zclGetDataTypeLength_8
   2027               break;
   2028          
   2029              case ZCL_DATATYPE_NO_DATA:
   2030              case ZCL_DATATYPE_UNKNOWN:
   2031                // Fall through
   2032                
   2033              default:
   2034                len = 0;
   \                     ??zclGetDataTypeLength_7:
   \   00007E   7900         MOV     R1,#0x0
   2035                break;
   2036            }  
   2037            return ( len );
   \                     ??zclGetDataTypeLength_8:
   \   000080   02....       LJMP    ?Subroutine102 & 0xFFFF
   2038          }
   2039          
   2040          /*********************************************************************
   2041           * @fn      zclGetAttrDataLength
   2042           * @brief   Return the length of the attribute.
   2043           * @param   dataType - data type
   2044           *          pData - pointer to data
   2045           * @return  returns atrribute lentgh
   2046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2047          uint8 zclGetAttrDataLength( uint8  dataType, uint8 *pData)
   \                     zclGetAttrDataLength:
   2048          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2049            uint8 dataLen = 0;
   2050            
   2051            if ( dataType  == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \   000004   7442         MOV     A,#0x42
   \   000006   69           XRL     A,R1
   \   000007   6005         JZ      ??zclGetAttrDataLength_0
   \   000009   7441         MOV     A,#0x41
   \   00000B   69           XRL     A,R1
   \   00000C   7009         JNZ     ??zclGetAttrDataLength_1
   2052            {
   2053              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   04           INC     A
   \   000014   F9           MOV     R1,A
   \   000015   8003         SJMP    ??zclGetAttrDataLength_2
   2054            }
   2055            else
   2056            {
   2057              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_1:
   \   000017                ; Setup parameters for call to function zclGetDataTypeLength
   \   000017   12....       LCALL   ??zclGetDataTypeLength?relay
   2058            }
   2059          
   2060            return ( dataLen );
   \                     ??zclGetAttrDataLength_2:
   \   00001A   02....       LJMP    ?Subroutine102 & 0xFFFF
   2061          }
   2062          
   2063          /*********************************************************************
   2064           * @fn      zclReadAttrData
   2065           * @brief   Read the attribute's current value into pAttrData.
   2066           * @param   pAttrData - where to put attribute data
   2067           *          pAttr - pointer to attribute
   2068           * @return Success
   2069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2070          uint8 zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr )
   \                     zclReadAttrData:
   2071          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2072            uint8 dataLen;
   2073              
   2074            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \   000009   EC           MOV     A,R4
   \   00000A   2406         ADD     A,#0x6
   \   00000C   F8           MOV     R0,A
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015                ; Setup parameters for call to function zclGetAttrDataLength
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   12....       LCALL   ?Subroutine29 & 0xFFFF
   2075            osal_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \                     ??CrossCallReturnLabel_174:
   \   000023                ; Setup parameters for call to function osal_memcpy
   \   000023   85..82       MOV     DPL,?V0 + 0
   \   000026   85..83       MOV     DPH,?V0 + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 1,A
   \   000030   75..00       MOV     ?V0 + 2,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EA           MOV     A,R2
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   2076            return ( ZCL_STATUS_SUCCESS );
   \   000046   7900         MOV     R1,#0x0
   \   000048   02....       LJMP    ?Subroutine116 & 0xFFFF
   2077          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine125_0
   \   000002                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine126_0
   \   000002                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   FA           MOV     R2,A
   \   000004   22           RET
   2078          
   2079          #ifdef ZCL_WRITE
   2080          /*********************************************************************
   2081           * @fn      zclWriteAttrData
   2082           * @brief   Write the received data.
   2083           * @param   pAttr - where to write data to
   2084           *          pWriteRec - data to be written
   2085           * @return  Successful if data was written
   2086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2087          static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   \                     zclWriteAttrData:
   2088          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   2089            uint8 len;
   2090          
   2091            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   5058         JNC     ??zclWriteAttrData_0
   2092            {
   2093              if ( zcl_ValidateAttrDataCB && !zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   00001B   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7002         JNZ     ??zclWriteAttrData_1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??zclWriteAttrData_1:
   \   000023   6010         JZ      ??zclWriteAttrData_2
   \   000025                ; Setup parameters for indirect call
   \   000025   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000028   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   E9           MOV     A,R1
   \   00002F   7004         JNZ     ??zclWriteAttrData_2
   2094                return ( ZCL_STATUS_INVALID_VALUE );
   \   000031   7987         MOV     R1,#-0x79
   \   000033   8040         SJMP    ??zclWriteAttrData_3
   2095              
   2096              len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000035   EE           MOV     A,R6
   \   000036   2403         ADD     A,#0x3
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   0E           INC     R6
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   FF           MOV     R7,A
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000046   85..82       MOV     DPL,?V0 + 0
   \   000049   85..83       MOV     DPH,?V0 + 1
   \   00004C   12....       LCALL   ?Subroutine29 & 0xFFFF
   2097              osal_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \                     ??CrossCallReturnLabel_175:
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   EA           MOV     A,R2
   \   00005A   FC           MOV     R4,A
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   2098              return ( ZCL_STATUS_SUCCESS );
   \   00006F   7900         MOV     R1,#0x0
   \   000071   8002         SJMP    ??zclWriteAttrData_3
   2099            }
   2100            return ( ZCL_STATUS_READ_ONLY );
   \                     ??zclWriteAttrData_0:
   \   000073   7988         MOV     R1,#-0x78
   \                     ??zclWriteAttrData_3:
   \   000075   7F07         MOV     R7,#0x7
   \   000077   02....       LJMP    ?BANKED_LEAVE_XDATA
   2101          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   75..00       MOV     ?V0 + 6,#0x0
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   02....       LJMP    ?Subroutine106 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   02....       LJMP    ?Subroutine107 & 0xFFFF
   2102          #endif // ZCL_WRITE
   2103          
   2104          #ifdef ZCL_READ
   2105          /*********************************************************************
   2106           * @fn      zclParseInReadCmd
   2107           * @brief   Parse the "Profile" Read Commands
   2108           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2109           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2110           * @param   pCmd - pointer to incoming data to parse
   2111           * @return  pointer to the parsed command structure
   2112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2113          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   2114          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2115            zclReadCmd_t *readCmd;
   2116            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00000C   FE           MOV     R6,A
   \   00000D   E9           MOV     A,R1
   \   00000E   FF           MOV     R7,A
   2117            
   2118            readCmd = (zclReadCmd_t *)osal_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \   00000F   12....       LCALL   ?Subroutine33 & 0xFFFF
   2119            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_36:
   \   000012   7001         JNZ     ??zclParseInReadCmd_0
   \   000014   EB           MOV     A,R3
   \                     ??zclParseInReadCmd_0:
   \   000015   6049         JZ      ??zclParseInReadCmd_1
   2120            {
   2121              uint8 i;
   2122              
   2123              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000017   85..82       MOV     DPL,?V0 + 0
   \   00001A   85..83       MOV     DPH,?V0 + 1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C3           CLR     C
   \   000022   13           RRC     A
   \   000023   E8           MOV     A,R0
   \   000024   13           RRC     A
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   F0           MOVX    @DPTR,A
   2124              for ( i = 0; i < readCmd->numAttr; i++ )
   \   00002A   75..00       MOV     ?V0 + 0,#0x0
   \   00002D   8025         SJMP    ??zclParseInReadCmd_2
   2125              {
   2126                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_3:
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   12....       LCALL   ?Subroutine86 & 0xFFFF
   2127                pBuf += 2;
   2128              }
   \                     ??CrossCallReturnLabel_273:
   \   000036   F9           MOV     R1,A
   \   000037   E4           CLR     A
   \   000038   2C           ADD     A,R4
   \   000039   E9           MOV     A,R1
   \   00003A   FD           MOV     R5,A
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   33           RLC     A
   \   00003E   F8           MOV     R0,A
   \   00003F   E4           CLR     A
   \   000040   33           RLC     A
   \   000041   F9           MOV     R1,A
   \   000042   EA           MOV     A,R2
   \   000043   28           ADD     A,R0
   \   000044   F582         MOV     DPL,A
   \   000046   EB           MOV     A,R3
   \   000047   39           ADDC    A,R1
   \   000048   F583         MOV     DPH,A
   \   00004A   A3           INC     DPTR
   \   00004B   EC           MOV     A,R4
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   ED           MOV     A,R5
   \   00004F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000052   05..         INC     ?V0 + 0
   \                     ??zclParseInReadCmd_2:
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FC           MOV     R4,A
   \   00005A   E5..         MOV     A,?V0 + 0
   \   00005C   C3           CLR     C
   \   00005D   9C           SUBB    A,R4
   \   00005E   40CF         JC      ??zclParseInReadCmd_3
   2129            }
   2130            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_1:
   \   000060   02....       LJMP    ?Subroutine103 & 0xFFFF
   2131          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   8582..       MOV     ?V0 + 0,DPL
   \   000008   8583..       MOV     ?V0 + 1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2401         ADD     A,#0x1
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??osal_mem_alloc?relay
   \   000017   EA           MOV     A,R2
   \   000018   22           RET
   2132          
   2133          /*********************************************************************
   2134           * @fn      zclParseInReadRspCmd
   2135           * @brief   Parse the "Profile" Read Response Commands
   2136           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2137           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2138           * @param   pCmd - pointer to incoming data to parse
   2139           * @return  pointer to the parsed command structure
   2140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E9           MOV     A,R1
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   FC           MOV     R4,A
   \   000004   7D00         MOV     R5,#0x0
   \   000006   AA..         MOV     R2,?V0 + 2
   \   000008   AB..         MOV     R3,?V0 + 3
   \   00000A                REQUIRE ?Subroutine106
   \   00000A                ; // Fall through to label ?Subroutine106

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2141          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   2142          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine39 & 0xFFFF
   2143            zclReadRspCmd_t *readRspCmd;
   2144            zclReadRspStatus_t *statusRec;
   2145            uint8 *pBuf = pCmd->pData;
   2146            uint8 *dataPtr;
   2147            uint8 numAttr = 0;
   2148            uint8 hdrLen;
   2149            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_44:
   \   000008   8023         SJMP    ??zclParseInReadRspCmd_0
   2150            uint8 attrDataLen;
   2151            uint8 dataType;
   2152            uint8 status;
   2153            uint8 i;
   2154            
   2155            // find out the number of attributes and the length of attribute data
   2156            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2157            {
   2158              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   00000A   05..         INC     ?V0 + 7
   2159          
   2160              pBuf += 2; // move pass attribute id
   \   00000C   EE           MOV     A,R6
   \   00000D   2402         ADD     A,#0x2
   \   00000F   0E           INC     R6
   \   000010   0E           INC     R6
   \   000011   EF           MOV     A,R7
   \   000012   12....       LCALL   ?Subroutine70 & 0xFFFF
   2161              
   2162              status = *pBuf++;  
   \                     ??CrossCallReturnLabel_89:
   \   000015   A3           INC     DPTR
   \   000016   AE82         MOV     R6,DPL
   \   000018   AF83         MOV     R7,DPH
   2163              if ( status == ZCL_STATUS_SUCCESS )
   \   00001A   7011         JNZ     ??zclParseInReadRspCmd_0
   2164              {
   2165                dataType = *pBuf++;
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   A3           INC     DPTR
   \   00001F   0E           INC     R6
   \   000020   12....       LCALL   ?Subroutine66 & 0xFFFF
   2166          
   2167                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2168                pBuf += attrDataLen; // move pass attribute data
   2169                
   2170                if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_81:
   \   000023   5002         JNC     ??zclParseInReadRspCmd_2
   2171                  attrDataLen++;
   \   000025   05..         INC     ?V0 + 8
   2172                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   000027   E5..         MOV     A,?V0 + 8
   \   000029   25..         ADD     A,?V0 + 6
   \   00002B   F5..         MOV     ?V0 + 6,A
   2173              }
   2174            }
   \                     ??zclParseInReadRspCmd_0:
   \   00002D   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000030   40D8         JC      ??zclParseInReadRspCmd_1
   2175           
   2176            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) ); // calculate the length of the response header
   \   000032   75F006       MOV     B,#0x6
   \   000035   12....       LCALL   ?Subroutine60 & 0xFFFF
   2177            
   2178            readRspCmd = (zclReadRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2179            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_190:
   \   000038   7001         JNZ     ??zclParseInReadRspCmd_3
   \   00003A   EB           MOV     A,R3
   \                     ??zclParseInReadRspCmd_3:
   \   00003B   6049         JZ      ??zclParseInReadRspCmd_4
   2180            {
   2181              pBuf = pCmd->pData;
   \   00003D   12....       LCALL   ?Subroutine24 & 0xFFFF
   2182              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   2183                  
   2184              readRspCmd->numAttr = numAttr;
   2185              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_26:
   \   000040   803D         SJMP    ??zclParseInReadRspCmd_5
   2186              {
   2187                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   000042   E5..         MOV     A,?V0 + 9
   \   000044   75F006       MOV     B,#0x6
   \   000047   12....       LCALL   ?Subroutine3 & 0xFFFF
   2188                
   2189                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2190                pBuf += 2;
   2191                
   2192                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_136:
   \   00004A   12....       LCALL   ?Subroutine6 & 0xFFFF
   2193                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_199:
   \   00004D   702E         JNZ     ??CrossCallReturnLabel_83
   2194                {
   2195                  statusRec->dataType = *pBuf++;
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   85..82       MOV     DPL,?V0 + 10
   \   000054   85..83       MOV     DPH,?V0 + 11
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00005D   0E           INC     R6
   \   00005E   AF83         MOV     R7,DPH
   2196          
   2197                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   000060                ; Setup parameters for call to function zclGetAttrDataLength
   \   000060   12....       LCALL   ?Subroutine72 & 0xFFFF
   2198                  osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_148:
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000066   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   2199                  statusRec->data = dataPtr;
   \   00006C   85..82       MOV     DPL,?V0 + 10
   \   00006F   85..83       MOV     DPH,?V0 + 11
   \   000072   A3           INC     DPTR
   \   000073   12....       LCALL   ?Subroutine4 & 0xFFFF
   2200                  
   2201                  pBuf += attrDataLen; // move pass attribute data
   2202                 
   2203                  if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_6:
   \   000076   5002         JNC     ??zclParseInReadRspCmd_7
   2204                    attrDataLen++;
   \   000078   05..         INC     ?V0 + 8
   2205                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   00007A   12....       LCALL   ?Subroutine67 & 0xFFFF
   2206                }
   2207              }
   \                     ??CrossCallReturnLabel_83:
   \   00007D   05..         INC     ?V0 + 9
   \                     ??zclParseInReadRspCmd_5:
   \   00007F   E5..         MOV     A,?V0 + 9
   \   000081   C3           CLR     C
   \   000082   95..         SUBB    A,?V0 + 7
   \   000084   40BC         JC      ??zclParseInReadRspCmd_6
   2208            }
   2209            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   000086                REQUIRE ?Subroutine117
   \   000086                ; // Fall through to label ?Subroutine117
   2210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   7F0C         MOV     R7,#0xc
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E5..         MOV     A,?V0 + 7
   \   000002   A4           MUL     AB
   \   000003   04           INC     A
   \   000004   FA           MOV     R2,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8582..       MOV     ?V0 + 4,DPL
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   85....       MOV     ?V0 + 0,?V0 + 6
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3400         ADDC    A,#0x0
   \   000015   FB           MOV     R3,A
   \   000016                REQUIRE ??Subroutine130_0
   \   000016                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine131_0
   \   000007                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   28           ADD     A,R0
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   39           ADDC    A,R1
   \   00000F   F9           MOV     R1,A
   \   000010   C3           CLR     C
   \   000011   EE           MOV     A,R6
   \   000012   98           SUBB    A,R0
   \   000013   EF           MOV     A,R7
   \   000014   99           SUBB    A,R1
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?V0 + 10
   \   000003   85..83       MOV     DPH,?V0 + 11
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine132_0
   \   000008                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000007   E9           MOV     A,R1
   \   000008   F5..         MOV     ?V0 + 8,A
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   8E..         MOV     ?V0 + 4,R6
   \   00000C   8F..         MOV     ?V0 + 5,R7
   \   00000E                REQUIRE ?Subroutine107
   \   00000E                ; // Fall through to label ?Subroutine107

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 8
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   25..         ADD     A,?V0 + 4
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   E5..         MOV     A,?V0 + 3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   AF83         MOV     R7,DPH
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000009   E9           MOV     A,R1
   \   00000A   F5..         MOV     ?V0 + 8,A
   \   00000C   F5..         MOV     ?V0 + 4,A
   \   00000E   EE           MOV     A,R6
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FE           MOV     R6,A
   \   000012   EF           MOV     A,R7
   \   000013   3400         ADDC    A,#0x0
   \   000015   FF           MOV     R7,A
   \   000016   E9           MOV     A,R1
   \   000017   A2E0         MOV     C,0xE0 /* A   */.0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   EA           MOV     A,R2
   \   000005   2403         ADD     A,#0x3
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FE           MOV     R6,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
   \   000012   75..00       MOV     ?V0 + 7,#0x0
   \   000015   75..00       MOV     ?V0 + 6,#0x0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   EA           MOV     A,R2
   \   00000C   25..         ADD     A,?V0 + 4
   \   00000E   F5..         MOV     ?V0 + 2,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F5..         MOV     ?V0 + 3,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   E5..         MOV     A,?V0 + 7
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   75..00       MOV     ?V0 + 9,#0x0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   25..         ADD     A,?V0 + 4
   \   00000D   FE           MOV     R6,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FF           MOV     R7,A
   \   000012   E5..         MOV     A,?V0 + 8
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 10,DPL
   \   000007   8583..       MOV     ?V0 + 11,DPH
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   EA           MOV     A,R2
   \   000014   85..82       MOV     DPL,?V0 + 10
   \   000017   85..83       MOV     DPH,?V0 + 11
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   E9           MOV     A,R1
   \   00001D   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000020   02....       LJMP    ?Subroutine105 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 0
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 1
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004                ; Setup parameters for call to function zclGetAttrDataLength
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET
   2211          #endif // ZCL_READ
   2212          
   2213          #ifdef ZCL_WRITE
   2214          /*********************************************************************
   2215           * @fn      zclParseInWriteCmd
   2216           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   2217           *          Response Commands
   2218           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2219           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2220           * @param   pCmd - pointer to incoming data to parse
   2221           * @return  pointer to the parsed command structure
   2222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2223          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   2224          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine39 & 0xFFFF
   2225            zclWriteCmd_t *writeCmd;
   2226            zclWriteRec_t *statusRec;
   2227            uint8 *pBuf = pCmd->pData;
   2228            uint8 attrDataLen;
   2229            uint8 *dataPtr;
   2230            uint8 numAttr = 0;
   2231            uint8 hdrLen;
   2232            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_45:
   \   000008   801B         SJMP    ??zclParseInWriteCmd_0
   2233            uint8 dataType;
   2234            uint8 i;
   2235          
   2236            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   2237            {
   2238              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   00000A   05..         INC     ?V0 + 7
   2239          
   2240              pBuf += 2; // move pass attribute id
   \   00000C   EE           MOV     A,R6
   \   00000D   2402         ADD     A,#0x2
   \   00000F   0E           INC     R6
   \   000010   0E           INC     R6
   \   000011   EF           MOV     A,R7
   \   000012   12....       LCALL   ?Subroutine68 & 0xFFFF
   2241          
   2242              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_85:
   \   000015   A3           INC     DPTR
   \   000016   AE82         MOV     R6,DPL
   \   000018   12....       LCALL   ?Subroutine66 & 0xFFFF
   2243          
   2244              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2245              pBuf += attrDataLen; // move pass attribute data
   2246              
   2247              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_82:
   \   00001B   5002         JNC     ??zclParseInWriteCmd_2
   2248                attrDataLen++;
   \   00001D   05..         INC     ?V0 + 8
   2249              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   00001F   E5..         MOV     A,?V0 + 8
   \   000021   25..         ADD     A,?V0 + 6
   \   000023   F5..         MOV     ?V0 + 6,A
   2250            }
   \                     ??zclParseInWriteCmd_0:
   \   000025   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000028   40E0         JC      ??zclParseInWriteCmd_1
   2251            
   2252            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) ); // calculate the length of the response header
   \   00002A   75F005       MOV     B,#0x5
   \   00002D   12....       LCALL   ?Subroutine60 & 0xFFFF
   2253            
   2254            writeCmd = (zclWriteCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2255            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_191:
   \   000030   7001         JNZ     ??zclParseInWriteCmd_3
   \   000032   EB           MOV     A,R3
   \                     ??zclParseInWriteCmd_3:
   \   000033   6036         JZ      ??zclParseInWriteCmd_4
   2256            {
   2257              pBuf = pCmd->pData;
   \   000035   12....       LCALL   ?Subroutine24 & 0xFFFF
   2258              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   2259          
   2260              writeCmd->numAttr = numAttr;
   2261              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_27:
   \   000038   802A         SJMP    ??zclParseInWriteCmd_5
   2262              {
   2263                statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   00003A   E5..         MOV     A,?V0 + 9
   \   00003C   75F005       MOV     B,#0x5
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
   2264                
   2265                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2266                pBuf += 2;
   2267                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_137:
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   ?Subroutine6 & 0xFFFF
   2268          
   2269                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_200:
   \   000046                ; Setup parameters for call to function zclGetAttrDataLength
   \   000046   12....       LCALL   ?Subroutine72 & 0xFFFF
   2270                osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_149:
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004C   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   2271                statusRec->attrData = dataPtr;
   \   000052   85..82       MOV     DPL,?V0 + 10
   \   000055   85..83       MOV     DPH,?V0 + 11
   \   000058   12....       LCALL   ?Subroutine4 & 0xFFFF
   2272                
   2273                pBuf += attrDataLen; // move pass attribute data
   2274          
   2275                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_7:
   \   00005B   5002         JNC     ??zclParseInWriteCmd_7
   2276                  attrDataLen++;
   \   00005D   05..         INC     ?V0 + 8
   2277                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   00005F   12....       LCALL   ?Subroutine67 & 0xFFFF
   2278              }
   \                     ??CrossCallReturnLabel_84:
   \   000062   05..         INC     ?V0 + 9
   \                     ??zclParseInWriteCmd_5:
   \   000064   E5..         MOV     A,?V0 + 9
   \   000066   C3           CLR     C
   \   000067   95..         SUBB    A,?V0 + 7
   \   000069   40CF         JC      ??zclParseInWriteCmd_6
   2279            }
   2280            
   2281            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   00006B   02....       LJMP    ?Subroutine117 & 0xFFFF
   2282          }
   2283          
   2284          /*********************************************************************
   2285           * @fn      zclParseInWriteRspCmd
   2286           * @brief   Parse the "Profile" Write Response Commands
   2287           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2288           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2289           * @param   pCmd - pointer to incoming data to parse
   2290           * @return  pointer to the parsed command structure
   2291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2292          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   2293          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2294            zclWriteRspCmd_t *writeRspCmd;
   2295            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV     A,R2
   \   000006   2403         ADD     A,#0x3
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000E   12....       LCALL   ?Subroutine40 & 0xFFFF
   2296            uint8 i = 0;
   \                     ??CrossCallReturnLabel_47:
   \   000011   75..00       MOV     ?V0 + 4,#0x0
   2297          
   2298            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000014   12....       LCALL   ?Subroutine33 & 0xFFFF
   2299            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_37:
   \   000017   7001         JNZ     ??zclParseInWriteRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInWriteRspCmd_0:
   \   00001A   605C         JZ      ??zclParseInWriteRspCmd_1
   2300            {
   2301              if ( pCmd->dataLen == 1 )
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7002         JNZ     ??zclParseInWriteRspCmd_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \                     ??zclParseInWriteRspCmd_2:
   \   000029   703B         JNZ     ??CrossCallReturnLabel_154
   2302              {
   2303                writeRspCmd->attrList[i++].status = *pBuf; // special case when all writes were successfull
   \   00002B   12....       LCALL   ?Subroutine49 & 0xFFFF
   2304              }
   \                     ??CrossCallReturnLabel_218:
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   75..01       MOV     ?V0 + 4,#0x1
   \   000033   803C         SJMP    ??zclParseInWriteRspCmd_3
   2305              else
   2306              {
   2307                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2308                {
   2309                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000035   E5..         MOV     A,?V0 + 4
   \   000037   75F003       MOV     B,#0x3
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   EA           MOV     A,R2
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EB           MOV     A,R3
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ?Subroutine5 & 0xFFFF
   2310                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_9:
   \   000050   F5..         MOV     ?V0 + 6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FD           MOV     R5,A
   \   000055   E5..         MOV     A,?V0 + 6
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   ED           MOV     A,R5
   \   000060   F0           MOVX    @DPTR,A
   \   000061   05..         INC     ?V0 + 4
   2311                  pBuf += 2;
   \   000063   12....       LCALL   ?Subroutine101 & 0xFFFF
   2312                }
   \                     ??CrossCallReturnLabel_154:
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   2313              }
   \                     ??CrossCallReturnLabel_195:
   \   00006F   40C4         JC      ??zclParseInWriteRspCmd_4
   2314              writeRspCmd->numAttr = i; 
   \                     ??zclParseInWriteRspCmd_3:
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   E5..         MOV     A,?V0 + 4
   \   000077   F0           MOVX    @DPTR,A
   2315            }
   2316            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_1:
   \   000078   02....       LJMP    ?Subroutine115 & 0xFFFF
   2317          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   22           RET
   2318          #endif // ZCL_WRITE
   2319          
   2320          #ifdef ZCL_REPORT
   2321          /*********************************************************************
   2322           * @fn      zclParseInConfigReportCmd
   2323           * @brief   Parse the "Profile" Configure Reporting Command
   2324           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2325           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2326           * @param   pCmd - pointer to incoming data to parse
   2327           * @return  pointer to the parsed command structure
   2328           */
   2329          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   2330          {
   2331            zclCfgReportCmd_t *cfgReportCmd;
   2332            zclCfgReportRec_t *reportRec;
   2333            uint8 *pBuf = pCmd->pData;
   2334            uint8 *dataPtr;
   2335            uint8 numAttr = 0;
   2336            uint8 direction;
   2337            uint8 dataType;
   2338            uint8 hdrLen;
   2339            uint8 dataLen = 0;
   2340            uint8 reportChangeLen; // length of Reportable Change field
   2341            uint8 i;
   2342           
   2343            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // Calculate the length of the Request command
   2344            {
   2345              numAttr++;
   2346              
   2347              direction = *pBuf++;
   2348              pBuf += 2; // move pass the attribute ID
   2349              
   2350              if ( direction == ZCL_SEND_ATTR_REPORTS ) // Is there a Reportable Change field?
   2351              {
   2352                dataType = *pBuf++;
   2353                pBuf += 4; // move pass the Min and Max Reporting Intervals
   2354           
   2355                if ( zclAnalogDataType( dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2356                {
   2357                  reportChangeLen = zclGetDataTypeLength( dataType );
   2358                  pBuf += reportChangeLen;
   2359                  
   2360                  if ( PADDING_NEEDED( reportChangeLen ) ) // add padding if needed
   2361                    reportChangeLen++;
   2362                  dataLen += reportChangeLen;
   2363                }
   2364              }
   2365              else
   2366              {
   2367                pBuf += 2; // move pass the Timeout Period
   2368              }
   2369            } // while loop
   2370          
   2371            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   2372            
   2373            cfgReportCmd = (zclCfgReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2374            if ( cfgReportCmd != NULL )
   2375            { 
   2376              pBuf = pCmd->pData;
   2377              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   2378              
   2379              cfgReportCmd->numAttr = numAttr;
   2380              for ( i = 0; i < numAttr; i++ )
   2381              {
   2382                reportRec = &(cfgReportCmd->attrList[i]);
   2383                
   2384                osal_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   2385                  
   2386                reportRec->direction = *pBuf++;
   2387                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2388                pBuf += 2;
   2389                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   2390                {
   2391                 
   2392                  reportRec->dataType = *pBuf++; // Attribute to be reported
   2393                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2394                  pBuf += 2;
   2395                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2396                  pBuf += 2;
   2397                 
   2398                  if ( zclAnalogDataType( reportRec->dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2399                  {
   2400                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   2401                    reportRec->reportableChange = dataPtr;
   2402                    
   2403                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   2404                    pBuf += reportChangeLen;
   2405                   
   2406                    if ( PADDING_NEEDED( reportChangeLen ) ) // advance attribute data pointer
   2407                      reportChangeLen++;
   2408                    dataPtr += reportChangeLen;
   2409                  }
   2410                }
   2411                else
   2412                {
   2413                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] ); // Attribute reports to be received
   2414                  pBuf += 2;
   2415                }
   2416              } // while loop
   2417            }
   2418            return ( (void *)cfgReportCmd );
   2419          }
   2420          
   2421          /*********************************************************************
   2422           * @fn      zclParseInConfigReportRspCmd
   2423           * @brief   Parse the "Profile" Configure Reporting Response Command
   2424           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2425           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2426           * @param   pCmd - pointer to incoming data to parse
   2427           * @return  pointer to the parsed command structure
   2428           */
   2429          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   2430          {
   2431            zclCfgReportRspCmd_t *cfgReportRspCmd;
   2432            uint8 *pBuf = pCmd->pData;
   2433            uint8 numAttr;
   2434            uint8 i; 
   2435            
   2436            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   2437            
   2438            cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof( zclCfgReportRspCmd_t ) 
   2439                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   2440            if ( cfgReportRspCmd != NULL )
   2441            {
   2442              cfgReportRspCmd->numAttr = numAttr;
   2443              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   2444              {
   2445                cfgReportRspCmd->attrList[i].status = *pBuf++;
   2446                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   2447                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2448                pBuf += 2;
   2449              }
   2450            }
   2451            return ( (void *)cfgReportRspCmd );  
   2452          }
   2453          
   2454          /*********************************************************************
   2455           * @fn      zclParseInReadReportCfgCmd
   2456           * @brief   Parse the "Profile" Read Reporting Configuration Command
   2457           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2458           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2459           * @param   pCmd - pointer to incoming data to parse
   2460           * @return  pointer to the parsed command structure
   2461           */
   2462          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   2463          {
   2464            zclReadReportCfgCmd_t *readReportCfgCmd;
   2465            uint8 *pBuf = pCmd->pData;
   2466            uint8 numAttr;
   2467            uint8 i;
   2468            
   2469            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   2470            
   2471            readReportCfgCmd = (zclReadReportCfgCmd_t *)osal_mem_alloc( sizeof( zclReadReportCfgCmd_t ) 
   2472                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   2473            if ( readReportCfgCmd != NULL )
   2474            {
   2475              readReportCfgCmd->numAttr = numAttr;
   2476              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   2477              {
   2478                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   2479                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2480                pBuf += 2;
   2481              }
   2482            }
   2483            return ( (void *)readReportCfgCmd );
   2484          }
   2485          
   2486          /*********************************************************************
   2487           * @fn      zclParseInReadReportCfgRspCmd
   2488           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   2489           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2490           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2491           * @param   pCmd - pointer to incoming data to parse
   2492           * @return  pointer to the parsed command structure
   2493           */
   2494          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   2495          {
   2496            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   2497            zclReportCfgRspRec_t *reportRspRec;
   2498            uint8 reportChangeLen;
   2499            uint8 *pBuf = pCmd->pData;
   2500            uint8 *dataPtr;
   2501            uint8 numAttr = 0;
   2502            uint8 hdrLen;
   2503            uint8 dataLen = 0;
   2504            uint8 status;
   2505            uint8 direction;
   2506            uint8 dataType;
   2507            uint8 i;
   2508            
   2509            // Calculate the length of the response command
   2510            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2511            { 
   2512              numAttr++;
   2513              
   2514              status = *pBuf++;
   2515              direction = *pBuf++; 
   2516              pBuf += 2; // move pass the attribute ID
   2517              
   2518              if ( status == ZCL_STATUS_SUCCESS )
   2519              {
   2520                if ( direction == ZCL_SEND_ATTR_REPORTS )
   2521                {
   2522                  dataType = *pBuf++;
   2523                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   2524           
   2525                  // For attributes of 'discrete' data types this field is omitted
   2526                  if ( zclAnalogDataType( dataType ) )
   2527                  {
   2528                    reportChangeLen = zclGetDataTypeLength( dataType );
   2529                    pBuf += reportChangeLen;
   2530                    
   2531                    // add padding if needed
   2532                    if ( PADDING_NEEDED( reportChangeLen ) )
   2533                      reportChangeLen++;
   2534                    dataLen += reportChangeLen;
   2535                  }
   2536                }
   2537                else
   2538                {
   2539                  pBuf += 2; // move pass the Timeout field
   2540                }
   2541              }
   2542            } // while loop
   2543            
   2544            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   2545            
   2546            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2547            if ( readReportCfgRspCmd != NULL )
   2548            {
   2549              pBuf = pCmd->pData;
   2550              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   2551              
   2552              readReportCfgRspCmd->numAttr = numAttr;
   2553              for ( i = 0; i < numAttr; i++ )
   2554              {
   2555                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   2556                
   2557                reportRspRec->status = *pBuf++;
   2558                reportRspRec->direction = *pBuf++;
   2559                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2560                pBuf += 2;
   2561           
   2562                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   2563                {
   2564                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   2565                  {
   2566                    reportRspRec->dataType = *pBuf++;
   2567                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2568                    pBuf += 2;
   2569                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2570                    pBuf += 2;
   2571          
   2572                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   2573                    {
   2574                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   2575                      reportRspRec->reportableChange = dataPtr;
   2576                      
   2577                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType ); 
   2578                      pBuf += reportChangeLen;
   2579                      
   2580                      // advance attribute data pointer
   2581                      if ( PADDING_NEEDED( reportChangeLen ) )
   2582                        reportChangeLen++;
   2583                      dataPtr += reportChangeLen;
   2584                    }
   2585                  }
   2586                  else
   2587                  {
   2588                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   2589                    pBuf += 2;
   2590                  }
   2591                }
   2592              } 
   2593            }
   2594            
   2595            return ( (void *)readReportCfgRspCmd );
   2596          }
   2597          
   2598          /*********************************************************************
   2599           * @fn      zclParseInReportCmd
   2600           * @brief   Parse the "Profile" Report Command
   2601           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2602           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2603           * @param   pCmd - pointer to incoming data to parse
   2604           * @return  pointer to the parsed command structure
   2605           */
   2606          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   2607          {
   2608            zclReportCmd_t *reportCmd;
   2609            zclReport_t *reportRec;
   2610            uint8 *pBuf = pCmd->pData;
   2611            uint8 attrDataLen;
   2612            uint8 *dataPtr;
   2613            uint8 numAttr = 0;
   2614            uint8 hdrLen;
   2615            uint8 dataLen = 0;
   2616            uint8 dataType;
   2617            uint8 i;
   2618          
   2619            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   2620            {
   2621              numAttr++;
   2622          
   2623              pBuf += 2; // move pass attribute id
   2624              dataType = *pBuf++;
   2625              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2626              pBuf += attrDataLen; // move pass attribute data
   2627                
   2628              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   2629                attrDataLen++;
   2630              dataLen += attrDataLen;
   2631            }
   2632            
   2633            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   2634            
   2635            reportCmd = (zclReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2636            if (reportCmd != NULL )
   2637            {
   2638              pBuf = pCmd->pData;
   2639              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   2640              
   2641              reportCmd->numAttr = numAttr;
   2642              for ( i = 0; i < numAttr; i++ )
   2643              {
   2644                reportRec = &(reportCmd->attrList[i]);
   2645                
   2646                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2647                pBuf += 2;
   2648                reportRec->dataType = *pBuf++;
   2649          
   2650                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );  
   2651                osal_memcpy( dataPtr, pBuf, attrDataLen );
   2652                reportRec->attrData = dataPtr;
   2653                
   2654                pBuf += attrDataLen; // move pass attribute data
   2655                
   2656                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   2657                  attrDataLen++;
   2658                dataPtr += attrDataLen;
   2659              }
   2660            }
   2661            return ( (void *)reportCmd );
   2662          }
   2663          #endif // ZCL_REPORT
   2664          
   2665          /*********************************************************************
   2666           * @fn      zclParseInDefaultRspCmd
   2667           * @brief   Parse the "Profile" Default Response Command
   2668           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2669           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2670           * @param   pCmd - pointer to incoming data to parse
   2671           * @return  pointer to the parsed command structure
   2672           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2673          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   2674          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2675            zclDefaultRspCmd_t *defaultRspCmd;
   2676            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine40 & 0xFFFF
   2677          
   2678            defaultRspCmd = (zclDefaultRspCmd_t *)osal_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_48:
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A02         MOV     R2,#0x2
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_mem_alloc?relay
   2679            if ( defaultRspCmd != NULL )
   \   000016   EA           MOV     A,R2
   \   000017   7001         JNZ     ??zclParseInDefaultRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInDefaultRspCmd_0:
   \   00001A   600D         JZ      ??zclParseInDefaultRspCmd_1
   2680            {
   2681              defaultRspCmd->commandID = *pBuf++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   12....       LCALL   ?Subroutine7 & 0xFFFF
   2682              defaultRspCmd->statusCode = *pBuf;
   \                     ??CrossCallReturnLabel_206:
   \   000024   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   2683            }
   \                     ??CrossCallReturnLabel_215:
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   2684            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_1:
   \   000029   02....       LJMP    ?Subroutine112 & 0xFFFF
   2685          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine133_0
   \   000004                ; // Fall through to label ??Subroutine133_0
   2686          
   2687          #ifdef ZCL_DISCOVER
   2688          /*********************************************************************
   2689           * @fn      zclParseInDiscCmd
   2690           * @brief   Parse the "Profile" Discovery Commands
   2691           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2692           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2693           * @param   pCmd - pointer to incoming data to parse
   2694           * @return  pointer to the parsed command structure
   2695           */
   2696          void *zclParseInDiscCmd( zclParseCmd_t *pCmd )
   2697          {
   2698            zclDiscoverCmd_t *discoverCmd;
   2699            uint8 *pBuf = pCmd->pData;
   2700          
   2701            discoverCmd = (zclDiscoverCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverCmd_t ) );
   2702            if ( discoverCmd != NULL )
   2703            {
   2704              discoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2705              pBuf += 2;
   2706              discoverCmd->maxAttrIDs = *pBuf;
   2707            }
   2708            return ( (void *)discoverCmd );
   2709          }
   2710          
   2711          /*********************************************************************
   2712           * @fn      zclParseInDiscRspCmd
   2713           * @brief   Parse the "Profile" Discovery Response Commands
   2714           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2715           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2716           * @param   pCmd - pointer to incoming data to parse
   2717           * @return  pointer to the parsed command structure
   2718           */
   2719          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   2720          static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd )
   2721          {
   2722            zclDiscoverRspCmd_t *discoverRspCmd;
   2723            uint8 *pBuf = pCmd->pData;
   2724            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   2725            uint8 i;
   2726          
   2727            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverRspCmd_t ) 
   2728                                                           + ( numAttr * sizeof(zclDiscoverInfo_t) ) );
   2729            if ( discoverRspCmd != NULL )
   2730            {
   2731              discoverRspCmd->discComplete = *pBuf++;
   2732              discoverRspCmd->numAttr = numAttr;
   2733              
   2734              for ( i = 0; i < numAttr; i++ )
   2735              {
   2736                discoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2737                pBuf += 2;
   2738                discoverRspCmd->attrList[i].dataType = *pBuf++;;
   2739              }
   2740            }
   2741            return ( (void *)discoverRspCmd );
   2742          }
   2743          #endif // ZCL_DISCOVER
   2744          
   2745          #ifdef ZCL_READ
   2746          /*********************************************************************
   2747           * @fn      zclProcessInReadCmd
   2748           * @brief   Process the "Profile" Read Command
   2749           * @param   pInMsg - incoming message to process
   2750           * @return  TRUE if command processed. FALSE, otherwise.
   2751           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2752          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   2753          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   2754            zclReadCmd_t *readCmd;
   2755            zclReadRspCmd_t *readRspCmd;
   2756            zclReadRspStatus_t *statusRec;
   2757            zclAttrRec_t attrRec;
   2758            uint8 len;
   2759            uint8 i;
   2760            
   2761            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
   2762            
   2763            // calculate the length of the response status record
   2764            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   2765            
   2766            readRspCmd = osal_mem_alloc( len );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   75F006       MOV     B,#0x6
   \   00001A   85..82       MOV     DPL,?V0 + 2
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   A4           MUL     AB
   \   000021   04           INC     A
   \   000022   FA           MOV     R2,A
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   2767            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_192:
   \   000028   7001         JNZ     ??zclProcessInReadCmd_0
   \   00002A   EB           MOV     A,R3
   \                     ??zclProcessInReadCmd_0:
   \   00002B   7005         JNZ     ??zclProcessInReadCmd_1
   2768              return FALSE; // EMBEDDED RETURN
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   02....       LJMP    ??zclProcessInReadCmd_2 & 0xFFFF
   2769          
   2770            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_1:
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00003B   F0           MOVX    @DPTR,A
   2771            for (i = 0; i < readCmd->numAttr; i++)
   \   00003C   75..00       MOV     ?V0 + 6,#0x0
   \   00003F   800B         SJMP    ??zclProcessInReadCmd_3
   2772            {
   2773              statusRec = &(readRspCmd->attrList[i]);
   2774              statusRec->attrID = readCmd->attrID[i];
   2775              
   2776              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec ) )
   2777              {
   2778                statusRec->data = attrRec.attr.dataPtr;
   2779                statusRec->status = ZCL_STATUS_SUCCESS;
   2780                statusRec->dataType = attrRec.attr.dataType;
   2781              }
   2782              else
   2783              {
   2784                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_4:
   \   000041   7486         MOV     A,#-0x7a
   \   000043   85..82       MOV     DPL,?V0 + 10
   \   000046   85..83       MOV     DPH,?V0 + 11
   \                     ??zclProcessInReadCmd_5:
   \   000049   F0           MOVX    @DPTR,A
   2785              }
   \   00004A   05..         INC     ?V0 + 6
   \                     ??zclProcessInReadCmd_3:
   \   00004C   85..82       MOV     DPL,?V0 + 2
   \   00004F   85..83       MOV     DPH,?V0 + 3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   E5..         MOV     A,?V0 + 6
   \   000056   C3           CLR     C
   \   000057   9A           SUBB    A,R2
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??zclProcessInReadCmd_6 & 0xFFFF
   \   00005D   85..82       MOV     DPL,?V0 + 6
   \   000060   A882         MOV     R0,DPL
   \   000062   E8           MOV     A,R0
   \   000063   75F006       MOV     B,#0x6
   \   000066   A4           MUL     AB
   \   000067   FA           MOV     R2,A
   \   000068   ABF0         MOV     R3,B
   \   00006A   E5..         MOV     A,?V0 + 0
   \   00006C   2A           ADD     A,R2
   \   00006D   F582         MOV     DPL,A
   \   00006F   E5..         MOV     A,?V0 + 1
   \   000071   3B           ADDC    A,R3
   \   000072   F583         MOV     DPH,A
   \   000074   A3           INC     DPTR
   \   000075   AE82         MOV     R6,DPL
   \   000077   AF83         MOV     R7,DPH
   \   000079   E8           MOV     A,R0
   \   00007A   C3           CLR     C
   \   00007B   33           RLC     A
   \   00007C   F8           MOV     R0,A
   \   00007D   E4           CLR     A
   \   00007E   33           RLC     A
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00008A   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00008D   EE           MOV     A,R6
   \   00008E   2402         ADD     A,#0x2
   \   000090   F5..         MOV     ?V0 + 10,A
   \   000092   EF           MOV     A,R7
   \   000093   3400         ADDC    A,#0x0
   \   000095   F5..         MOV     ?V0 + 11,A
   \   000097   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00009A                ; Setup parameters for call to function zclFindAttrRec
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   8582..       MOV     ?V0 + 12,DPL
   \   0000A3   8583..       MOV     ?V0 + 13,DPH
   \   0000A6   78..         MOV     R0,#?V0 + 12
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV     A,R1
   \   0000B6   6089         JZ      ??zclProcessInReadCmd_4
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0000C7   E4           CLR     A
   \   0000C8   85..82       MOV     DPL,?V0 + 10
   \   0000CB   85..83       MOV     DPH,?V0 + 11
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   02....       LJMP    ??zclProcessInReadCmd_5 & 0xFFFF
   2786            }
   2787            
   2788            // Build and send Read Response command
   2789            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   2790                             readRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   2791                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   0000DF   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0000E2                ; Setup parameters for call to function zcl_SendReadRsp
   \   0000E2   85..82       MOV     DPL,?V0 + 4
   \   0000E5   85..83       MOV     DPH,?V0 + 5
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V0 + 2,A
   \   0000F1   78..         MOV     R0,#?V0 + 2
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   75..01       MOV     ?V0 + 2,#0x1
   \   0000F9   78..         MOV     R0,#?V0 + 2
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   85..82       MOV     DPL,?V0 + 8
   \   00010B   85..83       MOV     DPH,?V0 + 9
   \   00010E   12....       LCALL   ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000111   E5..         MOV     A,?V0 + 8
   \   000113   2406         ADD     A,#0x6
   \   000115   FA           MOV     R2,A
   \   000116   E5..         MOV     A,?V0 + 9
   \   000118   3400         ADDC    A,#0x0
   \   00011A   FB           MOV     R3,A
   \   00011B   E5..         MOV     A,?V0 + 8
   \   00011D   2414         ADD     A,#0x14
   \   00011F   F582         MOV     DPL,A
   \   000121   E5..         MOV     A,?V0 + 9
   \   000123   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000126   F9           MOV     R1,A
   \   000127   12....       LCALL   ??zcl_SendReadRsp?relay
   \   00012A   7405         MOV     A,#0x5
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   2792            osal_mem_free( readRspCmd );
   \   00012F                ; Setup parameters for call to function osal_mem_free
   \   00012F   AA..         MOV     R2,?V0 + 0
   \   000131   AB..         MOV     R3,?V0 + 1
   \   000133   12....       LCALL   ??osal_mem_free?relay
   2793              
   2794            return TRUE;
   \   000136   7901         MOV     R1,#0x1
   \                     ??zclProcessInReadCmd_2:
   \   000138   7408         MOV     A,#0x8
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   02....       LJMP    ??Subroutine121_0 & 0xFFFF
   2795          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine134_0
   \   000006                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine135_0
   \   000001                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 8
   \   000007   85..83       MOV     DPH,?V0 + 9
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00000E   E5..         MOV     A,?V0 + 8
   \   000010   2414         ADD     A,#0x14
   \   000012   F582         MOV     DPL,A
   \   000014   E5..         MOV     A,?V0 + 9
   \   000016   3400         ADDC    A,#0x0
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??zclFindAttrRec?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine141_0
   \   000006                ; // Fall through to label ??Subroutine141_0
   2796          #endif // ZCL_READ
   2797          
   2798          #ifdef ZCL_WRITE
   2799          /*********************************************************************
   2800           * @fn      processInWriteCmd
   2801           * @brief   Process the "Profile" Write and Write No Response Commands
   2802           * @param   pInMsg - incoming message to process
   2803           * @return  TRUE if command processed. FALSE, otherwise.
   2804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F9           MOV     R1,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine137_0
   \   000007                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2805          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   2806          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   2807            zclWriteCmd_t *writeCmd;
   2808            zclWriteRec_t *statusRec;
   2809            zclWriteRspCmd_t *writeRspCmd;
   2810            zclAttrRec_t attrRec;
   2811            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2812            uint8 status;
   2813            uint8 i, j = 0;
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   2814          
   2815            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000014   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2816            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_227:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6402         XRL     A,#0x2
   \   00002B   7013         JNZ     ??zclProcessInWriteCmd_0
   2817            {
   2818              // We need to send a response back - allocate space for it
   2819              writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) 
   2820                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000030   12....       LCALL   ?Subroutine25 & 0xFFFF
   2821              if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_28:
   \   000033   7001         JNZ     ??zclProcessInWriteCmd_1
   \   000035   EB           MOV     A,R3
   \                     ??zclProcessInWriteCmd_1:
   \   000036   7005         JNZ     ??zclProcessInWriteCmd_2
   2822                return FALSE; // EMBEDDED RETURN
   \   000038   7900         MOV     R1,#0x0
   \   00003A   02....       LJMP    ??zclProcessInWriteCmd_3 & 0xFFFF
   2823              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_2:
   \   00003D   75..01       MOV     ?V0 + 4,#0x1
   2824            }
   2825            
   2826            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteCmd_0:
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   801D         SJMP    ??zclProcessInWriteCmd_4
   2827            {
   2828              statusRec = &(writeCmd->attrList[i]);
   2829              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2830              {
   2831                if ( statusRec->dataType == attrRec.attr.dataType )
   2832                {
   2833                  status = zclWriteAttrData( &attrRec, statusRec );
   2834          
   2835                  if ( sendRsp && status != ZCL_STATUS_SUCCESS ) // If successful, a write attribute status record shall NOT be generated
   2836                  {
   2837                    writeRspCmd->attrList[j].status = status; // Attribute is read only - move on to the next write attribute record
   2838                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2839                  }
   2840                }
   2841                else
   2842                {
   2843                  if ( sendRsp ) // Attribute data type is incorrect - move on to the next write attribute record
   2844                  {
   2845                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2846                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2847                  }
   2848                }
   2849              }
   2850              else
   2851              {
   2852                if ( sendRsp ) // Attribute is not supported - move on to the next write attribute record
   \                     ??zclProcessInWriteCmd_5:
   \   000045   E5..         MOV     A,?V0 + 4
   \   000047   6017         JZ      ??zclProcessInWriteCmd_6
   2853                {
   2854                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000049   7486         MOV     A,#-0x7a
   \                     ??zclProcessInWriteCmd_7:
   \   00004B   85..82       MOV     DPL,?V0 + 14
   \   00004E   85..83       MOV     DPH,?V0 + 15
   \   000051   F0           MOVX    @DPTR,A
   2855                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   \   000052   12....       LCALL   ?Subroutine55 & 0xFFFF
   2856                }
   2857              }
   \                     ??CrossCallReturnLabel_289:
   \   000055   85..82       MOV     DPL,?V0 + 12
   \   000058   85..83       MOV     DPH,?V0 + 13
   \   00005B   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00005E   05..         INC     ?V0 + 2
   \                     ??zclProcessInWriteCmd_6:
   \   000060   05..         INC     ?V0 + 3
   \                     ??zclProcessInWriteCmd_4:
   \   000062   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FA           MOV     R2,A
   \   000067   E5..         MOV     A,?V0 + 3
   \   000069   C3           CLR     C
   \   00006A   9A           SUBB    A,R2
   \   00006B   4003         JC      $+5
   \   00006D   02....       LJMP    ??zclProcessInWriteCmd_8 & 0xFFFF
   \   000070   E5..         MOV     A,?V0 + 3
   \   000072   75F005       MOV     B,#0x5
   \   000075   A4           MUL     AB
   \   000076   F8           MOV     R0,A
   \   000077   A9F0         MOV     R1,B
   \   000079   85..82       MOV     DPL,?XSP + 0
   \   00007C   85..83       MOV     DPH,?XSP + 1
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   28           ADD     A,R0
   \   000081   FA           MOV     R2,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   39           ADDC    A,R1
   \   000085   8A82         MOV     DPL,R2
   \   000087   F583         MOV     DPH,A
   \   000089   A3           INC     DPTR
   \   00008A   AE82         MOV     R6,DPL
   \   00008C   AF83         MOV     R7,DPH
   \   00008E   E5..         MOV     A,?V0 + 2
   \   000090   75F003       MOV     B,#0x3
   \   000093   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000096   E582         MOV     A,DPL
   \   000098   2402         ADD     A,#0x2
   \   00009A   F5..         MOV     ?V0 + 12,A
   \   00009C   E583         MOV     A,DPH
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   F5..         MOV     ?V0 + 13,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   8582..       MOV     ?V0 + 14,DPL
   \   0000A6   8583..       MOV     ?V0 + 15,DPH
   \   0000A9   85..82       MOV     DPL,?V0 + 6
   \   0000AC   85..83       MOV     DPH,?V0 + 7
   \   0000AF   12....       LCALL   ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   8582..       MOV     ?V0 + 10,DPL
   \   0000B8   8583..       MOV     ?V0 + 11,DPH
   \   0000BB   78..         MOV     R0,#?V0 + 10
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   E9           MOV     A,R1
   \   0000CB   7003         JNZ     $+5
   \   0000CD   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   FA           MOV     R2,A
   \   0000D8   7406         MOV     A,#0x6
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   6A           XRL     A,R2
   \   0000DF   7022         JNZ     ??zclProcessInWriteCmd_9
   \   0000E1                ; Setup parameters for call to function zclWriteAttrData
   \   0000E1   EE           MOV     A,R6
   \   0000E2   FC           MOV     R4,A
   \   0000E3   EF           MOV     A,R7
   \   0000E4   FD           MOV     R5,A
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   AA82         MOV     R2,DPL
   \   0000EC   AB83         MOV     R3,DPH
   \   0000EE   12....       LCALL   ??zclWriteAttrData?relay
   \   0000F1   E9           MOV     A,R1
   \   0000F2   FA           MOV     R2,A
   \   0000F3   E5..         MOV     A,?V0 + 4
   \   0000F5   7003         JNZ     $+5
   \   0000F7   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   0000FA   EA           MOV     A,R2
   \   0000FB   7003         JNZ     $+5
   \   0000FD   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   000100   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   \                     ??zclProcessInWriteCmd_9:
   \   000103   E5..         MOV     A,?V0 + 4
   \   000105   7003         JNZ     $+5
   \   000107   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   00010A   748D         MOV     A,#-0x73
   \   00010C   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   2858            } // for loop
   2859          
   2860            if ( sendRsp )
   \                     ??zclProcessInWriteCmd_8:
   \   00010F   E5..         MOV     A,?V0 + 4
   \   000111   604A         JZ      ??zclProcessInWriteCmd_10
   2861            {
   2862              writeRspCmd->numAttr = j;
   \   000113   85..82       MOV     DPL,?V0 + 0
   \   000116   85..83       MOV     DPH,?V0 + 1
   \   000119   E5..         MOV     A,?V0 + 2
   \   00011B   F0           MOVX    @DPTR,A
   2863              if ( writeRspCmd->numAttr == 0 )
   \   00011C   7003         JNZ     ??CrossCallReturnLabel_12
   2864              {
   2865                // Since all records were written successful, include a single status record in the resonse command 
   2866                // with the status field set to SUCCESS and the attribute ID field omitted.
   2867                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   00011E   12....       LCALL   ?Subroutine10 & 0xFFFF
   2868                writeRspCmd->numAttr = 1;
   2869              }
   2870              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2871                                pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2872                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_12:
   \   000121   85..82       MOV     DPL,?V0 + 6
   \   000124   85..83       MOV     DPH,?V0 + 7
   \   000127   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00012A                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00012A   85..82       MOV     DPL,?V0 + 6
   \   00012D   85..83       MOV     DPH,?V0 + 7
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F5..         MOV     ?V0 + 2,A
   \   000139   78..         MOV     R0,#?V0 + 2
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013E   75..01       MOV     ?V0 + 2,#0x1
   \   000141   78..         MOV     R0,#?V0 + 2
   \   000143   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000146   78..         MOV     R0,#?V0 + 2
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014B   78..         MOV     R0,#?V0 + 0
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000150   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000153   12....       LCALL   ?DEALLOC_XSTACK8
   2873              osal_mem_free( writeRspCmd );
   \   000156                ; Setup parameters for call to function osal_mem_free
   \   000156   AA..         MOV     R2,?V0 + 0
   \   000158   AB..         MOV     R3,?V0 + 1
   \   00015A   12....       LCALL   ??osal_mem_free?relay
   2874            }
   2875            return TRUE; 
   \                     ??zclProcessInWriteCmd_10:
   \   00015D   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteCmd_3:
   \   00015F   740A         MOV     A,#0xa
   \   000161   02....       LJMP    ??Subroutine120_0 & 0xFFFF
   2876          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine139_0
   \   000006                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   7401         MOV     A,#0x1
   \   00000A   28           ADD     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00000B   FD           MOV     R5,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2406         ADD     A,#0x6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   EE           MOV     A,R6
   \   000015   2414         ADD     A,#0x14
   \   000017   F582         MOV     DPL,A
   \   000019   EF           MOV     A,R7
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??zcl_SendWriteRsp?relay
   \   000023   7405         MOV     A,#0x5
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR     A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7401         MOV     A,#0x1
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
   2877          
   2878          /*********************************************************************
   2879           * @fn      zclRevertWriteUndividedCmd
   2880           * @brief   Revert the "Profile" Write Undevided Command
   2881           * @param   pInMsg - incoming message to process
   2882           *          curWriteRec - old data
   2883           *          numAttr - number of attributes to be reverted
   2884           */
   2885          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg, zclWriteRec_t *curWriteRec, uint16 numAttr )
   2886          {
   2887            zclWriteRec_t *statusRec;
   2888            zclAttrRec_t attrRec;
   2889            uint8 dataLen;
   2890            uint8 i;
   2891          
   2892            statusRec = curWriteRec;
   2893            for (i = 0; i < numAttr; i++)
   2894            {
   2895              statusRec = &(curWriteRec[i]);
   2896              
   2897              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2898                break; // should never happen
   2899           
   2900              // Just copy the old data back - no need to validate the data
   2901              dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   2902              osal_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   2903            } // for loop
   2904          }
   2905          
   2906          /*********************************************************************
   2907           * @fn      zclProcessInWriteUndividedCmd
   2908           * @brief   Process the "Profile" Write Undivided Command
   2909           * @param   pInMsg - incoming message to process
   2910           * @return  TRUE if command processed. FALSE, otherwise.
   2911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine127_0
   \   000006                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine140_0
   \   000006                ; // Fall through to label ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2912          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   2913          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   2914            zclWriteCmd_t *writeCmd;
   2915            zclWriteRec_t *statusRec;
   2916            zclWriteRec_t *curWriteRec;
   2917            zclWriteRec_t *curStatusRec;
   2918            zclWriteRspCmd_t *writeRspCmd;
   2919            zclAttrRec_t attrRec;
   2920            uint8 *curDataPtr;
   2921            uint8 hdrLen;
   2922            uint8 dataLen;
   2923            uint8 curLen = 0;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2924            uint8 status;
   2925            uint8 i, j = 0;
   \   000011   7F00         MOV     R7,#0x0
   2926          
   2927            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000013   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000016   F5..         MOV     ?V0 + 6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 7,A
   2928            
   2929            // Allocate space for Write Response Command
   2930            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   85..82       MOV     DPL,?V0 + 6
   \   00001F   F583         MOV     DPH,A
   \   000021   12....       LCALL   ?Subroutine25 & 0xFFFF
   2931            
   2932            if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_29:
   \   000024   7001         JNZ     ??zclProcessInWriteUndividedCmd_0
   \   000026   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000027   7005         JNZ     ??zclProcessInWriteUndividedCmd_1
   2933              return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000029   7900         MOV     R1,#0x0
   \   00002B   02....       LJMP    ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   2934            
   2935            // If any attribute cannot be written, no attribute values are changed. Hence,
   2936            // make sure all the attributes are supported and writable
   2937            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00002E   7E00         MOV     R6,#0x0
   \   000030   8013         SJMP    ??zclProcessInWriteUndividedCmd_4
   2938            {
   2939              statusRec = &(writeCmd->attrList[i]);
   2940              
   2941              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2942              {
   2943                // Attribute is not supported - stop here
   2944                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   2945                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2946                break;
   2947              }
   2948              
   2949              if ( statusRec->dataType != attrRec.attr.dataType )
   2950              {
   2951                // Attribute data type is incorrect - stope here
   2952                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2953                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2954                break;
   2955              }
   2956              
   2957              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   2958              {
   2959                // Attribute is not writable - stop here
   2960                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   2961                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2962                break;
   2963              }  
   2964              dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000032                ; Setup parameters for call to function zclGetAttrDataLength
   \   000032   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000035   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000038   E9           MOV     A,R1
   \   000039   FA           MOV     R2,A
   2965              
   2966              // add padding if needed
   2967              if ( PADDING_NEEDED( dataLen ) )
   \   00003A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003C   5001         JNC     ??zclProcessInWriteUndividedCmd_6
   2968                dataLen++;
   \   00003E   0A           INC     R2
   2969              curLen += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   00003F   EA           MOV     A,R2
   \   000040   25..         ADD     A,?V0 + 4
   \   000042   F5..         MOV     ?V0 + 4,A
   \   000044   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   000045   85..82       MOV     DPL,?V0 + 6
   \   000048   85..83       MOV     DPH,?V0 + 7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   EE           MOV     A,R6
   \   00004E   C3           CLR     C
   \   00004F   9A           SUBB    A,R2
   \   000050   505D         JNC     ??zclProcessInWriteUndividedCmd_7
   \   000052   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000055   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   8582..       MOV     ?V0 + 10,DPL
   \   00005E   8583..       MOV     ?V0 + 11,DPH
   \   000061   78..         MOV     R0,#?V0 + 10
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
   \   00006D   7004         JNZ     ??zclProcessInWriteUndividedCmd_8
   \   00006F   7486         MOV     A,#-0x7a
   \   000071   8023         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000073   85..82       MOV     DPL,?V0 + 2
   \   000076   85..83       MOV     DPH,?V0 + 3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   7406         MOV     A,#0x6
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   69           XRL     A,R1
   \   000084   6004         JZ      ??zclProcessInWriteUndividedCmd_10
   \   000086   748D         MOV     A,#-0x73
   \   000088   800C         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   00008A   7407         MOV     A,#0x7
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   A2E1         MOV     C,0xE0 /* A   */.1
   \   000092   409E         JC      ??zclProcessInWriteUndividedCmd_5
   \   000094   7488         MOV     A,#-0x78
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   000096   85..82       MOV     DPL,?V0 + 0
   \   000099   85..83       MOV     DPH,?V0 + 1
   \   00009C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   85..82       MOV     DPL,?V0 + 0
   \   0000A6   85..83       MOV     DPH,?V0 + 1
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000AE   0F           INC     R7
   2970            } // for loop
   2971            
   2972            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0000AF   EF           MOV     A,R7
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   F0           MOVX    @DPTR,A
   2973            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000B7   6003         JZ      $+5
   \   0000B9   02....       LJMP    ??zclProcessInWriteUndividedCmd_11 & 0xFFFF
   2974            {
   2975              // calculate the length of the current data header
   2976              hdrLen = j * sizeof( zclWriteRec_t );
   \   0000BC   75F005       MOV     B,#0x5
   \   0000BF   A4           MUL     AB
   \   0000C0   FA           MOV     R2,A
   2977            
   2978              // Allocate space to keep a copy of the current data
   2979              curWriteRec = (zclWriteRec_t *) osal_mem_alloc( hdrLen + curLen ); 
   \   0000C1   8A82         MOV     DPL,R2
   \   0000C3   8582..       MOV     ?V0 + 2,DPL
   \   0000C6                ; Setup parameters for call to function osal_mem_alloc
   \   0000C6   E5..         MOV     A,?V0 + 4
   \   0000C8   25..         ADD     A,?V0 + 2
   \   0000CA   FA           MOV     R2,A
   \   0000CB   E4           CLR     A
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   ??osal_mem_alloc?relay
   \   0000D2   8A..         MOV     ?V0 + 12,R2
   \   0000D4   8B..         MOV     ?V0 + 13,R3
   2980              if ( curWriteRec == NULL )
   \   0000D6   EA           MOV     A,R2
   \   0000D7   7001         JNZ     ??zclProcessInWriteUndividedCmd_12
   \   0000D9   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   0000DA   700A         JNZ     ??zclProcessInWriteUndividedCmd_13
   2981              {
   2982                osal_mem_free(writeRspCmd );
   \   0000DC                ; Setup parameters for call to function osal_mem_free
   \   0000DC   AA..         MOV     R2,?V0 + 0
   \   0000DE   AB..         MOV     R3,?V0 + 1
   \   0000E0   12....       LCALL   ??osal_mem_free?relay
   2983                return FALSE; // EMBEDDED RETURN
   \   0000E3   02....       LJMP    ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   2984              }
   2985          
   2986              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0000E6   EA           MOV     A,R2
   \   0000E7   25..         ADD     A,?V0 + 2
   \   0000E9   F5..         MOV     ?V0 + 4,A
   \   0000EB   EB           MOV     A,R3
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F5..         MOV     ?V0 + 5,A
   2987              
   2988              // Write the new data over
   2989              for (i = 0; i < writeCmd->numAttr; i++)
   \   0000F0   7E00         MOV     R6,#0x0
   \   0000F2   8020         SJMP    ??zclProcessInWriteUndividedCmd_14
   2990              {
   2991                statusRec = &(writeCmd->attrList[i]);
   2992                curStatusRec = &(curWriteRec[i]);
   2993              
   2994                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2995                  break; // should never happen
   2996          
   2997                // Keep a copy of the current data before before writing the new data over
   2998                curStatusRec->attrID = statusRec->attrID;
   2999                zclReadAttrData( curDataPtr, &attrRec );
   3000                curStatusRec->attrData = curDataPtr;
   3001                
   3002                status = zclWriteAttrData( &attrRec, statusRec );
   3003                   
   3004                // If successful, a write attribute status record shall NOT be generated
   3005                if ( status != ZCL_STATUS_SUCCESS )
   3006                {
   3007                  writeRspCmd->attrList[j].status = status;
   3008                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3009                    
   3010                  // Since this write failed, we need to revert all the pervious writes
   3011                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   3012                  break;
   3013                }
   3014                
   3015                dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0000F4                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000F4   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000F7   85..82       MOV     DPL,?V0 + 2
   \   0000FA   85..83       MOV     DPH,?V0 + 3
   \   0000FD   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   3016                
   3017                // add padding if needed
   3018                if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_176:
   \   000100   A2E0         MOV     C,0xE0 /* A   */.0
   \   000102   5001         JNC     ??zclProcessInWriteUndividedCmd_16
   3019                  dataLen++;
   \   000104   0A           INC     R2
   3020                curDataPtr += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000105   8A..         MOV     ?V0 + 2,R2
   \   000107   E5..         MOV     A,?V0 + 4
   \   000109   25..         ADD     A,?V0 + 2
   \   00010B   F5..         MOV     ?V0 + 4,A
   \   00010D   E5..         MOV     A,?V0 + 5
   \   00010F   3400         ADDC    A,#0x0
   \   000111   F5..         MOV     ?V0 + 5,A
   \   000113   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000114   85..82       MOV     DPL,?V0 + 6
   \   000117   85..83       MOV     DPH,?V0 + 7
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   EE           MOV     A,R6
   \   00011D   C3           CLR     C
   \   00011E   9A           SUBB    A,R2
   \   00011F   4003         JC      $+5
   \   000121   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   000124   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000127   E5..         MOV     A,?V0 + 12
   \   000129   28           ADD     A,R0
   \   00012A   F8           MOV     R0,A
   \   00012B   E5..         MOV     A,?V0 + 13
   \   00012D   39           ADDC    A,R1
   \   00012E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000131   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   8582..       MOV     ?V0 + 10,DPL
   \   00013A   8583..       MOV     ?V0 + 11,DPH
   \   00013D   78..         MOV     R0,#?V0 + 10
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   \   000148   E9           MOV     A,R1
   \   000149   7003         JNZ     $+5
   \   00014B   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   00014E   85..82       MOV     DPL,?V0 + 2
   \   000151   85..83       MOV     DPH,?V0 + 3
   \   000154   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000157   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00015A   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00015D                ; Setup parameters for call to function zclReadAttrData
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   AC82         MOV     R4,DPL
   \   000164   AD83         MOV     R5,DPH
   \   000166   AA..         MOV     R2,?V0 + 4
   \   000168   AB..         MOV     R3,?V0 + 5
   \   00016A   12....       LCALL   ??zclReadAttrData?relay
   \   00016D   85..82       MOV     DPL,?XSP + 0
   \   000170   85..83       MOV     DPH,?XSP + 1
   \   000173   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000176   E5..         MOV     A,?V0 + 4
   \   000178   F0           MOVX    @DPTR,A
   \   000179   A3           INC     DPTR
   \   00017A   E5..         MOV     A,?V0 + 5
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D                ; Setup parameters for call to function zclWriteAttrData
   \   00017D   AC..         MOV     R4,?V0 + 2
   \   00017F   AD..         MOV     R5,?V0 + 3
   \   000181   7402         MOV     A,#0x2
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   AA82         MOV     R2,DPL
   \   000188   AB83         MOV     R3,DPH
   \   00018A   12....       LCALL   ??zclWriteAttrData?relay
   \   00018D   E9           MOV     A,R1
   \   00018E   FB           MOV     R3,A
   \   00018F   7003         JNZ     $+5
   \   000191   02....       LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   000194   EF           MOV     A,R7
   \   000195   75F003       MOV     B,#0x3
   \   000198   A4           MUL     AB
   \   000199   F8           MOV     R0,A
   \   00019A   A9F0         MOV     R1,B
   \   00019C   E5..         MOV     A,?V0 + 0
   \   00019E   28           ADD     A,R0
   \   00019F   F8           MOV     R0,A
   \   0001A0   E5..         MOV     A,?V0 + 1
   \   0001A2   39           ADDC    A,R1
   \   0001A3   F9           MOV     R1,A
   \   0001A4   EB           MOV     A,R3
   \   0001A5   8882         MOV     DPL,R0
   \   0001A7   8983         MOV     DPH,R1
   \   0001A9   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001AC   FA           MOV     R2,A
   \   0001AD   A3           INC     DPTR
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   FB           MOV     R3,A
   \   0001B0   8882         MOV     DPL,R0
   \   0001B2   8983         MOV     DPH,R1
   \   0001B4   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   0001B7   0F           INC     R7
   \   0001B8   8E82         MOV     DPL,R6
   \   0001BA   8582..       MOV     ?V0 + 8,DPL
   \   0001BD   7E00         MOV     R6,#0x0
   \   0001BF   8032         SJMP    ??zclProcessInWriteUndividedCmd_18
   3021              } // for loop
   \                     ??zclProcessInWriteUndividedCmd_19:
   \   0001C1   E5..         MOV     A,?V0 + 2
   \   0001C3   2403         ADD     A,#0x3
   \   0001C5   F5..         MOV     ?V0 + 2,A
   \   0001C7   E5..         MOV     A,?V0 + 3
   \   0001C9   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0001CC   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0001CF   740E         MOV     A,#0xe
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0001D7                ; Setup parameters for call to function osal_memcpy
   \   0001D7   85..82       MOV     DPL,?V0 + 2
   \   0001DA   85..83       MOV     DPH,?V0 + 3
   \   0001DD   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0001E0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E3   EA           MOV     A,R2
   \   0001E4   FC           MOV     R4,A
   \   0001E5   7D00         MOV     R5,#0x0
   \   0001E7   7413         MOV     A,#0x13
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0001EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F2   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   0001F3   8E..         MOV     ?V0 + 2,R6
   \   0001F5   C3           CLR     C
   \   0001F6   E5..         MOV     A,?V0 + 2
   \   0001F8   95..         SUBB    A,?V0 + 8
   \   0001FA   E4           CLR     A
   \   0001FB   9400         SUBB    A,#0x0
   \   0001FD   5058         JNC     ??zclProcessInWriteUndividedCmd_17
   \   0001FF   EE           MOV     A,R6
   \   000200   75F005       MOV     B,#0x5
   \   000203   A4           MUL     AB
   \   000204   F8           MOV     R0,A
   \   000205   A9F0         MOV     R1,B
   \   000207   E5..         MOV     A,?V0 + 12
   \   000209   28           ADD     A,R0
   \   00020A   F5..         MOV     ?V0 + 2,A
   \   00020C   E5..         MOV     A,?V0 + 13
   \   00020E   39           ADDC    A,R1
   \   00020F   F5..         MOV     ?V0 + 3,A
   \   000211   85..82       MOV     DPL,?V0 + 14
   \   000214   85..83       MOV     DPH,?V0 + 15
   \   000217   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00021A                ; Setup parameters for call to function zclFindAttrRec
   \   00021A   740A         MOV     A,#0xa
   \   00021C   12....       LCALL   ?XSTACK_DISP0_8
   \   00021F   8582..       MOV     ?V0 + 6,DPL
   \   000222   8583..       MOV     ?V0 + 7,DPH
   \   000225   78..         MOV     R0,#?V0 + 6
   \   000227   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022A   85..82       MOV     DPL,?V0 + 2
   \   00022D   85..83       MOV     DPH,?V0 + 3
   \   000230   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000233   85..82       MOV     DPL,?V0 + 4
   \   000236   85..83       MOV     DPH,?V0 + 5
   \   000239   A3           INC     DPTR
   \   00023A   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00023D   E5..         MOV     A,?V0 + 4
   \   00023F   2414         ADD     A,#0x14
   \   000241   F582         MOV     DPL,A
   \   000243   E5..         MOV     A,?V0 + 5
   \   000245   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000248   F9           MOV     R1,A
   \   000249   12....       LCALL   ??zclFindAttrRec?relay
   \   00024C   7402         MOV     A,#0x2
   \   00024E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000251   E9           MOV     A,R1
   \   000252   6003         JZ      $+5
   \   000254   02....       LJMP    ??zclProcessInWriteUndividedCmd_19 & 0xFFFF
   3022            
   3023              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000257   EF           MOV     A,R7
   \   000258   85..82       MOV     DPL,?V0 + 0
   \   00025B   85..83       MOV     DPH,?V0 + 1
   \   00025E   F0           MOVX    @DPTR,A
   3024              if ( writeRspCmd->numAttr  == 0 )
   \   00025F   7003         JNZ     ??CrossCallReturnLabel_13
   3025              {
   3026                // Since all records were written successful, include a single status record in the resonse command
   3027                // with the status field set to SUCCESS and the attribute ID field omitted.
   3028                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000261   12....       LCALL   ?Subroutine10 & 0xFFFF
   3029                writeRspCmd->numAttr = 1;
   3030              }
   3031          
   3032              osal_mem_free( curWriteRec );
   \                     ??CrossCallReturnLabel_13:
   \   000264                ; Setup parameters for call to function osal_mem_free
   \   000264   AA..         MOV     R2,?V0 + 12
   \   000266   AB..         MOV     R3,?V0 + 13
   \   000268   12....       LCALL   ??osal_mem_free?relay
   3033            }
   3034            
   3035            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3036                              pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   3037                              true, pInMsg->hdr.transSeqNum );  
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   00026B   85..82       MOV     DPL,?V0 + 14
   \   00026E   85..83       MOV     DPH,?V0 + 15
   \   000271   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000274                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000274   85..82       MOV     DPL,?V0 + 14
   \   000277   85..83       MOV     DPH,?V0 + 15
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F5..         MOV     ?V0 + 2,A
   \   000283   78..         MOV     R0,#?V0 + 2
   \   000285   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000288   75..01       MOV     ?V0 + 2,#0x1
   \   00028B   78..         MOV     R0,#?V0 + 2
   \   00028D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000290   78..         MOV     R0,#?V0 + 2
   \   000292   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000295   78..         MOV     R0,#?V0 + 0
   \   000297   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029A   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00029D   12....       LCALL   ?DEALLOC_XSTACK8
   3038            osal_mem_free( writeRspCmd );
   \   0002A0                ; Setup parameters for call to function osal_mem_free
   \   0002A0   AA..         MOV     R2,?V0 + 0
   \   0002A2   AB..         MOV     R3,?V0 + 1
   \   0002A4   12....       LCALL   ??osal_mem_free?relay
   3039           
   3040            return TRUE; 
   \   0002A7   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   0002A9   02....       LJMP    ?Subroutine118 & 0xFFFF
   3041          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   EE           MOV     A,R6
   \   000001   75F005       MOV     B,#0x5
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V0 + 7
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   8582..       MOV     ?V0 + 2,DPL
   \   000016   8583..       MOV     ?V0 + 3,DPH
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006                REQUIRE ??Subroutine142_0
   \   000006                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   85..82       MOV     DPL,?V0 + 2
   \   000005   85..83       MOV     DPH,?V0 + 3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   3042          #endif // ZCL_WRITE
   3043          
   3044          #ifdef ZCL_DISCOVER
   3045          /*********************************************************************
   3046           * @fn      zclProcessInDiscCmd
   3047           * @brief   Process the "Profile" Discover Command
   3048           * @param   pInMsg - incoming message to process
   3049           * @return  TRUE if command processed. FALSE, otherwise.
   3050           */
   3051          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   3052          {
   3053            zclDiscoverCmd_t *discoverCmd;
   3054            zclDiscoverRspCmd_t *discoverRspCmd;
   3055            uint8 discComplete = TRUE;
   3056            zclAttrRec_t attrRec;
   3057            uint16 attrID;
   3058            uint8 i;
   3059            
   3060            discoverCmd = (zclDiscoverCmd_t *)pInMsg->attrCmd;
   3061            
   3062            // Find out the number of attributes supported within the specified range
   3063            for ( i = 0, attrID = discoverCmd->startAttr; i < discoverCmd->maxAttrIDs; i++, attrID++ )
   3064            {
   3065              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3066                break;
   3067            }
   3068            
   3069            // Allocate space for the response command
   3070            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof (zclDiscoverRspCmd_t) 
   3071                                                                   + sizeof ( zclDiscoverInfo_t ) * i );
   3072            if ( discoverRspCmd == NULL )
   3073              return FALSE; // EMEDDED RETURN
   3074            
   3075            discoverRspCmd->numAttr = i;
   3076            if ( discoverRspCmd->numAttr != 0 )
   3077            {
   3078              for ( i = 0, attrID = discoverCmd->startAttr; i < discoverRspCmd->numAttr; i++, attrID++ )
   3079              {
   3080                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3081                  break; // Attribute not supported
   3082                
   3083                discoverRspCmd->attrList[i].attrID = attrRec.attr.attrId;
   3084                discoverRspCmd->attrList[i].dataType = attrRec.attr.dataType;
   3085              }
   3086              
   3087              // Are there more attributes to be discovered?
   3088              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3089                discComplete = FALSE;
   3090            }
   3091            
   3092            discoverRspCmd->discComplete = discComplete;
   3093            zcl_SendDiscoverRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr, 
   3094                                    pInMsg->msg->clusterId, discoverRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   3095                                    true, pInMsg->hdr.transSeqNum );
   3096            osal_mem_free( discoverRspCmd );
   3097            
   3098            return TRUE;
   3099          }
   3100          #endif // ZCL_DISCOVER
   3101          
   3102          /*********************************************************************
   3103           * @fn      zclSendMsg
   3104           * @brief   Send an incoming message to the Application
   3105           * @param   pInMsg - incoming message to process
   3106           * @return  TRUE
   3107           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3108          static uint8 zclSendMsg( zclIncoming_t *pInMsg )
   \                     zclSendMsg:
   3109          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3110            zclIncomingMsg_t *pCmd;
   3111              
   3112            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000009   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   7005         JNZ     ??zclSendMsg_0
   3113              return ( TRUE );
   \                     ??zclSendMsg_1:
   \   000011   7901         MOV     R1,#0x1
   \   000013   02....       LJMP    ?Subroutine112 & 0xFFFF
   3114            
   3115            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \                     ??zclSendMsg_0:
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A18         MOV     R2,#0x18
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_msg_allocate?relay
   3116            if ( pCmd != NULL )
   \   00001D   EA           MOV     A,R2
   \   00001E   7001         JNZ     ??zclSendMsg_2
   \   000020   EB           MOV     A,R3
   \                     ??zclSendMsg_2:
   \   000021   60EE         JZ      ??zclSendMsg_1
   3117            {
   3118              // fill in the message
   3119              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000023   7434         MOV     A,#0x34
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
   3120              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_203:
   \   000028   A3           INC     DPTR
   \   000029   EA           MOV     A,R2
   \   00002A   2402         ADD     A,#0x2
   \   00002C   FC           MOV     R4,A
   \   00002D   EB           MOV     A,R3
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FD           MOV     R5,A
   \   000031   7406         MOV     A,#0x6
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3121              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E8           MOV     A,R0
   \   00004E   12....       LCALL   ?Subroutine12 & 0xFFFF
   3122              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_135:
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F583         MOV     DPH,A
   \   000056   8882         MOV     DPL,R0
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   EA           MOV     A,R2
   \   00005F   240A         ADD     A,#0xa
   \   000061   FC           MOV     R4,A
   \   000062   EB           MOV     A,R3
   \   000063   3400         ADDC    A,#0x0
   \   000065   FD           MOV     R5,A
   \   000066   740C         MOV     A,#0xc
   \   000068   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3123              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00006B   EE           MOV     A,R6
   \   00006C   240C         ADD     A,#0xc
   \   00006E   F8           MOV     R0,A
   \   00006F   EF           MOV     A,R7
   \   000070   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000073   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000076   EA           MOV     A,R2
   \   000077   2416         ADD     A,#0x16
   \   000079   F582         MOV     DPL,A
   \   00007B   EB           MOV     A,R3
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F583         MOV     DPH,A
   \   000080   EC           MOV     A,R4
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   ED           MOV     A,R5
   \   000084   F0           MOVX    @DPTR,A
   3124              
   3125              // Application will free the attrCmd buffer
   3126              pInMsg->attrCmd = NULL;
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   F0           MOVX    @DPTR,A
   3127              
   3128              /* send message through task message */
   3129              osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
   \   00008D                ; Setup parameters for call to function osal_msg_send
   \   00008D   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   12....       LCALL   ??osal_msg_send?relay
   \   000095   02....       LJMP    ??zclSendMsg_1 & 0xFFFF
   3130            }
   3131            return ( TRUE );
   3132          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_RegisteredMsgTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerPlugin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerAttrList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerClusterOptionList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerValidateAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerForMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_DeviceOperational?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessMessageMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclBuildHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindAttrRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSetSecurityOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSerializeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetDataTypeLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclWriteAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteUndividedCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSendMsg
   3133          
   3134          /*********************************************************************
   3135          *********************************************************************/

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     zclBuildHdr                       1      0     54
     zclFindAttrRec                    1      0     62
     zclFindClusterOption              1      0     21
     zclGetAttrDataLength              2      0     42
       -> zclGetDataTypeLength         4      0      0
     zclGetClusterOption               0      0     77
       -> zclFindClusterOption         0      0     20
     zclGetDataTypeLength              2      0      0
     zclParseHdr                       1      0     79
       -> osal_memset                  0      0     24
     zclParseInDefaultRspCmd           1      0     10
       -> osal_mem_alloc               0      0     20
     zclParseInReadCmd                 1      0     12
       -> osal_mem_alloc               0      0     24
     zclParseInReadRspCmd              1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteCmd                1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteRspCmd             1      0     16
       -> osal_mem_alloc               0      0     32
     zclProcessInReadCmd               1      0     35
       -> osal_mem_alloc               0      0     60
       -> zclFindAttrRec               0      0     64
       -> zcl_SendReadRsp              0      0     70
       -> osal_mem_free                0      0     60
     zclProcessInWriteCmd              1      0     39
       -> osal_mem_alloc               0      0     68
       -> zclFindAttrRec               0      0     72
       -> zclWriteAttrData             0      0     68
       -> zcl_SendWriteRsp             0      0     78
       -> osal_mem_free                0      0     68
     zclProcessInWriteUndividedCmd     1      0     47
       -> osal_mem_alloc               0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> osal_mem_alloc               0      0     84
       -> osal_mem_free                0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> zclReadAttrData              0      0     84
       -> zclWriteAttrData             0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> osal_memcpy                  0      0     90
       -> zclFindAttrRec               0      0     88
       -> osal_mem_free                0      0     84
       -> zcl_SendWriteRsp             0      0     94
       -> osal_mem_free                0      0     84
     zclProcessMessageMSG              2      0     86
       -> HalLcdWriteChar              0      0    134
       -> HalUARTWrite                 0      0    134
       -> zclParseHdr                  0      0    134
       -> afFindEndPointDesc           0      0    134
       -> zcl_DeviceOperational        0      0    138
       -> zclGetClusterOption          0      0    134
       -> zclSetSecurityOption         0      0    134
       -> zcl_SendDefaultRspCmd        0      0    148
       -> zclSetSecurityOption         0      0    134
       -> osal_mem_free                0      0    134
       -> zcl_SendDefaultRspCmd        0      0    148
     zclReadAttrData                   0      0     56
       -> zclGetAttrDataLength         0      0     22
       -> osal_memcpy                  0      0     28
     zclSendMsg                        1      0     10
       -> osal_msg_allocate            0      0     20
       -> osal_msg_send                0      0     20
     zclSerializeData                  1      0     44
       -> osal_buffer_uint32           0      0     32
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
     zclSetSecurityOption              0      0     77
       -> zclFindClusterOption         0      0     20
     zclWriteAttrData                  0      0     60
       -> zclGetAttrDataLength         0      0     30
       -> osal_memcpy                  0      0     36
     zcl_DeviceOperational             1      0     90
       -> zclFindAttrRec               0      0     42
       -> zclReadAttrData              0      0     38
     zcl_Init                          2      0      0
     zcl_SendCommand                   1      0     90
       -> osal_memcpy                  0      0     90
       -> afFindEndPointDesc           0      0     84
       -> zclGetClusterOption          0      0     84
       -> osal_memset                  0      0     84
       -> zcl_DeviceOperational        0      0     88
       -> osal_mem_alloc               0      0     84
       -> zclBuildHdr                  0      0     90
       -> osal_memcpy                  0      0     90
       -> AF_DataRequest               0      0    102
       -> osal_mem_free                0      0     84
     zcl_SendDefaultRspCmd             1      0    101
       -> zcl_SendCommand              0      0     54
     zcl_SendRead                      1      0     38
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_SendReadRsp                   1      0     74
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRequest              1      0     45
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRsp                  1      0     80
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_event_loop                    0      0     12
       -> osal_msg_receive             0      0     24
       -> zclProcessMessageMSG         0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> osal_msg_send                0      0     24
     zcl_registerAttrList              1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerClusterOptionList     1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerForMsg                2      0      0
     zcl_registerPlugin                0      0     16
       -> osal_mem_alloc               0      0     28
     zcl_registerValidateAttrData      2      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     zcl_TaskID                                    1
     zcl_RegisteredMsgTaskID                       1
     zcl_ValidateAttrDataCB                        2
     zcl_SeqNum                                    1
     plugins                                       2
     attrList                                      2
     clusterOptionList                             2
     zcl_TransID                                   1
     zclCmdTable                                  56
     zcl_Init                                     31
     ?Subroutine102                                7
     zcl_event_loop                              102
     ?Subroutine103                                5
     zcl_registerPlugin                          127
     ?Subroutine104                                5
     ?Subroutine34                                 5
     ??Subroutine119_0                             5
     ?Subroutine11                                 8
     ?Subroutine14                                 4
     ?Subroutine96                                 7
     ??Subroutine129_0                             6
     ?Subroutine86                                 5
     ?Subroutine40                                 6
     ?Subroutine17                                 2
     ??Subroutine146_0                             6
     zcl_registerAttrList                         59
     ?Subroutine62                                25
     ?Subroutine0                                 28
     ?Subroutine78                                 6
     zcl_registerClusterOptionList                59
     zcl_registerValidateAttrData                 14
     zcl_registerForMsg                           20
     zcl_DeviceOperational                       118
     ?Subroutine112                                5
     zcl_SendCommand                             514
     ?Subroutine118                                4
     ??Subroutine120_0                             8
     ?Subroutine41                                10
     ?Subroutine106                                6
     ?Subroutine79                                 8
     ?Subroutine87                                 6
     zcl_SendRead                                218
     ?Subroutine114                                2
     ??Subroutine121_0                             5
     ?Subroutine28                                 5
     ??Subroutine122_0                            11
     ?Subroutine109                                5
     ?Subroutine92                                 6
     ?Subroutine63                                11
     ?Subroutine56                                 6
     ?Subroutine42                                10
     ?Subroutine113                                4
     zcl_SendReadRsp                             251
     ?Subroutine85                                 7
     ?Subroutine73                                 4
     ?Subroutine94                                 7
     ?Subroutine64                                21
     ?Subroutine57                                10
     ?Subroutine44                                16
     ?Subroutine83                                 5
     ?Subroutine97                                11
     ?Subroutine43                                10
     ?Subroutine38                                13
     ?Subroutine37                                 9
     ?Subroutine21                                28
     ?Subroutine108                                5
     ?Subroutine80                                20
     ?Subroutine2                                 21
     ?Subroutine1                                 25
     ?Subroutine81                                 3
     ?Subroutine100                               12
     ??Subroutine145_0                             5
     zcl_SendWriteRequest                        222
     zcl_SendWriteRsp                            250
     zcl_SendDefaultRspCmd                       171
     ??Subroutine147_0                             4
     zclProcessMessageMSG                       1185
     ?Subroutine115                                5
     ?Subroutine74                                15
     ?Subroutine58                                 7
     ?Subroutine52                                11
     ?Subroutine51                                11
     ?Subroutine48                                12
     ?Subroutine45                                 5
     ?Subroutine32                                 7
     ?Subroutine88                                 8
     ?Subroutine30                                19
     ?Subroutine26                                13
     ?Subroutine18                                 9
     ?Subroutine99                                 8
     ?Subroutine75                                 8
     ?Subroutine35                                 3
     ??Subroutine124_0                             5
     ??Subroutine128_0                             4
     ?Subroutine70                                 4
     ?Subroutine93                                 3
     ?Subroutine105                                6
     ?Subroutine68                                 5
     ??Subroutine137_0                             1
     ??Subroutine138_0                             5
     ?Subroutine89                                 4
     ?Subroutine98                                 9
     ??Subroutine141_0                             6
     ?Subroutine27                                 3
     ??Subroutine143_0                             2
     ??Subroutine144_0                             2
     ?Subroutine55                                 4
     ?Subroutine84                                 6
     zclParseHdr                                 219
     ?Subroutine111                                5
     ?Subroutine9                                  4
     ?Subroutine76                                 5
     ?Subroutine101                                8
     ??Subroutine132_0                             4
     ?Subroutine77                                11
     ?Subroutine5                                  6
     ??Subroutine133_0                             7
     ??Subroutine135_0                             7
     ?Subroutine12                                 7
     zclBuildHdr                                 102
     ?Subroutine53                                11
     ?Subroutine16                                 7
     ??Subroutine123_0                             7
     ?Subroutine8                                  6
     ?Subroutine110                                5
     zclFindAttrRec                              186
     zclFindClusterOption                        123
     ?Subroutine116                                5
     zclGetClusterOption                          32
     zclSetSecurityOption                         46
     zclSerializeData                            289
     ?Subroutine15                                 5
     ?Subroutine49                                 4
     ??Subroutine136_0                             4
     zclGetDataTypeLength                        131
     zclGetAttrDataLength                         29
     zclReadAttrData                              75
     ?Subroutine29                                 2
     ??Subroutine125_0                             2
     ??Subroutine126_0                             5
     zclWriteAttrData                            122
     ?Subroutine107                                6
     ??Subroutine139_0                             4
     ?Subroutine50                                 6
     ?Subroutine36                                 6
     zclParseInReadCmd                            99
     ?Subroutine33                                25
     ?Subroutine61                                10
     zclParseInReadRspCmd                        134
     ?Subroutine117                                9
     ?Subroutine60                                22
     ??Subroutine130_0                             4
     ?Subroutine22                                 7
     ??Subroutine131_0                            22
     ?Subroutine6                                  8
     ?Subroutine72                                14
     ?Subroutine67                                16
     ?Subroutine66                                26
     ?Subroutine39                                25
     ?Subroutine24                                32
     ?Subroutine4                                 23
     ?Subroutine3                                 35
     ?Subroutine95                                15
     ?Subroutine91                                10
     ?Subroutine90                                 9
     zclParseInWriteCmd                          110
     zclParseInWriteRspCmd                       123
     ?Subroutine69                                 4
     zclParseInDefaultRspCmd                      44
     ?Subroutine7                                  4
     zclProcessInReadCmd                         320
     ?Subroutine82                                 6
     ??Subroutine134_0                             8
     ?Subroutine54                                 1
     ??Subroutine140_0                            34
     ?Subroutine65                                 6
     ?Subroutine13                                 7
     zclProcessInWriteCmd                        356
     ?Subroutine47                                 6
     ??Subroutine142_0                             6
     ?Subroutine25                                19
     ?Subroutine23                                38
     ?Subroutine10                                13
     ?Subroutine59                                 6
     ??Subroutine127_0                             3
     ?Subroutine20                                 6
     zclProcessInWriteUndividedCmd               684
     ?Subroutine71                                26
     ?Subroutine31                                 6
     ?Subroutine19                                10
     ?Subroutine46                                 5
     zclSendMsg                                  152
     ?<Initializer for zcl_RegisteredMsgTaskID>    1
     ??zcl_Init?relay                              6
     ??zcl_event_loop?relay                        6
     ??zcl_registerPlugin?relay                    6
     ??zcl_registerAttrList?relay                  6
     ??zcl_registerClusterOptionList?relay         6
     ??zcl_registerValidateAttrData?relay          6
     ??zcl_registerForMsg?relay                    6
     ??zcl_DeviceOperational?relay                 6
     ??zcl_SendCommand?relay                       6
     ??zcl_SendRead?relay                          6
     ??zcl_SendReadRsp?relay                       6
     ??zcl_SendWriteRequest?relay                  6
     ??zcl_SendWriteRsp?relay                      6
     ??zcl_SendDefaultRspCmd?relay                 6
     ??zclProcessMessageMSG?relay                  6
     ??zclParseHdr?relay                           6
     ??zclBuildHdr?relay                           6
     ??zclFindAttrRec?relay                        6
     ??zclFindClusterOption?relay                  6
     ??zclGetClusterOption?relay                   6
     ??zclSetSecurityOption?relay                  6
     ??zclSerializeData?relay                      6
     ??zclGetDataTypeLength?relay                  6
     ??zclGetAttrDataLength?relay                  6
     ??zclReadAttrData?relay                       6
     ??zclWriteAttrData?relay                      6
     ??zclParseInReadCmd?relay                     6
     ??zclParseInReadRspCmd?relay                  6
     ??zclParseInWriteCmd?relay                    6
     ??zclParseInWriteRspCmd?relay                 6
     ??zclParseInDefaultRspCmd?relay               6
     ??zclProcessInReadCmd?relay                   6
     ??zclProcessInWriteCmd?relay                  6
     ??zclProcessInWriteUndividedCmd?relay         6
     ??zclSendMsg?relay                            6

 
 8 080 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    56 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    11 bytes in segment XDATA_Z
 
 8 347 bytes of CODE  memory
    12 bytes of XDATA memory

Errors: none
Warnings: none
