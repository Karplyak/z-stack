///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               02/Aug/2013  13:48:00 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\Source\zcl_zigbee receiver.c               /
//    Command line       =  -f "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\Source\zcl_zigbee receiver.c" -D CC2530    /
//                          -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D          /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D Coor_receiver -D           /
//                          xHAL_KEYPAD -D xPA2591 -lC                        /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_EB_PA\List\" -lA      /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_EB_PA\List\"          /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_EB_PA\Obj\" -e        /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\" -I "D:\CC2530_ZStack-2.3.0-1.4. /
//                          0\Sensor Network Example\Projects\zstack\Sensor   /
//                          Network Application\ZIGBEE Coordinator &          /
//                          Router\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor    /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\S /
//                          ensor Network Example\Projects\zstack\Sensor      /
//                          Network Application\ZIGBEE Coordinator &          /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor /
//                           Network Example\Projects\zstack\Sensor Network   /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor     /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor /
//                           Network Example\Projects\zstack\Sensor Network   /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor /
//                           Network Example\Projects\zstack\Sensor Network   /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor    /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor /
//                           Network Example\Projects\zstack\Sensor Network   /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\S /
//                          ensor Network Example\Projects\zstack\Sensor      /
//                          Network Application\ZIGBEE Coordinator &          /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_EB_PA\List\zcl_zigbee /
//                           receiver.s51                                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `zcl_zigbee receiver`

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??zclUartReceiver?relay
        EXTERN ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??zclUARTMsg_CallBack?relay
        FUNCTION ??zclUARTMsg_CallBack?relay,0203H
        PUBLIC ??zclUartReceiver?relay
        FUNCTION ??zclUartReceiver?relay,0203H
        FUNCTION ??zclZigbeeReceiver_BasicResetCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_IdentifyCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_IdentifyQueryRspCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_OnOffCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r,0203H
        PUBLIC ??zclZigbeeRecv_Init?relay
        FUNCTION ??zclZigbeeRecv_Init?relay,0203H
        PUBLIC ??zclZigbeeRecv_event_loop?relay
        FUNCTION ??zclZigbeeRecv_event_loop?relay,0203H
        PUBLIC TransmitApp_Msg
        PUBLIC UartTransmit_Msg
        PUBLIC len
        PUBLIC uart_recv
        PUBLIC zclUARTMsg_CallBack
        FUNCTION zclUARTMsg_CallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclUartReceiver
        FUNCTION zclUartReceiver,021203H
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION zclZigbeeReceiver_BasicResetCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclZigbeeReceiver_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclZigbeeReceiver_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclZigbeeReceiver_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclZigbeeReceiver_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclZigbeeReceiver_TaskID
        PUBLIC zclZigbeeRecv_DstAddr
        PUBLIC zclZigbeeRecv_Group
        PUBLIC zclZigbeeRecv_Init
        FUNCTION zclZigbeeRecv_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclZigbeeRecv_event_loop
        FUNCTION zclZigbeeRecv_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 64, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
zclZD_Init          SYMBOL "zclZD_Init"
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
afRegister          SYMBOL "afRegister"
show                SYMBOL "show"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
sprintf             SYMBOL "sprintf"
osal_mem_free       SYMBOL "osal_mem_free"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
HalLcdWriteChar     SYMBOL "HalLcdWriteChar"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalLedBlink         SYMBOL "HalLedBlink"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTRead         SYMBOL "HalUARTRead"
osal_set_event      SYMBOL "osal_set_event"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??HalLcdWriteChar?relay SYMBOL "?relay", HalLcdWriteChar
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??show?relay        SYMBOL "?relay", show
??sprintf?relay     SYMBOL "?relay", sprintf
??zclGeneral_RegisterCmdCallbacks?relay SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
??zclZD_Init?relay  SYMBOL "?relay", zclZD_Init
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
??zcl_registerAttrList?relay SYMBOL "?relay", zcl_registerAttrList
??zcl_registerForMsg?relay SYMBOL "?relay", zcl_registerForMsg
zclUARTMsg_CallBack SYMBOL "zclUARTMsg_CallBack"
??zclUARTMsg_CallBack?relay SYMBOL "?relay", zclUARTMsg_CallBack
zclUartReceiver     SYMBOL "zclUartReceiver"
??zclUartReceiver?relay SYMBOL "?relay", zclUartReceiver
zclZigbeeRecv_Init  SYMBOL "zclZigbeeRecv_Init"
??zclZigbeeRecv_Init?relay SYMBOL "?relay", zclZigbeeRecv_Init
zclZigbeeRecv_event_loop SYMBOL "zclZigbeeRecv_event_loop"
??zclZigbeeRecv_event_loop?relay SYMBOL "?relay", zclZigbeeRecv_event_loop

        EXTERN zclZD_Init
        FUNCTION zclZD_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN show
        FUNCTION show,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteChar
        FUNCTION HalLcdWriteChar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLcdWriteChar?relay
        FUNCTION ??HalLcdWriteChar?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??show?relay
        FUNCTION ??show?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??zclGeneral_RegisterCmdCallbacks?relay
        FUNCTION ??zclGeneral_RegisterCmdCallbacks?relay,00H
        EXTERN ??zclZD_Init?relay
        FUNCTION ??zclZD_Init?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN ??zcl_registerAttrList?relay
        FUNCTION ??zcl_registerAttrList?relay,00H
        EXTERN ??zcl_registerForMsg?relay
        FUNCTION ??zcl_registerForMsg?relay,00H
        EXTERN ch
        EXTERN zclZigbeeRecv_Attrs
        EXTERN zclZigbeeRecv_IdentifyTime
        EXTERN zclZigbeeRecv_OnOff
        EXTERN zclZigbeeRecv_SimpleDesc

// D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Coordinator & Router\Source\zcl_zigbee receiver.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_zigbee receiver.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Zigbee Cluster Library - ZIGBEE Receiver device application.
//    7 
//    8   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   Should you have any questions regarding your right to use this Software,
//   11   contact Texas Instruments Incorporated at www.TI.com. 
//   12 **************************************************************************************************/
//   13 
//   14 /*************************************************************************************************
//   15   This device will be like a Light device.  This application is not intended to be a Light device, 
//   16   but will use the device description to implement this sample code.
//   17 *************************************************************************************************/
//   18 
//   19 /*********************************************************************
//   20  * INCLUDES
//   21  */
//   22 #include <stdio.h>
//   23 #include <string.h>
//   24 #include "ZComDef.h"
//   25 #include "OSAL.h"
//   26 #include "AF.h"
//   27 #include "ZDApp.h"
//   28 
//   29 /* ZCL */
//   30 #include "zcl.h"
//   31 #include "zcl_general.h"
//   32 #include "zcl_ha.h"
//   33 #include "zcl_zigbee receiver.h"
//   34 
//   35 /* HAL */
//   36 #include "onboard.h"
//   37 #include "hal_lcd.h"
//   38 #include "hal_led.h"
//   39 #include "hal_timer.h"
//   40 #include "hal_uart.h"
//   41 #include "hal_key.h"
//   42 #include "hal_keypad.h"
//   43 
//   44 /* MAC_high-level */
//   45 #include "mac_high_level.h"
//   46 
//   47 /* MT */
//   48 #include "MT_UART.h"
//   49 #include "MT.h"
//   50 
//   51 /*********************************************************************
//   52  * MACROS
//   53  */
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57  #define TRANSMITAPP_MAX_DATA_LEN    102
//   58 
//   59 /*********************************************************************
//   60  * TYPEDEFS
//   61  */
//   62 /*********************************************************************
//   63  * GLOBAL VARIABLES
//   64  */
//   65 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   66 byte zclZigbeeReceiver_TaskID; // The zigbee task_ID
zclZigbeeReceiver_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   67 
//   68 // The UART transmit variable and array
//   69 // the transmit data length

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   70 uint8 len; 
len:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   71 // Transmit message array

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   72 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   73 // The coordinator send to device message array

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   74 byte UartTransmit_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
UartTransmit_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   75 // Receive the UART command

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   76 uint8 uart_recv[TRANSMITAPP_MAX_DATA_LEN]; 
uart_recv:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   77 
//   78 /*********************************************************************
//   79  * GLOBAL FUNCTIONS
//   80  */
//   81 
//   82 /*********************************************************************
//   83  * LOCAL VARIABLES
//   84  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   85 afAddrType_t zclZigbeeRecv_DstAddr;  // AF address type
zclZigbeeRecv_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   86 aps_Group_t zclZigbeeRecv_Group;
zclZigbeeRecv_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   87 
//   88 #define ZCLZIGBEERECV_BINDINGLIST       2
//   89 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   90 static cId_t bindingInClusters[ZCLZIGBEERECV_BINDINGLIST] =
bindingInClusters:
        DS 4
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//   91 {
//   92   ZCL_CLUSTER_ID_GEN_ON_OFF,
//   93   ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//   94 };
//   95 
//   96 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   97 static endPointDesc_t zigbeeReceiver_TestEp =
zigbeeReceiver_TestEp:
        DS 6
        REQUIRE `?<Initializer for zigbeeReceiver_TestEp>`
        REQUIRE __INIT_XDATA_I
//   98 {
//   99   20,                                 // Test endpoint
//  100   &zclZigbeeReceiver_TaskID,
//  101   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  102   (afNetworkLatencyReq_t)0            // No Network Latency req
//  103 };
//  104 
//  105 /*********************************************************************
//  106  * LOCAL FUNCTIONS
//  107  */
//  108 static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys );
//  109 static void zclZigbeeReceiver_BasicResetCB( void );
//  110 static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd );
//  111 static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  112 static void zclZigbeeReceiver_OnOffCB( uint8 cmd );
//  113 static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void );
//  114 
//  115 void zclUARTMsg_CallBack(uint8 port, uint8 event); // The UART Message callback
//  116 void zclUartReceiver( void ); // The coordinator receive command function
//  117 
//  118 // Functions to process ZCL Foundation incoming Command/Response messages 
//  119 static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  120 #ifdef ZCL_READ
//  121   static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  122 #endif
//  123 #ifdef ZCL_WRITE
//  124   static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  125 #endif
//  126   static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  127 #ifdef ZCL_DISCOVER
//  128   static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
//  129 #endif
//  130   
//  131 /*********************************************************************
//  132  * ZCL General Profile Callback table
//  133  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  134 static zclGeneral_AppCallbacks_t zclZigbeeReceiver_CmdCallbacks =
zclZigbeeReceiver_CmdCallbacks:
        DS 30
        REQUIRE `?<Initializer for zclZigbeeReceiver_CmdCallbac`
        REQUIRE __INIT_XDATA_I
//  135 {
//  136   zclZigbeeReceiver_BasicResetCB,              // Basic Cluster Reset command
//  137   zclZigbeeReceiver_IdentifyCB,                // Identify command  
//  138   zclZigbeeReceiver_IdentifyQueryRspCB,        // Identify Query Response command
//  139   zclZigbeeReceiver_OnOffCB,                   // On/Off cluster command
//  140   NULL,                                        // Level Control Move to Level command
//  141   NULL,                                        // Level Control Move command
//  142   NULL,                                        // Level Control Step command
//  143   NULL,                                        // Group Response commands
//  144   NULL,                                        // Scene Store Request command
//  145   NULL,                                        // Scene Recall Request command
//  146   NULL,                                        // Scene Response command
//  147   NULL,                                        // Alarm (Response) command
//  148   NULL,                                        // RSSI Location commands
//  149   NULL,                                        // RSSI Location Response commands
//  150 };
//  151 
//  152 /*********************************************************************
//  153  * @fn          zclZigbeeRecv_Init
//  154  * @brief       Initialization function for the zclGeneral layer.
//  155  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 void zclZigbeeRecv_Init( byte task_id )
zclZigbeeRecv_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zclZigbeeRecv_Init
//  157 {
        FUNCALL zclZigbeeRecv_Init, zclZD_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  158   zclZigbeeReceiver_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    @DPTR,A
//  159   
//  160   // Setup for the flash command's destination address ( Group )
//  161   zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;  // transmit mode - Group address
        MOV     A,#0x1
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
        MOVX    @DPTR,A
//  162   zclZigbeeRecv_DstAddr.endPoint = ZIGBEERECV_ENDPOINT;        // end-point number:20
        MOV     A,#0xd
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
        MOVX    @DPTR,A
//  163   zclZigbeeRecv_DstAddr.addr.shortAddr = RECV_GROUP;           // Group short address
        MOV     DPTR,#zclZigbeeRecv_DstAddr
        MOV     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x20
        MOVX    @DPTR,A
//  164   
//  165   // This App is part of the Zigbee Device Profile
//  166   zclZD_Init( &zclZigbeeRecv_SimpleDesc ); 
        ; Setup parameters for call to function zclZD_Init
        MOV     R2,#(zclZigbeeRecv_SimpleDesc & 0xff)
        MOV     R3,#((zclZigbeeRecv_SimpleDesc >> 8) & 0xff)
        LCALL   ??zclZD_Init?relay
//  167   
//  168   // Register the ZCL General Cluster Library callback functions
//  169   zclGeneral_RegisterCmdCallbacks( ZIGBEERECV_ENDPOINT, &zclZigbeeReceiver_CmdCallbacks ); 
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#(zclZigbeeReceiver_CmdCallbacks & 0xff)
        MOV     R3,#((zclZigbeeReceiver_CmdCallbacks >> 8) & 0xff)
        MOV     R1,#0xd
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//  170   
//  171   // Register the application's attribute list
//  172   zcl_registerAttrList( ZIGBEERECV_ENDPOINT, ZIGBEERECV_MAX_ATTRIBUTES, zclZigbeeRecv_Attrs ); 
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#(zclZigbeeRecv_Attrs & 0xff)
        MOV     R5,#((zclZigbeeRecv_Attrs >> 8) & 0xff)
        MOV     R2,#0xc
        MOV     R1,#0xd
        LCALL   ??zcl_registerAttrList?relay
//  173   
//  174   // Register the Application to receive the unprocessed Foundation command/response messages
//  175   zcl_registerForMsg( zclZigbeeReceiver_TaskID ); 
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zcl_registerForMsg?relay
//  176   
//  177   // Register for all key events - This app will handle all key events
//  178   RegisterForKeys( zclZigbeeReceiver_TaskID ); 
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  179   
//  180   // By default, all devices start out in Group 1 ( register grouop )
//  181   zclZigbeeRecv_Group.ID = RECV_GROUP;
        MOV     DPTR,#zclZigbeeRecv_Group
        MOV     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x20
        MOVX    @DPTR,A
//  182   osal_memcpy( zclZigbeeRecv_Group.name, "RECV_GROUP", 8  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(`?<Constant "RECV_GROUP">` & 0xff)
        MOV     ?V0 + 1,#((`?<Constant "RECV_GROUP">` >> 8) & 0xff)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#((zclZigbeeRecv_Group + 2) & 0xff)
        MOV     R3,#(((zclZigbeeRecv_Group + 2) >> 8) & 0xff)
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  183   aps_AddGroup( ZIGBEERECV_ENDPOINT, &zclZigbeeRecv_Group ); 
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#(zclZigbeeRecv_Group & 0xff)
        MOV     R3,#((zclZigbeeRecv_Group >> 8) & 0xff)
        MOV     R1,#0xd
        LCALL   ??aps_AddGroup?relay
//  184   
//  185   // Register for a test endpoint
//  186   afRegister( &zigbeeReceiver_TestEp ); 
        ; Setup parameters for call to function afRegister
        MOV     R2,#(zigbeeReceiver_TestEp & 0xff)
        MOV     R3,#((zigbeeReceiver_TestEp >> 8) & 0xff)
        LCALL   ??afRegister?relay
//  187 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  188 
//  189 /*********************************************************************
//  190  * @fn          zclZigbeeRecv_event_loop
//  191  * @brief       Event Loop Processor for zclGeneral.
//  192  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  193 uint16 zclZigbeeRecv_event_loop( uint8 task_id, uint16 events )
zclZigbeeRecv_event_loop:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zclZigbeeRecv_event_loop
//  194 { 
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, zclZigbeeReceiver_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, zclUartReceiver
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 41
        MOV     A,#-0x29
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  195     afIncomingMSGPacket_t *MSGpkt;
//  196     (void)task_id;  // Intentionally unreferenced parameter
//  197   
//  198     if ( events & SYS_EVENT_MSG ) // SYSTEM Message event
        MOV     A,#-0x80
        ANL     A,?V0 + 3
        MOV     R1,A
        CLR     A
        JNZ     ??zclZigbeeRecv_event_loop_0
        MOV     A,R1
??zclZigbeeRecv_event_loop_0:
        JNZ     ??zclZigbeeRecv_event_loop_1
//  199     {
//  200       while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigbeeReceiver_TaskID )) )
//  201       { 
//  202         char temp[32];
//  203         sprintf(temp, "%d", MSGpkt->hdr.event);
//  204         show(temp);
//  205         
//  206         switch ( MSGpkt->hdr.event )
//  207         {
//  208         case ZCL_INCOMING_MSG: //0x34 : Incoming ZCL foundation message
//  209             show("ZCL_INCOMING_MSG");
//  210             // Incoming ZCL Foundation command/response messages
//  211             zclZigbeeReceiver_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt ); 
//  212             break; 
//  213         case KEY_CHANGE: //0xC0 : Key Events
//  214             show("KEY_CHANGE");
//  215             zclZigbeeReceiver_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  216             break;
//  217             
//  218         case AF_DATA_CONFIRM_CMD:
//  219             show("AF_DATA_CONFIRM_CMD");
//  220             break;      
//  221         case AF_INCOMING_MSG_CMD:
//  222             show("AF_INCOMING_MSG_CMD");
//  223             break;                
//  224         case AF_INCOMING_KVP_CMD:       
//  225             show("AF_INCOMING_KVP_CMD");
//  226             break;
//  227         case AF_INCOMING_GRP_KVP_CMD:       
//  228             show("AF_INCOMING_GRP_KVP_CMD");
//  229             break;   
//  230 
//  231         case ZDO_NEW_DSTADDR:       
//  232             show("ZDO_NEW_DSTADDR");
//  233             break;   
//  234         case ZDO_STATE_CHANGE:       
//  235             show("ZDO_STATE_CHANGE");
//  236             break;         
//  237         case ZDO_MATCH_DESC_RSP_SENT:       
//  238             show("ZDO_MATCH_DESC_RSP_SENT");
//  239             break;    
//  240         case ZDO_CB_MSG:       
//  241             show("ZDO_CB_MSG");
//  242             break;    
//  243         case ZDO_NETWORK_REPORT:       
//  244             show("ZDO_NETWORK_REPORT");
//  245             break;    
//  246         case ZDO_NETWORK_UPDATE:       
//  247             show("ZDO_NETWORK_UPDATE");
//  248             break;     
//  249 
//  250         case NM_CHANNEL_INTERFERE:       
//  251             show("NM_CHANNEL_INTERFERE");
//  252             break;     
//  253         case NM_ED_SCAN_CONFIRM:       
//  254             show("NM_ED_SCAN_CONFIRM");
//  255             break;     
//  256         case SAPS_CHANNEL_CHANGE:       
//  257             show("SAPS_CHANNEL_CHANGE");
//  258             break;         
//  259         case ZCL_KEY_ESTABLISH_IND:       
//  260             show("ZCL_KEY_ESTABLISH_IND");
//  261             break;   
//  262            
//  263           default:
//  264             break;
//  265         }
//  266         osal_msg_deallocate( (uint8 *)MSGpkt ); // Release the memory
//  267       }
//  268       return (events ^ SYS_EVENT_MSG); // return unprocessed events
//  269     }
//  270   
//  271     // The user define application events
//  272     switch ( events )
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zclZigbeeRecv_event_loop>_0`:
        DATA
        DW        1
        DB        2
        DW        ??zclZigbeeRecv_event_loop_2
        DW        ??zclZigbeeRecv_event_loop_3
        DW        ??zclZigbeeRecv_event_loop_4
        DW        ??zclZigbeeRecv_event_loop_5
        CODE
//  273     {
//  274       case SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT: // ZIGBEE Receiver identify timeout event
//  275         show("SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT");
??zclZigbeeRecv_event_loop_3:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "SAMPLELIGHT_IDENTIFY_...">` & 0xff)
        MOV     R3,#((`?<Constant "SAMPLELIGHT_IDENTIFY_...">` >> 8) & 0xff)
        LCALL   ??show?relay
//  276         if ( zclZigbeeRecv_IdentifyTime > 0 )
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOVX    A,@DPTR
        JNZ     ??zclZigbeeRecv_event_loop_6
        INC     DPTR
        MOVX    A,@DPTR
??zclZigbeeRecv_event_loop_6:
        JZ      ??zclZigbeeRecv_event_loop_7
//  277              zclZigbeeRecv_IdentifyTime--;
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  278              zclZigbeeReceiver_ProcessIdentifyTimeChange();
??zclZigbeeRecv_event_loop_7:
        ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
        LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
        LJMP    ??zclZigbeeRecv_event_loop_2 & 0xFFFF
??zclZigbeeRecv_event_loop_8:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZCL_KEY_ESTABLISH_IND">` & 0xff)
        MOV     R3,#((`?<Constant "ZCL_KEY_ESTABLISH_IND">` >> 8) & 0xff)
??zclZigbeeRecv_event_loop_9:
        LCALL   ??show?relay
??zclZigbeeRecv_event_loop_10:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??zclZigbeeRecv_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        JNZ     ??zclZigbeeRecv_event_loop_11
        MOV     A,R3
??zclZigbeeRecv_event_loop_11:
        JNZ     $+5
        LJMP    ??zclZigbeeRecv_event_loop_12 & 0xFFFF
        ; Setup parameters for call to function sprintf
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 57)
        MOV     R4,#(`?<Constant "%d">` & 0xff)
        MOV     R5,#((`?<Constant "%d">` >> 8) & 0xff)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 55)
        ; Setup parameters for call to function show
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for zclZigbeeRecv_event_loop>_1`:
        DATA
        DB        0
        DB        16
        DB        26
        DW        ??zclZigbeeRecv_event_loop_13
        DB        27
        DW        ??zclZigbeeRecv_event_loop_14
        DB        28
        DW        ??zclZigbeeRecv_event_loop_15
        DB        49
        DW        ??zclZigbeeRecv_event_loop_16
        DB        50
        DW        ??zclZigbeeRecv_event_loop_17
        DB        51
        DW        ??zclZigbeeRecv_event_loop_18
        DB        52
        DW        ??zclZigbeeRecv_event_loop_19
        DB        53
        DW        ??zclZigbeeRecv_event_loop_8
        DB        192
        DW        ??zclZigbeeRecv_event_loop_20
        DB        208
        DW        ??zclZigbeeRecv_event_loop_21
        DB        209
        DW        ??zclZigbeeRecv_event_loop_22
        DB        210
        DW        ??zclZigbeeRecv_event_loop_23
        DB        211
        DW        ??zclZigbeeRecv_event_loop_24
        DB        212
        DW        ??zclZigbeeRecv_event_loop_25
        DB        213
        DW        ??zclZigbeeRecv_event_loop_26
        DB        253
        DW        ??zclZigbeeRecv_event_loop_27
        DW        ??zclZigbeeRecv_event_loop_10
        CODE
??zclZigbeeRecv_event_loop_19:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZCL_INCOMING_MSG">` & 0xff)
        MOV     R3,#((`?<Constant "ZCL_INCOMING_MSG">` >> 8) & 0xff)
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for zclZigbeeRecv_event_loop>_2`:
        DATA
        DB        0
        DB        2
        DB        1
        DW        ??zclZigbeeRecv_event_loop_28
        DB        4
        DW        ??zclZigbeeRecv_event_loop_29
        DW        ??zclZigbeeRecv_event_loop_30
        CODE
??zclZigbeeRecv_event_loop_28:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JNC     ??zclZigbeeRecv_event_loop_30
        INC     R3
        SJMP    ??CrossCallReturnLabel_0
??zclZigbeeRecv_event_loop_29:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zclZigbeeRecv_event_loop_31
??zclZigbeeRecv_event_loop_32:
        INC     R3
??zclZigbeeRecv_event_loop_31:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JC      ??zclZigbeeRecv_event_loop_32
??zclZigbeeRecv_event_loop_30:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        JNZ     ??zclZigbeeRecv_event_loop_33
        MOV     A,R3
??zclZigbeeRecv_event_loop_33:
        JNZ     $+5
        LJMP    ??zclZigbeeRecv_event_loop_10 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
        LJMP    ??zclZigbeeRecv_event_loop_10 & 0xFFFF
??zclZigbeeRecv_event_loop_20:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "KEY_CHANGE">` & 0xff)
        MOV     R3,#((`?<Constant "KEY_CHANGE">` >> 8) & 0xff)
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclZigbeeRecv_event_loop_10 & 0xFFFF
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 56)
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     ?V0 + 4,#(bindingInClusters & 0xff)
        MOV     ?V0 + 5,#((bindingInClusters >> 8) & 0xff)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     ?V0 + 4,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R1,#0xd
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 55)
        LJMP    ??zclZigbeeRecv_event_loop_10 & 0xFFFF
??zclZigbeeRecv_event_loop_27:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "AF_DATA_CONFIRM_CMD">` & 0xff)
        MOV     R3,#((`?<Constant "AF_DATA_CONFIRM_CMD">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_13:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "AF_INCOMING_MSG_CMD">` & 0xff)
        MOV     R3,#((`?<Constant "AF_INCOMING_MSG_CMD">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_14:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "AF_INCOMING_KVP_CMD">` & 0xff)
        MOV     R3,#((`?<Constant "AF_INCOMING_KVP_CMD">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_15:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "AF_INCOMING_GRP_KVP_CMD">` & 0xff)
        MOV     R3,#((`?<Constant "AF_INCOMING_GRP_KVP_CMD">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_21:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZDO_NEW_DSTADDR">` & 0xff)
        MOV     R3,#((`?<Constant "ZDO_NEW_DSTADDR">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_22:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZDO_STATE_CHANGE">` & 0xff)
        MOV     R3,#((`?<Constant "ZDO_STATE_CHANGE">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_23:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` & 0xff)
        MOV     R3,#((`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_24:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZDO_CB_MSG">` & 0xff)
        MOV     R3,#((`?<Constant "ZDO_CB_MSG">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_25:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZDO_NETWORK_REPORT">` & 0xff)
        MOV     R3,#((`?<Constant "ZDO_NETWORK_REPORT">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_26:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZDO_NETWORK_UPDATE">` & 0xff)
        MOV     R3,#((`?<Constant "ZDO_NETWORK_UPDATE">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_16:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "NM_CHANNEL_INTERFERE">` & 0xff)
        MOV     R3,#((`?<Constant "NM_CHANNEL_INTERFERE">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_17:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "NM_ED_SCAN_CONFIRM">` & 0xff)
        MOV     R3,#((`?<Constant "NM_ED_SCAN_CONFIRM">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_18:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "SAPS_CHANNEL_CHANGE">` & 0xff)
        MOV     R3,#((`?<Constant "SAPS_CHANNEL_CHANGE">` >> 8) & 0xff)
        LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
??zclZigbeeRecv_event_loop_12:
        MOV     R2,?V0 + 2
        MOV     A,#-0x80
        XRL     A,?V0 + 3
        MOV     R3,A
        SJMP    ??zclZigbeeRecv_event_loop_34
//  279         break;
//  280       
//  281       case UART_MSG_EVT: // The UART Message event
//  282         show("UART_MSG_EVT");
??zclZigbeeRecv_event_loop_4:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "UART_MSG_EVT">` & 0xff)
        MOV     R3,#((`?<Constant "UART_MSG_EVT">` >> 8) & 0xff)
        LCALL   ??show?relay
//  283         zclUartReceiver();
        ; Setup parameters for call to function zclUartReceiver
        LCALL   ??zclUartReceiver?relay
        SJMP    ??zclZigbeeRecv_event_loop_2
//  284         break;
//  285       
//  286       case KEYPAD_MSG_EVT: // The KEYPAD keyin event
//  287         show("KEYPAD_MSG_EVT");
??zclZigbeeRecv_event_loop_5:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "KEYPAD_MSG_EVT">` & 0xff)
        MOV     R3,#((`?<Constant "KEYPAD_MSG_EVT">` >> 8) & 0xff)
        LCALL   ??show?relay
//  288         #if defined( LCD_SUPPORTED )
//  289           HalLcdWriteChar(HAL_LCD_LINE_3, 0, ch);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     DPTR,#ch
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R2,#0x0
        MOV     R1,#0x3
        LCALL   ??HalLcdWriteChar?relay
//  290         #endif
//  291         break;
//  292     }
//  293     
//  294     return 0; // Discard unknown events
??zclZigbeeRecv_event_loop_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclZigbeeRecv_event_loop_34:
        MOV     A,#0x29
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  295 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_2
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ??show?relay
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 55)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
//  296 
//  297 /*********************************************************************
//  298  * @fn      zclZigbeeReceiver_HandleKeys
//  299  * @brief   Handles all key events for this device.
//  300  * @param   shift - true if in shift/alt.
//  301  * @param   keys - bit field for key events.
//  302  *          Valid entries: HAL_KEY_SW_1(MCU-K1)                        
//  303  */
//  304 static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys )
//  305 {
//  306   zAddrType_t dstAddr;
//  307   (void)shift; // Intentionally unreferenced parameter
//  308   
//  309 #if defined(Coor_receiver) || defined (Router_receiver)
//  310 
//  311   if ( keys & HAL_KEY_SW1 ) // Init EndDevice bind reequest, and use cluster list important to binding.
//  312   {
//  313     dstAddr.addrMode = afAddr16Bit;
//  314     dstAddr.addr.shortAddr = 0x0000;   // Coordinator makes the match
//  315     ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), ZIGBEERECV_ENDPOINT, // ZIGBEERECV_ENDPOINT = 13 is coordinator
//  316                           ZCL_HA_PROFILE_ID, ZCLZIGBEERECV_BINDINGLIST, bindingInClusters, 0,
//  317                           NULL, // No Outgoing clusters to bind
//  318                           TRUE );
//  319   }
//  320   
//  321   if ( keys & HAL_KEY_SW2 ) 
//  322   {
//  323     
//  324   }
//  325   
//  326 #endif
//  327 }
//  328 
//  329 /*********************************************************************
//  330  * @fn      zclZigbeeReceiver_ProcessIdentifyTimeChange
//  331  * @brief   Called to process any change to the IdentifyTime attribute.
//  332  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  333 static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void )
zclZigbeeReceiver_ProcessIdentifyTimeChange:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function zclZigbeeReceiver_ProcessIdentifyTimeChange
//  334 {
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  335   if ( zclZigbeeRecv_IdentifyTime > 0 )
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOVX    A,@DPTR
        JNZ     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0
        INC     DPTR
        MOVX    A,@DPTR
??zclZigbeeReceiver_ProcessIdentifyTimeChange_0:
        JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1
//  336   {
//  337     osal_start_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  338     HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
        SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
//  339   }
//  340   else
//  341     {
//  342       if ( zclZigbeeRecv_OnOff )
??zclZigbeeReceiver_ProcessIdentifyTimeChange_1:
        MOV     DPTR,#zclZigbeeRecv_OnOff
        MOVX    A,@DPTR
        JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3
//  343       {
//  344         HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
//  345       }
//  346       else
//  347         {
//  348           HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
??zclZigbeeReceiver_ProcessIdentifyTimeChange_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  349           osal_stop_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        CFI EndBlock cfiBlock16
//  350         }
//  351     }
//  352 }
??zclZigbeeReceiver_ProcessIdentifyTimeChange_2:
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock17
//  353 
//  354 /*********************************************************************
//  355  * @fn      zclZigbeeReceiver_BasicResetCB
//  356  * @brief   Callback from the ZCL General Cluster Library
//  357  *          to set all the Basic Cluster attributes to default values.
//  358  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  359 static void zclZigbeeReceiver_BasicResetCB( void )
zclZigbeeReceiver_BasicResetCB:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function zclZigbeeReceiver_BasicResetCB
//  360 {
        ; Saved register size: 0
        ; Auto size: 0
//  361   // Reset all attributes to default values
//  362 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock18
//  363 
//  364 /*********************************************************************
//  365  * @fn      zclZigbeeReceiver_IdentifyCB
//  366  * @brief   Callback from the ZCL General Cluster Library when
//  367  *          it received an Identity Command for this application.
//  368  * @param   srcAddr - source address and endpoint of the response message
//  369  *          identifyTime - the number of seconds to identify yourself
//  370  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  371 static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd )
zclZigbeeReceiver_IdentifyCB:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function zclZigbeeReceiver_IdentifyCB
//  372 {
        FUNCALL zclZigbeeReceiver_IdentifyCB, zclZigbeeReceiver_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  373   zclZigbeeRecv_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  374   zclZigbeeReceiver_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
        LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
//  375 }
        SJMP    ?Subroutine4
        CFI EndBlock cfiBlock19
//  376 
//  377 /*********************************************************************
//  378  * @fn      zclZigbeeReceiver_IdentifyQueryRspCB
//  379  * @brief   Callback from the ZCL General Cluster Library when
//  380  *          it received an Identity Query Response Command for this application.
//  381  * @param   srcAddr - requestor's address
//  382  *          timeout - number of seconds to identify yourself (valid for query response)
//  383  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  384 static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
zclZigbeeReceiver_IdentifyQueryRspCB:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function zclZigbeeReceiver_IdentifyQueryRspCB
//  385 {
        ; Saved register size: 0
        ; Auto size: 0
//  386   (void)pRsp; // Query Response (with timeout value)
//  387 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock20
//  388 
//  389 /*********************************************************************
//  390  * @fn      zclZigbeeReceiver_OnOffCB
//  391  * @brief   Callback from the ZCL General Cluster Library when
//  392  *          it received an On/Off Command for this application.
//  393  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  394  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  395 static void zclZigbeeReceiver_OnOffCB( uint8 cmd )
zclZigbeeReceiver_OnOffCB:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function zclZigbeeReceiver_OnOffCB
//  396 { 
        FUNCALL zclZigbeeReceiver_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  397   if ( cmd == COMMAND_ON ) // Turn on the light
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??zclZigbeeReceiver_OnOffCB_0
//  398     zclZigbeeRecv_OnOff = LIGHT_ON;
??zclZigbeeReceiver_OnOffCB_1:
        MOV     A,#0x1
??zclZigbeeReceiver_OnOffCB_2:
        MOV     DPTR,#zclZigbeeRecv_OnOff
        MOVX    @DPTR,A
//  399 
//  400   else if ( cmd == COMMAND_OFF ) // Turn off the light
//  401     zclZigbeeRecv_OnOff = LIGHT_OFF;
//  402 
//  403   else // Toggle the light
//  404   {
//  405     if ( zclZigbeeRecv_OnOff == LIGHT_OFF )
//  406           zclZigbeeRecv_OnOff = LIGHT_ON;
//  407     else
//  408           zclZigbeeRecv_OnOff = LIGHT_OFF;
//  409   }
//  410 
//  411   // In this sample app, we use LED4 to simulate the Light  
//  412   if ( zclZigbeeRecv_OnOff == LIGHT_ON )
//  413   {
//  414     HalLedSet( HAL_LED_2, HAL_LED_MODE_ON ); // setting the LED_1 on
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  415   }
//  416   else
//  417     HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF ); // setting the LED_1 off
//  418 }
        SJMP    ?Subroutine4
??zclZigbeeReceiver_OnOffCB_0:
        MOV     A,R1
        JNZ     ??zclZigbeeReceiver_OnOffCB_3
??zclZigbeeReceiver_OnOffCB_4:
        CLR     A
        SJMP    ??zclZigbeeReceiver_OnOffCB_2
??zclZigbeeReceiver_OnOffCB_3:
        MOV     DPTR,#zclZigbeeRecv_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclZigbeeReceiver_OnOffCB_4
        SJMP    ??zclZigbeeReceiver_OnOffCB_1
        CFI EndBlock cfiBlock21
//  419 /****************************************************************************** 
//  420  * 
//  421  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  422  *
//  423  *****************************************************************************/
//  424 
//  425 /*********************************************************************
//  426  * @fn      zclZigbeeReceiver_ProcessIncomingMsg
//  427  * @brief   Process ZCL Foundation incoming message
//  428  * @param   pInMsg - pointer to the received message
//  429  */
//  430 static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
//  431 {
//  432   switch ( pInMsg->zclHdr.commandID )
//  433   {
//  434 #ifdef ZCL_READ
//  435     case ZCL_CMD_READ_RSP:
//  436       zclZigbeeReceiver_ProcessInReadRspCmd( pInMsg );
//  437       break;
//  438 #endif
//  439       
//  440 #ifdef ZCL_WRITE    
//  441     case ZCL_CMD_WRITE_RSP:
//  442       zclZigbeeReceiver_ProcessInWriteRspCmd( pInMsg );
//  443       break;
//  444 #endif
//  445       
//  446 #ifdef ZCL_REPORT
//  447     case ZCL_CMD_CONFIG_REPORT: // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  448       //zclSampleLight_ProcessInConfigReportCmd( pInMsg );
//  449       break;
//  450     
//  451     case ZCL_CMD_CONFIG_REPORT_RSP:
//  452       //zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
//  453       break;
//  454     
//  455     case ZCL_CMD_READ_REPORT_CFG:
//  456       //zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
//  457       break;
//  458     
//  459     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  460       //zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
//  461       break;
//  462     
//  463     case ZCL_CMD_REPORT:
//  464       //zclSampleLight_ProcessInReportCmd( pInMsg );
//  465       break;
//  466 #endif   
//  467       
//  468     case ZCL_CMD_DEFAULT_RSP:
//  469       zclZigbeeReceiver_ProcessInDefaultRspCmd( pInMsg );
//  470       break;
//  471       
//  472 #ifdef ZCL_DISCOVER     
//  473     case ZCL_CMD_DISCOVER_RSP:
//  474       zclZigbeeReceiver_ProcessInDiscRspCmd( pInMsg );
//  475       break;
//  476 #endif
//  477       
//  478     default:
//  479       break;
//  480   }
//  481   if ( pInMsg->attrCmd )
//  482     osal_mem_free( pInMsg->attrCmd );
//  483 }
//  484 
//  485 #ifdef ZCL_READ
//  486 /*********************************************************************
//  487  * @fn      zclZigbeeReceiver_ProcessInReadRspCmd
//  488  * @brief   Process the "Profile" Read Response Command
//  489  * @param   pInMsg - incoming message to process
//  490  */
//  491 static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  492 {
//  493   zclReadRspCmd_t *readRspCmd;
//  494   uint8 i;
//  495 
//  496   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  497   for (i = 0; i < readRspCmd->numAttr; i++)
//  498   {
//  499     // Notify the originator of the results of the original read attributes attempt and, 
//  500     // for each successfull request, the value of the requested attribute
//  501   }
//  502   return TRUE; 
//  503 }
//  504 #endif // ZCL_READ
//  505 
//  506 #ifdef ZCL_WRITE
//  507 /*********************************************************************
//  508  * @fn      zclZigbeeReceiver_ProcessInWriteRspCmd
//  509  * @brief   Process the "Profile" Write Response Command
//  510  * @param   pInMsg - incoming message to process
//  511  */
//  512 static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  513 {
//  514   zclWriteRspCmd_t *writeRspCmd;
//  515   uint8 i;
//  516 
//  517   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  518   for (i = 0; i < writeRspCmd->numAttr; i++)
//  519   {
//  520     // Notify the device of the results of the its original write attributes command.
//  521   }
//  522   return TRUE; 
//  523 }
//  524 #endif // ZCL_WRITE
//  525 
//  526 /*********************************************************************
//  527  * @fn      zclZigbeeReceiver_ProcessInDefaultRspCmd
//  528  * @brief   Process the "Profile" Default Response Command
//  529  * @param   pInMsg - incoming message to process
//  530  */
//  531 static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  532 {
//  533   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd; 
//  534   // Device is notified of the Default Response command.
//  535   (void)pInMsg;
//  536   return TRUE; 
//  537 }
//  538 
//  539 #ifdef ZCL_DISCOVER
//  540 /*********************************************************************
//  541  * @fn      zclZigbeeReceiver_ProcessInDiscRspCmd
//  542  * @brief   Process the "Profile" Discover Response Command
//  543  * @param   pInMsg - incoming message to process
//  544  */
//  545 static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
//  546 {
//  547   zclDiscoverRspCmd_t *discoverRspCmd;
//  548   uint8 i;
//  549   
//  550   discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
//  551   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  552   {
//  553     // Device is notified of the result of its attribute discovery command.
//  554   }
//  555   return TRUE;
//  556 }
//  557 #endif // ZCL_DISCOVER
//  558 
//  559 /****************************************************************************
//  560 ****************************************************************************/
//  561 
//  562 /*********************************************************************
//  563  * @fn      zclUARTMsg_CallBack
//  564  * @brief   Send data OTA.
//  565  * @param   port - UART port.
//  566  * @param   event - the UART port event flag.
//  567  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 void zclUARTMsg_CallBack(uint8 port, uint8 event)
zclUARTMsg_CallBack:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function zclUARTMsg_CallBack
//  569 {
        FUNCALL zclUARTMsg_CallBack, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUARTMsg_CallBack, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUARTMsg_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUARTMsg_CallBack, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  570   (void)port;
//  571   
//  572   if(Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT) > 0 )
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        JNZ     ??zclUARTMsg_CallBack_0
        MOV     A,R3
??zclUARTMsg_CallBack_0:
        JZ      ??zclUARTMsg_CallBack_1
//  573   {
//  574       len = Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT );
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     DPTR,#len
        MOVX    @DPTR,A
//  575       HalUARTRead( MT_UART_DEFAULT_PORT, TransmitApp_Msg, len );
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#(TransmitApp_Msg & 0xff)
        MOV     R3,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  576       osal_set_event( zclZigbeeReceiver_TaskID, UART_MSG_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        CFI EndBlock cfiBlock22
//  577   }
//  578 }
??zclUARTMsg_CallBack_1:
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock23
//  579 
//  580 /*********************************************************************
//  581  * @fn      zclUartReceiver
//  582  * @brief   The coordinator receive command.
//  583  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  584 void zclUartReceiver( void )
zclUartReceiver:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function zclUartReceiver
//  585 { 
        FUNCALL zclUartReceiver, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUartReceiver, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  586   for(uint8 length = 0; length < len; length++)
        MOV     R6,#0x0
        SJMP    ??zclUartReceiver_0
//  587   {
//  588     uart_recv[length] = TransmitApp_Msg[length];
??zclUartReceiver_1:
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     A,R0
        ADD     A,#(TransmitApp_Msg & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R0
        ADD     A,#(uart_recv & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((uart_recv >> 8) & 0xff)
        MOV     DPH,A
        MOV     A,R3
        MOVX    @DPTR,A
//  589   #if defined( LCD_SUPPORTED )
//  590     HalLcdWriteChar(HAL_LCD_LINE_4, length, uart_recv[length]);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x4
        LCALL   ??HalLcdWriteChar?relay
//  591   #endif
//  592   }
        INC     R6
??zclUartReceiver_0:
        MOV     DPTR,#len
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        CLR     C
        SUBB    A,R2
        JC      ??zclUartReceiver_1
//  593   
//  594   // Set the End Device state
//  595   zclZigbeeRecv_DstAddr.endPoint = 12;
        MOV     A,#0xc
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
        MOVX    @DPTR,A
//  596   zclZigbeeRecv_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#zclZigbeeRecv_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  597   zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0xf
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
        MOVX    @DPTR,A
//  598     
//  599   // Transmit the UART command to End Device
//  600   uint8 send = zcl_SendCommand( ZIGBEERECV_ENDPOINT, 
//  601                                 &zclZigbeeRecv_DstAddr,
//  602                                 ZCL_CLUSTER_ID_GEN_ON_OFF,
//  603                                 COMMAND_TOGGLE,
//  604                                 TRUE,
//  605                                 ZCL_FRAME_CLIENT_SERVER_DIR,
//  606                                 false,
//  607                                 0,
//  608                                 0,
//  609                                 10,
//  610                                 uart_recv );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(uart_recv & 0xff)
        MOV     ?V0 + 1,#((uart_recv >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeRecv_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeRecv_DstAddr >> 8) & 0xff)
        MOV     R1,#0xd
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  611 }
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock24

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for bindingInClusters>`:
        DW 6, 8

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zigbeeReceiver_TestEp>`:
        DB 20
        DW zclZigbeeReceiver_TaskID, 0H
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zclZigbeeReceiver_CmdCallbac`:
        DW ??zclZigbeeReceiver_BasicResetCB?relay
        DW ??zclZigbeeReceiver_IdentifyCB?relay
        DW ??zclZigbeeReceiver_IdentifyQueryRspCB?relay
        DW ??zclZigbeeReceiver_OnOffCB?relay, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
        DW 0H, 0H
        DB 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeRecv_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeRecv_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeRecv_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeRecv_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_ProcessIdentifyTimeChange?r:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_BasicResetCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_IdentifyCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_IdentifyQueryRspCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclUARTMsg_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclUARTMsg_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclUartReceiver?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclUartReceiver

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "RECV_GROUP">`:
        DB "RECV_GROUP"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "%d">`:
        DB "%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZCL_INCOMING_MSG">`:
        DB "ZCL_INCOMING_MSG"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "KEY_CHANGE">`:
        DB "KEY_CHANGE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AF_DATA_CONFIRM_CMD">`:
        DB "AF_DATA_CONFIRM_CMD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AF_INCOMING_MSG_CMD">`:
        DB "AF_INCOMING_MSG_CMD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AF_INCOMING_KVP_CMD">`:
        DB "AF_INCOMING_KVP_CMD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AF_INCOMING_GRP_KVP_CMD">`:
        DB "AF_INCOMING_GRP_KVP_CMD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZDO_NEW_DSTADDR">`:
        DB "ZDO_NEW_DSTADDR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZDO_STATE_CHANGE">`:
        DB "ZDO_STATE_CHANGE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZDO_MATCH_DESC_RSP_SENT">`:
        DB "ZDO_MATCH_DESC_RSP_SENT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZDO_CB_MSG">`:
        DB "ZDO_CB_MSG"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZDO_NETWORK_REPORT">`:
        DB "ZDO_NETWORK_REPORT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZDO_NETWORK_UPDATE">`:
        DB "ZDO_NETWORK_UPDATE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "NM_CHANNEL_INTERFERE">`:
        DB "NM_CHANNEL_INTERFERE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "NM_ED_SCAN_CONFIRM">`:
        DB "NM_ED_SCAN_CONFIRM"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SAPS_CHANNEL_CHANGE">`:
        DB "SAPS_CHANNEL_CHANGE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZCL_KEY_ESTABLISH_IND">`:
        DB "ZCL_KEY_ESTABLISH_IND"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SAMPLELIGHT_IDENTIFY_...">`:
        DB "SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "UART_MSG_EVT">`:
        DB "UART_MSG_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "KEYPAD_MSG_EVT">`:
        DB "KEYPAD_MSG_EVT"

        END
// 
// 1 096 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//    40 bytes in segment XDATA_I
//    40 bytes in segment XDATA_ID
//   375 bytes in segment XDATA_ROM_C
//   338 bytes in segment XDATA_Z
// 
// 1 190 bytes of CODE  memory
//   375 bytes of CONST memory
//   378 bytes of XDATA memory
//
//Errors: none
//Warnings: none
