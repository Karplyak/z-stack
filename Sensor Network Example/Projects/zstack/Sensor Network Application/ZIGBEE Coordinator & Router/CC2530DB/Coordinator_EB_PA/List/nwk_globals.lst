###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                22/Aug/2013  14:42:08 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Components\stack\nwk\nwk_globals.c         #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Components\stack\nwk\nwk_globals.c" -D     #
#                          CC2530 -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D    #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -D Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\List\" -lA       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\List\nwk_globals #
#                          .lst                                               #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_EB_PA\Obj\nwk_globals. #
#                          r51                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Components\stack\nwk\nwk_globals.c
      1          #include "ZComdef.h"
      2          #include "OSAL.h"
      3          #include "AddrMgr.h"
      4          #include "AssocList.h"
      5          #include "BindingTable.h"
      6          
      7          /* NWK */
      8          #include "nwk_util.h"
      9          #include "nwk_globals.h"
     10          #include "APS.h"
     11          
     12          /* Security */
     13          #include "ssp.h"
     14          
     15          /* ZDO */
     16          #include "rtg.h"
     17          #include "ZDConfig.h"
     18          #include "ZGlobals.h"
     19          
     20          /* ZMain */
     21          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     22          
     23          /* HAL */
     24          #include "hal_lcd.h"
     25          #include "hal_timer.h"
     26          
     27          // Maximums for the data buffer queue
     28          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     29          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     30          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     31          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     32          
     33          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     34          // A known shortcoming is that when a message is enqueued as "hold" for a
     35          // sleeping device, the timer tick may have counted down to 1, so that msg
     36          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     37          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     38          // So the hold time will vary within this interval:
     39          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     40          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     41          #define NWK_INDIRECT_CNT_RTG_TMR    1
     42          // To hold msg for sleeping end devices for 30 secs:
     43          // #define CNT_RTG_TIMER            1
     44          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     45          // To hold msg for sleeping end devices for 30 mins:
     46          // #define CNT_RTG_TIMER            60
     47          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     48          // To hold msg for sleeping end devices for 30 days:
     49          // #define CNT_RTG_TIMER            60
     50          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     51          // Maximum msgs to hold per associated device.
     52          #define NWK_INDIRECT_MSG_MAX_PER    3
     53          // Maximum total msgs to hold for all associated devices.
     54          #define NWK_INDIRECT_MSG_MAX_ALL    \
     55                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
     56          
     57          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
     58          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
     59          
     60          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
     61          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
     62          
     63          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
     64          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
     65          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
     66          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
     67          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
     68          

   \                                 In  segment CODE_C, align 1
     69          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
     70          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
     71          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
     72          
     73          // change this if using a different stack profile...
     74          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     76          
     77          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )
     78            uint8 CskipRtrs[1] = {0};
     79            uint8 CskipChldrn[1] = {0};
     80          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )

   \                                 In  segment XDATA_I, align 1, keep-with-next
     81            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
   \                     CskipRtrs:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipRtrs>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
   \                     CskipChldrn:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipChldrn>`
   \   000006                REQUIRE __INIT_XDATA_I
     83          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
     84            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
     85            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
     86          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
     87            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
     88            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
     89          #endif // STACK_PROFILE_ID
     90          
     91          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
     96          

   \                                 In  segment CODE_C, align 1
     97          CONST uint8 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
     98          CONST uint8 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
     99          CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    100          

   \                                 In  segment CODE_C, align 1
    101          CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    102          
    103           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    105          

   \                                 In  segment CODE_C, align 1
    106          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    107          

   \                                 In  segment CODE_C, align 1
    108          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    109          
    110          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    112          
    113          #if defined ( ZIGBEE_SOURCE_ROUTING )
    114            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
    115            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
    116          #endif
    117          
    118          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    120          
    121          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    123          
    124          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    127          

   \                                 In  segment CODE_C, align 1
    128          CONST uint8 gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    129          
    130          // For tree addressing, this switch allows the allocation of a 
    131          // router address to an end device when end device address are 
    132          // all used up.  If this option is enabled, address space
    133          // could be limited.

   \                                 In  segment CODE_C, align 1
    134          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    135          
    136          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    137          // number of link status periods after the last received address conflict report
    138          // (network status command)
    139          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
    140          #endif
    141          
    142          #if defined ( ZIGBEE_FREQ_AGILITY )

   \                                 In  segment CODE_C, align 1
    143          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    144          #endif
    145            
    146          /*********************************************************************
    147           * APS GLOBAL VARIABLES
    148           */
    149          
    150          // The Maximum number of binding records
    151          // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    152          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    153          
    154          #if defined ( REFLECTOR )
    155            // The Maximum number of cluster IDs in a binding record
    156            // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    157            CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    158          

   \                                 In  segment CODE_C, align 1
    159            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    160          
    161            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    163          #endif
    164          
    165          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    166          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    167          
    168          // APS End Device Broadcast Table
    169          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    170            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
    171            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
    172          #endif
    173          
    174          /*********************************************************************
    175           * SECURITY GLOBAL VARIABLES
    176           */
    177          
    178          // This is the default pre-configured key,
    179          // change this to make a unique key
    180          // SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    181          CONST uint8 defaultKey[SEC_KEY_LEN] =
   \                     defaultKey:
   \   000000   00010203     DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
   \            04050607
   \            08090A0B
   \            0C0D0E0F
    182          {
    183          #if defined ( APP_TP ) || defined ( APP_TP2 )
    184            // Key for ZigBee Conformance Testing
    185            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    186            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    187          #else
    188            // Key for In-House Testing
    189            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    190            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    191          #endif
    192          };
    193          
    194          // This is the default pre-configured Trust Center Link key,
    195          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    196          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] =
   \                     defaultTCLinkKey:
   \   000000   56777777     DB 86, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119
   \            77777777
   \            77777777
   \            7777    
   \   00000E   7777         DB 119, 119
    197          {
    198            0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    199            0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
    200          };
    201          
    202          /*********************************************************************
    203           * STATUS STRINGS
    204           */
    205          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    206            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    207            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    208            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    209            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    210            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    211            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    212            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    213            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    214            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    215            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    216            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    217            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    218            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    219            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    220            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    221            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    222          #endif
    223          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          void nwk_globals_init( void )
   \                     nwk_globals_init:
    225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    226            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    227            
    228          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    229            if ( ZSTACK_ROUTER_BUILD )
    230            {
    231              // Initialize the Cskip Table
    232              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A0C         MOV     R2,#0xc
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??osal_mem_alloc?relay
   \   000012   90....       MOV     DPTR,#Cskip
   \   000015   EA           MOV     A,R2
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   EB           MOV     A,R3
   \   000019   F0           MOVX    @DPTR,A
    233              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
   \   00001A                ; Setup parameters for call to function RTG_FillCSkipTable
   \   00001A   90....       MOV     DPTR,#Cskip
   \   00001D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000020   7905         MOV     R1,#0x5
   \   000022   7C..         MOV     R4,#(CskipRtrs & 0xff)
   \   000024   7D..         MOV     R5,#((CskipRtrs >> 8) & 0xff)
   \   000026   7A..         MOV     R2,#(CskipChldrn & 0xff)
   \   000028   7B..         MOV     R3,#((CskipChldrn >> 8) & 0xff)
   \   00002A   12....       LCALL   ??RTG_FillCSkipTable?relay
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
    234            }
    235          #endif
    236            
    237            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    238            // to 0 (compiler flag).
    239            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    240            {
    241              NLME_InitLinkStatus();
    242            }
    243            
    244          #if defined ( ZIGBEE_FREQ_AGILITY )
    245            NwkFreqAgilityInit();
   \   000032                ; Setup parameters for call to function NwkFreqAgilityInit
   \   000032   12....       LCALL   ??NwkFreqAgilityInit?relay
    246          #endif
    247          }
   \   000035                REQUIRE ?Subroutine1
   \   000035                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    248          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void NIB_init()
   \                     NIB_init:
    250          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    251            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    252          
    253            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   7402         MOV     A,#0x2
   \   00000E   90....       MOV     DPTR,#(_NIB + 17)
   \   000011   F0           MOVX    @DPTR,A
    254            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   7405         MOV     A,#0x5
   \   000014   90....       MOV     DPTR,#(_NIB + 4)
   \   000017   F0           MOVX    @DPTR,A
    255          
    256          #if ( NWK_MODE == NWK_MODE_MESH )
    257            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   740F         MOV     A,#0xf
   \   00001A   90....       MOV     DPTR,#(_NIB + 40)
   \   00001D   F0           MOVX    @DPTR,A
    258            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   90....       MOV     DPTR,#(_NIB + 41)
   \   000021   F0           MOVX    @DPTR,A
    259          #endif
    260          
    261            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000022   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#(_NIB + 7)
   \   000029   F0           MOVX    @DPTR,A
    262            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   00002A   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#(_NIB + 1)
   \   000031   F0           MOVX    @DPTR,A
    263            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000032   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000035   E0           MOVX    A,@DPTR
   \   000036   90....       MOV     DPTR,#(_NIB + 2)
   \   000039   F0           MOVX    @DPTR,A
    264          
    265            _NIB.ReportConstantCost = 0;
   \   00003A   E4           CLR     A
   \   00003B   90....       MOV     DPTR,#(_NIB + 8)
   \   00003E   F0           MOVX    @DPTR,A
    266            _NIB.RouteDiscRetries = 0;
   \   00003F   90....       MOV     DPTR,#(_NIB + 9)
   \   000042   F0           MOVX    @DPTR,A
    267            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000043   90....       MOV     DPTR,#(_NIB + 11)
   \   000046   F0           MOVX    @DPTR,A
    268            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000047   7401         MOV     A,#0x1
   \   000049   90....       MOV     DPTR,#(_NIB + 104)
   \   00004C   F0           MOVX    @DPTR,A
    269             
    270            if ( ZG_SECURE_ENABLED )
    271            {
    272              _NIB.SecurityLevel = SECURITY_LEVEL;
    273            }
    274            else
    275            {
    276              _NIB.SecurityLevel = 0;
   \   00004D   E4           CLR     A
   \   00004E   90....       MOV     DPTR,#(_NIB + 12)
   \   000051   F0           MOVX    @DPTR,A
    277            }
    278             
    279          #if defined ( ZIGBEEPRO )
    280            _NIB.SymLink = FALSE;
    281          #else
    282            _NIB.SymLink = TRUE;
   \   000052   7401         MOV     A,#0x1
   \   000054   90....       MOV     DPTR,#(_NIB + 13)
   \   000057   F0           MOVX    @DPTR,A
    283          #endif  
    284            
    285            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000058   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   90....       MOV     DPTR,#(_NIB + 14)
   \   00005F   F0           MOVX    @DPTR,A
    286          
    287            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000060   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   000063   E0           MOVX    A,@DPTR
   \   000064   90....       MOV     DPTR,#(_NIB + 15)
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    288          
    289            _NIB.RouteDiscoveryTime = 5;
   \   00006B   7405         MOV     A,#0x5
   \   00006D   90....       MOV     DPTR,#(_NIB + 18)
   \   000070   F0           MOVX    @DPTR,A
    290            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   000071   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000074   E0           MOVX    A,@DPTR
   \   000075   90....       MOV     DPTR,#(_NIB + 19)
   \   000078   F0           MOVX    @DPTR,A
    291          
    292            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000079   90....       MOV     DPTR,#(_NIB + 20)
   \   00007C   74FE         MOV     A,#-0x2
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   74FF         MOV     A,#-0x1
   \   000082   F0           MOVX    @DPTR,A
    293            _NIB.nwkLogicalChannel = 0;
   \   000083   E4           CLR     A
   \   000084   90....       MOV     DPTR,#(_NIB + 22)
   \   000087   F0           MOVX    @DPTR,A
    294            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000088   90....       MOV     DPTR,#(_NIB + 23)
   \   00008B   74FE         MOV     A,#-0x2
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   74FF         MOV     A,#-0x1
   \   000091   F0           MOVX    @DPTR,A
    295            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \   000092                ; Setup parameters for call to function osal_memset
   \   000092   7C08         MOV     R4,#0x8
   \   000094   7D00         MOV     R5,#0x0
   \   000096   7900         MOV     R1,#0x0
   \   000098   7A..         MOV     R2,#((_NIB + 25) & 0xff)
   \   00009A   7B..         MOV     R3,#(((_NIB + 25) >> 8) & 0xff)
   \   00009C   12....       LCALL   ??osal_memset?relay
    296            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   00009F   90....       MOV     DPTR,#(_NIB + 33)
   \   0000A2   74FE         MOV     A,#-0x2
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   74FF         MOV     A,#-0x1
   \   0000A8   F0           MOVX    @DPTR,A
    297          
    298            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   0000A9                ; Setup parameters for call to function sAddrExtCpy
   \   0000A9   7C..         MOV     R4,#(zgExtendedPANID & 0xff)
   \   0000AB   7D..         MOV     R5,#((zgExtendedPANID >> 8) & 0xff)
   \   0000AD   7A..         MOV     R2,#((_NIB + 53) & 0xff)
   \   0000AF   7B..         MOV     R3,#(((_NIB + 53) >> 8) & 0xff)
   \   0000B1   12....       LCALL   ??sAddrExtCpy?relay
    299             
    300            _NIB.nwkKeyLoaded = FALSE;
   \   0000B4   E4           CLR     A
   \   0000B5   90....       MOV     DPTR,#(_NIB + 61)
   \   0000B8   F0           MOVX    @DPTR,A
    301             
    302          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    303            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
    304            _NIB.nwkUniqueAddr = FALSE;
    305          #else
    306            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
   \   0000B9   90....       MOV     DPTR,#(_NIB + 96)
   \   0000BC   F0           MOVX    @DPTR,A
    307            _NIB.nwkUniqueAddr = TRUE;
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   90....       MOV     DPTR,#(_NIB + 97)
   \   0000C2   F0           MOVX    @DPTR,A
    308          #endif
    309          
    310            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD; 
   \   0000C3   E4           CLR     A
   \   0000C4   90....       MOV     DPTR,#(_NIB + 98)
   \   0000C7   F0           MOVX    @DPTR,A
    311            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   90....       MOV     DPTR,#(_NIB + 99)
   \   0000CD   F0           MOVX    @DPTR,A
    312           
    313            //MTO and source routing
    314            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000CE   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   90....       MOV     DPTR,#(_NIB + 102)
   \   0000D5   F0           MOVX    @DPTR,A
    315            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000D6   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   90....       MOV     DPTR,#(_NIB + 101)
   \   0000DD   F0           MOVX    @DPTR,A
    316            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000DE   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   90....       MOV     DPTR,#(_NIB + 103)
   \   0000E5   F0           MOVX    @DPTR,A
    317            _NIB.nwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \   0000E6   740A         MOV     A,#0xa
   \   0000E8   90....       MOV     DPTR,#(_NIB + 105)
   \   0000EB   F0           MOVX    @DPTR,A
    318          
    319          #if defined ( ZIGBEE_MULTICAST )
    320            _NIB.nwkUseMultiCast = TRUE;
    321          #else
    322            _NIB.nwkUseMultiCast = FALSE;
   \   0000EC   E4           CLR     A
   \   0000ED   90....       MOV     DPTR,#(_NIB + 100)
   \   0000F0   F0           MOVX    @DPTR,A
    323          #endif  
    324            _NIB.nwkManagerAddr = 0x0000;
   \   0000F1   90....       MOV     DPTR,#(_NIB + 106)
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   F0           MOVX    @DPTR,A
    325            _NIB.nwkUpdateId = 0;
   \   0000F7   90....       MOV     DPTR,#(_NIB + 110)
   \   0000FA   F0           MOVX    @DPTR,A
    326            _NIB.nwkTotalTransmissions = 0;
   \   0000FB   90....       MOV     DPTR,#(_NIB + 108)
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   F0           MOVX    @DPTR,A
    327          
    328            if ( ZSTACK_ROUTER_BUILD )
    329            {
    330          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    331              NLME_InitStochasticAddressing();
    332          #else
    333              NLME_InitTreeAddressing();
   \   000101                ; Setup parameters for call to function NLME_InitTreeAddressing
   \   000101   12....       LCALL   ??NLME_InitTreeAddressing?relay
    334          #endif
    335            }
    336          }
   \   000104   02....       LJMP    ?Subroutine1 & 0xFFFF
    337          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    339          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    340            switch ( statusCode )
   \   000009   8E..         MOV     ?V0 + 4,R6
   \   00000B   8F..         MOV     ?V0 + 5,R7
   \   00000D   8A..         MOV     ?V0 + 0,R2
   \   00000F   8B..         MOV     ?V0 + 1,R3
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   000016   0000         DW        0
   \   000018   0900         DW        9
   \   00001A   0200         DW        2
   \   00001C   ....         DW        ??nwk_Status_0
   \   00001E   0300         DW        3
   \   000020   ....         DW        ??nwk_Status_1
   \   000022   0400         DW        4
   \   000024   ....         DW        ??nwk_Status_2
   \   000026   0500         DW        5
   \   000028   ....         DW        ??nwk_Status_3
   \   00002A   0600         DW        6
   \   00002C   ....         DW        ??nwk_Status_4
   \   00002E   0700         DW        7
   \   000030   ....         DW        ??nwk_Status_5
   \   000032   0110         DW        4097
   \   000034   ....         DW        ??nwk_Status_6
   \   000036   0310         DW        4099
   \   000038   ....         DW        ??nwk_Status_7
   \   00003A   0410         DW        4100
   \   00003C   ....         DW        ??nwk_Status_8
   \   00003E   ....         DW        ??nwk_Status_9
    341            {
    342              case NWK_STATUS_COORD_ADDR: // The state is coordinator addr
    343                show("NWK_STATUS_COORD_ADDR");
   \                     ??nwk_Status_3:
   \   000040                ; Setup parameters for call to function show
   \   000040   7A..         MOV     R2,#(`?<Constant "NWK_STATUS_COORD_ADDR">` & 0xff)
   \   000042   7B..         MOV     R3,#((`?<Constant "NWK_STATUS_COORD_ADDR">` >> 8) & 0xff)
   \   000044   12....       LCALL   ??show?relay
    344                if ( ZSTACK_ROUTER_BUILD )
    345                {
    346                  #if defined (LCD_SUPPORTED) 
    347                      HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
   \   000047                ; Setup parameters for call to function HalLcdWriteString
   \   000047   7901         MOV     R1,#0x1
   \   000049   7A..         MOV     R2,#(ZigbeeCoordStr & 0xff)
   \   00004B   7B..         MOV     R3,#((ZigbeeCoordStr >> 8) & 0xff)
   \   00004D   12....       LCALL   ?Subroutine0 & 0xFFFF
    348                      HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    349                      #if defined (Location) // The location initilization display state
    350                          halMcuWaitMs(300);
    351                          HalLcd_HW_Clear();
    352                          #if defined (CoordinatorKB)
    353                              HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_1);
    354                              HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_2);
    355                          #endif
    356                          #if defined (CoordinatorEB)
    357                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_1);
    358                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_2);
    359                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_3);
    360                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_4);
    361                          #endif
    362                      #endif
    363                  #endif
    364                }
   \                     ??CrossCallReturnLabel_0:
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   7910         MOV     R1,#0x10
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   7A..         MOV     R2,#(NetworkIDStr & 0xff)
   \   00005B   7B..         MOV     R3,#((NetworkIDStr >> 8) & 0xff)
   \                     ??nwk_Status_10:
   \   00005D   12....       LCALL   ??HalLcdWriteStringValue?relay
   \                     ??nwk_Status_11:
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   02....       LJMP    ??nwk_Status_9 & 0xFFFF
    365                break;
    366          
    367              case NWK_STATUS_ROUTER_ADDR: // The state is router addr
    368                show("NWK_STATUS_ROUTER_ADDR");
   \                     ??nwk_Status_4:
   \   000068                ; Setup parameters for call to function show
   \   000068   7A..         MOV     R2,#(`?<Constant "NWK_STATUS_ROUTER_ADDR">` & 0xff)
   \   00006A   7B..         MOV     R3,#((`?<Constant "NWK_STATUS_ROUTER_ADDR">` >> 8) & 0xff)
   \   00006C   12....       LCALL   ??show?relay
    369                if ( ZSTACK_ROUTER_BUILD )
    370                {
    371                  #if defined (LCD_SUPPORTED)
    372                      HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 ); 
   \   00006F                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00006F   75..01       MOV     ?V0 + 0,#0x1
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   7910         MOV     R1,#0x10
   \   000079   EE           MOV     A,R6
   \   00007A   FC           MOV     R4,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FD           MOV     R5,A
   \   00007D   7A..         MOV     R2,#(RouterStr & 0xff)
   \   00007F   7B..         MOV     R3,#((RouterStr >> 8) & 0xff)
   \   000081   80DA         SJMP    ??nwk_Status_10
    373                  #endif
    374                }
    375                break;
    376          
    377              case NWK_STATUS_ORPHAN_RSP:
    378                show("NWK_STATUS_ORPHAN_RSP");
   \                     ??nwk_Status_5:
   \   000083                ; Setup parameters for call to function show
   \   000083   7A..         MOV     R2,#(`?<Constant "NWK_STATUS_ORPHAN_RSP">` & 0xff)
   \   000085   7B..         MOV     R3,#((`?<Constant "NWK_STATUS_ORPHAN_RSP">` >> 8) & 0xff)
   \   000087   12....       LCALL   ??show?relay
    379                if ( ZSTACK_ROUTER_BUILD )
    380                {
    381                  #if defined (LCD_SUPPORTED)
    382                  if ( statusValue == ZSuccess )
   \   00008A   7A..         MOV     R2,#(OrphanRspStr & 0xff)
   \   00008C   7B..         MOV     R3,#((OrphanRspStr >> 8) & 0xff)
   \   00008E   EE           MOV     A,R6
   \   00008F   7001         JNZ     ??nwk_Status_12
   \   000091   EF           MOV     A,R7
   \                     ??nwk_Status_12:
   \   000092   7007         JNZ     ??nwk_Status_13
    383                      HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
   \   000094                ; Setup parameters for call to function HalLcdWriteScreen
   \   000094   7C..         MOV     R4,#(SentStr & 0xff)
   \   000096   7D..         MOV     R5,#((SentStr >> 8) & 0xff)
   \   000098   02....       LJMP    ??nwk_Status_14 & 0xFFFF
    384                  else
    385                      HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
   \                     ??nwk_Status_13:
   \   00009B                ; Setup parameters for call to function HalLcdWriteScreen
   \   00009B   7C..         MOV     R4,#(FailedStr & 0xff)
   \   00009D   7D..         MOV     R5,#((FailedStr >> 8) & 0xff)
   \   00009F   02....       LJMP    ??nwk_Status_14 & 0xFFFF
    386                  #endif
    387                }
    388                break;
    389          
    390              case NWK_ERROR_ASSOC_RSP:
    391                show("NWK_ERROR_ASSOC_RSP");
   \                     ??nwk_Status_6:
   \   0000A2                ; Setup parameters for call to function show
   \   0000A2   7A..         MOV     R2,#(`?<Constant "NWK_ERROR_ASSOC_RSP">` & 0xff)
   \   0000A4   7B..         MOV     R3,#((`?<Constant "NWK_ERROR_ASSOC_RSP">` >> 8) & 0xff)
   \   0000A6   12....       LCALL   ??show?relay
    392                if ( ZSTACK_ROUTER_BUILD )
    393                {
    394                  #if defined (LCD_SUPPORTED)
    395                      HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
   \   0000A9                ; Setup parameters for call to function HalLcdWriteString
   \   0000A9   7901         MOV     R1,#0x1
   \   0000AB   7A..         MOV     R2,#(AssocRspFailStr & 0xff)
   \   0000AD   7B..         MOV     R3,#((AssocRspFailStr >> 8) & 0xff)
   \   0000AF   12....       LCALL   ?Subroutine0 & 0xFFFF
    396                      HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    397                  #endif
    398                }
   \                     ??CrossCallReturnLabel_1:
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B5   7910         MOV     R1,#0x10
   \   0000B7   AA..         MOV     R2,?V0 + 4
   \   0000B9   AB..         MOV     R3,?V0 + 5
   \   0000BB   7C00         MOV     R4,#0x0
   \   0000BD   7D00         MOV     R5,#0x0
   \   0000BF   12....       LCALL   ??HalLcdWriteValue?relay
   \   0000C2   809C         SJMP    ??nwk_Status_11
    399                break;
    400                
    401              case NWK_STATUS_ED_ADDR: // The state is end-device addr
    402                show("NWK_STATUS_ED_ADDR");
   \                     ??nwk_Status_1:
   \   0000C4                ; Setup parameters for call to function show
   \   0000C4   7A..         MOV     R2,#(`?<Constant "NWK_STATUS_ED_ADDR">` & 0xff)
   \   0000C6   7B..         MOV     R3,#((`?<Constant "NWK_STATUS_ED_ADDR">` >> 8) & 0xff)
   \   0000C8   12....       LCALL   ??show?relay
    403                if ( ZSTACK_END_DEVICE_BUILD )
   \   0000CB   8073         SJMP    ??nwk_Status_9
    404                {
    405                  #if defined (LCD_SUPPORTED)
    406                      HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    407                  #endif
    408                }
    409                break;
    410          
    411              case NWK_STATUS_PARENT_ADDR: // The state is parent addr
    412                show("NWK_STATUS_PARENT_ADDR");
   \                     ??nwk_Status_2:
   \   0000CD                ; Setup parameters for call to function show
   \   0000CD   7A..         MOV     R2,#(`?<Constant "NWK_STATUS_PARENT_ADDR">` & 0xff)
   \   0000CF   7B..         MOV     R3,#((`?<Constant "NWK_STATUS_PARENT_ADDR">` >> 8) & 0xff)
   \   0000D1   12....       LCALL   ??show?relay
    413                #if defined (LCD_SUPPORTED)      
    414                    HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \   0000D4                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000D4   75..02       MOV     ?V0 + 0,#0x2
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DC   7910         MOV     R1,#0x10
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FC           MOV     R4,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FD           MOV     R5,A
   \   0000E2   7A..         MOV     R2,#(ParentStr & 0xff)
   \   0000E4   7B..         MOV     R3,#((ParentStr >> 8) & 0xff)
   \   0000E6   02....       LJMP    ??nwk_Status_10 & 0xFFFF
    415                    #if defined (Location)
    416                        halMcuWaitMs(300);
    417                        HalLcd_HW_Clear();
    418                        #if defined (RouterKB)
    419                            HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_1);
    420                            HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_2);
    421                        #endif
    422                        #if defined (RouterEB)
    423                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_1);
    424                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_2);
    425                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_3);
    426                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_4);
    427                        #endif
    428                    #endif 
    429                #endif
    430                break;
    431          
    432              case NWK_STATUS_ASSOC_CNF:
    433                show("NWK_STATUS_ASSOC_CNF");
   \                     ??nwk_Status_0:
   \   0000E9                ; Setup parameters for call to function show
   \   0000E9   7A..         MOV     R2,#(`?<Constant "NWK_STATUS_ASSOC_CNF">` & 0xff)
   \   0000EB   7B..         MOV     R3,#((`?<Constant "NWK_STATUS_ASSOC_CNF">` >> 8) & 0xff)
   \   0000ED   12....       LCALL   ??show?relay
    434                #if defined (LCD_SUPPORTED)
    435                    HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \   0000F0                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000F0   7C..         MOV     R4,#(SuccessStr & 0xff)
   \   0000F2   7D..         MOV     R5,#((SuccessStr >> 8) & 0xff)
   \   0000F4   7A..         MOV     R2,#(AssocCnfStr & 0xff)
   \   0000F6   7B..         MOV     R3,#((AssocCnfStr >> 8) & 0xff)
   \   0000F8   8043         SJMP    ??nwk_Status_14
    436                #endif
    437                break;
    438          
    439              case NWK_ERROR_ASSOC_CNF_DENIED:
    440                show("NWK_ERROR_ASSOC_CNF_DENIED");
   \                     ??nwk_Status_7:
   \   0000FA                ; Setup parameters for call to function show
   \   0000FA   7A..         MOV     R2,#(`?<Constant "NWK_ERROR_ASSOC_CNF_D...">` & 0xff)
   \   0000FC   7B..         MOV     R3,#((`?<Constant "NWK_ERROR_ASSOC_CNF_D...">` >> 8) & 0xff)
   \   0000FE   12....       LCALL   ??show?relay
    441                #if defined (LCD_SUPPORTED)
    442                    HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \   000101                ; Setup parameters for call to function HalLcdWriteString
   \   000101   7901         MOV     R1,#0x1
   \   000103   7A..         MOV     R2,#(AssocCnfFailStr & 0xff)
   \   000105   7B..         MOV     R3,#((AssocCnfFailStr >> 8) & 0xff)
   \   000107   12....       LCALL   ?Subroutine0 & 0xFFFF
    443                    HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
   \                     ??CrossCallReturnLabel_2:
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010D   7910         MOV     R1,#0x10
   \   00010F   AA..         MOV     R2,?V0 + 4
   \   000111   AB..         MOV     R3,?V0 + 5
   \   000113   7C00         MOV     R4,#0x0
   \   000115   7D00         MOV     R5,#0x0
   \   000117   12....       LCALL   ??HalLcdWriteValue?relay
   \   00011A   7401         MOV     A,#0x1
   \   00011C   12....       LCALL   ?DEALLOC_XSTACK8
    444                #endif
    445                    halMcuWaitMs(5000); // delay 5 seconds
   \   00011F                ; Setup parameters for call to function halMcuWaitMs
   \   00011F   7A88         MOV     R2,#-0x78
   \   000121   7B13         MOV     R3,#0x13
   \   000123   12....       LCALL   ??halMcuWaitMs?relay
    446                    WatchDogEnable( WDTISH ); // Use watch dog to reset the system
   \   000126   75C9AB       MOV     0xc9,#-0x55
   \   000129   75C95B       MOV     0xc9,#0x5b
   \   00012C   8012         SJMP    ??nwk_Status_9
    447                break;
    448          
    449              case NWK_ERROR_ENERGY_SCAN_FAILED: // The state is scan failed
    450                show("NWK_ERROR_ENERGY_SCAN_FAILED");
   \                     ??nwk_Status_8:
   \   00012E                ; Setup parameters for call to function show
   \   00012E   7A..         MOV     R2,#(`?<Constant "NWK_ERROR_ENERGY_SCAN...">` & 0xff)
   \   000130   7B..         MOV     R3,#((`?<Constant "NWK_ERROR_ENERGY_SCAN...">` >> 8) & 0xff)
   \   000132   12....       LCALL   ??show?relay
    451                #if defined (LCD_SUPPORTED)
    452                    HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \   000135                ; Setup parameters for call to function HalLcdWriteScreen
   \   000135   7C..         MOV     R4,#(ScanFailedStr & 0xff)
   \   000137   7D..         MOV     R5,#((ScanFailedStr >> 8) & 0xff)
   \   000139   7A..         MOV     R2,#(EnergyLevelStr & 0xff)
   \   00013B   7B..         MOV     R3,#((EnergyLevelStr >> 8) & 0xff)
   \                     ??nwk_Status_14:
   \   00013D   12....       LCALL   ??HalLcdWriteScreen?relay
    453                #endif
    454                break;
    455            }
    456          }
   \                     ??nwk_Status_9:
   \   000140   7F08         MOV     R7,#0x8
   \   000142   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000145                REQUIRE WDCTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??HalLcdWriteString?relay
   \   000003                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000003                ; Setup parameters for call to function HalLcdWriteValue
   \   000003                ; Setup parameters for call to function HalLcdWriteValue
   \   000003   75..02       MOV     ?V0 + 0,#0x2
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipRtrs>`:
   \   000000   06060606     DB 6, 6, 6, 6, 6, 0
   \            0600    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipChldrn>`:
   \   000000   14141414     DB 20, 20, 20, 20, 20, 0
   \            1400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_STATUS_COORD_ADDR">`:
   \   000000   4E574B5F     DB "NWK_STATUS_COORD_ADDR"
   \            53544154
   \            55535F43
   \            4F4F5244
   \            5F414444
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_STATUS_ROUTER_ADDR">`:
   \   000000   4E574B5F     DB "NWK_STATUS_ROUTER_ADDR"
   \            53544154
   \            55535F52
   \            4F555445
   \            525F4144
   \            445200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_STATUS_ORPHAN_RSP">`:
   \   000000   4E574B5F     DB "NWK_STATUS_ORPHAN_RSP"
   \            53544154
   \            55535F4F
   \            52504841
   \            4E5F5253
   \            5000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_ERROR_ASSOC_RSP">`:
   \   000000   4E574B5F     DB "NWK_ERROR_ASSOC_RSP"
   \            4552524F
   \            525F4153
   \            534F435F
   \            52535000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_STATUS_ED_ADDR">`:
   \   000000   4E574B5F     DB "NWK_STATUS_ED_ADDR"
   \            53544154
   \            55535F45
   \            445F4144
   \            445200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_STATUS_PARENT_ADDR">`:
   \   000000   4E574B5F     DB "NWK_STATUS_PARENT_ADDR"
   \            53544154
   \            55535F50
   \            4152454E
   \            545F4144
   \            445200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_STATUS_ASSOC_CNF">`:
   \   000000   4E574B5F     DB "NWK_STATUS_ASSOC_CNF"
   \            53544154
   \            55535F41
   \            53534F43
   \            5F434E46
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_ERROR_ASSOC_CNF_D...">`:
   \   000000   4E574B5F     DB "NWK_ERROR_ASSOC_CNF_DENIED"
   \            4552524F
   \            525F4153
   \            534F435F
   \            434E465F
   \            44454E49
   \            454400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK_ERROR_ENERGY_SCAN...">`:
   \   000000   4E574B5F     DB "NWK_ERROR_ENERGY_SCAN_FAILED"
   \            4552524F
   \            525F454E
   \            45524759
   \            5F534341
   \            4E5F4641
   \            494C4544
   \            00      

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     NIB_init                         2      0      0
       -> osal_rand                   4      0      0
       -> osal_memset                 4      0      0
       -> sAddrExtCpy                 4      0      0
       -> NLME_InitTreeAddressing     4      0      0
     nwk_Status                       0      0     17
       -> show                        0      0     32
       -> HalLcdWriteString           0      0     32
       -> HalLcdWriteStringValue      0      0     34
       -> show                        0      0     32
       -> HalLcdWriteStringValue      0      0     34
       -> show                        0      0     32
       -> HalLcdWriteScreen           0      0     32
       -> HalLcdWriteScreen           0      0     32
       -> show                        0      0     32
       -> HalLcdWriteString           0      0     32
       -> HalLcdWriteValue            0      0     34
       -> show                        0      0     32
       -> show                        0      0     32
       -> HalLcdWriteStringValue      0      0     34
       -> show                        0      0     32
       -> HalLcdWriteScreen           0      0     32
       -> show                        0      0     32
       -> HalLcdWriteString           0      0     32
       -> HalLcdWriteValue            0      0     34
       -> halMcuWaitMs                0      0     32
       -> show                        0      0     32
       -> HalLcdWriteScreen           0      0     32
     nwk_globals_init                 2      0      2
       -> AddrMgrInit                 4      0      0
       -> osal_mem_alloc              4      0      0
       -> RTG_FillCSkipTable          4      0      4
       -> NwkFreqAgilityInit          4      0      0


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     WDCTL                                     1
     gNWK_MAX_DEVICE_LIST                      2
     gNWK_MAX_SLEEPING_END_DEVICES             1
     gNWK_MAX_DATABUFS_WAITING                 1
     gNWK_MAX_DATABUFS_SCHEDULED               1
     gNWK_MAX_DATABUFS_CONFIRMED               1
     gNWK_MAX_DATABUFS_TOTAL                   1
     gNWK_INDIRECT_CNT_RTG_TMR                 1
     gNWK_INDIRECT_MSG_MAX_PER                 1
     gNWK_INDIRECT_MSG_MAX_ALL                 1
     Cskip                                     2
     CskipRtrs                                 6
     CskipChldrn                               6
     gMIN_TREE_LINK_COST                       1
     AssociatedDevList                       378
     gMAX_RTG_ENTRIES                          1
     gMAX_RTG_SRC_ENTRIES                      1
     gMAX_RREQ_ENTRIES                         1
     gMAX_NEIGHBOR_ENTRIES                     1
     neighborTable                           368
     gMAX_SOURCE_ROUTE                         1
     gMAX_BROADCAST_QUEUED                     1
     rtgTable                                280
     rtDiscTable                              64
     bcastTable                               72
     bcastHoldHandle                           9
     bcastHoldAckMask                         36
     gMAX_BCAST                                1
     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
                                               1
     gNWK_FREQ_AGILITY_ALL_MAC_ERRS            1
     gNWK_MAX_BINDING_ENTRIES                  2
     gMAX_BINDING_CLUSTER_IDS                  1
     gBIND_REC_SIZE                            2
     BindingTable                             56
     gAPS_MAX_GROUPS                           1
     defaultKey                               16
     defaultTCLinkKey                         16
     PingStr                                  15
     AssocCnfStr                              10
     SuccessStr                                8
     EndDeviceStr                             11
     ParentStr                                 8
     ZigbeeCoordStr                           13
     NetworkIDStr                             12
     RouterStr                                 8
     OrphanRspStr                             16
     SentStr                                   5
     FailedStr                                 7
     AssocRspFailStr                          15
     AssocIndStr                              10
     AssocCnfFailStr                          15
     EnergyLevelStr                           13
     ScanFailedStr                            12
     nwk_globals_init                         53
     ?Subroutine1                              7
     NIB_init                                263
     nwk_Status                              325
     ?Subroutine0                              9
     ?<Initializer for CskipRtrs>              6
     ?<Initializer for CskipChldrn>            6
     ?<Initializer for gMIN_TREE_LINK_COST>    1
     ??nwk_globals_init?relay                  6
     ??NIB_init?relay                          6
     ??nwk_Status?relay                        6
     ?<Constant "NWK_STATUS_COORD_ADDR">      22
     ?<Constant "NWK_STATUS_ROUTER_ADDR">     23
     ?<Constant "NWK_STATUS_ORPHAN_RSP">      22
     ?<Constant "NWK_ERROR_ASSOC_RSP">        20
     ?<Constant "NWK_STATUS_ED_ADDR">         19
     ?<Constant "NWK_STATUS_PARENT_ADDR">     23
     ?<Constant "NWK_STATUS_ASSOC_CNF">       21
     ?<Constant "NWK_ERROR_ASSOC_CNF_D...">   27
     ?<Constant "NWK_ERROR_ENERGY_SCAN...">   29

 
   657 bytes in segment BANKED_CODE
    18 bytes in segment BANK_RELAYS
    57 bytes in segment CODE_C
     1 byte  in segment SFR_AN
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
   384 bytes in segment XDATA_ROM_C
 1 265 bytes in segment XDATA_Z
 
   745 bytes of CODE  memory
   384 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
 1 278 bytes of XDATA memory

Errors: none
Warnings: none
