###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                02/Sep/2013  17:25:54 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Components\stack\zdo\ZDSecMgr.c            #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Components\stack\zdo\ZDSecMgr.c" -D        #
#                          CC2530 -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D    #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -D Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\ZDSecMgr.ls #
#                          t                                                  #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\ZDSecMgr.r51 #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Components\stack\zdo\ZDSecMgr.c
      1          #ifdef __cplusplus
      2          extern "C"
      3          {
      4          #endif
      5          
      6          #include "ZComdef.h"
      7          #include "OSAL.h"
      8          #include "OSAL_NV.h"
      9          #include "ZGlobals.h"
     10          #include "ssp.h"
     11          #include "nwk_globals.h"
     12          #include "nwk.h"
     13          #include "NLMEDE.h"
     14          #include "AddrMgr.h"
     15          #include "AssocList.h"
     16          #include "APSMEDE.h"
     17          #include "AF.h"
     18          #include "ZDConfig.h"
     19          #include "ZDApp.h"
     20          #include "ZDSecMgr.h"
     21          
     22          // maximum number of devices managed by this Security Manager
     23          #if !defined ( ZDSECMGR_DEVICE_MAX )
     24            #define ZDSECMGR_DEVICE_MAX 3
     25          #endif
     26          
     27          // total number of preconfigured devices (EXT address, MASTER key)
     28          //devtag.pro.security
     29          //#define ZDSECMGR_PRECONFIG_MAX ZDSECMGR_DEVICE_MAX
     30          #define ZDSECMGR_PRECONFIG_MAX 0
     31          
     32          // maximum number of MASTER keys this device may hold
     33          #define ZDSECMGR_MASTERKEY_MAX ZDSECMGR_DEVICE_MAX
     34          
     35          // maximum number of LINK keys this device may store
     36          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     37          
     38          // total number of devices under control - authentication, SKKE, etc.
     39          #define ZDSECMGR_CTRL_MAX ZDSECMGR_DEVICE_MAX
     40          
     41          // total number of stored devices
     42          #if !defined ( ZDSECMGR_STORED_DEVICES )
     43            #define ZDSECMGR_STORED_DEVICES 3
     44          #endif
     45            
     46          // Total number of preconfigured trust center link key
     47          #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
     48            #define ZDSECMGR_TC_DEVICE_MAX 1
     49          #endif
     50            
     51          #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
     52            #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
     53          #endif
     54            
     55          #define ZDSECMGR_CTRL_NONE       0
     56          #define ZDSECMGR_CTRL_INIT       1
     57          #define ZDSECMGR_CTRL_TK_MASTER  2
     58          #define ZDSECMGR_CTRL_SKKE_INIT  3
     59          #define ZDSECMGR_CTRL_SKKE_WAIT  4
     60          #define ZDSECMGR_CTRL_SKKE_DONE  5
     61          #define ZDSECMGR_CTRL_SKKE_FAIL  6
     62          #define ZDSECMGR_CTRL_TK_NWK     7
     63          
     64          #define ZDSECMGR_CTRL_BASE_CNTR      1
     65          #define ZDSECMGR_CTRL_SKKE_INIT_CNTR 1
     66          #define ZDSECMGR_CTRL_TK_NWK_CNTR    1
     67          
     68          // set SKA slot maximum
     69          #define ZDSECMGR_SKA_SLOT_MAX 1
     70          
     71          // APSME Stub Implementations
     72          #define ZDSecMgrMasterKeyGet   APSME_MasterKeyGet
     73          #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
     74          #define ZDSecMgrLinkKeyDataGet APSME_LinkKeyDataGet
     75          #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
     76          
     77          #if !defined( MAX_APS_FRAMECOUNTER_CHANGES )
     78            // The number of times the frame counter can change before
     79            // saving to NV
     80            #define MAX_APS_FRAMECOUNTER_CHANGES    10
     81          #endif
     82          
     83          /******************************************************************************
     84           * TYPEDEFS
     85           */
     86          typedef struct
     87          {
     88            uint8 extAddr[Z_EXTADDR_LEN];
     89            uint8 key[SEC_KEY_LEN];
     90          } ZDSecMgrPreConfigData_t;
     91          
     92          typedef struct
     93          {
     94            uint16 ami;
     95            uint8  key[SEC_KEY_LEN];
     96          } ZDSecMgrMasterKeyData_t;
     97          
     98          //should match APSME_LinkKeyData_t;
     99          typedef struct
    100          {
    101            uint8               key[SEC_KEY_LEN];
    102            APSME_LinkKeyData_t apsmelkd;
    103          } ZDSecMgrLinkKeyData_t;
    104          
    105          typedef struct
    106          {
    107            uint16                ami;
    108            ZDSecMgrLinkKeyData_t lkd;
    109            ZDSecMgr_Authentication_Option authenticateOption;
    110          } ZDSecMgrEntry_t;
    111          
    112          typedef struct
    113          {
    114            ZDSecMgrEntry_t* entry;
    115            uint16           parentAddr;
    116            uint8            secure;
    117            uint8            state;
    118            uint8            cntr;
    119            //uint8          next;
    120          } ZDSecMgrCtrl_t;
    121          
    122          typedef struct
    123          {
    124            uint16          nwkAddr;
    125            uint8*          extAddr;
    126            uint16          parentAddr;
    127            uint8           secure;
    128            uint8           devStatus;
    129            ZDSecMgrCtrl_t* ctrl;
    130          } ZDSecMgrDevice_t;
    131          
    132          /******************************************************************************
    133           * LOCAL VARIABLES
    134           */
    135          #if 0 // Taken out because the following functionality is only used for test
    136                // purpose. A more efficient (above) way is used. It can be put
    137                // back in if customers request for a white/black list feature.
    138          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    139          {
    140            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    141            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    142            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    143          };
    144          #endif
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    147            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    148          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    149          uint8 ZDSecMgrTCMasterKey[SEC_KEY_LEN] =
   \                     ZDSecMgrTCMasterKey:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for ZDSecMgrTCMasterKey>`
   \   000010                REQUIRE __INIT_XDATA_I
    150            {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    151             0x89,0x67,0x45,0x23,0x01,0xEF,0xCD,0xAB};
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 ZDSecMgrTCDataLoaded    = FALSE;
   \                     ZDSecMgrTCDataLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    155          
    156          //devtag.pro.security - remove this
    157          #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
    158          const ZDSecMgrPreConfigData_t ZDSecMgrPreConfigData[ZDSECMGR_PRECONFIG_MAX] =
    159          {
    160            //---------------------------------------------------------------------------
    161            // DEVICE A
    162            //---------------------------------------------------------------------------
    163            {
    164              // extAddr
    165              {0x7C,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
    166          
    167              // key
    168              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    169               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
    170            },
    171            //---------------------------------------------------------------------------
    172            // DEVICE B
    173            //---------------------------------------------------------------------------
    174            {
    175              // extAddr
    176              {0x84,0x03,0x00,0x00,0x00,0x4B,0x12,0x00},
    177          
    178              // key
    179              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    180               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
    181            },
    182            //---------------------------------------------------------------------------
    183            // DEVICE C
    184            //---------------------------------------------------------------------------
    185            {
    186              // extAddr
    187              {0x3E,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
    188          
    189              // key
    190              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    191               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
    192            },
    193          };
    194          #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
    195          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          ZDSecMgrMasterKeyData_t* ZDSecMgrMasterKeyData = NULL;
   \                     ZDSecMgrMasterKeyData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          ZDSecMgrEntry_t*         ZDSecMgrEntries       = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          ZDSecMgrCtrl_t*          ZDSecMgrCtrlData      = NULL;
   \                     ZDSecMgrCtrlData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    199          void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr );
    200          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    201          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          APSME_TCLinkKey_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z
    206          
    207          /******************************************************************************
    208           * PRIVATE FUNCTIONS
    209           *
    210           *   ZDSecMgrMasterKeyInit
    211           *   ZDSecMgrAddrStore
    212           *   ZDSecMgrExtAddrStore
    213           *   ZDSecMgrExtAddrLookup
    214           *   ZDSecMgrMasterKeyLookup
    215           *   ZDSecMgrMasterKeyStore
    216           *   ZDSecMgrEntryInit
    217           *   ZDSecMgrEntryLookup
    218           *   ZDSecMgrEntryLookupAMI
    219           *   ZDSecMgrEntryLookupExt
    220           *   ZDSecMgrEntryFree
    221           *   ZDSecMgrEntryNew
    222           *   ZDSecMgrCtrlInit
    223           *   ZDSecMgrCtrlRelease
    224           *   ZDSecMgrCtrlLookup
    225           *   ZDSecMgrCtrlSet
    226           *   ZDSecMgrCtrlAdd
    227           *   ZDSecMgrCtrlTerm
    228           *   ZDSecMgrCtrlReset
    229           *   ZDSecMgrMasterKeyLoad
    230           *   ZDSecMgrAppKeyGet
    231           *   ZDSecMgrAppKeyReq
    232           *   ZDSecMgrEstablishKey
    233           *   ZDSecMgrSendMasterKey
    234           *   ZDSecMgrSendNwkKey
    235           *   ZDSecMgrDeviceEntryRemove
    236           *   ZDSecMgrDeviceEntryAdd
    237           *   ZDSecMgrDeviceCtrlHandler
    238           *   ZDSecMgrDeviceCtrlSetup
    239           *   ZDSecMgrDeviceCtrlUpdate
    240           *   ZDSecMgrDeviceRemove
    241           *   ZDSecMgrDeviceValidateSKKE
    242           *   ZDSecMgrDeviceValidateRM
    243           *   ZDSecMgrDeviceValidateCM
    244           *   ZDSecMgrDeviceValidate
    245           *   ZDSecMgrDeviceJoin
    246           *   ZDSecMgrDeviceJoinDirect
    247           *   ZDSecMgrDeviceJoinFwd
    248           *   ZDSecMgrDeviceNew
    249           *   ZDSecMgrAssocDeviceAuth
    250           *   ZDSecMgrAuthInitiate
    251           *   ZDSecMgrAuthNwkKey
    252           *   APSME_TCLinkKeyInit
    253           *   APSME_IsDefaultTCLK
    254           */
    255          //-----------------------------------------------------------------------------
    256          // master key data
    257          //-----------------------------------------------------------------------------
    258          void ZDSecMgrMasterKeyInit( void );
    259          
    260          //-----------------------------------------------------------------------------
    261          // address management
    262          //-----------------------------------------------------------------------------
    263          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    264          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    265          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    266          
    267          //-----------------------------------------------------------------------------
    268          // MASTER key data
    269          //-----------------------------------------------------------------------------
    270          ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key );
    271          ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key );
    272          
    273          //-----------------------------------------------------------------------------
    274          // entry data
    275          //-----------------------------------------------------------------------------
    276          void ZDSecMgrEntryInit(uint8 state);
    277          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    278          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    279          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    280          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    281          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    282          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    283          
    284          //-----------------------------------------------------------------------------
    285          // control data
    286          //-----------------------------------------------------------------------------
    287          void ZDSecMgrCtrlInit( void );
    288          void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl );
    289          void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl );
    290          void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
    291                                ZDSecMgrEntry_t*  entry,
    292                                ZDSecMgrCtrl_t*   ctrl );
    293          ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry );
    294          void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry );
    295          ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device,
    296                                       ZDSecMgrEntry_t*  entry );
    297          
    298          //-----------------------------------------------------------------------------
    299          // key support
    300          //-----------------------------------------------------------------------------
    301          ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key );
    302          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    303                                       uint8*  initExtAddr,
    304                                       uint16  partNwkAddr,
    305                                       uint8*  partExtAddr,
    306                                       uint8** key,
    307                                       uint8*  keyType );
    308          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    309          ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device );
    310          ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device );
    311          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    312          
    313          //-----------------------------------------------------------------------------
    314          // device entry
    315          //-----------------------------------------------------------------------------
    316          void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry );
    317          ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami );
    318          #if defined NV_RESTORE
    319          static void ZDSecMgrWriteNV(void);
    320          static void ZDSecMgrRestoreFromNV(void);
    321          #endif
    322          
    323          //-----------------------------------------------------------------------------
    324          // device control
    325          //-----------------------------------------------------------------------------
    326          void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device );
    327          void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device );
    328          void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state );
    329          
    330          //-----------------------------------------------------------------------------
    331          // device management
    332          //-----------------------------------------------------------------------------
    333          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    334          ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device );
    335          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    336          ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device );
    337          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    338          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    339          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    340          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    341          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    342          
    343          //-----------------------------------------------------------------------------
    344          // association management
    345          //-----------------------------------------------------------------------------
    346          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    347          
    348          //-----------------------------------------------------------------------------
    349          // authentication management
    350          //-----------------------------------------------------------------------------
    351          void ZDSecMgrAuthInitiate( uint8* responder );
    352          void ZDSecMgrAuthNwkKey( void );
    353          
    354          //-----------------------------------------------------------------------------
    355          // APSME function
    356          //-----------------------------------------------------------------------------
    357          void APSME_TCLinkKeyInit( void );
    358          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    359          
    360          /******************************************************************************
    361           * @fn          ZDSecMgrMasterKeyInit                     ]
    362           *
    363           * @brief       Initialize master key data.
    364           *
    365           * @param       none
    366           *
    367           * @return      none
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          void ZDSecMgrMasterKeyInit( void )
   \                     ZDSecMgrMasterKeyInit:
    370          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    371            uint16 index;
    372            uint16 size;
    373          
    374            // allocate MASTER key data
    375            size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
    376          
    377            ZDSecMgrMasterKeyData = osal_mem_alloc( size );
   \   000004                ; Setup parameters for call to function osal_mem_alloc
   \   000004   7A36         MOV     R2,#0x36
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??osal_mem_alloc?relay
   \   00000B   90....       MOV     DPTR,#ZDSecMgrMasterKeyData
   \   00000E   12....       LCALL   ?Subroutine13 & 0xFFFF
    378          
    379            // initialize MASTER key data
    380            if ( ZDSecMgrMasterKeyData != NULL )
   \                     ??CrossCallReturnLabel_15:
   \   000011   90....       MOV     DPTR,#ZDSecMgrMasterKeyData
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7002         JNZ     ??ZDSecMgrMasterKeyInit_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrMasterKeyInit_0:
   \   000019   601F         JZ      ??ZDSecMgrMasterKeyInit_1
    381            {
    382              for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
   \   00001B   7800         MOV     R0,#0x0
   \   00001D   7900         MOV     R1,#0x0
    383              {
    384                ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrMasterKeyInit_2:
   \   00001F   E8           MOV     A,R0
   \   000020   FA           MOV     R2,A
   \   000021   E9           MOV     A,R1
   \   000022   FB           MOV     R3,A
   \   000023   EA           MOV     A,R2
   \   000024   75F012       MOV     B,#0x12
   \   000027   A4           MUL     AB
   \   000028   FA           MOV     R2,A
   \   000029   ACF0         MOV     R4,B
   \   00002B   75F012       MOV     B,#0x12
   \   00002E   EB           MOV     A,R3
   \   00002F   A4           MUL     AB
   \   000030   2C           ADD     A,R4
   \   000031   FB           MOV     R3,A
   \   000032   90....       MOV     DPTR,#ZDSecMgrMasterKeyData
   \   000035   12....       LCALL   ?Subroutine1 & 0xFFFF
    385              }
    386            }
   \                     ??CrossCallReturnLabel_120:
   \   000038   40E5         JC      ??ZDSecMgrMasterKeyInit_2
    387          }
   \                     ??ZDSecMgrMasterKeyInit_1:
   \   00003A   02....       LJMP    ??Subroutine100_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   74FE         MOV     A,#-0x2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74FF         MOV     A,#-0x1
   \   000009                REQUIRE ??Subroutine85_0
   \   000009                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2A           ADD     A,R2
   \   000002   FC           MOV     R4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3B           ADDC    A,R3
   \   000006   8C82         MOV     DPL,R4
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   9403         SUBB    A,#0x3
   \   00000C   E9           MOV     A,R1
   \   00000D   9400         SUBB    A,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    388          //devtag.pro.security
    389          #if 0
    390          void ZDSecMgrMasterKeyInit( void )
    391          {
    392            uint16         index;
    393            uint16         size;
    394            AddrMgrEntry_t entry;
    395          
    396          
    397            // allocate MASTER key data
    398            size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
    399          
    400            ZDSecMgrMasterKeyData = osal_mem_alloc( size );
    401          
    402            // initialize MASTER key data
    403            if ( ZDSecMgrMasterKeyData != NULL )
    404            {
    405              for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
    406              {
    407                ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
    408              }
    409          
    410              // check if preconfigured keys are enabled
    411              //-------------------------------------------------------------------------
    412              #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
    413              //-------------------------------------------------------------------------
    414              if ( zgPreConfigKeys == TRUE )
    415              {
    416                // sync configured data
    417                entry.user = ADDRMGR_USER_SECURITY;
    418          
    419                for ( index = 0; index < ZDSECMGR_PRECONFIG_MAX; index++ )
    420                {
    421                  // check for Address Manager entry
    422                  AddrMgrExtAddrSet( entry.extAddr,
    423                                     (uint8*)ZDSecMgrPreConfigData[index].extAddr );
    424          
    425                  if ( AddrMgrEntryLookupExt( &entry ) != TRUE )
    426                  {
    427                    // update Address Manager
    428                    AddrMgrEntryUpdate( &entry );
    429                  }
    430          
    431                  if ( entry.index != INVALID_NODE_ADDR )
    432                  {
    433                    // sync MASTER keys with Address Manager index
    434                    ZDSecMgrMasterKeyData[index].ami = entry.index;
    435          
    436                    osal_memcpy( ZDSecMgrMasterKeyData[index].key,
    437                             (void*)ZDSecMgrPreConfigData[index].key, SEC_KEY_LEN );
    438                  }
    439                }
    440              }
    441              //-------------------------------------------------------------------------
    442              #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
    443              //-------------------------------------------------------------------------
    444            }
    445          }
    446          #endif
    447          
    448          /******************************************************************************
    449           * @fn          ZDSecMgrAddrStore
    450           *
    451           * @brief       Store device addresses.
    452           *
    453           * @param       nwkAddr - [in] NWK address
    454           * @param       extAddr - [in] EXT address
    455           * @param       ami     - [out] Address Manager index
    456           *
    457           * @return      ZStatus_t
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    460          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7416         MOV     A,#0x16
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine20 & 0xFFFF
    461            ZStatus_t      status;
    462            AddrMgrEntry_t entry;
    463          
    464          
    465            // add entry
    466            entry.user    = ADDRMGR_USER_SECURITY;
    467            entry.nwkAddr = nwkAddr;
   \                     ??CrossCallReturnLabel_29:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine13 & 0xFFFF
    468            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_16:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine53 & 0xFFFF
    469          
    470            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_87:
   \   000020   700A         JNZ     ??ZDSecMgrAddrStore_0
    471            {
    472              // return successful results
    473              *ami   = entry.index;
   \   000022   740B         MOV     A,#0xb
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ?Subroutine8 & 0xFFFF
    474              status = ZSuccess;
    475            }
   \                     ??CrossCallReturnLabel_125:
   \   00002A   8008         SJMP    ??CrossCallReturnLabel_24
    476            else
    477            {
    478              // return failed results
    479              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   00002C   740B         MOV     A,#0xb
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ?Subroutine15 & 0xFFFF
    480              status = ZNwkUnknownDevice;
    481            }
    482          
    483            return status;
   \                     ??CrossCallReturnLabel_24:
   \   000034   02....       LJMP    ?Subroutine82 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \   000006   E9           MOV     A,R1
   \   000007   6401         XRL     A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   E8           MOV     A,R0
   \   000004   FE           MOV     R6,A
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   7402         MOV     A,#0x2
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   7401         MOV     A,#0x1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000006   79C8         MOV     R1,#-0x38
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003                REQUIRE ??Subroutine86_0
   \   000003                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   7900         MOV     R1,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   740D         MOV     A,#0xd
   \   000002   02....       LJMP    ??Subroutine96_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??AddrMgrExtAddrSet?relay
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000007                REQUIRE ?Subroutine73
   \   000007                ; // Fall through to label ?Subroutine73

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine97_0
   \   000003                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    485          
    486          /******************************************************************************
    487           * @fn          ZDSecMgrExtAddrStore
    488           *
    489           * @brief       Store EXT address.
    490           *
    491           * @param       extAddr - [in] EXT address
    492           * @param       ami     - [out] Address Manager index
    493           *
    494           * @return      ZStatus_t
    495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    497          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7416         MOV     A,#0x16
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine20 & 0xFFFF
    498            ZStatus_t      status;
    499            AddrMgrEntry_t entry;
    500          
    501          
    502            // add entry
    503            entry.user    = ADDRMGR_USER_SECURITY;
    504            entry.nwkAddr = nwkAddr;
   \                     ??CrossCallReturnLabel_30:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine13 & 0xFFFF
    505            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_17:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine53 & 0xFFFF
    506          
    507            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_88:
   \   000020   700A         JNZ     ??ZDSecMgrExtAddrStore_0
    508            {
    509              // return successful results
    510              *ami   = entry.index;
   \   000022   740B         MOV     A,#0xb
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ?Subroutine8 & 0xFFFF
    511              status = ZSuccess;
    512            }
   \                     ??CrossCallReturnLabel_126:
   \   00002A   8008         SJMP    ??CrossCallReturnLabel_25
    513            else
    514            {
    515              // return failed results
    516              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   00002C   740B         MOV     A,#0xb
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ?Subroutine15 & 0xFFFF
    517              status = ZNwkUnknownDevice;
    518            }
    519          
    520            return status;
   \                     ??CrossCallReturnLabel_25:
   \   000034   80..         SJMP    ?Subroutine82
    521          }
    522          
    523          /******************************************************************************
    524           * @fn          ZDSecMgrExtAddrLookup
    525           *
    526           * @brief       Lookup index for specified EXT address.
    527           *
    528           * @param       extAddr - [in] EXT address
    529           * @param       ami     - [out] Address Manager index
    530           *
    531           * @return      ZStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    534          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    535            ZStatus_t      status;
    536            AddrMgrEntry_t entry;
    537          
    538          
    539            // lookup entry
    540            entry.user = ADDRMGR_USER_SECURITY;
   \   00000E   7402         MOV     A,#0x2
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   F0           MOVX    @DPTR,A
    541            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000017                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000017   EA           MOV     A,R2
   \   000018   FC           MOV     R4,A
   \   000019   EB           MOV     A,R3
   \   00001A   FD           MOV     R5,A
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine68 & 0xFFFF
    542          
    543            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_207:
   \   000023   12....       LCALL   ??AddrMgrEntryLookupExt?relay
   \   000026   E9           MOV     A,R1
   \   000027   6401         XRL     A,#0x1
   \   000029   700A         JNZ     ??ZDSecMgrExtAddrLookup_0
    544            {
    545              // return successful results
    546              *ami   = entry.index;
   \   00002B   740B         MOV     A,#0xb
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ?Subroutine8 & 0xFFFF
    547              status = ZSuccess;
    548            }
   \                     ??CrossCallReturnLabel_127:
   \   000033   8008         SJMP    ??CrossCallReturnLabel_26
    549            else
    550            {
    551              // return failed results
    552              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   000035   740B         MOV     A,#0xb
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine15 & 0xFFFF
    553              status = ZNwkUnknownDevice;
    554            }
    555          
    556            return status;
   \                     ??CrossCallReturnLabel_26:
   \   00003D                REQUIRE ?Subroutine82
   \   00003D                ; // Fall through to label ?Subroutine82
    557          }
    558          
    559          /******************************************************************************
    560           * @fn          ZDSecMgrMasterKeyLookup
    561           *
    562           * @brief       Lookup MASTER key for specified address index.
    563           *
    564           * @param       ami - [in] Address Manager index
    565           * @param       key - [out] valid MASTER key
    566           *
    567           * @return      ZStatus_t
    568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    569          ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key )
   \                     ZDSecMgrMasterKeyLookup:
    570          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    571            ZStatus_t status;
    572            uint16    index;
    573          
    574          
    575            // initialize results
    576            *key   = NULL;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
    577            status = ZNwkUnknownDevice;
   \   00000D   79C8         MOV     R1,#-0x38
    578          
    579            // verify data is available
    580            if ( ZDSecMgrMasterKeyData != NULL )
   \   00000F   90....       MOV     DPTR,#ZDSecMgrMasterKeyData
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7002         JNZ     ??ZDSecMgrMasterKeyLookup_0
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrMasterKeyLookup_0:
   \   000017   6042         JZ      ??ZDSecMgrMasterKeyLookup_1
    581            {
    582              for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
   \   000019   7E00         MOV     R6,#0x0
   \   00001B   7F00         MOV     R7,#0x0
    583              {
    584                if ( ZDSecMgrMasterKeyData[index].ami == ami )
   \                     ??ZDSecMgrMasterKeyLookup_2:
   \   00001D   8E..         MOV     ?V0 + 0,R6
   \   00001F   8F..         MOV     ?V0 + 1,R7
   \   000021   E5..         MOV     A,?V0 + 0
   \   000023   75F012       MOV     B,#0x12
   \   000026   A4           MUL     AB
   \   000027   F5..         MOV     ?V0 + 0,A
   \   000029   A8F0         MOV     R0,B
   \   00002B   75F012       MOV     B,#0x12
   \   00002E   E5..         MOV     A,?V0 + 1
   \   000030   A4           MUL     AB
   \   000031   28           ADD     A,R0
   \   000032   F5..         MOV     ?V0 + 1,A
   \   000034   90....       MOV     DPTR,#ZDSecMgrMasterKeyData
   \   000037   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00003A   7003         JNZ     ??ZDSecMgrMasterKeyLookup_3
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6B           XRL     A,R3
   \                     ??ZDSecMgrMasterKeyLookup_3:
   \   00003F   7015         JNZ     ??ZDSecMgrMasterKeyLookup_4
    585                {
    586                  // return successful results
    587                  *key   = ZDSecMgrMasterKeyData[index].key;
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   2402         ADD     A,#0x2
   \   000045   F8           MOV     R0,A
   \   000046   E5..         MOV     A,?V0 + 1
   \   000048   3400         ADDC    A,#0x0
   \   00004A   F9           MOV     R1,A
   \   00004B   8C82         MOV     DPL,R4
   \   00004D   8D83         MOV     DPH,R5
   \   00004F   12....       LCALL   ??Subroutine86_0 & 0xFFFF
    588                  status = ZSuccess;
    589          
    590                  // break from loop
    591                  index  = ZDSECMGR_MASTERKEY_MAX;
   \                     ??CrossCallReturnLabel_128:
   \   000052   7E03         MOV     R6,#0x3
   \   000054   7F00         MOV     R7,#0x0
    592                }
    593              }
   \                     ??ZDSecMgrMasterKeyLookup_4:
   \   000056   12....       LCALL   ?Subroutine46 & 0xFFFF
    594            }
   \                     ??CrossCallReturnLabel_75:
   \   000059   40C2         JC      ??ZDSecMgrMasterKeyLookup_2
    595          
    596            return status;
   \                     ??ZDSecMgrMasterKeyLookup_1:
   \   00005B   80..         SJMP    ??Subroutine87_0
    597          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   35..         ADDC    A,?V0 + 1
   \   000009   F5..         MOV     ?V0 + 1,A
   \   00000B   85..82       MOV     DPL,?V0 + 0
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6A           XRL     A,R2
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EE           MOV     A,R6
   \   000001   2401         ADD     A,#0x1
   \   000003   0E           INC     R6
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   C3           CLR     C
   \   000009   EE           MOV     A,R6
   \   00000A   9403         SUBB    A,#0x3
   \   00000C   EF           MOV     A,R7
   \   00000D   9400         SUBB    A,#0x0
   \   00000F   22           RET
    598          
    599          /******************************************************************************
    600           * @fn          ZDSecMgrMasterKeyStore
    601           *
    602           * @brief       Store MASTER key for specified address index.
    603           *
    604           * @param       ami - [in] Address Manager index
    605           * @param       key - [in] valid key to store
    606           *
    607           * @return      ZStatus_t
    608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    609          ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key )
   \                     ZDSecMgrMasterKeyStore:
    610          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    611            ZStatus_t status;
    612            uint16    index;
    613            uint8*    entry;
    614          
    615          
    616            // initialize results
    617            status = ZNwkUnknownDevice;
   \   00000D   79C8         MOV     R1,#-0x38
    618          
    619            // verify data is available
    620            if ( ZDSecMgrMasterKeyData != NULL )
   \   00000F   90....       MOV     DPTR,#ZDSecMgrMasterKeyData
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7002         JNZ     ??ZDSecMgrMasterKeyStore_0
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrMasterKeyStore_0:
   \   000017   606D         JZ      ??ZDSecMgrMasterKeyStore_1
    621            {
    622              for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7B00         MOV     R3,#0x0
    623              {
    624                if ( ZDSecMgrMasterKeyData[index].ami == INVALID_NODE_ADDR )
   \                     ??ZDSecMgrMasterKeyStore_2:
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   EC           MOV     A,R4
   \   000022   75F012       MOV     B,#0x12
   \   000025   A4           MUL     AB
   \   000026   FC           MOV     R4,A
   \   000027   A8F0         MOV     R0,B
   \   000029   75F012       MOV     B,#0x12
   \   00002C   ED           MOV     A,R5
   \   00002D   A4           MUL     AB
   \   00002E   28           ADD     A,R0
   \   00002F   FD           MOV     R5,A
   \   000030   90....       MOV     DPTR,#ZDSecMgrMasterKeyData
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2C           ADD     A,R4
   \   000035   FC           MOV     R4,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   3D           ADDC    A,R5
   \   000039   FD           MOV     R5,A
   \   00003A   8C82         MOV     DPL,R4
   \   00003C   8D83         MOV     DPH,R5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   64FE         XRL     A,#0xfe
   \   000041   7004         JNZ     ??ZDSecMgrMasterKeyStore_3
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrMasterKeyStore_3:
   \   000047   7038         JNZ     ??ZDSecMgrMasterKeyStore_4
    625                {
    626                  // store EXT address index
    627                  ZDSecMgrMasterKeyData[index].ami = ami;
   \   000049   12....       LCALL   ?Subroutine10 & 0xFFFF
    628          
    629                  entry = ZDSecMgrMasterKeyData[index].key;
   \                     ??CrossCallReturnLabel_230:
   \   00004C   EC           MOV     A,R4
   \   00004D   2402         ADD     A,#0x2
   \   00004F   FA           MOV     R2,A
   \   000050   ED           MOV     A,R5
   \   000051   3400         ADDC    A,#0x0
   \   000053   FB           MOV     R3,A
    630          
    631                  if ( key != NULL )
   \   000054   EE           MOV     A,R6
   \   000055   7001         JNZ     ??ZDSecMgrMasterKeyStore_5
   \   000057   EF           MOV     A,R7
   \                     ??ZDSecMgrMasterKeyStore_5:
   \   000058   6018         JZ      ??ZDSecMgrMasterKeyStore_6
    632                  {
    633                    osal_memcpy( entry, key,  SEC_KEY_LEN );
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   8E..         MOV     ?V0 + 4,R6
   \   00005C   8F..         MOV     ?V0 + 5,R7
   \   00005E   75..00       MOV     ?V0 + 6,#0x0
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000066   7C10         MOV     R4,#0x10
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   12....       LCALL   ?Subroutine70 & 0xFFFF
    634                  }
   \                     ??CrossCallReturnLabel_238:
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   8009         SJMP    ??ZDSecMgrMasterKeyStore_7
    635                  else
    636                  {
    637                    osal_memset( entry, 0, SEC_KEY_LEN );
   \                     ??ZDSecMgrMasterKeyStore_6:
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C10         MOV     R4,#0x10
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7900         MOV     R1,#0x0
   \   000078   12....       LCALL   ??osal_memset?relay
    638                  }
    639          
    640                  // return successful results
    641                  status = ZSuccess;
   \                     ??ZDSecMgrMasterKeyStore_7:
   \   00007B   7900         MOV     R1,#0x0
    642          
    643                  // break from loop
    644                  index  = ZDSECMGR_MASTERKEY_MAX;
   \   00007D   7A03         MOV     R2,#0x3
   \   00007F   7B00         MOV     R3,#0x0
    645                }
    646              }
   \                     ??ZDSecMgrMasterKeyStore_4:
   \   000081   12....       LCALL   ?Subroutine48 & 0xFFFF
    647            }
   \                     ??CrossCallReturnLabel_81:
   \   000084   4097         JC      ??ZDSecMgrMasterKeyStore_2
    648          
    649            return status;
   \                     ??ZDSecMgrMasterKeyStore_1:
   \   000086   7F07         MOV     R7,#0x7
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA
    650          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   C3           CLR     C
   \   000009   EA           MOV     A,R2
   \   00000A   9403         SUBB    A,#0x3
   \   00000C   EB           MOV     A,R3
   \   00000D   9400         SUBB    A,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine110_0
   \   000004                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    651          
    652          /******************************************************************************
    653           * @fn          ZDSecMgrEntryInit
    654           *
    655           * @brief       Initialize entry sub module
    656           *
    657           * @param       state - device initialization state
    658           *
    659           * @return      none
    660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    661          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    662          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    663            if (ZDSecMgrEntries == NULL)
   \   000004   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??ZDSecMgrEntryInit_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrEntryInit_0:
   \   00000C   7036         JNZ     ??ZDSecMgrEntryInit_1
    664            {
    665              uint16 index;
    666          
    667              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E   7A57         MOV     R2,#0x57
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??osal_mem_alloc?relay
   \   000015   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000018   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00001B   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7002         JNZ     ??ZDSecMgrEntryInit_2
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrEntryInit_2:
   \   000023   601F         JZ      ??ZDSecMgrEntryInit_1
    668              {
    669                return;
    670              }
    671          
    672              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000025   7800         MOV     R0,#0x0
   \   000027   7900         MOV     R1,#0x0
    673              {
    674                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryInit_3:
   \   000029   E8           MOV     A,R0
   \   00002A   FA           MOV     R2,A
   \   00002B   E9           MOV     A,R1
   \   00002C   FB           MOV     R3,A
   \   00002D   EA           MOV     A,R2
   \   00002E   75F01D       MOV     B,#0x1d
   \   000031   A4           MUL     AB
   \   000032   FA           MOV     R2,A
   \   000033   ACF0         MOV     R4,B
   \   000035   75F01D       MOV     B,#0x1d
   \   000038   EB           MOV     A,R3
   \   000039   A4           MUL     AB
   \   00003A   2C           ADD     A,R4
   \   00003B   FB           MOV     R3,A
   \   00003C   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00003F   12....       LCALL   ?Subroutine1 & 0xFFFF
    675              }
    676            }
   \                     ??CrossCallReturnLabel_121:
   \   000042   40E5         JC      ??ZDSecMgrEntryInit_3
   \                     ??ZDSecMgrEntryInit_1:
   \   000044   02....       LJMP    ??Subroutine100_0 & 0xFFFF
    677          
    678          #if defined NV_RESTORE
    679            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
    680            {
    681              ZDSecMgrRestoreFromNV();
    682            }
    683          #else
    684            (void)state;
    685          #endif
    686          }
    687          
    688          /******************************************************************************
    689           * @fn          ZDSecMgrEntryLookup
    690           *
    691           * @brief       Lookup entry index using specified NWK address.
    692           *
    693           * @param       nwkAddr - [in] NWK address
    694           * @param       entry   - [out] valid entry
    695           *
    696           * @return      ZStatus_t
    697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    698          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    699          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    700            ZStatus_t      status;
    701            uint16         index;
    702            AddrMgrEntry_t addrMgrEntry;
    703          
    704          
    705            // initialize results
    706            *entry = NULL;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    707            status = ZNwkUnknownDevice;
   \   000016   75..C8       MOV     ?V0 + 0,#-0x38
    708          
    709            // verify data is available
    710            if ( ZDSecMgrEntries != NULL )
   \   000019   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   7002         JNZ     ??ZDSecMgrEntryLookup_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrEntryLookup_0:
   \   000021   6066         JZ      ??ZDSecMgrEntryLookup_1
    711            {
    712              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   000023   7402         MOV     A,#0x2
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   F0           MOVX    @DPTR,A
    713              addrMgrEntry.nwkAddr = nwkAddr;
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ?Subroutine5 & 0xFFFF
    714          
    715              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \                     ??CrossCallReturnLabel_192:
   \   000034   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000037   E9           MOV     A,R1
   \   000038   6401         XRL     A,#0x1
   \   00003A   704D         JNZ     ??ZDSecMgrEntryLookup_1
    716              {
    717                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00003C   7800         MOV     R0,#0x0
   \   00003E   7900         MOV     R1,#0x0
    718                {
    719                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \                     ??ZDSecMgrEntryLookup_2:
   \   000040   E8           MOV     A,R0
   \   000041   FA           MOV     R2,A
   \   000042   E9           MOV     A,R1
   \   000043   FB           MOV     R3,A
   \   000044   EA           MOV     A,R2
   \   000045   75F01D       MOV     B,#0x1d
   \   000048   A4           MUL     AB
   \   000049   FA           MOV     R2,A
   \   00004A   ACF0         MOV     R4,B
   \   00004C   75F01D       MOV     B,#0x1d
   \   00004F   EB           MOV     A,R3
   \   000050   A4           MUL     AB
   \   000051   2C           ADD     A,R4
   \   000052   FB           MOV     R3,A
   \   000053   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000056   E0           MOVX    A,@DPTR
   \   000057   2A           ADD     A,R2
   \   000058   FA           MOV     R2,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   3B           ADDC    A,R3
   \   00005C   FB           MOV     R3,A
   \   00005D   740B         MOV     A,#0xb
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6C           XRL     A,R4
   \   00006B   7003         JNZ     ??ZDSecMgrEntryLookup_3
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6D           XRL     A,R5
   \                     ??ZDSecMgrEntryLookup_3:
   \   000070   7012         JNZ     ??ZDSecMgrEntryLookup_4
    720                  {
    721                    // return successful results
    722                    *entry = &ZDSecMgrEntries[index];
   \   000072   EA           MOV     A,R2
   \   000073   F8           MOV     R0,A
   \   000074   EB           MOV     A,R3
   \   000075   F9           MOV     R1,A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    723                    status = ZSuccess;
   \                     ??CrossCallReturnLabel_163:
   \   00007D   75..00       MOV     ?V0 + 0,#0x0
    724          
    725                    // break from loop
    726                    index = ZDSECMGR_ENTRY_MAX;
   \   000080   7803         MOV     R0,#0x3
   \   000082   7900         MOV     R1,#0x0
    727                  }
    728                }
   \                     ??ZDSecMgrEntryLookup_4:
   \   000084   12....       LCALL   ?Subroutine49 & 0xFFFF
    729              }
    730            }
   \                     ??CrossCallReturnLabel_83:
   \   000087   40B7         JC      ??ZDSecMgrEntryLookup_2
    731          
    732            return status;
   \                     ??ZDSecMgrEntryLookup_1:
   \   000089   A9..         MOV     R1,?V0 + 0
   \   00008B   02....       LJMP    ?Subroutine78 & 0xFFFF
    733          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   740D         MOV     A,#0xd
   \   000002                REQUIRE ??Subroutine92_0
   \   000002                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine93_0
   \   000003                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine107_0
   \   000004                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001                ; Setup parameters for call to function APSME_EstablishKeyReq
   \   000001                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000001                ; Setup parameters for call to function NLME_LeaveReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for call to function APSME_AuthenticateReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   000001                ; Setup parameters for call to function APSME_EstablishKeyRsp
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000001                ; Setup parameters for call to function APSME_SwitchKeyReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000001                ; Setup parameters for call to function APSME_AuthenticateReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000001                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000001                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000001   02....       LJMP    ?Subroutine73 & 0xFFFF
    734          
    735          /******************************************************************************
    736           * @fn          ZDSecMgrEntryLookupAMI
    737           *
    738           * @brief       Lookup entry using specified address index
    739           *
    740           * @param       ami   - [in] Address Manager index
    741           * @param       entry - [out] valid entry
    742           *
    743           * @return      ZStatus_t
    744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    746          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    747            ZStatus_t status;
    748            uint16    index;
    749          
    750          
    751            // initialize results
    752            *entry = NULL;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine16 & 0xFFFF
    753            status = ZNwkUnknownDevice;
    754          
    755            // verify data is available
    756            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_27:
   \   00000C   7002         JNZ     ??ZDSecMgrEntryLookupAMI_0
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   000010   6036         JZ      ??ZDSecMgrEntryLookupAMI_1
    757            {
    758              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000012   7E00         MOV     R6,#0x0
   \   000014   7F00         MOV     R7,#0x0
    759              {
    760                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000016   8E..         MOV     ?V0 + 0,R6
   \   000018   8F..         MOV     ?V0 + 1,R7
   \   00001A   E5..         MOV     A,?V0 + 0
   \   00001C   75F01D       MOV     B,#0x1d
   \   00001F   A4           MUL     AB
   \   000020   F5..         MOV     ?V0 + 0,A
   \   000022   A8F0         MOV     R0,B
   \   000024   75F01D       MOV     B,#0x1d
   \   000027   E5..         MOV     A,?V0 + 1
   \   000029   A4           MUL     AB
   \   00002A   28           ADD     A,R0
   \   00002B   F5..         MOV     ?V0 + 1,A
   \   00002D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000030   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000033   7003         JNZ     ??ZDSecMgrEntryLookupAMI_3
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000038   7009         JNZ     ??ZDSecMgrEntryLookupAMI_4
    761                {
    762                  // return successful results
    763                  *entry = &ZDSecMgrEntries[index];
   \   00003A   12....       LCALL   ?Subroutine10 & 0xFFFF
    764                  status = ZSuccess;
   \                     ??CrossCallReturnLabel_231:
   \   00003D   7900         MOV     R1,#0x0
    765          
    766                  // break from loop
    767                  index = ZDSECMGR_ENTRY_MAX;
   \   00003F   7E03         MOV     R6,#0x3
   \   000041   7F00         MOV     R7,#0x0
    768                }
    769              }
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   000043   12....       LCALL   ?Subroutine46 & 0xFFFF
    770            }
   \                     ??CrossCallReturnLabel_76:
   \   000046   40CE         JC      ??ZDSecMgrEntryLookupAMI_2
    771          
    772            return status;
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000048   02....       LJMP    ??Subroutine87_0 & 0xFFFF
    773          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004   79C8         MOV     R1,#-0x38
   \   000006   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
    774          
    775          /******************************************************************************
    776           * @fn          ZDSecMgrEntryLookupExt
    777           *
    778           * @brief       Lookup entry index using specified EXT address.
    779           *
    780           * @param       extAddr - [in] EXT address
    781           * @param       entry   - [out] valid entry
    782           *
    783           * @return      ZStatus_t
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    786          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    787            ZStatus_t status;
    788            uint16    ami;
    789          
    790          
    791            // initialize results
    792            *entry = NULL;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    793            status = ZNwkUnknownDevice;
   \   000016   75..C8       MOV     ?V0 + 0,#-0x38
    794          
    795            // lookup address index
    796            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000019                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   12....       LCALL   ??ZDSecMgrExtAddrLookup?relay
   \   000026   E9           MOV     A,R1
   \   000027   7010         JNZ     ??ZDSecMgrEntryLookupExt_0
    797            {
    798              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   000029                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000029   EE           MOV     A,R6
   \   00002A   FC           MOV     R4,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FD           MOV     R5,A
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   12....       LCALL   ?Subroutine37 & 0xFFFF
    799            }
   \                     ??CrossCallReturnLabel_60:
   \   000036   E9           MOV     A,R1
   \   000037   F5..         MOV     ?V0 + 0,A
    800          
    801            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000039   02....       LJMP    ?Subroutine76 & 0xFFFF
    802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   A9..         MOV     R1,?V0 + 0
   \   000002                REQUIRE ??Subroutine95_0
   \   000002                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine96_0
   \   000002                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   12....       LCALL   ??ZDSecMgrEntryLookupAMI?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    803          
    804          /******************************************************************************
    805           * @fn          ZDSecMgrEntryFree
    806           *
    807           * @brief       Free entry.
    808           *
    809           * @param       entry - [in] valid entry
    810           *
    811           * @return      ZStatus_t
    812           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    813          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    814          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    815            entry->ami = INVALID_NODE_ADDR;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   74FE         MOV     A,#-0x2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   74FF         MOV     A,#-0x1
   \   00000E   F0           MOVX    @DPTR,A
    816          }
   \   00000F   02....       LJMP    ??Subroutine100_0 & 0xFFFF
    817          
    818          /******************************************************************************
    819           * @fn          ZDSecMgrEntryNew
    820           *
    821           * @brief       Get a new entry.
    822           *
    823           * @param       entry - [out] valid entry
    824           *
    825           * @return      ZStatus_t
    826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    827          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    828          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    829            ZStatus_t status;
    830            uint16    index;
    831          
    832          
    833            // initialize results
    834            *entry = NULL;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ?Subroutine16 & 0xFFFF
    835            status = ZNwkUnknownDevice;
    836          
    837            // verify data is available
    838            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_28:
   \   00000C   7002         JNZ     ??ZDSecMgrEntryNew_0
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrEntryNew_0:
   \   000010   6059         JZ      ??ZDSecMgrEntryNew_1
    839            {
    840              // find available entry
    841              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000012   7E00         MOV     R6,#0x0
   \   000014   7F00         MOV     R7,#0x0
    842              {
    843                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \                     ??ZDSecMgrEntryNew_2:
   \   000016   EE           MOV     A,R6
   \   000017   FC           MOV     R4,A
   \   000018   EF           MOV     A,R7
   \   000019   FD           MOV     R5,A
   \   00001A   EC           MOV     A,R4
   \   00001B   75F01D       MOV     B,#0x1d
   \   00001E   A4           MUL     AB
   \   00001F   FC           MOV     R4,A
   \   000020   A8F0         MOV     R0,B
   \   000022   75F01D       MOV     B,#0x1d
   \   000025   ED           MOV     A,R5
   \   000026   A4           MUL     AB
   \   000027   28           ADD     A,R0
   \   000028   FD           MOV     R5,A
   \   000029   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   2C           ADD     A,R4
   \   00002E   F5..         MOV     ?V0 + 0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   3D           ADDC    A,R5
   \   000033   F5..         MOV     ?V0 + 1,A
   \   000035   85..82       MOV     DPL,?V0 + 0
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   64FE         XRL     A,#0xfe
   \   00003D   7004         JNZ     ??ZDSecMgrEntryNew_3
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrEntryNew_3:
   \   000043   7021         JNZ     ??ZDSecMgrEntryNew_4
    844                {
    845                  // return successful result
    846                  *entry = &ZDSecMgrEntries[index];
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   12....       LCALL   ??Subroutine110_0 & 0xFFFF
    847                  status = ZSuccess;
   \                     ??CrossCallReturnLabel_227:
   \   00004C   7900         MOV     R1,#0x0
    848          
    849                  // Set the authentication option to default
    850                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   00004E   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000051   E0           MOVX    A,@DPTR
   \   000052   2C           ADD     A,R4
   \   000053   FC           MOV     R4,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   3D           ADDC    A,R5
   \   000057   FD           MOV     R5,A
   \   000058   741C         MOV     A,#0x1c
   \   00005A   2C           ADD     A,R4
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3D           ADDC    A,R5
   \   00005F   F583         MOV     DPH,A
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
    851          
    852                  // break from loop
    853                  index = ZDSECMGR_ENTRY_MAX;
   \   000063   7E03         MOV     R6,#0x3
   \   000065   FF           MOV     R7,A
    854                }
    855              }
   \                     ??ZDSecMgrEntryNew_4:
   \   000066   12....       LCALL   ?Subroutine46 & 0xFFFF
    856            }
   \                     ??CrossCallReturnLabel_77:
   \   000069   40AB         JC      ??ZDSecMgrEntryNew_2
    857          
    858            return status;
   \                     ??ZDSecMgrEntryNew_1:
   \   00006B   02....       LJMP    ??Subroutine87_0 & 0xFFFF
    859          }
    860          
    861          /******************************************************************************
    862           * @fn          ZDSecMgrCtrlInit
    863           *
    864           * @brief       Initialize control sub module
    865           *
    866           * @param       none
    867           *
    868           * @return      none
    869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    870          void ZDSecMgrCtrlInit( void )
   \                     ZDSecMgrCtrlInit:
    871          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    872            uint16 size;
    873            uint16 index;
    874          
    875            // allocate entry data
    876            size = (short)( sizeof(ZDSecMgrCtrl_t) * ZDSECMGR_CTRL_MAX );
    877          
    878            ZDSecMgrCtrlData = osal_mem_alloc( size );
   \   000004                ; Setup parameters for call to function osal_mem_alloc
   \   000004   7A15         MOV     R2,#0x15
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??osal_mem_alloc?relay
   \   00000B   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   00000E   12....       LCALL   ?Subroutine13 & 0xFFFF
    879          
    880            // initialize data
    881            if ( ZDSecMgrCtrlData != NULL )
   \                     ??CrossCallReturnLabel_19:
   \   000011   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7002         JNZ     ??ZDSecMgrCtrlInit_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrCtrlInit_0:
   \   000019   6028         JZ      ??ZDSecMgrCtrlInit_1
    882            {
    883              for( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
   \   00001B   7800         MOV     R0,#0x0
   \   00001D   7900         MOV     R1,#0x0
    884              {
    885                ZDSecMgrCtrlData[index].state = ZDSECMGR_CTRL_NONE;
   \                     ??ZDSecMgrCtrlInit_2:
   \   00001F   E8           MOV     A,R0
   \   000020   FA           MOV     R2,A
   \   000021   E9           MOV     A,R1
   \   000022   FB           MOV     R3,A
   \   000023   EA           MOV     A,R2
   \   000024   75F007       MOV     B,#0x7
   \   000027   A4           MUL     AB
   \   000028   FA           MOV     R2,A
   \   000029   ACF0         MOV     R4,B
   \   00002B   75F007       MOV     B,#0x7
   \   00002E   EB           MOV     A,R3
   \   00002F   A4           MUL     AB
   \   000030   2C           ADD     A,R4
   \   000031   FB           MOV     R3,A
   \   000032   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000035   12....       LCALL   ?Subroutine57 & 0xFFFF
    886              }
    887            }
   \                     ??CrossCallReturnLabel_94:
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   12....       LCALL   ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000041   40DC         JC      ??ZDSecMgrCtrlInit_2
    888          }
   \                     ??ZDSecMgrCtrlInit_1:
   \   000043   02....       LJMP    ??Subroutine100_0 & 0xFFFF
    889          
    890          /******************************************************************************
    891           * @fn          ZDSecMgrCtrlRelease
    892           *
    893           * @brief       Release control data.
    894           *
    895           * @param       ctrl - [in] valid control data
    896           *
    897           * @return      none
    898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    899          void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl )
   \                     ZDSecMgrCtrlRelease:
    900          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    901            // should always be enough entry control data
    902            ctrl->state = ZDSECMGR_CTRL_NONE;
   \   000004   E4           CLR     A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   F0           MOVX    @DPTR,A
    903          }
   \   00000F   02....       LJMP    ??Subroutine100_0 & 0xFFFF
    904          
    905          /******************************************************************************
    906           * @fn          ZDSecMgrCtrlLookup
    907           *
    908           * @brief       Lookup control data.
    909           *
    910           * @param       entry - [in] valid entry data
    911           * @param       ctrl  - [out] control data - NULL if not found
    912           *
    913           * @return      none
    914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    915          void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl )
   \                     ZDSecMgrCtrlLookup:
    916          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    917            uint16 index;
    918          
    919          
    920            // initialize search results
    921            *ctrl = NULL;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    922          
    923            // verify data is available
    924            if ( ZDSecMgrCtrlData != NULL )
   \   000011   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7002         JNZ     ??ZDSecMgrCtrlLookup_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrCtrlLookup_0:
   \   000019   6058         JZ      ??ZDSecMgrCtrlLookup_1
    925            {
    926              for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
   \   00001B   7800         MOV     R0,#0x0
   \   00001D   7900         MOV     R1,#0x0
    927              {
    928                // make sure control data is in use
    929                if ( ZDSecMgrCtrlData[index].state != ZDSECMGR_CTRL_NONE )
   \                     ??ZDSecMgrCtrlLookup_2:
   \   00001F   E8           MOV     A,R0
   \   000020   FA           MOV     R2,A
   \   000021   E9           MOV     A,R1
   \   000022   FB           MOV     R3,A
   \   000023   EA           MOV     A,R2
   \   000024   75F007       MOV     B,#0x7
   \   000027   A4           MUL     AB
   \   000028   FA           MOV     R2,A
   \   000029   85F0..       MOV     ?V0 + 0,B
   \   00002C   75F007       MOV     B,#0x7
   \   00002F   EB           MOV     A,R3
   \   000030   A4           MUL     AB
   \   000031   25..         ADD     A,?V0 + 0
   \   000033   FB           MOV     R3,A
   \   000034   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000037   E0           MOVX    A,@DPTR
   \   000038   2A           ADD     A,R2
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   3B           ADDC    A,R3
   \   00003D   FB           MOV     R3,A
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6024         JZ      ??ZDSecMgrCtrlLookup_3
    930                {
    931                  // check for entry match
    932                  if ( ZDSecMgrCtrlData[index].entry == entry )
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0 + 0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0 + 1,A
   \   000055   EE           MOV     A,R6
   \   000056   65..         XRL     A,?V0 + 0
   \   000058   7003         JNZ     ??ZDSecMgrCtrlLookup_4
   \   00005A   EF           MOV     A,R7
   \   00005B   65..         XRL     A,?V0 + 1
   \                     ??ZDSecMgrCtrlLookup_4:
   \   00005D   700F         JNZ     ??ZDSecMgrCtrlLookup_3
    933                  {
    934                    // return this control data
    935                    *ctrl = &ZDSecMgrCtrlData[index];
   \   00005F   EA           MOV     A,R2
   \   000060   F8           MOV     R0,A
   \   000061   EB           MOV     A,R3
   \   000062   F9           MOV     R1,A
   \   000063   8C82         MOV     DPL,R4
   \   000065   8D83         MOV     DPH,R5
   \   000067   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    936          
    937                    // break from loop
    938                    index = ZDSECMGR_CTRL_MAX;
   \                     ??CrossCallReturnLabel_164:
   \   00006A   7803         MOV     R0,#0x3
   \   00006C   7900         MOV     R1,#0x0
    939                  }
    940                }
    941              }
   \                     ??ZDSecMgrCtrlLookup_3:
   \   00006E   12....       LCALL   ?Subroutine49 & 0xFFFF
    942            }
   \                     ??CrossCallReturnLabel_84:
   \   000071   40AC         JC      ??ZDSecMgrCtrlLookup_2
    943          }
   \                     ??ZDSecMgrCtrlLookup_1:
   \   000073   02....       LJMP    ??Subroutine93_0 & 0xFFFF
    944          
    945          /******************************************************************************
    946           * @fn          ZDSecMgrCtrlSet
    947           *
    948           * @brief       Set control data.
    949           *
    950           * @param       device - [in] valid device data
    951           * @param       entry  - [in] valid entry data
    952           * @param       ctrl   - [in] valid control data
    953           *
    954           * @return      none
    955           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    956          void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
   \                     ZDSecMgrCtrlSet:
    957                                ZDSecMgrEntry_t*  entry,
    958                                ZDSecMgrCtrl_t*   ctrl )
    959          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV     A,#0x9
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    960            // set control date
    961            ctrl->parentAddr = device->parentAddr;
   \                     ??CrossCallReturnLabel_154:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FF           MOV     R7,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   EE           MOV     A,R6
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EF           MOV     A,R7
   \   000024   12....       LCALL   ?Subroutine11 & 0xFFFF
    962            ctrl->secure     = device->secure;
   \                     ??CrossCallReturnLabel_115:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   F0           MOVX    @DPTR,A
    963            ctrl->entry      = entry;
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   EC           MOV     A,R4
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   ED           MOV     A,R5
   \   000039   F0           MOVX    @DPTR,A
    964            ctrl->state      = ZDSECMGR_CTRL_INIT;
   \   00003A   7401         MOV     A,#0x1
   \   00003C   8882         MOV     DPL,R0
   \   00003E   8983         MOV     DPH,R1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    965            ctrl->cntr       = 0;
   \   000046   E4           CLR     A
   \   000047   8882         MOV     DPL,R0
   \   000049   8983         MOV     DPH,R1
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   12....       LCALL   ?Subroutine11 & 0xFFFF
    966          
    967            // set device pointer
    968            device->ctrl = ctrl;
   \                     ??CrossCallReturnLabel_116:
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    969          }
   \                     ??CrossCallReturnLabel_165:
   \   000059   02....       LJMP    ??Subroutine97_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ?Subroutine75
   \   000006                ; // Fall through to label ?Subroutine75

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   22           RET
    970          
    971          /******************************************************************************
    972           * @fn          ZDSecMgrCtrlAdd
    973           *
    974           * @brief       Add control data.
    975           *
    976           * @param       device - [in] valid device data
    977           * @param       entry  - [in] valid entry data
    978           *
    979           * @return      ZStatus_t
    980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    981          ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry )
   \                     ZDSecMgrCtrlAdd:
    982          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    983            ZStatus_t status;
    984            uint16    index;
    985          
    986          
    987            // initialize results
    988            status = ZNwkUnknownDevice;
   \   00000D   79C8         MOV     R1,#-0x38
    989          
    990            // verify data is available
    991            if ( ZDSecMgrCtrlData != NULL )
   \   00000F   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7002         JNZ     ??ZDSecMgrCtrlAdd_0
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrCtrlAdd_0:
   \   000017   6050         JZ      ??ZDSecMgrCtrlAdd_1
    992            {
    993              // look for an empty slot
    994              for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7B00         MOV     R3,#0x0
    995              {
    996                if ( ZDSecMgrCtrlData[index].state == ZDSECMGR_CTRL_NONE )
   \                     ??ZDSecMgrCtrlAdd_2:
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   EC           MOV     A,R4
   \   000022   75F007       MOV     B,#0x7
   \   000025   A4           MUL     AB
   \   000026   FC           MOV     R4,A
   \   000027   A8F0         MOV     R0,B
   \   000029   75F007       MOV     B,#0x7
   \   00002C   ED           MOV     A,R5
   \   00002D   A4           MUL     AB
   \   00002E   28           ADD     A,R0
   \   00002F   FD           MOV     R5,A
   \   000030   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2C           ADD     A,R4
   \   000035   F5..         MOV     ?V0 + 2,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   3D           ADDC    A,R5
   \   00003A   F5..         MOV     ?V0 + 3,A
   \   00003C   85..82       MOV     DPL,?V0 + 2
   \   00003F   F583         MOV     DPH,A
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   701B         JNZ     ??ZDSecMgrCtrlAdd_3
    997                {
    998                  // return successful results
    999                  ZDSecMgrCtrlSet( device, entry, &ZDSecMgrCtrlData[index] );
   \   000049                ; Setup parameters for call to function ZDSecMgrCtrlSet
   \   000049   78..         MOV     R0,#?V0 + 2
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   AC..         MOV     R4,?V0 + 0
   \   000050   AD..         MOV     R5,?V0 + 1
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   FB           MOV     R3,A
   \   000056   12....       LCALL   ??ZDSecMgrCtrlSet?relay
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   1000          
   1001                  status = ZSuccess;
   \   00005E   7900         MOV     R1,#0x0
   1002          
   1003                  // break from loop
   1004                  index = ZDSECMGR_CTRL_MAX;
   \   000060   7A03         MOV     R2,#0x3
   \   000062   7B00         MOV     R3,#0x0
   1005                }
   1006              }
   \                     ??ZDSecMgrCtrlAdd_3:
   \   000064   12....       LCALL   ?Subroutine48 & 0xFFFF
   1007            }
   \                     ??CrossCallReturnLabel_82:
   \   000067   40B4         JC      ??ZDSecMgrCtrlAdd_2
   1008          
   1009            return status;
   \                     ??ZDSecMgrCtrlAdd_1:
   \   000069   02....       LJMP    ??Subroutine102_0 & 0xFFFF
   1010          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1011          
   1012          /******************************************************************************
   1013           * @fn          ZDSecMgrCtrlTerm
   1014           *
   1015           * @brief       Terminate device control.
   1016           *
   1017           * @param       entry - [in] valid entry data
   1018           *
   1019           * @return      none
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrCtrlTerm:
   1022          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1023            ZDSecMgrCtrl_t* ctrl;
   1024          
   1025            // remove device from control data
   1026            ZDSecMgrCtrlLookup ( entry, &ctrl );
   \   000009                ; Setup parameters for call to function ZDSecMgrCtrlLookup
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   12....       LCALL   ?Subroutine54 & 0xFFFF
   1027          
   1028            if ( ctrl != NULL )
   \                     ??CrossCallReturnLabel_89:
   \   000016   7002         JNZ     ??ZDSecMgrCtrlTerm_0
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrCtrlTerm_0:
   \   00001A   6009         JZ      ??CrossCallReturnLabel_40
   1029            {
   1030              ZDSecMgrCtrlRelease ( ctrl );
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   12....       LCALL   ?Subroutine26 & 0xFFFF
   1031            }
   1032          }
   \                     ??CrossCallReturnLabel_40:
   \   000025   7402         MOV     A,#0x2
   \   000027   80..         SJMP    ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine100_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ??ZDSecMgrCtrlLookup?relay
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   1033          
   1034          /******************************************************************************
   1035           * @fn          ZDSecMgrCtrlReset
   1036           *
   1037           * @brief       Reset control data.
   1038           *
   1039           * @param       device - [in] valid device data
   1040           * @param       entry  - [in] valid entry data
   1041           *
   1042           * @return      ZStatus_t
   1043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1044          ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrCtrlReset:
   1045          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1046            ZStatus_t       status;
   1047            ZDSecMgrCtrl_t* ctrl;
   1048          
   1049          
   1050            // initialize results
   1051            status = ZNwkUnknownDevice;
   1052          
   1053            // look for a match for the entry
   1054            ZDSecMgrCtrlLookup( entry, &ctrl );
   \   000012                ; Setup parameters for call to function ZDSecMgrCtrlLookup
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
   \   00001C   EE           MOV     A,R6
   \   00001D   FA           MOV     R2,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   ?Subroutine54 & 0xFFFF
   1055          
   1056            if ( ctrl != NULL )
   \                     ??CrossCallReturnLabel_90:
   \   000023   7002         JNZ     ??ZDSecMgrCtrlReset_0
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrCtrlReset_0:
   \   000027   601D         JZ      ??ZDSecMgrCtrlReset_1
   1057            {
   1058              ZDSecMgrCtrlSet( device, entry, ctrl );
   \   000029                ; Setup parameters for call to function ZDSecMgrCtrlSet
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000032   EE           MOV     A,R6
   \   000033   FC           MOV     R4,A
   \   000034   EF           MOV     A,R7
   \   000035   FD           MOV     R5,A
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??ZDSecMgrCtrlSet?relay
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   1059          
   1060              status = ZSuccess;
   \   000042   7900         MOV     R1,#0x0
   \   000044   800B         SJMP    ??ZDSecMgrCtrlReset_2
   1061            }
   1062            else
   1063            {
   1064              status = ZDSecMgrCtrlAdd( device, entry );
   \                     ??ZDSecMgrCtrlReset_1:
   \   000046                ; Setup parameters for call to function ZDSecMgrCtrlAdd
   \   000046   EE           MOV     A,R6
   \   000047   FC           MOV     R4,A
   \   000048   EF           MOV     A,R7
   \   000049   FD           MOV     R5,A
   \   00004A   AA..         MOV     R2,?V0 + 0
   \   00004C   AB..         MOV     R3,?V0 + 1
   \   00004E   12....       LCALL   ??ZDSecMgrCtrlAdd?relay
   1065            }
   1066          
   1067            return status;
   \                     ??ZDSecMgrCtrlReset_2:
   \   000051                REQUIRE ?Subroutine84
   \   000051                ; // Fall through to label ?Subroutine84
   1068          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine92_0 & 0xFFFF
   1069          
   1070          /******************************************************************************
   1071           * @fn          ZDSecMgrMasterKeyLoad
   1072           *
   1073           * @brief       Load the MASTER key for device with specified EXT
   1074           *              address.
   1075           *
   1076           * @param       extAddr - [in] EXT address of device
   1077           * @param       key     - [in] MASTER key shared with device
   1078           *
   1079           * @return      ZStatus_t
   1080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1081          ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key )
   \                     ZDSecMgrMasterKeyLoad:
   1082          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   1083            ZStatus_t status;
   1084            uint8*    loaded;
   1085            uint16    ami;
   1086          
   1087          
   1088            // set status based on policy
   1089            status = ZDSecMgrExtAddrLookup( extAddr, &ami );
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDSecMgrExtAddrLookup?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   F5..         MOV     ?V0 + 3,A
   1090          
   1091            if ( status == ZSuccess )
   \   00001E   7031         JNZ     ??ZDSecMgrMasterKeyLoad_0
   1092            {
   1093              // get the address index
   1094              if ( ZDSecMgrMasterKeyLookup( ami, &loaded ) == ZSuccess )
   \   000020                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000028   701D         JNZ     ??ZDSecMgrMasterKeyLoad_1
   1095              {
   1096                // overwrite old key
   1097                osal_memcpy( loaded, key, SEC_KEY_LEN );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   8E..         MOV     ?V0 + 0,R6
   \   00002C   8F..         MOV     ?V0 + 1,R7
   \   00002E   75..00       MOV     ?V0 + 2,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   7C10         MOV     R4,#0x10
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   7405         MOV     A,#0x5
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   1098              }
   \                     ??CrossCallReturnLabel_237:
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   800A         SJMP    ??ZDSecMgrMasterKeyLoad_0
   1099              else
   1100              {
   1101                // store new key -- NULL will zero key
   1102                status = ZDSecMgrMasterKeyStore( ami, key );
   \                     ??ZDSecMgrMasterKeyLoad_1:
   \   000047                ; Setup parameters for call to function ZDSecMgrMasterKeyStore
   \   000047   EE           MOV     A,R6
   \   000048   FC           MOV     R4,A
   \   000049   EF           MOV     A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   12....       LCALL   ?Subroutine40 & 0xFFFF
   1103              }
   1104            }
   \                     ??CrossCallReturnLabel_65:
   \   00004E   E9           MOV     A,R1
   \   00004F   F5..         MOV     ?V0 + 3,A
   1105          
   1106            return status;
   \                     ??ZDSecMgrMasterKeyLoad_0:
   \   000051   A9..         MOV     R1,?V0 + 3
   \   000053   02....       LJMP    ?Subroutine79 & 0xFFFF
   1107          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00000D   E9           MOV     A,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine101_0
   \   000002                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   12....       LCALL   ??ZDSecMgrMasterKeyStore?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??ZDSecMgrMasterKeyLookup?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine112_0
   \   000006                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000006   22           RET
   1108          
   1109          /******************************************************************************
   1110           * @fn          ZDSecMgrAppKeyGet
   1111           *
   1112           * @brief       get an APP key - option APP(MASTER or LINK) key
   1113           *
   1114           * @param       initNwkAddr - [in] NWK address of initiator device
   1115           * @param       initExtAddr - [in] EXT address of initiator device
   1116           * @param       partNwkAddr - [in] NWK address of partner device
   1117           * @param       partExtAddr - [in] EXT address of partner device
   1118           * @param       key         - [out] APP(MASTER or LINK) key
   1119           * @param       keyType     - [out] APP(MASTER or LINK) key type
   1120           *
   1121           * @return      ZStatus_t
   1122           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
   1123          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
   1124                                                           // to KEY_TYPE_APP_LINK since
   1125                                                           // only specific requirement
   1126                                                           // right now comes from SE profile
   1127          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1128          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
   1129                                       uint8*  initExtAddr,
   1130                                       uint16  partNwkAddr,
   1131                                       uint8*  partExtAddr,
   1132                                       uint8** key,
   1133                                       uint8*  keyType )
   1134          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   740D         MOV     A,#0xd
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00000D   FA           MOV     R2,A
   \   00000E   E9           MOV     A,R1
   \   00000F   FB           MOV     R3,A
   \   000010   740F         MOV     A,#0xf
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000018   FE           MOV     R6,A
   \   000019   E9           MOV     A,R1
   \   00001A   FF           MOV     R7,A
   1135            // Intentionally unreferenced parameters
   1136            (void)initNwkAddr;
   1137            (void)initExtAddr;
   1138            (void)partNwkAddr;
   1139            (void)partExtAddr;
   1140            
   1141            //---------------------------------------------------------------------------
   1142            // note:
   1143            // should use a robust mechanism to generate keys, for example
   1144            // combine EXT addresses and call a hash function
   1145            //---------------------------------------------------------------------------
   1146            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   00001B                ; Setup parameters for call to function SSP_GetTrueRand
   \   00001B   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00001E   7910         MOV     R1,#0x10
   \   000020   12....       LCALL   ??SSP_GetTrueRand?relay
   1147          
   1148            *keyType = ZDSecMgrAppKeyType;
   \   000023   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   000026   E0           MOVX    A,@DPTR
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   F0           MOVX    @DPTR,A
   1149          
   1150            return ZSuccess;
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   02....       LJMP    ??Subroutine97_0 & 0xFFFF
   1151          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine98_0
   \   000004                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   22           RET
   1152          
   1153          /******************************************************************************
   1154           * @fn          ZDSecMgrAppKeyReq
   1155           *
   1156           * @brief       Process request for APP key between two devices.
   1157           *
   1158           * @param       device - [in] ZDO_RequestKeyInd_t, request info
   1159           *
   1160           * @return      none
   1161           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1162          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
   1163          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV     A,#-0x27
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1164            APSME_TransportKeyReq_t req;
   1165            uint8                   initExtAddr[Z_EXTADDR_LEN];
   1166            uint16                  partNwkAddr;
   1167            uint8                   key[SEC_KEY_LEN];
   1168          
   1169          
   1170            // validate initiator and partner
   1171            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
   1172                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E   EA           MOV     A,R2
   \   00000F   2405         ADD     A,#0x5
   \   000011   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   2402         ADD     A,#0x2
   \   00001D   F8           MOV     R0,A
   \   00001E   E5..         MOV     A,?V0 + 1
   \   000020   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000023                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000023   740F         MOV     A,#0xf
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000033   12....       LCALL   ??APSME_LookupExtAddr?relay
   \   000036   E9           MOV     A,R1
   \   000037   6401         XRL     A,#0x1
   \   000039   6003         JZ      $+5
   \   00003B   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   1173            {
   1174              // point the key to some memory
   1175              req.key = key;
   \   00003E   7417         MOV     A,#0x17
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   A882         MOV     R0,DPL
   \   000045   A983         MOV     R1,DPH
   \   000047   7406         MOV     A,#0x6
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1176          
   1177              // get an APP key - option APP (MASTER or LINK) key
   1178              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
   1179                                      initExtAddr,
   1180                                      partNwkAddr,
   1181                                      ind->partExtAddr,
   1182                                      &req.key,
   1183                                      &req.keyType ) == ZSuccess )
   \                     ??CrossCallReturnLabel_166:
   \   00004F                ; Setup parameters for call to function SSP_GetTrueRand
   \   00004F   7417         MOV     A,#0x17
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   AA82         MOV     R2,DPL
   \   000056   AB83         MOV     R3,DPH
   \   000058   7910         MOV     R1,#0x10
   \   00005A   12....       LCALL   ??SSP_GetTrueRand?relay
   \   00005D   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   000060   E0           MOVX    A,@DPTR
   \   000061   C0E0         PUSH    A
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   D0E0         POP     A
   \   00006A   F0           MOVX    @DPTR,A
   1184              {
   1185                // always secure
   1186                req.nwkSecure = TRUE;
   \   00006B   740C         MOV     A,#0xc
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   7401         MOV     A,#0x1
   \   000072   F0           MOVX    @DPTR,A
   1187                req.apsSecure = TRUE;
   \   000073   740B         MOV     A,#0xb
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   7401         MOV     A,#0x1
   \   00007A   F0           MOVX    @DPTR,A
   1188                req.tunnel    = NULL;
   \   00007B   740D         MOV     A,#0xd
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   12....       LCALL   ?Subroutine7 & 0xFFFF
   1189          
   1190                // send key to initiator device
   1191                req.dstAddr   = ind->srcAddr;
   \                     ??CrossCallReturnLabel_10:
   \   000086   F8           MOV     R0,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1192                req.extAddr   = ind->partExtAddr;
   \                     ??CrossCallReturnLabel_167:
   \   000092   7408         MOV     A,#0x8
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   EE           MOV     A,R6
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   EF           MOV     A,R7
   \   00009B   F0           MOVX    @DPTR,A
   1193                req.initiator = TRUE;
   \   00009C   740A         MOV     A,#0xa
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   F0           MOVX    @DPTR,A
   1194                APSME_TransportKeyReq( &req );
   \   0000A4                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   AA82         MOV     R2,DPL
   \   0000AB   AB83         MOV     R3,DPH
   \   0000AD   12....       LCALL   ??APSME_TransportKeyReq?relay
   1195          
   1196                // send key to partner device
   1197                req.dstAddr   = partNwkAddr;
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1198                req.extAddr   = initExtAddr;
   \                     ??CrossCallReturnLabel_168:
   \   0000BF   740F         MOV     A,#0xf
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   A882         MOV     R0,DPL
   \   0000C6   A983         MOV     R1,DPH
   \   0000C8   7408         MOV     A,#0x8
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   1199                req.initiator = FALSE;
   \                     ??CrossCallReturnLabel_210:
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E4           CLR     A
   \   0000D4   F0           MOVX    @DPTR,A
   1200          
   1201                APSME_TransportKeyReq( &req );
   \   0000D5                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   \   0000DE   12....       LCALL   ??APSME_TransportKeyReq?relay
   1202              }
   1203            }
   1204          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   0000E1   7427         MOV     A,#0x27
   \   0000E3   02....       LJMP    ??Subroutine92_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   88..         MOV     ?V0 + 0,R0
   \   000005   89..         MOV     ?V0 + 1,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003                ; Setup parameters for call to function AddrMgrEntryGet
   \   000003                ; Setup parameters for call to function AddrMgrEntryGet
   \   000003   740A         MOV     A,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   FE           MOV     R6,A
   \   000001   EB           MOV     A,R3
   \   000002   3400         ADDC    A,#0x0
   \   000004   FF           MOV     R7,A
   \   000005                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000005                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   AC82         MOV     R4,DPL
   \   00000D   AD83         MOV     R5,DPH
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   000016   E9           MOV     A,R1
   \   000017   6401         XRL     A,#0x1
   \   000019   22           RET
   1205          
   1206          /******************************************************************************
   1207           * @fn          ZDSecMgrEstablishKey
   1208           *
   1209           * @brief       Start SKKE with device joining network.
   1210           *
   1211           * @param       device - [in] ZDSecMgrDevice_t, device info
   1212           *
   1213           * @return      ZStatus_t
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrEstablishKey:
   1216          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1217            ZStatus_t               status;
   1218            APSME_EstablishKeyReq_t req;
   1219          
   1220          
   1221            req.respExtAddr = device->extAddr;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1222            req.method      = APSME_SKKE_METHOD;
   \                     ??CrossCallReturnLabel_169:
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   1223          
   1224            if ( device->parentAddr == NLME_GetShortAddr() )
   \   000024                ; Setup parameters for call to function NLME_GetShortAddr
   \   000024   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000027   7002         JNZ     ??ZDSecMgrEstablishKey_0
   \   000029   EB           MOV     A,R3
   \   00002A   69           XRL     A,R1
   \                     ??ZDSecMgrEstablishKey_0:
   \   00002B   7017         JNZ     ??ZDSecMgrEstablishKey_1
   1225            {
   1226              req.dstAddr   = device->nwkAddr;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000034   12....       LCALL   ?Subroutine17 & 0xFFFF
   1227              //devtag.0604.todo - remove obsolete
   1228              req.apsSecure = FALSE;
   \                     ??CrossCallReturnLabel_132:
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
   1229              req.nwkSecure = FALSE;
   \   00003C   7406         MOV     A,#0x6
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E4           CLR     A
   \   000042   8010         SJMP    ??ZDSecMgrEstablishKey_2
   1230            }
   1231            else
   1232            {
   1233              req.dstAddr   = device->parentAddr;
   \                     ??ZDSecMgrEstablishKey_1:
   \   000044   12....       LCALL   ?Subroutine17 & 0xFFFF
   1234              //devtag.0604.todo - remove obsolete
   1235              req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_133:
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
   1236              req.nwkSecure = TRUE;
   \   00004D   7406         MOV     A,#0x6
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7401         MOV     A,#0x1
   1237            }
   \                     ??ZDSecMgrEstablishKey_2:
   \   000054   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   1238          
   1239            status = APSME_EstablishKeyReq( &req );
   1240          
   1241            return status;
   \                     ??CrossCallReturnLabel_194:
   \   000057   12....       LCALL   ??APSME_EstablishKeyReq?relay
   \   00005A   7407         MOV     A,#0x7
   \   00005C   02....       LJMP    ??Subroutine92_0 & 0xFFFF
   1242          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B                REQUIRE ??Subroutine89_0
   \   00000B                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   EA           MOV     A,R2
   \   000004   68           XRL     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine90_0
   \   000006                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET
   1243          
   1244          /******************************************************************************
   1245           * @fn          ZDSecMgrSendMasterKey
   1246           *
   1247           * @brief       Send MASTER key to device joining network.
   1248           *
   1249           * @param       device - [in] ZDSecMgrDevice_t, device info
   1250           *
   1251           * @return      ZStatus_t
   1252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1253          ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendMasterKey:
   1254          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1255            ZStatus_t               status;
   1256            APSME_TransportKeyReq_t req;
   1257          
   1258          
   1259            req.keyType = KEY_TYPE_TC_MASTER;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E4           CLR     A
   \   000014   12....       LCALL   ?Subroutine6 & 0xFFFF
   1260            req.extAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_8:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1261            req.tunnel  = NULL;
   \                     ??CrossCallReturnLabel_170:
   \   00001D   740B         MOV     A,#0xb
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   1262          
   1263            ZDSecMgrMasterKeyLookup( device->ctrl->entry->ami, &req.key );
   \   000026                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   AC82         MOV     R4,DPL
   \   00002D   AD83         MOV     R5,DPH
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00003E   F583         MOV     DPH,A
   \   000040   8882         MOV     DPL,R0
   \   000042   12....       LCALL   ?Subroutine41 & 0xFFFF
   1264          
   1265            //check if using secure hop to to parent
   1266            if ( device->parentAddr != NLME_GetShortAddr() )
   \                     ??CrossCallReturnLabel_67:
   \   000045                ; Setup parameters for call to function NLME_GetShortAddr
   \   000045   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000048   7002         JNZ     ??ZDSecMgrSendMasterKey_0
   \   00004A   EB           MOV     A,R3
   \   00004B   69           XRL     A,R1
   \                     ??ZDSecMgrSendMasterKey_0:
   \   00004C   6012         JZ      ??ZDSecMgrSendMasterKey_1
   1267            {
   1268              //send to parent with security
   1269              req.dstAddr   = device->parentAddr;
   \   00004E   12....       LCALL   ?Subroutine2 & 0xFFFF
   1270              req.nwkSecure = TRUE;
   \                     ??CrossCallReturnLabel_208:
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   1271              req.apsSecure = TRUE;
   \   000057   7409         MOV     A,#0x9
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   8015         SJMP    ??ZDSecMgrSendMasterKey_2
   1272            }
   1273            else
   1274            {
   1275              //direct with no security
   1276              req.dstAddr   = device->nwkAddr;
   \                     ??ZDSecMgrSendMasterKey_1:
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000067   12....       LCALL   ?Subroutine2 & 0xFFFF
   1277              req.nwkSecure = FALSE;
   \                     ??CrossCallReturnLabel_209:
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   1278              req.apsSecure = FALSE;
   \   00006F   7409         MOV     A,#0x9
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E4           CLR     A
   1279            }
   \                     ??ZDSecMgrSendMasterKey_2:
   \   000075   12....       LCALL   ?Subroutine4 & 0xFFFF
   1280          
   1281            status = APSME_TransportKeyReq( &req );
   1282          
   1283            return status;
   \                     ??CrossCallReturnLabel_6:
   \   000078   02....       LJMP    ?Subroutine78 & 0xFFFF
   1284          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000008   7406         MOV     A,#0x6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine106_0
   \   000002                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine108_0
   \   000006                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   12....       LCALL   ??APSME_TransportKeyReq?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
   1285          
   1286          /******************************************************************************
   1287           * @fn          ZDSecMgrSendNwkKey
   1288           *
   1289           * @brief       Send NWK key to device joining network.
   1290           *
   1291           * @param       device - [in] ZDSecMgrDevice_t, device info
   1292           *
   1293           * @return      ZStatus_t
   1294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1295          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
   1296          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1297            ZStatus_t               status;
   1298            APSME_TransportKeyReq_t req;
   1299            APSDE_FrameTunnel_t     tunnel;
   1300          
   1301            req.dstAddr   = device->nwkAddr;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   12....       LCALL   ?Subroutine6 & 0xFFFF
   1302            req.extAddr   = device->extAddr;
   \                     ??CrossCallReturnLabel_9:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   1303          
   1304            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1305              req.keyType   = KEY_TYPE_NWK_HIGH;
   1306            else
   1307              req.keyType   = KEY_TYPE_NWK;
   \                     ??CrossCallReturnLabel_140:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
   1308          
   1309            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
   1310                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
   1311            {
   1312              // set values
   1313              req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
   1314              req.key       = _NIB.nwkActiveKey.key;
   1315              //devtag.pro.security.todo - make sure that if there is no link key the NWK
   1316              //key isn't used to secure the frame at the APS layer -- since the receiving
   1317              //device may not have a NWK key yet
   1318              req.apsSecure = TRUE;
   1319          
   1320              // check if using secure hop to to parent
   1321              if ( device->parentAddr == NLME_GetShortAddr() )
   1322              {
   1323                req.nwkSecure = FALSE;
   1324                req.tunnel    = NULL;
   1325              }
   1326              else
   1327              {
   1328                req.nwkSecure   = TRUE;
   1329                req.tunnel      = &tunnel;
   1330                req.tunnel->tna = device->parentAddr;
   1331                req.tunnel->dea = device->extAddr;
   1332              }
   1333            }
   1334            else
   1335            {
   1336              // default values
   1337              //devtag.0604.verify
   1338              req.nwkSecure = TRUE;
   \   000028   740A         MOV     A,#0xa
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7401         MOV     A,#0x1
   \   00002F   F0           MOVX    @DPTR,A
   1339              req.apsSecure = FALSE;
   \   000030   7409         MOV     A,#0x9
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1340              req.tunnel    = NULL;
   \   000037   740B         MOV     A,#0xb
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1341          
   1342              if ( device->parentAddr != NLME_GetShortAddr() )
   \   000040                ; Setup parameters for call to function NLME_GetShortAddr
   \   000040   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000043   EE           MOV     A,R6
   \   000044   2404         ADD     A,#0x4
   \   000046   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000049   8882         MOV     DPL,R0
   \   00004B   F583         MOV     DPH,A
   \   00004D   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000050   7002         JNZ     ??ZDSecMgrSendNwkKey_0
   \   000052   EB           MOV     A,R3
   \   000053   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000054   6003         JZ      ??CrossCallReturnLabel_177
   1343              {
   1344                req.dstAddr = device->parentAddr;
   \   000056   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1345              }
   1346          
   1347              // special cases
   1348              //devtag.0604.todo - modify to preconfig flag
   1349              if ( device->secure == FALSE )
   \                     ??CrossCallReturnLabel_177:
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   7038         JNZ     ??ZDSecMgrSendNwkKey_1
   1350              {
   1351                req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
   \   000066   90....       MOV     DPTR,#(_NIB + 62)
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
   1352                req.key       = _NIB.nwkActiveKey.key;
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   74..         MOV     A,#((_NIB + 63) & 0xff)
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   74..         MOV     A,#(((_NIB + 63) >> 8) & 0xff)
   \   00007F   F0           MOVX    @DPTR,A
   1353          
   1354                // check if using secure hop to to parent
   1355                if ( device->parentAddr == NLME_GetShortAddr() )
   \   000080                ; Setup parameters for call to function NLME_GetShortAddr
   \   000080   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000083   8A..         MOV     ?V0 + 2,R2
   \   000085   8B..         MOV     ?V0 + 3,R3
   \   000087   A8..         MOV     R0,?V0 + 2
   \   000089   A9..         MOV     R1,?V0 + 3
   \   00008B   85..82       MOV     DPL,?V0 + 0
   \   00008E   85..83       MOV     DPH,?V0 + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   68           XRL     A,R0
   \   000093   7003         JNZ     ??ZDSecMgrSendNwkKey_2
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_2:
   \   000098   7014         JNZ     ??ZDSecMgrSendNwkKey_3
   1356                {
   1357                  req.nwkSecure = FALSE;
   \   00009A   740A         MOV     A,#0xa
   \   00009C   800B         SJMP    ??ZDSecMgrSendNwkKey_4
   1358                }
   1359              }
   1360              else
   1361              {
   1362                req.key       = NULL;
   \                     ??ZDSecMgrSendNwkKey_1:
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E4           CLR     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   F0           MOVX    @DPTR,A
   1363                req.keySeqNum = 0;
   \   0000A7   7403         MOV     A,#0x3
   \                     ??ZDSecMgrSendNwkKey_4:
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E4           CLR     A
   \   0000AD   F0           MOVX    @DPTR,A
   1364              }
   1365            }
   1366          
   1367            status = APSME_TransportKeyReq( &req );
   1368          
   1369            return status;
   \                     ??ZDSecMgrSendNwkKey_3:
   \   0000AE                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000AE   85..82       MOV     DPL,?XSP + 0
   \   0000B1   85..83       MOV     DPH,?XSP + 1
   \   0000B4   AA82         MOV     R2,DPL
   \   0000B6   AB83         MOV     R3,DPH
   \   0000B8   12....       LCALL   ??APSME_TransportKeyReq?relay
   \   0000BB   740D         MOV     A,#0xd
   \   0000BD   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   1370          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002                REQUIRE ??Subroutine91_0
   \   000002                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine105_0
   \   000006                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   02....       LJMP    ?Subroutine74 & 0xFFFF
   1371          
   1372          /******************************************************************************
   1373           * @fn          ZDSecMgrDeviceEntryRemove
   1374           *
   1375           * @brief       Remove device entry.
   1376           *
   1377           * @param       entry - [in] valid entry
   1378           *
   1379           * @return      none
   1380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1381          void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrDeviceEntryRemove:
   1382          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1383            // terminate device control
   1384            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1385            {
   1386              ZDSecMgrCtrlTerm( entry );
   \   000009                ; Setup parameters for call to function ZDSecMgrCtrlTerm
   \   000009   12....       LCALL   ??ZDSecMgrCtrlTerm?relay
   1387            }
   1388          
   1389            // remove device from entry data
   1390            ZDSecMgrEntryFree( entry );
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   74FF         MOV     A,#-0x1
   \   000016   F0           MOVX    @DPTR,A
   1391          
   1392            // remove EXT address
   1393            //ZDSecMgrExtAddrRelease( aiOld );
   1394          }
   \   000017   02....       LJMP    ??Subroutine97_0 & 0xFFFF
   1395          
   1396          /******************************************************************************
   1397           * @fn          ZDSecMgrDeviceRemoveByExtAddr
   1398           *
   1399           * @brief       Remove device entry by its ext address.
   1400           *
   1401           * @param       pAddr - pointer to the extended address
   1402           *
   1403           * @return      ZStatus_t
   1404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1405          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
   1406          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1407            ZDSecMgrEntry_t *pEntry;
   1408            uint8           retValue;
   1409            
   1410            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000A                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   12....       LCALL   ??ZDSecMgrEntryLookupExt?relay
   \   000017   E9           MOV     A,R1
   \   000018   FE           MOV     R6,A
   1411            
   1412            if( retValue == ZSuccess )
   \   000019   7003         JNZ     ??CrossCallReturnLabel_69
   1413            {
   1414              ZDSecMgrDeviceEntryRemove( pEntry );
   \   00001B                ; Setup parameters for call to function ZDSecMgrDeviceEntryRemove
   \   00001B   12....       LCALL   ?Subroutine42 & 0xFFFF
   1415            }
   1416            
   1417            return retValue;
   \                     ??CrossCallReturnLabel_69:
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   1418          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   12....       LCALL   ??ZDSecMgrDeviceEntryRemove?relay
   \   000006   22           RET
   1419          
   1420          /******************************************************************************
   1421           * @fn          ZDSecMgrDeviceEntryAdd
   1422           *
   1423           * @brief       Add entry.
   1424           *
   1425           * @param       device - [in] ZDSecMgrDevice_t, device info
   1426           * @param       ami    - [in] Address Manager index
   1427           *
   1428           * @return      ZStatus_t
   1429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1430          void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr )
   \                     ZDSecMgrAddrMgrUpdate:
   1431          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   1432            AddrMgrEntry_t entry;
   1433          
   1434            // get the ami data
   1435            entry.user  = ADDRMGR_USER_SECURITY;
   \   00000E   7402         MOV     A,#0x2
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   F0           MOVX    @DPTR,A
   1436            entry.index = ami;
   \   000017   740B         MOV     A,#0xb
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine5 & 0xFFFF
   1437          
   1438            AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_193:
   \   00001F   12....       LCALL   ??AddrMgrEntryGet?relay
   1439          
   1440            // check if NWK address is same
   1441            if ( entry.nwkAddr != nwkAddr )
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6E           XRL     A,R6
   \   000029   7003         JNZ     ??ZDSecMgrAddrMgrUpdate_0
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6F           XRL     A,R7
   \                     ??ZDSecMgrAddrMgrUpdate_0:
   \   00002E   600F         JZ      ??ZDSecMgrAddrMgrUpdate_1
   1442            {
   1443              // update NWK address
   1444              entry.nwkAddr = nwkAddr;
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   EE           MOV     A,R6
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   EF           MOV     A,R7
   \   000039   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   1445          
   1446              AddrMgrEntryUpdate( &entry );
   1447            }
   \                     ??CrossCallReturnLabel_195:
   \   00003C   12....       LCALL   ??AddrMgrEntryUpdate?relay
   1448          }
   \                     ??ZDSecMgrAddrMgrUpdate_1:
   \   00003F   02....       LJMP    ?Subroutine82 & 0xFFFF
   1449          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine87_0
   \   000003                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1450          ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami )
   \                     ZDSecMgrDeviceEntryAdd:
   1451          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1452            ZStatus_t        status;
   1453            ZDSecMgrEntry_t* entry;
   1454          
   1455          
   1456            // initialize as unknown until completion
   1457            status = ZNwkUnknownDevice;
   \   000012   75..C8       MOV     ?V0 + 2,#-0x38
   1458          
   1459            device->ctrl = NULL;
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine14 & 0xFFFF
   1460          
   1461            // make sure not already registered
   1462            if ( ZDSecMgrEntryLookup( device->nwkAddr, &entry ) == ZSuccess )
   \                     ??CrossCallReturnLabel_110:
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00002E   12....       LCALL   ??ZDSecMgrEntryLookup?relay
   \   000031   E9           MOV     A,R1
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   702F         JNZ     ??ZDSecMgrDeviceEntryAdd_0
   1463            {
   1464              // verify that address index is same
   1465              if ( entry->ami != ami )
   \   00003A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6E           XRL     A,R6
   \   00003F   7003         JNZ     ??ZDSecMgrDeviceEntryAdd_1
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6F           XRL     A,R7
   \                     ??ZDSecMgrDeviceEntryAdd_1:
   \   000044   6031         JZ      ??ZDSecMgrDeviceEntryAdd_2
   1466              {
   1467                // remove conflicting entry
   1468                ZDSecMgrDeviceEntryRemove( entry );
   \   000046                ; Setup parameters for call to function ZDSecMgrDeviceEntryRemove
   \   000046   12....       LCALL   ?Subroutine42 & 0xFFFF
   1469          
   1470                if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
   \                     ??CrossCallReturnLabel_70:
   \   000049                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   AC82         MOV     R4,DPL
   \   000051   AD83         MOV     R5,DPH
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   ??ZDSecMgrEntryLookupAMI?relay
   \   00005A   E9           MOV     A,R1
   \   00005B   701A         JNZ     ??ZDSecMgrDeviceEntryAdd_2
   1471                {
   1472                  // update NWK address
   1473                  ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
   \                     ??ZDSecMgrDeviceEntryAdd_3:
   \   00005D                ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   12....       LCALL   ?Subroutine34 & 0xFFFF
   1474                }
   1475              }
   1476            }
   \                     ??CrossCallReturnLabel_54:
   \   000067   800E         SJMP    ??ZDSecMgrDeviceEntryAdd_2
   1477            else if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
   \                     ??ZDSecMgrDeviceEntryAdd_0:
   \   000069                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000069   AC82         MOV     R4,DPL
   \   00006B   AD83         MOV     R5,DPH
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   ??ZDSecMgrEntryLookupAMI?relay
   \   000074   E9           MOV     A,R1
   \   000075   60E6         JZ      ??ZDSecMgrDeviceEntryAdd_3
   1478            {
   1479              // update NWK address
   1480              ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
   1481            }
   1482          
   1483            // check if a new entry needs to be created
   1484            if ( entry == NULL )
   \                     ??ZDSecMgrDeviceEntryAdd_2:
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   7002         JNZ     ??ZDSecMgrDeviceEntryAdd_4
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrDeviceEntryAdd_4:
   \   000082   85..82       MOV     DPL,?XSP + 0
   \   000085   85..83       MOV     DPH,?XSP + 1
   \   000088   702B         JNZ     ??ZDSecMgrDeviceEntryAdd_5
   1485            {
   1486              // get new entry
   1487              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   00008A                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   00008A   AA82         MOV     R2,DPL
   \   00008C   AB83         MOV     R3,DPH
   \   00008E   12....       LCALL   ??ZDSecMgrEntryNew?relay
   \   000091   E9           MOV     A,R1
   \   000092   702A         JNZ     ??ZDSecMgrDeviceEntryAdd_6
   1488              {
   1489                // reset entry lkd
   1490          
   1491                // finish setting up entry
   1492                entry->ami = ami;
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00009D   EE           MOV     A,R6
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   EF           MOV     A,R7
   \   0000A1   12....       LCALL   ?Subroutine7 & 0xFFFF
   1493          
   1494                // update NWK address
   1495                ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
   \                     ??CrossCallReturnLabel_11:
   \   0000A4   12....       LCALL   ?Subroutine34 & 0xFFFF
   1496          
   1497                // enter new device into device control
   1498                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1499                {
   1500                  status = ZDSecMgrCtrlAdd( device, entry );
   \                     ??CrossCallReturnLabel_55:
   \   0000A7                ; Setup parameters for call to function ZDSecMgrCtrlAdd
   \   0000A7   85..82       MOV     DPL,?XSP + 0
   \   0000AA   85..83       MOV     DPH,?XSP + 1
   \   0000AD   12....       LCALL   ?Subroutine36 & 0xFFFF
   1501                }
   1502                else
   1503                {
   1504                  status = ZSuccess;
   1505                }
   1506              }
   1507            }
   \                     ??CrossCallReturnLabel_58:
   \   0000B0   12....       LCALL   ??ZDSecMgrCtrlAdd?relay
   \   0000B3   8006         SJMP    ??ZDSecMgrDeviceEntryAdd_7
   1508            else
   1509            {
   1510              // reset entry lkd
   1511          
   1512              // reset entry in entry control
   1513              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1514              {
   1515                status = ZDSecMgrCtrlReset( device, entry );
   \                     ??ZDSecMgrDeviceEntryAdd_5:
   \   0000B5                ; Setup parameters for call to function ZDSecMgrCtrlReset
   \   0000B5   12....       LCALL   ?Subroutine36 & 0xFFFF
   1516              }
   1517              else
   1518              {
   1519                status = ZSuccess;
   1520              }
   1521            }
   \                     ??CrossCallReturnLabel_59:
   \   0000B8   12....       LCALL   ??ZDSecMgrCtrlReset?relay
   \                     ??ZDSecMgrDeviceEntryAdd_7:
   \   0000BB   E9           MOV     A,R1
   \   0000BC   F5..         MOV     ?V0 + 2,A
   1522          
   1523            return status;
   \                     ??ZDSecMgrDeviceEntryAdd_6:
   \   0000BE   A9..         MOV     R1,?V0 + 2
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   02....       LJMP    ?Subroutine77 & 0xFFFF
   1524          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   AA..         MOV     R2,?V0 + 0
   \   000005   AB..         MOV     R3,?V0 + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   FC           MOV     R4,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FD           MOV     R5,A
   \   000004   EE           MOV     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   EF           MOV     A,R7
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??ZDSecMgrAddrMgrUpdate?relay
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDSecMgrEntryLookup
   \   000001                REQUIRE ?Subroutine74
   \   000001                ; // Fall through to label ?Subroutine74

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   22           RET
   1525          
   1526          /******************************************************************************
   1527           * @fn          ZDSecMgrDeviceCtrlHandler
   1528           *
   1529           * @brief       Device control handler.
   1530           *
   1531           * @param       device - [in] ZDSecMgrDevice_t, device info
   1532           *
   1533           * @return      none
   1534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1535          void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceCtrlHandler:
   1536          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1537            uint8 state;
   1538            uint8 cntr;
   1539          
   1540          
   1541            state = device->ctrl->state;
   \   000005   EA           MOV     A,R2
   \   000006   2408         ADD     A,#0x8
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   FE           MOV     R6,A
   \   00000F   E9           MOV     A,R1
   \   000010   FF           MOV     R7,A
   \   000011   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 0,A
   1542            cntr  = ZDSECMGR_CTRL_BASE_CNTR;
   1543          
   1544            switch ( state )
   \   000017   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for ZDSecMgrDeviceCtrlHandler>_0`:
   \   00001A   02           DB        2
   \   00001B   05           DB        5
   \   00001C   ....         DW        ??ZDSecMgrDeviceCtrlHandler_0
   \   00001E   ....         DW        ??ZDSecMgrDeviceCtrlHandler_1
   \   000020   ....         DW        ??ZDSecMgrDeviceCtrlHandler_2
   \   000022   ....         DW        ??ZDSecMgrDeviceCtrlHandler_3
   \   000024   ....         DW        ??ZDSecMgrDeviceCtrlHandler_0
   \   000026   ....         DW        ??ZDSecMgrDeviceCtrlHandler_0
   \   000028   ....         DW        ??ZDSecMgrDeviceCtrlHandler_4
   1545            {
   1546              case ZDSECMGR_CTRL_TK_MASTER:
   1547                if ( ZDSecMgrSendMasterKey( device ) == ZSuccess )
   \                     ??ZDSecMgrDeviceCtrlHandler_1:
   \   00002A                ; Setup parameters for call to function ZDSecMgrSendMasterKey
   \   00002A   12....       LCALL   ??ZDSecMgrSendMasterKey?relay
   \   00002D   E9           MOV     A,R1
   \   00002E   7016         JNZ     ??ZDSecMgrDeviceCtrlHandler_3
   1548                {
   1549                  state = ZDSECMGR_CTRL_SKKE_INIT;
   \   000030   75..03       MOV     ?V0 + 0,#0x3
   1550                  cntr  = ZDSECMGR_CTRL_SKKE_INIT_CNTR;
   \   000033   8015         SJMP    ??ZDSecMgrDeviceCtrlHandler_5
   1551                }
   1552                break;
   1553          
   1554              case ZDSECMGR_CTRL_SKKE_INIT:
   1555                if ( ZDSecMgrEstablishKey( device ) == ZSuccess )
   \                     ??ZDSecMgrDeviceCtrlHandler_2:
   \   000035                ; Setup parameters for call to function ZDSecMgrEstablishKey
   \   000035   12....       LCALL   ??ZDSecMgrEstablishKey?relay
   \   000038   E9           MOV     A,R1
   \   000039   700B         JNZ     ??ZDSecMgrDeviceCtrlHandler_3
   1556                {
   1557                  state = ZDSECMGR_CTRL_SKKE_WAIT;
   \   00003B   75..04       MOV     ?V0 + 0,#0x4
   \   00003E   800A         SJMP    ??ZDSecMgrDeviceCtrlHandler_5
   1558                }
   1559                break;
   1560          
   1561              case ZDSECMGR_CTRL_SKKE_WAIT:
   1562                // continue to wait for SKA control timeout
   1563                break;
   1564          
   1565              case ZDSECMGR_CTRL_TK_NWK:
   1566                if ( ZDSecMgrSendNwkKey( device ) == ZSuccess )
   \                     ??ZDSecMgrDeviceCtrlHandler_4:
   \   000040                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000040   12....       LCALL   ??ZDSecMgrSendNwkKey?relay
   \   000043   E9           MOV     A,R1
   \   000044   6022         JZ      ??ZDSecMgrDeviceCtrlHandler_0
   1567                {
   1568                  state = ZDSECMGR_CTRL_NONE;
   1569                }
   1570                break;
   1571          
   1572              default:
   1573                state = ZDSECMGR_CTRL_NONE;
   1574                break;
   1575            }
   1576          
   1577            if ( state != ZDSECMGR_CTRL_NONE )
   \                     ??ZDSecMgrDeviceCtrlHandler_3:
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   601E         JZ      ??ZDSecMgrDeviceCtrlHandler_0
   1578            {
   1579              device->ctrl->state = state;
   \                     ??ZDSecMgrDeviceCtrlHandler_5:
   \   00004A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00004D   E5..         MOV     A,?V0 + 0
   \   00004F   F0           MOVX    @DPTR,A
   1580              device->ctrl->cntr  = cntr;
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   12....       LCALL   ?Subroutine24 & 0xFFFF
   1581          
   1582              osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );         
   \                     ??CrossCallReturnLabel_35:
   \   000057                ; Setup parameters for call to function osal_start_timerEx
   \   000057   7C64         MOV     R4,#0x64
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7A00         MOV     R2,#0x0
   \   00005D   FB           MOV     R3,A
   \   00005E   90....       MOV     DPTR,#ZDAppTaskID
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   ??osal_start_timerEx?relay
   \   000066   8007         SJMP    ??CrossCallReturnLabel_41
   1583            }
   1584            else
   1585            {
   1586              ZDSecMgrCtrlRelease( device->ctrl );
   \                     ??ZDSecMgrDeviceCtrlHandler_0:
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   12....       LCALL   ?Subroutine26 & 0xFFFF
   1587            }
   1588          }
   \                     ??CrossCallReturnLabel_41:
   \   00006F   02....       LJMP    ??Subroutine97_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   02....       LJMP    ?Subroutine75 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   A3           INC     DPTR
   \   000004   7401         MOV     A,#0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET
   1589          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1590          void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceCtrlSetup:
   1591          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1592            if ( device->ctrl != NULL )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000013   7001         JNZ     ??ZDSecMgrDeviceCtrlSetup_0
   \   000015   E9           MOV     A,R1
   \                     ??ZDSecMgrDeviceCtrlSetup_0:
   \   000016   6023         JZ      ??ZDSecMgrDeviceCtrlSetup_1
   1593            {
   1594              if ( device->secure == FALSE )
   \   000018   E8           MOV     A,R0
   \   000019   2405         ADD     A,#0x5
   \   00001B   F8           MOV     R0,A
   \   00001C   E9           MOV     A,R1
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7004         JNZ     ??ZDSecMgrDeviceCtrlSetup_2
   1595              {
   1596                // send the master key data to the joining device
   1597                device->ctrl->state = ZDSECMGR_CTRL_TK_MASTER;
   \   00002D   7402         MOV     A,#0x2
   \   00002F   8002         SJMP    ??ZDSecMgrDeviceCtrlSetup_3
   1598              }
   1599              else
   1600              {
   1601                // start SKKE
   1602                device->ctrl->state = ZDSECMGR_CTRL_SKKE_INIT;
   \                     ??ZDSecMgrDeviceCtrlSetup_2:
   \   000031   7403         MOV     A,#0x3
   \                     ??ZDSecMgrDeviceCtrlSetup_3:
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   F0           MOVX    @DPTR,A
   1603              }
   1604          
   1605              ZDSecMgrDeviceCtrlHandler( device );
   \   000038                ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
   \   000038   12....       LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
   1606            }
   1607          }
   \                     ??ZDSecMgrDeviceCtrlSetup_1:
   \   00003B   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1608          
   1609          /******************************************************************************
   1610           * @fn          ZDSecMgrDeviceCtrlUpdate
   1611           *
   1612           * @brief       Update control data.
   1613           *
   1614           * @param       extAddr - [in] EXT address
   1615           * @param       state   - [in] new control state
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state )
   \                     ZDSecMgrDeviceCtrlUpdate:
   1620          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1621            ZDSecMgrEntry_t* entry;
   1622            ZDSecMgrCtrl_t*  ctrl;
   1623          
   1624          
   1625            // lookup device entry data
   1626            ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000C                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   AC82         MOV     R4,DPL
   \   000013   AD83         MOV     R5,DPH
   \   000015   12....       LCALL   ??ZDSecMgrEntryLookupExt?relay
   1627          
   1628            if ( entry != NULL )
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7002         JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrDeviceCtrlUpdate_0:
   \   000022   6042         JZ      ??CrossCallReturnLabel_36
   1629            {
   1630              // lookup device control data
   1631              ZDSecMgrCtrlLookup( entry, &ctrl );
   \   000024                ; Setup parameters for call to function ZDSecMgrCtrlLookup
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AC82         MOV     R4,DPL
   \   00002C   AD83         MOV     R5,DPH
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000036   12....       LCALL   ?Subroutine54 & 0xFFFF
   1632          
   1633              // make sure control data is valid
   1634              if ( ctrl != NULL )
   \                     ??CrossCallReturnLabel_91:
   \   000039   7002         JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrDeviceCtrlUpdate_1:
   \   00003D   6027         JZ      ??CrossCallReturnLabel_36
   1635              {
   1636                // possible state transitions
   1637                if ( ctrl->state == ZDSECMGR_CTRL_SKKE_WAIT )
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   E0           MOVX    A,@DPTR
   \   000046   2405         ADD     A,#0x5
   \   000048   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6404         XRL     A,#0x4
   \   00004E   7016         JNZ     ??CrossCallReturnLabel_36
   1638                {
   1639                  if ( state == ZDSECMGR_CTRL_SKKE_DONE )
   \   000050   7405         MOV     A,#0x5
   \   000052   6E           XRL     A,R6
   \   000053   7004         JNZ     ??ZDSecMgrDeviceCtrlUpdate_2
   1640                  {
   1641                    // send the network key
   1642                    ctrl->state = ZDSECMGR_CTRL_TK_NWK;
   \   000055   7407         MOV     A,#0x7
   \   000057   8007         SJMP    ??ZDSecMgrDeviceCtrlUpdate_3
   1643                    ctrl->cntr  = ZDSECMGR_CTRL_TK_NWK_CNTR;
   1644                  }
   1645                  else if ( state == ZDSECMGR_CTRL_SKKE_FAIL )
   \                     ??ZDSecMgrDeviceCtrlUpdate_2:
   \   000059   7406         MOV     A,#0x6
   \   00005B   6E           XRL     A,R6
   \   00005C   7008         JNZ     ??CrossCallReturnLabel_36
   1646                  {
   1647                    // force default timeout in order to cleanup control logic
   1648                    ctrl->state = ZDSECMGR_CTRL_SKKE_FAIL;
   \   00005E   7406         MOV     A,#0x6
   1649                    ctrl->cntr  = ZDSECMGR_CTRL_BASE_CNTR;
   1650                  }
   1651                }
   1652                // timer should be active
   1653              }
   1654            }
   \                     ??ZDSecMgrDeviceCtrlUpdate_3:
   \   000060   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000063   12....       LCALL   ?Subroutine24 & 0xFFFF
   1655          }
   \                     ??CrossCallReturnLabel_36:
   \   000066                REQUIRE ?Subroutine83
   \   000066                ; // Fall through to label ?Subroutine83

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   7404         MOV     A,#0x4
   \   000002   02....       LJMP    ??Subroutine96_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET
   1656          
   1657          void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr );

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1658          void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr )
   \                     APSME_SKA_TimerExpired:
   1659          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1660            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1661            {
   1662              if ( initiator == TRUE )
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   7005         JNZ     ??APSME_SKA_TimerExpired_0
   1663              {
   1664                ZDSecMgrDeviceCtrlUpdate( partExtAddr, ZDSECMGR_CTRL_SKKE_FAIL );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceCtrlUpdate
   \   000009   7906         MOV     R1,#0x6
   \   00000B   12....       LCALL   ??ZDSecMgrDeviceCtrlUpdate?relay
   1665              }
   1666            }
   1667          }
   \                     ??APSME_SKA_TimerExpired_0:
   \   00000E   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1668          
   1669          /******************************************************************************
   1670           * @fn          ZDSecMgrDeviceRemove
   1671           *
   1672           * @brief       Remove device from network.
   1673           *
   1674           * @param       device - [in] ZDSecMgrDevice_t, device info
   1675           *
   1676           * @return      none
   1677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1678          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
   1679          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1680            APSME_RemoveDeviceReq_t remDevReq;
   1681            NLME_LeaveReq_t         leaveReq;
   1682            associated_devices_t*   assoc;
   1683          
   1684          
   1685            // check if parent, remove the device
   1686            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000011   8A..         MOV     ?V0 + 0,R2
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   EE           MOV     A,R6
   \   000016   2402         ADD     A,#0x2
   \   000018   F8           MOV     R0,A
   \   000019   EF           MOV     A,R7
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FA           MOV     R2,A
   \   00001F   E9           MOV     A,R1
   \   000020   FB           MOV     R3,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FE           MOV     R6,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FF           MOV     R7,A
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   6E           XRL     A,R6
   \   000038   7003         JNZ     ??ZDSecMgrDeviceRemove_0
   \   00003A   E5..         MOV     A,?V0 + 1
   \   00003C   6F           XRL     A,R7
   \                     ??ZDSecMgrDeviceRemove_0:
   \   00003D   7057         JNZ     ??ZDSecMgrDeviceRemove_1
   1687            {
   1688              // this is the parent of the device
   1689              leaveReq.extAddr        = device->extAddr;
   \   00003F   12....       LCALL   ?Subroutine18 & 0xFFFF
   1690              leaveReq.removeChildren = FALSE;
   \                     ??CrossCallReturnLabel_138:
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
   1691              leaveReq.rejoin         = FALSE;
   \   000047   7403         MOV     A,#0x3
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   1692          
   1693              // find child association
   1694              assoc = AssocGetWithExt( device->extAddr );
   \   00004E                ; Setup parameters for call to function AssocGetWithExt
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000055   8A..         MOV     ?V0 + 0,R2
   \   000057   8B..         MOV     ?V0 + 1,R3
   \   000059   A8..         MOV     R0,?V0 + 0
   \   00005B   A9..         MOV     R1,?V0 + 1
   1695          
   1696              if ( ( assoc != NULL                            ) &&
   1697                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
   1698                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   00005D   E8           MOV     A,R0
   \   00005E   7001         JNZ     ??ZDSecMgrDeviceRemove_2
   \   000060   E9           MOV     A,R1
   \                     ??ZDSecMgrDeviceRemove_2:
   \   000061   604F         JZ      ??ZDSecMgrDeviceRemove_3
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6044         JZ      ??ZDSecMgrDeviceRemove_3
   \   00006E   C3           CLR     C
   \   00006F   9405         SUBB    A,#0x5
   \   000071   503F         JNC     ??ZDSecMgrDeviceRemove_3
   1699              {
   1700                // check if associated device is authenticated
   1701                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00007F   7404         MOV     A,#0x4
   \   000081   5006         JNC     ??ZDSecMgrDeviceRemove_4
   1702                {
   1703                  leaveReq.silent = FALSE;
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   E4           CLR     A
   \   000087   8005         SJMP    ??ZDSecMgrDeviceRemove_5
   1704                }
   1705                else
   1706                {
   1707                  leaveReq.silent = TRUE;
   \                     ??ZDSecMgrDeviceRemove_4:
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   7401         MOV     A,#0x1
   1708                }
   1709          
   1710                NLME_LeaveReq( &leaveReq );
   1711              }
   1712            }
   \                     ??ZDSecMgrDeviceRemove_5:
   \   00008E   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000091   12....       LCALL   ??NLME_LeaveReq?relay
   \   000094   801C         SJMP    ??ZDSecMgrDeviceRemove_3
   1713            else
   1714            {
   1715              // this is not the parent of the device
   1716              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   000096   7405         MOV     A,#0x5
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   EE           MOV     A,R6
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   EF           MOV     A,R7
   \   00009F   F0           MOVX    @DPTR,A
   1717              remDevReq.childExtAddr = device->extAddr;
   \   0000A0   7407         MOV     A,#0x7
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   1718          
   1719              APSME_RemoveDeviceReq( &remDevReq );
   1720            }
   \                     ??CrossCallReturnLabel_134:
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   AA82         MOV     R2,DPL
   \   0000AD   AB83         MOV     R3,DPH
   \   0000AF   12....       LCALL   ??APSME_RemoveDeviceReq?relay
   1721          }
   \                     ??ZDSecMgrDeviceRemove_3:
   \   0000B2   7409         MOV     A,#0x9
   \   0000B4   80..         SJMP    ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine94_0
   \   000006                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   12....       LCALL   ??AssocGetWithExt?relay
   \   000006   22           RET
   1722          
   1723          /******************************************************************************
   1724           * @fn          ZDSecMgrDeviceValidateSKKE
   1725           *
   1726           * @brief       Decide whether device is allowed for SKKE.
   1727           *
   1728           * @param       device - [in] ZDSecMgrDevice_t, device info
   1729           *
   1730           * @return      ZStatus_t
   1731           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1732          ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateSKKE:
   1733          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1734            ZStatus_t status;
   1735            uint16    ami;
   1736            uint8*    key;
   1737          
   1738          
   1739            // get EXT address
   1740            status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000021   12....       LCALL   ??ZDSecMgrExtAddrLookup?relay
   \   000024   E9           MOV     A,R1
   1741          
   1742            if ( status == ZSuccess )
   \   000025   700D         JNZ     ??CrossCallReturnLabel_42
   1743            {
   1744              // get MASTER key
   1745              status = ZDSecMgrMasterKeyLookup( ami, &key );
   \   000027                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine25 & 0xFFFF
   1746          
   1747              if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_38:
   \   00002F   7003         JNZ     ??CrossCallReturnLabel_42
   1748              {
   1749              //  // check if initiator is Trust Center
   1750              //  if ( device->nwkAddr == APSME_TRUSTCENTER_NWKADDR )
   1751              //  {
   1752              //    // verify NWK key not sent
   1753              //    // devtag.todo
   1754              //    // temporary - add device to internal data
   1755              //    status = ZDSecMgrDeviceEntryAdd( device, ami );
   1756              //  }
   1757              //  else
   1758              //  {
   1759              //    // initiator not Trust Center - End to End SKKE - set policy
   1760              //    // for accepting an SKKE initiation
   1761              //    // temporary - add device to internal data
   1762              //    status = ZDSecMgrDeviceEntryAdd( device, ami );
   1763              //  }
   1764                  status = ZDSecMgrDeviceEntryAdd( device, ami );
   \   000031                ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
   \   000031   12....       LCALL   ?Subroutine27 & 0xFFFF
   1765              }
   1766            }
   1767          
   1768            return status;
   \                     ??CrossCallReturnLabel_42:
   \   000034   02....       LJMP    ?Subroutine83 & 0xFFFF
   1769          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??ZDSecMgrDeviceEntryAdd?relay
   \   000010   22           RET
   1770          
   1771          /******************************************************************************
   1772           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1773           *
   1774           * @brief       Decide whether device is allowed.
   1775           *
   1776           * @param       device - [in] ZDSecMgrDevice_t, device info
   1777           *
   1778           * @return      ZStatus_t
   1779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1780          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1781          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1782          
   1783            ZStatus_t status;
   1784            status = ZSuccess;
   \   000004   7900         MOV     R1,#0x0
   1785          
   1786            (void)device;  // Intentionally unreferenced parameter
   1787            
   1788            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1789            // the trust center to reject any newly joining devices by sending
   1790            // Remove-device to the parents.
   1791            if ( zgSecurePermitJoin == false )
   \   000006   90....       MOV     DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   7002         JNZ     ??ZDSecMgrDeviceValidateRM_0
   1792            {
   1793              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV     R1,#-0x38
   1794            }
   1795          
   1796          
   1797          
   1798          #if 0  // Taken out because the following functionality is only used for test
   1799                 // purpose. A more efficient (above) way is used. It can be put
   1800                 // back in if customers request for a white/black list feature.
   1801                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1802          
   1803            // The following code processes the device black list (stored device list)
   1804            // If the joining device is not part of the forbidden device list
   1805            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1806            // will send Remove-device and ban the device from joining.
   1807          
   1808            uint8     index;
   1809            uint8*    restricted;
   1810          
   1811            // Look through the stored device list - used for restricted devices
   1812            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1813            {
   1814              restricted = ZDSecMgrStoredDeviceList[index];
   1815          
   1816              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1817              {
   1818                // return as unknown device in regards to validation
   1819                status = ZNwkUnknownDevice;
   1820          
   1821                // break from loop
   1822                index = ZDSECMGR_STORED_DEVICES;
   1823              }
   1824            }
   1825          
   1826          #endif
   1827          
   1828            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1829          }
   1830          
   1831          /******************************************************************************
   1832           * @fn          ZDSecMgrDeviceValidateCM (COMMERCIAL MODE)
   1833           *
   1834           * @brief       Decide whether device is allowed.
   1835           *
   1836           * @param       device - [in] ZDSecMgrDevice_t, device info
   1837           *
   1838           * @return      ZStatus_t
   1839           */
   1840          //devtag.pro.security

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1841          ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateCM:
   1842          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1843            ZStatus_t status;
   1844            uint16    ami;
   1845            uint8*    key;
   1846          
   1847          
   1848          //  // check for pre configured setting
   1849          //  if ( device->secure == TRUE )
   1850          //  {
   1851          //    // get EXT address and MASTER key
   1852          //    status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
   1853          //
   1854          //    if ( status == ZSuccess )
   1855          //    {
   1856          //      status = ZDSecMgrMasterKeyLookup( ami, &key );
   1857          //    }
   1858          //  }
   1859          //  else
   1860          //  {
   1861              // implement EXT address and MASTER key policy here -- the total number of
   1862              // Security Manager entries should never exceed the number of EXT addresses
   1863              // and MASTER keys available
   1864          
   1865              // set status based on policy
   1866              //status = ZNwkUnknownDevice;
   1867          
   1868              // set status based on policy
   1869              status = ZSuccess; // ZNwkUnknownDevice;
   1870          
   1871              // get key based on policy
   1872              key = ZDSecMgrTCMasterKey;
   1873          
   1874              // if policy, store new EXT address
   1875              status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \   00000E   EE           MOV     A,R6
   \   00000F   2402         ADD     A,#0x2
   \   000011   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000014                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   8582..       MOV     ?V0 + 2,DPL
   \   00001D   8583..       MOV     ?V0 + 3,DPH
   \   000020   78..         MOV     R0,#?V0 + 2
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   85..82       MOV     DPL,?V0 + 0
   \   000028   8983         MOV     DPH,R1
   \   00002A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   E9           MOV     A,R1
   \   000031   F5..         MOV     ?V0 + 2,A
   1876          
   1877              // set the key
   1878              ZDSecMgrMasterKeyLoad( device->extAddr, key );
   \   000033                ; Setup parameters for call to function ZDSecMgrMasterKeyLoad
   \   000033   7C..         MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
   \   000035   7D..         MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   85..83       MOV     DPH,?V0 + 1
   \   00003D   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000040   12....       LCALL   ??ZDSecMgrMasterKeyLoad?relay
   1879          //  }
   1880          
   1881            // if EXT address and MASTER key available -- add device
   1882            if ( status == ZSuccess )
   \   000043   E5..         MOV     A,?V0 + 2
   \   000045   7006         JNZ     ??ZDSecMgrDeviceValidateCM_0
   1883            {
   1884              // add device to internal data - with control
   1885              status = ZDSecMgrDeviceEntryAdd( device, ami );
   \   000047                ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
   \   000047   12....       LCALL   ?Subroutine27 & 0xFFFF
   1886            }
   \                     ??CrossCallReturnLabel_43:
   \   00004A   E9           MOV     A,R1
   \   00004B   F5..         MOV     ?V0 + 2,A
   1887          
   1888            return status;
   \                     ??ZDSecMgrDeviceValidateCM_0:
   \   00004D   A9..         MOV     R1,?V0 + 2
   \   00004F   7402         MOV     A,#0x2
   \   000051   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   1889          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00000A   12....       LCALL   ??ZDSecMgrAddrStore?relay
   \   00000D   7402         MOV     A,#0x2
   \   00000F   22           RET
   1890          //devtag.pro.security
   1891          #if 0
   1892          ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
   1893          {
   1894            ZStatus_t status;
   1895            uint16    ami;
   1896            uint8*    key;
   1897          
   1898          
   1899            // check for pre configured setting
   1900            if ( device->secure == TRUE )
   1901            {
   1902              // get EXT address and MASTER key
   1903              status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
   1904          
   1905              if ( status == ZSuccess )
   1906              {
   1907                status = ZDSecMgrMasterKeyLookup( ami, &key );
   1908              }
   1909            }
   1910            else
   1911            {
   1912              // implement EXT address and MASTER key policy here -- the total number of
   1913              // Security Manager entries should never exceed the number of EXT addresses
   1914              // and MASTER keys available
   1915          
   1916              // set status based on policy
   1917              status = ZSuccess; // ZNwkUnknownDevice;
   1918          
   1919              // get the address index
   1920              if ( ZDSecMgrExtAddrLookup( device->extAddr, &ami ) != ZSuccess )
   1921              {
   1922                // if policy, store new EXT address
   1923                status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   1924              }
   1925          
   1926              // get the address index
   1927              if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
   1928              {
   1929                // if policy, store new key -- NULL will zero key
   1930                status = ZDSecMgrMasterKeyStore( ami, NULL );
   1931              }
   1932            }
   1933          
   1934            // if EXT address and MASTER key available -- add device
   1935            if ( status == ZSuccess )
   1936            {
   1937              // add device to internal data - with control
   1938              status = ZDSecMgrDeviceEntryAdd( device, ami );
   1939            }
   1940          
   1941            return status;
   1942          }
   1943          #endif
   1944          
   1945          /******************************************************************************
   1946           * @fn          ZDSecMgrDeviceValidate
   1947           *
   1948           * @brief       Decide whether device is allowed.
   1949           *
   1950           * @param       device - [in] ZDSecMgrDevice_t, device info
   1951           *
   1952           * @return      ZStatus_t
   1953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1954          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1955          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1956            ZStatus_t status;
   1957          
   1958          
   1959            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   701F         JNZ     ??ZDSecMgrDeviceValidate_0
   1960            {
   1961              // device may be joining with a secure flag but it is ultimately the Trust
   1962              // Center that decides -- check if expected pre configured device --
   1963              // override settings
   1964              if ( zgPreConfigKeys == TRUE )
   \   00000C   EA           MOV     A,R2
   \   00000D   2406         ADD     A,#0x6
   \   00000F   F8           MOV     R0,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F9           MOV     R1,A
   \   000014   90....       MOV     DPTR,#zgPreConfigKeys
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   7004         JNZ     ??ZDSecMgrDeviceValidate_1
   1965              {
   1966                device->secure = TRUE;
   \   00001C   7401         MOV     A,#0x1
   \   00001E   8001         SJMP    ??ZDSecMgrDeviceValidate_2
   1967              }
   1968              else
   1969              {
   1970                device->secure = FALSE;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000020   E4           CLR     A
   \                     ??ZDSecMgrDeviceValidate_2:
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   F0           MOVX    @DPTR,A
   1971              }
   1972          
   1973              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1974              {
   1975                status = ZDSecMgrDeviceValidateCM( device );
   1976              }
   1977              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1978              {
   1979                status = ZDSecMgrDeviceValidateRM( device );
   \   000026                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   000026   12....       LCALL   ??ZDSecMgrDeviceValidateRM?relay
   \   000029   8002         SJMP    ??ZDSecMgrDeviceValidate_3
   1980              }
   1981            }
   1982            else
   1983            {
   1984              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   00002B   79C8         MOV     R1,#-0x38
   1985            }
   1986          
   1987            return status;
   \                     ??ZDSecMgrDeviceValidate_3:
   \   00002D   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   1988          }
   1989          
   1990          /******************************************************************************
   1991           * @fn          ZDSecMgrDeviceJoin
   1992           *
   1993           * @brief       Try to join this device.
   1994           *
   1995           * @param       device - [in] ZDSecMgrDevice_t, device info
   1996           *
   1997           * @return      ZStatus_t
   1998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1999          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   2000          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2001            ZStatus_t status;
   2002            uint16    ami;
   2003          
   2004            // attempt to validate device
   2005            status = ZDSecMgrDeviceValidate( device );
   \   00000E                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00000E   12....       LCALL   ??ZDSecMgrDeviceValidate?relay
   \   000011   E9           MOV     A,R1
   \   000012   F5..         MOV     ?V0 + 0,A
   2006          
   2007            if ( status == ZSuccess )
   \   000014   7029         JNZ     ??ZDSecMgrDeviceJoin_0
   2008            {
   2009              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2010              {
   2011                ZDSecMgrDeviceCtrlSetup( device );
   2012              }
   2013              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2014              {
   2015                // Add the device to the address manager
   2016                ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \   000016                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   8582..       MOV     ?V0 + 0,DPL
   \   00001F   8583..       MOV     ?V0 + 1,DPH
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   2017                //send the nwk key data to the joining device
   2018                status = ZDSecMgrSendNwkKey( device );
   \   000033                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   ??ZDSecMgrSendNwkKey?relay
   \   00003A   E9           MOV     A,R1
   \   00003B   F5..         MOV     ?V0 + 0,A
   \   00003D   8007         SJMP    ??ZDSecMgrDeviceJoin_1
   2019              }
   2020            }
   2021            else
   2022            {
   2023              // not allowed, remove the device
   2024              ZDSecMgrDeviceRemove( device );
   \                     ??ZDSecMgrDeviceJoin_0:
   \   00003F                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   ??ZDSecMgrDeviceRemove?relay
   2025            }
   2026          
   2027            return status;
   \                     ??ZDSecMgrDeviceJoin_1:
   \   000046   A9..         MOV     R1,?V0 + 0
   \   000048   02....       LJMP    ?Subroutine84 & 0xFFFF
   2028          }
   2029          
   2030          /******************************************************************************
   2031           * @fn          ZDSecMgrDeviceJoinDirect
   2032           *
   2033           * @brief       Try to join this device as a direct child.
   2034           *
   2035           * @param       device - [in] ZDSecMgrDevice_t, device info
   2036           *
   2037           * @return      ZStatus_t
   2038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2039          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   2040          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2041            ZStatus_t status;
   2042          
   2043            status = ZDSecMgrDeviceJoin( device );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000009   12....       LCALL   ??ZDSecMgrDeviceJoin?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   F5..         MOV     ?V0 + 0,A
   2044          
   2045            if ( status == ZSuccess )
   \   00000F   700D         JNZ     ??ZDSecMgrDeviceJoinDirect_0
   2046            {
   2047              // set association status to authenticated
   2048              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   000011                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000011                ; Setup parameters for call to function AssocGetWithShort
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   2049            }
   \                     ??CrossCallReturnLabel_145:
   \   000018   12....       LCALL   ??AssocGetWithShort?relay
   \   00001B   12....       LCALL   ??ZDSecMgrAssocDeviceAuth?relay
   2050          
   2051            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   00001E   A9..         MOV     R1,?V0 + 0
   \   000020   02....       LJMP    ??Subroutine97_0 & 0xFFFF
   2052          }
   2053          
   2054          /******************************************************************************
   2055           * @fn          ZDSecMgrDeviceJoinFwd
   2056           *
   2057           * @brief       Forward join to Trust Center.
   2058           *
   2059           * @param       device - [in] ZDSecMgrDevice_t, device info
   2060           *
   2061           * @return      ZStatus_t
   2062           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2063          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   2064          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2065            ZStatus_t               status;
   2066            APSME_UpdateDeviceReq_t req;
   2067          
   2068          
   2069            // forward any joining device to the Trust Center -- the Trust Center will
   2070            // decide if the device is allowed to join
   2071            status = ZSuccess;
   2072          
   2073            // forward authorization to the Trust Center
   2074            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   2075            req.devAddr    = device->nwkAddr;
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine3 & 0xFFFF
   2076            req.devExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_4:
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2077          
   2078            // set security status, option for router to reject if policy set
   2079            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \                     ??CrossCallReturnLabel_171:
   \   000026   EA           MOV     A,R2
   \   000027   2407         ADD     A,#0x7
   \   000029   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00002C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002E   502E         JNC     ??ZDSecMgrDeviceJoinFwd_0
   2080            {
   2081              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000030   A2E6         MOV     C,0xE0 /* A   */.6
   \   000032   5021         JNC     ??ZDSecMgrDeviceJoinFwd_1
   2082              {
   2083                if ( device->secure == TRUE )
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6401         XRL     A,#0x1
   \   000041   7009         JNZ     ??ZDSecMgrDeviceJoinFwd_2
   2084                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000043   7406         MOV     A,#0x6
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7404         MOV     A,#0x4
   \   00004A   803D         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2085                else
   2086                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7407         MOV     A,#0x7
   \   000053   8034         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2087              }
   2088              else
   2089                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000055   7406         MOV     A,#0x6
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7405         MOV     A,#0x5
   \   00005C   802B         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2090            }
   2091            else
   2092            {
   2093              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   00005E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000060   5020         JNC     ??ZDSecMgrDeviceJoinFwd_4
   2094              {
   2095                if ( device->secure == TRUE )
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   6401         XRL     A,#0x1
   \   00006F   7008         JNZ     ??ZDSecMgrDeviceJoinFwd_5
   2096                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   000071   7406         MOV     A,#0x6
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E4           CLR     A
   \   000077   8010         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2097                else
   2098                  req.status = APSME_UD_STANDARD_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   000079   7406         MOV     A,#0x6
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   7403         MOV     A,#0x3
   \   000080   8007         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2099              }
   2100              else
   2101                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   000082   7406         MOV     A,#0x6
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   7401         MOV     A,#0x1
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   000089   F0           MOVX    @DPTR,A
   2102            }
   2103          
   2104            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2105              req.apsSecure = TRUE;
   2106            else
   2107              req.apsSecure = FALSE;
   \   00008A   7407         MOV     A,#0x7
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E4           CLR     A
   \   000090   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   2108          
   2109            // send and APSME_UPDATE_DEVICE request to the trust center
   2110            status = APSME_UpdateDeviceReq( &req );
   2111          
   2112            return status;
   \                     ??CrossCallReturnLabel_197:
   \   000093   12....       LCALL   ??APSME_UpdateDeviceReq?relay
   \   000096   7408         MOV     A,#0x8
   \   000098   02....       LJMP    ??Subroutine88_0 & 0xFFFF
   2113          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine99_0
   \   000003                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00000A   7404         MOV     A,#0x4
   \   00000C   22           RET
   2114          
   2115          /******************************************************************************
   2116           * @fn          ZDSecMgrDeviceNew
   2117           *
   2118           * @brief       Process a new device.
   2119           *
   2120           * @param       device - [in] ZDSecMgrDevice_t, device info
   2121           *
   2122           * @return      ZStatus_t
   2123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2124          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   2125          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2126            ZStatus_t status;
   2127          
   2128            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2129            {
   2130              // try to join this device
   2131              status = ZDSecMgrDeviceJoinDirect( joiner );
   2132            }
   2133            else
   2134            {
   2135              status = ZDSecMgrDeviceJoinFwd( joiner );
   2136            }
   2137          
   2138            return status;
   \   000004                ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
   \   000004   12....       LCALL   ??ZDSecMgrDeviceJoinDirect?relay
   \   000007   80..         SJMP    ??Subroutine100_0
   2139          }
   2140          
   2141          /******************************************************************************
   2142           * @fn          ZDSecMgrAssocDeviceAuth
   2143           *
   2144           * @brief       Set associated device status to authenticated
   2145           *
   2146           * @param       assoc - [in, out] associated_devices_t
   2147           *
   2148           * @return      none
   2149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2150          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   2151          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2152            if ( assoc != NULL )
   \   000004   EA           MOV     A,R2
   \   000005   7001         JNZ     ??ZDSecMgrAssocDeviceAuth_0
   \   000007   EB           MOV     A,R3
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000008   600D         JZ      ??ZDSecMgrAssocDeviceAuth_1
   2153            {
   2154              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   D2E3         SETB    0xE0 /* A   */.3
   \   000016   F0           MOVX    @DPTR,A
   2155            }
   2156          }
   \                     ??ZDSecMgrAssocDeviceAuth_1:
   \   000017   80..         SJMP    ??Subroutine100_0
   2157          
   2158          /******************************************************************************
   2159           * @fn          ZDSecMgrAuthInitiate
   2160           *
   2161           * @brief       Initiate entity authentication
   2162           *
   2163           * @param       responder - [in] responder EXT address
   2164           *
   2165           * @return      none
   2166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2167          void ZDSecMgrAuthInitiate( uint8* responder )
   \                     ZDSecMgrAuthInitiate:
   2168          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2169            APSME_AuthenticateReq_t req;
   2170          
   2171          
   2172            // make sure NWK address is available
   2173            if ( APSME_LookupNwkAddr( responder, &req.nwkAddr ) )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   601F         JZ      ??ZDSecMgrAuthInitiate_0
   2174            {
   2175              // set request fields
   2176              req.extAddr   = responder;
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   2177              req.action    = APSME_EA_INITIATE;
   \   000028   7406         MOV     A,#0x6
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   2178              req.challenge = NULL;
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   2179          
   2180              // start EA processing
   2181              APSME_AuthenticateReq( &req );
   2182            }
   \                     ??CrossCallReturnLabel_198:
   \   00003A   12....       LCALL   ??APSME_AuthenticateReq?relay
   2183          }
   \                     ??ZDSecMgrAuthInitiate_0:
   \   00003D   7407         MOV     A,#0x7
   \   00003F   02....       LJMP    ??Subroutine96_0 & 0xFFFF
   2184          
   2185          /******************************************************************************
   2186           * @fn          ZDSecMgrAuthNwkKey
   2187           *
   2188           * @brief       Handle next step in authentication process
   2189           *
   2190           * @param       none
   2191           *
   2192           * @return      none
   2193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2194          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   2195          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2196            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   700C         JNZ     ??ZDSecMgrAuthNwkKey_0
   2197            {
   2198              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2199              {
   2200                uint8 parent[Z_EXTADDR_LEN];
   2201          
   2202                // get parent's EXT address
   2203                NLME_GetCoordExtAddr( parent );
   2204          
   2205                // begin entity authentication with parent
   2206                ZDSecMgrAuthInitiate( parent );
   2207              }
   2208              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2209              {
   2210                // inform ZDO that device has been authenticated
   2211                osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV     R2,#-0x80
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   ??osal_set_event?relay
   2212              }
   2213            }
   2214          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000018   80..         SJMP    ??Subroutine100_0
   2215          
   2216          /******************************************************************************
   2217           * PUBLIC FUNCTIONS
   2218           */
   2219          /******************************************************************************
   2220           * @fn          ZDSecMgrInit
   2221           *
   2222           * @brief       Initialize ZigBee Device Security Manager.
   2223           *
   2224           * @param       state - device initialization state
   2225           *
   2226           * @return      none
   2227           */
   2228          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   2229          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   2230          void ZDSecMgrAddrMgrCB( uint8           update,
   2231                                  AddrMgrEntry_t* newEntry,
   2232                                  AddrMgrEntry_t* oldEntry )
   2233          {
   2234            (void)update;
   2235            (void)newEntry;
   2236            (void)oldEntry;
   2237          }
   2238          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   2239          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function APSME_SecurityNM
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function APSME_SecurityNM
   \   000004   12....       LCALL   ??APSME_SecurityNM?relay
   \   000007                REQUIRE ??Subroutine100_0
   \   000007                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2240          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   \   000000   02....       LJMP    ?Subroutine72 & 0xFFFF
   2241          {
   2242            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
   2243                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
   2244            {
   2245              // initialize sub modules
   2246              ZDSecMgrMasterKeyInit();
   2247              ZDSecMgrEntryInit(state);
   2248          
   2249              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2250              {
   2251                ZDSecMgrCtrlInit();
   2252              }
   2253          
   2254              // register with Address Manager
   2255              #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   2256              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   2257              #endif
   2258            }
   2259          
   2260            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2261            {
   2262              // configure SKA slot data
   2263              APSME_SKA_SlotInit( ZDSECMGR_SKA_SLOT_MAX );
   2264            }
   2265            else if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2266            {
   2267              APSME_TCLinkKeyInit();  
   2268              APSME_TCAddrSetup( zgTrustCenterAddr );    
   2269            
   2270            }
   2271          
   2272            if ( ZG_SECURE_ENABLED )
   2273            {
   2274              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2275              {
   2276                // setup joining permissions
   2277                ZDSecMgrPermitJoiningEnabled = TRUE;
   2278                ZDSecMgrPermitJoiningTimed   = FALSE;
   2279              }
   2280            }
   2281          
   2282            // configure security based on security mode and type of device
   2283            ZDSecMgrConfig();
   2284          }
   2285          
   2286          /******************************************************************************
   2287           * @fn          ZDSecMgrConfig
   2288           *
   2289           * @brief       Configure ZigBee Device Security Manager.
   2290           *
   2291           * @param       none
   2292           *
   2293           * @return      none
   2294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2295          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   \   000000   02....       LJMP    ?Subroutine72 & 0xFFFF
   2296          {
   2297            if ( ZG_SECURE_ENABLED )
   2298            {
   2299              SSP_Init();
   2300          
   2301              if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
   2302                  || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
   2303              {
   2304                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2305                {
   2306                  // COMMERCIAL MODE - COORDINATOR DEVICE
   2307                  APSME_SecurityCM_CD();
   2308                }
   2309                else if ( ZSTACK_ROUTER_BUILD )
   2310                {
   2311                  // COMMERCIAL MODE - ROUTER DEVICE
   2312                  APSME_SecurityCM_RD();
   2313                }
   2314                else
   2315                {
   2316                  // COMMERCIAL MODE - END DEVICE
   2317                  APSME_SecurityCM_ED();
   2318                }
   2319              }
   2320              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2321              {
   2322                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2323                {
   2324                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   2325                  APSME_SecurityRM_CD();
   2326                }
   2327                else if ( ZSTACK_ROUTER_BUILD )
   2328                {
   2329                  // RESIDENTIAL MODE - ROUTER DEVICE
   2330                  APSME_SecurityRM_RD();
   2331                }
   2332                else
   2333                {
   2334                  // RESIDENTIAL MODE - END DEVICE
   2335                  APSME_SecurityRM_ED();
   2336                }
   2337              }
   2338            }
   2339            else
   2340            {
   2341              // NO SECURITY
   2342              APSME_SecurityNM();
   2343            }
   2344          }
   2345          
   2346          /******************************************************************************
   2347           * @fn          ZDSecMgrPermitJoining
   2348           *
   2349           * @brief       Process request to change joining permissions.
   2350           *
   2351           * @param       duration - [in] timed duration for join in seconds
   2352           *                         - 0x00 not allowed
   2353           *                         - 0xFF allowed without timeout
   2354           *
   2355           * @return      uint8 - success(TRUE:FALSE)
   2356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2357          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   2358          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2359            uint8 accept;
   2360          
   2361          
   2362            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000008   F0           MOVX    @DPTR,A
   2363          
   2364            if ( duration > 0 )
   \   000009   E9           MOV     A,R1
   \   00000A   6012         JZ      ??ZDSecMgrPermitJoining_0
   2365            {
   2366              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00000C   7401         MOV     A,#0x1
   \   00000E   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000011   F0           MOVX    @DPTR,A
   2367          
   2368              if ( duration != 0xFF )
   \   000012   74FF         MOV     A,#-0x1
   \   000014   69           XRL     A,R1
   \   000015   600C         JZ      ??ZDSecMgrPermitJoining_1
   2369              {
   2370                ZDSecMgrPermitJoiningTimed = TRUE;
   \   000017   7401         MOV     A,#0x1
   \   000019   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   00001C   8004         SJMP    ??ZDSecMgrPermitJoining_2
   2371              }
   2372            }
   2373            else
   2374            {
   2375              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   00001E   E4           CLR     A
   \   00001F   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \                     ??ZDSecMgrPermitJoining_2:
   \   000022   F0           MOVX    @DPTR,A
   2376            }
   2377          
   2378            accept = TRUE;
   2379          
   2380            return accept;
   \                     ??ZDSecMgrPermitJoining_1:
   \   000023   7901         MOV     R1,#0x1
   \   000025   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   2381          }
   2382          
   2383          /******************************************************************************
   2384           * @fn          ZDSecMgrPermitJoiningTimeout
   2385           *
   2386           * @brief       Process permit joining timeout
   2387           *
   2388           * @param       none
   2389           *
   2390           * @return      none
   2391           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2392          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   2393          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2394            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7009         JNZ     ??ZDSecMgrPermitJoiningTimeout_0
   2395            {
   2396              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   E4           CLR     A
   \   00000D   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000010   F0           MOVX    @DPTR,A
   2397              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000011   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000014   F0           MOVX    @DPTR,A
   2398            }
   2399          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000015   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   2400          
   2401          /******************************************************************************
   2402           * @fn          ZDSecMgrNewDeviceEvent
   2403           *
   2404           * @brief       Process a the new device event, if found reset new device
   2405           *              event/timer.
   2406           *
   2407           * @param       none
   2408           *
   2409           * @return      uint8 - found(TRUE:FALSE)
   2410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2411          uint8 ZDSecMgrNewDeviceEvent( void )
   \                     ZDSecMgrNewDeviceEvent:
   2412          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2413            uint8                 found;
   2414            ZDSecMgrDevice_t      device;
   2415            AddrMgrEntry_t        addrEntry;
   2416            associated_devices_t* assoc;
   2417            ZStatus_t             status;
   2418          
   2419            // initialize return results
   2420            found = FALSE;
   \   00000A   75..00       MOV     ?V0 + 0,#0x0
   2421          
   2422            // look for device in the security init state
   2423            assoc = AssocMatchDeviceStatus( DEV_SEC_INIT_STATUS );
   \   00000D                ; Setup parameters for call to function AssocMatchDeviceStatus
   \   00000D   7904         MOV     R1,#0x4
   \   00000F   12....       LCALL   ??AssocMatchDeviceStatus?relay
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
   \   000016   AE..         MOV     R6,?V0 + 2
   \   000018   AF..         MOV     R7,?V0 + 3
   2424          
   2425            if ( assoc != NULL )
   \   00001A   EE           MOV     A,R6
   \   00001B   7001         JNZ     ??ZDSecMgrNewDeviceEvent_0
   \   00001D   EF           MOV     A,R7
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??ZDSecMgrNewDeviceEvent_1 & 0xFFFF
   2426            {
   2427              // device found
   2428              found = TRUE;
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   2429          
   2430              // check for preconfigured security
   2431              if ( zgPreConfigKeys == TRUE )
   \   000026   90....       MOV     DPTR,#zgPreConfigKeys
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6401         XRL     A,#0x1
   \   00002C   7003         JNZ     ??ZDSecMgrNewDeviceEvent_2
   2432              {
   2433                // set association status to authenticated
   2434                ZDSecMgrAssocDeviceAuth( assoc );
   \   00002E                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002E   12....       LCALL   ??ZDSecMgrAssocDeviceAuth?relay
   2435              }
   2436          
   2437              // set up device info
   2438              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   000031   740A         MOV     A,#0xa
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   2439              addrEntry.index = assoc->addrIdx;
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000041   7415         MOV     A,#0x15
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   2440              AddrMgrEntryGet( &addrEntry );
   \                     ??CrossCallReturnLabel_211:
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??AddrMgrEntryGet?relay
   2441          
   2442              device.nwkAddr    = assoc->shortAddr;
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   12....       LCALL   ?Subroutine19 & 0xFFFF
   2443              device.extAddr    = addrEntry.extAddr;
   \                     ??CrossCallReturnLabel_179:
   \   00005A   740D         MOV     A,#0xd
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   A882         MOV     R0,DPL
   \   000061   A983         MOV     R1,DPH
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2444              device.parentAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_172:
   \   00006B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006B   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00006E   7404         MOV     A,#0x4
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine13 & 0xFFFF
   2445              device.secure     = FALSE;
   \                     ??CrossCallReturnLabel_20:
   \   000076   7406         MOV     A,#0x6
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
   2446              device.devStatus  = assoc->devStatus;
   \   00007D   EE           MOV     A,R6
   \   00007E   2405         ADD     A,#0x5
   \   000080   F8           MOV     R0,A
   \   000081   EF           MOV     A,R7
   \   000082   3400         ADDC    A,#0x0
   \   000084   F9           MOV     R1,A
   \   000085   E8           MOV     A,R0
   \   000086   FE           MOV     R6,A
   \   000087   E9           MOV     A,R1
   \   000088   FF           MOV     R7,A
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   C0E0         PUSH    A
   \   000090   7407         MOV     A,#0x7
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   D0E0         POP     A
   \   000097   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   2447          
   2448              // process new device
   2449              status = ZDSecMgrDeviceNew( &device );
   \                     ??CrossCallReturnLabel_199:
   \   00009A   12....       LCALL   ??ZDSecMgrDeviceNew?relay
   \   00009D   E9           MOV     A,R1
   \   00009E   FA           MOV     R2,A
   2450          
   2451              if ( status == ZSuccess )
   \   00009F   700A         JNZ     ??ZDSecMgrNewDeviceEvent_3
   2452              {
   2453                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   C2E2         CLR     0xE0 /* A   */.2
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   8011         SJMP    ??ZDSecMgrNewDeviceEvent_1
   2454              }
   2455              else if ( status == ZNwkUnknownDevice )
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   0000AB   74C8         MOV     A,#-0x38
   \   0000AD   6A           XRL     A,R2
   \   0000AE   700C         JNZ     ??ZDSecMgrNewDeviceEvent_1
   2456              {
   2457                AssocRemove( addrEntry.extAddr );
   \   0000B0                ; Setup parameters for call to function AssocRemove
   \   0000B0   740D         MOV     A,#0xd
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   AA82         MOV     R2,DPL
   \   0000B7   AB83         MOV     R3,DPH
   \   0000B9   12....       LCALL   ??AssocRemove?relay
   2458              }
   2459            }
   2460          
   2461            return found;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   0000BC   A9..         MOV     R1,?V0 + 0
   \   0000BE   7417         MOV     A,#0x17
   \   0000C0   80..         SJMP    ??Subroutine101_0
   2462          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0
   2463          
   2464          /******************************************************************************
   2465           * @fn          ZDSecMgrEvent
   2466           *
   2467           * @brief       Handle ZDO Security Manager event/timer(ZDO_SECMGR_EVENT).
   2468           *
   2469           * @param       none
   2470           *
   2471           * @return      none
   2472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2473          void ZDSecMgrEvent( void )
   \                     ZDSecMgrEvent:
   2474          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2475            uint8            action;
   2476            uint8            restart;
   2477            uint16           index;
   2478            AddrMgrEntry_t   entry;
   2479            ZDSecMgrDevice_t device;
   2480          
   2481          
   2482            // verify data is available
   2483            if ( ZDSecMgrCtrlData != NULL )
   \   00000A   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7002         JNZ     ??ZDSecMgrEvent_0
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrEvent_0:
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??ZDSecMgrEvent_1 & 0xFFFF
   2484            {
   2485              action  = FALSE;
   \   000017   75..00       MOV     ?V0 + 1,#0x0
   2486              restart = FALSE;
   \   00001A   75..00       MOV     ?V0 + 0,#0x0
   2487          
   2488              // update all the counters
   2489              for ( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
   \   00001D   7E00         MOV     R6,#0x0
   \   00001F   7F00         MOV     R7,#0x0
   2490              {
   2491                if ( ZDSecMgrCtrlData[index].state !=  ZDSECMGR_CTRL_NONE )
   \                     ??ZDSecMgrEvent_2:
   \   000021   EE           MOV     A,R6
   \   000022   F8           MOV     R0,A
   \   000023   EF           MOV     A,R7
   \   000024   F9           MOV     R1,A
   \   000025   E8           MOV     A,R0
   \   000026   75F007       MOV     B,#0x7
   \   000029   A4           MUL     AB
   \   00002A   F8           MOV     R0,A
   \   00002B   AAF0         MOV     R2,B
   \   00002D   75F007       MOV     B,#0x7
   \   000030   E9           MOV     A,R1
   \   000031   A4           MUL     AB
   \   000032   2A           ADD     A,R2
   \   000033   F9           MOV     R1,A
   \   000034   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000037   E0           MOVX    A,@DPTR
   \   000038   28           ADD     A,R0
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   39           ADDC    A,R1
   \   00003D   FB           MOV     R3,A
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   7003         JNZ     $+5
   \   00004A   02....       LJMP    ??ZDSecMgrEvent_3 & 0xFFFF
   2492                {
   2493                  if ( ZDSecMgrCtrlData[index].cntr != 0 )
   \   00004D   EA           MOV     A,R2
   \   00004E   2406         ADD     A,#0x6
   \   000050   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000053   6002         JZ      ??ZDSecMgrEvent_4
   2494                  {
   2495                    ZDSecMgrCtrlData[index].cntr--;
   \   000055   14           DEC     A
   \   000056   F0           MOVX    @DPTR,A
   2496                  }
   2497          
   2498                  if ( ( action == FALSE ) && ( ZDSecMgrCtrlData[index].cntr == 0 ) )
   \                     ??ZDSecMgrEvent_4:
   \   000057   E5..         MOV     A,?V0 + 1
   \   000059   6003         JZ      $+5
   \   00005B   02....       LJMP    ??ZDSecMgrEvent_5 & 0xFFFF
   \   00005E   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000061   E0           MOVX    A,@DPTR
   \   000062   28           ADD     A,R0
   \   000063   F8           MOV     R0,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   39           ADDC    A,R1
   \   000067   F9           MOV     R1,A
   \   000068   8882         MOV     DPL,R0
   \   00006A   8983         MOV     DPH,R1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   706D         JNZ     ??ZDSecMgrEvent_5
   2499                  {
   2500                    action = TRUE;
   \   000075   75..01       MOV     ?V0 + 1,#0x1
   2501          
   2502                    // update from control data
   2503                    device.parentAddr = ZDSecMgrCtrlData[index].parentAddr;
   \   000078   8882         MOV     DPL,R0
   \   00007A   8983         MOV     DPH,R1
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   12....       LCALL   ?Subroutine13 & 0xFFFF
   2504                    device.secure     = ZDSecMgrCtrlData[index].secure;
   \                     ??CrossCallReturnLabel_21:
   \   000089   8882         MOV     DPL,R0
   \   00008B   8983         MOV     DPH,R1
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   C0E0         PUSH    A
   \   000094   7406         MOV     A,#0x6
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   D0E0         POP     A
   \   00009B   F0           MOVX    @DPTR,A
   2505                    device.ctrl       = &ZDSecMgrCtrlData[index];
   \   00009C   7408         MOV     A,#0x8
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   2506          
   2507                    // set the user and address index
   2508                    entry.user  = ADDRMGR_USER_SECURITY;
   \                     ??CrossCallReturnLabel_212:
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   F0           MOVX    @DPTR,A
   2509                    entry.index = ZDSecMgrCtrlData[index].entry->ami;
   \   0000AA   8882         MOV     DPL,R0
   \   0000AC   8983         MOV     DPH,R1
   \   0000AE   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000B1   F9           MOV     R1,A
   \   0000B2   7415         MOV     A,#0x15
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   2510          
   2511                    // get the address data
   2512                    AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_213:
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   AA82         MOV     R2,DPL
   \   0000BF   AB83         MOV     R3,DPH
   \   0000C1   12....       LCALL   ??AddrMgrEntryGet?relay
   2513          
   2514                    // set device address data
   2515                    device.nwkAddr = entry.nwkAddr;
   \   0000C4   740B         MOV     A,#0xb
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine19 & 0xFFFF
   2516                    device.extAddr = entry.extAddr;
   \                     ??CrossCallReturnLabel_180:
   \   0000CC   740D         MOV     A,#0xd
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   A882         MOV     R0,DPL
   \   0000D3   A983         MOV     R1,DPH
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?Subroutine0 & 0xFFFF
   2517          
   2518                    // update from entry data
   2519                    ZDSecMgrDeviceCtrlHandler( &device );
   2520                  }
   \                     ??CrossCallReturnLabel_0:
   \   0000DD   12....       LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
   \   0000E0   8003         SJMP    ??ZDSecMgrEvent_3
   2521                  else
   2522                  {
   2523                    restart = TRUE;
   \                     ??ZDSecMgrEvent_5:
   \   0000E2   75..01       MOV     ?V0 + 0,#0x1
   2524                  }
   2525                }
   2526              }
   \                     ??ZDSecMgrEvent_3:
   \   0000E5   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000E8   5003         JNC     $+5
   \   0000EA   02....       LJMP    ??ZDSecMgrEvent_2 & 0xFFFF
   2527          
   2528              // check for timer restart
   2529              if ( restart == TRUE )
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   65..         XRL     A,?V0 + 0
   \   0000F1   7010         JNZ     ??ZDSecMgrEvent_1
   2530              {
   2531                osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );      
   \   0000F3                ; Setup parameters for call to function osal_start_timerEx
   \   0000F3   7C64         MOV     R4,#0x64
   \   0000F5   7D00         MOV     R5,#0x0
   \   0000F7   7A00         MOV     R2,#0x0
   \   0000F9   7B01         MOV     R3,#0x1
   \   0000FB   90....       MOV     DPTR,#ZDAppTaskID
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   12....       LCALL   ??osal_start_timerEx?relay
   2532              }
   2533            }
   2534          }
   \                     ??ZDSecMgrEvent_1:
   \   000103   7417         MOV     A,#0x17
   \   000105   02....       LJMP    ??Subroutine92_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000007   22           RET
   2535          
   2536          /******************************************************************************
   2537           * @fn          ZDSecMgrEstablishKeyCfm
   2538           *
   2539           * @brief       Process the ZDO_EstablishKeyCfm_t message.
   2540           *
   2541           * @param       cfm - [in] ZDO_EstablishKeyCfm_t confirmation
   2542           *
   2543           * @return      none
   2544           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2545          void ZDSecMgrEstablishKeyCfm( ZDO_EstablishKeyCfm_t* cfm )
   \                     ZDSecMgrEstablishKeyCfm:
   2546          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2547            // send the NWK key
   2548            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2549            {
   2550              // update control for specified EXT address
   2551              ZDSecMgrDeviceCtrlUpdate( cfm->partExtAddr, ZDSECMGR_CTRL_SKKE_DONE );
   \   000004                ; Setup parameters for call to function ZDSecMgrDeviceCtrlUpdate
   \   000004   7905         MOV     R1,#0x5
   \   000006   EA           MOV     A,R2
   \   000007   2402         ADD     A,#0x2
   \   000009   0A           INC     R2
   \   00000A   0A           INC     R2
   \   00000B   EB           MOV     A,R3
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   ??ZDSecMgrDeviceCtrlUpdate?relay
   2552            }
   2553            else
   2554            {
   2555              // this should be done when receiving the NWK key
   2556              // if devState ==
   2557              //if ( devState == DEV_END_DEVICE_UNAUTH )
   2558                  //osal_set_event( ZDAppTaskID, ZDO_DEVICE_AUTH );
   2559          
   2560              // if not in joining state -- this should trigger an event for an
   2561              // end point that requested SKKE
   2562              // if ( devState == DEV_END_DEVICE )
   2563             //       devState == DEV_ROUTER;
   2564          
   2565            }
   2566          }
   \   000012   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   2567          
   2568          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2569          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   2570          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2571            uint8  match;
   2572            uint8  lookup[Z_EXTADDR_LEN];
   2573          
   2574            match = FALSE;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   2575          
   2576            if ( AddrMgrExtAddrLookup( APSME_TRUSTCENTER_NWKADDR, lookup ) )
   \   000011                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   AC82         MOV     R4,DPL
   \   000019   AD83         MOV     R5,DPH
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   ??AddrMgrExtAddrLookup?relay
   \   000022   E9           MOV     A,R1
   \   000023   6014         JZ      ??ZDSecMgrTCExtAddrCheck_0
   2577            {
   2578              match = AddrMgrExtAddrEqual( lookup, extAddr );
   \   000025                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   EF           MOV     A,R7
   \   000028   FD           MOV     R5,A
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   AA82         MOV     R2,DPL
   \   000031   AB83         MOV     R3,DPH
   \   000033   12....       LCALL   ??AddrMgrExtAddrEqual?relay
   \   000036   E9           MOV     A,R1
   \   000037   F5..         MOV     ?V0 + 0,A
   2579            }
   2580          
   2581            return match;
   \                     ??ZDSecMgrTCExtAddrCheck_0:
   \   000039   A9..         MOV     R1,?V0 + 0
   \   00003B   7408         MOV     A,#0x8
   \   00003D   02....       LJMP    ??Subroutine96_0 & 0xFFFF
   2582          }
   2583          
   2584          void ZDSecMgrTCDataLoad( uint8* extAddr );

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2585          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   2586          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2587            uint16 ami;
   2588            uint8* key;
   2589          
   2590            if ( !ZDSecMgrTCDataLoaded )
   \   00000A   90....       MOV     DPTR,#ZDSecMgrTCDataLoaded
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7043         JNZ     ??ZDSecMgrTCDataLoad_0
   2591            {
   2592              if ( ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami ) == ZSuccess )
   \   000010                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   8582..       MOV     ?V0 + 0,DPL
   \   000019   8583..       MOV     ?V0 + 1,DPH
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   EA           MOV     A,R2
   \   000022   FC           MOV     R4,A
   \   000023   EB           MOV     A,R3
   \   000024   FD           MOV     R5,A
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \   000029   12....       LCALL   ??ZDSecMgrAddrStore?relay
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   E9           MOV     A,R1
   \   000032   7019         JNZ     ??CrossCallReturnLabel_66
   2593              {
   2594                // if preconfigured load key
   2595                if ( zgPreConfigKeys == TRUE )
   \   000034   90....       MOV     DPTR,#zgPreConfigKeys
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6401         XRL     A,#0x1
   \   00003A   7011         JNZ     ??CrossCallReturnLabel_66
   2596                {
   2597                  if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
   \   00003C                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000044   6007         JZ      ??CrossCallReturnLabel_66
   2598                  {
   2599                    ZDSecMgrMasterKeyStore( ami, ZDSecMgrTCMasterKey );
   \   000046                ; Setup parameters for call to function ZDSecMgrMasterKeyStore
   \   000046   7C..         MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
   \   000048   7D..         MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
   \   00004A   12....       LCALL   ?Subroutine40 & 0xFFFF
   2600                  }
   2601                }
   2602              }
   2603          
   2604              ZDSecMgrTCDataLoaded = TRUE;
   \                     ??CrossCallReturnLabel_66:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   90....       MOV     DPTR,#ZDSecMgrTCDataLoaded
   \   000052   F0           MOVX    @DPTR,A
   2605            }
   2606          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000053   7404         MOV     A,#0x4
   \   000055   02....       LJMP    ??Subroutine92_0 & 0xFFFF
   2607          
   2608          /******************************************************************************
   2609           * @fn          ZDSecMgrEstablishKeyInd
   2610           *
   2611           * @brief       Process the ZDO_EstablishKeyInd_t message.
   2612           *
   2613           * @param       ind - [in] ZDO_EstablishKeyInd_t indication
   2614           *
   2615           * @return      none
   2616           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine103_0
   \   000006                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2617          void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
   \                     ZDSecMgrEstablishKeyInd:
   2618          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2619            ZDSecMgrDevice_t        device;
   2620            APSME_EstablishKeyRsp_t rsp;
   2621          
   2622          
   2623            // load Trust Center data if needed
   2624            ZDSecMgrTCDataLoad( ind->initExtAddr );
   \   00000E   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000011                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   000011   AA..         MOV     R2,?V0 + 0
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??ZDSecMgrTCDataLoad?relay
   2625          
   2626            if ( ZDSecMgrTCExtAddrCheck( ind->initExtAddr ) )
   \   000017   EE           MOV     A,R6
   \   000018   2402         ADD     A,#0x2
   \   00001A   F8           MOV     R0,A
   \   00001B   EF           MOV     A,R7
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F9           MOV     R1,A
   \   00001F   88..         MOV     ?V0 + 2,R0
   \   000021   89..         MOV     ?V0 + 3,R1
   \   000023                ; Setup parameters for call to function ZDSecMgrTCExtAddrCheck
   \   000023   AA..         MOV     R2,?V0 + 0
   \   000025   AB..         MOV     R3,?V0 + 1
   \   000027   12....       LCALL   ??ZDSecMgrTCExtAddrCheck?relay
   \   00002A   E9           MOV     A,R1
   \   00002B   6016         JZ      ??ZDSecMgrEstablishKeyInd_0
   2627            {
   2628              //IF (ind->srcAddr == APSME_TRUSTCENTER_NWKADDR)
   2629              //OR
   2630              //!ZDSecMgrTCAuthenticated
   2631              //devtag.0604.critical
   2632                  //how is the parentAddr used here
   2633          
   2634              // initial SKKE from Trust Center via parent
   2635              device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   00002D   7407         MOV     A,#0x7
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine9 & 0xFFFF
   2636              device.parentAddr = ind->srcAddr;
   2637            }
   \                     ??CrossCallReturnLabel_13:
   \   000038   740B         MOV     A,#0xb
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E8           MOV     A,R0
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E9           MOV     A,R1
   \   000041   8016         SJMP    ??ZDSecMgrEstablishKeyInd_1
   2638            else
   2639            {
   2640              // Trust Center direct or E2E SKKE
   2641              device.nwkAddr    = ind->srcAddr;
   \                     ??ZDSecMgrEstablishKeyInd_0:
   \   000043   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000046   7407         MOV     A,#0x7
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2642              device.parentAddr = INVALID_NODE_ADDR;
   \                     ??CrossCallReturnLabel_173:
   \   00004E   740B         MOV     A,#0xb
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   74FE         MOV     A,#-0x2
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   74FF         MOV     A,#-0x1
   \                     ??ZDSecMgrEstablishKeyInd_1:
   \   000059   F0           MOVX    @DPTR,A
   2643            }
   2644          
   2645            device.extAddr = ind->initExtAddr;
   \   00005A   7409         MOV     A,#0x9
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   2646            //devtag.pro.security.0724.todo - verify usage
   2647            device.secure  = ind->nwkSecure;
   \                     ??CrossCallReturnLabel_228:
   \   000062   EE           MOV     A,R6
   \   000063   240E         ADD     A,#0xe
   \   000065   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000068   C0E0         PUSH    A
   \   00006A   740D         MOV     A,#0xd
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   2648          
   2649            // validate device for SKKE
   2650            if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
   \   000072                ; Setup parameters for call to function ZDSecMgrDeviceValidateSKKE
   \   000072   7407         MOV     A,#0x7
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   AA82         MOV     R2,DPL
   \   000079   AB83         MOV     R3,DPH
   \   00007B   12....       LCALL   ??ZDSecMgrDeviceValidateSKKE?relay
   \   00007E   E9           MOV     A,R1
   \   00007F   7009         JNZ     ??ZDSecMgrEstablishKeyInd_2
   2651            {
   2652              rsp.accept = TRUE;
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   7401         MOV     A,#0x1
   \   000088   8006         SJMP    ??ZDSecMgrEstablishKeyInd_3
   2653            }
   2654            else
   2655            {
   2656              rsp.accept = FALSE;
   \                     ??ZDSecMgrEstablishKeyInd_2:
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E4           CLR     A
   2657            }
   \                     ??ZDSecMgrEstablishKeyInd_3:
   \   000090   12....       LCALL   ?Subroutine9 & 0xFFFF
   2658          
   2659            rsp.dstAddr     = ind->srcAddr;
   \                     ??CrossCallReturnLabel_14:
   \   000093   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   2660            rsp.initExtAddr = &ind->initExtAddr[0];
   \                     ??CrossCallReturnLabel_178:
   \   000096   EE           MOV     A,R6
   \   000097   2404         ADD     A,#0x4
   \   000099   F8           MOV     R0,A
   \   00009A   EF           MOV     A,R7
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   F9           MOV     R1,A
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2661            //devtag.0604.todo - remove obsolete
   2662            rsp.apsSecure   = ind->apsSecure;
   \                     ??CrossCallReturnLabel_174:
   \   0000A6   EE           MOV     A,R6
   \   0000A7   240D         ADD     A,#0xd
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000AF   C0E0         PUSH    A
   \   0000B1   7405         MOV     A,#0x5
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   D0E0         POP     A
   \   0000B8   12....       LCALL   ?Subroutine7 & 0xFFFF
   2663            rsp.nwkSecure   = ind->nwkSecure;
   \                     ??CrossCallReturnLabel_12:
   \   0000BB   C0E0         PUSH    A
   \   0000BD   7406         MOV     A,#0x6
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   D0E0         POP     A
   \   0000C4   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   2664          
   2665            APSME_EstablishKeyRsp( &rsp );
   \                     ??CrossCallReturnLabel_200:
   \   0000C7   12....       LCALL   ??APSME_EstablishKeyRsp?relay
   2666          }
   \   0000CA   7411         MOV     A,#0x11
   \   0000CC   02....       LJMP    ??Subroutine101_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   88..         MOV     ?V0 + 0,R0
   \   000007   89..         MOV     ?V0 + 1,R1
   \   000009                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000009   8882         MOV     DPL,R0
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET
   2667          //devtag.pro.security
   2668          #if 0
   2669          void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
   2670          {
   2671            ZDSecMgrDevice_t        device;
   2672            APSME_EstablishKeyRsp_t rsp;
   2673          
   2674          
   2675            device.extAddr = ind->initExtAddr;
   2676            device.secure  = ind->secure;
   2677          
   2678            if ( ind->secure == FALSE )
   2679            {
   2680              // SKKE from Trust Center is not secured between child and parent
   2681              device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
   2682              device.parentAddr = ind->srcAddr;
   2683            }
   2684            else
   2685            {
   2686              // SKKE from initiator should be secured
   2687              device.nwkAddr    = ind->srcAddr;
   2688              device.parentAddr = INVALID_NODE_ADDR;
   2689            }
   2690          
   2691            rsp.dstAddr     = ind->srcAddr;
   2692            rsp.initExtAddr = &ind->initExtAddr[0];
   2693            rsp.secure      = ind->secure;
   2694          
   2695            // validate device for SKKE
   2696            if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
   2697            {
   2698              rsp.accept = TRUE;
   2699            }
   2700            else
   2701            {
   2702              rsp.accept = FALSE;
   2703            }
   2704          
   2705            APSME_EstablishKeyRsp( &rsp );
   2706          }
   2707          #endif
   2708          
   2709          /******************************************************************************
   2710           * @fn          ZDSecMgrTransportKeyInd
   2711           *
   2712           * @brief       Process the ZDO_TransportKeyInd_t message.
   2713           *
   2714           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   2715           *
   2716           * @return      none
   2717           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2718          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   2719          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2720            uint8 index;
   2721          
   2722            // load Trust Center data if needed
   2723            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \   000009                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   000009   EE           MOV     A,R6
   \   00000A   2416         ADD     A,#0x16
   \   00000C   FA           MOV     R2,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   ??ZDSecMgrTCDataLoad?relay
   2724          
   2725            if ( ind->keyType == KEY_TYPE_TC_MASTER )
   \   000014   EE           MOV     A,R6
   \   000015   2404         ADD     A,#0x4
   \   000017   F582         MOV     DPL,A
   \   000019   EF           MOV     A,R7
   \   00001A   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00001D   6069         JZ      ??ZDSecMgrTransportKeyInd_0
   2726            {
   2727              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2728              //ZDSecMgrTCMasterKey( ind );
   2729              {
   2730                if ( zgPreConfigKeys != TRUE )
   2731                {
   2732                  // devtag.pro.security.todo - check if Trust Center address is configured and correct
   2733                  ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
   2734                }
   2735                else
   2736                {
   2737                  // error condition - reject key
   2738                }
   2739              }
   2740            }
   2741            else if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
   2742                      ( ind->keyType == 6                 ) ||
   2743                      ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
   \   00001F   6401         XRL     A,#0x1
   \   000021   600A         JZ      ??ZDSecMgrTransportKeyInd_1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6406         XRL     A,#0x6
   \   000026   6005         JZ      ??ZDSecMgrTransportKeyInd_1
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6405         XRL     A,#0x5
   \   00002B   705B         JNZ     ??ZDSecMgrTransportKeyInd_0
   2744            {
   2745              // check for dummy NWK key (all zeros)
   2746              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   00002D   7A00         MOV     R2,#0x0
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   00002F   8A..         MOV     ?V0 + 0,R2
   \   000031   EE           MOV     A,R6
   \   000032   25..         ADD     A,?V0 + 0
   \   000034   F582         MOV     DPL,A
   \   000036   EF           MOV     A,R7
   \   000037   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7007         JNZ     ??ZDSecMgrTransportKeyInd_3
   2747                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   2748                    index++ );
   \   000043   0A           INC     R2
   \   000044   EA           MOV     A,R2
   \   000045   C3           CLR     C
   \   000046   9410         SUBB    A,#0x10
   \   000048   40E5         JC      ??ZDSecMgrTransportKeyInd_2
   2749          
   2750              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   00004A   7410         MOV     A,#0x10
   \   00004C   6A           XRL     A,R2
   \   00004D   7013         JNZ     ??ZDSecMgrTransportKeyInd_4
   2751              {
   2752                // load preconfigured key - once!!
   2753                if ( !_NIB.nwkKeyLoaded )
   \   00004F   90....       MOV     DPTR,#(_NIB + 61)
   \   000052   E0           MOVX    A,@DPTR
   \   000053   7030         JNZ     ??ZDSecMgrTransportKeyInd_5
   2754                {
   2755                  SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0 );
   \   000055                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000055   7900         MOV     R1,#0x0
   \   000057   7A..         MOV     R2,#(zgPreConfigKey & 0xff)
   \   000059   7B..         MOV     R3,#((zgPreConfigKey >> 8) & 0xff)
   \   00005B   12....       LCALL   ??SSP_UpdateNwkKey?relay
   2756                  SSP_SwitchNwkKey( 0 );
   \   00005E                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00005E   7900         MOV     R1,#0x0
   \   000060   8020         SJMP    ??ZDSecMgrTransportKeyInd_6
   2757                }
   2758              }
   2759              else
   2760              {
   2761                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   000062   EE           MOV     A,R6
   \   000063   2405         ADD     A,#0x5
   \   000065   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000068   F9           MOV     R1,A
   \   000069   EE           MOV     A,R6
   \   00006A   2406         ADD     A,#0x6
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   ??SSP_UpdateNwkKey?relay
   2762                if ( !_NIB.nwkKeyLoaded )
   \   000074   90....       MOV     DPTR,#(_NIB + 61)
   \   000077   E0           MOVX    A,@DPTR
   \   000078   700B         JNZ     ??ZDSecMgrTransportKeyInd_5
   2763                {
   2764                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   00007A                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00007A   85..82       MOV     DPL,?V0 + 0
   \   00007D   85..83       MOV     DPH,?V0 + 1
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   000082   12....       LCALL   ??SSP_SwitchNwkKey?relay
   2765                }
   2766              }
   2767          
   2768              // handle next step in authentication process
   2769              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   000085                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   000085   12....       LCALL   ??ZDSecMgrAuthNwkKey?relay
   2770            }
   2771            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   2772            {
   2773              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2774              {
   2775                //ZDSecMgrTCLinkKey( ind );
   2776              }
   2777            }
   2778            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   2779            {
   2780              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2781              {
   2782                uint16           ami;
   2783                AddrMgrEntry_t   entry;
   2784                ZDSecMgrEntry_t* entryZD;
   2785          
   2786                ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami );
   2787          
   2788                if ( ind->initiator == TRUE )
   2789                {
   2790                  // get the ami data
   2791                  entry.user  = ADDRMGR_USER_SECURITY;
   2792                  entry.index = ami;
   2793                  AddrMgrEntryGet( &entry );
   2794          
   2795                  if ( entry.nwkAddr != INVALID_NODE_ADDR )
   2796                  {
   2797                    APSME_EstablishKeyReq_t req;
   2798                    ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
   2799          
   2800                    ZDSecMgrEntryLookupAMI( ami, &entryZD );
   2801          
   2802                    if ( entryZD == NULL )
   2803                    {
   2804                      // get new entry
   2805                      if ( ZDSecMgrEntryNew( &entryZD ) == ZSuccess )
   2806                      {
   2807                        // finish setting up entry
   2808                        entryZD->ami = ami;
   2809                      }
   2810                    }
   2811          
   2812                    req.respExtAddr = ind->srcExtAddr;
   2813                    req.method      = APSME_SKKE_METHOD;
   2814                    req.dstAddr     = entry.nwkAddr;
   2815                    //devtag.0604.todo - remove obsolete
   2816                    req.apsSecure   = FALSE;
   2817                    req.nwkSecure   = TRUE;
   2818                    APSME_EstablishKeyReq( &req );
   2819                  }
   2820                }
   2821                else
   2822                {
   2823                  if ( ami == INVALID_NODE_ADDR )
   2824                  {
   2825                    // store new EXT address
   2826                    ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   2827                  }
   2828          
   2829                  ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
   2830                }
   2831          
   2832                //if ( entry.nwkAddr == INVALID_NODE_ADDR )
   2833                //{
   2834                //  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   2835                //}
   2836              }
   2837            }
   2838            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   2839            {
   2840              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2841              {
   2842                uint16           ami;
   2843                ZDSecMgrEntry_t* entry;
   2844          
   2845                // get the address index
   2846                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   2847                {
   2848                  // store new EXT address
   2849                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   2850                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   2851                }
   2852          
   2853                ZDSecMgrEntryLookupAMI( ami, &entry );
   2854          
   2855                if ( entry == NULL )
   2856                {
   2857                  // get new entry
   2858                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   2859                  {
   2860                    // finish setting up entry
   2861                    entry->ami = ami;
   2862                  }
   2863                }
   2864          
   2865                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   2866              }
   2867            }
   2868          }
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   000088   02....       LJMP    ??Subroutine93_0 & 0xFFFF
   2869          
   2870          /******************************************************************************
   2871           * @fn          ZDSecMgrUpdateDeviceInd
   2872           *
   2873           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   2874           *
   2875           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   2876           *
   2877           * @return      none
   2878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   740A         MOV     A,#0xa
   \   000002                REQUIRE ??Subroutine88_0
   \   000002                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2879          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   2880          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 10
   \   000004   74F6         MOV     A,#-0xa
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2881            ZDSecMgrDevice_t device;
   2882          
   2883          
   2884            device.nwkAddr    = ind->devAddr;
   \   000009   EA           MOV     A,R2
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   EB           MOV     A,R3
   \   00000F   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000012   12....       LCALL   ?Subroutine19 & 0xFFFF
   2885            device.extAddr    = ind->devExtAddr;
   \                     ??CrossCallReturnLabel_181:
   \   000015   EA           MOV     A,R2
   \   000016   2404         ADD     A,#0x4
   \   000018   F8           MOV     R0,A
   \   000019   EB           MOV     A,R3
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F9           MOV     R1,A
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine3 & 0xFFFF
   2886            device.parentAddr = ind->srcAddr;
   \                     ??CrossCallReturnLabel_5:
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine0 & 0xFFFF
   2887          
   2888            //if ( ( ind->status == APSME_UD_SECURED_JOIN   ) ||
   2889            //     ( ind->status == APSME_UD_UNSECURED_JOIN )   )
   2890            //{
   2891            //  if ( ind->status == APSME_UD_SECURED_JOIN )
   2892            //  {
   2893            //    device.secure = TRUE;
   2894            //  }
   2895            //  else
   2896            //  {
   2897            //    device.secure = FALSE;
   2898            //  }
   2899          
   2900              // try to join this device
   2901              ZDSecMgrDeviceJoin( &device );
   \                     ??CrossCallReturnLabel_1:
   \   00002B   12....       LCALL   ??ZDSecMgrDeviceJoin?relay
   2902            //}
   2903          }
   \   00002E   02....       LJMP    ?Subroutine81 & 0xFFFF
   2904          
   2905          /******************************************************************************
   2906           * @fn          ZDSecMgrRemoveDeviceInd
   2907           *
   2908           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   2909           *
   2910           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   2911           *
   2912           * @return      none
   2913           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2914          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   2915          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2916            ZDSecMgrDevice_t device;
   2917          
   2918          
   2919            // only accept from Trust Center
   2920            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7002         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000015   7020         JNZ     ??ZDSecMgrRemoveDeviceInd_1
   2921            {
   2922              // look up NWK address
   2923              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   000017   EA           MOV     A,R2
   \   000018   2404         ADD     A,#0x4
   \   00001A   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00001D   7018         JNZ     ??ZDSecMgrRemoveDeviceInd_1
   2924              {
   2925                device.parentAddr = NLME_GetShortAddr();
   \   00001F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001F   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000022   7404         MOV     A,#0x4
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   2926                device.extAddr    = ind->childExtAddr;
   2927          
   2928                // remove device
   2929                ZDSecMgrDeviceRemove( &device );
   2930              }
   2931            }
   \                     ??CrossCallReturnLabel_234:
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   EE           MOV     A,R6
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   EF           MOV     A,R7
   \   000031   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000034   12....       LCALL   ??ZDSecMgrDeviceRemove?relay
   2932          }
   \                     ??ZDSecMgrRemoveDeviceInd_1:
   \   000037   740A         MOV     A,#0xa
   \   000039   02....       LJMP    ??Subroutine96_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7402         MOV     A,#0x2
   \   000007   22           RET
   2933          
   2934          /******************************************************************************
   2935           * @fn          ZDSecMgrRequestKeyInd
   2936           *
   2937           * @brief       Process the ZDO_RequestKeyInd_t message.
   2938           *
   2939           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   2940           *
   2941           * @return      none
   2942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2943          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   2944          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2945            if ( ind->keyType == KEY_TYPE_NWK )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   FC           MOV     R4,A
   \   00000E   7401         MOV     A,#0x1
   \   000010   6C           XRL     A,R4
   \   000011   6008         JZ      ??ZDSecMgrRequestKeyInd_0
   2946            {
   2947            }
   2948            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000013   7402         MOV     A,#0x2
   \   000015   6C           XRL     A,R4
   \   000016   7003         JNZ     ??ZDSecMgrRequestKeyInd_0
   2949            {
   2950              ZDSecMgrAppKeyReq( ind );
   \   000018                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   000018   12....       LCALL   ??ZDSecMgrAppKeyReq?relay
   2951            }
   2952            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   2953            {
   2954            }
   2955            //else ignore
   2956          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   00001B   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   2957          
   2958          /******************************************************************************
   2959           * @fn          ZDSecMgrSwitchKeyInd
   2960           *
   2961           * @brief       Process the ZDO_SwitchKeyInd_t message.
   2962           *
   2963           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   2964           *
   2965           * @return      none
   2966           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2967          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   2968          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2969            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000004                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   ??SSP_SwitchNwkKey?relay
   2970          
   2971            // Save if nv
   2972            ZDApp_NVUpdate();
   \   000011                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000011   12....       LCALL   ??ZDApp_NVUpdate?relay
   2973          }
   \   000014   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   2974          
   2975          /******************************************************************************
   2976           * @fn          ZDSecMgrAuthenticateInd
   2977           *
   2978           * @brief       Process the ZDO_AuthenticateInd_t message.
   2979           *
   2980           * @param       ind - [in] ZDO_AuthenticateInd_t indication
   2981           *
   2982           * @return      none
   2983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2984          void ZDSecMgrAuthenticateInd( ZDO_AuthenticateInd_t* ind )
   \                     ZDSecMgrAuthenticateInd:
   2985          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2986            APSME_AuthenticateReq_t req;
   2987            AddrMgrEntry_t          entry;
   2988          
   2989          
   2990            // update the address manager
   2991            //---------------------------------------------------------------------------
   2992            // note:
   2993            // required for EA processing, but ultimately EA logic could also use the
   2994            // neighbor table to look up addresses -- also(IF using EA) the neighbor
   2995            // table is supposed to have authentication states for neighbors
   2996            //---------------------------------------------------------------------------
   2997            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000E   7407         MOV     A,#0x7
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7402         MOV     A,#0x2
   \   000015   F0           MOVX    @DPTR,A
   2998            entry.nwkAddr = ind->aps.initNwkAddr;
   \   000016   EE           MOV     A,R6
   \   000017   2402         ADD     A,#0x2
   \   000019   F5..         MOV     ?V0 + 2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F5..         MOV     ?V0 + 3,A
   \   000020   85..82       MOV     DPL,?V0 + 2
   \   000023   F583         MOV     DPH,A
   \   000025   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2999            AddrMgrExtAddrSet( entry.extAddr, ind->aps.initExtAddr );
   \                     ??CrossCallReturnLabel_175:
   \   000030   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000033                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000033   AC..         MOV     R4,?V0 + 0
   \   000035   FD           MOV     R5,A
   \   000036   740A         MOV     A,#0xa
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AA82         MOV     R2,DPL
   \   00003D   AB83         MOV     R3,DPH
   \   00003F   12....       LCALL   ??AddrMgrExtAddrSet?relay
   3000          
   3001            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000042                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000042   7407         MOV     A,#0x7
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AA82         MOV     R2,DPL
   \   000049   AB83         MOV     R3,DPH
   \   00004B   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \   00004E   E9           MOV     A,R1
   \   00004F   6401         XRL     A,#0x1
   \   000051   7027         JNZ     ??ZDSecMgrAuthenticateInd_0
   3002            {
   3003              // set request fields
   3004              req.nwkAddr   = ind->aps.initNwkAddr;
   \   000053   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000056   12....       LCALL   ?Subroutine18 & 0xFFFF
   3005              req.extAddr   = ind->aps.initExtAddr;
   \                     ??CrossCallReturnLabel_139:
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   3006              req.action    = APSME_EA_ACCEPT;
   \                     ??CrossCallReturnLabel_229:
   \   00005F   7406         MOV     A,#0x6
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   7401         MOV     A,#0x1
   \   000066   F0           MOVX    @DPTR,A
   3007              req.challenge = ind->aps.challenge;
   \   000067   EE           MOV     A,R6
   \   000068   240C         ADD     A,#0xc
   \   00006A   F8           MOV     R0,A
   \   00006B   EF           MOV     A,R7
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F9           MOV     R1,A
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   12....       LCALL   ?Subroutine0 & 0xFFFF
   3008          
   3009              // start EA processing
   3010              APSME_AuthenticateReq( &req );
   3011            }
   \                     ??CrossCallReturnLabel_2:
   \   000077   12....       LCALL   ??APSME_AuthenticateReq?relay
   3012          }
   \                     ??ZDSecMgrAuthenticateInd_0:
   \   00007A   7414         MOV     A,#0x14
   \   00007C   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   3013          
   3014          /******************************************************************************
   3015           * @fn          ZDSecMgrAuthenticateCfm
   3016           *
   3017           * @brief       Process the ZDO_AuthenticateCfm_t message.
   3018           *
   3019           * @param       cfm - [in] ZDO_AuthenticateCfm_t confirmation
   3020           *
   3021           * @return      none
   3022           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3023          void ZDSecMgrAuthenticateCfm( ZDO_AuthenticateCfm_t* cfm )
   \                     ZDSecMgrAuthenticateCfm:
   3024          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3025            if ( cfm->aps.status == ZSuccess )
   \   000004   EA           MOV     A,R2
   \   000005   240B         ADD     A,#0xb
   \   000007   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00000A   701F         JNZ     ??ZDSecMgrAuthenticateCfm_0
   3026            {
   3027              if ( ( cfm->aps.initiator == TRUE ) && ( devState == DEV_END_DEVICE_UNAUTH ) )
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6401         XRL     A,#0x1
   \   000015   7014         JNZ     ??ZDSecMgrAuthenticateCfm_0
   \   000017   90....       MOV     DPTR,#devState
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6405         XRL     A,#0x5
   \   00001D   700C         JNZ     ??ZDSecMgrAuthenticateCfm_0
   3028              {
   3029                // inform ZDO that device has been authenticated
   3030                osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00001F                ; Setup parameters for call to function osal_set_event
   \   00001F   7A80         MOV     R2,#-0x80
   \   000021   7B00         MOV     R3,#0x0
   \   000023   90....       MOV     DPTR,#ZDAppTaskID
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   12....       LCALL   ??osal_set_event?relay
   3031              }
   3032            }
   3033          }
   \                     ??ZDSecMgrAuthenticateCfm_0:
   \   00002B   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   3034          
   3035          #if ( ZG_BUILD_COORDINATOR_TYPE )
   3036          /******************************************************************************
   3037           * @fn          ZDSecMgrUpdateNwkKey
   3038           *
   3039           * @brief       Load a new NWK key and trigger a network wide update.
   3040           *
   3041           * @param       key       - [in] new NWK key
   3042           * @param       keySeqNum - [in] new NWK key sequence number
   3043           *
   3044           * @return      ZStatus_t
   3045           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3046          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrUpdateNwkKey:
   3047          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 0,R1
   3048            ZStatus_t               status;
   3049            APSME_TransportKeyReq_t req;
   3050          
   3051            // initialize common elements of local variables
   3052            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   3053              req.keyType   = KEY_TYPE_NWK_HIGH;
   3054            else
   3055              req.keyType   = KEY_TYPE_NWK;
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?Subroutine14 & 0xFFFF
   3056          
   3057            req.dstAddr   = dstAddr;
   \                     ??CrossCallReturnLabel_112:
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
   3058            req.keySeqNum = keySeqNum;
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E9           MOV     A,R1
   \   000025   F0           MOVX    @DPTR,A
   3059            req.key       = key;
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   EE           MOV     A,R6
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   EF           MOV     A,R7
   \   00002F   F0           MOVX    @DPTR,A
   3060            req.extAddr   = NULL;
   \   000030   7406         MOV     A,#0x6
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
   3061            req.nwkSecure = TRUE;
   \   000039   740A         MOV     A,#0xa
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7401         MOV     A,#0x1
   \   000040   F0           MOVX    @DPTR,A
   3062            req.apsSecure = TRUE;
   \   000041   7409         MOV     A,#0x9
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   7401         MOV     A,#0x1
   \   000048   F0           MOVX    @DPTR,A
   3063            req.tunnel    = NULL;
   \   000049   740B         MOV     A,#0xb
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   12....       LCALL   ?Subroutine4 & 0xFFFF
   3064          
   3065            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   3066            {
   3067              ZDSecMgrEntry_t*        entry;
   3068              uint16                  index;
   3069              AddrMgrEntry_t          addrEntry;
   3070          
   3071              addrEntry.user = ADDRMGR_USER_SECURITY;
   3072          
   3073              status = ZFailure;
   3074          
   3075              // verify data is available
   3076              if ( ZDSecMgrEntries != NULL )
   3077              {
   3078                // find available entry
   3079                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   3080                {
   3081                  if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
   3082                  {
   3083                    // return successful result
   3084                    entry = &ZDSecMgrEntries[index];
   3085          
   3086                    // get NWK address
   3087                    addrEntry.index = entry->ami;
   3088                    if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
   3089                    {
   3090                      req.dstAddr = addrEntry.nwkAddr;
   3091                      req.extAddr = addrEntry.extAddr;
   3092                      status = APSME_TransportKeyReq( &req );
   3093                    }
   3094                  }
   3095                }
   3096              }
   3097            }
   3098            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   3099            {
   3100              status = APSME_TransportKeyReq( &req );
   \                     ??CrossCallReturnLabel_7:
   \   000054   E9           MOV     A,R1
   \   000055   F5..         MOV     ?V0 + 1,A
   3101            }
   3102          
   3103            SSP_UpdateNwkKey( key, keySeqNum );
   \   000057                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000057   A9..         MOV     R1,?V0 + 0
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ??SSP_UpdateNwkKey?relay
   3104          
   3105            // Save if nv
   3106            ZDApp_NVUpdate();
   \   000060                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000060   12....       LCALL   ??ZDApp_NVUpdate?relay
   3107          
   3108            return status;
   \   000063   A9..         MOV     R1,?V0 + 1
   \   000065   02....       LJMP    ?Subroutine78 & 0xFFFF
   3109          }
   3110          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   3111          
   3112          #if ( ZG_BUILD_COORDINATOR_TYPE )
   3113          /******************************************************************************
   3114           * @fn          ZDSecMgrSwitchNwkKey
   3115           *
   3116           * @brief       Causes the NWK key to switch via a network wide command.
   3117           *
   3118           * @param       keySeqNum - [in] new NWK key sequence number
   3119           *
   3120           * @return      ZStatus_t
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrSwitchNwkKey:
   3123          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   3124            ZStatus_t            status;
   3125            APSME_SwitchKeyReq_t req;
   3126          
   3127            // initialize common elements of local variables
   3128            req.dstAddr = dstAddr;
   \   00000C   12....       LCALL   ?Subroutine12 & 0xFFFF
   3129            req.keySeqNum = keySeqNum;
   \                     ??CrossCallReturnLabel_232:
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   3130          
   3131            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   3132            {
   3133              ZDSecMgrEntry_t*     entry;
   3134              uint16               index;
   3135              AddrMgrEntry_t       addrEntry;
   3136          
   3137              addrEntry.user = ADDRMGR_USER_SECURITY;
   3138          
   3139              status = ZFailure;
   3140          
   3141              // verify data is available
   3142              if ( ZDSecMgrEntries != NULL )
   3143              {
   3144                // find available entry
   3145                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   3146                {
   3147                  if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
   3148                  {
   3149                    // return successful result
   3150                    entry = &ZDSecMgrEntries[index];
   3151          
   3152                    // get NWK address
   3153                    addrEntry.index = entry->ami;
   3154          
   3155                    if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
   3156                    {
   3157                      req.dstAddr = addrEntry.nwkAddr;
   3158                      status = APSME_SwitchKeyReq( &req );
   3159                    }
   3160                  }
   3161                }
   3162              }
   3163            }
   3164            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   3165            {
   3166              status = APSME_SwitchKeyReq( &req );
   \                     ??CrossCallReturnLabel_202:
   \   000016   12....       LCALL   ??APSME_SwitchKeyReq?relay
   \   000019   E9           MOV     A,R1
   \   00001A   FF           MOV     R7,A
   3167            }
   3168          
   3169            SSP_SwitchNwkKey( keySeqNum );
   \   00001B                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00001B   EE           MOV     A,R6
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   ??SSP_SwitchNwkKey?relay
   3170          
   3171            // Save if nv
   3172            ZDApp_NVUpdate();
   \   000020                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000020   12....       LCALL   ??ZDApp_NVUpdate?relay
   3173          
   3174            return status;
   \   000023   EF           MOV     A,R7
   \   000024   F9           MOV     R1,A
   \   000025   7403         MOV     A,#0x3
   \   000027   02....       LJMP    ??Subroutine96_0 & 0xFFFF
   3175          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine111_0
   \   000006                ; // Fall through to label ??Subroutine111_0
   3176          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   3177          
   3178          #if ( ZG_BUILD_JOINING_TYPE )
   3179          /******************************************************************************
   3180           * @fn          ZDSecMgrRequestAppKey
   3181           *
   3182           * @brief       Request an application key with partner.
   3183           *
   3184           * @param       partNwkAddr - [in] partner network address
   3185           *
   3186           * @return      ZStatus_t
   3187           */
   3188          ZStatus_t ZDSecMgrRequestAppKey( uint16 partNwkAddr )
   3189          {
   3190            ZStatus_t             status;
   3191            APSME_RequestKeyReq_t req;
   3192            uint8                 partExtAddr[Z_EXTADDR_LEN];
   3193          
   3194          
   3195            if ( AddrMgrExtAddrLookup( partNwkAddr, partExtAddr ) )
   3196            {
   3197              req.dstAddr = 0;
   3198              req.keyType = KEY_TYPE_APP_MASTER;
   3199              req.partExtAddr = partExtAddr;
   3200              status = APSME_RequestKeyReq( &req );
   3201            }
   3202            else
   3203            {
   3204              status = ZFailure;
   3205            }
   3206          
   3207            return status;
   3208          }
   3209          #endif // ( ZG_BUILD_JOINING_TYPE )
   3210          
   3211          #if ( ZG_BUILD_JOINING_TYPE )
   3212          /******************************************************************************
   3213           * @fn          ZDSecMgrSetupPartner
   3214           *
   3215           * @brief       Setup for application key partner.
   3216           *
   3217           * @param       partNwkAddr - [in] partner network address
   3218           *
   3219           * @return      ZStatus_t
   3220           */
   3221          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   3222          {
   3223            AddrMgrEntry_t entry;
   3224            ZStatus_t      status;
   3225          
   3226            status = ZFailure;
   3227          
   3228            // update the address manager
   3229            entry.user    = ADDRMGR_USER_SECURITY;
   3230            entry.nwkAddr = partNwkAddr;
   3231            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   3232          
   3233            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   3234            {
   3235              status = ZSuccess;
   3236          
   3237              // check for address discovery
   3238              if ( partNwkAddr == INVALID_NODE_ADDR )
   3239              {
   3240                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   3241              }
   3242              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   3243              {
   3244                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   3245              }
   3246            }
   3247          
   3248            return status;
   3249          }
   3250          #endif // ( ZG_BUILD_JOINING_TYPE )
   3251          
   3252          #if ( ZG_BUILD_COORDINATOR_TYPE )
   3253          /******************************************************************************
   3254           * @fn          ZDSecMgrAppKeyTypeSet
   3255           *
   3256           * @brief       Set application key type.
   3257           *
   3258           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   3259           *                                                   KEY_TYPE_APP_LINK@3
   3260           *
   3261           * @return      ZStatus_t
   3262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3263          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   \                     ZDSecMgrAppKeyTypeSet:
   3264          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3265            if ( keyType == KEY_TYPE_APP_LINK )
   \   000004   7403         MOV     A,#0x3
   \   000006   69           XRL     A,R1
   \   000007   7004         JNZ     ??ZDSecMgrAppKeyTypeSet_0
   3266            {
   3267              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   \   000009   7403         MOV     A,#0x3
   \   00000B   8002         SJMP    ??ZDSecMgrAppKeyTypeSet_1
   3268            }
   3269            else
   3270            {
   3271              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   \                     ??ZDSecMgrAppKeyTypeSet_0:
   \   00000D   7402         MOV     A,#0x2
   \                     ??ZDSecMgrAppKeyTypeSet_1:
   \   00000F   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   000012   F0           MOVX    @DPTR,A
   3272            }
   3273          
   3274            return ZSuccess;
   \   000013   7900         MOV     R1,#0x0
   \   000015   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   3275          }
   3276          #endif
   3277          
   3278          /******************************************************************************
   3279           * ZigBee Device Security Manager - Stub Implementations
   3280           */
   3281          /******************************************************************************
   3282           * @fn          ZDSecMgrMasterKeyGet (stubs APSME_MasterKeyGet)
   3283           *
   3284           * @brief       Get MASTER key for specified EXT address.
   3285           *
   3286           * @param       extAddr - [in] EXT address
   3287           * @param       key     - [out] MASTER key
   3288           *
   3289           * @return      ZStatus_t
   3290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3291          ZStatus_t ZDSecMgrMasterKeyGet( uint8* extAddr, uint8** key )
   \                     APSME_MasterKeyGet:
   3292          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   3293            ZStatus_t status;
   3294            uint16    ami;
   3295          
   3296          
   3297            // lookup entry for specified EXT address
   3298            status = ZDSecMgrExtAddrLookup( extAddr, &ami );
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDSecMgrExtAddrLookup?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   F5..         MOV     ?V0 + 0,A
   3299            //status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   3300          
   3301            if ( status == ZSuccess )
   \   00001E   700F         JNZ     ??APSME_MasterKeyGet_0
   3302            {
   3303              ZDSecMgrMasterKeyLookup( ami, key );
   \   000020                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000020   EE           MOV     A,R6
   \   000021   FC           MOV     R4,A
   \   000022   EF           MOV     A,R7
   \   000023   FD           MOV     R5,A
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   12....       LCALL   ?Subroutine41 & 0xFFFF
   3304            }
   \                     ??CrossCallReturnLabel_68:
   \   00002D   8008         SJMP    ??APSME_MasterKeyGet_1
   3305            else
   3306            {
   3307              *key = NULL;
   \                     ??APSME_MasterKeyGet_0:
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   F0           MOVX    @DPTR,A
   3308            }
   3309          
   3310            return status;
   \                     ??APSME_MasterKeyGet_1:
   \   000037   02....       LJMP    ?Subroutine76 & 0xFFFF
   3311          }
   3312          
   3313          /******************************************************************************
   3314           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   3315           *
   3316           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   3317           *
   3318           * @param       extAddr - [in] EXT address
   3319           * @param       data    - [in] APSME_LinkKeyData_t
   3320           *
   3321           * @return      ZStatus_t
   3322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3323          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   3324          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   3325            ZStatus_t        status;
   3326            ZDSecMgrEntry_t* entry;
   3327          
   3328          
   3329            // lookup entry index for specified EXT address
   3330            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDSecMgrEntryLookupExt?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   F5..         MOV     ?V0 + 3,A
   3331          
   3332            if ( status == ZSuccess )
   \   00001E   704C         JNZ     ??APSME_LinkKeySet_0
   3333            {
   3334              // setup the link key data reference
   3335              osal_memcpy( entry->lkd.key, key, SEC_KEY_LEN );
   \   000020                ; Setup parameters for call to function osal_memcpy
   \   000020   8E..         MOV     ?V0 + 0,R6
   \   000022   8F..         MOV     ?V0 + 1,R7
   \   000024   75..00       MOV     ?V0 + 2,#0x0
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002C   7C10         MOV     R4,#0x10
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000038   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   3336          
   3337              entry->lkd.apsmelkd.rxFrmCntr = 0;
   \   00003E   90....       MOV     DPTR,#__Constant_0
   \   000041   78..         MOV     R0,#?V0 + 4
   \   000043   12....       LCALL   ?L_MOV_X
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   2418         ADD     A,#0x18
   \   00004F   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000052   12....       LCALL   ?L_MOV_TO_X
   3338              entry->lkd.apsmelkd.txFrmCntr = 0;
   \   000055   90....       MOV     DPTR,#__Constant_0
   \   000058   78..         MOV     R0,#?V0 + 4
   \   00005A   12....       LCALL   ?L_MOV_X
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   2414         ADD     A,#0x14
   \   000066   12....       LCALL   ?Subroutine35 & 0xFFFF
   3339            }
   \                     ??CrossCallReturnLabel_57:
   \   000069   12....       LCALL   ?L_MOV_TO_X
   3340          
   3341            return status;
   \                     ??APSME_LinkKeySet_0:
   \   00006C   A9..         MOV     R1,?V0 + 3
   \   00006E   7402         MOV     A,#0x2
   \   000070                REQUIRE ?Subroutine80
   \   000070                ; // Fall through to label ?Subroutine80
   3342          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   3343          
   3344          /******************************************************************************
   3345           * @fn          ZDSecMgrAuthenticationSet
   3346           *
   3347           * @brief       Mark the specific device as authenticated or not
   3348           *
   3349           * @param       extAddr - [in] EXT address
   3350           * @param       option  - [in] authenticated or not
   3351           *
   3352           * @return      ZStatus_t
   3353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3354          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   3355          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   3356            ZStatus_t        status;
   3357            ZDSecMgrEntry_t* entry;
   3358          
   3359          
   3360            // lookup entry index for specified EXT address
   3361            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000C                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   12....       LCALL   ??ZDSecMgrEntryLookupExt?relay
   \   000019   E9           MOV     A,R1
   3362          
   3363            if ( status == ZSuccess )
   \   00001A   7015         JNZ     ??ZDSecMgrAuthenticationSet_0
   3364            {
   3365              entry->authenticateOption = option;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   241C         ADD     A,#0x1c
   \   000025   FA           MOV     R2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   3400         ADDC    A,#0x0
   \   00002A   FB           MOV     R3,A
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   EE           MOV     A,R6
   \   000030   F0           MOVX    @DPTR,A
   3366            }
   3367          
   3368            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   000031   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   3369          }
   3370          
   3371          /******************************************************************************
   3372           * @fn          ZDSecMgrAuthenticationCheck
   3373           *
   3374           * @brief       Check if the specific device has been authenticated or not
   3375           *              For non-trust center device, always return true
   3376           *
   3377           * @param       shortAddr - [in] short address
   3378           *
   3379           * @return      TRUE @ authenticated with CBKE
   3380           *              FALSE @ not authenticated
   3381           */
   3382          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3383          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   3384          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3385          #if defined (TC_LINKKEY_JOIN)
   3386          
   3387            ZDSecMgrEntry_t* entry;
   3388            uint8 extAddr[Z_EXTADDR_LEN];
   3389          
   3390            // If the local device is not the trust center, always return TRUE
   3391            if ( NLME_GetShortAddr() != TCshortAddr )
   3392            {
   3393              return TRUE;
   3394            }
   3395            // Otherwise, check the authentication option
   3396            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   3397            {
   3398              // lookup entry index for specified EXT address
   3399              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   3400              {
   3401                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   3402                {
   3403                  return TRUE;
   3404                }
   3405                else
   3406                {
   3407                  return FALSE;
   3408                }
   3409              }
   3410            }
   3411            return FALSE;
   3412          
   3413          #else
   3414            (void)shortAddr;  // Intentionally unreferenced parameter
   3415            
   3416            // For non AMI/SE Profile, perform no check and always return true.
   3417            return TRUE;
   \   000000   7901         MOV     R1,#0x1
   \   000002   02....       LJMP    ?BRET
   3418          
   3419          #endif // TC_LINKKEY_JOIN
   3420          }
   3421          
   3422          
   3423          /******************************************************************************
   3424           * @fn          ZDSecMgrLinkKeyDataGet (stubs APSME_LinkKeyDataGet)
   3425           *
   3426           * @brief       Get <APSME_LinkKeyData_t> for specified NWK address.
   3427           *
   3428           * @param       extAddr - [in] EXT address
   3429           * @param       data    - [out] APSME_LinkKeyData_t
   3430           *
   3431           * @return      ZStatus_t
   3432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3433          ZStatus_t ZDSecMgrLinkKeyDataGet(uint8* extAddr, APSME_LinkKeyData_t** data)
   \                     APSME_LinkKeyDataGet:
   3434          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   3435            ZStatus_t        status;
   3436            ZDSecMgrEntry_t* entry;
   3437          
   3438          
   3439            // lookup entry index for specified NWK address
   3440            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDSecMgrEntryLookupExt?relay
   \   00001B   E9           MOV     A,R1
   3441          
   3442            if ( status == ZSuccess )
   \   00001C   702C         JNZ     ??APSME_LinkKeyDataGet_0
   3443            {
   3444              // setup the link key data reference
   3445              (*data) = &entry->lkd.apsmelkd;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   E0           MOVX    A,@DPTR
   \   000025   2412         ADD     A,#0x12
   \   000027   FA           MOV     R2,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   3400         ADDC    A,#0x0
   \   00002C   FB           MOV     R3,A
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   12....       LCALL   ?Subroutine13 & 0xFFFF
   3446              (*data)->key = entry->lkd.key;
   \                     ??CrossCallReturnLabel_22:
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   12....       LCALL   ?Subroutine45 & 0xFFFF
   3447            }
   \                     ??CrossCallReturnLabel_74:
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000044   EA           MOV     A,R2
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   EB           MOV     A,R3
   \   000048   8007         SJMP    ??APSME_LinkKeyDataGet_1
   3448            else
   3449            {
   3450              *data = NULL;
   \                     ??APSME_LinkKeyDataGet_0:
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \                     ??APSME_LinkKeyDataGet_1:
   \   000051   F0           MOVX    @DPTR,A
   3451            }
   3452          
   3453            return status;
   \   000052   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   3454          }
   3455          
   3456          /******************************************************************************
   3457           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   3458           *
   3459           * @brief       Verify and process key transportation to child.
   3460           *
   3461           * @param       ind - [in] APSME_TransportKeyInd_t
   3462           *
   3463           * @return      uint8 - success(TRUE:FALSE)
   3464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3465          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   3466          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3467            uint8 success;
   3468          
   3469            success = FALSE;
   \   000005   7E00         MOV     R6,#0x0
   3470          
   3471            // verify from Trust Center
   3472            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   7002         JNZ     ??APSME_KeyFwdToChild_0
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \                     ??APSME_KeyFwdToChild_0:
   \   000010   7027         JNZ     ??APSME_KeyFwdToChild_1
   3473            {
   3474              success = TRUE;
   \   000012   0E           INC     R6
   3475          
   3476              // check for initial NWK key
   3477              if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
   3478                   ( ind->keyType == 6                 ) ||
   3479                   ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FC           MOV     R4,A
   \   00001B   EE           MOV     A,R6
   \   00001C   6C           XRL     A,R4
   \   00001D   600A         JZ      ??APSME_KeyFwdToChild_2
   \   00001F   7406         MOV     A,#0x6
   \   000021   6C           XRL     A,R4
   \   000022   6005         JZ      ??APSME_KeyFwdToChild_2
   \   000024   7405         MOV     A,#0x5
   \   000026   6C           XRL     A,R4
   \   000027   7010         JNZ     ??APSME_KeyFwdToChild_1
   3480              {
   3481                // set association status to authenticated
   3482                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_2:
   \   000029                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000029                ; Setup parameters for call to function AssocGetWithExt
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine43 & 0xFFFF
   3483              }
   3484            }
   \                     ??CrossCallReturnLabel_72:
   \   000036   12....       LCALL   ??ZDSecMgrAssocDeviceAuth?relay
   3485          
   3486            return success;
   \                     ??APSME_KeyFwdToChild_1:
   \   000039   EE           MOV     A,R6
   \   00003A   F9           MOV     R1,A
   \   00003B   02....       LJMP    ??Subroutine97_0 & 0xFFFF
   3487          }
   3488          
   3489          /******************************************************************************
   3490           * @fn          ZDSecMgrAddLinkKey
   3491           *
   3492           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   3493           *              as authenticated in the authenticateOption. Note that this function
   3494           *              is hardwared to CBKE right now.
   3495           *
   3496           * @param       shortAddr - short address of the partner device
   3497           * @param       extAddr - extended address of the partner device
   3498           * @param       key - link key
   3499           *
   3500           * @return      ZStatus_t
   3501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3502          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   3503          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   \   00000E   7410         MOV     A,#0x10
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 1,A
   3504            uint16           ami;
   3505            ZDSecMgrEntry_t* entry;
   3506          
   3507            /* Store the device address in the addr manager */
   3508            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00001A                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   8582..       MOV     ?V0 + 2,DPL
   \   000022   8583..       MOV     ?V0 + 3,DPH
   \   000025   78..         MOV     R0,#?V0 + 2
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   12....       LCALL   ??ZDSecMgrAddrStore?relay
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000032   E9           MOV     A,R1
   \   000033   6004         JZ      ??ZDSecMgrAddLinkKey_0
   3509            {
   3510              /* Adding to Addr Manager fails */
   3511              return ZFailure;
   \   000035   7901         MOV     R1,#0x1
   \   000037   804F         SJMP    ??ZDSecMgrAddLinkKey_1
   3512            }
   3513          
   3514            /* Lookup entry using specified address index */
   3515            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   000039                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   AC82         MOV     R4,DPL
   \   000041   AD83         MOV     R5,DPH
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine37 & 0xFFFF
   3516          
   3517            // If no existing entry, create one
   3518            if ( entry == NULL )
   \                     ??CrossCallReturnLabel_61:
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   7002         JNZ     ??ZDSecMgrAddLinkKey_2
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000056   7023         JNZ     ??CrossCallReturnLabel_176
   3519            {
   3520              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000058                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??ZDSecMgrEntryNew?relay
   \   000065   E9           MOV     A,R1
   \   000066   7023         JNZ     ??ZDSecMgrAddLinkKey_3
   3521              {
   3522                entry->ami = ami;
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine33 & 0xFFFF
   3523              }
   \                     ??CrossCallReturnLabel_114:
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FA           MOV     R2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F583         MOV     DPH,A
   \   000076   8A82         MOV     DPL,R2
   \   000078   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   3524              else
   3525              {
   3526                /* Security Manager full */
   3527                return ZBufferFull;
   3528              }
   3529            }
   3530            // Write the link key
   3531            APSME_LinkKeySet( extAddr, key );
   \                     ??CrossCallReturnLabel_176:
   \   00007B                ; Setup parameters for call to function APSME_LinkKeySet
   \   00007B   AC..         MOV     R4,?V0 + 0
   \   00007D   AD..         MOV     R5,?V0 + 1
   \   00007F   EE           MOV     A,R6
   \   000080   FA           MOV     R2,A
   \   000081   EF           MOV     A,R7
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   ??APSME_LinkKeySet?relay
   3532          
   3533          #if defined (TC_LINKKEY_JOIN)
   3534            // Mark the device as authenticated.
   3535            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   3536          #endif
   3537          
   3538          #if defined NV_RESTORE
   3539            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   3540          #endif
   3541            
   3542            return ZSuccess;
   \   000086   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   000088   02....       LJMP    ?Subroutine79 & 0xFFFF
   \                     ??ZDSecMgrAddLinkKey_3:
   \   00008B   7911         MOV     R1,#0x11
   \   00008D   80F9         SJMP    ??ZDSecMgrAddLinkKey_1
   3543          }
   3544          
   3545          #if defined ( NV_RESTORE )
   3546          /******************************************************************************
   3547           * @fn          ZDSecMgrInitNV
   3548           *
   3549           * @brief       Initialize the SecMgr entry data in NV.
   3550           *
   3551           * @param       none
   3552           *
   3553           * @return      uint8 - <osal_nv_item_init> return codes
   3554           */
   3555          uint8 ZDSecMgrInitNV(void)
   3556          {
   3557            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE, 
   3558                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   3559            if (rtrn != ZSUCCESS)  // If the item does not already exist.
   3560            {
   3561              nvDeviceListHdr_t hdr;
   3562              hdr.numRecs = 0;
   3563              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   3564            }
   3565          
   3566            return rtrn;
   3567          }
   3568          #endif // NV_RESTORE
   3569          
   3570          #if defined ( NV_RESTORE )
   3571          /*********************************************************************
   3572           * @fn      ZDSecMgrWriteNV()
   3573           *
   3574           * @brief   Save off the link key list to NV
   3575           *
   3576           * @param   none
   3577           *
   3578           * @return  none
   3579           */
   3580          static void ZDSecMgrWriteNV( void )
   3581          {
   3582            uint16 i;
   3583            nvDeviceListHdr_t hdr;
   3584          
   3585            hdr.numRecs = 0;
   3586          
   3587            if (ZDSecMgrEntries != NULL)
   3588            {
   3589              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   3590              {
   3591                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   3592                {
   3593                  // Save off the record
   3594                  osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   3595                          (uint16)((sizeof(nvDeviceListHdr_t)) + (hdr.numRecs * sizeof(ZDSecMgrEntry_t))),
   3596                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   3597                  hdr.numRecs++;
   3598                }
   3599              }
   3600            }
   3601          
   3602            // Save off the header
   3603            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   3604          }
   3605          #endif // NV_RESTORE
   3606          
   3607          #if defined ( NV_RESTORE )
   3608          /******************************************************************************
   3609           * @fn          ZDSecMgrRestoreFromNV
   3610           *
   3611           * @brief       Restore the SecMgr entry data from NV.
   3612           *
   3613           * @param       none
   3614           *
   3615           * @return      None.
   3616           */
   3617          static void ZDSecMgrRestoreFromNV( void )
   3618          {
   3619            nvDeviceListHdr_t hdr;
   3620          
   3621            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   3622                (hdr.numRecs <= ZDSECMGR_ENTRY_MAX))
   3623            {
   3624              uint8 x;
   3625          
   3626              for (x = 0; x < hdr.numRecs; x++)
   3627              {
   3628                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   3629                          (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   3630                                sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == ZSUCCESS )
   3631                {
   3632                  ZDSecMgrEntries[x].lkd.apsmelkd.txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   3633                }
   3634              }
   3635            }
   3636          }
   3637          #endif // NV_RESTORE
   3638          
   3639          /******************************************************************************
   3640           * @fn          ZDSecMgrAPSRemove
   3641           *
   3642           * @brief       Remove device from network.
   3643           *
   3644           * @param       nwkAddr - device's NWK address
   3645           * @param       extAddr - device's Extended address
   3646           * @param       parentAddr - parent's NWK address
   3647           *
   3648           * @return      ZStatus_t
   3649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3650          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   3651          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 10
   \   000004   74F6         MOV     A,#-0xa
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   740A         MOV     A,#0xa
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   3652            ZDSecMgrDevice_t device;
   3653          
   3654            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   3655                 ( extAddr == NULL )              ||
   3656                 ( parentAddr == INVALID_NODE_ADDR ) )
   \                     ??CrossCallReturnLabel_160:
   \   000011   74FE         MOV     A,#-0x2
   \   000013   6A           XRL     A,R2
   \   000014   7003         JNZ     ??ZDSecMgrAPSRemove_0
   \   000016   74FF         MOV     A,#-0x1
   \   000018   6B           XRL     A,R3
   \                     ??ZDSecMgrAPSRemove_0:
   \   000019   6010         JZ      ??ZDSecMgrAPSRemove_1
   \   00001B   EC           MOV     A,R4
   \   00001C   7001         JNZ     ??ZDSecMgrAPSRemove_2
   \   00001E   ED           MOV     A,R5
   \                     ??ZDSecMgrAPSRemove_2:
   \   00001F   600A         JZ      ??ZDSecMgrAPSRemove_1
   \   000021   74FE         MOV     A,#-0x2
   \   000023   68           XRL     A,R0
   \   000024   7003         JNZ     ??ZDSecMgrAPSRemove_3
   \   000026   74FF         MOV     A,#-0x1
   \   000028   69           XRL     A,R1
   \                     ??ZDSecMgrAPSRemove_3:
   \   000029   7004         JNZ     ??ZDSecMgrAPSRemove_4
   3657            {
   3658              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   8018         SJMP    ??ZDSecMgrAPSRemove_5
   3659            }
   3660          
   3661            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_4:
   \   00002F   12....       LCALL   ?Subroutine12 & 0xFFFF
   3662            device.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_233:
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   EC           MOV     A,R4
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   ED           MOV     A,R5
   \   000039   F0           MOVX    @DPTR,A
   3663            device.parentAddr = parentAddr;
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine0 & 0xFFFF
   3664          
   3665            // remove device
   3666            ZDSecMgrDeviceRemove( &device );
   \                     ??CrossCallReturnLabel_3:
   \   000042   12....       LCALL   ??ZDSecMgrDeviceRemove?relay
   3667          
   3668            return ( ZSuccess );
   \   000045   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAPSRemove_5:
   \   000047   02....       LJMP    ?Subroutine81 & 0xFFFF
   3669          }
   3670          
   3671          /******************************************************************************
   3672           * @fn          APSME_TCLinkKeyInit
   3673           *
   3674           * @brief       Initialize the NV table for preconfigured TC link key
   3675           *               
   3676           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   3677           *              Trust Center Link Key is written to NV. A single tclk is used   
   3678           *              by all devices joining the network.
   3679           *              
   3680           * @param       none
   3681           *
   3682           * @return      none
   3683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3684          void APSME_TCLinkKeyInit(void)
   \                     APSME_TCLinkKeyInit:
   3685          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3686            uint8             i;
   3687            APSME_TCLinkKey_t tcLinkKey;
   3688            
   3689            // Initialize all NV items for preconfigured tclk with 
   3690            // extended address all zero, if not exist already.
   3691            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C20         MOV     R4,#0x20
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \   00001A   12....       LCALL   ??osal_memset?relay
   3692            for( i = 1; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   3693            {
   3694              osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i), 
   3695                                 sizeof(APSME_TCLinkKey_t), &tcLinkKey);
   3696            }
   3697            
   3698            // Initialize the default tclk
   3699            if( zgUseDefaultTCLK == TRUE )
   \   00001D   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6401         XRL     A,#0x1
   \   000023   7034         JNZ     ??APSME_TCLinkKeyInit_0
   3700            {
   3701              osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000025                ; Setup parameters for call to function osal_memset
   \   000025   7C08         MOV     R4,#0x8
   \   000027   7D00         MOV     R5,#0x0
   \   000029   79FF         MOV     R1,#-0x1
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??osal_memset?relay
   3702              osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   75....       MOV     ?V0 + 0,#(defaultTCLinkKey & 0xff)
   \   00003B   75....       MOV     ?V0 + 1,#((defaultTCLinkKey >> 8) & 0xff)
   \   00003E   75..80       MOV     ?V0 + 2,#-0x80
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000046   7C10         MOV     R4,#0x10
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   740B         MOV     A,#0xb
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   3703              
   3704              // If the item doesn't exist in NV memory, create and initialize
   3705              // it with the default value passed in.
   3706              osal_nv_item_init( ZCD_NV_TCLK_TABLE_START, sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000059                ; Setup parameters for call to function osal_nv_item_init
   3707            }
   3708            else
   3709            {
   3710              osal_nv_item_init( ZCD_NV_TCLK_TABLE_START, sizeof(APSME_TCLinkKey_t), &tcLinkKey);
   \                     ??APSME_TCLinkKeyInit_0:
   \   000059                ; Setup parameters for call to function osal_nv_item_init
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   8582..       MOV     ?V0 + 0,DPL
   \   000062   8583..       MOV     ?V0 + 1,DPH
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C20         MOV     R4,#0x20
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A01         MOV     R2,#0x1
   \   000070   7B01         MOV     R3,#0x1
   \   000072   12....       LCALL   ??osal_nv_item_init?relay
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   3711            }
   3712          }
   \   00007A   7420         MOV     A,#0x20
   \   00007C   02....       LJMP    ?Subroutine77 & 0xFFFF
   3713          
   3714          /******************************************************************************
   3715           * @fn          APSME_TCLinkKeySync
   3716           *
   3717           * @brief       Sync Trust Center LINK key data.
   3718           *
   3719           * @param       srcAddr - [in] srcAddr
   3720           * @param       si      - [in, out] SSP_Info_t
   3721           *
   3722           * @return      ZStatus_t
   3723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3724          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   3725          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   3726            ZStatus_t          status = ZSecNoKey;
   3727            uint8              i;
   3728            APSME_TCLinkKey_t  tcLinkKey;       
   3729            
   3730            // Look up the IEEE address of the trust center if it's available
   3731            if ( AddrMgrExtAddrValid( si->extAddr ) == false )
   \   000012   EE           MOV     A,R6
   \   000013   2406         ADD     A,#0x6
   \   000015   F5..         MOV     ?V0 + 0,A
   \   000017   EF           MOV     A,R7
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 1,A
   \   00001C                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000022   E9           MOV     A,R1
   \   000023   700B         JNZ     ??APSME_TCLinkKeySync_0
   3732            {
   3733              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   000025                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000025   AC..         MOV     R4,?V0 + 0
   \   000027   AD..         MOV     R5,?V0 + 1
   \   000029   AA..         MOV     R2,?V0 + 2
   \   00002B   AB..         MOV     R3,?V0 + 3
   \   00002D   12....       LCALL   ??APSME_LookupExtAddr?relay
   3734            }
   3735            
   3736            // Look up the TC link key associated with the device
   3737            // or the default TC link key (extAddr is all FFs), whichever is found
   3738            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   3739            {
   3740              // Read entry i of the TC link key table from NV
   3741              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
   3742                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \                     ??APSME_TCLinkKeySync_0:
   \   000030                ; Setup parameters for call to function osal_nv_read
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   8582..       MOV     ?V0 + 2,DPL
   \   000039   8583..       MOV     ?V0 + 3,DPH
   \   00003C   78..         MOV     R0,#?V0 + 2
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..20       MOV     ?V0 + 2,#0x20
   \   000044   75..00       MOV     ?V0 + 3,#0x0
   \   000047   78..         MOV     R0,#?V0 + 2
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7C00         MOV     R4,#0x0
   \   00004E   7D00         MOV     R5,#0x0
   \   000050   7A01         MOV     R2,#0x1
   \   000052   7B01         MOV     R3,#0x1
   \   000054   12....       LCALL   ??osal_nv_read?relay
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   3743              
   3744              if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
   3745                  APSME_IsDefaultTCLK(tcLinkKey.extAddr))
   \   00005C                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   AC82         MOV     R4,DPL
   \   000064   AD83         MOV     R5,DPH
   \   000066   AA..         MOV     R2,?V0 + 0
   \   000068   AB..         MOV     R3,?V0 + 1
   \   00006A   12....       LCALL   ??AddrMgrExtAddrEqual?relay
   \   00006D   E9           MOV     A,R1
   \   00006E   7013         JNZ     ??APSME_TCLinkKeySync_1
   \   000070                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   AA82         MOV     R2,DPL
   \   000078   AB83         MOV     R3,DPH
   \   00007A   12....       LCALL   ??APSME_IsDefaultTCLK?relay
   \   00007D   E9           MOV     A,R1
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??APSME_TCLinkKeySync_2 & 0xFFFF
   3746              {
   3747                // verify that the incoming frame counter is valid
   3748                if ( si->frmCntr >= tcLinkKey.rxFrmCntr )
   \                     ??APSME_TCLinkKeySync_1:
   \   000083   EE           MOV     A,R6
   \   000084   2412         ADD     A,#0x12
   \   000086   F5..         MOV     ?V0 + 0,A
   \   000088   EF           MOV     A,R7
   \   000089   3400         ADDC    A,#0x0
   \   00008B   F5..         MOV     ?V0 + 1,A
   \   00008D   85..82       MOV     DPL,?V0 + 0
   \   000090   F583         MOV     DPH,A
   \   000092   C082         PUSH    DPL
   \   000094   C083         PUSH    DPH
   \   000096   741C         MOV     A,#0x1c
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   78..         MOV     R0,#?V0 + 4
   \   00009D   12....       LCALL   ?L_MOV_X
   \   0000A0   D083         POP     DPH
   \   0000A2   D082         POP     DPL
   \   0000A4   78..         MOV     R0,#?V0 + 4
   \   0000A6   12....       LCALL   ?UL_GT_X
   \   0000A9   407A         JC      ??APSME_TCLinkKeySync_3
   3749                {
   3750                  // set the key to use
   3751                  osal_memcpy( si->key, tcLinkKey.key, SEC_KEY_LEN );
   \   0000AB                ; Setup parameters for call to function osal_memcpy
   \   0000AB   7408         MOV     A,#0x8
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   A982         MOV     R1,DPL
   \   0000B2   AA83         MOV     R2,DPH
   \   0000B4   89..         MOV     ?V0 + 4,R1
   \   0000B6   8A..         MOV     ?V0 + 5,R2
   \   0000B8   75..00       MOV     ?V0 + 6,#0x0
   \   0000BB   78..         MOV     R0,#?V0 + 4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C0   7C10         MOV     R4,#0x10
   \   0000C2   7D00         MOV     R5,#0x0
   \   0000C4   EE           MOV     A,R6
   \   0000C5   240F         ADD     A,#0xf
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   EF           MOV     A,R7
   \   0000CA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   3752                  
   3753                  // update the rx frame counter
   3754                  tcLinkKey.rxFrmCntr = si->frmCntr + 1;
   \   0000D0   85..82       MOV     DPL,?V0 + 0
   \   0000D3   85..83       MOV     DPH,?V0 + 1
   \   0000D6   C082         PUSH    DPL
   \   0000D8   C083         PUSH    DPH
   \   0000DA   90....       MOV     DPTR,#__Constant_1
   \   0000DD   78..         MOV     R0,#?V0 + 0
   \   0000DF   12....       LCALL   ?L_MOV_X
   \   0000E2   D083         POP     DPH
   \   0000E4   D082         POP     DPL
   \   0000E6   78..         MOV     R0,#?V0 + 0
   \   0000E8   12....       LCALL   ?L_ADD_X
   \   0000EB   741C         MOV     A,#0x1c
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?L_MOV_TO_X
   3755                  
   3756                  // Write the tc link key back to the NV
   3757                  osal_nv_write( (ZCD_NV_TCLK_TABLE_START + i), 0, 
   3758                                sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   0000F5                ; Setup parameters for call to function osal_nv_write
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   8582..       MOV     ?V0 + 0,DPL
   \   0000FE   8583..       MOV     ?V0 + 1,DPH
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   75..20       MOV     ?V0 + 0,#0x20
   \   000109   75..00       MOV     ?V0 + 1,#0x0
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000111   7C00         MOV     R4,#0x0
   \   000113   7D00         MOV     R5,#0x0
   \   000115   7A01         MOV     R2,#0x1
   \   000117   7B01         MOV     R3,#0x1
   \   000119   12....       LCALL   ??osal_nv_write?relay
   \   00011C   7404         MOV     A,#0x4
   \   00011E   12....       LCALL   ?DEALLOC_XSTACK8
   3759                  
   3760                  status = ZSuccess;
   \   000121   7900         MOV     R1,#0x0
   \   000123   8006         SJMP    ??APSME_TCLinkKeySync_4
   3761                  
   3762                }
   3763                else
   3764                {
   3765                  status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_3:
   \   000125   79A2         MOV     R1,#-0x5e
   3766                }
   3767                
   3768                return status;
   \   000127   8002         SJMP    ??APSME_TCLinkKeySync_4
   3769              }
   3770            }
   3771            
   3772            
   3773            return status;
   \                     ??APSME_TCLinkKeySync_2:
   \   000129   79A1         MOV     R1,#-0x5f
   \                     ??APSME_TCLinkKeySync_4:
   \   00012B   7420         MOV     A,#0x20
   \   00012D   02....       LJMP    ?Subroutine80 & 0xFFFF
   3774          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0
   3775          
   3776          /******************************************************************************
   3777           * @fn          APSME_TCLinkKeyLoad
   3778           *
   3779           * @brief       Load Trust Center LINK key data.
   3780           *
   3781           * @param       dstAddr - [in] dstAddr
   3782           * @param       si      - [in, out] SSP_Info_t
   3783           *
   3784           * @return      ZStatus_t
   3785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine109_0
   \   000004                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3786          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   3787          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 45
   \   000005   74D3         MOV     A,#-0x2d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0 + 0,R4
   \   00000C   8D..         MOV     ?V0 + 1,R5
   3788            uint8              i;
   3789            APSME_TCLinkKey_t  tcLinkKey;
   3790            AddrMgrEntry_t     addrEntry;  
   3791            
   3792            // Look up the ami of the srcAddr if available
   3793            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   E4           CLR     A
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
   3794            addrEntry.nwkAddr = dstAddr;
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine13 & 0xFFFF
   3795          
   3796            APSME_LookupExtAddr( dstAddr, si->extAddr );
   \                     ??CrossCallReturnLabel_23:
   \   00001E   EC           MOV     A,R4
   \   00001F   2406         ADD     A,#0x6
   \   000021   FE           MOV     R6,A
   \   000022   ED           MOV     A,R5
   \   000023   3400         ADDC    A,#0x0
   \   000025   FF           MOV     R7,A
   \   000026                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000026   EE           MOV     A,R6
   \   000027   FC           MOV     R4,A
   \   000028   EF           MOV     A,R7
   \   000029   FD           MOV     R5,A
   \   00002A   12....       LCALL   ??APSME_LookupExtAddr?relay
   3797          
   3798            if ( AddrMgrExtAddrValid( si->extAddr ) == TRUE )
   \   00002D                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00002D   EE           MOV     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   EF           MOV     A,R7
   \   000030   FB           MOV     R3,A
   \   000031   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000034   E9           MOV     A,R1
   \   000035   6401         XRL     A,#0x1
   \   000037   6003         JZ      $+5
   \   000039   02....       LJMP    ??APSME_TCLinkKeyLoad_0 & 0xFFFF
   3799            {
   3800              // Look up the TC link key associated with the device
   3801              // or the master TC link key (ami = 0xFFFF), whichever is found
   3802              for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   3803              {
   3804                // Read entry i of the TC link key table from NV
   3805                osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
   3806                             sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   00003C                ; Setup parameters for call to function osal_nv_read
   \   00003C   740D         MOV     A,#0xd
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 2,DPL
   \   000044   8583..       MOV     ?V0 + 3,DPH
   \   000047   78..         MOV     R0,#?V0 + 2
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..20       MOV     ?V0 + 2,#0x20
   \   00004F   75..00       MOV     ?V0 + 3,#0x0
   \   000052   78..         MOV     R0,#?V0 + 2
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   7C00         MOV     R4,#0x0
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7A01         MOV     R2,#0x1
   \   00005D   7B01         MOV     R3,#0x1
   \   00005F   12....       LCALL   ??osal_nv_read?relay
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   3807                
   3808                if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
   3809                   APSME_IsDefaultTCLK(tcLinkKey.extAddr))
   \   000067                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   000067   740D         MOV     A,#0xd
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   AC82         MOV     R4,DPL
   \   00006E   AD83         MOV     R5,DPH
   \   000070   EE           MOV     A,R6
   \   000071   FA           MOV     R2,A
   \   000072   EF           MOV     A,R7
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   ??AddrMgrExtAddrEqual?relay
   \   000077   E9           MOV     A,R1
   \   000078   7012         JNZ     ??APSME_TCLinkKeyLoad_1
   \   00007A                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   00007A   740D         MOV     A,#0xd
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   AA82         MOV     R2,DPL
   \   000081   AB83         MOV     R3,DPH
   \   000083   12....       LCALL   ??APSME_IsDefaultTCLK?relay
   \   000086   E9           MOV     A,R1
   \   000087   7003         JNZ     $+5
   \   000089   02....       LJMP    ??APSME_TCLinkKeyLoad_0 & 0xFFFF
   3810                {
   3811                  // set the key to use
   3812                  osal_memcpy( si->key, tcLinkKey.key, SEC_KEY_LEN);  
   \                     ??APSME_TCLinkKeyLoad_1:
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   7415         MOV     A,#0x15
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   A982         MOV     R1,DPL
   \   000093   AA83         MOV     R2,DPH
   \   000095   89..         MOV     ?V0 + 4,R1
   \   000097   8A..         MOV     ?V0 + 5,R2
   \   000099   75..00       MOV     ?V0 + 6,#0x0
   \   00009C   78..         MOV     R0,#?V0 + 4
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A1   7C10         MOV     R4,#0x10
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   E5..         MOV     A,?V0 + 0
   \   0000A7   240F         ADD     A,#0xf
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   E5..         MOV     A,?V0 + 1
   \   0000AD   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   3813                  
   3814                  // update link key related fields
   3815                  si->keyID   = SEC_KEYID_LINK;
   \   0000B3   E5..         MOV     A,?V0 + 0
   \   0000B5   240E         ADD     A,#0xe
   \   0000B7   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0000BA   E4           CLR     A
   \   0000BB   F0           MOVX    @DPTR,A
   3816                  si->frmCntr = tcLinkKey.txFrmCntr;
   \   0000BC   7425         MOV     A,#0x25
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   78..         MOV     R0,#?V0 + 4
   \   0000C3   12....       LCALL   ?L_MOV_X
   \   0000C6   E5..         MOV     A,?V0 + 0
   \   0000C8   2412         ADD     A,#0x12
   \   0000CA   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?L_MOV_TO_X
   3817                
   3818                  // update outgoing frame counter
   3819                  tcLinkKey.txFrmCntr++;
   \   0000D2   90....       MOV     DPTR,#__Constant_1
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?L_MOV_X
   \   0000DA   7425         MOV     A,#0x25
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   78..         MOV     R0,#?V0 + 0
   \   0000E1   12....       LCALL   ?L_ADD_TO_X
   3820                  
   3821                  // Write the tc link key back to the NV
   3822                  osal_nv_write( (ZCD_NV_TCLK_TABLE_START + i), 0, 
   3823                                sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   0000E4                ; Setup parameters for call to function osal_nv_write
   \   0000E4   740D         MOV     A,#0xd
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   8582..       MOV     ?V0 + 0,DPL
   \   0000EC   8583..       MOV     ?V0 + 1,DPH
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   75..20       MOV     ?V0 + 0,#0x20
   \   0000F7   75..00       MOV     ?V0 + 1,#0x0
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   7C00         MOV     R4,#0x0
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A01         MOV     R2,#0x1
   \   000105   7B01         MOV     R3,#0x1
   \   000107   12....       LCALL   ??osal_nv_write?relay
   \   00010A   7404         MOV     A,#0x4
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   3824                  
   3825                  return ZSuccess;
   \   00010F   7900         MOV     R1,#0x0
   \   000111   8021         SJMP    ??APSME_TCLinkKeyLoad_2
   3826                }
   3827              }
   3828            }
   3829              
   3830            // If no TC link key found, remove the device from the address manager
   3831            if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   \                     ??APSME_TCLinkKeyLoad_0:
   \   000113                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000113   85..82       MOV     DPL,?XSP + 0
   \   000116   85..83       MOV     DPH,?XSP + 1
   \   000119   AA82         MOV     R2,DPL
   \   00011B   AB83         MOV     R3,DPH
   \   00011D   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000120   E9           MOV     A,R1
   \   000121   6401         XRL     A,#0x1
   \   000123   700D         JNZ     ??APSME_TCLinkKeyLoad_3
   3832            {
   3833              AddrMgrEntryRelease( &addrEntry );
   \   000125                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000125   85..82       MOV     DPL,?XSP + 0
   \   000128   85..83       MOV     DPH,?XSP + 1
   \   00012B   AA82         MOV     R2,DPL
   \   00012D   AB83         MOV     R3,DPH
   \   00012F   12....       LCALL   ??AddrMgrEntryRelease?relay
   3834            }
   3835          
   3836            return ZSecNoKey;
   \                     ??APSME_TCLinkKeyLoad_3:
   \   000132   79A1         MOV     R1,#-0x5f
   \                     ??APSME_TCLinkKeyLoad_2:
   \   000134   742D         MOV     A,#0x2d
   \   000136   02....       LJMP    ?Subroutine80 & 0xFFFF
   3837          }
   3838          
   3839          /******************************************************************************
   3840           * @fn          APSME_IsDefaultTCLK
   3841           *
   3842           * @brief       Return true or false based on the extended address.  If the 
   3843           *              input ext address is all FFs, it means the trust center link
   3844           *              assoiciated with the address is the default trust center link key
   3845           *
   3846           * @param       extAddr - [in] extended address
   3847           *
   3848           * @return      uint8 TRUE/FALSE
   3849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3850          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   3851          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3852            uint8 i = 0;
   \   000004   7C00         MOV     R4,#0x0
   3853            
   3854            if( extAddr == NULL )
   \   000006   EA           MOV     A,R2
   \   000007   7001         JNZ     ??APSME_IsDefaultTCLK_0
   \   000009   EB           MOV     A,R3
   \                     ??APSME_IsDefaultTCLK_0:
   \   00000A   701A         JNZ     ??APSME_IsDefaultTCLK_1
   3855            {
   3856              return FALSE;
   \                     ??APSME_IsDefaultTCLK_2:
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   801F         SJMP    ??APSME_IsDefaultTCLK_3
   3857            }
   3858            
   3859            while( i++ < Z_EXTADDR_LEN )
   3860            {
   3861              if( *extAddr++ != 0xFF )
   \                     ??APSME_IsDefaultTCLK_4:
   \   000010   EA           MOV     A,R2
   \   000011   F8           MOV     R0,A
   \   000012   EB           MOV     A,R3
   \   000013   F9           MOV     R1,A
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   AA82         MOV     R2,DPL
   \   00001B   AB83         MOV     R3,DPH
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   64FF         XRL     A,#0xff
   \   000024   70E6         JNZ     ??APSME_IsDefaultTCLK_2
   3862              {
   3863                return FALSE;
   3864              }
   3865            }
   \                     ??APSME_IsDefaultTCLK_1:
   \   000026   EC           MOV     A,R4
   \   000027   0C           INC     R4
   \   000028   C3           CLR     C
   \   000029   9408         SUBB    A,#0x8
   \   00002B   40E3         JC      ??APSME_IsDefaultTCLK_4
   3866            
   3867            return TRUE;
   \   00002D   7901         MOV     R1,#0x1
   \                     ??APSME_IsDefaultTCLK_3:
   \   00002F   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   3868          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrTCMasterKey>`:
   \   000000   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 137, 103, 69, 35, 1, 239, 205, 171
   \            00000000
   \            89674523
   \            01EFCDAB

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrMasterKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAddrStore?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrExtAddrStore?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrExtAddrLookup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrMasterKeyLookup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrMasterKeyStore?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEntryInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEntryLookup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEntryLookupAMI?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMI

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEntryLookupExt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEntryFree?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEntryNew?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrCtrlRelease?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlRelease

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrCtrlLookup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrCtrlAdd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlAdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrCtrlTerm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlTerm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrCtrlReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrMasterKeyLoad?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAppKeyGet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAppKeyReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEstablishKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEstablishKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrSendMasterKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendMasterKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrSendNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceEntryRemove?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceEntryRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceRemoveByExtAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemoveByExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAddrMgrUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrMgrUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceEntryAdd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceEntryAdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceCtrlHandler?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceCtrlHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceCtrlSetup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceCtrlSetup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceCtrlUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceCtrlUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_SKA_TimerExpired?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_SKA_TimerExpired

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceRemove?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceValidateSKKE?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateSKKE

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceValidateRM?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateRM

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceValidateCM?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateCM

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceValidate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceJoinDirect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinDirect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceJoinFwd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinFwd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrDeviceNew?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAssocDeviceAuth?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAssocDeviceAuth

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAuthInitiate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthInitiate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAuthNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrConfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrPermitJoining?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoining

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrPermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrNewDeviceEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNewDeviceEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEstablishKeyCfm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEstablishKeyCfm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrTCExtAddrCheck?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCExtAddrCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrTCDataLoad?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCDataLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrEstablishKeyInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEstablishKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrTransportKeyInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTransportKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrUpdateDeviceInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrRemoveDeviceInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRemoveDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrRequestKeyInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrSwitchKeyInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAuthenticateInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticateInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAuthenticateCfm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticateCfm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrUpdateNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrSwitchNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAppKeyTypeSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyTypeSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_MasterKeyGet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_MasterKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_LinkKeySet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeySet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAuthenticationSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAuthenticationCheck?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_LinkKeyDataGet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeyDataGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_KeyFwdToChild?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_KeyFwdToChild

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAddLinkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDSecMgrAPSRemove?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAPSRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_TCLinkKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_TCLinkKeySync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeySync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_TCLinkKeyLoad?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??APSME_IsDefaultTCLK?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsDefaultTCLK
   3869          
   3870          
   3871          /******************************************************************************
   3872          ******************************************************************************/
   3873          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     APSME_IsDefaultTCLK                2      0     61
     APSME_KeyFwdToChild                0      0      9
       -> AssocGetWithExt               0      0     18
       -> ZDSecMgrAssocDeviceAuth       0      0     18
     APSME_LinkKeyDataGet               0      0     11
       -> ZDSecMgrEntryLookupExt        0      0     22
     APSME_LinkKeySet                   0      0     37
       -> ZDSecMgrEntryLookupExt        0      0     36
       -> osal_memcpy                   0      0     42
     APSME_MasterKeyGet                 0      0     11
       -> ZDSecMgrExtAddrLookup         0      0     22
       -> ZDSecMgrMasterKeyLookup       0      0     22
     APSME_SKA_TimerExpired             2      0      0
       -> ZDSecMgrDeviceCtrlUpdate      4      0      0
     APSME_TCLinkKeyInit                0      0     46
       -> osal_memset                   0      0     86
       -> osal_memset                   0      0     86
       -> osal_memcpy                   0      0     92
       -> osal_nv_item_init             0      0     90
       -> osal_nv_item_init             0      0     90
     APSME_TCLinkKeyLoad                1      0     65
       -> APSME_LookupExtAddr           0      0    122
       -> AddrMgrExtAddrValid           0      0    122
       -> osal_nv_read                  0      0    130
       -> AddrMgrExtAddrEqual           0      0    122
       -> APSME_IsDefaultTCLK           0      0    122
       -> osal_memcpy                   0      0    128
       -> osal_nv_write                 0      0    130
       -> AddrMgrEntryLookupNwk         0      0    122
       -> AddrMgrEntryRelease           0      0    122
     APSME_TCLinkKeySync                2      0     52
       -> AddrMgrExtAddrValid           0      0     96
       -> APSME_LookupExtAddr           0      0     96
       -> osal_nv_read                  0      0    104
       -> AddrMgrExtAddrEqual           0      0     96
       -> APSME_IsDefaultTCLK           0      0     96
       -> osal_memcpy                   0      0    102
       -> osal_nv_write                 0      0    104
     ZDSecMgrAPSRemove                  2      0     12
       -> ZDSecMgrDeviceRemove          4      0     20
     ZDSecMgrAddLinkKey                 0      0     20
       -> ZDSecMgrAddrStore             0      0     36
       -> ZDSecMgrEntryLookupAMI        0      0     32
       -> ZDSecMgrEntryNew              0      0     32
       -> APSME_LinkKeySet              0      0     32
     ZDSecMgrAddrMgrUpdate              1      0     35
       -> AddrMgrEntryGet               0      0     44
       -> AddrMgrEntryUpdate            0      0     44
     ZDSecMgrAddrStore                  1      0     40
       -> AddrMgrExtAddrSet             0      0     44
       -> AddrMgrEntryUpdate            0      0     44
     ZDSecMgrAppKeyGet                  1      0     17
       -> SSP_GetTrueRand               0      0     18
     ZDSecMgrAppKeyReq                  1      0     49
       -> APSME_LookupNwkAddr           0      0     98
       -> APSME_LookupExtAddr           0      0     98
       -> SSP_GetTrueRand               0      0     98
       -> APSME_TransportKeyReq         0      0     98
       -> APSME_TransportKeyReq         0      0     98
     ZDSecMgrAppKeyTypeSet              2      0      0
     ZDSecMgrAssocDeviceAuth            2      0     35
     ZDSecMgrAuthInitiate               1      0     16
       -> APSME_LookupNwkAddr           0      0     32
       -> APSME_AuthenticateReq         0      0     32
     ZDSecMgrAuthNwkKey                 2      0     10
       -> osal_set_event                4      0      0
     ZDSecMgrAuthenticateCfm            2      0      0
       -> osal_set_event                4      0      0
     ZDSecMgrAuthenticateInd            1      0     32
       -> AddrMgrExtAddrSet             0      0     64
       -> AddrMgrEntryUpdate            0      0     64
       -> APSME_AuthenticateReq         0      0     64
     ZDSecMgrAuthenticationCheck        0      0      0
     ZDSecMgrAuthenticationSet          1      0     11
       -> ZDSecMgrEntryLookupExt        0      0     22
     ZDSecMgrConfig                     2      0      0
       -> APSME_SecurityNM              4      0      0
     ZDSecMgrCtrlAdd                    0      0     27
       -> ZDSecMgrCtrlSet               0      0     28
     ZDSecMgrCtrlInit                   3      0      0
       -> osal_mem_alloc                4      0      0
     ZDSecMgrCtrlLookup                 0      0     23
     ZDSecMgrCtrlRelease                3      0      0
     ZDSecMgrCtrlReset                  0      0     27
       -> ZDSecMgrCtrlLookup            0      0     24
       -> ZDSecMgrCtrlSet               0      0     28
       -> ZDSecMgrCtrlAdd               0      0     24
     ZDSecMgrCtrlSet                    1      0     23
     ZDSecMgrCtrlTerm                   3      0     11
       -> ZDSecMgrCtrlLookup            4      0      4
     ZDSecMgrDeviceCtrlHandler          1      0     42
       -> ZDSecMgrSendMasterKey         0      0     18
       -> ZDSecMgrEstablishKey          0      0     18
       -> ZDSecMgrSendNwkKey            0      0     18
       -> osal_start_timerEx            0      0     18
     ZDSecMgrDeviceCtrlSetup            3      0      0
       -> ZDSecMgrDeviceCtrlHandler     4      0      0
     ZDSecMgrDeviceCtrlUpdate           1      0     13
       -> ZDSecMgrEntryLookupExt        0      0     26
       -> ZDSecMgrCtrlLookup            0      0     26
     ZDSecMgrDeviceEntryAdd             0      0     27
       -> ZDSecMgrEntryLookup           0      0     26
       -> ZDSecMgrDeviceEntryRemove     0      0     26
       -> ZDSecMgrEntryLookupAMI        0      0     26
       -> ZDSecMgrAddrMgrUpdate         0      0     26
       -> ZDSecMgrEntryLookupAMI        0      0     26
       -> ZDSecMgrEntryNew              0      0     26
       -> ZDSecMgrAddrMgrUpdate         0      0     26
       -> ZDSecMgrCtrlAdd               0      0     26
       -> ZDSecMgrCtrlReset             0      0     26
     ZDSecMgrDeviceEntryRemove          0      0     22
       -> ZDSecMgrCtrlTerm              0      0     18
     ZDSecMgrDeviceJoin                 0      0     24
       -> ZDSecMgrDeviceValidate        0      0     24
       -> ZDSecMgrAddrStore             0      0     28
       -> ZDSecMgrSendNwkKey            0      0     24
       -> ZDSecMgrDeviceRemove          0      0     24
     ZDSecMgrDeviceJoinDirect           0      0      9
       -> ZDSecMgrDeviceJoin            0      0     18
       -> AssocGetWithShort             0      0     18
       -> ZDSecMgrAssocDeviceAuth       0      0     18
     ZDSecMgrDeviceJoinFwd              3      0      8
       -> APSME_UpdateDeviceReq         4      0     16
     ZDSecMgrDeviceNew                  2      0     35
       -> ZDSecMgrDeviceJoinDirect      4      0      0
     ZDSecMgrDeviceRemove               1      0     38
       -> NLME_GetShortAddr             0      0     38
       -> AssocGetWithExt               0      0     38
       -> NLME_LeaveReq                 0      0     38
       -> APSME_RemoveDeviceReq         0      0     38
     ZDSecMgrDeviceRemoveByExtAddr      0      0     11
       -> ZDSecMgrEntryLookupExt        0      0     22
       -> ZDSecMgrDeviceEntryRemove     0      0     22
     ZDSecMgrDeviceValidate             3      0     12
       -> ZDSecMgrDeviceValidateRM      4      0      0
     ZDSecMgrDeviceValidateCM           0      0     16
       -> ZDSecMgrAddrStore             0      0     32
       -> ZDSecMgrMasterKeyLoad         0      0     28
       -> ZDSecMgrDeviceEntryAdd        0      0     28
     ZDSecMgrDeviceValidateRM           2      0      0
     ZDSecMgrDeviceValidateSKKE         0      0     42
       -> ZDSecMgrExtAddrLookup         0      0     26
       -> ZDSecMgrMasterKeyLookup       0      0     26
       -> ZDSecMgrDeviceEntryAdd        0      0     26
     ZDSecMgrEntryFree                  2      0      0
     ZDSecMgrEntryInit                  2      0      0
       -> osal_mem_alloc                4      0      0
     ZDSecMgrEntryLookup                1      0     36
       -> AddrMgrEntryLookupNwk         0      0     46
     ZDSecMgrEntryLookupAMI             0      0     27
     ZDSecMgrEntryLookupExt             0      0     29
       -> ZDSecMgrExtAddrLookup         0      0     22
       -> ZDSecMgrEntryLookupAMI        0      0     22
     ZDSecMgrEntryNew                   1      0     27
     ZDSecMgrEstablishKey               1      0     26
       -> NLME_GetShortAddr             0      0     34
       -> APSME_EstablishKeyReq         0      0     34
     ZDSecMgrEstablishKeyCfm            2      0      0
       -> ZDSecMgrDeviceCtrlUpdate      4      0      0
     ZDSecMgrEstablishKeyInd            1      0     29
       -> ZDSecMgrTCDataLoad            0      0     58
       -> ZDSecMgrTCExtAddrCheck        0      0     58
       -> ZDSecMgrDeviceValidateSKKE
                                        0      0     58
       -> APSME_EstablishKeyRsp         0      0     58
     ZDSecMgrEvent                      1      0     33
       -> AddrMgrEntryGet               0      0     66
       -> ZDSecMgrDeviceCtrlHandler     0      0     66
       -> osal_start_timerEx            0      0     66
     ZDSecMgrExtAddrLookup              1      0     38
       -> AddrMgrExtAddrSet             0      0     44
       -> AddrMgrEntryLookupExt         0      0     44
     ZDSecMgrExtAddrStore               1      0     24
       -> AddrMgrExtAddrSet             0      0     44
       -> AddrMgrEntryUpdate            0      0     44
     ZDSecMgrInit                       2      0      0
       -> APSME_SecurityNM              4      0      0
     ZDSecMgrMasterKeyInit              2      0      0
       -> osal_mem_alloc                4      0      0
     ZDSecMgrMasterKeyLoad              0      0     33
       -> ZDSecMgrExtAddrLookup         0      0     32
       -> ZDSecMgrMasterKeyLookup       0      0     32
       -> osal_memcpy                   0      0     38
       -> ZDSecMgrMasterKeyStore        0      0     32
     ZDSecMgrMasterKeyLookup            0      0     34
     ZDSecMgrMasterKeyStore             0      0     34
       -> osal_memcpy                   0      0     36
       -> osal_memset                   0      0     30
     ZDSecMgrNewDeviceEvent             1      0     35
       -> AssocMatchDeviceStatus        0      0     70
       -> ZDSecMgrAssocDeviceAuth       0      0     70
       -> AddrMgrEntryGet               0      0     70
       -> NLME_GetShortAddr             0      0     70
       -> ZDSecMgrDeviceNew             0      0     70
       -> AssocRemove                   0      0     70
     ZDSecMgrPermitJoining              2      0      0
     ZDSecMgrPermitJoiningTimeout       2      0      0
     ZDSecMgrRemoveDeviceInd            0      0     19
       -> APSME_LookupNwkAddr           0      0     38
       -> NLME_GetShortAddr             0      0     38
       -> ZDSecMgrDeviceRemove          0      0     38
     ZDSecMgrRequestKeyInd              2      0      0
       -> ZDSecMgrAppKeyReq             4      0      0
     ZDSecMgrSendMasterKey              1      0     32
       -> ZDSecMgrMasterKeyLookup       0      0     46
       -> NLME_GetShortAddr             0      0     46
       -> APSME_TransportKeyReq         0      0     46
     ZDSecMgrSendNwkKey                 1      0     37
       -> NLME_GetShortAddr             0      0     50
       -> NLME_GetShortAddr             0      0     50
       -> APSME_TransportKeyReq         0      0     50
     ZDSecMgrSwitchKeyInd               2      0      0
       -> SSP_SwitchNwkKey              4      0      0
       -> ZDApp_NVUpdate                4      0      0
     ZDSecMgrSwitchNwkKey               1      0     12
       -> APSME_SwitchKeyReq            0      0     24
       -> SSP_SwitchNwkKey              0      0     24
       -> ZDApp_NVUpdate                0      0     24
     ZDSecMgrTCDataLoad                 0      0     45
       -> ZDSecMgrAddrStore             0      0     32
       -> ZDSecMgrMasterKeyLookup       0      0     28
       -> ZDSecMgrMasterKeyStore        0      0     28
     ZDSecMgrTCExtAddrCheck             0      0     46
       -> AddrMgrExtAddrLookup          0      0     34
       -> AddrMgrExtAddrEqual           0      0     34
     ZDSecMgrTransportKeyInd            0      0     10
       -> ZDSecMgrTCDataLoad            0      0     20
       -> SSP_UpdateNwkKey              0      0     20
       -> SSP_SwitchNwkKey              0      0     20
       -> SSP_UpdateNwkKey              0      0     20
       -> SSP_SwitchNwkKey              0      0     20
       -> ZDSecMgrAuthNwkKey            0      0     20
     ZDSecMgrUpdateDeviceInd            2      0     10
       -> ZDSecMgrDeviceJoin            4      0     20
     ZDSecMgrUpdateNwkKey               1      0     23
       -> APSME_TransportKeyReq         0      0     46
       -> SSP_UpdateNwkKey              0      0     46
       -> ZDApp_NVUpdate                0      0     46


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     ZDSecMgrTCExtAddr                         8
     ZDSecMgrTCMasterKey                      16
     ZDSecMgrTCAuthenticated                   1
     ZDSecMgrTCDataLoaded                      1
     ZDSecMgrMasterKeyData                     2
     ZDSecMgrEntries                           2
     ZDSecMgrCtrlData                          2
     ZDSecMgrPermitJoiningEnabled              1
     ZDSecMgrPermitJoiningTimed                1
     TrustCenterLinkKey                       32
     ZDSecMgrMasterKeyInit                    61
     ?Subroutine1                              9
     ??Subroutine85_0                          5
     ?Subroutine57                            11
     ?Subroutine13                             6
     ?Subroutine67                            16
     ??Subroutine100_0                         7
     ZDSecMgrAddrStore                        55
     ?Subroutine53                            10
     ?Subroutine20                            19
     ?Subroutine15                             9
     ?Subroutine8                              3
     ??Subroutine86_0                          6
     ?Subroutine58                            10
     ?Subroutine82                             5
     ?Subroutine68                             7
     ?Subroutine73                            11
     ??Subroutine96_0                          3
     ??Subroutine97_0                          5
     ?Subroutine66                             6
     ??Subroutine106_0                         6
     ZDSecMgrExtAddrStore                     54
     ZDSecMgrExtAddrLookup                    61
     ZDSecMgrMasterKeyLookup                  93
     ??Subroutine87_0                          5
     ?Subroutine22                            19
     ?Subroutine46                            16
     ZDSecMgrMasterKeyStore                  139
     ?Subroutine48                            16
     ?Subroutine10                             4
     ??Subroutine110_0                         8
     ?Subroutine70                             6
     ZDSecMgrEntryInit                        71
     ZDSecMgrEntryLookup                     142
     ?Subroutine49                             4
     ?Subroutine78                             2
     ??Subroutine92_0                          3
     ??Subroutine93_0                          5
     ?Subroutine60                             6
     ??Subroutine105_0                         4
     ?Subroutine5                              4
     ??Subroutine107_0                         4
     ?Subroutine65                             4
     ZDSecMgrEntryLookupAMI                   75
     ?Subroutine16                            11
     ZDSecMgrEntryLookupExt                   60
     ?Subroutine76                             2
     ??Subroutine95_0                          2
     ?Subroutine37                             7
     ??Subroutine112_0                         6
     ZDSecMgrEntryFree                        18
     ZDSecMgrEntryNew                        110
     ZDSecMgrCtrlInit                         70
     ZDSecMgrCtrlRelease                      18
     ZDSecMgrCtrlLookup                      118
     ZDSecMgrCtrlSet                          92
     ?Subroutine11                             6
     ?Subroutine75                             6
     ??Subroutine103_0                         4
     ZDSecMgrCtrlAdd                         108
     ??Subroutine102_0                         5
     ZDSecMgrCtrlTerm                         41
     ??Subroutine88_0                          6
     ?Subroutine54                            11
     ZDSecMgrCtrlReset                        81
     ?Subroutine84                             5
     ZDSecMgrMasterKeyLoad                    86
     ?Subroutine25                            15
     ?Subroutine79                             2
     ??Subroutine101_0                         3
     ?Subroutine40                             7
     ?Subroutine61                             9
     ?Subroutine62                             6
     ??Subroutine113_0                         7
     ZDSecMgrAppKeyType                        1
     ZDSecMgrAppKeyGet                        49
     ?Subroutine38                             5
     ?Subroutine44                             4
     ??Subroutine98_0                          4
     ZDSecMgrAppKeyReq                       230
     ?Subroutine31                             6
     ??Subroutine91_0                          8
     ?Subroutine7                              9
     ??Subroutine108_0                         6
     ?Subroutine47                            26
     ZDSecMgrEstablishKey                     95
     ?Subroutine32                            11
     ??Subroutine89_0                          6
     ?Subroutine17                             6
     ??Subroutine90_0                          6
     ZDSecMgrSendMasterKey                   123
     ?Subroutine6                             11
     ?Subroutine59                             2
     ?Subroutine29                             8
     ?Subroutine2                              6
     ?Subroutine4                              7
     ?Subroutine41                             4
     ?Subroutine64                             4
     ?Subroutine71                             9
     ZDSecMgrSendNwkKey                      192
     ?Subroutine51                             2
     ?Subroutine74                             7
     ??Subroutine94_0                          6
     ??Subroutine104_0                         6
     ?Subroutine33                             6
     ZDSecMgrDeviceEntryRemove                26
     ZDSecMgrDeviceRemoveByExtAddr            35
     ?Subroutine42                             7
     ZDSecMgrAddrMgrUpdate                    66
     ?Subroutine77                             3
     ZDSecMgrDeviceEntryAdd                  197
     ?Subroutine36                             8
     ?Subroutine34                            12
     ?Subroutine14                             1
     ?Subroutine30                             4
     ZDSecMgrDeviceCtrlHandler               114
     ?Subroutine28                             8
     ?Subroutine56                             6
     ?Subroutine24                             8
     ZDSecMgrDeviceCtrlSetup                  62
     ZDSecMgrDeviceCtrlUpdate                102
     ?Subroutine83                             5
     ?Subroutine63                            11
     APSME_SKA_TimerExpired                   17
     ZDSecMgrDeviceRemove                    182
     ?Subroutine18                             6
     ?Subroutine43                             7
     ZDSecMgrDeviceValidateSKKE               55
     ?Subroutine27                            17
     ZDSecMgrDeviceValidateRM                 17
     ZDSecMgrDeviceValidateCM                 84
     ?Subroutine21                            16
     ZDSecMgrDeviceValidate                   48
     ZDSecMgrDeviceJoin                       75
     ZDSecMgrDeviceJoinDirect                 35
     ZDSecMgrDeviceJoinFwd                   155
     ?Subroutine52                             3
     ??Subroutine99_0                          5
     ??Subroutine109_0                         5
     ?Subroutine3                             13
     ZDSecMgrDeviceNew                         9
     ZDSecMgrAssocDeviceAuth                  25
     ZDSecMgrAuthInitiate                     66
     ZDSecMgrAuthNwkKey                       26
     ?Subroutine72                             7
     ZDSecMgrInit                              3
     ZDSecMgrConfig                            3
     ZDSecMgrPermitJoining                    40
     ZDSecMgrPermitJoiningTimeout             24
     ZDSecMgrNewDeviceEvent                  194
     ?Subroutine19                             3
     ZDSecMgrEvent                           264
     ?Subroutine0                              8
     ZDSecMgrEstablishKeyCfm                  21
     ZDSecMgrTCExtAddrCheck                   64
     ZDSecMgrTCDataLoad                       88
     ?Subroutine39                             6
     ZDSecMgrEstablishKeyInd                 207
     ?Subroutine9                             11
     ?Subroutine50                            15
     ?Subroutine55                            11
     ZDSecMgrTransportKeyInd                 139
     ?Subroutine81                             2
     ZDSecMgrUpdateDeviceInd                  49
     ZDSecMgrRemoveDeviceInd                  60
     ??Subroutine111_0                         8
     ZDSecMgrRequestKeyInd                    30
     ZDSecMgrSwitchKeyInd                     23
     ZDSecMgrAuthenticateInd                 127
     ZDSecMgrAuthenticateCfm                  46
     ZDSecMgrUpdateNwkKey                    104
     ZDSecMgrSwitchNwkKey                     42
     ?Subroutine12                             6
     ZDSecMgrAppKeyTypeSet                    24
     APSME_MasterKeyGet                       58
     APSME_LinkKeySet                        112
     ?Subroutine80                             8
     ?Subroutine35                             6
     ?Subroutine45                            10
     ZDSecMgrAuthenticationSet                52
     ZDSecMgrAuthenticationCheck               5
     APSME_LinkKeyDataGet                     85
     APSME_KeyFwdToChild                      62
     ZDSecMgrAddLinkKey                      143
     ZDSecMgrAPSRemove                        74
     APSME_TCLinkKeyInit                     127
     APSME_TCLinkKeySync                     304
     ?Subroutine23                             3
     ?Subroutine69                             4
     APSME_TCLinkKeyLoad                     313
     APSME_IsDefaultTCLK                      50
     ?Subroutine26                             6
     ?<Initializer for ZDSecMgrTCMasterKey>   16
     ?<Initializer for ZDSecMgrAppKeyType>     1
     __Constant_0                              4
     __Constant_1                              4
     ??ZDSecMgrMasterKeyInit?relay             6
     ??ZDSecMgrAddrStore?relay                 6
     ??ZDSecMgrExtAddrStore?relay              6
     ??ZDSecMgrExtAddrLookup?relay             6
     ??ZDSecMgrMasterKeyLookup?relay           6
     ??ZDSecMgrMasterKeyStore?relay            6
     ??ZDSecMgrEntryInit?relay                 6
     ??ZDSecMgrEntryLookup?relay               6
     ??ZDSecMgrEntryLookupAMI?relay            6
     ??ZDSecMgrEntryLookupExt?relay            6
     ??ZDSecMgrEntryFree?relay                 6
     ??ZDSecMgrEntryNew?relay                  6
     ??ZDSecMgrCtrlInit?relay                  6
     ??ZDSecMgrCtrlRelease?relay               6
     ??ZDSecMgrCtrlLookup?relay                6
     ??ZDSecMgrCtrlSet?relay                   6
     ??ZDSecMgrCtrlAdd?relay                   6
     ??ZDSecMgrCtrlTerm?relay                  6
     ??ZDSecMgrCtrlReset?relay                 6
     ??ZDSecMgrMasterKeyLoad?relay             6
     ??ZDSecMgrAppKeyGet?relay                 6
     ??ZDSecMgrAppKeyReq?relay                 6
     ??ZDSecMgrEstablishKey?relay              6
     ??ZDSecMgrSendMasterKey?relay             6
     ??ZDSecMgrSendNwkKey?relay                6
     ??ZDSecMgrDeviceEntryRemove?relay         6
     ??ZDSecMgrDeviceRemoveByExtAddr?relay     6
     ??ZDSecMgrAddrMgrUpdate?relay             6
     ??ZDSecMgrDeviceEntryAdd?relay            6
     ??ZDSecMgrDeviceCtrlHandler?relay         6
     ??ZDSecMgrDeviceCtrlSetup?relay           6
     ??ZDSecMgrDeviceCtrlUpdate?relay          6
     ??APSME_SKA_TimerExpired?relay            6
     ??ZDSecMgrDeviceRemove?relay              6
     ??ZDSecMgrDeviceValidateSKKE?relay        6
     ??ZDSecMgrDeviceValidateRM?relay          6
     ??ZDSecMgrDeviceValidateCM?relay          6
     ??ZDSecMgrDeviceValidate?relay            6
     ??ZDSecMgrDeviceJoin?relay                6
     ??ZDSecMgrDeviceJoinDirect?relay          6
     ??ZDSecMgrDeviceJoinFwd?relay             6
     ??ZDSecMgrDeviceNew?relay                 6
     ??ZDSecMgrAssocDeviceAuth?relay           6
     ??ZDSecMgrAuthInitiate?relay              6
     ??ZDSecMgrAuthNwkKey?relay                6
     ??ZDSecMgrInit?relay                      6
     ??ZDSecMgrConfig?relay                    6
     ??ZDSecMgrPermitJoining?relay             6
     ??ZDSecMgrPermitJoiningTimeout?relay      6
     ??ZDSecMgrNewDeviceEvent?relay            6
     ??ZDSecMgrEvent?relay                     6
     ??ZDSecMgrEstablishKeyCfm?relay           6
     ??ZDSecMgrTCExtAddrCheck?relay            6
     ??ZDSecMgrTCDataLoad?relay                6
     ??ZDSecMgrEstablishKeyInd?relay           6
     ??ZDSecMgrTransportKeyInd?relay           6
     ??ZDSecMgrUpdateDeviceInd?relay           6
     ??ZDSecMgrRemoveDeviceInd?relay           6
     ??ZDSecMgrRequestKeyInd?relay             6
     ??ZDSecMgrSwitchKeyInd?relay              6
     ??ZDSecMgrAuthenticateInd?relay           6
     ??ZDSecMgrAuthenticateCfm?relay           6
     ??ZDSecMgrUpdateNwkKey?relay              6
     ??ZDSecMgrSwitchNwkKey?relay              6
     ??ZDSecMgrAppKeyTypeSet?relay             6
     ??APSME_MasterKeyGet?relay                6
     ??APSME_LinkKeySet?relay                  6
     ??ZDSecMgrAuthenticationSet?relay         6
     ??ZDSecMgrAuthenticationCheck?relay       6
     ??APSME_LinkKeyDataGet?relay              6
     ??APSME_KeyFwdToChild?relay               6
     ??ZDSecMgrAddLinkKey?relay                6
     ??ZDSecMgrAPSRemove?relay                 6
     ??APSME_TCLinkKeyInit?relay               6
     ??APSME_TCLinkKeySync?relay               6
     ??APSME_TCLinkKeyLoad?relay               6
     ??APSME_IsDefaultTCLK?relay               6

 
 7 393 bytes in segment BANKED_CODE
   462 bytes in segment BANK_RELAYS
    17 bytes in segment XDATA_I
    17 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    50 bytes in segment XDATA_Z
 
 7 872 bytes of CODE  memory
     0 bytes of CONST memory (+ 8 bytes shared)
    67 bytes of XDATA memory

Errors: none
Warnings: none
