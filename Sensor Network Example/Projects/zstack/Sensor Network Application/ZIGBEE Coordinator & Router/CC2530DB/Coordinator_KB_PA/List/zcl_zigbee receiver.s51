///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               21/Aug/2013  17:04:49 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\Source\zcl_zigbee receiver.c               /
//    Command line       =  -f "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\Source\zcl_zigbee receiver.c" -D CC2530    /
//                          -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D          /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D Coor_receiver -D           /
//                          xHAL_KEYPAD -D xPA2591 -lC                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_KB_PA\List\"          /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e        /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\" -I "D:\GitHub\z-stack\Sensor    /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Coordinator &                  /
//                          Router\CC2530DB\Coordinator_KB_PA\List\zcl_zigbee /
//                           receiver.s51                                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `zcl_zigbee receiver`

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??zclUartReceiver?relay
        EXTERN ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ZSendMsgProcess?relay
        FUNCTION ??ZSendMsgProcess?relay,0203H
        PUBLIC ??zclUARTMsg_CallBack?relay
        FUNCTION ??zclUARTMsg_CallBack?relay,0203H
        PUBLIC ??zclUartReceiver?relay
        FUNCTION ??zclUartReceiver?relay,0203H
        FUNCTION ??zclZigbeeReceiver_BasicResetCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_IdentifyCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_IdentifyQueryRspCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_OnOffCB?relay,0203H
        FUNCTION ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r,0203H
        PUBLIC ??zclZigbeeRecv_Init?relay
        FUNCTION ??zclZigbeeRecv_Init?relay,0203H
        PUBLIC ??zclZigbeeRecv_event_loop?relay
        FUNCTION ??zclZigbeeRecv_event_loop?relay,0203H
        PUBLIC TransmitApp_Msg
        PUBLIC UartTransmit_Msg
        PUBLIC ZDO_MSG_SEND_ID
        PUBLIC ZSendMsgProcess
        FUNCTION ZSendMsgProcess,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC len
        PUBLIC send_msg_counter
        PUBLIC uart_recv
        PUBLIC zclUARTMsg_CallBack
        FUNCTION zclUARTMsg_CallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclUartReceiver
        FUNCTION zclUartReceiver,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION zclZigbeeReceiver_BasicResetCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclZigbeeReceiver_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclZigbeeReceiver_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclZigbeeReceiver_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclZigbeeReceiver_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclZigbeeReceiver_TaskID
        PUBLIC zclZigbeeRecv_DstAddr
        PUBLIC zclZigbeeRecv_Group
        PUBLIC zclZigbeeRecv_Init
        FUNCTION zclZigbeeRecv_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclZigbeeRecv_event_loop
        FUNCTION zclZigbeeRecv_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
zclZD_Init          SYMBOL "zclZD_Init"
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
afRegister          SYMBOL "afRegister"
osal_set_event      SYMBOL "osal_set_event"
show                SYMBOL "show"
osal_mem_free       SYMBOL "osal_mem_free"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalLedBlink         SYMBOL "HalLedBlink"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTRead         SYMBOL "HalUARTRead"
HalUARTWrite        SYMBOL "HalUARTWrite"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??show?relay        SYMBOL "?relay", show
??zclGeneral_RegisterCmdCallbacks?relay SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
??zclZD_Init?relay  SYMBOL "?relay", zclZD_Init
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
??zcl_registerAttrList?relay SYMBOL "?relay", zcl_registerAttrList
??zcl_registerForMsg?relay SYMBOL "?relay", zcl_registerForMsg
ZSendMsgProcess     SYMBOL "ZSendMsgProcess"
??ZSendMsgProcess?relay SYMBOL "?relay", ZSendMsgProcess
zclUARTMsg_CallBack SYMBOL "zclUARTMsg_CallBack"
??zclUARTMsg_CallBack?relay SYMBOL "?relay", zclUARTMsg_CallBack
zclUartReceiver     SYMBOL "zclUartReceiver"
??zclUartReceiver?relay SYMBOL "?relay", zclUartReceiver
zclZigbeeRecv_Init  SYMBOL "zclZigbeeRecv_Init"
??zclZigbeeRecv_Init?relay SYMBOL "?relay", zclZigbeeRecv_Init
zclZigbeeRecv_event_loop SYMBOL "zclZigbeeRecv_event_loop"
??zclZigbeeRecv_event_loop?relay SYMBOL "?relay", zclZigbeeRecv_event_loop

        EXTERN zclZD_Init
        FUNCTION zclZD_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN show
        FUNCTION show,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??show?relay
        FUNCTION ??show?relay,00H
        EXTERN ??zclGeneral_RegisterCmdCallbacks?relay
        FUNCTION ??zclGeneral_RegisterCmdCallbacks?relay,00H
        EXTERN ??zclZD_Init?relay
        FUNCTION ??zclZD_Init?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN ??zcl_registerAttrList?relay
        FUNCTION ??zcl_registerAttrList?relay,00H
        EXTERN ??zcl_registerForMsg?relay
        FUNCTION ??zcl_registerForMsg?relay,00H
        EXTERN zclZigbeeRecv_Attrs
        EXTERN zclZigbeeRecv_IdentifyTime
        EXTERN zclZigbeeRecv_OnOff
        EXTERN zclZigbeeRecv_SimpleDesc

// D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Coordinator & Router\Source\zcl_zigbee receiver.c
//    1 #include <stdio.h>
//    2 #include <string.h>
//    3 #include <stdlib.h>
//    4 #include "ZComDef.h"
//    5 #include "OSAL.h"
//    6 #include "AF.h"
//    7 #include "ZDApp.h"
//    8 
//    9 /* ZCL */
//   10 #include "zcl.h"
//   11 #include "zcl_general.h"
//   12 #include "zcl_ha.h"
//   13 #include "zcl_zigbee receiver.h"
//   14 
//   15 /* HAL */
//   16 #include "onboard.h"
//   17 #include "hal_lcd.h"
//   18 #include "hal_led.h"
//   19 #include "hal_timer.h"
//   20 #include "hal_uart.h"
//   21 #include "hal_key.h"
//   22 #include "hal_keypad.h"
//   23 
//   24 /* MAC_high-level */
//   25 #include "mac_high_level.h"
//   26 
//   27 /* MT */
//   28 #include "MT_UART.h"
//   29 #include "MT.h"
//   30 #include "ZComDef.h"
//   31 
//   32 #define TRANSMITAPP_MAX_DATA_LEN    102
//   33 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   34 uint8 send_msg_counter = 0;
send_msg_counter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   35 byte zclZigbeeReceiver_TaskID; // The zigbee task_ID
zclZigbeeReceiver_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   36 byte ZDO_MSG_SEND_ID; // The zigbee task_ID
ZDO_MSG_SEND_ID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   37 
//   38 // The UART transmit variable and array, the transmit data length

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   39 uint8 len; 
len:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   40 // Transmit message array

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   41 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   42 // The coordinator send to device message array

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   43 byte UartTransmit_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
UartTransmit_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   44 // Receive the UART command

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   45 uint8 uart_recv[TRANSMITAPP_MAX_DATA_LEN]; 
uart_recv:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   46 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   47 afAddrType_t zclZigbeeRecv_DstAddr;  // AF address type
zclZigbeeRecv_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   48 aps_Group_t zclZigbeeRecv_Group;
zclZigbeeRecv_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   49 
//   50 #define ZCLZIGBEERECV_BINDINGLIST       2
//   51 
//   52 static cId_t bindingInClusters[ZCLZIGBEERECV_BINDINGLIST] =
//   53 {
//   54   ZCL_CLUSTER_ID_GEN_ON_OFF,
//   55   ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//   56 };
//   57 
//   58 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   59 static endPointDesc_t zigbeeReceiver_TestEp =
zigbeeReceiver_TestEp:
        DS 6
        REQUIRE `?<Initializer for zigbeeReceiver_TestEp>`
        REQUIRE __INIT_XDATA_I
//   60 {
//   61   20,                                 // Test endpoint
//   62   &zclZigbeeReceiver_TaskID,
//   63   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//   64   (afNetworkLatencyReq_t)0            // No Network Latency req
//   65 };
//   66 
//   67 static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys );
//   68 static void zclZigbeeReceiver_BasicResetCB( void );
//   69 static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd );
//   70 static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//   71 static void zclZigbeeReceiver_OnOffCB( uint8 cmd );
//   72 static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void );
//   73 
//   74 void zclUARTMsg_CallBack(uint8 port, uint8 event); // The UART Message callback
//   75 void zclUartReceiver( void ); // The coordinator receive command function
//   76 
//   77 // Functions to process ZCL Foundation incoming Command/Response messages 
//   78 static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//   79 #ifdef ZCL_READ
//   80   static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//   81 #endif
//   82 #ifdef ZCL_WRITE
//   83   static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//   84 #endif
//   85   static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//   86 #ifdef ZCL_DISCOVER
//   87   static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
//   88 #endif
//   89 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   90 static zclGeneral_AppCallbacks_t zclZigbeeReceiver_CmdCallbacks =
zclZigbeeReceiver_CmdCallbacks:
        DS 30
        REQUIRE `?<Initializer for zclZigbeeReceiver_CmdCallbac`
        REQUIRE __INIT_XDATA_I
//   91 {
//   92   zclZigbeeReceiver_BasicResetCB,              // Basic Cluster Reset command
//   93   zclZigbeeReceiver_IdentifyCB,                // Identify command  
//   94   zclZigbeeReceiver_IdentifyQueryRspCB,        // Identify Query Response command
//   95   zclZigbeeReceiver_OnOffCB,                   // On/Off cluster command
//   96   NULL,                                        // Level Control Move to Level command
//   97   NULL,                                        // Level Control Move command
//   98   NULL,                                        // Level Control Step command
//   99   NULL,                                        // Group Response commands
//  100   NULL,                                        // Scene Store Request command
//  101   NULL,                                        // Scene Recall Request command
//  102   NULL,                                        // Scene Response command
//  103   NULL,                                        // Alarm (Response) command
//  104   NULL,                                        // RSSI Location commands
//  105   NULL,                                        // RSSI Location Response commands
//  106 };
//  107 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  108 void ZSendMsgProcess(void)
ZSendMsgProcess:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZSendMsgProcess
//  109 {      
        ; Saved register size: 0
        ; Auto size: 0
//  110     // Write receive coordinator command to UART
//  111  //   HalUARTWrite(MT_UART_DEFAULT_PORT, device_manager.Data, device_manager.DataLength-2);  
//  112  //   HalUARTWrite(MT_UART_DEFAULT_PORT, "\r\n", 3);    
//  113     //osal_start_timerEx( zclZigbeeReceiver_TaskID, ZDO_MSG_SEND_EVT, 1000 );        
//  114 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  115 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  116 void zclZigbeeRecv_Init( byte task_id )
zclZigbeeRecv_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zclZigbeeRecv_Init
//  117 {
        FUNCALL zclZigbeeRecv_Init, zclZD_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  118   zclZigbeeReceiver_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    @DPTR,A
//  119   
//  120   // Setup for the flash command's destination address ( Group )
//  121   zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;  // transmit mode - Group address
        MOV     A,#0x1
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
        MOVX    @DPTR,A
//  122   zclZigbeeRecv_DstAddr.endPoint = ZIGBEERECV_ENDPOINT;        // end-point number:20
        MOV     A,#0xd
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
        MOVX    @DPTR,A
//  123   zclZigbeeRecv_DstAddr.addr.shortAddr = RECV_GROUP;           // Group short address
        MOV     DPTR,#zclZigbeeRecv_DstAddr
        MOV     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x20
        MOVX    @DPTR,A
//  124   
//  125   // This App is part of the Zigbee Device Profile
//  126   zclZD_Init( &zclZigbeeRecv_SimpleDesc ); 
        ; Setup parameters for call to function zclZD_Init
        MOV     R2,#(zclZigbeeRecv_SimpleDesc & 0xff)
        MOV     R3,#((zclZigbeeRecv_SimpleDesc >> 8) & 0xff)
        LCALL   ??zclZD_Init?relay
//  127   
//  128   // Register the ZCL General Cluster Library callback functions
//  129   zclGeneral_RegisterCmdCallbacks( ZIGBEERECV_ENDPOINT, &zclZigbeeReceiver_CmdCallbacks ); 
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#(zclZigbeeReceiver_CmdCallbacks & 0xff)
        MOV     R3,#((zclZigbeeReceiver_CmdCallbacks >> 8) & 0xff)
        MOV     R1,#0xd
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//  130   
//  131   // Register the application's attribute list
//  132   zcl_registerAttrList( ZIGBEERECV_ENDPOINT, ZIGBEERECV_MAX_ATTRIBUTES, zclZigbeeRecv_Attrs ); 
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#(zclZigbeeRecv_Attrs & 0xff)
        MOV     R5,#((zclZigbeeRecv_Attrs >> 8) & 0xff)
        MOV     R2,#0xc
        MOV     R1,#0xd
        LCALL   ??zcl_registerAttrList?relay
//  133   
//  134   // Register the Application to receive the unprocessed Foundation command/response messages
//  135   zcl_registerForMsg( zclZigbeeReceiver_TaskID ); 
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zcl_registerForMsg?relay
//  136   
//  137   // Register for all key events - This app will handle all key events
//  138   RegisterForKeys( zclZigbeeReceiver_TaskID ); 
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  139   
//  140   // By default, all devices start out in Group 1 ( register grouop )
//  141   zclZigbeeRecv_Group.ID = RECV_GROUP;
        MOV     DPTR,#zclZigbeeRecv_Group
        MOV     A,#0x10
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x20
        MOVX    @DPTR,A
//  142   osal_memcpy( zclZigbeeRecv_Group.name, "RECV_GROUP", 8  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(`?<Constant "RECV_GROUP">` & 0xff)
        MOV     ?V0 + 1,#((`?<Constant "RECV_GROUP">` >> 8) & 0xff)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#((zclZigbeeRecv_Group + 2) & 0xff)
        MOV     R3,#(((zclZigbeeRecv_Group + 2) >> 8) & 0xff)
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  143   aps_AddGroup( ZIGBEERECV_ENDPOINT, &zclZigbeeRecv_Group ); 
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#(zclZigbeeRecv_Group & 0xff)
        MOV     R3,#((zclZigbeeRecv_Group >> 8) & 0xff)
        MOV     R1,#0xd
        LCALL   ??aps_AddGroup?relay
//  144   
//  145   // Register for a test endpoint
//  146   afRegister( &zigbeeReceiver_TestEp ); 
        ; Setup parameters for call to function afRegister
        MOV     R2,#(zigbeeReceiver_TestEp & 0xff)
        MOV     R3,#((zigbeeReceiver_TestEp >> 8) & 0xff)
        LCALL   ??afRegister?relay
//  147  
//  148   // Set osal event for zclZigbeeReceiver_TaskID, chris
//  149   osal_set_event( zclZigbeeReceiver_TaskID, NWK_RETRY_DELAY);  
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x18
        MOV     R3,#0x3
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  150 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  151 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  152 uint16 zclZigbeeRecv_event_loop( uint8 task_id, uint16 events )
zclZigbeeRecv_event_loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function zclZigbeeRecv_event_loop
//  153 {   
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, zclZigbeeReceiver_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, show
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeRecv_event_loop, zclUartReceiver
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  154     afIncomingMSGPacket_t *MSGpkt;
//  155     (void)task_id;  // Intentionally unreferenced parameter
//  156   
//  157     if ( events & SYS_EVENT_MSG ) // SYSTEM Message event
        MOV     A,#-0x80
        ANL     A,?V0 + 1
        MOV     R1,A
        CLR     A
        JNZ     ??zclZigbeeRecv_event_loop_0
        MOV     A,R1
??zclZigbeeRecv_event_loop_0:
        JNZ     ??zclZigbeeRecv_event_loop_1
//  158     {
//  159       while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigbeeReceiver_TaskID )) )
//  160       {   
//  161         switch ( MSGpkt->hdr.event )
//  162         {       
//  163         case ZCL_INCOMING_MSG: //0x34 : Incoming ZCL foundation message
//  164             show("ZCL_INCOMING_MSG");
//  165             // Incoming ZCL Foundation command/response messages
//  166             zclZigbeeReceiver_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt ); 
//  167             break;          
//  168         case AF_DATA_CONFIRM_CMD:   
//  169             //device_manager[0].shortAddr = MSGpkt->srcAddr.addr.shortAddr;
//  170             break;         
//  171         case ZDO_STATE_CHANGE:       
//  172             //ZSendMsgProcess();            
//  173             break;                 
//  174         default:
//  175             break;
//  176         }
//  177         osal_msg_deallocate( (uint8 *)MSGpkt ); // Release the memory
//  178       }
//  179       return (events ^ SYS_EVENT_MSG); // return unprocessed events
//  180     }
//  181   
//  182     // The user define application events
//  183     switch ( events )
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zclZigbeeRecv_event_loop>_0`:
        DATA
        DW        1
        DB        1
        DW        ??zclZigbeeRecv_event_loop_2
        DW        ??zclZigbeeRecv_event_loop_3
        DW        ??zclZigbeeRecv_event_loop_4
        CODE
//  184     {
//  185       case ZDO_MSG_SEND_EVT:
//  186             ZSendMsgProcess();                
//  187             break;
//  188       case SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT: // ZIGBEE Receiver identify timeout event
//  189         show("SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT");
??zclZigbeeRecv_event_loop_3:
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "SAMPLELIGHT_IDENTIFY_...">` & 0xff)
        MOV     R3,#((`?<Constant "SAMPLELIGHT_IDENTIFY_...">` >> 8) & 0xff)
        LCALL   ??show?relay
//  190         if ( zclZigbeeRecv_IdentifyTime > 0 )
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOVX    A,@DPTR
        JNZ     ??zclZigbeeRecv_event_loop_5
        INC     DPTR
        MOVX    A,@DPTR
??zclZigbeeRecv_event_loop_5:
        JZ      ??zclZigbeeRecv_event_loop_6
//  191              zclZigbeeRecv_IdentifyTime--;
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  192              zclZigbeeReceiver_ProcessIdentifyTimeChange();
??zclZigbeeRecv_event_loop_6:
        ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
        LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
        SJMP    ??zclZigbeeRecv_event_loop_2
??zclZigbeeRecv_event_loop_7:
        INC     R3
??zclZigbeeRecv_event_loop_8:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JC      ??zclZigbeeRecv_event_loop_7
??zclZigbeeRecv_event_loop_9:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        JNZ     ??zclZigbeeRecv_event_loop_10
        MOV     A,R3
??zclZigbeeRecv_event_loop_10:
        JZ      ??zclZigbeeRecv_event_loop_11
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
??zclZigbeeRecv_event_loop_11:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
??zclZigbeeRecv_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        JNZ     ??zclZigbeeRecv_event_loop_12
        MOV     A,R7
??zclZigbeeRecv_event_loop_12:
        JZ      ??zclZigbeeRecv_event_loop_13
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??zclZigbeeRecv_event_loop_11
        ; Setup parameters for call to function show
        MOV     R2,#(`?<Constant "ZCL_INCOMING_MSG">` & 0xff)
        MOV     R3,#((`?<Constant "ZCL_INCOMING_MSG">` >> 8) & 0xff)
        LCALL   ??show?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for zclZigbeeRecv_event_loop>_1`:
        DATA
        DB        0
        DB        2
        DB        1
        DW        ??zclZigbeeRecv_event_loop_14
        DB        4
        DW        ??zclZigbeeRecv_event_loop_15
        DW        ??zclZigbeeRecv_event_loop_9
        CODE
??zclZigbeeRecv_event_loop_14:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JNC     ??zclZigbeeRecv_event_loop_9
        INC     R3
        SJMP    ??CrossCallReturnLabel_0
??zclZigbeeRecv_event_loop_15:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zclZigbeeRecv_event_loop_8
??zclZigbeeRecv_event_loop_13:
        MOV     R2,?V0 + 0
        MOV     A,#-0x80
        XRL     A,?V0 + 1
        MOV     R3,A
        SJMP    ??zclZigbeeRecv_event_loop_16
//  193         break;   
//  194       case UART_MSG_EVT: // The UART Message event
//  195         //Chris Msg incoming
//  196         zclUartReceiver();
??zclZigbeeRecv_event_loop_4:
        ; Setup parameters for call to function zclUartReceiver
        LCALL   ??zclUartReceiver?relay
//  197         break;
//  198     }    
//  199     return 0; // Discard unknown events
??zclZigbeeRecv_event_loop_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclZigbeeRecv_event_loop_16:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  200 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  201 
//  202 static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys )
//  203 {
//  204   zAddrType_t dstAddr;
//  205   (void)shift; // Intentionally unreferenced parameter
//  206   
//  207 #if defined(Coor_receiver) || defined (Router_receiver)
//  208 
//  209   if ( keys & HAL_KEY_SW1 ) // Init EndDevice bind reequest, and use cluster list important to binding.
//  210   {
//  211     dstAddr.addrMode = afAddr16Bit;
//  212     dstAddr.addr.shortAddr = 0x0000;   // Coordinator makes the match
//  213     ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), ZIGBEERECV_ENDPOINT, // ZIGBEERECV_ENDPOINT = 13 is coordinator
//  214                           ZCL_HA_PROFILE_ID, ZCLZIGBEERECV_BINDINGLIST, bindingInClusters, 0,
//  215                           NULL, // No Outgoing clusters to bind
//  216                           TRUE );
//  217   }
//  218   
//  219   if ( keys & HAL_KEY_SW2 ) 
//  220   {
//  221     
//  222   }
//  223   
//  224 #endif
//  225 }
//  226 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  227 static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void )
zclZigbeeReceiver_ProcessIdentifyTimeChange:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function zclZigbeeReceiver_ProcessIdentifyTimeChange
//  228 {
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  229   if ( zclZigbeeRecv_IdentifyTime > 0 )
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOVX    A,@DPTR
        JNZ     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0
        INC     DPTR
        MOVX    A,@DPTR
??zclZigbeeReceiver_ProcessIdentifyTimeChange_0:
        JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1
//  230   {
//  231     osal_start_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  232     HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
        SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
//  233   }
//  234   else
//  235     {
//  236       if ( zclZigbeeRecv_OnOff )
??zclZigbeeReceiver_ProcessIdentifyTimeChange_1:
        MOV     DPTR,#zclZigbeeRecv_OnOff
        MOVX    A,@DPTR
        JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3
//  237       {
//  238         HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
//  239       }
//  240       else
//  241         {
//  242           HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
??zclZigbeeReceiver_ProcessIdentifyTimeChange_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  243           osal_stop_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        CFI EndBlock cfiBlock10
//  244         }
//  245     }
//  246 }
??zclZigbeeReceiver_ProcessIdentifyTimeChange_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
//  247 
//  248 /*********************************************************************
//  249  * @fn      zclZigbeeReceiver_BasicResetCB
//  250  * @brief   Callback from the ZCL General Cluster Library
//  251  *          to set all the Basic Cluster attributes to default values.
//  252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  253 static void zclZigbeeReceiver_BasicResetCB( void )
zclZigbeeReceiver_BasicResetCB:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function zclZigbeeReceiver_BasicResetCB
//  254 {
        ; Saved register size: 0
        ; Auto size: 0
//  255   // Reset all attributes to default values
//  256 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  257 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  258 static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd )
zclZigbeeReceiver_IdentifyCB:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function zclZigbeeReceiver_IdentifyCB
//  259 {
        FUNCALL zclZigbeeReceiver_IdentifyCB, zclZigbeeReceiver_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  260   zclZigbeeRecv_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zclZigbeeRecv_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  261   zclZigbeeReceiver_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
        LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
//  262 }
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock13
//  263 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  264 static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
zclZigbeeReceiver_IdentifyQueryRspCB:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function zclZigbeeReceiver_IdentifyQueryRspCB
//  265 {
        ; Saved register size: 0
        ; Auto size: 0
//  266   (void)pRsp; // Query Response (with timeout value)
//  267 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
//  268 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  269 static void zclZigbeeReceiver_OnOffCB( uint8 cmd )
zclZigbeeReceiver_OnOffCB:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function zclZigbeeReceiver_OnOffCB
//  270 { 
        FUNCALL zclZigbeeReceiver_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclZigbeeReceiver_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  271   if ( cmd == COMMAND_ON ) // Turn on the light
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??zclZigbeeReceiver_OnOffCB_0
//  272     zclZigbeeRecv_OnOff = LIGHT_ON;
??zclZigbeeReceiver_OnOffCB_1:
        MOV     A,#0x1
??zclZigbeeReceiver_OnOffCB_2:
        MOV     DPTR,#zclZigbeeRecv_OnOff
        MOVX    @DPTR,A
//  273 
//  274   else if ( cmd == COMMAND_OFF ) // Turn off the light
//  275     zclZigbeeRecv_OnOff = LIGHT_OFF;
//  276 
//  277   else // Toggle the light
//  278   {
//  279     if ( zclZigbeeRecv_OnOff == LIGHT_OFF )
//  280           zclZigbeeRecv_OnOff = LIGHT_ON;
//  281     else
//  282           zclZigbeeRecv_OnOff = LIGHT_OFF;
//  283   }
//  284 
//  285   // In this sample app, we use LED4 to simulate the Light  
//  286   if ( zclZigbeeRecv_OnOff == LIGHT_ON )
//  287   {
//  288     HalLedSet( HAL_LED_2, HAL_LED_MODE_ON ); // setting the LED_1 on
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  289   }
//  290   else
//  291     HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF ); // setting the LED_1 off
//  292 }
        SJMP    ?Subroutine2
??zclZigbeeReceiver_OnOffCB_0:
        MOV     A,R1
        JNZ     ??zclZigbeeReceiver_OnOffCB_3
??zclZigbeeReceiver_OnOffCB_4:
        CLR     A
        SJMP    ??zclZigbeeReceiver_OnOffCB_2
??zclZigbeeReceiver_OnOffCB_3:
        MOV     DPTR,#zclZigbeeRecv_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclZigbeeReceiver_OnOffCB_4
        SJMP    ??zclZigbeeReceiver_OnOffCB_1
        CFI EndBlock cfiBlock15
//  293 
//  294 static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
//  295 {
//  296   switch ( pInMsg->zclHdr.commandID )
//  297   {
//  298 #ifdef ZCL_READ
//  299     case ZCL_CMD_READ_RSP:
//  300       zclZigbeeReceiver_ProcessInReadRspCmd( pInMsg );
//  301       break;
//  302 #endif
//  303       
//  304 #ifdef ZCL_WRITE    
//  305     case ZCL_CMD_WRITE_RSP:
//  306       zclZigbeeReceiver_ProcessInWriteRspCmd( pInMsg );
//  307       break;
//  308 #endif
//  309       
//  310 #ifdef ZCL_REPORT
//  311     case ZCL_CMD_CONFIG_REPORT: // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  312       //zclSampleLight_ProcessInConfigReportCmd( pInMsg );
//  313       break;
//  314     
//  315     case ZCL_CMD_CONFIG_REPORT_RSP:
//  316       //zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
//  317       break;
//  318     
//  319     case ZCL_CMD_READ_REPORT_CFG:
//  320       //zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
//  321       break;
//  322     
//  323     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  324       //zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
//  325       break;
//  326     
//  327     case ZCL_CMD_REPORT:
//  328       //zclSampleLight_ProcessInReportCmd( pInMsg );
//  329       break;
//  330 #endif   
//  331       
//  332     case ZCL_CMD_DEFAULT_RSP:
//  333       zclZigbeeReceiver_ProcessInDefaultRspCmd( pInMsg );
//  334       break;
//  335       
//  336 #ifdef ZCL_DISCOVER     
//  337     case ZCL_CMD_DISCOVER_RSP:
//  338       zclZigbeeReceiver_ProcessInDiscRspCmd( pInMsg );
//  339       break;
//  340 #endif
//  341       
//  342     default:
//  343       break;
//  344   }
//  345   if ( pInMsg->attrCmd )
//  346     osal_mem_free( pInMsg->attrCmd );
//  347 }
//  348 
//  349 #ifdef ZCL_READ
//  350 
//  351 static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  352 {
//  353   zclReadRspCmd_t *readRspCmd;
//  354   uint8 i;
//  355 
//  356   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  357   for (i = 0; i < readRspCmd->numAttr; i++)
//  358   {
//  359     // Notify the originator of the results of the original read attributes attempt and, 
//  360     // for each successfull request, the value of the requested attribute
//  361   }
//  362   return TRUE; 
//  363 }
//  364 #endif // ZCL_READ
//  365 
//  366 #ifdef ZCL_WRITE
//  367 
//  368 static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  369 {
//  370   zclWriteRspCmd_t *writeRspCmd;
//  371   uint8 i;
//  372 
//  373   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  374   for (i = 0; i < writeRspCmd->numAttr; i++)
//  375   {
//  376     // Notify the device of the results of the its original write attributes command.
//  377   }
//  378   return TRUE; 
//  379 }
//  380 #endif // ZCL_WRITE
//  381 
//  382 /*********************************************************************
//  383  * @fn      zclZigbeeReceiver_ProcessInDefaultRspCmd
//  384  * @brief   Process the "Profile" Default Response Command
//  385  * @param   pInMsg - incoming message to process
//  386  */
//  387 static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  388 {
//  389   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd; 
//  390   // Device is notified of the Default Response command.
//  391   (void)pInMsg;
//  392   return TRUE; 
//  393 }
//  394 
//  395 #ifdef ZCL_DISCOVER
//  396 /*********************************************************************
//  397  * @fn      zclZigbeeReceiver_ProcessInDiscRspCmd
//  398  * @brief   Process the "Profile" Discover Response Command
//  399  * @param   pInMsg - incoming message to process
//  400  */
//  401 static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
//  402 {
//  403   zclDiscoverRspCmd_t *discoverRspCmd;
//  404   uint8 i;
//  405   
//  406   discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
//  407   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  408   {
//  409     // Device is notified of the result of its attribute discovery command.
//  410   }
//  411   return TRUE;
//  412 }
//  413 #endif // ZCL_DISCOVER
//  414 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 void zclUARTMsg_CallBack(uint8 port, uint8 event)
zclUARTMsg_CallBack:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function zclUARTMsg_CallBack
//  416 {
        FUNCALL zclUARTMsg_CallBack, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUARTMsg_CallBack, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUARTMsg_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUARTMsg_CallBack, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  417   (void)port;
//  418   
//  419   if(Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT) > 0 )
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        JNZ     ??zclUARTMsg_CallBack_0
        MOV     A,R3
??zclUARTMsg_CallBack_0:
        JZ      ??zclUARTMsg_CallBack_1
//  420   {
//  421       len = Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT );
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     DPTR,#len
        MOVX    @DPTR,A
//  422       HalUARTRead( MT_UART_DEFAULT_PORT, TransmitApp_Msg, len );
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#(TransmitApp_Msg & 0xff)
        MOV     R3,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  423       osal_set_event( zclZigbeeReceiver_TaskID, UART_MSG_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#zclZigbeeReceiver_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        CFI EndBlock cfiBlock16
//  424   }
//  425 }
??zclUARTMsg_CallBack_1:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock17
//  426 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  427 void zclUartReceiver( void )
zclUartReceiver:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function zclUartReceiver
//  428 { 
        FUNCALL zclUartReceiver, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclUartReceiver, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  429 //  show("zclUartReceiver");
//  430   
//  431   for(uint8 length = 0; length < len; length++)
        MOV     R2,#0x0
        SJMP    ??zclUartReceiver_0
//  432   {
//  433     uart_recv[length] = TransmitApp_Msg[length];
??zclUartReceiver_1:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,R0
        ADD     A,#(TransmitApp_Msg & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(uart_recv & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((uart_recv >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  434   }
        INC     R2
??zclUartReceiver_0:
        MOV     DPTR,#len
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R3
        JC      ??zclUartReceiver_1
//  435 
//  436   HalUARTWrite(MT_UART_DEFAULT_PORT, uart_recv, len);    
        ; Setup parameters for call to function HalUARTWrite
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#(uart_recv & 0xff)
        MOV     R3,#((uart_recv >> 8) & 0xff)
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  437   
//  438   // Set the End Device state
//  439   zclZigbeeRecv_DstAddr.endPoint = 12;
        MOV     A,#0xc
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
        MOVX    @DPTR,A
//  440   zclZigbeeRecv_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#zclZigbeeRecv_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  441   zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0xf
        MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
        MOVX    @DPTR,A
//  442     
//  443   // Transmit the UART command to End Device
//  444   uint8 send = zcl_SendCommand( ZIGBEERECV_ENDPOINT, 
//  445                                 &zclZigbeeRecv_DstAddr,
//  446                                 ZCL_CLUSTER_ID_GEN_ON_OFF,
//  447                                 COMMAND_TOGGLE,
//  448                                 TRUE,
//  449                                 ZCL_FRAME_CLIENT_SERVER_DIR,
//  450                                 false,
//  451                                 0,
//  452                                 0,
//  453                                 10,
//  454                                 uart_recv );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(uart_recv & 0xff)
        MOV     ?V0 + 1,#((uart_recv >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeRecv_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeRecv_DstAddr >> 8) & 0xff)
        MOV     R1,#0xd
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  455 }
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock18

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zigbeeReceiver_TestEp>`:
        DB 20
        DW zclZigbeeReceiver_TaskID, 0H
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zclZigbeeReceiver_CmdCallbac`:
        DW ??zclZigbeeReceiver_BasicResetCB?relay
        DW ??zclZigbeeReceiver_IdentifyCB?relay
        DW ??zclZigbeeReceiver_IdentifyQueryRspCB?relay
        DW ??zclZigbeeReceiver_OnOffCB?relay, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
        DW 0H, 0H
        DB 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZSendMsgProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZSendMsgProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeRecv_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeRecv_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeRecv_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeRecv_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_ProcessIdentifyTimeChange?r:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_BasicResetCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_IdentifyCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_IdentifyQueryRspCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclZigbeeReceiver_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclZigbeeReceiver_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclUARTMsg_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclUARTMsg_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclUartReceiver?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclUartReceiver

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "RECV_GROUP">`:
        DB "RECV_GROUP"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "ZCL_INCOMING_MSG">`:
        DB "ZCL_INCOMING_MSG"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SAMPLELIGHT_IDENTIFY_...">`:
        DB "SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT"

        END
// 
// 755 bytes in segment BANKED_CODE
//  60 bytes in segment BANK_RELAYS
//  36 bytes in segment XDATA_I
//  36 bytes in segment XDATA_ID
//  61 bytes in segment XDATA_ROM_C
// 340 bytes in segment XDATA_Z
// 
// 851 bytes of CODE  memory
//  61 bytes of CONST memory
// 376 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
