###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                02/Sep/2013  17:26:05 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Components\stack\zcl\zcl.c                 #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Components\stack\zcl\zcl.c" -D CC2530 -D   #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\zcl.lst     #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\zcl.r51      #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Components\stack\zcl\zcl.c
      1          #include "ZComDef.h"
      2          #include "OSAL.h"
      3          #include "OSAL_Tasks.h"
      4          #include "AF.h"
      5          #include "ZDConfig.h"
      6          #include "zcl.h"
      7          #include "zcl_general.h"
      8          #include <string.h>
      9          #include <stdio.h>
     10          
     11          #if defined ( INTER_PAN )
     12            #include "stub_aps.h"
     13          #endif
     14          
     15          #include "hal_uart.h"
     16          #include "hal_timer.h"
     17          #include "hal_led.h"
     18          #if defined (LCD_SUPPORTED)
     19            #include "hal_lcd.h"
     20          #endif
     21          
     22          #if defined(M160)
     23            #include "hal_sensor.h"
     24          #endif 
     25          
     26          /* MT */
     27          #include "MT_UART.h"
     28          #include "MT.h"
     29          
     30          /*** Frame Control ***/
     31          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     32          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     33          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     34          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     35          
     36          /*** Attribute Access Control ***/
     37          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     38          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     39          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     40          
     41          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     42          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     43          
     44          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     45                                                  (zclHdr).fc.manuSpecific == 0          && \
     46                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     47          
     48          // Commands that have corresponding responses
     49          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ            || \
     50                                                  (cmd) == ZCL_CMD_WRITE           || \
     51                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED || \
     52                                                  (cmd) == ZCL_CMD_CONFIG_REPORT   || \
     53                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG || \
     54                                                  (cmd) == ZCL_CMD_DISCOVER        || \
     55                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     56          
     57          typedef struct zclLibPlugin
     58          {
     59            struct zclLibPlugin *next;
     60            uint16              startClusterID;    // starting cluster ID
     61            uint16              endClusterID;      // ending cluster ID
     62            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
     63          } zclLibPlugin_t;
     64          
     65          // Attribute record list item
     66          typedef struct zclAttrRecsList
     67          {
     68            struct zclAttrRecsList *next;
     69            uint8                  endpoint;      // Used to link it into the endpoint descriptor
     70            uint8                  numAttributes; // Number of the following records
     71            CONST zclAttrRec_t     *attrs;        // attribute records
     72          } zclAttrRecsList;
     73          
     74          // Cluster option list item
     75          typedef struct zclClusterOptionList
     76          {
     77            struct zclClusterOptionList *next;
     78            uint8                       endpoint;   // Used to link it into the endpoint descriptor
     79            uint8                       numOptions; // Number of the following records
     80            zclOptionRec_t              *options;   // option records
     81          } zclClusterOptionList;
     82          
     83          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
     84          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
     85          
     86          typedef struct
     87          {
     88            zclParseInProfileCmd_t   pfnParseInProfile;
     89            zclProcessInProfileCmd_t pfnProcessInProfile;
     90          } zclCmdItems_t;
     91          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     93          
     94          // The task Id of the Application where the unprocessed Foundation
     95          // Command/Response messages will be sent to.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     96          uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
   \                     zcl_RegisteredMsgTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     97          
     98          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          zclValidateAttrData_t zcl_ValidateAttrDataCB = NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    100          
    101          // ZCL Sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint8 zcl_SeqNum = 0x00;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          static zclLibPlugin_t *plugins;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          static zclAttrRecsList *attrList;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          static zclClusterOptionList *clusterOptionList;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          static uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    108          
    109          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt );  // Not static for ZNP build.
    110          void zclZigbeeReceiverMSG(afIncomingMSGPacket_t *msg);
    111          
    112          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    113          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    114          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    115          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    116          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    117          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    118          
    119          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    120          
    121          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)
    122            static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf );
    123          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
    124          
    125          #ifdef ZCL_READ
    126            static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    127            static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    128          #endif // ZCL_READ
    129          
    130          #ifdef ZCL_WRITE
    131            static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    132            static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    133            static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    134            static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    135          #endif // ZCL_WRITE
    136          
    137          #ifdef ZCL_REPORT
    138            static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    139            static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    140          #endif // ZCL_REPORT
    141          
    142          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    143          
    144          #ifdef ZCL_DISCOVER
    145            static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint16 *attrId, zclAttrRec_t *pAttr );
    146            static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd );
    147            static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    148          #endif // ZCL_DISCOVER
    149          
    150          static uint8 zclSendMsg( zclIncoming_t *pInMsg );
    151          
    152          /*********************************************************************
    153           * Parse Profile Command Function Table
    154           */

   \                                 In  segment CODE_C, align 1
    155          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ........     DW ??zclParseInReadCmd?relay, ??zclProcessInReadCmd?relay
   \   000004   ........     DW ??zclParseInReadRspCmd?relay, ??zclSendMsg?relay
   \   000008   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay
   \   00000C   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteUndividedCmd?relay
   \   000010   ........     DW ??zclParseInWriteRspCmd?relay, ??zclSendMsg?relay
   \   000014   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay, 0H, 0H, 0H
   \            00000000
   \            0000    
   \   00001E   00000000     DW 0H, 0H, 0H, 0H, 0H, 0H, 0H, ??zclParseInDefaultRspCmd?relay
   \            00000000
   \            00000000
   \            0000....
   \   00002E   ....0000     DW ??zclSendMsg?relay, 0H, 0H, 0H, 0H
   \            00000000
   \            0000    
    156          {
    157          #ifdef ZCL_READ
    158            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    159            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zclSendMsg                      },
    160          #else
    161            /* ZCL_CMD_READ */                { NULL,                          NULL                            },
    162            /* ZCL_CMD_READ_RSP */            { NULL,                          NULL                            },
    163          #endif // ZCL_READ
    164          
    165          #ifdef ZCL_WRITE
    166            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    167            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    168            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zclSendMsg                      },
    169            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    170          #else
    171            /* ZCL_CMD_WRITE */               { NULL,                          NULL                            },
    172            /* ZCL_CMD_WRITE_UNDIVIDED */     { NULL,                          NULL                            },
    173            /* ZCL_CMD_WRITE_RSP */           { NULL,                          NULL                            },
    174            /* ZCL_CMD_WRITE_NO_RSP */        { NULL,                          NULL                            },
    175          #endif // ZCL_WRITE
    176          
    177          #ifdef ZCL_REPORT
    178            /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zclSendMsg                      },
    179            /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zclSendMsg                      },
    180            /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zclSendMsg                      },
    181            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zclSendMsg                      },
    182            /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zclSendMsg                      },
    183          #else
    184            /* ZCL_CMD_CONFIG_REPORT */       { NULL,                          NULL                            },
    185            /* ZCL_CMD_CONFIG_REPORT_RSP */   { NULL,                          NULL                            },
    186            /* ZCL_CMD_READ_REPORT_CFG */     { NULL,                          NULL                            },
    187            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { NULL,                          NULL                            },
    188            /* ZCL_CMD_REPORT */              { NULL,                          NULL                            },
    189          #endif // ZCL_REPORT
    190          
    191            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zclSendMsg                      },
    192            
    193          #ifdef ZCL_DISCOVER  
    194            /* ZCL_CMD_DISCOVER */            { zclParseInDiscCmd,             zclProcessInDiscCmd             },
    195            /* ZCL_CMD_DISCOVER_RSP */        { zclParseInDiscRspCmd,          zclSendMsg                      }
    196          #else
    197            /* ZCL_CMD_DISCOVER */            { NULL,                          NULL                            },
    198            /* ZCL_CMD_DISCOVER_RSP */        { NULL,                          NULL                            }
    199          #endif // ZCL_DISCOVER
    200          };
    201          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    202          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    203          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    204            zcl_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#zcl_TaskID
   \   000008   F0           MOVX    @DPTR,A
    205          
    206            plugins = (zclLibPlugin_t  *)NULL;
   \   000009   90....       MOV     DPTR,#plugins
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
    207            attrList = (zclAttrRecsList *)NULL;
   \   000010   90....       MOV     DPTR,#attrList
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    208            clusterOptionList = (zclClusterOptionList *)NULL;
   \   000016   90....       MOV     DPTR,#clusterOptionList
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    209          }
   \   00001C   02....       LJMP    ?Subroutine109 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    210          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    212          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    213            uint8 *msgPtr;
    214            (void)task_id;  // Intentionally unreferenced parameter
    215            
    216            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??zcl_event_loop_0
   \   000011   E9           MOV     A,R1
   \                     ??zcl_event_loop_0:
   \   000012   604B         JZ      ??zcl_event_loop_1
    217            {
    218              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000014                ; Setup parameters for call to function osal_msg_receive
   \   000014   800E         SJMP    ??zcl_event_loop_2
    219              while ( msgPtr != NULL )
    220              {
    221                uint8 dealloc = TRUE;
    222                
    223                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    224                {
    225                  zclProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_3:
   \   000016                ; Setup parameters for call to function zclProcessMessageMSG
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??zclProcessMessageMSG?relay
    226                }
    227                else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
    228                {
    229                  osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr ); // send it to another task to process.
    230                  dealloc = FALSE;
    231                }
    232                if ( dealloc ) // Release the memory
    233                {
    234                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_4:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    235                }
    236                msgPtr = osal_msg_receive( zcl_TaskID ); // Next
   \                     ??zcl_event_loop_2:
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \   000024   90....       MOV     DPTR,#zcl_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   \   000030   AE..         MOV     R6,?V0 + 2
   \   000032   AF..         MOV     R7,?V0 + 3
   \   000034   EE           MOV     A,R6
   \   000035   7001         JNZ     ??zcl_event_loop_5
   \   000037   EF           MOV     A,R7
   \                     ??zcl_event_loop_5:
   \   000038   601C         JZ      ??zcl_event_loop_6
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   641A         XRL     A,#0x1a
   \   000041   60D3         JZ      ??zcl_event_loop_3
   \   000043   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FF         XRL     A,#0xff
   \   000049   60D2         JZ      ??zcl_event_loop_4
   \   00004B                ; Setup parameters for call to function osal_msg_send
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_send?relay
   \   000054   80CE         SJMP    ??zcl_event_loop_2
    237              } 
    238              return (events ^ SYS_EVENT_MSG);// return unprocessed events
   \                     ??zcl_event_loop_6:
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   7480         MOV     A,#-0x80
   \   00005A   65..         XRL     A,?V0 + 1
   \   00005C   FB           MOV     R3,A
   \   00005D   8004         SJMP    ??zcl_event_loop_7
    239            }
    240            return 0; // Discard unknown events
   \                     ??zcl_event_loop_1:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??zcl_event_loop_7:
   \   000063   02....       LJMP    ?Subroutine110 & 0xFFFF
    241          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    242          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    243          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    244                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    245          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine39 & 0xFFFF
    246            zclLibPlugin_t *pNewItem;
    247            zclLibPlugin_t *pLoop;
    248          
    249            // Fill in the new profile list
    250            pNewItem = osal_mem_alloc( sizeof( zclLibPlugin_t ) );
   \                     ??CrossCallReturnLabel_46:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A08         MOV     R2,#0x8
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_mem_alloc?relay
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
   \   000020   A8..         MOV     R0,?V0 + 4
   \   000022   A9..         MOV     R1,?V0 + 5
    251            if ( pNewItem == NULL )
   \   000024   E8           MOV     A,R0
   \   000025   7001         JNZ     ??zcl_registerPlugin_0
   \   000027   E9           MOV     A,R1
   \                     ??zcl_registerPlugin_0:
   \   000028   7004         JNZ     ??zcl_registerPlugin_1
    252              return (ZMemError);
   \   00002A   7910         MOV     R1,#0x10
   \   00002C   8051         SJMP    ??CrossCallReturnLabel_14
    253          
    254            // Fill in the plugin record.
    255            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_1:
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine14 & 0xFFFF
    256            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_19:
   \   000038   A3           INC     DPTR
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   12....       LCALL   ?Subroutine14 & 0xFFFF
    257            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_20:
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0 + 3
   \   00004B   F0           MOVX    @DPTR,A
    258            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ?Subroutine17 & 0xFFFF
    259          
    260            if (  plugins == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_310:
   \   00005B   90....       MOV     DPTR,#plugins
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   7002         JNZ     ??zcl_registerPlugin_2
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \                     ??zcl_registerPlugin_2:
   \   000063   90....       MOV     DPTR,#plugins
   \   000066   6014         JZ      ??zcl_registerPlugin_3
    261            {
    262              plugins = pNewItem;
    263            }
    264            else
    265            {
    266              // Look for end of list
    267              pLoop = plugins;
   \   000068   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00006B   8003         SJMP    ??zcl_registerPlugin_4
    268              while ( pLoop->next != NULL )
    269                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_5:
   \   00006D   EA           MOV     A,R2
   \   00006E   FC           MOV     R4,A
   \   00006F   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_4:
   \   000070   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000073   7001         JNZ     ??zcl_registerPlugin_6
   \   000075   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_6:
   \   000076   70F5         JNZ     ??zcl_registerPlugin_5
    270          
    271              pLoop->next = pNewItem; // Put new item at end of list
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
    272            }
   \                     ??zcl_registerPlugin_3:
   \   00007C   12....       LCALL   ?Subroutine11 & 0xFFFF
    273            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_14:
   \   00007F                REQUIRE ?Subroutine111
   \   00007F                ; // Fall through to label ?Subroutine111
    274          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine126_0
   \   000005                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine152_0
   \   000002                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    275          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    276          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    277          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine63 & 0xFFFF
    278            zclAttrRecsList *pNewItem;
    279            zclAttrRecsList *pLoop;
    280          
    281            pNewItem = osal_mem_alloc( sizeof( zclAttrRecsList ) ); // Fill in the new profile list
    282            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_85:
   \   000008   7001         JNZ     ??zcl_registerAttrList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerAttrList_0:
   \   00000B   7004         JNZ     ??zcl_registerAttrList_1
    283              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_15
    284          
    285            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    286            pNewItem->endpoint = endpoint;
    287            pNewItem->numAttributes = numAttr;
    288            pNewItem->attrs = newAttrList;
    289          
    290            if ( attrList == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_0:
   \   000014   90....       MOV     DPTR,#attrList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerAttrList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerAttrList_2:
   \   00001C   90....       MOV     DPTR,#attrList
   \   00001F   6014         JZ      ??zcl_registerAttrList_3
    291            {
    292              attrList = pNewItem;
    293            }
    294            else
    295            {
    296              pLoop = attrList; // Look for end of list
   \   000021   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000024   8003         SJMP    ??zcl_registerAttrList_4
    297              while ( pLoop->next != NULL )
    298                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_4:
   \   000029   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00002C   7001         JNZ     ??zcl_registerAttrList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_6:
   \   00002F   70F5         JNZ     ??zcl_registerAttrList_5
    299          
    300              pLoop->next = pNewItem; // Put new item at end of list
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    301            }
   \                     ??zcl_registerAttrList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    302            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_15:
   \   000038   02....       LJMP    ?Subroutine110 & 0xFFFF
    303          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   89..         MOV     ?V0 + 0,R1
   \   000002   8A..         MOV     ?V0 + 1,R2
   \   000004   EC           MOV     A,R4
   \   000005   FE           MOV     R6,A
   \   000006   ED           MOV     A,R5
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A06         MOV     R2,#0x6
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 2,R2
   \   000011   8B..         MOV     ?V0 + 3,R3
   \   000013   A8..         MOV     R0,?V0 + 2
   \   000015   A9..         MOV     R1,?V0 + 3
   \   000017   E8           MOV     A,R0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00000A   A3           INC     DPTR
   \   00000B   E5..         MOV     A,?V0 + 0
   \   00000D   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000010   E5..         MOV     A,?V0 + 1
   \   000012   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000015   A3           INC     DPTR
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EF           MOV     A,R7
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    304          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    306          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine63 & 0xFFFF
    307            zclClusterOptionList *pNewItem;
    308            zclClusterOptionList *pLoop;
    309          
    310            // Fill in the new profile list
    311            pNewItem = osal_mem_alloc( sizeof( zclClusterOptionList ) );
    312            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_86:
   \   000008   7001         JNZ     ??zcl_registerClusterOptionList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerClusterOptionList_0:
   \   00000B   7004         JNZ     ??zcl_registerClusterOptionList_1
    313              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_16
    314          
    315            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    316            pNewItem->endpoint = endpoint;
    317            pNewItem->numOptions = numOption;
    318            pNewItem->options = optionList;
    319          
    320            // Find spot in list
    321            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_1:
   \   000014   90....       MOV     DPTR,#clusterOptionList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerClusterOptionList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerClusterOptionList_2:
   \   00001C   90....       MOV     DPTR,#clusterOptionList
   \   00001F   6014         JZ      ??zcl_registerClusterOptionList_3
    322            {
    323              clusterOptionList = pNewItem;
    324            }
    325            else
    326            {
    327              // Look for end of list
    328              pLoop = clusterOptionList;
   \   000021   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000024   8003         SJMP    ??zcl_registerClusterOptionList_4
    329              while ( pLoop->next != NULL )
    330                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_4:
   \   000029   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00002C   7001         JNZ     ??zcl_registerClusterOptionList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_6:
   \   00002F   70F5         JNZ     ??zcl_registerClusterOptionList_5
    331          
    332              // Put new item at end of list
    333              pLoop->next = pNewItem;
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    334            }
   \                     ??zcl_registerClusterOptionList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    335          
    336            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_16:
   \   000038   02....       LJMP    ?Subroutine110 & 0xFFFF
    337          }
    338          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    339          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    340          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    341            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL   ??Subroutine152_0 & 0xFFFF
    342            
    343            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_306:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   80..         SJMP    ?Subroutine109
    344          }
    345          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    347          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    348            // Allow only the first task
    349            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000004   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64FF         XRL     A,#0xff
   \   00000A   7006         JNZ     ??zcl_registerForMsg_0
    350            {
    351              zcl_RegisteredMsgTaskID = taskId;  
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
    352              return ( true );
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8002         SJMP    ??zcl_registerForMsg_1
    353            }
    354            return ( false );
   \                     ??zcl_registerForMsg_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??zcl_registerForMsg_1:
   \   000014                REQUIRE ?Subroutine109
   \   000014                ; // Fall through to label ?Subroutine109
    355          }
    356          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, 
   \                     zcl_DeviceOperational:
    358                                              uint8 frameType, uint8 cmd, uint16 profileID )
    359          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    360            zclAttrRec_t attrRec;
    361            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
    362            
    363            (void)profileID;  // Intentionally unreferenced parameter
    364            
    365            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it 
    366            // cannot send or respond to application level commands, other than commands
    367            // to read or write attributes. Note that the Identify cluster cannot be 
    368            // disabled, and remains functional regardless of this setting.
    369            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000013   EC           MOV     A,R4
   \   000014   700A         JNZ     ??zcl_DeviceOperational_0
   \   000016   ED           MOV     A,R5
   \   000017   C3           CLR     C
   \   000018   9406         SUBB    A,#0x6
   \   00001A   5004         JNC     ??zcl_DeviceOperational_0
    370              return ( TRUE );
   \                     ??zcl_DeviceOperational_1:
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   804E         SJMP    ??zcl_DeviceOperational_2
    371            
    372            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV     A,#0x3
   \   000022   6A           XRL     A,R2
   \   000023   7001         JNZ     ??zcl_DeviceOperational_3
   \   000025   EB           MOV     A,R3
   \                     ??zcl_DeviceOperational_3:
   \   000026   60F4         JZ      ??zcl_DeviceOperational_1
    373              return ( TRUE );
    374            
    375            // Is device enabled?
    376            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC, ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000028                ; Setup parameters for call to function zclFindAttrRec
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   8582..       MOV     ?V0 + 0,DPL
   \   000030   8583..       MOV     ?V0 + 1,DPH
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C12         MOV     R4,#0x12
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??zclFindAttrRec?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6016         JZ      ??zcl_DeviceOperational_4
    377              zclReadAttrData( &deviceEnabled, &attrRec );
   \   00004B                ; Setup parameters for call to function zclReadAttrData
   \   00004B   7401         MOV     A,#0x1
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AC82         MOV     R4,DPL
   \   000052   AD83         MOV     R5,DPH
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??zclReadAttrData?relay
    378            
    379            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_4:
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   60B0         JZ      ??zcl_DeviceOperational_1
   \   00006C   7900         MOV     R1,#0x0
   \                     ??zcl_DeviceOperational_2:
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   02....       LJMP    ?Subroutine119 & 0xFFFF
    380          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    381          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
    383                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
    384                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
    385                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    386          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
   \   000010   742A         MOV     A,#0x2a
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   742B         MOV     A,#0x2b
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
   \   00001F   742C         MOV     A,#0x2c
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   742D         MOV     A,#0x2d
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
   \   00002F   742E         MOV     A,#0x2e
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 12,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 13,A
   \   00003B   7430         MOV     A,#0x30
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 7,A
   \   000043   7431         MOV     A,#0x31
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 14,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 15,A
    387            endPointDesc_t *epDesc;
    388            zclFrameHdr_t hdr;
    389            uint8 *msgBuf;
    390            uint16 msgLen;
    391            uint8 *pBuf;
    392            afAddrType_t dstAddr;
    393            uint8 options;
    394            ZStatus_t status;
    395          
    396            osal_memcpy( &dstAddr, destAddr, sizeof ( afAddrType_t ) );
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8A..         MOV     ?V0 + 4,R2
   \   000051   8B..         MOV     ?V0 + 5,R3
   \   000053   75..00       MOV     ?V0 + 6,#0x0
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C0C         MOV     R4,#0xc
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    397          
    398            epDesc = afFindEndPointDesc( srcEP );
   \   00006E                ; Setup parameters for call to function afFindEndPointDesc
   \   00006E   EF           MOV     A,R7
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??afFindEndPointDesc?relay
   \   000073   8A..         MOV     ?V0 + 10,R2
   \   000075   8B..         MOV     ?V0 + 11,R3
    399            if ( epDesc == NULL )
   \   000077   EA           MOV     A,R2
   \   000078   7001         JNZ     ??zcl_SendCommand_0
   \   00007A   EB           MOV     A,R3
   \                     ??zcl_SendCommand_0:
   \   00007B   7005         JNZ     ??zcl_SendCommand_1
    400              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_2:
   \   00007D   7902         MOV     R1,#0x2
   \   00007F   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    401          
    402            if ( clusterID == ZCL_INVALID_CLUSTER_ID )
   \                     ??zcl_SendCommand_1:
   \   000082   74FF         MOV     A,#-0x1
   \   000084   65..         XRL     A,?V0 + 0
   \   000086   7004         JNZ     ??zcl_SendCommand_4
   \   000088   74FF         MOV     A,#-0x1
   \   00008A   65..         XRL     A,?V0 + 1
   \                     ??zcl_SendCommand_4:
   \   00008C   60EF         JZ      ??zcl_SendCommand_2
    403              return ( ZInvalidParameter ); // EMBEDDED RETURN
    404          
    405          #if defined ( INTER_PAN )
    406            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
    407              options = AF_TX_OPTIONS_NONE;
    408            else
    409          #endif
    410              options = zclGetClusterOption( srcEP, clusterID );
   \   00008E                ; Setup parameters for call to function zclGetClusterOption
   \   00008E   AA..         MOV     R2,?V0 + 0
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   EF           MOV     A,R7
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??zclGetClusterOption?relay
   \   000097   E9           MOV     A,R1
   \   000098   F5..         MOV     ?V0 + 2,A
    411            
    412            osal_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \   00009A                ; Setup parameters for call to function osal_memset
   \   00009A   7C06         MOV     R4,#0x6
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??osal_memset?relay
    413          
    414            // Not Profile wide command (like READ, WRITE)
    415            if ( specific )
   \   0000AD   E5..         MOV     A,?V0 + 3
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   6015         JZ      ??zcl_SendCommand_5
    416              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   54FC         ANL     A,#0xfc
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   7401         MOV     A,#0x1
   \   0000C0   48           ORL     A,R0
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E9           MOV     A,R1
   \   0000CA   8006         SJMP    ??zcl_SendCommand_6
    417            else
    418              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_5:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   54FC         ANL     A,#0xfc
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \                     ??zcl_SendCommand_6:
   \   0000D2   F0           MOVX    @DPTR,A
    419          
    420            if ((epDesc->simpleDesc == NULL) ||
    421                (zcl_DeviceOperational(srcEP, clusterID, hdr.fc.type, cmd, epDesc->simpleDesc->AppProfId) == FALSE))
   \   0000D3   85..82       MOV     DPL,?V0 + 10
   \   0000D6   85..83       MOV     DPH,?V0 + 11
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000DF   7002         JNZ     ??zcl_SendCommand_7
   \   0000E1   E583         MOV     A,DPH
   \                     ??zcl_SendCommand_7:
   \   0000E3   6020         JZ      ??zcl_SendCommand_8
   \   0000E5                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E5   A3           INC     DPTR
   \   0000E6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000E9   EE           MOV     A,R6
   \   0000EA   FD           MOV     R5,A
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   5403         ANL     A,#0x3
   \   0000F3   FC           MOV     R4,A
   \   0000F4   AA..         MOV     R2,?V0 + 0
   \   0000F6   AB..         MOV     R3,?V0 + 1
   \   0000F8   EF           MOV     A,R7
   \   0000F9   F9           MOV     R1,A
   \   0000FA   12....       LCALL   ??zcl_DeviceOperational?relay
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000102   E9           MOV     A,R1
   \   000103   7005         JNZ     ??zcl_SendCommand_9
    422              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_8:
   \   000105   7901         MOV     R1,#0x1
   \   000107   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    423            
    424            if ( manuCode != 0 ) // Fill in the Maufacturer Code
   \                     ??zcl_SendCommand_9:
   \   00010A   E5..         MOV     A,?V0 + 12
   \   00010C   7002         JNZ     ??zcl_SendCommand_10
   \   00010E   E5..         MOV     A,?V0 + 13
   \                     ??zcl_SendCommand_10:
   \   000110   6019         JZ      ??zcl_SendCommand_11
    425            {
    426              hdr.fc.manuSpecific = 1;
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   4404         ORL     A,#0x4
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F0           MOVX    @DPTR,A
    427              hdr.manuCode = manuCode;
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E5..         MOV     A,?V0 + 12
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   E5..         MOV     A,?V0 + 13
   \   00012A   F0           MOVX    @DPTR,A
    428            }
    429            
    430            if ( direction ) // Set the Command Direction
   \                     ??zcl_SendCommand_11:
   \   00012B   E5..         MOV     A,?V0 + 9
   \   00012D   85..82       MOV     DPL,?XSP + 0
   \   000130   85..83       MOV     DPH,?XSP + 1
   \   000133   6005         JZ      ??zcl_SendCommand_12
    431              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000135   E0           MOVX    A,@DPTR
   \   000136   4408         ORL     A,#0x8
   \   000138   8003         SJMP    ??zcl_SendCommand_13
    432            else
    433              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_12:
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   54F7         ANL     A,#0xf7
   \                     ??zcl_SendCommand_13:
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F0           MOVX    @DPTR,A
    434          
    435            if ( disableDefaultRsp ) // Set the Disable Default Response field
   \   000141   E5..         MOV     A,?V0 + 8
   \   000143   85..82       MOV     DPL,?XSP + 0
   \   000146   85..83       MOV     DPH,?XSP + 1
   \   000149   6005         JZ      ??zcl_SendCommand_14
    436              hdr.fc.disableDefaultRsp = 1;
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   4410         ORL     A,#0x10
   \   00014E   8003         SJMP    ??zcl_SendCommand_15
    437            else
    438              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_14:
   \   000150   E0           MOVX    A,@DPTR
   \   000151   54EF         ANL     A,#0xef
   \                     ??zcl_SendCommand_15:
   \   000153   F0           MOVX    @DPTR,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F0           MOVX    @DPTR,A
    439                               
    440            hdr.transSeqNum = seqNum; // Fill in the Transaction Sequence Number
   \   000157   7404         MOV     A,#0x4
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E5..         MOV     A,?V0 + 7
   \   00015E   F0           MOVX    @DPTR,A
    441            
    442            hdr.commandID = cmd; // Fill in the command
   \   00015F   7405         MOV     A,#0x5
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   EE           MOV     A,R6
   \   000165   F0           MOVX    @DPTR,A
    443            
    444            msgLen = zclCalcHdrSize( &hdr ); // calculate the needed buffer size
   \   000166   75..03       MOV     ?V0 + 4,#0x3
   \   000169   85..82       MOV     DPL,?XSP + 0
   \   00016C   85..83       MOV     DPH,?XSP + 1
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   5404         ANL     A,#0x4
   \   000172   6003         JZ      ??zcl_SendCommand_16
   \   000174   75..05       MOV     ?V0 + 4,#0x5
    445            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_16:
   \   000177   E5..         MOV     A,?V0 + 14
   \   000179   25..         ADD     A,?V0 + 4
   \   00017B   F5..         MOV     ?V0 + 12,A
   \   00017D   E5..         MOV     A,?V0 + 15
   \   00017F   3400         ADDC    A,#0x0
   \   000181   F5..         MOV     ?V0 + 13,A
    446          
    447            msgBuf = osal_mem_alloc( msgLen ); // Allocate the buffer needed
   \   000183                ; Setup parameters for call to function osal_mem_alloc
   \   000183   AA..         MOV     R2,?V0 + 12
   \   000185   FB           MOV     R3,A
   \   000186   12....       LCALL   ??osal_mem_alloc?relay
   \   000189   8A..         MOV     ?V0 + 8,R2
   \   00018B   8B..         MOV     ?V0 + 9,R3
    448            if ( msgBuf != NULL )
   \   00018D   EA           MOV     A,R2
   \   00018E   7001         JNZ     ??zcl_SendCommand_17
   \   000190   EB           MOV     A,R3
   \                     ??zcl_SendCommand_17:
   \   000191   606B         JZ      ??zcl_SendCommand_18
    449            {
    450              pBuf = zclBuildHdr( &hdr, msgBuf ); // Fill in the ZCL Header
    451          
    452              osal_memcpy( pBuf, cmdFormat, cmdFormatLen ); // Fill in the command frame
   \   000193                ; Setup parameters for call to function osal_memcpy
   \   000193   7433         MOV     A,#0x33
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00019B   78..         MOV     R0,#?V0 + 4
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A0                ; Setup parameters for call to function zclBuildHdr
   \   0001A0   AC..         MOV     R4,?V0 + 8
   \   0001A2   AD..         MOV     R5,?V0 + 9
   \   0001A4   7403         MOV     A,#0x3
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   AA82         MOV     R2,DPL
   \   0001AB   AB83         MOV     R3,DPH
   \   0001AD   12....       LCALL   ??zclBuildHdr?relay
   \   0001B0   AC..         MOV     R4,?V0 + 14
   \   0001B2   AD..         MOV     R5,?V0 + 15
   \   0001B4   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
    453          
    454              status = AF_DataRequest( &dstAddr, epDesc, clusterID, msgLen, msgBuf, 
    455                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );  
   \   0001BA                ; Setup parameters for call to function AF_DataRequest
   \   0001BA   75..1E       MOV     ?V0 + 3,#0x1e
   \   0001BD   78..         MOV     R0,#?V0 + 3
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C2   75....       MOV     ?V0 + 4,#(zcl_TransID & 0xff)
   \   0001C5   75....       MOV     ?V0 + 5,#((zcl_TransID >> 8) & 0xff)
   \   0001C8   78..         MOV     R0,#?V0 + 4
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CD   78..         MOV     R0,#?V0 + 8
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   78..         MOV     R0,#?V0 + 12
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   78..         MOV     R0,#?V0 + 0
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   A9..         MOV     R1,?V0 + 2
   \   0001DE   AC..         MOV     R4,?V0 + 10
   \   0001E0   AD..         MOV     R5,?V0 + 11
   \   0001E2   740F         MOV     A,#0xf
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   AA82         MOV     R2,DPL
   \   0001E9   AB83         MOV     R3,DPH
   \   0001EB   12....       LCALL   ??AF_DataRequest?relay
   \   0001EE   7409         MOV     A,#0x9
   \   0001F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F3   E9           MOV     A,R1
   \   0001F4   FE           MOV     R6,A
    456              osal_mem_free ( msgBuf );
   \   0001F5                ; Setup parameters for call to function osal_mem_free
   \   0001F5   AA..         MOV     R2,?V0 + 8
   \   0001F7   AB..         MOV     R3,?V0 + 9
   \   0001F9   12....       LCALL   ??osal_mem_free?relay
   \   0001FC   8002         SJMP    ??zcl_SendCommand_19
    457            }
    458            else
    459              status = ZMemError;
   \                     ??zcl_SendCommand_18:
   \   0001FE   7E10         MOV     R6,#0x10
    460          
    461            return ( status );
   \                     ??zcl_SendCommand_19:
   \   000200   EE           MOV     A,R6
   \   000201   F9           MOV     R1,A
   \                     ??zcl_SendCommand_3:
   \   000202                REQUIRE ?Subroutine125
   \   000202                ; // Fall through to label ?Subroutine125
    462          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   7412         MOV     A,#0x12
   \   000002   80..         SJMP    ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET
    463          
    464          #ifdef ZCL_READ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
    466                                  uint16 clusterID, zclReadCmd_t *readCmd,
    467                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
    468          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 8,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 9,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 12,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 13,A
    469            uint8 dataLen;
    470            uint8 *buf;
    471            uint8 *pBuf;
    472            ZStatus_t status;
    473          
    474            dataLen = readCmd->numAttr * 2; // Attribute ID
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   33           RLC     A
   \   000036   FA           MOV     R2,A
    475          
    476            buf = osal_mem_alloc( dataLen );
   \   000037   8A82         MOV     DPL,R2
   \   000039   8582..       MOV     ?V0 + 6,DPL
   \   00003C   75..00       MOV     ?V0 + 7,#0x0
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   12....       LCALL   ?Subroutine64 & 0xFFFF
    477            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_87:
   \   000042   7001         JNZ     ??zcl_SendRead_0
   \   000044   EB           MOV     A,R3
   \                     ??zcl_SendRead_0:
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??zcl_SendRead_1 & 0xFFFF
    478            {
    479              uint8 i;
    480          
    481              pBuf = buf; // Load the buffer - serially
   \   00004A   A8..         MOV     R0,?V0 + 2
   \   00004C   A9..         MOV     R1,?V0 + 3
    482              for (i = 0; i < readCmd->numAttr; i++)
   \   00004E   75..00       MOV     ?V0 + 10,#0x0
   \   000051   801F         SJMP    ??zcl_SendRead_2
    483              {
    484                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_3:
   \   000053   E5..         MOV     A,?V0 + 10
   \   000055   C3           CLR     C
   \   000056   33           RLC     A
   \   000057   FA           MOV     R2,A
   \   000058   E4           CLR     A
   \   000059   33           RLC     A
   \   00005A   FB           MOV     R3,A
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   2A           ADD     A,R2
   \   00005E   F582         MOV     DPL,A
   \   000060   E5..         MOV     A,?V0 + 5
   \   000062   3B           ADDC    A,R3
   \   000063   F583         MOV     DPH,A
   \   000065   A3           INC     DPTR
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ?Subroutine41 & 0xFFFF
    485                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   \                     ??CrossCallReturnLabel_172:
   \   00006D   12....       LCALL   ?Subroutine28 & 0xFFFF
    486              }
   \                     ??CrossCallReturnLabel_181:
   \   000070   05..         INC     ?V0 + 10
   \                     ??zcl_SendRead_2:
   \   000072   85..82       MOV     DPL,?V0 + 4
   \   000075   85..83       MOV     DPH,?V0 + 5
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FA           MOV     R2,A
   \   00007A   E5..         MOV     A,?V0 + 10
   \   00007C   C3           CLR     C
   \   00007D   9A           SUBB    A,R2
   \   00007E   40D3         JC      ??zcl_SendRead_3
    487              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
    488                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );  
   \   000080                ; Setup parameters for call to function zcl_SendCommand
   \   000080   78..         MOV     R0,#?V0 + 2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   78..         MOV     R0,#?V0 + 6
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   E5..         MOV     A,?V0 + 13
   \   00008C   F5..         MOV     ?V0 + 4,A
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..00       MOV     ?V0 + 4,#0x0
   \   000096   75..00       MOV     ?V0 + 5,#0x0
   \   000099   78..         MOV     R0,#?V0 + 4
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   E5..         MOV     A,?V0 + 12
   \   0000A0   F5..         MOV     ?V0 + 4,A
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   E5..         MOV     A,?V0 + 9
   \   0000A9   F5..         MOV     ?V0 + 4,A
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..00       MOV     ?V0 + 4,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   78..         MOV     R0,#?V0 + 4
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   AC..         MOV     R4,?V0 + 0
   \   0000BF   AD..         MOV     R5,?V0 + 1
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   A9..         MOV     R1,?V0 + 8
   \   0000C7   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
   \   0000CE   FE           MOV     R6,A
    489              osal_mem_free( buf );
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V0 + 2
   \   0000D1   AB..         MOV     R3,?V0 + 3
   \   0000D3   12....       LCALL   ??osal_mem_free?relay
   \   0000D6   8002         SJMP    ??zcl_SendRead_4
    490            }
    491            else
    492              status = ZMemError;
   \                     ??zcl_SendRead_1:
   \   0000D8   7E10         MOV     R6,#0x10
    493          
    494            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000DA                REQUIRE ?Subroutine121
   \   0000DA                ; // Fall through to label ?Subroutine121
    495          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine128_0
   \   000002                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine129_0
   \   000005                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   A882         MOV     R0,DPL
   \   000002   A983         MOV     R1,DPH
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_mem_alloc?relay
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   7418         MOV     A,#0x18
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   02....       LJMP    ?Subroutine116 & 0xFFFF
    496          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7404         MOV     A,#0x4
   \   000004                REQUIRE ??Subroutine127_0
   \   000004                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
    498                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
    499                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    500          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 10,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 9,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 8,A
    501            uint8 *buf;
    502            uint8 *pBuf;
    503            zclReadRspStatus_t *statusRec;
    504            uint8 len = 0;
   \   00002E   7E00         MOV     R6,#0x0
    505            uint8 i;
    506            ZStatus_t status;
    507            
    508            // calculate the size of the command
    509            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000030   8E..         MOV     ?V0 + 5,R6
   \   000032   8021         SJMP    ??zcl_SendReadRsp_0
    510            {
    511              statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_1:
   \   000034   E5..         MOV     A,?V0 + 5
   \   000036   75F006       MOV     B,#0x6
   \   000039   12....       LCALL   ?Subroutine74 & 0xFFFF
    512              
    513              len += 2 + 1; // Attribute ID + Status
   \                     ??CrossCallReturnLabel_101:
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   0E           INC     R6
    514          
    515              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   700F         JNZ     ??zcl_SendReadRsp_2
    516              {
    517                len++; // Attribute Data Type
    518                len += zclGetAttrDataLength( statusRec->dataType, statusRec->data); // Attribute Data
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine42 & 0xFFFF
    519              }
    520            }
   \                     ??CrossCallReturnLabel_53:
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000050   04           INC     A
   \   000051   2E           ADD     A,R6
   \   000052   FE           MOV     R6,A
   \                     ??zcl_SendReadRsp_2:
   \   000053   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_0:
   \   000055   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000058   40DA         JC      ??zcl_SendReadRsp_1
    521          
    522            buf = osal_mem_alloc( len );
   \   00005A   12....       LCALL   ?Subroutine65 & 0xFFFF
    523            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_89:
   \   00005D   7001         JNZ     ??zcl_SendReadRsp_3
   \   00005F   EB           MOV     A,R3
   \                     ??zcl_SendReadRsp_3:
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??zcl_SendReadRsp_4 & 0xFFFF
    524            {
    525              // Load the buffer - serially
    526              pBuf = buf;
   \   000065   AE..         MOV     R6,?V0 + 6
   \   000067   AF..         MOV     R7,?V0 + 7
    527              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000069   75..00       MOV     ?V0 + 5,#0x0
   \   00006C   8028         SJMP    ??zcl_SendReadRsp_5
    528              {
    529                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_6:
   \   00006E   E5..         MOV     A,?V0 + 5
   \   000070   75F006       MOV     B,#0x6
   \   000073   12....       LCALL   ?Subroutine1 & 0xFFFF
    530                
    531                *pBuf++ = LO_UINT16( statusRec->attrID );
    532                *pBuf++ = HI_UINT16( statusRec->attrID );
    533                *pBuf++ = statusRec->status;
   \                     ??CrossCallReturnLabel_2:
   \   000076   FA           MOV     R2,A
   \   000077   E9           MOV     A,R1
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FB           MOV     R3,A
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   12....       LCALL   ?Subroutine102 & 0xFFFF
    534          
    535                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_143:
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   700B         JNZ     ??CrossCallReturnLabel_168
    536                {
    537                  *pBuf++ = statusRec->dataType;
   \   000089   E8           MOV     A,R0
   \   00008A   2403         ADD     A,#0x3
   \   00008C   12....       LCALL   ?Subroutine44 & 0xFFFF
    538                  zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
    539                  
    540                  // move pass attribute data
    541                  pBuf += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
    542                }
    543              } // for loop
   \                     ??CrossCallReturnLabel_57:
   \   00008F   2404         ADD     A,#0x4
   \   000091   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000094   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_5:
   \   000096   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000099   40D3         JC      ??zcl_SendReadRsp_6
    544          
    545              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE, 
    546                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \   00009B                ; Setup parameters for call to function zcl_SendCommand
   \   00009B   78..         MOV     R0,#?V0 + 6
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   E5..         MOV     A,?V0 + 8
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   75..00       MOV     ?V0 + 0,#0x0
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   E5..         MOV     A,?V0 + 9
   \   0000B8   F5..         MOV     ?V0 + 0,A
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   E5..         MOV     A,?V0 + 10
   \   0000C1   F5..         MOV     ?V0 + 0,A
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   75..00       MOV     ?V0 + 0,#0x0
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   75..01       MOV     ?V0 + 0,#0x1
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   740B         MOV     A,#0xb
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000E0   740D         MOV     A,#0xd
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   \   0000EC   FE           MOV     R6,A
    547              osal_mem_free( buf );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV     R2,?V0 + 6
   \   0000EF   AB..         MOV     R3,?V0 + 7
   \   0000F1   12....       LCALL   ??osal_mem_free?relay
   \   0000F4   8002         SJMP    ??zcl_SendReadRsp_7
    548            }
    549            else
    550              status = ZMemError;
   \                     ??zcl_SendReadRsp_4:
   \   0000F6   7E10         MOV     R6,#0x10
    551          
    552            return ( status );
   \                     ??zcl_SendReadRsp_7:
   \   0000F8   02....       LJMP    ?Subroutine120 & 0xFFFF
    553          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000005   E9           MOV     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000007                REQUIRE ?Subroutine116
   \   000007                ; // Fall through to label ?Subroutine116

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   75..00       MOV     ?V0 + 1,#0x0
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   AA..         MOV     R2,?V0 + 0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   EA           MOV     A,R2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   741E         MOV     A,#0x1e
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F5..         MOV     ?V0 + 12,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 13,A
   \   000007   85..82       MOV     DPL,?V0 + 12
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   E5..         MOV     A,?V0 + 5
   \   00000A   C3           CLR     C
   \   00000B   9A           SUBB    A,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   A9..         MOV     R1,?V0 + 4
   \   000005   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F5..         MOV     ?V0 + 14,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007   EE           MOV     A,R6
   \   000008   FC           MOV     R4,A
   \   000009   EF           MOV     A,R7
   \   00000A   FD           MOV     R5,A
   \   00000B   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00000E   12....       LCALL   ??zclSerializeData?relay
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000014   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000017   E9           MOV     A,R1
   \   000018   F8           MOV     R0,A
   \   000019   EE           MOV     A,R6
   \   00001A   28           ADD     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C                REQUIRE ?Subroutine115
   \   00001C                ; // Fall through to label ?Subroutine115

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000009   FB           MOV     R3,A
   \   00000A   85..82       MOV     DPL,?V0 + 12
   \   00000D   85..83       MOV     DPH,?V0 + 13
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   EC           MOV     A,R4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   ED           MOV     A,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   89..         MOV     ?V0 + 4,R1
   \   000012   741C         MOV     A,#0x1c
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   AE82         MOV     R6,DPL
   \   00000C   AF83         MOV     R7,DPH
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000016   2402         ADD     A,#0x2
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   FD           MOV     R5,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine138_0
   \   000003                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 3
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
    554          #endif // ZCL_READ
    555          
    556          #ifdef ZCL_WRITE

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    557          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, 
   \                     zcl_SendWriteRequest:
    558                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction, 
    559                                          uint8 disableDefaultRsp, uint8 seqNum )
    560          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 10,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 9,A
   \   00002E   7421         MOV     A,#0x21
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 8,A
    561            uint8 *buf;
    562            uint8 *pBuf;
    563            zclWriteRec_t *statusRec;
    564            uint8 attrDataLen;
    565            uint8 dataLen = 0;
   \   000036   7E00         MOV     R6,#0x0
    566            uint8 i;
    567            ZStatus_t status;
    568            
    569            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000038   8E..         MOV     ?V0 + 5,R6
   \   00003A   8014         SJMP    ??zcl_SendWriteRequest_0
    570            {
    571              statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   00003C   E5..         MOV     A,?V0 + 5
   \   00003E   75F005       MOV     B,#0x5
   \   000041   12....       LCALL   ?Subroutine74 & 0xFFFF
    572              
    573              attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    574              dataLen += 2 + 1 + attrDataLen; // Attribute ID + Attribute Type + Attribute Data
   \                     ??CrossCallReturnLabel_102:
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   12....       LCALL   ?Subroutine42 & 0xFFFF
    575            }
   \                     ??CrossCallReturnLabel_54:
   \   000047   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00004A   2403         ADD     A,#0x3
   \   00004C   2E           ADD     A,R6
   \   00004D   FE           MOV     R6,A
   \   00004E   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_0:
   \   000050   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000053   40E7         JC      ??zcl_SendWriteRequest_1
    576          
    577            buf = osal_mem_alloc( dataLen );
   \   000055   12....       LCALL   ?Subroutine65 & 0xFFFF
    578            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_90:
   \   000058   7001         JNZ     ??zcl_SendWriteRequest_2
   \   00005A   EB           MOV     A,R3
   \                     ??zcl_SendWriteRequest_2:
   \   00005B   607C         JZ      ??zcl_SendWriteRequest_3
    579            {
    580              // Load the buffer - serially
    581              pBuf = buf;
   \   00005D   AE..         MOV     R6,?V0 + 6
   \   00005F   AF..         MOV     R7,?V0 + 7
    582              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000061   75..00       MOV     ?V0 + 5,#0x0
   \   000064   8012         SJMP    ??zcl_SendWriteRequest_4
    583              { 
    584                statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_5:
   \   000066   E5..         MOV     A,?V0 + 5
   \   000068   75F005       MOV     B,#0x5
   \   00006B   12....       LCALL   ?Subroutine1 & 0xFFFF
    585                
    586                *pBuf++ = LO_UINT16( statusRec->attrID );
    587                *pBuf++ = HI_UINT16( statusRec->attrID );
    588                *pBuf++ = statusRec->dataType;
    589                
    590                zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
    591                
    592                attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    593                pBuf += attrDataLen; // move pass attribute data
    594              }
   \                     ??CrossCallReturnLabel_3:
   \   00006E   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000071   2403         ADD     A,#0x3
   \   000073   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000076   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_4:
   \   000078   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00007B   40E9         JC      ??zcl_SendWriteRequest_5
    595          
    596              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE, 
    597                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007D                ; Setup parameters for call to function zcl_SendCommand
   \   00007D   78..         MOV     R0,#?V0 + 6
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   E5..         MOV     A,?V0 + 8
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   75..00       MOV     ?V0 + 0,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   E5..         MOV     A,?V0 + 9
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   E5..         MOV     A,?V0 + 10
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   75..00       MOV     ?V0 + 0,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   E5..         MOV     A,?V0 + 11
   \   0000B4   F5..         MOV     ?V0 + 0,A
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000C3   740D         MOV     A,#0xd
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   E9           MOV     A,R1
   \   0000CF   FE           MOV     R6,A
    598              osal_mem_free( buf );
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   AA..         MOV     R2,?V0 + 6
   \   0000D2   AB..         MOV     R3,?V0 + 7
   \   0000D4   12....       LCALL   ??osal_mem_free?relay
   \   0000D7   8002         SJMP    ??zcl_SendWriteRequest_6
    599            }
    600            else
    601              status = ZMemError;
   \                     ??zcl_SendWriteRequest_3:
   \   0000D9   7E10         MOV     R6,#0x10
    602          
    603            return ( status);
   \                     ??zcl_SendWriteRequest_6:
   \   0000DB   02....       LJMP    ?Subroutine120 & 0xFFFF
    604          }
    605          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    606          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
    607                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
    608                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    609          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 6,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 7,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 10,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 11,A
    610            uint8 dataLen;
    611            uint8 *buf;
    612            uint8 *pBuf;
    613            uint8 i;
    614            ZStatus_t status;
    615            
    616            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \   00002D   75F003       MOV     B,#0x3
   \   000030   85..82       MOV     DPL,?V0 + 4
   \   000033   85..83       MOV     DPH,?V0 + 5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   A4           MUL     AB
   \   000038   F5..         MOV     ?V0 + 12,A
    617          
    618            buf = osal_mem_alloc( dataLen );
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   FA           MOV     R2,A
   \   00003B   12....       LCALL   ?Subroutine64 & 0xFFFF
    619            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_88:
   \   00003E   7001         JNZ     ??zcl_SendWriteRsp_0
   \   000040   EB           MOV     A,R3
   \                     ??zcl_SendWriteRsp_0:
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??zcl_SendWriteRsp_1 & 0xFFFF
    620            {
    621              // Load the buffer - serially
    622              pBuf = buf;
   \   000046   A8..         MOV     R0,?V0 + 2
   \   000048   A9..         MOV     R1,?V0 + 3
    623              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   00004A   75..00       MOV     ?V0 + 8,#0x0
   \   00004D   802E         SJMP    ??zcl_SendWriteRsp_2
    624              { 
    625                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_3:
   \   00004F   E5..         MOV     A,?V0 + 8
   \   000051   75F003       MOV     B,#0x3
   \   000054   A4           MUL     AB
   \   000055   FA           MOV     R2,A
   \   000056   ABF0         MOV     R3,B
   \   000058   E5..         MOV     A,?V0 + 4
   \   00005A   2A           ADD     A,R2
   \   00005B   FA           MOV     R2,A
   \   00005C   E5..         MOV     A,?V0 + 5
   \   00005E   3B           ADDC    A,R3
   \   00005F   FB           MOV     R3,A
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine41 & 0xFFFF
    626                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_173:
   \   000068   EA           MOV     A,R2
   \   000069   2402         ADD     A,#0x2
   \   00006B   0A           INC     R2
   \   00006C   0A           INC     R2
   \   00006D   EB           MOV     A,R3
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   12....       LCALL   ??Subroutine129_0 & 0xFFFF
    627                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_180:
   \   000078   12....       LCALL   ?Subroutine28 & 0xFFFF
    628              }
   \                     ??CrossCallReturnLabel_182:
   \   00007B   05..         INC     ?V0 + 8
   \                     ??zcl_SendWriteRsp_2:
   \   00007D   85..82       MOV     DPL,?V0 + 4
   \   000080   85..83       MOV     DPH,?V0 + 5
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   E5..         MOV     A,?V0 + 8
   \   000087   C3           CLR     C
   \   000088   9A           SUBB    A,R2
   \   000089   40C4         JC      ??zcl_SendWriteRsp_3
    629              
    630              // If there's only a single status record and its status field is set to 
    631              // SUCCESS then omit the attribute ID field.
    632              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6401         XRL     A,#0x1
   \   00008E   7007         JNZ     ??zcl_SendWriteRsp_4
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   7003         JNZ     ??zcl_SendWriteRsp_4
    633                dataLen = 1;
   \   000094   75..01       MOV     ?V0 + 12,#0x1
    634                
    635              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
    636                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_4:
   \   000097                ; Setup parameters for call to function zcl_SendCommand
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   75..00       MOV     ?V0 + 13,#0x0
   \   00009F   78..         MOV     R0,#?V0 + 12
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   E5..         MOV     A,?V0 + 11
   \   0000A6   F5..         MOV     ?V0 + 4,A
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   75..00       MOV     ?V0 + 4,#0x0
   \   0000B0   75..00       MOV     ?V0 + 5,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   E5..         MOV     A,?V0 + 10
   \   0000BA   F5..         MOV     ?V0 + 4,A
   \   0000BC   78..         MOV     R0,#?V0 + 4
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   E5..         MOV     A,?V0 + 7
   \   0000C3   F5..         MOV     ?V0 + 4,A
   \   0000C5   78..         MOV     R0,#?V0 + 4
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   75..00       MOV     ?V0 + 4,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   75..04       MOV     ?V0 + 4,#0x4
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   AC..         MOV     R4,?V0 + 0
   \   0000DC   AD..         MOV     R5,?V0 + 1
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FB           MOV     R3,A
   \   0000E2   A9..         MOV     R1,?V0 + 6
   \   0000E4   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   FE           MOV     R6,A
    637              osal_mem_free( buf );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   AA..         MOV     R2,?V0 + 2
   \   0000EE   AB..         MOV     R3,?V0 + 3
   \   0000F0   12....       LCALL   ??osal_mem_free?relay
   \   0000F3   8002         SJMP    ??zcl_SendWriteRsp_5
    638            }
    639            else
    640              status = ZMemError;
   \                     ??zcl_SendWriteRsp_1:
   \   0000F5   7E10         MOV     R6,#0x10
    641          
    642            return ( status );
   \                     ??zcl_SendWriteRsp_5:
   \   0000F7   02....       LJMP    ?Subroutine121 & 0xFFFF
    643          }
    644          #endif // ZCL_WRITE
    645          
    646          #ifdef ZCL_REPORT
    647          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    648                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
    649                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    650          {
    651            uint8 *buf;
    652            uint8 *pBuf;
    653            uint8 dataLen = 0;
    654            zclCfgReportRec_t *reportRec;
    655            uint8 reportChangeLen; // length of Reportable Change field
    656            uint8 i;
    657            ZStatus_t status;
    658            
    659            // Find out the data length
    660            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    661            {
    662              reportRec = &(cfgReportCmd->attrList[i]);
    663              
    664              dataLen += 1 + 2; // Direction + Attribute ID
    665              reportChangeLen = 0;
    666              
    667              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    668              {
    669                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    670                
    671                // Find out the size of the Reportable Change field (for Analog data types)
    672                if ( zclAnalogDataType( reportRec->dataType ) )
    673                {
    674                  reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    675                  dataLen += reportChangeLen;
    676                }
    677              }
    678              else
    679              {
    680                dataLen += 2; // Timeout Period
    681              }
    682            }
    683            
    684            buf = osal_mem_alloc( dataLen );
    685            if ( buf != NULL )
    686            {
    687              // Load the buffer - serially
    688              pBuf = buf;
    689              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    690              {
    691                reportRec = &(cfgReportCmd->attrList[i]);
    692                
    693                *pBuf++ = reportRec->direction;
    694                *pBuf++ = LO_UINT16( reportRec->attrID );
    695                *pBuf++ = HI_UINT16( reportRec->attrID );
    696                
    697                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    698                {
    699                  *pBuf++ = reportRec->dataType;
    700                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
    701                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
    702                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
    703                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
    704          
    705                  if ( zclAnalogDataType( reportRec->dataType ) )
    706                  {
    707                    zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
    708                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    709                    pBuf += reportChangeLen;
    710                  }
    711                }
    712                else
    713                {
    714                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
    715                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
    716                } 
    717              } // for loop
    718              
    719              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE, 
    720                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    721              osal_mem_free( buf );
    722            }
    723            else
    724              status = ZMemError;
    725            
    726            return ( status );
    727          }
    728          
    729          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    730                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
    731                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    732          {
    733            uint8 dataLen;
    734            uint8 *buf;
    735            uint8 *pBuf;
    736            uint8 i;
    737            ZStatus_t status;
    738            
    739            // Atrribute list (Status, Direction and Attribute ID)
    740            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 ); 
    741            
    742            buf = osal_mem_alloc( dataLen );
    743            if ( buf != NULL )
    744            {
    745              // Load the buffer - serially
    746              pBuf = buf; 
    747              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
    748              {
    749                *pBuf++ = cfgReportRspCmd->attrList[i].status;
    750                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
    751                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
    752                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
    753              }
    754              
    755              // If there's only a single status record and its status field is set to 
    756              // SUCCESS then omit the attribute ID field.
    757              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
    758                dataLen = 1;
    759              
    760              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    761                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction, 
    762                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
    763              osal_mem_free( buf );
    764            }
    765            else
    766              status = ZMemError;
    767            
    768            return ( status );
    769          }
    770          
    771          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
    772                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
    773                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    774          {
    775            uint8 dataLen;
    776            uint8 *buf;
    777            uint8 *pBuf;
    778            uint8 i;
    779            ZStatus_t status;
    780           
    781            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
    782            
    783            buf = osal_mem_alloc( dataLen );
    784            if ( buf != NULL )
    785            {
    786              // Load the buffer - serially
    787              pBuf = buf;
    788              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
    789              {
    790                *pBuf++ = readReportCfgCmd->attrList[i].direction;
    791                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
    792                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
    793              }
    794              
    795              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE, 
    796                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    797              osal_mem_free( buf );
    798            }
    799            else
    800              status = ZMemError;
    801            
    802            return ( status );
    803          }
    804          
    805          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    806                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
    807                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    808          {
    809            uint8 *buf;
    810            uint8 *pBuf;
    811            uint8 dataLen = 0;
    812            zclReportCfgRspRec_t *reportRspRec;
    813            uint8 reportChangeLen;
    814            uint8 i;
    815            ZStatus_t status;
    816          
    817            // Find out the data length
    818            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
    819            {
    820              reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    821              
    822              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
    823              
    824              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
    825              {
    826                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
    827                {
    828                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    829                
    830                  if ( zclAnalogDataType( reportRspRec->dataType ) )
    831                  {
    832                    reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
    833                    dataLen += reportChangeLen; // Reportable Change field
    834                  }
    835                }
    836                else
    837                {
    838                  dataLen += 2; // Timeout Period
    839                }
    840              }
    841            }
    842            
    843            buf = osal_mem_alloc( dataLen );
    844            if ( buf != NULL )
    845            {
    846              // Load the buffer - serially
    847              pBuf = buf;
    848          
    849              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
    850              {
    851                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    852          
    853                *pBuf++ = reportRspRec->status;
    854                *pBuf++ = reportRspRec->direction;
    855                *pBuf++ = LO_UINT16( reportRspRec->attrID );
    856                *pBuf++ = HI_UINT16( reportRspRec->attrID );
    857               
    858                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
    859                {
    860                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
    861                  {
    862                    *pBuf++ = reportRspRec->dataType;
    863                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
    864                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
    865                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
    866                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
    867          
    868                    if ( zclAnalogDataType( reportRspRec->dataType ) )
    869                    {
    870                      zclSerializeData( reportRspRec->dataType, 
    871                                        reportRspRec->reportableChange, pBuf );
    872                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
    873                      pBuf += reportChangeLen;
    874                    }
    875                  }
    876                  else
    877                  {
    878                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
    879                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
    880                  }
    881                }
    882              }
    883             
    884              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    885                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
    886                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    887              osal_mem_free( buf );
    888            }
    889            else
    890              status = ZMemError;
    891            
    892            return ( status );
    893          }
    894          
    895          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    896                                       uint16 clusterID, zclReportCmd_t *reportCmd,
    897                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    898          {
    899            zclReport_t *reportRec;
    900            uint8 attrDataLen;
    901            uint8 dataLen = 0;
    902            uint8 *buf;
    903            uint8 *pBuf;
    904            uint8 i;
    905            ZStatus_t status;
    906            
    907            // calculate the size of the command
    908            for ( i = 0; i < reportCmd->numAttr; i++ )
    909            {
    910              reportRec = &(reportCmd->attrList[i]);
    911              
    912              dataLen += 2 + 1; // Attribute ID + data type
    913          
    914              attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
    915              dataLen += attrDataLen; // Attribute Data
    916            }
    917            
    918            buf = osal_mem_alloc( dataLen );
    919            if ( buf != NULL )
    920            {
    921              // Load the buffer - serially
    922              pBuf = buf;
    923              for ( i = 0; i < reportCmd->numAttr; i++ )
    924              {
    925                reportRec = &(reportCmd->attrList[i]);
    926                
    927                *pBuf++ = LO_UINT16( reportRec->attrID );
    928                *pBuf++ = HI_UINT16( reportRec->attrID );
    929                *pBuf++ = reportRec->dataType;
    930          
    931                zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
    932                attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
    933                pBuf += attrDataLen; // move pass attribute data
    934              }
    935           
    936              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE, 
    937                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    938              osal_mem_free( buf );
    939            }
    940            else
    941              status = ZMemError;
    942            
    943            return ( status );
    944          }
    945          #endif // ZCL_REPORT
    946          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
    948                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
    949                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
    950          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 3,A
   \   00002F   7416         MOV     A,#0x16
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
    951            uint8 buf[2]; // Command ID and Status;
    952          
    953            // Load the buffer - serially
    954            buf[0] = defaultRspCmd->commandID;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   12....       LCALL   ?Subroutine14 & 0xFFFF
    955            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_21:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
    956          
    957            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
    958                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) ); 
   \   000050                ; Setup parameters for call to function zcl_SendCommand
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   75..02       MOV     ?V0 + 0,#0x2
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   E5..         MOV     A,?V0 + 5
   \   00006E   F5..         MOV     ?V0 + 0,A
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   EF           MOV     A,R7
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV     ?V0 + 0,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..0B       MOV     ?V0 + 0,#0xb
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   02....       LJMP    ?Subroutine111 & 0xFFFF
    959          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   22           RET
    960          
    961          #ifdef ZCL_DISCOVER
    962          ZStatus_t zcl_SendDiscoverCmd( uint8 srcEP, afAddrType_t *dstAddr,
    963                                      uint16 clusterID, zclDiscoverCmd_t *discoverCmd,
    964                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    965          {
    966            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
    967            uint8 *buf;
    968            uint8 *pBuf;
    969            ZStatus_t status;
    970            
    971            buf = osal_mem_alloc( dataLen );
    972            if ( buf != NULL )
    973            {
    974              // Load the buffer - serially
    975              pBuf = buf;
    976              *pBuf++ = LO_UINT16(discoverCmd->startAttr);
    977              *pBuf++ = HI_UINT16(discoverCmd->startAttr);
    978              *pBuf++ = discoverCmd->maxAttrIDs;
    979              
    980              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER, FALSE, 
    981                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    982              osal_mem_free( buf );
    983            }
    984            else
    985              status = ZMemError;
    986            
    987            return ( status );
    988          }
    989          
    990          ZStatus_t zcl_SendDiscoverRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    991                                uint16 clusterID, zclDiscoverRspCmd_t *discoverRspCmd,
    992                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    993          {
    994            uint8 dataLen = 1; // Discovery complete
    995            uint8 *buf;
    996            uint8 *pBuf;
    997            uint8 i;
    998            ZStatus_t status;
    999            
   1000            // calculate the size of the command
   1001            dataLen += discoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   1002            
   1003            buf = osal_mem_alloc( dataLen );
   1004            if ( buf != NULL )
   1005            {
   1006              // Load the buffer - serially
   1007              pBuf = buf;
   1008              *pBuf++ = discoverRspCmd->discComplete;    
   1009              for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1010              {
   1011                *pBuf++ = LO_UINT16(discoverRspCmd->attrList[i].attrID);
   1012                *pBuf++ = HI_UINT16(discoverRspCmd->attrList[i].attrID);
   1013                *pBuf++ = discoverRspCmd->attrList[i].dataType;
   1014              }
   1015              
   1016              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_RSP, FALSE,
   1017                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1018              osal_mem_free( buf );
   1019            }
   1020            else
   1021              status = ZMemError;
   1022            
   1023            return ( status );
   1024          }
   1025          #endif // ZCL_DISCOVER
   1026          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zclProcessMessageMSG:
   1028          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 55
   \   000005   74C9         MOV     A,#-0x37
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1029          #if defined(Coor_receiver) // The coordinator receive data
   1030            byte recv_data[30];  
   1031          #endif
   1032            uint16 len;
   1033            endPointDesc_t *epDesc;
   1034            zclIncoming_t inMsg;
   1035            zclLibPlugin_t *pInPlugin;
   1036            zclDefaultRspCmd_t defautlRspCmd;
   1037            uint8 options;
   1038            uint8 securityEnable;
   1039            uint8 interPanMsg;
   1040            ZStatus_t status = ZFailure;
   1041          
   1042            if ( pkt->cmd.DataLength == 0 ) return;   // Error, ignore the message
   \   00000E   EE           MOV     A,R6
   \   00000F   241F         ADD     A,#0x1f
   \   000011   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000014   7002         JNZ     ??zclProcessMessageMSG_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_0:
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1043          
   1044          #if defined(Coor_receiver)
   1045            if (pkt->cmd.DataLength > 0)
   1046            {
   1047              for(len = 0; len < pkt->cmd.DataLength; len++) // Send the recv_data to UART
   \   00001D   7800         MOV     R0,#0x0
   \   00001F   7900         MOV     R1,#0x0
   \   000021   EE           MOV     A,R6
   \   000022   2421         ADD     A,#0x21
   \   000024   F5..         MOV     ?V0 + 4,A
   \   000026   EF           MOV     A,R7
   \   000027   3400         ADDC    A,#0x0
   \   000029   F5..         MOV     ?V0 + 5,A
   \   00002B   8021         SJMP    ??zclProcessMessageMSG_2
   1048              {
   1049                  recv_data[len] = pkt->cmd.Data[len+3]; // the cmd.Data[0~2] is cluster ID.
   \                     ??zclProcessMessageMSG_3:
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   12....       LCALL   ?Subroutine48 & 0xFFFF
   1050              }
   \                     ??CrossCallReturnLabel_63:
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C0E0         PUSH    A
   \   00003B   7419         MOV     A,#0x19
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   E8           MOV     A,R0
   \   000047   2401         ADD     A,#0x1
   \   000049   08           INC     R0
   \   00004A   E9           MOV     A,R1
   \   00004B   3400         ADDC    A,#0x0
   \   00004D   F9           MOV     R1,A
   \                     ??zclProcessMessageMSG_2:
   \   00004E   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000051   C3           CLR     C
   \   000052   E8           MOV     A,R0
   \   000053   9A           SUBB    A,R2
   \   000054   E9           MOV     A,R1
   \   000055   9B           SUBB    A,R3
   \   000056   40D5         JC      ??zclProcessMessageMSG_3
   1051              
   1052              #define HI_UINT16(a) (((a) >> 8) & 0xFF)
   1053              #define LO_UINT16(a) ((a) & 0xFF)
   1054              
   1055              char entry[4];
   1056              uint8 hi = HI_UINT16( pkt->srcAddr.addr.shortAddr );
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000065   FC           MOV     R4,A
   1057              uint8 lo = LO_UINT16( pkt->srcAddr.addr.shortAddr );
   1058          
   1059              entry[0] = hi/16 + 48;  /* Little Endian for the radio RAM */
   \   000066   C4           SWAP    A
   \   000067   540F         ANL     A,#0xf
   \   000069   2430         ADD     A,#0x30
   \   00006B   C0E0         PUSH    A
   \   00006D   7410         MOV     A,#0x10
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   D0E0         POP     A
   \   000074   F0           MOVX    @DPTR,A
   1060              entry[1] = hi%16 + 48;
   \   000075   740F         MOV     A,#0xf
   \   000077   5C           ANL     A,R4
   \   000078   2430         ADD     A,#0x30
   \   00007A   C0E0         PUSH    A
   \   00007C   7411         MOV     A,#0x11
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   D0E0         POP     A
   \   000083   F0           MOVX    @DPTR,A
   1061              entry[2] = lo/16 + 48;
   \   000084   EA           MOV     A,R2
   \   000085   C4           SWAP    A
   \   000086   540F         ANL     A,#0xf
   \   000088   2430         ADD     A,#0x30
   \   00008A   C0E0         PUSH    A
   \   00008C   7412         MOV     A,#0x12
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   1062              entry[3] = lo%16 + 48;
   \   000094   740F         MOV     A,#0xf
   \   000096   5A           ANL     A,R2
   \   000097   2430         ADD     A,#0x30
   \   000099   C0E0         PUSH    A
   \   00009B   7413         MOV     A,#0x13
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   D0E0         POP     A
   \   0000A2   F0           MOVX    @DPTR,A
   1063              for (int k=0;k<4;k++)
   \   0000A3   7800         MOV     R0,#0x0
   \   0000A5   7900         MOV     R1,#0x0
   1064              {
   1065                if(entry[k]>57)
   \                     ??zclProcessMessageMSG_4:
   \   0000A7   7410         MOV     A,#0x10
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C3           CLR     C
   \   0000B1   943A         SUBB    A,#0x3a
   \   0000B3   4004         JC      ??zclProcessMessageMSG_5
   1066                  entry[k]+=7;
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   2407         ADD     A,#0x7
   \   0000B8   F0           MOVX    @DPTR,A
   1067              }
   \                     ??zclProcessMessageMSG_5:
   \   0000B9   E8           MOV     A,R0
   \   0000BA   2401         ADD     A,#0x1
   \   0000BC   08           INC     R0
   \   0000BD   E9           MOV     A,R1
   \   0000BE   3400         ADDC    A,#0x0
   \   0000C0   F9           MOV     R1,A
   \   0000C1   C3           CLR     C
   \   0000C2   E8           MOV     A,R0
   \   0000C3   9404         SUBB    A,#0x4
   \   0000C5   E9           MOV     A,R1
   \   0000C6   9400         SUBB    A,#0x0
   \   0000C8   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000CA   65D0         XRL     A,PSW
   \   0000CC   33           RLC     A
   \   0000CD   40D8         JC      ??zclProcessMessageMSG_4
   1068          
   1069              HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   0000CF                ; Setup parameters for call to function HalUARTWrite
   \   0000CF   7C01         MOV     R4,#0x1
   \   0000D1   7D00         MOV     R5,#0x0
   \   0000D3   7A..         MOV     R2,#(`?<Constant "3">` & 0xff)
   \   0000D5   7B..         MOV     R3,#((`?<Constant "3">` >> 8) & 0xff)
   \   0000D7   12....       LCALL   ?Subroutine76 & 0xFFFF
   1070              HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
   1071              HalUARTWrite(MT_UART_DEFAULT_PORT, entry, 4);//Device ID
                                                        ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_105:
   \   0000DA                ; Setup parameters for call to function HalUARTWrite
   \   0000DA   7C04         MOV     R4,#0x4
   \   0000DC   7D00         MOV     R5,#0x0
   \   0000DE   7410         MOV     A,#0x10
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   AA82         MOV     R2,DPL
   \   0000E5   AB83         MOV     R3,DPH
   \   0000E7   12....       LCALL   ?Subroutine76 & 0xFFFF
   1072              HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
   1073              HalUARTWrite(MT_UART_DEFAULT_PORT, recv_data, pkt->cmd.DataLength-2);//Device Data
   \                     ??CrossCallReturnLabel_106:
   \   0000EA                ; Setup parameters for call to function HalUARTWrite
   \   0000EA   85..82       MOV     DPL,?V0 + 2
   \   0000ED   85..83       MOV     DPH,?V0 + 3
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   24FE         ADD     A,#-0x2
   \   0000F3   FC           MOV     R4,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   34FF         ADDC    A,#-0x1
   \   0000F8   FD           MOV     R5,A
   \   0000F9   7419         MOV     A,#0x19
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   AA82         MOV     R2,DPL
   \   000100   AB83         MOV     R3,DPH
   \   000102   7900         MOV     R1,#0x0
   \   000104   12....       LCALL   ??HalUARTWrite?relay
   1074              HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
   \   000107                ; Setup parameters for call to function HalUARTWrite
   \   000107   7C03         MOV     R4,#0x3
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   7A..         MOV     R2,#(`?<Constant "$\\r\\n">` & 0xff)
   \   00010D   7B..         MOV     R3,#((`?<Constant "$\\r\\n">` >> 8) & 0xff)
   \   00010F   7900         MOV     R1,#0x0
   \   000111   12....       LCALL   ??HalUARTWrite?relay
   1075            }
   1076          #endif
   1077          
   1078          // The device receive the uart command with RF
   1079          #if defined(End_Device) || defined(Router_Device)
   1080            if(pkt->cmd.DataLength > 0)
   1081            {
   1082              for(len = 0; len < pkt->cmd.DataLength; len++)
   1083              {
   1084                receive[len] = pkt->cmd.Data[len+3];
   1085              }
   1086              // Write receive coordinator command to UART, chrischris
   1087              // HalUARTWrite(MT_UART_DEFAULT_PORT, receive, pkt->cmd.DataLength-2);
   1088              // a - k 97=>107
   1089              // This part is addressing the level of the pwn(M160),
   1090              // and there are 11 levels which is from 97(a) to 107
   1091              #if defined(M160)
   1092                if((int)receive[0] > 97 && (int)receive[0]< 107 ){
   1093                  int var = (int)receive[0];
   1094                  var = var + 3 - 100;
   1095                  duty_M160 = var * 5;
   1096                }
   1097              #endif  
   1098              return ;
   1099            }
   1100          #endif  
   1101            
   1102            // Initialize
   1103            inMsg.msg = pkt;
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   EE           MOV     A,R6
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   A3           INC     DPTR
   \   00011C   EF           MOV     A,R7
   \   00011D   F0           MOVX    @DPTR,A
   1104            inMsg.attrCmd = NULL;
   \   00011E   740E         MOV     A,#0xe
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   E4           CLR     A
   \   000124   F0           MOVX    @DPTR,A
   \   000125   A3           INC     DPTR
   \   000126   F0           MOVX    @DPTR,A
   1105            inMsg.pData = NULL;
   \   000127   740A         MOV     A,#0xa
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   E4           CLR     A
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   A3           INC     DPTR
   \   00012F   F0           MOVX    @DPTR,A
   1106            inMsg.pDataLen = 0;
   \   000130   740C         MOV     A,#0xc
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E4           CLR     A
   \   000136   F0           MOVX    @DPTR,A
   \   000137   A3           INC     DPTR
   \   000138   F0           MOVX    @DPTR,A
   1107          
   1108            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   000139                ; Setup parameters for call to function zclParseHdr
   \   000139   85..82       MOV     DPL,?V0 + 4
   \   00013C   85..83       MOV     DPH,?V0 + 5
   \   00013F   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000142   7404         MOV     A,#0x4
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   AA82         MOV     R2,DPL
   \   000149   AB83         MOV     R3,DPH
   \   00014B   12....       LCALL   ??zclParseHdr?relay
   \   00014E   740A         MOV     A,#0xa
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   1109            inMsg.pDataLen = pkt->cmd.DataLength;
   1110            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_307:
   \   000156   85..82       MOV     DPL,?V0 + 2
   \   000159   85..83       MOV     DPH,?V0 + 3
   \   00015C   C082         PUSH    DPL
   \   00015E   C083         PUSH    DPH
   \   000160   740A         MOV     A,#0xa
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000168   D083         POP     DPH
   \   00016A   D082         POP     DPL
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   C3           CLR     C
   \   00016E   98           SUBB    A,R0
   \   00016F   F8           MOV     R0,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   99           SUBB    A,R1
   \   000173   F9           MOV     R1,A
   \   000174   85..82       MOV     DPL,?V0 + 4
   \   000177   85..83       MOV     DPH,?V0 + 5
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   28           ADD     A,R0
   \   00017C   F8           MOV     R0,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   39           ADDC    A,R1
   \   000180   F9           MOV     R1,A
   \   000181   740C         MOV     A,#0xc
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   1111          
   1112            // Find the wanted endpoint
   1113            epDesc = afFindEndPointDesc( pkt->endPoint );
   \                     ??CrossCallReturnLabel_253:
   \   000189   EE           MOV     A,R6
   \   00018A   2414         ADD     A,#0x14
   \   00018C   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00018F   F9           MOV     R1,A
   \   000190   12....       LCALL   ??afFindEndPointDesc?relay
   \   000193   8A..         MOV     ?V0 + 0,R2
   \   000195   8B..         MOV     ?V0 + 1,R3
   \   000197   A8..         MOV     R0,?V0 + 0
   \   000199   A9..         MOV     R1,?V0 + 1
   1114            if ( epDesc == NULL )
   \   00019B   E8           MOV     A,R0
   \   00019C   7001         JNZ     ??zclProcessMessageMSG_6
   \   00019E   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_6:
   \   00019F   7003         JNZ     $+5
   \   0001A1   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1115              return;   // Error, ignore the message
   1116          
   1117            if ( pkt->clusterId == ZCL_INVALID_CLUSTER_ID )
   \   0001A4   EE           MOV     A,R6
   \   0001A5   2404         ADD     A,#0x4
   \   0001A7   F5..         MOV     ?V0 + 4,A
   \   0001A9   EF           MOV     A,R7
   \   0001AA   3400         ADDC    A,#0x0
   \   0001AC   F5..         MOV     ?V0 + 5,A
   \   0001AE   85..82       MOV     DPL,?V0 + 4
   \   0001B1   F583         MOV     DPH,A
   \   0001B3   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0001B6   7003         JNZ     ??zclProcessMessageMSG_7
   \   0001B8   74FF         MOV     A,#-0x1
   \   0001BA   6B           XRL     A,R3
   \                     ??zclProcessMessageMSG_7:
   \   0001BB   7003         JNZ     $+5
   \   0001BD   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1118              return;   // Error, ignore the message
   1119            
   1120            if ((epDesc->simpleDesc == NULL) ||
   1121                (zcl_DeviceOperational(pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type, inMsg.hdr.commandID,
   1122                                             epDesc->simpleDesc->AppProfId) == FALSE))
   \   0001C0   E8           MOV     A,R0
   \   0001C1   2403         ADD     A,#0x3
   \   0001C3   F5..         MOV     ?V0 + 6,A
   \   0001C5   E9           MOV     A,R1
   \   0001C6   3400         ADDC    A,#0x0
   \   0001C8   F5..         MOV     ?V0 + 7,A
   \   0001CA   85..82       MOV     DPL,?V0 + 6
   \   0001CD   F583         MOV     DPH,A
   \   0001CF   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0001D2   7002         JNZ     ??zclProcessMessageMSG_8
   \   0001D4   E583         MOV     A,DPH
   \                     ??zclProcessMessageMSG_8:
   \   0001D6   7003         JNZ     $+5
   \   0001D8   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0001DB                ; Setup parameters for call to function zcl_DeviceOperational
   \   0001DB   A3           INC     DPTR
   \   0001DC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001DF   740B         MOV     A,#0xb
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   FD           MOV     R5,A
   \   0001E6   7406         MOV     A,#0x6
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   5403         ANL     A,#0x3
   \   0001EE   FC           MOV     R4,A
   \   0001EF   85..82       MOV     DPL,?V0 + 2
   \   0001F2   85..83       MOV     DPH,?V0 + 3
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   F9           MOV     R1,A
   \   0001F7   12....       LCALL   ??zcl_DeviceOperational?relay
   \   0001FA   7402         MOV     A,#0x2
   \   0001FC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FF   E9           MOV     A,R1
   \   000200   7003         JNZ     $+5
   \   000202   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1123            {
   1124              return; // Error, ignore the message
   1125            }
   1126          
   1127          #if defined ( INTER_PAN )
   1128            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   1129            {
   1130              // No foundation command is supported thru Inter-PAN communication
   1131              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   1132                return;
   1133          
   1134              interPanMsg = TRUE; 
   1135              options = AF_TX_OPTIONS_NONE;
   1136            }
   1137            else
   1138          #endif
   1139            {
   1140              interPanMsg = FALSE;
   1141              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \   000205                ; Setup parameters for call to function zclGetClusterOption
   \   000205   85..82       MOV     DPL,?V0 + 4
   \   000208   85..83       MOV     DPH,?V0 + 5
   \   00020B   12....       LCALL   ?Subroutine43 & 0xFFFF
   1142            }
   \                     ??CrossCallReturnLabel_55:
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F9           MOV     R1,A
   \   000210   12....       LCALL   ??zclGetClusterOption?relay
   \   000213   E9           MOV     A,R1
   \   000214   FA           MOV     R2,A
   1143            
   1144            // Local and remote Security options must match except for Default Response command
   1145            if ( !zcl_DefaultRspCmd( inMsg.hdr ) )
   \   000215   7404         MOV     A,#0x4
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   F8           MOV     R0,A
   \   00021C   5407         ANL     A,#0x7
   \   00021E   700D         JNZ     ??zclProcessMessageMSG_9
   \   000220   7409         MOV     A,#0x9
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   E0           MOVX    A,@DPTR
   \   000226   640B         XRL     A,#0xb
   \   000228   7003         JNZ     $+5
   \   00022A   02....       LJMP    ??zclProcessMessageMSG_10 & 0xFFFF
   1146            {
   1147              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zclProcessMessageMSG_9:
   \   00022D   EA           MOV     A,R2
   \   00022E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000230   5004         JNC     ??zclProcessMessageMSG_11
   \   000232   D2F0         SETB    B.0
   \   000234   8002         SJMP    ??zclProcessMessageMSG_12
   \                     ??zclProcessMessageMSG_11:
   \   000236   C2F0         CLR     B.0
   \                     ??zclProcessMessageMSG_12:
   \   000238   A2F0         MOV     C,B.0
   \   00023A   E4           CLR     A
   \   00023B   92E0         MOV     0xE0 /* A   */.0,C
   \   00023D   F5..         MOV     ?V0 + 0,A
   1148              if ( pkt->SecurityUse != securityEnable )
   \   00023F   EE           MOV     A,R6
   \   000240   2419         ADD     A,#0x19
   \   000242   F582         MOV     DPL,A
   \   000244   EF           MOV     A,R7
   \   000245   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000248   65..         XRL     A,?V0 + 0
   \   00024A   7003         JNZ     $+5
   \   00024C   02....       LJMP    ??zclProcessMessageMSG_10 & 0xFFFF
   1149              {
   1150                if ( UNICAST_MSG( inMsg.msg ) )
   \   00024F   7402         MOV     A,#0x2
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000257   6003         JZ      $+5
   \   000259   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   00025C   7402         MOV     A,#0x2
   \   00025E   12....       LCALL   ?XSTACK_DISP0_8
   \   000261   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000264   7002         JNZ     ??zclProcessMessageMSG_13
   \   000266   A3           INC     DPTR
   \   000267   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_13:
   \   000268   6003         JZ      $+5
   \   00026A   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1151                {
   1152                  // Send a Default Response command back with no Application Link Key security
   1153                  if ( securityEnable )
   \   00026D   E5..         MOV     A,?V0 + 0
   \   00026F   6005         JZ      ??CrossCallReturnLabel_32
   1154                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   000271                ; Setup parameters for call to function zclSetSecurityOption
   \   000271   7C00         MOV     R4,#0x0
   \   000273   12....       LCALL   ?Subroutine27 & 0xFFFF
   1155                  
   1156                  defautlRspCmd.statusCode = status;
   \                     ??CrossCallReturnLabel_32:
   \   000276   7401         MOV     A,#0x1
   \   000278   12....       LCALL   ?XSTACK_DISP0_8
   \   00027B   7401         MOV     A,#0x1
   \   00027D   F0           MOVX    @DPTR,A
   1157                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   00027E   7409         MOV     A,#0x9
   \   000280   12....       LCALL   ?XSTACK_DISP0_8
   \   000283   12....       LCALL   ?Subroutine52 & 0xFFFF
   1158                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1159                                         inMsg.msg->clusterId, &defautlRspCmd, 
   1160                                         ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1161                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_67:
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   F5..         MOV     ?V0 + 1,A
   \   00028C   78..         MOV     R0,#?V0 + 1
   \   00028E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000291   7407         MOV     A,#0x7
   \   000293   12....       LCALL   ?XSTACK_DISP0_8
   \   000296   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000299   75..01       MOV     ?V0 + 1,#0x1
   \   00029C   78..         MOV     R0,#?V0 + 1
   \   00029E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A1   78..         MOV     R0,#?V0 + 1
   \   0002A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A6   7405         MOV     A,#0x5
   \   0002A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AB   8582..       MOV     ?V0 + 6,DPL
   \   0002AE   8583..       MOV     ?V0 + 7,DPH
   \   0002B1   78..         MOV     R0,#?V0 + 6
   \   0002B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B6   7409         MOV     A,#0x9
   \   0002B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BB   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0002BE   7409         MOV     A,#0x9
   \   0002C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C3   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0002CC   12....       LCALL   ?DEALLOC_XSTACK8
   1162                  if ( securityEnable )
   \   0002CF   E5..         MOV     A,?V0 + 0
   \   0002D1   7003         JNZ     $+5
   \   0002D3   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1163                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );       
   \   0002D6                ; Setup parameters for call to function zclSetSecurityOption
   \   0002D6   7C01         MOV     R4,#0x1
   \   0002D8   12....       LCALL   ?Subroutine27 & 0xFFFF
   1164                }
   1165                return;   // Error, ignore the message
   1166              }
   1167            }
   \                     ??CrossCallReturnLabel_33:
   \   0002DB   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1168            
   1169            // Is this a foundation type message
   1170            if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zclProcessMessageMSG_10:
   \   0002DE   E8           MOV     A,R0
   \   0002DF   5403         ANL     A,#0x3
   \   0002E1   6003         JZ      $+5
   \   0002E3   02....       LJMP    ??zclProcessMessageMSG_14 & 0xFFFF
   1171            { 
   1172              if ( inMsg.hdr.fc.manuSpecific )
   \   0002E6   E8           MOV     A,R0
   \   0002E7   5404         ANL     A,#0x4
   \   0002E9   6005         JZ      ??zclProcessMessageMSG_15
   1173              {
   1174                // We don't support any manufacturer specific command
   1175                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   0002EB   7A84         MOV     R2,#-0x7c
   \   0002ED   02....       LJMP    ??zclProcessMessageMSG_16 & 0xFFFF
   1176              }
   1177              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) && 
   1178                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zclProcessMessageMSG_15:
   \   0002F0   7409         MOV     A,#0x9
   \   0002F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   F5..         MOV     ?V0 + 0,A
   \   0002F8   C3           CLR     C
   \   0002F9   940E         SUBB    A,#0xe
   \   0002FB   4003         JC      $+5
   \   0002FD   02....       LJMP    ??zclProcessMessageMSG_17 & 0xFFFF
   \   000300   75..00       MOV     ?V0 + 1,#0x0
   \   000303   7402         MOV     A,#0x2
   \   000305   78..         MOV     R0,#?V0 + 0
   \   000307   12....       LCALL   ?S_SHL
   \   00030A   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00030D   F8           MOV     R0,A
   \   00030E   7401         MOV     A,#0x1
   \   000310   93           MOVC    A,@A+DPTR
   \   000311   F9           MOV     R1,A
   \   000312   E8           MOV     A,R0
   \   000313   7001         JNZ     ??zclProcessMessageMSG_18
   \   000315   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_18:
   \   000316   7003         JNZ     $+5
   \   000318   02....       LJMP    ??zclProcessMessageMSG_17 & 0xFFFF
   1179              {
   1180                zclParseCmd_t parseCmd;
   1181                
   1182                parseCmd.endpoint = pkt->endPoint;
   \   00031B   85..82       MOV     DPL,?V0 + 2
   \   00031E   85..83       MOV     DPH,?V0 + 3
   \   000321   E0           MOVX    A,@DPTR
   \   000322   C0E0         PUSH    A
   \   000324   7414         MOV     A,#0x14
   \   000326   12....       LCALL   ?XSTACK_DISP0_8
   \   000329   D0E0         POP     A
   \   00032B   F0           MOVX    @DPTR,A
   1183                parseCmd.dataLen = inMsg.pDataLen;
   \   00032C   740C         MOV     A,#0xc
   \   00032E   12....       LCALL   ?XSTACK_DISP0_8
   \   000331   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000334   7415         MOV     A,#0x15
   \   000336   12....       LCALL   ?XSTACK_DISP0_8
   \   000339   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   1184                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_254:
   \   00033C   740A         MOV     A,#0xa
   \   00033E   12....       LCALL   ?XSTACK_DISP0_8
   \   000341   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000344   7417         MOV     A,#0x17
   \   000346   12....       LCALL   ?XSTACK_DISP0_8
   \   000349   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   1185                
   1186                // Parse the command, remember that the return value is a pointer to allocated memory
   1187                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_255:
   \   00034C                ; Setup parameters for indirect call
   \   00034C   7414         MOV     A,#0x14
   \   00034E   12....       LCALL   ?XSTACK_DISP0_8
   \   000351   AA82         MOV     R2,DPL
   \   000353   AB83         MOV     R3,DPH
   \   000355   7409         MOV     A,#0x9
   \   000357   12....       LCALL   ?XSTACK_DISP0_8
   \   00035A   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00035D   12....       LCALL   ?S_SHL
   \   000360   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000363   C0E0         PUSH    A
   \   000365   7401         MOV     A,#0x1
   \   000367   93           MOVC    A,@A+DPTR
   \   000368   F583         MOV     DPH,A
   \   00036A   D082         POP     DPL
   \   00036C   12....       LCALL   ?CALL_IND
   \   00036F   740E         MOV     A,#0xe
   \   000371   12....       LCALL   ?XSTACK_DISP0_8
   \   000374   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   1188                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_308:
   \   000377   740E         MOV     A,#0xe
   \   000379   12....       LCALL   ?XSTACK_DISP0_8
   \   00037C   E0           MOVX    A,@DPTR
   \   00037D   7002         JNZ     ??zclProcessMessageMSG_19
   \   00037F   A3           INC     DPTR
   \   000380   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_19:
   \   000381   6047         JZ      ??zclProcessMessageMSG_20
   \   000383   7409         MOV     A,#0x9
   \   000385   12....       LCALL   ?XSTACK_DISP0_8
   \   000388   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00038B   12....       LCALL   ?S_SHL
   \   00038E   E5..         MOV     A,?V0 + 0
   \   000390   24..         ADD     A,#((zclCmdTable + 2) & 0xff)
   \   000392   F582         MOV     DPL,A
   \   000394   E5..         MOV     A,?V0 + 1
   \   000396   34..         ADDC    A,#(((zclCmdTable + 2) >> 8) & 0xff)
   \   000398   F583         MOV     DPH,A
   \   00039A   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00039D   E8           MOV     A,R0
   \   00039E   7001         JNZ     ??zclProcessMessageMSG_21
   \   0003A0   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_21:
   \   0003A1   601C         JZ      ??zclProcessMessageMSG_22
   1189                { 
   1190                  // Process the command
   1191                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   0003A3                ; Setup parameters for indirect call
   \   0003A3   7402         MOV     A,#0x2
   \   0003A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A8   AA82         MOV     R2,DPL
   \   0003AA   AB83         MOV     R3,DPH
   \   0003AC   8882         MOV     DPL,R0
   \   0003AE   8983         MOV     DPH,R1
   \   0003B0   12....       LCALL   ?CALL_IND
   1192                  {
   1193                    // Couldn't find attribute in the table.
   1194                  }
   1195                }
   1196                 
   1197                // Free the buffer
   1198                if ( inMsg.attrCmd )
   \   0003B3   740E         MOV     A,#0xe
   \   0003B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B8   E0           MOVX    A,@DPTR
   \   0003B9   7002         JNZ     ??zclProcessMessageMSG_23
   \   0003BB   A3           INC     DPTR
   \   0003BC   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_23:
   \   0003BD   600B         JZ      ??zclProcessMessageMSG_20
   1199                  osal_mem_free( inMsg.attrCmd );
   \                     ??zclProcessMessageMSG_22:
   \   0003BF                ; Setup parameters for call to function osal_mem_free
   \   0003BF   740E         MOV     A,#0xe
   \   0003C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C4   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0003C7   12....       LCALL   ??osal_mem_free?relay
   1200                
   1201                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zclProcessMessageMSG_20:
   \   0003CA   7409         MOV     A,#0x9
   \   0003CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   FA           MOV     R2,A
   \   0003D1   7003         JNZ     $+5
   \   0003D3   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0003D6   7402         MOV     A,#0x2
   \   0003D8   6A           XRL     A,R2
   \   0003D9   7003         JNZ     $+5
   \   0003DB   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0003DE   7403         MOV     A,#0x3
   \   0003E0   6A           XRL     A,R2
   \   0003E1   7003         JNZ     $+5
   \   0003E3   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0003E6   7406         MOV     A,#0x6
   \   0003E8   6A           XRL     A,R2
   \   0003E9   7003         JNZ     $+5
   \   0003EB   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0003EE   7408         MOV     A,#0x8
   \   0003F0   6A           XRL     A,R2
   \   0003F1   7003         JNZ     $+5
   \   0003F3   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0003F6   740C         MOV     A,#0xc
   \   0003F8   6A           XRL     A,R2
   \   0003F9   7003         JNZ     $+5
   \   0003FB   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0003FE   740B         MOV     A,#0xb
   \   000400   6A           XRL     A,R2
   \   000401   7003         JNZ     $+5
   \   000403   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1202                  return; // We're done
   1203                
   1204                status = ZSuccess;
   \   000406   7A00         MOV     R2,#0x0
   \   000408   02....       LJMP    ??zclProcessMessageMSG_16 & 0xFFFF
   1205              }
   1206              else
   1207              {
   1208                // Unsupported message
   1209                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zclProcessMessageMSG_17:
   \   00040B   7A82         MOV     R2,#-0x7e
   \   00040D   02....       LJMP    ??zclProcessMessageMSG_16 & 0xFFFF
   1210              }
   1211            }
   1212            else  // Not a foundation type message, so it must be specific to the cluster ID.
   1213            {
   1214              if (epDesc->simpleDesc == NULL)
   \                     ??zclProcessMessageMSG_14:
   \   000410   85..82       MOV     DPL,?V0 + 6
   \   000413   85..83       MOV     DPH,?V0 + 7
   \   000416   E0           MOVX    A,@DPTR
   \   000417   7002         JNZ     ??zclProcessMessageMSG_24
   \   000419   A3           INC     DPTR
   \   00041A   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_24:
   \   00041B   607D         JZ      ??zclProcessMessageMSG_25
   1215              {
   1216                pInPlugin = NULL;
   1217              }
   1218              else
   1219              {
   1220                // Find the appropriate plugin
   1221                pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   00041D   85..82       MOV     DPL,?V0 + 4
   \   000420   85..83       MOV     DPH,?V0 + 5
   \   000423   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000426   7003         JNZ     ??zclProcessMessageMSG_26
   \   000428   74FF         MOV     A,#-0x1
   \   00042A   6B           XRL     A,R3
   \                     ??zclProcessMessageMSG_26:
   \   00042B   6035         JZ      ??zclProcessMessageMSG_27
   \   00042D   90....       MOV     DPTR,#plugins
   \   000430   8004         SJMP    ??zclProcessMessageMSG_28
   \                     ??zclProcessMessageMSG_29:
   \   000432   8882         MOV     DPL,R0
   \   000434   8983         MOV     DPH,R1
   \                     ??zclProcessMessageMSG_28:
   \   000436   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000439   7001         JNZ     ??zclProcessMessageMSG_30
   \   00043B   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_30:
   \   00043C   6024         JZ      ??zclProcessMessageMSG_27
   \   00043E   8882         MOV     DPL,R0
   \   000440   8983         MOV     DPH,R1
   \   000442   12....       LCALL   ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000445   C3           CLR     C
   \   000446   EA           MOV     A,R2
   \   000447   9C           SUBB    A,R4
   \   000448   EB           MOV     A,R3
   \   000449   9D           SUBB    A,R5
   \   00044A   40E6         JC      ??zclProcessMessageMSG_29
   \   00044C   8882         MOV     DPL,R0
   \   00044E   8983         MOV     DPH,R1
   \   000450   A3           INC     DPTR
   \   000451   A3           INC     DPTR
   \   000452   A3           INC     DPTR
   \   000453   A3           INC     DPTR
   \   000454   C3           CLR     C
   \   000455   E0           MOVX    A,@DPTR
   \   000456   9A           SUBB    A,R2
   \   000457   A3           INC     DPTR
   \   000458   E0           MOVX    A,@DPTR
   \   000459   9B           SUBB    A,R3
   \   00045A   40D6         JC      ??zclProcessMessageMSG_29
   \   00045C   8882         MOV     DPL,R0
   \   00045E   8983         MOV     DPH,R1
   \   000460   8006         SJMP    ??zclProcessMessageMSG_31
   \                     ??zclProcessMessageMSG_27:
   \   000462   758200       MOV     DPL,#0x0
   \   000465   758300       MOV     DPH,#0x0
   1222              }
   1223              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zclProcessMessageMSG_31:
   \   000468   E582         MOV     A,DPL
   \   00046A   7002         JNZ     ??zclProcessMessageMSG_32
   \   00046C   E583         MOV     A,DPH
   \                     ??zclProcessMessageMSG_32:
   \   00046E   602A         JZ      ??zclProcessMessageMSG_25
   \   000470   A3           INC     DPTR
   \   000471   A3           INC     DPTR
   \   000472   A3           INC     DPTR
   \   000473   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000476   7001         JNZ     ??zclProcessMessageMSG_33
   \   000478   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_33:
   \   000479   601F         JZ      ??zclProcessMessageMSG_25
   1224              { 
   1225                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   00047B                ; Setup parameters for indirect call
   \   00047B   7402         MOV     A,#0x2
   \   00047D   12....       LCALL   ?XSTACK_DISP0_8
   \   000480   AA82         MOV     R2,DPL
   \   000482   AB83         MOV     R3,DPH
   \   000484   8882         MOV     DPL,R0
   \   000486   8983         MOV     DPH,R1
   \   000488   12....       LCALL   ?CALL_IND
   \   00048B   E9           MOV     A,R1
   \   00048C   FA           MOV     R2,A
   1226                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   00048D   74FF         MOV     A,#-0x1
   \   00048F   6A           XRL     A,R2
   \   000490   7003         JNZ     $+5
   \   000492   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1227                  return; // We're done      
   1228              }
   1229              
   1230              if ( status == ZFailure )
   \   000495   7401         MOV     A,#0x1
   \   000497   6A           XRL     A,R2
   \   000498   7010         JNZ     ??zclProcessMessageMSG_16
   1231              {
   1232                // Unsupported message
   1233                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zclProcessMessageMSG_25:
   \   00049A   7404         MOV     A,#0x4
   \   00049C   12....       LCALL   ?XSTACK_DISP0_8
   \   00049F   E0           MOVX    A,@DPTR
   \   0004A0   5404         ANL     A,#0x4
   \   0004A2   6004         JZ      ??zclProcessMessageMSG_34
   1234                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   0004A4   7A83         MOV     R2,#-0x7d
   \   0004A6   8002         SJMP    ??zclProcessMessageMSG_16
   1235                else
   1236                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zclProcessMessageMSG_34:
   \   0004A8   7A81         MOV     R2,#-0x7f
   1237              }
   1238            }
   1239            
   1240            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zclProcessMessageMSG_16:
   \   0004AA   7402         MOV     A,#0x2
   \   0004AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0004AF   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0004B2   7070         JNZ     ??zclProcessMessageMSG_1
   \   0004B4   7402         MOV     A,#0x2
   \   0004B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B9   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0004BC   7002         JNZ     ??zclProcessMessageMSG_35
   \   0004BE   A3           INC     DPTR
   \   0004BF   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_35:
   \   0004C0   7062         JNZ     ??zclProcessMessageMSG_1
   \   0004C2   7404         MOV     A,#0x4
   \   0004C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C7   E0           MOVX    A,@DPTR
   \   0004C8   5410         ANL     A,#0x10
   \   0004CA   7058         JNZ     ??zclProcessMessageMSG_1
   1241            {
   1242              // Send a Default Response command back
   1243              defautlRspCmd.statusCode = status;
   \   0004CC   7401         MOV     A,#0x1
   \   0004CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0004D1   EA           MOV     A,R2
   \   0004D2   F0           MOVX    @DPTR,A
   1244              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0004D3   7409         MOV     A,#0x9
   \   0004D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0004D8   12....       LCALL   ?Subroutine52 & 0xFFFF
   1245              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1246                                     inMsg.msg->clusterId, &defautlRspCmd, 
   1247                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1248                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   1249            }
   \                     ??CrossCallReturnLabel_68:
   \   0004DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0004DE   E0           MOVX    A,@DPTR
   \   0004DF   F5..         MOV     ?V0 + 0,A
   \   0004E1   78..         MOV     R0,#?V0 + 0
   \   0004E3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004E6   7407         MOV     A,#0x7
   \   0004E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EB   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0004EE   75..01       MOV     ?V0 + 0,#0x1
   \   0004F1   78..         MOV     R0,#?V0 + 0
   \   0004F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004F6   78..         MOV     R0,#?V0 + 0
   \   0004F8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004FB   7405         MOV     A,#0x5
   \   0004FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000500   8582..       MOV     ?V0 + 0,DPL
   \   000503   8583..       MOV     ?V0 + 1,DPH
   \   000506   78..         MOV     R0,#?V0 + 0
   \   000508   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00050B   7409         MOV     A,#0x9
   \   00050D   12....       LCALL   ?XSTACK_DISP0_8
   \   000510   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000513   7409         MOV     A,#0x9
   \   000515   12....       LCALL   ?XSTACK_DISP0_8
   \   000518   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00051B   12....       LCALL   ?XSTACK_DISP0_8
   \   00051E   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000521   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zclProcessMessageMSG_1:
   \   000524   7437         MOV     A,#0x37
   \   000526   12....       LCALL   ?DEALLOC_XSTACK8
   \   000529                REQUIRE ?Subroutine122
   \   000529                ; // Fall through to label ?Subroutine122
   1250          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   24..         ADD     A,#(zclCmdTable & 0xff)
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   34..         ADDC    A,#((zclCmdTable >> 8) & 0xff)
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(`?<Constant ",">` & 0xff)
   \   00000B   7B..         MOV     R3,#((`?<Constant ",">` >> 8) & 0xff)
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   74FF         MOV     A,#-0x1
   \   000005   6A           XRL     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   75..00       MOV     ?V0 + 1,#0x0
   \   000006   7402         MOV     A,#0x2
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008   7408         MOV     A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   7409         MOV     A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2415         ADD     A,#0x15
   \   000003   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??zclSetSecurityOption?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2414         ADD     A,#0x14
   \   000003   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??zcl_SendDefaultRspCmd?relay
   \   00000A   7407         MOV     A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E4           CLR     A
   \   000001   93           MOVC    A,@A+DPTR
   \   000002   F8           MOV     R0,A
   \   000003   7401         MOV     A,#0x1
   \   000005   93           MOVC    A,@A+DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003                REQUIRE ??Subroutine131_0
   \   000003                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine132_0
   \   000002                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine133_0
   \   000002                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine134_0
   \   000003                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine137_0
   \   000006                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine147_0
   \   000001                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8A82         MOV     DPL,R2
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004                ; Setup parameters for call to function afFindEndPointDesc
   \   000004                ; Setup parameters for call to function zclGetAttrDataLength
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   FB           MOV     R3,A
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   85..83       MOV     DPH,?V0 + 3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1251          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1252          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   1253          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1254            // Clear the header
   1255            osal_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV     R4,#0x6
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??osal_memset?relay
   1256          
   1257            // Parse the Frame Control
   1258            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   54FC         ANL     A,#0xfc
   \   00001F   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7403         MOV     A,#0x3
   \   000026   5A           ANL     A,R2
   \   000027   48           ORL     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   1259            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_252:
   \   000032   74FB         MOV     A,#-0x5
   \   000034   58           ANL     A,R0
   \   000035   FA           MOV     R2,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00003D   E4           CLR     A
   \   00003E   92E0         MOV     0xE0 /* A   */.0,C
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   75..00       MOV     ?V0 + 3,#0x0
   \   000045   7402         MOV     A,#0x2
   \   000047   78..         MOV     R0,#?V0 + 2
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   7404         MOV     A,#0x4
   \   00004E   55..         ANL     A,?V0 + 2
   \   000050   4A           ORL     A,R2
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   1260            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_17:
   \   00005A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00005C   85..82       MOV     DPL,?V0 + 0
   \   00005F   85..83       MOV     DPH,?V0 + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5004         JNC     ??zclParseHdr_0
   1261              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000065   4408         ORL     A,#0x8
   \   000067   8002         SJMP    ??zclParseHdr_1
   1262            else
   1263              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_0:
   \   000069   54F7         ANL     A,#0xf7
   \                     ??zclParseHdr_1:
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F0           MOVX    @DPTR,A
   1264            
   1265            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \   00006F   85..82       MOV     DPL,?V0 + 0
   \   000072   85..83       MOV     DPH,?V0 + 1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   54EF         ANL     A,#0xef
   \   000078   FA           MOV     R2,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FB           MOV     R3,A
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   A2E4         MOV     C,0xE0 /* A   */.4
   \   000083   E4           CLR     A
   \   000084   92E0         MOV     0xE0 /* A   */.0,C
   \   000086   F5..         MOV     ?V0 + 2,A
   \   000088   7404         MOV     A,#0x4
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?S_SHL
   \   00008F   7410         MOV     A,#0x10
   \   000091   55..         ANL     A,?V0 + 2
   \   000093   4A           ORL     A,R2
   \   000094   F8           MOV     R0,A
   \   000095   EB           MOV     A,R3
   \   000096   F9           MOV     R1,A
   \   000097   85..82       MOV     DPL,?V0 + 0
   \   00009A   85..83       MOV     DPH,?V0 + 1
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   1266            pData++;  // move past the frame control field
   1267          
   1268            // parse the manfacturer code
   1269            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_227:
   \   0000A4   E8           MOV     A,R0
   \   0000A5   5404         ANL     A,#0x4
   \   0000A7   6013         JZ      ??CrossCallReturnLabel_10
   1270            {
   1271              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A9   12....       LCALL   ?Subroutine103 & 0xFFFF
   1272              pData += 2;
   1273            }
   \                     ??CrossCallReturnLabel_289:
   \   0000AC   F9           MOV     R1,A
   \   0000AD   EA           MOV     A,R2
   \   0000AE   85..82       MOV     DPL,?V0 + 0
   \   0000B1   85..83       MOV     DPH,?V0 + 1
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E9           MOV     A,R1
   \   0000B9   12....       LCALL   ?Subroutine9 & 0xFFFF
   1274          
   1275            // parse the Transaction Sequence Number
   1276            hdr->transSeqNum = *pData++;
   \                     ??CrossCallReturnLabel_10:
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   85..83       MOV     DPH,?V0 + 1
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   12....       LCALL   ?Subroutine5 & 0xFFFF
   1277          
   1278            // parse the Cluster's command ID
   1279            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_8:
   \   0000CD   85..82       MOV     DPL,?V0 + 0
   \   0000D0   85..83       MOV     DPH,?V0 + 1
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   12....       LCALL   ??Subroutine142_0 & 0xFFFF
   1280          
   1281            // Should point to the frame payload
   1282            return ( pData );
   \                     ??CrossCallReturnLabel_233:
   \   0000DB   AA82         MOV     R2,DPL
   \   0000DD   AB83         MOV     R3,DPH
   \   0000DF                REQUIRE ?Subroutine110
   \   0000DF                ; // Fall through to label ?Subroutine110
   1283          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   02....       LJMP    ?Subroutine115 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   02....       LJMP    ?Subroutine118 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ?Subroutine118 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1284          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   1286          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1287            // Build the Frame Control byte
   1288            *pData = hdr->fc.type;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   5403         ANL     A,#0x3
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   1289            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_185:
   \   000013   5404         ANL     A,#0x4
   \   000015   12....       LCALL   ?Subroutine16 & 0xFFFF
   1290            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_183:
   \   000018   5408         ANL     A,#0x8
   \   00001A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1291            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_184:
   \   00001D   5410         ANL     A,#0x10
   \   00001F   FE           MOV     R6,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   4E           ORL     A,R6
   \   000026   12....       LCALL   ?Subroutine8 & 0xFFFF
   1292            pData++;  // move past the frame control field
   1293          
   1294            // Add the manfacturer code
   1295            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_245:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5404         ANL     A,#0x4
   \   00002C   6013         JZ      ??CrossCallReturnLabel_72
   1296            {
   1297              *pData++ = LO_UINT16( hdr->manuCode );
   \   00002E   EA           MOV     A,R2
   \   00002F   2402         ADD     A,#0x2
   \   000031   F8           MOV     R0,A
   \   000032   EB           MOV     A,R3
   \   000033   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000036   12....       LCALL   ?Subroutine54 & 0xFFFF
   1298              *pData++ = HI_UINT16( hdr->manuCode );
   \                     ??CrossCallReturnLabel_71:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine54 & 0xFFFF
   1299            }
   1300          
   1301            // Add the Transaction Sequence Number
   1302            *pData++ = hdr->transSeqNum;
   \                     ??CrossCallReturnLabel_72:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   12....       LCALL   ?Subroutine8 & 0xFFFF
   1303            
   1304            // Add the Cluster's command ID
   1305            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_246:
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   8C82         MOV     DPL,R4
   \   000059   8D83         MOV     DPH,R5
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   1306          
   1307            // Should point to the frame payload
   1308            return ( pData );
   \   00005D   AA82         MOV     R2,DPL
   \   00005F   AB83         MOV     R3,DPH
   \   000061   7F01         MOV     R7,#0x1
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
   1309          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0C           INC     R4
   \   000008   AD83         MOV     R5,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   FE           MOV     R6,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   E0           MOVX    A,@DPTR
   \   000006   4E           ORL     A,R6
   \   000007                REQUIRE ??Subroutine130_0
   \   000007                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AC82         MOV     R4,DPL
   \   000004   AD83         MOV     R5,DPH
   \   000006                REQUIRE ?Subroutine117
   \   000006                ; // Fall through to label ?Subroutine117

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   22           RET
   1310          
   1311          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   1312          {
   1313            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   1314          
   1315            // Add the manfacturer code
   1316            if ( hdr->fc.manuSpecific )
   1317              needed += 2;
   1318          
   1319            return ( needed );
   1320          }
   1321          
   1322          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   1323          {
   1324            zclLibPlugin_t *pLoop;
   1325            
   1326            (void)profileID;  // Intentionally unreferenced parameter
   1327          
   1328            if ( clusterID != ZCL_INVALID_CLUSTER_ID )
   1329            {
   1330              pLoop = plugins;
   1331              while ( pLoop != NULL )
   1332              {
   1333                if ( clusterID >= pLoop->startClusterID && clusterID <= pLoop->endClusterID )
   1334                  return ( pLoop );
   1335                pLoop = pLoop->next;
   1336              }
   1337            }
   1338            return ( (zclLibPlugin_t *)NULL );
   1339          }
   1340          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1341          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   1342          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   1343            uint8 x;
   1344            zclAttrRecsList *pLoop;
   1345          
   1346            pLoop = attrList;
   \                     ??CrossCallReturnLabel_189:
   \   000017   90....       MOV     DPTR,#attrList
   \   00001A   8004         SJMP    ??zclFindAttrRec_0
   1347          
   1348            while ( pLoop != NULL )
   1349            {
   1350              if ( pLoop->endpoint == endpoint )
   1351              {
   1352                for ( x = 0; x < pLoop->numAttributes; x++ )
   1353                {
   1354                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId == attrId )
   1355                  {
   1356                    *pAttr = pLoop->attrs[x];
   1357                    return ( TRUE ); // EMBEDDED RETURN
   1358                  }
   1359                }
   1360              }
   1361              pLoop = pLoop->next;
   \                     ??zclFindAttrRec_1:
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \                     ??zclFindAttrRec_0:
   \   000020   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000023   7001         JNZ     ??zclFindAttrRec_2
   \   000025   EB           MOV     A,R3
   \                     ??zclFindAttrRec_2:
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??zclFindAttrRec_3 & 0xFFFF
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   65..         XRL     A,?V0 + 2
   \   000034   70E6         JNZ     ??zclFindAttrRec_1
   \   000036   75..00       MOV     ?V0 + 3,#0x0
   \   000039   EA           MOV     A,R2
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V0 + 4,R0
   \   000043   89..         MOV     ?V0 + 5,R1
   \   000045   8002         SJMP    ??zclFindAttrRec_4
   \                     ??zclFindAttrRec_5:
   \   000047   05..         INC     ?V0 + 3
   \                     ??zclFindAttrRec_4:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   C3           CLR     C
   \   000055   98           SUBB    A,R0
   \   000056   50C4         JNC     ??zclFindAttrRec_1
   \   000058   85....       MOV     ?V0 + 8,?V0 + 3
   \   00005B   75..00       MOV     ?V0 + 9,#0x0
   \   00005E   7403         MOV     A,#0x3
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?S_SHL
   \   000065   85....       MOV     ?V0 + 6,?V0 + 8
   \   000068   85....       MOV     ?V0 + 7,?V0 + 9
   \   00006B   85..82       MOV     DPL,?V0 + 4
   \   00006E   85..83       MOV     DPH,?V0 + 5
   \   000071   E0           MOVX    A,@DPTR
   \   000072   25..         ADD     A,?V0 + 6
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   35..         ADDC    A,?V0 + 7
   \   000079   F9           MOV     R1,A
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000081   EE           MOV     A,R6
   \   000082   68           XRL     A,R0
   \   000083   7002         JNZ     ??zclFindAttrRec_6
   \   000085   EF           MOV     A,R7
   \   000086   69           XRL     A,R1
   \                     ??zclFindAttrRec_6:
   \   000087   70BE         JNZ     ??zclFindAttrRec_5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00008E   E5..         MOV     A,?V0 + 0
   \   000090   68           XRL     A,R0
   \   000091   7003         JNZ     ??zclFindAttrRec_7
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   69           XRL     A,R1
   \                     ??zclFindAttrRec_7:
   \   000096   70AF         JNZ     ??zclFindAttrRec_5
   \   000098   85..82       MOV     DPL,?V0 + 4
   \   00009B   85..83       MOV     DPH,?V0 + 5
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   25..         ADD     A,?V0 + 6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   35..         ADDC    A,?V0 + 7
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   F583         MOV     DPH,A
   \   0000AA   7408         MOV     A,#0x8
   \   0000AC   12....       LCALL   ?MOVE_LONG8_XDATA_CODE
   \   0000AF   7901         MOV     R1,#0x1
   \   0000B1   8002         SJMP    ??zclFindAttrRec_8
   1362            }
   1363          
   1364            return ( FALSE );
   \                     ??zclFindAttrRec_3:
   \   0000B3   7900         MOV     R1,#0x0
   \                     ??zclFindAttrRec_8:
   \   0000B5   7F0A         MOV     R7,#0xa
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA
   1365          }
   1366          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1367          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   1368          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   1369            uint8 x;
   1370            zclClusterOptionList *pLoop;
   1371          
   1372            pLoop = clusterOptionList;
   \   000007   90....       MOV     DPTR,#clusterOptionList
   \   00000A   8004         SJMP    ??zclFindClusterOption_0
   1373          
   1374            while ( pLoop != NULL )
   1375            {
   1376              if ( pLoop->endpoint == endpoint )
   1377              {
   1378                for ( x = 0; x < pLoop->numOptions; x++ )
   1379                {
   1380                  if ( pLoop->options[x].clusterID == clusterID )
   1381                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   1382                }
   1383              }
   1384              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000010   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000013   7001         JNZ     ??zclFindClusterOption_2
   \   000015   E9           MOV     A,R1
   \                     ??zclFindClusterOption_2:
   \   000016   605F         JZ      ??zclFindClusterOption_3
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   65..         XRL     A,?V0 + 0
   \   000021   70E9         JNZ     ??zclFindClusterOption_1
   \   000023   75..00       MOV     ?V0 + 2,#0x0
   \   000026   E8           MOV     A,R0
   \   000027   2404         ADD     A,#0x4
   \   000029   FC           MOV     R4,A
   \   00002A   E9           MOV     A,R1
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   FD           MOV     R5,A
   \   00002E   EC           MOV     A,R4
   \   00002F   FE           MOV     R6,A
   \   000030   ED           MOV     A,R5
   \   000031   FF           MOV     R7,A
   \   000032   8002         SJMP    ??zclFindClusterOption_4
   \                     ??zclFindClusterOption_5:
   \   000034   05..         INC     ?V0 + 2
   \                     ??zclFindClusterOption_4:
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   E5..         MOV     A,?V0 + 2
   \   000041   C3           CLR     C
   \   000042   9C           SUBB    A,R4
   \   000043   50C7         JNC     ??zclFindClusterOption_1
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   75F003       MOV     B,#0x3
   \   00004A   A4           MUL     AB
   \   00004B   FC           MOV     R4,A
   \   00004C   85F0..       MOV     ?V0 + 1,B
   \   00004F   AD..         MOV     R5,?V0 + 1
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2C           ADD     A,R4
   \   000057   F5..         MOV     ?V0 + 1,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   3D           ADDC    A,R5
   \   00005C   85..82       MOV     DPL,?V0 + 1
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6A           XRL     A,R2
   \   000063   7003         JNZ     ??zclFindClusterOption_6
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6B           XRL     A,R3
   \                     ??zclFindClusterOption_6:
   \   000068   70CA         JNZ     ??zclFindClusterOption_5
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   2C           ADD     A,R4
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   3D           ADDC    A,R5
   \   000074   FB           MOV     R3,A
   \   000075   8004         SJMP    ??zclFindClusterOption_7
   1385            }
   1386          
   1387            return ( NULL );
   \                     ??zclFindClusterOption_3:
   \   000077   7A00         MOV     R2,#0x0
   \   000079   7B00         MOV     R3,#0x0
   \                     ??zclFindClusterOption_7:
   \   00007B                REQUIRE ?Subroutine123
   \   00007B                ; // Fall through to label ?Subroutine123
   1388          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1389          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1390          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   1391          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1392            uint8 option;
   1393            zclOptionRec_t *pOption;
   1394          
   1395             pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL   ??zclFindClusterOption?relay
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   1396            if ( pOption != NULL )
   \   00000C   E582         MOV     A,DPL
   \   00000E   7002         JNZ     ??zclGetClusterOption_0
   \   000010   E583         MOV     A,DPH
   \                     ??zclGetClusterOption_0:
   \   000012   6008         JZ      ??zclGetClusterOption_1
   1397            {
   1398              option = pOption->option;
   1399              if ( !ZG_SECURE_ENABLED )
   1400                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   1401          
   1402              return ( option ); // EMBEDDED RETURN
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   54BF         ANL     A,#0xbf
   \   000019   F9           MOV     R1,A
   \   00001A   8002         SJMP    ??zclGetClusterOption_2
   1403            }
   1404          
   1405            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_1:
   \   00001C   7900         MOV     R1,#0x0
   \                     ??zclGetClusterOption_2:
   \   00001E   80..         SJMP    ?Subroutine119
   1406          }
   1407          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1408          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   1409          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   1410            zclOptionRec_t *pOption;
   1411          
   1412            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL   ??zclFindClusterOption?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
   1413            if ( pOption != NULL )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??zclSetSecurityOption_0
   \   000015   E9           MOV     A,R1
   \                     ??zclSetSecurityOption_0:
   \   000016   6016         JZ      ??zclSetSecurityOption_1
   1414            {
   1415              if ( enable )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   EE           MOV     A,R6
   \   000023   6005         JZ      ??zclSetSecurityOption_2
   1416                pOption->option |= AF_EN_SECURITY;
   \   000025   E0           MOVX    A,@DPTR
   \   000026   D2E6         SETB    0xE0 /* A   */.6
   \   000028   8003         SJMP    ??zclSetSecurityOption_3
   1417              else
   1418                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_2:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C2E6         CLR     0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_3:
   \   00002D   F0           MOVX    @DPTR,A
   1419            }
   1420          }
   \                     ??zclSetSecurityOption_1:
   \   00002E                REQUIRE ?Subroutine119
   \   00002E                ; // Fall through to label ?Subroutine119
   1421          
   1422          #ifdef ZCL_DISCOVER
   1423          
   1424          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID,
   1425                                           uint16 *attrId, zclAttrRec_t *pAttr )
   1426          {
   1427            uint16 x;
   1428            zclAttrRecsList *pLoop;
   1429          
   1430            pLoop = attrList;
   1431          
   1432            while ( pLoop != NULL )
   1433            {
   1434              if ( pLoop->endpoint == endpoint )
   1435              {
   1436                for ( x = 0; x < pLoop->numAttributes; x++ )
   1437                {
   1438                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId >= *attrId )
   1439                  {
   1440                    *pAttr = pLoop->attrs[x];
   1441                    
   1442                    // Update attribute ID
   1443                    *attrId = pAttr->attr.attrId; 
   1444                    return ( TRUE ); // EMBEDDED RETURN
   1445                  }
   1446                }
   1447              }
   1448              pLoop = pLoop->next;
   1449            }
   1450          
   1451            return ( FALSE );
   1452          }
   1453          #endif // ZCL_DISCOVER
   1454          
   1455          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1456          static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   1457          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   1458            uint8 *pStr;
   1459            uint8 len;
   1460          
   1461            switch ( dataType )
   \   00000D   8E..         MOV     ?V0 + 0,R6
   \   00000F   8F..         MOV     ?V0 + 1,R7
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000021   03           DB        3
   \   000022   41           DB        65
   \   000023   42           DB        66
   \   000024   ....         DW        ??zclSerializeData_0
   \   000026   E0           DB        224
   \   000027   E2           DB        226
   \   000028   ....         DW        ??zclSerializeData_1
   \   00002A   E8           DB        232
   \   00002B   E9           DB        233
   \   00002C   ....         DW        ??zclSerializeData_2
   \   00002E   19           DB        25
   \   00002F   08           DB        8
   \   000030   ....         DW        ??zclSerializeData_3
   \   000032   09           DB        9
   \   000033   ....         DW        ??zclSerializeData_2
   \   000035   0A           DB        10
   \   000036   ....         DW        ??zclSerializeData_4
   \   000038   0B           DB        11
   \   000039   ....         DW        ??zclSerializeData_1
   \   00003B   10           DB        16
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   18           DB        24
   \   00003F   ....         DW        ??zclSerializeData_3
   \   000041   19           DB        25
   \   000042   ....         DW        ??zclSerializeData_2
   \   000044   1A           DB        26
   \   000045   ....         DW        ??zclSerializeData_4
   \   000047   1B           DB        27
   \   000048   ....         DW        ??zclSerializeData_1
   \   00004A   20           DB        32
   \   00004B   ....         DW        ??zclSerializeData_3
   \   00004D   21           DB        33
   \   00004E   ....         DW        ??zclSerializeData_2
   \   000050   22           DB        34
   \   000051   ....         DW        ??zclSerializeData_4
   \   000053   23           DB        35
   \   000054   ....         DW        ??zclSerializeData_1
   \   000056   24           DB        36
   \   000057   ....         DW        ??zclSerializeData_5
   \   000059   25           DB        37
   \   00005A   ....         DW        ??zclSerializeData_6
   \   00005C   28           DB        40
   \   00005D   ....         DW        ??zclSerializeData_3
   \   00005F   29           DB        41
   \   000060   ....         DW        ??zclSerializeData_2
   \   000062   2A           DB        42
   \   000063   ....         DW        ??zclSerializeData_4
   \   000065   2B           DB        43
   \   000066   ....         DW        ??zclSerializeData_1
   \   000068   30           DB        48
   \   000069   ....         DW        ??zclSerializeData_3
   \   00006B   31           DB        49
   \   00006C   ....         DW        ??zclSerializeData_2
   \   00006E   38           DB        56
   \   00006F   ....         DW        ??zclSerializeData_2
   \   000071   39           DB        57
   \   000072   ....         DW        ??zclSerializeData_1
   \   000074   EA           DB        234
   \   000075   ....         DW        ??zclSerializeData_1
   \   000077   F0           DB        240
   \   000078   ....         DW        ??zclSerializeData_7
   \   00007A   ....         DW        ??zclSerializeData_8
   1462            {
   1463              case ZCL_DATATYPE_DATA8:
   1464              case ZCL_DATATYPE_BOOLEAN:
   1465              case ZCL_DATATYPE_BITMAP8:
   1466              case ZCL_DATATYPE_INT8:
   1467              case ZCL_DATATYPE_UINT8:
   1468              case ZCL_DATATYPE_ENUM8:
   1469                *buf = *((uint8 *)attrData);
   \                     ??zclSerializeData_3:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \                     ??zclSerializeData_9:
   \   000080   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   02....       LJMP    ??zclSerializeData_8 & 0xFFFF
   1470                 break;
   1471          
   1472              case ZCL_DATATYPE_DATA16:
   1473              case ZCL_DATATYPE_BITMAP16:
   1474              case ZCL_DATATYPE_UINT16:
   1475              case ZCL_DATATYPE_INT16: 
   1476              case ZCL_DATATYPE_ENUM16:
   1477              case ZCL_DATATYPE_SEMI_PREC:
   1478              case ZCL_DATATYPE_CLUSTER_ID:
   1479              case ZCL_DATATYPE_ATTR_ID:
   1480                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_2:
   \   000087   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00008A   12....       LCALL   ?Subroutine15 & 0xFFFF
   1481                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_240:
   \   00008D   A3           INC     DPTR
   \   00008E   80F0         SJMP    ??zclSerializeData_9
   1482                break;
   1483          
   1484              case ZCL_DATATYPE_DATA24:
   1485              case ZCL_DATATYPE_BITMAP24: 
   1486              case ZCL_DATATYPE_UINT24:
   1487              case ZCL_DATATYPE_INT24:
   1488                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_4:
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   12....       LCALL   ?Subroutine15 & 0xFFFF
   1489                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_241:
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   0A           INC     R2
   \   0000B0   AB83         MOV     R3,DPH
   1490                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?L_MOV_X
   \   0000BB   7410         MOV     A,#0x10
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?UL_SHR
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   E5..         MOV     A,?V0 + 0
   \   0000C8   80B9         SJMP    ??CrossCallReturnLabel_247
   1491                break;
   1492                
   1493              case ZCL_DATATYPE_DATA32:
   1494              case ZCL_DATATYPE_BITMAP32:
   1495              case ZCL_DATATYPE_UINT32:
   1496              case ZCL_DATATYPE_INT32:
   1497              case ZCL_DATATYPE_SINGLE_PREC:
   1498              case ZCL_DATATYPE_TOD:
   1499              case ZCL_DATATYPE_DATE:
   1500              case ZCL_DATATYPE_UTC:
   1501              case ZCL_DATATYPE_BAC_OID:
   1502                buf = osal_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_1:
   \   0000CA                ; Setup parameters for call to function osal_buffer_uint32
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D1   12....       LCALL   ??osal_buffer_uint32?relay
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   8043         SJMP    ??zclSerializeData_8
   1503                break;
   1504                
   1505              case ZCL_DATATYPE_UINT40:
   1506                pStr = (uint8*)attrData;
   1507                osal_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_5:
   \   0000DB                ; Setup parameters for call to function osal_memcpy
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E0   7C05         MOV     R4,#0x5
   \   0000E2   8032         SJMP    ??zclSerializeData_10
   1508                break;
   1509                
   1510              case ZCL_DATATYPE_UINT48:
   1511                pStr = (uint8*)attrData;
   1512                osal_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_6:
   \   0000E4                ; Setup parameters for call to function osal_memcpy
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E9   7C06         MOV     R4,#0x6
   \   0000EB   8029         SJMP    ??zclSerializeData_10
   1513                break;
   1514                
   1515              case ZCL_DATATYPE_IEEE_ADDR:
   1516                pStr = (uint8*)attrData;
   1517                osal_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_7:
   \   0000ED                ; Setup parameters for call to function osal_memcpy
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C08         MOV     R4,#0x8
   \   0000F4   8020         SJMP    ??zclSerializeData_10
   1518                break;
   1519                
   1520              case ZCL_DATATYPE_CHAR_STR:
   1521              case ZCL_DATATYPE_OCTET_STR:
   1522                pStr = (uint8*)attrData;
   1523                len = *pStr++;
   \                     ??zclSerializeData_0:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F5..         MOV     ?V0 + 3,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   AE82         MOV     R6,DPL
   \   000100   AF83         MOV     R7,DPH
   1524                *buf++ = len;
   \   000102   8A82         MOV     DPL,R2
   \   000104   8B83         MOV     DPH,R3
   \   000106   F0           MOVX    @DPTR,A
   \   000107   EC           MOV     A,R4
   \   000108   FA           MOV     R2,A
   \   000109   ED           MOV     A,R5
   \   00010A   FB           MOV     R3,A
   1525                osal_memcpy( buf, pStr, len );
   \   00010B                ; Setup parameters for call to function osal_memcpy
   \   00010B   8E..         MOV     ?V0 + 0,R6
   \   00010D   8F..         MOV     ?V0 + 1,R7
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000114   AC..         MOV     R4,?V0 + 3
   \                     ??zclSerializeData_10:
   \   000116   7D00         MOV     R5,#0x0
   1526                break;
   1527                
   1528              case ZCL_DATATYPE_NO_DATA:
   1529              case ZCL_DATATYPE_UNKNOWN:
   1530                // Fall through
   1531          
   1532              default:
   1533                break;
   1534            }
   \   000118   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   1535          }
   \                     ??zclSerializeData_8:
   \   00011E   02....       LJMP    ?Subroutine110 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   FA           MOV     R2,A
   \   000003   ED           MOV     A,R5
   \   000004   FB           MOV     R3,A
   \   000005                REQUIRE ?Subroutine118
   \   000005                ; // Fall through to label ?Subroutine118

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine145_0
   \   000004                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   02....       LJMP    ?Subroutine117 & 0xFFFF
   1536          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
   1537          
   1538          #ifdef ZCL_REPORT
   1539          uint8 zclAnalogDataType( uint8 dataType )
   1540          {
   1541            uint8 analog;
   1542            
   1543            switch ( dataType )
   1544            {
   1545              case ZCL_DATATYPE_UINT8:
   1546              case ZCL_DATATYPE_UINT16:
   1547              case ZCL_DATATYPE_UINT24:
   1548              case ZCL_DATATYPE_UINT32:
   1549              case ZCL_DATATYPE_UINT40:
   1550              case ZCL_DATATYPE_UINT48:
   1551              case ZCL_DATATYPE_INT8:
   1552              case ZCL_DATATYPE_INT16:
   1553              case ZCL_DATATYPE_INT24:
   1554              case ZCL_DATATYPE_INT32:
   1555              case ZCL_DATATYPE_SEMI_PREC:
   1556              case ZCL_DATATYPE_SINGLE_PREC:
   1557              case ZCL_DATATYPE_DOUBLE_PREC:
   1558              case ZCL_DATATYPE_TOD:
   1559              case ZCL_DATATYPE_DATE:
   1560              case ZCL_DATATYPE_UTC:
   1561                analog = TRUE;
   1562                break;
   1563                
   1564              default:
   1565                analog = FALSE;
   1566                break;
   1567            }
   1568            return ( analog );
   1569          }
   1570          
   1571          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf)
   1572          {
   1573            switch ( dataType )
   1574            {
   1575              case ZCL_DATATYPE_UINT8:
   1576              case ZCL_DATATYPE_INT8:
   1577                *pData = *pBuf;
   1578                break;
   1579          
   1580              case ZCL_DATATYPE_UINT16:
   1581              case ZCL_DATATYPE_INT16:
   1582              case ZCL_DATATYPE_SEMI_PREC:
   1583                *((uint16*)pData) = BUILD_UINT16( pBuf[0], pBuf[1] ); 
   1584                break;
   1585           
   1586              case ZCL_DATATYPE_UINT24:
   1587              case ZCL_DATATYPE_INT24:
   1588                *((uint32*)pData) = osal_build_uint32( pBuf, 3 );
   1589                break;
   1590                
   1591              case ZCL_DATATYPE_UINT32:
   1592              case ZCL_DATATYPE_INT32:
   1593              case ZCL_DATATYPE_SINGLE_PREC:
   1594              case ZCL_DATATYPE_TOD:
   1595              case ZCL_DATATYPE_DATE:
   1596              case ZCL_DATATYPE_UTC:
   1597                *((uint32*)pData) = osal_build_uint32( pBuf, 4 );
   1598                break;
   1599                
   1600              case ZCL_DATATYPE_DOUBLE_PREC:
   1601                *pData = 0;
   1602                break;
   1603           
   1604              default:
   1605                break;
   1606            }
   1607          }
   1608          #endif // ZCL_REPORT
   1609          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1610          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   1611          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1612            uint8 len;
   1613            
   1614            switch ( dataType )
   \   000004   E9           MOV     A,R1
   \   000005   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclGetDataTypeLength>_0`:
   \   000008   02           DB        2
   \   000009   E0           DB        224
   \   00000A   E2           DB        226
   \   00000B   ....         DW        ??zclGetDataTypeLength_0
   \   00000D   E8           DB        232
   \   00000E   E9           DB        233
   \   00000F   ....         DW        ??zclGetDataTypeLength_1
   \   000011   1A           DB        26
   \   000012   08           DB        8
   \   000013   ....         DW        ??zclGetDataTypeLength_2
   \   000015   09           DB        9
   \   000016   ....         DW        ??zclGetDataTypeLength_1
   \   000018   0A           DB        10
   \   000019   ....         DW        ??zclGetDataTypeLength_3
   \   00001B   0B           DB        11
   \   00001C   ....         DW        ??zclGetDataTypeLength_0
   \   00001E   10           DB        16
   \   00001F   ....         DW        ??zclGetDataTypeLength_2
   \   000021   18           DB        24
   \   000022   ....         DW        ??zclGetDataTypeLength_2
   \   000024   19           DB        25
   \   000025   ....         DW        ??zclGetDataTypeLength_1
   \   000027   1A           DB        26
   \   000028   ....         DW        ??zclGetDataTypeLength_3
   \   00002A   1B           DB        27
   \   00002B   ....         DW        ??zclGetDataTypeLength_0
   \   00002D   20           DB        32
   \   00002E   ....         DW        ??zclGetDataTypeLength_2
   \   000030   21           DB        33
   \   000031   ....         DW        ??zclGetDataTypeLength_1
   \   000033   22           DB        34
   \   000034   ....         DW        ??zclGetDataTypeLength_3
   \   000036   23           DB        35
   \   000037   ....         DW        ??zclGetDataTypeLength_0
   \   000039   24           DB        36
   \   00003A   ....         DW        ??zclGetDataTypeLength_4
   \   00003C   25           DB        37
   \   00003D   ....         DW        ??zclGetDataTypeLength_5
   \   00003F   28           DB        40
   \   000040   ....         DW        ??zclGetDataTypeLength_2
   \   000042   29           DB        41
   \   000043   ....         DW        ??zclGetDataTypeLength_1
   \   000045   2A           DB        42
   \   000046   ....         DW        ??zclGetDataTypeLength_3
   \   000048   2B           DB        43
   \   000049   ....         DW        ??zclGetDataTypeLength_0
   \   00004B   30           DB        48
   \   00004C   ....         DW        ??zclGetDataTypeLength_2
   \   00004E   31           DB        49
   \   00004F   ....         DW        ??zclGetDataTypeLength_1
   \   000051   38           DB        56
   \   000052   ....         DW        ??zclGetDataTypeLength_1
   \   000054   39           DB        57
   \   000055   ....         DW        ??zclGetDataTypeLength_0
   \   000057   3A           DB        58
   \   000058   ....         DW        ??zclGetDataTypeLength_6
   \   00005A   EA           DB        234
   \   00005B   ....         DW        ??zclGetDataTypeLength_0
   \   00005D   F0           DB        240
   \   00005E   ....         DW        ??zclGetDataTypeLength_6
   \   000060   ....         DW        ??zclGetDataTypeLength_7
   1615            {
   1616              case ZCL_DATATYPE_DATA8:
   1617              case ZCL_DATATYPE_BOOLEAN:
   1618              case ZCL_DATATYPE_BITMAP8:
   1619              case ZCL_DATATYPE_INT8:
   1620              case ZCL_DATATYPE_UINT8:
   1621              case ZCL_DATATYPE_ENUM8:
   1622                len = 1;
   \                     ??zclGetDataTypeLength_2:
   \   000062   7901         MOV     R1,#0x1
   \   000064   801A         SJMP    ??zclGetDataTypeLength_8
   1623                break;
   1624                
   1625              case ZCL_DATATYPE_DATA16:
   1626              case ZCL_DATATYPE_BITMAP16:
   1627              case ZCL_DATATYPE_UINT16:
   1628              case ZCL_DATATYPE_INT16: 
   1629              case ZCL_DATATYPE_ENUM16:
   1630              case ZCL_DATATYPE_SEMI_PREC:
   1631              case ZCL_DATATYPE_CLUSTER_ID:
   1632              case ZCL_DATATYPE_ATTR_ID:
   1633                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000066   7902         MOV     R1,#0x2
   \   000068   8016         SJMP    ??zclGetDataTypeLength_8
   1634                break;
   1635                
   1636              case ZCL_DATATYPE_DATA24:
   1637              case ZCL_DATATYPE_BITMAP24: 
   1638              case ZCL_DATATYPE_UINT24:
   1639              case ZCL_DATATYPE_INT24:
   1640                len = 3;
   \                     ??zclGetDataTypeLength_3:
   \   00006A   7903         MOV     R1,#0x3
   \   00006C   8012         SJMP    ??zclGetDataTypeLength_8
   1641                break;
   1642                
   1643              case ZCL_DATATYPE_DATA32:
   1644              case ZCL_DATATYPE_BITMAP32:
   1645              case ZCL_DATATYPE_UINT32:
   1646              case ZCL_DATATYPE_INT32:
   1647              case ZCL_DATATYPE_SINGLE_PREC:
   1648              case ZCL_DATATYPE_TOD:
   1649              case ZCL_DATATYPE_DATE:
   1650              case ZCL_DATATYPE_UTC:
   1651              case ZCL_DATATYPE_BAC_OID:
   1652                len = 4;
   \                     ??zclGetDataTypeLength_0:
   \   00006E   7904         MOV     R1,#0x4
   \   000070   800E         SJMP    ??zclGetDataTypeLength_8
   1653                break;                       
   1654                          
   1655             case ZCL_DATATYPE_UINT40:
   1656                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   000072   7905         MOV     R1,#0x5
   \   000074   800A         SJMP    ??zclGetDataTypeLength_8
   1657                 break;
   1658                 
   1659             case ZCL_DATATYPE_UINT48:
   1660                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000076   7906         MOV     R1,#0x6
   \   000078   8006         SJMP    ??zclGetDataTypeLength_8
   1661                 break;
   1662                 
   1663             case ZCL_DATATYPE_DOUBLE_PREC:
   1664             case ZCL_DATATYPE_IEEE_ADDR:
   1665               len = 8;
   \                     ??zclGetDataTypeLength_6:
   \   00007A   7908         MOV     R1,#0x8
   \   00007C   8002         SJMP    ??zclGetDataTypeLength_8
   1666               break;
   1667          
   1668              case ZCL_DATATYPE_NO_DATA:
   1669              case ZCL_DATATYPE_UNKNOWN:
   1670                // Fall through
   1671                
   1672              default:
   1673                len = 0;
   \                     ??zclGetDataTypeLength_7:
   \   00007E   7900         MOV     R1,#0x0
   1674                break;
   1675            }  
   1676            return ( len );
   \                     ??zclGetDataTypeLength_8:
   \   000080   02....       LJMP    ?Subroutine109 & 0xFFFF
   1677          }
   1678          
   1679          /*********************************************************************
   1680           * @fn      zclGetAttrDataLength
   1681           * @brief   Return the length of the attribute.
   1682           * @param   dataType - data type
   1683           *          pData - pointer to data
   1684           * @return  returns atrribute lentgh
   1685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1686          uint8 zclGetAttrDataLength( uint8  dataType, uint8 *pData)
   \                     zclGetAttrDataLength:
   1687          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1688            uint8 dataLen = 0;
   1689            
   1690            if ( dataType  == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \   000004   7442         MOV     A,#0x42
   \   000006   69           XRL     A,R1
   \   000007   6005         JZ      ??zclGetAttrDataLength_0
   \   000009   7441         MOV     A,#0x41
   \   00000B   69           XRL     A,R1
   \   00000C   7009         JNZ     ??zclGetAttrDataLength_1
   1691            {
   1692              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   04           INC     A
   \   000014   F9           MOV     R1,A
   \   000015   8003         SJMP    ??zclGetAttrDataLength_2
   1693            }
   1694            else
   1695            {
   1696              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_1:
   \   000017                ; Setup parameters for call to function zclGetDataTypeLength
   \   000017   12....       LCALL   ??zclGetDataTypeLength?relay
   1697            }
   1698          
   1699            return ( dataLen );
   \                     ??zclGetAttrDataLength_2:
   \   00001A   02....       LJMP    ?Subroutine109 & 0xFFFF
   1700          }
   1701          
   1702          /*********************************************************************
   1703           * @fn      zclReadAttrData
   1704           * @brief   Read the attribute's current value into pAttrData.
   1705           * @param   pAttrData - where to put attribute data
   1706           *          pAttr - pointer to attribute
   1707           * @return Success
   1708           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1709          uint8 zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr )
   \                     zclReadAttrData:
   1710          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1711            uint8 dataLen;
   1712              
   1713            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \   000009   EC           MOV     A,R4
   \   00000A   2406         ADD     A,#0x6
   \   00000C   F8           MOV     R0,A
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015                ; Setup parameters for call to function zclGetAttrDataLength
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   12....       LCALL   ?Subroutine29 & 0xFFFF
   1714            osal_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \                     ??CrossCallReturnLabel_200:
   \   000023                ; Setup parameters for call to function osal_memcpy
   \   000023   85..82       MOV     DPL,?V0 + 0
   \   000026   85..83       MOV     DPH,?V0 + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 1,A
   \   000030   75..00       MOV     ?V0 + 2,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EA           MOV     A,R2
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   1715            return ( ZCL_STATUS_SUCCESS );
   \   000046   7900         MOV     R1,#0x0
   \   000048   02....       LJMP    ?Subroutine123 & 0xFFFF
   1716          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine135_0
   \   000002                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine136_0
   \   000002                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   FA           MOV     R2,A
   \   000004   22           RET
   1717          
   1718          #ifdef ZCL_WRITE
   1719          /*********************************************************************
   1720           * @fn      zclWriteAttrData
   1721           * @brief   Write the received data.
   1722           * @param   pAttr - where to write data to
   1723           *          pWriteRec - data to be written
   1724           * @return  Successful if data was written
   1725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1726          static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   \                     zclWriteAttrData:
   1727          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1728            uint8 len;
   1729          
   1730            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   5058         JNC     ??zclWriteAttrData_0
   1731            {
   1732              if ( zcl_ValidateAttrDataCB && !zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   00001B   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7002         JNZ     ??zclWriteAttrData_1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??zclWriteAttrData_1:
   \   000023   6010         JZ      ??zclWriteAttrData_2
   \   000025                ; Setup parameters for indirect call
   \   000025   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000028   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   E9           MOV     A,R1
   \   00002F   7004         JNZ     ??zclWriteAttrData_2
   1733                return ( ZCL_STATUS_INVALID_VALUE );
   \   000031   7987         MOV     R1,#-0x79
   \   000033   8040         SJMP    ??zclWriteAttrData_3
   1734              
   1735              len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000035   EE           MOV     A,R6
   \   000036   2403         ADD     A,#0x3
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   0E           INC     R6
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   FF           MOV     R7,A
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000046   85..82       MOV     DPL,?V0 + 0
   \   000049   85..83       MOV     DPH,?V0 + 1
   \   00004C   12....       LCALL   ?Subroutine29 & 0xFFFF
   1736              osal_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \                     ??CrossCallReturnLabel_201:
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   EA           MOV     A,R2
   \   00005A   FC           MOV     R4,A
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   1737              return ( ZCL_STATUS_SUCCESS );
   \   00006F   7900         MOV     R1,#0x0
   \   000071   8002         SJMP    ??zclWriteAttrData_3
   1738            }
   1739            return ( ZCL_STATUS_READ_ONLY );
   \                     ??zclWriteAttrData_0:
   \   000073   7988         MOV     R1,#-0x78
   \                     ??zclWriteAttrData_3:
   \   000075   7F07         MOV     R7,#0x7
   \   000077   02....       LJMP    ?BANKED_LEAVE_XDATA
   1740          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   75..00       MOV     ?V0 + 6,#0x0
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   02....       LJMP    ?Subroutine113 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   02....       LJMP    ?Subroutine114 & 0xFFFF
   1741          #endif // ZCL_WRITE
   1742          
   1743          #ifdef ZCL_READ
   1744          /*********************************************************************
   1745           * @fn      zclParseInReadCmd
   1746           * @brief   Parse the "Profile" Read Commands
   1747           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1748           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1749           * @param   pCmd - pointer to incoming data to parse
   1750           * @return  pointer to the parsed command structure
   1751           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1752          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   1753          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1754            zclReadCmd_t *readCmd;
   1755            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00000C   FE           MOV     R6,A
   \   00000D   E9           MOV     A,R1
   \   00000E   FF           MOV     R7,A
   1756            
   1757            readCmd = (zclReadCmd_t *)osal_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \   00000F   12....       LCALL   ?Subroutine32 & 0xFFFF
   1758            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_36:
   \   000012   7001         JNZ     ??zclParseInReadCmd_0
   \   000014   EB           MOV     A,R3
   \                     ??zclParseInReadCmd_0:
   \   000015   6049         JZ      ??zclParseInReadCmd_1
   1759            {
   1760              uint8 i;
   1761              
   1762              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000017   85..82       MOV     DPL,?V0 + 0
   \   00001A   85..83       MOV     DPH,?V0 + 1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C3           CLR     C
   \   000022   13           RRC     A
   \   000023   E8           MOV     A,R0
   \   000024   13           RRC     A
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   F0           MOVX    @DPTR,A
   1763              for ( i = 0; i < readCmd->numAttr; i++ )
   \   00002A   75..00       MOV     ?V0 + 0,#0x0
   \   00002D   8025         SJMP    ??zclParseInReadCmd_2
   1764              {
   1765                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_3:
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   12....       LCALL   ?Subroutine90 & 0xFFFF
   1766                pBuf += 2;
   1767              }
   \                     ??CrossCallReturnLabel_277:
   \   000036   F9           MOV     R1,A
   \   000037   E4           CLR     A
   \   000038   2C           ADD     A,R4
   \   000039   E9           MOV     A,R1
   \   00003A   FD           MOV     R5,A
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   33           RLC     A
   \   00003E   F8           MOV     R0,A
   \   00003F   E4           CLR     A
   \   000040   33           RLC     A
   \   000041   F9           MOV     R1,A
   \   000042   EA           MOV     A,R2
   \   000043   28           ADD     A,R0
   \   000044   F582         MOV     DPL,A
   \   000046   EB           MOV     A,R3
   \   000047   39           ADDC    A,R1
   \   000048   F583         MOV     DPH,A
   \   00004A   A3           INC     DPTR
   \   00004B   EC           MOV     A,R4
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   ED           MOV     A,R5
   \   00004F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000052   05..         INC     ?V0 + 0
   \                     ??zclParseInReadCmd_2:
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FC           MOV     R4,A
   \   00005A   E5..         MOV     A,?V0 + 0
   \   00005C   C3           CLR     C
   \   00005D   9C           SUBB    A,R4
   \   00005E   40CF         JC      ??zclParseInReadCmd_3
   1768            }
   1769            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_1:
   \   000060   02....       LJMP    ?Subroutine110 & 0xFFFF
   1770          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   8582..       MOV     ?V0 + 0,DPL
   \   000008   8583..       MOV     ?V0 + 1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2401         ADD     A,#0x1
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??osal_mem_alloc?relay
   \   000017   EA           MOV     A,R2
   \   000018   22           RET
   1771          
   1772          /*********************************************************************
   1773           * @fn      zclParseInReadRspCmd
   1774           * @brief   Parse the "Profile" Read Response Commands
   1775           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1776           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1777           * @param   pCmd - pointer to incoming data to parse
   1778           * @return  pointer to the parsed command structure
   1779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E9           MOV     A,R1
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   FC           MOV     R4,A
   \   000004   7D00         MOV     R5,#0x0
   \   000006   AA..         MOV     R2,?V0 + 2
   \   000008   AB..         MOV     R3,?V0 + 3
   \   00000A                REQUIRE ?Subroutine113
   \   00000A                ; // Fall through to label ?Subroutine113

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1780          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   1781          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   1782            zclReadRspCmd_t *readRspCmd;
   1783            zclReadRspStatus_t *statusRec;
   1784            uint8 *pBuf = pCmd->pData;
   1785            uint8 *dataPtr;
   1786            uint8 numAttr = 0;
   1787            uint8 hdrLen;
   1788            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_44:
   \   000008   801B         SJMP    ??zclParseInReadRspCmd_0
   1789            uint8 attrDataLen;
   1790            uint8 dataType;
   1791            uint8 status;
   1792            uint8 i;
   1793            
   1794            // find out the number of attributes and the length of attribute data
   1795            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   1796            {
   1797              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   00000A   12....       LCALL   ?Subroutine71 & 0xFFFF
   1798          
   1799              pBuf += 2; // move pass attribute id
   1800              
   1801              status = *pBuf++;  
   \                     ??CrossCallReturnLabel_154:
   \   00000D   A3           INC     DPTR
   \   00000E   AE82         MOV     R6,DPL
   \   000010   AF83         MOV     R7,DPH
   1802              if ( status == ZCL_STATUS_SUCCESS )
   \   000012   7011         JNZ     ??zclParseInReadRspCmd_0
   1803              {
   1804                dataType = *pBuf++;
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   A3           INC     DPTR
   \   000017   0E           INC     R6
   \   000018   12....       LCALL   ?Subroutine67 & 0xFFFF
   1805          
   1806                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   1807                pBuf += attrDataLen; // move pass attribute data
   1808                
   1809                if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_91:
   \   00001B   5002         JNC     ??zclParseInReadRspCmd_2
   1810                  attrDataLen++;
   \   00001D   05..         INC     ?V0 + 8
   1811                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   00001F   E5..         MOV     A,?V0 + 8
   \   000021   25..         ADD     A,?V0 + 6
   \   000023   F5..         MOV     ?V0 + 6,A
   1812              }
   1813            }
   \                     ??zclParseInReadRspCmd_0:
   \   000025   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000028   40E0         JC      ??zclParseInReadRspCmd_1
   1814           
   1815            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) ); // calculate the length of the response header
   \   00002A   75F006       MOV     B,#0x6
   \   00002D   12....       LCALL   ?Subroutine61 & 0xFFFF
   1816            
   1817            readRspCmd = (zclReadRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   1818            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_215:
   \   000030   7001         JNZ     ??zclParseInReadRspCmd_3
   \   000032   EB           MOV     A,R3
   \                     ??zclParseInReadRspCmd_3:
   \   000033   6049         JZ      ??zclParseInReadRspCmd_4
   1819            {
   1820              pBuf = pCmd->pData;
   \   000035   12....       LCALL   ?Subroutine23 & 0xFFFF
   1821              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   1822                  
   1823              readRspCmd->numAttr = numAttr;
   1824              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_26:
   \   000038   803D         SJMP    ??zclParseInReadRspCmd_5
   1825              {
   1826                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   00003A   E5..         MOV     A,?V0 + 9
   \   00003C   75F006       MOV     B,#0x6
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
   1827                
   1828                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   1829                pBuf += 2;
   1830                
   1831                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_152:
   \   000042   12....       LCALL   ?Subroutine6 & 0xFFFF
   1832                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_228:
   \   000045   702E         JNZ     ??CrossCallReturnLabel_93
   1833                {
   1834                  statusRec->dataType = *pBuf++;
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   85..82       MOV     DPL,?V0 + 10
   \   00004C   85..83       MOV     DPH,?V0 + 11
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000055   0E           INC     R6
   \   000056   AF83         MOV     R7,DPH
   1835          
   1836                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   000058                ; Setup parameters for call to function zclGetAttrDataLength
   \   000058   12....       LCALL   ?Subroutine73 & 0xFFFF
   1837                  osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_164:
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   1838                  statusRec->data = dataPtr;
   \   000064   85..82       MOV     DPL,?V0 + 10
   \   000067   85..83       MOV     DPH,?V0 + 11
   \   00006A   A3           INC     DPTR
   \   00006B   12....       LCALL   ?Subroutine4 & 0xFFFF
   1839                  
   1840                  pBuf += attrDataLen; // move pass attribute data
   1841                 
   1842                  if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_6:
   \   00006E   5002         JNC     ??zclParseInReadRspCmd_7
   1843                    attrDataLen++;
   \   000070   05..         INC     ?V0 + 8
   1844                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   000072   12....       LCALL   ?Subroutine68 & 0xFFFF
   1845                }
   1846              }
   \                     ??CrossCallReturnLabel_93:
   \   000075   05..         INC     ?V0 + 9
   \                     ??zclParseInReadRspCmd_5:
   \   000077   E5..         MOV     A,?V0 + 9
   \   000079   C3           CLR     C
   \   00007A   95..         SUBB    A,?V0 + 7
   \   00007C   40BC         JC      ??zclParseInReadRspCmd_6
   1847            }
   1848            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   00007E                REQUIRE ?Subroutine124
   \   00007E                ; // Fall through to label ?Subroutine124
   1849          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   7F0C         MOV     R7,#0xc
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E5..         MOV     A,?V0 + 7
   \   000002   A4           MUL     AB
   \   000003   04           INC     A
   \   000004   FA           MOV     R2,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8582..       MOV     ?V0 + 4,DPL
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   85....       MOV     ?V0 + 0,?V0 + 6
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3400         ADDC    A,#0x0
   \   000015   FB           MOV     R3,A
   \   000016                REQUIRE ??Subroutine139_0
   \   000016                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine140_0
   \   000007                ; // Fall through to label ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   28           ADD     A,R0
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   39           ADDC    A,R1
   \   00000F   F9           MOV     R1,A
   \   000010   C3           CLR     C
   \   000011   EE           MOV     A,R6
   \   000012   98           SUBB    A,R0
   \   000013   EF           MOV     A,R7
   \   000014   99           SUBB    A,R1
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?V0 + 10
   \   000003   85..83       MOV     DPH,?V0 + 11
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine141_0
   \   000008                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000007   E9           MOV     A,R1
   \   000008   F5..         MOV     ?V0 + 8,A
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   8E..         MOV     ?V0 + 4,R6
   \   00000C   8F..         MOV     ?V0 + 5,R7
   \   00000E                REQUIRE ?Subroutine114
   \   00000E                ; // Fall through to label ?Subroutine114

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   05..         INC     ?V0 + 7
   \   000002   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000005                REQUIRE ?Subroutine112
   \   000005                ; // Fall through to label ?Subroutine112

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 8
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   25..         ADD     A,?V0 + 4
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   E5..         MOV     A,?V0 + 3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   AF83         MOV     R7,DPH
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000009   E9           MOV     A,R1
   \   00000A   F5..         MOV     ?V0 + 8,A
   \   00000C   F5..         MOV     ?V0 + 4,A
   \   00000E   EE           MOV     A,R6
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FE           MOV     R6,A
   \   000012   EF           MOV     A,R7
   \   000013   3400         ADDC    A,#0x0
   \   000015   FF           MOV     R7,A
   \   000016   E9           MOV     A,R1
   \   000017   A2E0         MOV     C,0xE0 /* A   */.0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   EA           MOV     A,R2
   \   000005   2403         ADD     A,#0x3
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00000D   FE           MOV     R6,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   \   000011   75..00       MOV     ?V0 + 7,#0x0
   \   000014   75..00       MOV     ?V0 + 6,#0x0
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   EA           MOV     A,R2
   \   00000C   25..         ADD     A,?V0 + 4
   \   00000E   F5..         MOV     ?V0 + 2,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F5..         MOV     ?V0 + 3,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   E5..         MOV     A,?V0 + 7
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   75..00       MOV     ?V0 + 9,#0x0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   25..         ADD     A,?V0 + 4
   \   00000D   FE           MOV     R6,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FF           MOV     R7,A
   \   000012   E5..         MOV     A,?V0 + 8
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 10,DPL
   \   000007   8583..       MOV     ?V0 + 11,DPH
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000011   F9           MOV     R1,A
   \   000012   EA           MOV     A,R2
   \   000013   85..82       MOV     DPL,?V0 + 10
   \   000016   85..83       MOV     DPH,?V0 + 11
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   E9           MOV     A,R1
   \   00001C   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00001F   02....       LJMP    ?Subroutine112 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 0
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 1
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET
   1850          #endif // ZCL_READ
   1851          
   1852          #ifdef ZCL_WRITE
   1853          /*********************************************************************
   1854           * @fn      zclParseInWriteCmd
   1855           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   1856           *          Response Commands
   1857           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1858           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1859           * @param   pCmd - pointer to incoming data to parse
   1860           * @return  pointer to the parsed command structure
   1861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1862          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   1863          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   1864            zclWriteCmd_t *writeCmd;
   1865            zclWriteRec_t *statusRec;
   1866            uint8 *pBuf = pCmd->pData;
   1867            uint8 attrDataLen;
   1868            uint8 *dataPtr;
   1869            uint8 numAttr = 0;
   1870            uint8 hdrLen;
   1871            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_45:
   \   000008   8014         SJMP    ??zclParseInWriteCmd_0
   1872            uint8 dataType;
   1873            uint8 i;
   1874          
   1875            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   1876            {
   1877              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   00000A   12....       LCALL   ?Subroutine71 & 0xFFFF
   1878          
   1879              pBuf += 2; // move pass attribute id
   1880          
   1881              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_155:
   \   00000D   F9           MOV     R1,A
   \   00000E   A3           INC     DPTR
   \   00000F   AE82         MOV     R6,DPL
   \   000011   12....       LCALL   ?Subroutine67 & 0xFFFF
   1882          
   1883              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   1884              pBuf += attrDataLen; // move pass attribute data
   1885              
   1886              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_92:
   \   000014   5002         JNC     ??zclParseInWriteCmd_2
   1887                attrDataLen++;
   \   000016   05..         INC     ?V0 + 8
   1888              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   000018   E5..         MOV     A,?V0 + 8
   \   00001A   25..         ADD     A,?V0 + 6
   \   00001C   F5..         MOV     ?V0 + 6,A
   1889            }
   \                     ??zclParseInWriteCmd_0:
   \   00001E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000021   40E7         JC      ??zclParseInWriteCmd_1
   1890            
   1891            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) ); // calculate the length of the response header
   \   000023   75F005       MOV     B,#0x5
   \   000026   12....       LCALL   ?Subroutine61 & 0xFFFF
   1892            
   1893            writeCmd = (zclWriteCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   1894            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_216:
   \   000029   7001         JNZ     ??zclParseInWriteCmd_3
   \   00002B   EB           MOV     A,R3
   \                     ??zclParseInWriteCmd_3:
   \   00002C   6036         JZ      ??zclParseInWriteCmd_4
   1895            {
   1896              pBuf = pCmd->pData;
   \   00002E   12....       LCALL   ?Subroutine23 & 0xFFFF
   1897              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   1898          
   1899              writeCmd->numAttr = numAttr;
   1900              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_27:
   \   000031   802A         SJMP    ??zclParseInWriteCmd_5
   1901              {
   1902                statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   000033   E5..         MOV     A,?V0 + 9
   \   000035   75F005       MOV     B,#0x5
   \   000038   12....       LCALL   ?Subroutine3 & 0xFFFF
   1903                
   1904                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   1905                pBuf += 2;
   1906                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_153:
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ?Subroutine6 & 0xFFFF
   1907          
   1908                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_229:
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   12....       LCALL   ?Subroutine73 & 0xFFFF
   1909                osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_165:
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000045   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1910                statusRec->attrData = dataPtr;
   \   00004B   85..82       MOV     DPL,?V0 + 10
   \   00004E   85..83       MOV     DPH,?V0 + 11
   \   000051   12....       LCALL   ?Subroutine4 & 0xFFFF
   1911                
   1912                pBuf += attrDataLen; // move pass attribute data
   1913          
   1914                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_7:
   \   000054   5002         JNC     ??zclParseInWriteCmd_7
   1915                  attrDataLen++;
   \   000056   05..         INC     ?V0 + 8
   1916                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   000058   12....       LCALL   ?Subroutine68 & 0xFFFF
   1917              }
   \                     ??CrossCallReturnLabel_94:
   \   00005B   05..         INC     ?V0 + 9
   \                     ??zclParseInWriteCmd_5:
   \   00005D   E5..         MOV     A,?V0 + 9
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V0 + 7
   \   000062   40CF         JC      ??zclParseInWriteCmd_6
   1918            }
   1919            
   1920            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   000064   02....       LJMP    ?Subroutine124 & 0xFFFF
   1921          }
   1922          
   1923          /*********************************************************************
   1924           * @fn      zclParseInWriteRspCmd
   1925           * @brief   Parse the "Profile" Write Response Commands
   1926           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1927           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1928           * @param   pCmd - pointer to incoming data to parse
   1929           * @return  pointer to the parsed command structure
   1930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1931          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   1932          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1933            zclWriteRspCmd_t *writeRspCmd;
   1934            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV     A,R2
   \   000006   2403         ADD     A,#0x3
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00000E   12....       LCALL   ?Subroutine39 & 0xFFFF
   1935            uint8 i = 0;
   \                     ??CrossCallReturnLabel_47:
   \   000011   75..00       MOV     ?V0 + 4,#0x0
   1936          
   1937            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000014   12....       LCALL   ?Subroutine32 & 0xFFFF
   1938            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_37:
   \   000017   7001         JNZ     ??zclParseInWriteRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInWriteRspCmd_0:
   \   00001A   605C         JZ      ??zclParseInWriteRspCmd_1
   1939            {
   1940              if ( pCmd->dataLen == 1 )
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7002         JNZ     ??zclParseInWriteRspCmd_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \                     ??zclParseInWriteRspCmd_2:
   \   000029   703B         JNZ     ??CrossCallReturnLabel_138
   1941              {
   1942                writeRspCmd->attrList[i++].status = *pBuf; // special case when all writes were successfull
   \   00002B   12....       LCALL   ?Subroutine50 & 0xFFFF
   1943              }
   \                     ??CrossCallReturnLabel_251:
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   75..01       MOV     ?V0 + 4,#0x1
   \   000033   803C         SJMP    ??zclParseInWriteRspCmd_3
   1944              else
   1945              {
   1946                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   1947                {
   1948                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000035   E5..         MOV     A,?V0 + 4
   \   000037   75F003       MOV     B,#0x3
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   EA           MOV     A,R2
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EB           MOV     A,R3
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ?Subroutine5 & 0xFFFF
   1949                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_9:
   \   000050   F5..         MOV     ?V0 + 6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FD           MOV     R5,A
   \   000055   E5..         MOV     A,?V0 + 6
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   ED           MOV     A,R5
   \   000060   F0           MOVX    @DPTR,A
   \   000061   05..         INC     ?V0 + 4
   1950                  pBuf += 2;
   \   000063   12....       LCALL   ?Subroutine99 & 0xFFFF
   1951                }
   \                     ??CrossCallReturnLabel_138:
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   1952              }
   \                     ??CrossCallReturnLabel_220:
   \   00006F   40C4         JC      ??zclParseInWriteRspCmd_4
   1953              writeRspCmd->numAttr = i; 
   \                     ??zclParseInWriteRspCmd_3:
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   E5..         MOV     A,?V0 + 4
   \   000077   F0           MOVX    @DPTR,A
   1954            }
   1955            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_1:
   \   000078   02....       LJMP    ?Subroutine122 & 0xFFFF
   1956          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   22           RET
   1957          #endif // ZCL_WRITE
   1958          
   1959          #ifdef ZCL_REPORT
   1960          /*********************************************************************
   1961           * @fn      zclParseInConfigReportCmd
   1962           * @brief   Parse the "Profile" Configure Reporting Command
   1963           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1964           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1965           * @param   pCmd - pointer to incoming data to parse
   1966           * @return  pointer to the parsed command structure
   1967           */
   1968          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   1969          {
   1970            zclCfgReportCmd_t *cfgReportCmd;
   1971            zclCfgReportRec_t *reportRec;
   1972            uint8 *pBuf = pCmd->pData;
   1973            uint8 *dataPtr;
   1974            uint8 numAttr = 0;
   1975            uint8 direction;
   1976            uint8 dataType;
   1977            uint8 hdrLen;
   1978            uint8 dataLen = 0;
   1979            uint8 reportChangeLen; // length of Reportable Change field
   1980            uint8 i;
   1981           
   1982            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // Calculate the length of the Request command
   1983            {
   1984              numAttr++;
   1985              
   1986              direction = *pBuf++;
   1987              pBuf += 2; // move pass the attribute ID
   1988              
   1989              if ( direction == ZCL_SEND_ATTR_REPORTS ) // Is there a Reportable Change field?
   1990              {
   1991                dataType = *pBuf++;
   1992                pBuf += 4; // move pass the Min and Max Reporting Intervals
   1993           
   1994                if ( zclAnalogDataType( dataType ) ) // For attributes of 'discrete' data types this field is omitted
   1995                {
   1996                  reportChangeLen = zclGetDataTypeLength( dataType );
   1997                  pBuf += reportChangeLen;
   1998                  
   1999                  if ( PADDING_NEEDED( reportChangeLen ) ) // add padding if needed
   2000                    reportChangeLen++;
   2001                  dataLen += reportChangeLen;
   2002                }
   2003              }
   2004              else
   2005              {
   2006                pBuf += 2; // move pass the Timeout Period
   2007              }
   2008            } // while loop
   2009          
   2010            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   2011            
   2012            cfgReportCmd = (zclCfgReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2013            if ( cfgReportCmd != NULL )
   2014            { 
   2015              pBuf = pCmd->pData;
   2016              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   2017              
   2018              cfgReportCmd->numAttr = numAttr;
   2019              for ( i = 0; i < numAttr; i++ )
   2020              {
   2021                reportRec = &(cfgReportCmd->attrList[i]);
   2022                
   2023                osal_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   2024                  
   2025                reportRec->direction = *pBuf++;
   2026                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2027                pBuf += 2;
   2028                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   2029                {
   2030                 
   2031                  reportRec->dataType = *pBuf++; // Attribute to be reported
   2032                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2033                  pBuf += 2;
   2034                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2035                  pBuf += 2;
   2036                 
   2037                  if ( zclAnalogDataType( reportRec->dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2038                  {
   2039                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   2040                    reportRec->reportableChange = dataPtr;
   2041                    
   2042                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   2043                    pBuf += reportChangeLen;
   2044                   
   2045                    if ( PADDING_NEEDED( reportChangeLen ) ) // advance attribute data pointer
   2046                      reportChangeLen++;
   2047                    dataPtr += reportChangeLen;
   2048                  }
   2049                }
   2050                else
   2051                {
   2052                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] ); // Attribute reports to be received
   2053                  pBuf += 2;
   2054                }
   2055              } // while loop
   2056            }
   2057            return ( (void *)cfgReportCmd );
   2058          }
   2059          
   2060          /*********************************************************************
   2061           * @fn      zclParseInConfigReportRspCmd
   2062           * @brief   Parse the "Profile" Configure Reporting Response Command
   2063           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2064           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2065           * @param   pCmd - pointer to incoming data to parse
   2066           * @return  pointer to the parsed command structure
   2067           */
   2068          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   2069          {
   2070            zclCfgReportRspCmd_t *cfgReportRspCmd;
   2071            uint8 *pBuf = pCmd->pData;
   2072            uint8 numAttr;
   2073            uint8 i; 
   2074            
   2075            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   2076            
   2077            cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof( zclCfgReportRspCmd_t ) 
   2078                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   2079            if ( cfgReportRspCmd != NULL )
   2080            {
   2081              cfgReportRspCmd->numAttr = numAttr;
   2082              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   2083              {
   2084                cfgReportRspCmd->attrList[i].status = *pBuf++;
   2085                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   2086                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2087                pBuf += 2;
   2088              }
   2089            }
   2090            return ( (void *)cfgReportRspCmd );  
   2091          }
   2092          
   2093          /*********************************************************************
   2094           * @fn      zclParseInReadReportCfgCmd
   2095           * @brief   Parse the "Profile" Read Reporting Configuration Command
   2096           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2097           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2098           * @param   pCmd - pointer to incoming data to parse
   2099           * @return  pointer to the parsed command structure
   2100           */
   2101          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   2102          {
   2103            zclReadReportCfgCmd_t *readReportCfgCmd;
   2104            uint8 *pBuf = pCmd->pData;
   2105            uint8 numAttr;
   2106            uint8 i;
   2107            
   2108            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   2109            
   2110            readReportCfgCmd = (zclReadReportCfgCmd_t *)osal_mem_alloc( sizeof( zclReadReportCfgCmd_t ) 
   2111                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   2112            if ( readReportCfgCmd != NULL )
   2113            {
   2114              readReportCfgCmd->numAttr = numAttr;
   2115              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   2116              {
   2117                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   2118                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2119                pBuf += 2;
   2120              }
   2121            }
   2122            return ( (void *)readReportCfgCmd );
   2123          }
   2124          
   2125          /*********************************************************************
   2126           * @fn      zclParseInReadReportCfgRspCmd
   2127           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   2128           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2129           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2130           * @param   pCmd - pointer to incoming data to parse
   2131           * @return  pointer to the parsed command structure
   2132           */
   2133          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   2134          {
   2135            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   2136            zclReportCfgRspRec_t *reportRspRec;
   2137            uint8 reportChangeLen;
   2138            uint8 *pBuf = pCmd->pData;
   2139            uint8 *dataPtr;
   2140            uint8 numAttr = 0;
   2141            uint8 hdrLen;
   2142            uint8 dataLen = 0;
   2143            uint8 status;
   2144            uint8 direction;
   2145            uint8 dataType;
   2146            uint8 i;
   2147            
   2148            // Calculate the length of the response command
   2149            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2150            { 
   2151              numAttr++;
   2152              
   2153              status = *pBuf++;
   2154              direction = *pBuf++; 
   2155              pBuf += 2; // move pass the attribute ID
   2156              
   2157              if ( status == ZCL_STATUS_SUCCESS )
   2158              {
   2159                if ( direction == ZCL_SEND_ATTR_REPORTS )
   2160                {
   2161                  dataType = *pBuf++;
   2162                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   2163           
   2164                  // For attributes of 'discrete' data types this field is omitted
   2165                  if ( zclAnalogDataType( dataType ) )
   2166                  {
   2167                    reportChangeLen = zclGetDataTypeLength( dataType );
   2168                    pBuf += reportChangeLen;
   2169                    
   2170                    // add padding if needed
   2171                    if ( PADDING_NEEDED( reportChangeLen ) )
   2172                      reportChangeLen++;
   2173                    dataLen += reportChangeLen;
   2174                  }
   2175                }
   2176                else
   2177                {
   2178                  pBuf += 2; // move pass the Timeout field
   2179                }
   2180              }
   2181            } // while loop
   2182            
   2183            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   2184            
   2185            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2186            if ( readReportCfgRspCmd != NULL )
   2187            {
   2188              pBuf = pCmd->pData;
   2189              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   2190              
   2191              readReportCfgRspCmd->numAttr = numAttr;
   2192              for ( i = 0; i < numAttr; i++ )
   2193              {
   2194                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   2195                
   2196                reportRspRec->status = *pBuf++;
   2197                reportRspRec->direction = *pBuf++;
   2198                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2199                pBuf += 2;
   2200           
   2201                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   2202                {
   2203                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   2204                  {
   2205                    reportRspRec->dataType = *pBuf++;
   2206                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2207                    pBuf += 2;
   2208                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2209                    pBuf += 2;
   2210          
   2211                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   2212                    {
   2213                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   2214                      reportRspRec->reportableChange = dataPtr;
   2215                      
   2216                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType ); 
   2217                      pBuf += reportChangeLen;
   2218                      
   2219                      // advance attribute data pointer
   2220                      if ( PADDING_NEEDED( reportChangeLen ) )
   2221                        reportChangeLen++;
   2222                      dataPtr += reportChangeLen;
   2223                    }
   2224                  }
   2225                  else
   2226                  {
   2227                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   2228                    pBuf += 2;
   2229                  }
   2230                }
   2231              } 
   2232            }
   2233            
   2234            return ( (void *)readReportCfgRspCmd );
   2235          }
   2236          
   2237          /*********************************************************************
   2238           * @fn      zclParseInReportCmd
   2239           * @brief   Parse the "Profile" Report Command
   2240           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2241           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2242           * @param   pCmd - pointer to incoming data to parse
   2243           * @return  pointer to the parsed command structure
   2244           */
   2245          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   2246          {
   2247            zclReportCmd_t *reportCmd;
   2248            zclReport_t *reportRec;
   2249            uint8 *pBuf = pCmd->pData;
   2250            uint8 attrDataLen;
   2251            uint8 *dataPtr;
   2252            uint8 numAttr = 0;
   2253            uint8 hdrLen;
   2254            uint8 dataLen = 0;
   2255            uint8 dataType;
   2256            uint8 i;
   2257          
   2258            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   2259            {
   2260              numAttr++;
   2261          
   2262              pBuf += 2; // move pass attribute id
   2263              dataType = *pBuf++;
   2264              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2265              pBuf += attrDataLen; // move pass attribute data
   2266                
   2267              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   2268                attrDataLen++;
   2269              dataLen += attrDataLen;
   2270            }
   2271            
   2272            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   2273            
   2274            reportCmd = (zclReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2275            if (reportCmd != NULL )
   2276            {
   2277              pBuf = pCmd->pData;
   2278              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   2279              
   2280              reportCmd->numAttr = numAttr;
   2281              for ( i = 0; i < numAttr; i++ )
   2282              {
   2283                reportRec = &(reportCmd->attrList[i]);
   2284                
   2285                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2286                pBuf += 2;
   2287                reportRec->dataType = *pBuf++;
   2288          
   2289                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );  
   2290                osal_memcpy( dataPtr, pBuf, attrDataLen );
   2291                reportRec->attrData = dataPtr;
   2292                
   2293                pBuf += attrDataLen; // move pass attribute data
   2294                
   2295                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   2296                  attrDataLen++;
   2297                dataPtr += attrDataLen;
   2298              }
   2299            }
   2300            return ( (void *)reportCmd );
   2301          }
   2302          #endif // ZCL_REPORT
   2303          
   2304          /*********************************************************************
   2305           * @fn      zclParseInDefaultRspCmd
   2306           * @brief   Parse the "Profile" Default Response Command
   2307           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2308           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2309           * @param   pCmd - pointer to incoming data to parse
   2310           * @return  pointer to the parsed command structure
   2311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2312          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   2313          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2314            zclDefaultRspCmd_t *defaultRspCmd;
   2315            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine39 & 0xFFFF
   2316          
   2317            defaultRspCmd = (zclDefaultRspCmd_t *)osal_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_48:
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A02         MOV     R2,#0x2
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_mem_alloc?relay
   2318            if ( defaultRspCmd != NULL )
   \   000016   EA           MOV     A,R2
   \   000017   7001         JNZ     ??zclParseInDefaultRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInDefaultRspCmd_0:
   \   00001A   600D         JZ      ??zclParseInDefaultRspCmd_1
   2319            {
   2320              defaultRspCmd->commandID = *pBuf++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   12....       LCALL   ?Subroutine7 & 0xFFFF
   2321              defaultRspCmd->statusCode = *pBuf;
   \                     ??CrossCallReturnLabel_235:
   \   000024   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   2322            }
   \                     ??CrossCallReturnLabel_248:
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   2323            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_1:
   \   000029   02....       LJMP    ?Subroutine119 & 0xFFFF
   2324          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine142_0
   \   000004                ; // Fall through to label ??Subroutine142_0
   2325          
   2326          #ifdef ZCL_DISCOVER
   2327          /*********************************************************************
   2328           * @fn      zclParseInDiscCmd
   2329           * @brief   Parse the "Profile" Discovery Commands
   2330           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2331           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2332           * @param   pCmd - pointer to incoming data to parse
   2333           * @return  pointer to the parsed command structure
   2334           */
   2335          void *zclParseInDiscCmd( zclParseCmd_t *pCmd )
   2336          {
   2337            zclDiscoverCmd_t *discoverCmd;
   2338            uint8 *pBuf = pCmd->pData;
   2339          
   2340            discoverCmd = (zclDiscoverCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverCmd_t ) );
   2341            if ( discoverCmd != NULL )
   2342            {
   2343              discoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2344              pBuf += 2;
   2345              discoverCmd->maxAttrIDs = *pBuf;
   2346            }
   2347            return ( (void *)discoverCmd );
   2348          }
   2349          
   2350          /*********************************************************************
   2351           * @fn      zclParseInDiscRspCmd
   2352           * @brief   Parse the "Profile" Discovery Response Commands
   2353           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2354           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2355           * @param   pCmd - pointer to incoming data to parse
   2356           * @return  pointer to the parsed command structure
   2357           */
   2358          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   2359          static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd )
   2360          {
   2361            zclDiscoverRspCmd_t *discoverRspCmd;
   2362            uint8 *pBuf = pCmd->pData;
   2363            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   2364            uint8 i;
   2365          
   2366            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverRspCmd_t ) 
   2367                                                           + ( numAttr * sizeof(zclDiscoverInfo_t) ) );
   2368            if ( discoverRspCmd != NULL )
   2369            {
   2370              discoverRspCmd->discComplete = *pBuf++;
   2371              discoverRspCmd->numAttr = numAttr;
   2372              
   2373              for ( i = 0; i < numAttr; i++ )
   2374              {
   2375                discoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2376                pBuf += 2;
   2377                discoverRspCmd->attrList[i].dataType = *pBuf++;;
   2378              }
   2379            }
   2380            return ( (void *)discoverRspCmd );
   2381          }
   2382          #endif // ZCL_DISCOVER
   2383          
   2384          #ifdef ZCL_READ
   2385          /*********************************************************************
   2386           * @fn      zclProcessInReadCmd
   2387           * @brief   Process the "Profile" Read Command
   2388           * @param   pInMsg - incoming message to process
   2389           * @return  TRUE if command processed. FALSE, otherwise.
   2390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2391          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   2392          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   2393            zclReadCmd_t *readCmd;
   2394            zclReadRspCmd_t *readRspCmd;
   2395            zclReadRspStatus_t *statusRec;
   2396            zclAttrRec_t attrRec;
   2397            uint8 len;
   2398            uint8 i;
   2399            
   2400            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
   2401            
   2402            // calculate the length of the response status record
   2403            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   2404            
   2405            readRspCmd = osal_mem_alloc( len );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   75F006       MOV     B,#0x6
   \   00001A   85..82       MOV     DPL,?V0 + 2
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   A4           MUL     AB
   \   000021   04           INC     A
   \   000022   FA           MOV     R2,A
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   2406            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_217:
   \   000028   7001         JNZ     ??zclProcessInReadCmd_0
   \   00002A   EB           MOV     A,R3
   \                     ??zclProcessInReadCmd_0:
   \   00002B   7005         JNZ     ??zclProcessInReadCmd_1
   2407              return FALSE; // EMBEDDED RETURN
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   02....       LJMP    ??zclProcessInReadCmd_2 & 0xFFFF
   2408          
   2409            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_1:
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00003B   F0           MOVX    @DPTR,A
   2410            for (i = 0; i < readCmd->numAttr; i++)
   \   00003C   75..00       MOV     ?V0 + 6,#0x0
   \   00003F   800B         SJMP    ??zclProcessInReadCmd_3
   2411            {
   2412              statusRec = &(readRspCmd->attrList[i]);
   2413              statusRec->attrID = readCmd->attrID[i];
   2414              
   2415              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec ) )
   2416              {
   2417                statusRec->data = attrRec.attr.dataPtr;
   2418                statusRec->status = ZCL_STATUS_SUCCESS;
   2419                statusRec->dataType = attrRec.attr.dataType;
   2420              }
   2421              else
   2422              {
   2423                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_4:
   \   000041   7486         MOV     A,#-0x7a
   \   000043   85..82       MOV     DPL,?V0 + 10
   \   000046   85..83       MOV     DPH,?V0 + 11
   \                     ??zclProcessInReadCmd_5:
   \   000049   F0           MOVX    @DPTR,A
   2424              }
   \   00004A   05..         INC     ?V0 + 6
   \                     ??zclProcessInReadCmd_3:
   \   00004C   85..82       MOV     DPL,?V0 + 2
   \   00004F   85..83       MOV     DPH,?V0 + 3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   E5..         MOV     A,?V0 + 6
   \   000056   C3           CLR     C
   \   000057   9A           SUBB    A,R2
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??zclProcessInReadCmd_6 & 0xFFFF
   \   00005D   85..82       MOV     DPL,?V0 + 6
   \   000060   A882         MOV     R0,DPL
   \   000062   E8           MOV     A,R0
   \   000063   75F006       MOV     B,#0x6
   \   000066   A4           MUL     AB
   \   000067   FA           MOV     R2,A
   \   000068   ABF0         MOV     R3,B
   \   00006A   E5..         MOV     A,?V0 + 0
   \   00006C   2A           ADD     A,R2
   \   00006D   F582         MOV     DPL,A
   \   00006F   E5..         MOV     A,?V0 + 1
   \   000071   3B           ADDC    A,R3
   \   000072   F583         MOV     DPH,A
   \   000074   A3           INC     DPTR
   \   000075   AE82         MOV     R6,DPL
   \   000077   AF83         MOV     R7,DPH
   \   000079   E8           MOV     A,R0
   \   00007A   C3           CLR     C
   \   00007B   33           RLC     A
   \   00007C   F8           MOV     R0,A
   \   00007D   E4           CLR     A
   \   00007E   33           RLC     A
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00008A   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   00008D   EE           MOV     A,R6
   \   00008E   2402         ADD     A,#0x2
   \   000090   F5..         MOV     ?V0 + 10,A
   \   000092   EF           MOV     A,R7
   \   000093   3400         ADDC    A,#0x0
   \   000095   F5..         MOV     ?V0 + 11,A
   \   000097   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00009A                ; Setup parameters for call to function zclFindAttrRec
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   8582..       MOV     ?V0 + 12,DPL
   \   0000A3   8583..       MOV     ?V0 + 13,DPH
   \   0000A6   78..         MOV     R0,#?V0 + 12
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV     A,R1
   \   0000B6   6089         JZ      ??zclProcessInReadCmd_4
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0000C7   E4           CLR     A
   \   0000C8   85..82       MOV     DPL,?V0 + 10
   \   0000CB   85..83       MOV     DPH,?V0 + 11
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   02....       LJMP    ??zclProcessInReadCmd_5 & 0xFFFF
   2425            }
   2426            
   2427            // Build and send Read Response command
   2428            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   2429                             readRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   2430                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   0000DF   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   0000E2                ; Setup parameters for call to function zcl_SendReadRsp
   \   0000E2   85..82       MOV     DPL,?V0 + 4
   \   0000E5   85..83       MOV     DPH,?V0 + 5
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V0 + 2,A
   \   0000F1   78..         MOV     R0,#?V0 + 2
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   75..01       MOV     ?V0 + 2,#0x1
   \   0000F9   78..         MOV     R0,#?V0 + 2
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   85..82       MOV     DPL,?V0 + 8
   \   00010B   85..83       MOV     DPH,?V0 + 9
   \   00010E   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000111   E5..         MOV     A,?V0 + 8
   \   000113   2406         ADD     A,#0x6
   \   000115   FA           MOV     R2,A
   \   000116   E5..         MOV     A,?V0 + 9
   \   000118   3400         ADDC    A,#0x0
   \   00011A   FB           MOV     R3,A
   \   00011B   E5..         MOV     A,?V0 + 8
   \   00011D   2414         ADD     A,#0x14
   \   00011F   F582         MOV     DPL,A
   \   000121   E5..         MOV     A,?V0 + 9
   \   000123   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000126   F9           MOV     R1,A
   \   000127   12....       LCALL   ??zcl_SendReadRsp?relay
   \   00012A   7405         MOV     A,#0x5
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   2431            osal_mem_free( readRspCmd );
   \   00012F                ; Setup parameters for call to function osal_mem_free
   \   00012F   AA..         MOV     R2,?V0 + 0
   \   000131   AB..         MOV     R3,?V0 + 1
   \   000133   12....       LCALL   ??osal_mem_free?relay
   2432              
   2433            return TRUE;
   \   000136   7901         MOV     R1,#0x1
   \                     ??zclProcessInReadCmd_2:
   \   000138   7408         MOV     A,#0x8
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   02....       LJMP    ??Subroutine128_0 & 0xFFFF
   2434          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine143_0
   \   000006                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine144_0
   \   000001                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 8
   \   000007   85..83       MOV     DPH,?V0 + 9
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00000E   E5..         MOV     A,?V0 + 8
   \   000010   2414         ADD     A,#0x14
   \   000012   F582         MOV     DPL,A
   \   000014   E5..         MOV     A,?V0 + 9
   \   000016   3400         ADDC    A,#0x0
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??zclFindAttrRec?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine150_0
   \   000006                ; // Fall through to label ??Subroutine150_0
   2435          #endif // ZCL_READ
   2436          
   2437          #ifdef ZCL_WRITE
   2438          /*********************************************************************
   2439           * @fn      processInWriteCmd
   2440           * @brief   Process the "Profile" Write and Write No Response Commands
   2441           * @param   pInMsg - incoming message to process
   2442           * @return  TRUE if command processed. FALSE, otherwise.
   2443           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F9           MOV     R1,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine146_0
   \   000007                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2444          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   2445          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   2446            zclWriteCmd_t *writeCmd;
   2447            zclWriteRec_t *statusRec;
   2448            zclWriteRspCmd_t *writeRspCmd;
   2449            zclAttrRec_t attrRec;
   2450            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2451            uint8 status;
   2452            uint8 i, j = 0;
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   2453          
   2454            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000014   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2455            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_260:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6402         XRL     A,#0x2
   \   00002B   7013         JNZ     ??zclProcessInWriteCmd_0
   2456            {
   2457              // We need to send a response back - allocate space for it
   2458              writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) 
   2459                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000030   12....       LCALL   ?Subroutine24 & 0xFFFF
   2460              if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_28:
   \   000033   7001         JNZ     ??zclProcessInWriteCmd_1
   \   000035   EB           MOV     A,R3
   \                     ??zclProcessInWriteCmd_1:
   \   000036   7005         JNZ     ??zclProcessInWriteCmd_2
   2461                return FALSE; // EMBEDDED RETURN
   \   000038   7900         MOV     R1,#0x0
   \   00003A   02....       LJMP    ??zclProcessInWriteCmd_3 & 0xFFFF
   2462              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_2:
   \   00003D   75..01       MOV     ?V0 + 4,#0x1
   2463            }
   2464            
   2465            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteCmd_0:
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   801F         SJMP    ??zclProcessInWriteCmd_4
   2466            {
   2467              statusRec = &(writeCmd->attrList[i]);
   2468              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2469              {
   2470                if ( statusRec->dataType == attrRec.attr.dataType )
   2471                {
   2472                  status = zclWriteAttrData( &attrRec, statusRec );
   2473          
   2474                  if ( sendRsp && status != ZCL_STATUS_SUCCESS ) // If successful, a write attribute status record shall NOT be generated
   2475                  {
   2476                    writeRspCmd->attrList[j].status = status; // Attribute is read only - move on to the next write attribute record
   2477                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2478                  }
   2479                }
   2480                else
   2481                {
   2482                  if ( sendRsp ) // Attribute data type is incorrect - move on to the next write attribute record
   2483                  {
   2484                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2485                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2486                  }
   2487                }
   2488              }
   2489              else
   2490              {
   2491                if ( sendRsp ) // Attribute is not supported - move on to the next write attribute record
   \                     ??zclProcessInWriteCmd_5:
   \   000045   E5..         MOV     A,?V0 + 4
   \   000047   6019         JZ      ??zclProcessInWriteCmd_6
   2492                {
   2493                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000049   7486         MOV     A,#-0x7a
   \                     ??zclProcessInWriteCmd_7:
   \   00004B   85..82       MOV     DPL,?V0 + 14
   \   00004E   85..83       MOV     DPH,?V0 + 15
   2494                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2495                }
   2496              }
   \   000051   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000054   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000057   85..82       MOV     DPL,?V0 + 12
   \   00005A   85..83       MOV     DPH,?V0 + 13
   \   00005D   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000060   05..         INC     ?V0 + 2
   \                     ??zclProcessInWriteCmd_6:
   \   000062   05..         INC     ?V0 + 3
   \                     ??zclProcessInWriteCmd_4:
   \   000064   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   C3           CLR     C
   \   00006C   9A           SUBB    A,R2
   \   00006D   4003         JC      $+5
   \   00006F   02....       LJMP    ??zclProcessInWriteCmd_8 & 0xFFFF
   \   000072   E5..         MOV     A,?V0 + 3
   \   000074   75F005       MOV     B,#0x5
   \   000077   A4           MUL     AB
   \   000078   F8           MOV     R0,A
   \   000079   A9F0         MOV     R1,B
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000084   AE82         MOV     R6,DPL
   \   000086   AF83         MOV     R7,DPH
   \   000088   E5..         MOV     A,?V0 + 2
   \   00008A   75F003       MOV     B,#0x3
   \   00008D   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000090   E582         MOV     A,DPL
   \   000092   2402         ADD     A,#0x2
   \   000094   F5..         MOV     ?V0 + 12,A
   \   000096   E583         MOV     A,DPH
   \   000098   3400         ADDC    A,#0x0
   \   00009A   F5..         MOV     ?V0 + 13,A
   \   00009C   A3           INC     DPTR
   \   00009D   8582..       MOV     ?V0 + 14,DPL
   \   0000A0   8583..       MOV     ?V0 + 15,DPH
   \   0000A3   85..82       MOV     DPL,?V0 + 6
   \   0000A6   85..83       MOV     DPH,?V0 + 7
   \   0000A9   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   8582..       MOV     ?V0 + 10,DPL
   \   0000B2   8583..       MOV     ?V0 + 11,DPH
   \   0000B5   78..         MOV     R0,#?V0 + 10
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV     A,R1
   \   0000C5   7003         JNZ     $+5
   \   0000C7   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FA           MOV     R2,A
   \   0000D2   7406         MOV     A,#0x6
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   6A           XRL     A,R2
   \   0000D9   7022         JNZ     ??zclProcessInWriteCmd_9
   \   0000DB                ; Setup parameters for call to function zclWriteAttrData
   \   0000DB   EE           MOV     A,R6
   \   0000DC   FC           MOV     R4,A
   \   0000DD   EF           MOV     A,R7
   \   0000DE   FD           MOV     R5,A
   \   0000DF   7402         MOV     A,#0x2
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   AA82         MOV     R2,DPL
   \   0000E6   AB83         MOV     R3,DPH
   \   0000E8   12....       LCALL   ??zclWriteAttrData?relay
   \   0000EB   E9           MOV     A,R1
   \   0000EC   FA           MOV     R2,A
   \   0000ED   E5..         MOV     A,?V0 + 4
   \   0000EF   7003         JNZ     $+5
   \   0000F1   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   0000F4   EA           MOV     A,R2
   \   0000F5   7003         JNZ     $+5
   \   0000F7   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   0000FA   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   \                     ??zclProcessInWriteCmd_9:
   \   0000FD   E5..         MOV     A,?V0 + 4
   \   0000FF   7003         JNZ     $+5
   \   000101   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   000104   748D         MOV     A,#-0x73
   \   000106   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   2497            } // for loop
   2498          
   2499            if ( sendRsp )
   \                     ??zclProcessInWriteCmd_8:
   \   000109   E5..         MOV     A,?V0 + 4
   \   00010B   604A         JZ      ??zclProcessInWriteCmd_10
   2500            {
   2501              writeRspCmd->numAttr = j;
   \   00010D   85..82       MOV     DPL,?V0 + 0
   \   000110   85..83       MOV     DPH,?V0 + 1
   \   000113   E5..         MOV     A,?V0 + 2
   \   000115   F0           MOVX    @DPTR,A
   2502              if ( writeRspCmd->numAttr == 0 )
   \   000116   7003         JNZ     ??CrossCallReturnLabel_12
   2503              {
   2504                // Since all records were written successful, include a single status record in the resonse command 
   2505                // with the status field set to SUCCESS and the attribute ID field omitted.
   2506                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000118   12....       LCALL   ?Subroutine10 & 0xFFFF
   2507                writeRspCmd->numAttr = 1;
   2508              }
   2509              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2510                                pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2511                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_12:
   \   00011B   85..82       MOV     DPL,?V0 + 6
   \   00011E   85..83       MOV     DPH,?V0 + 7
   \   000121   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000124                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000124   85..82       MOV     DPL,?V0 + 6
   \   000127   85..83       MOV     DPH,?V0 + 7
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F5..         MOV     ?V0 + 2,A
   \   000133   78..         MOV     R0,#?V0 + 2
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000138   75..01       MOV     ?V0 + 2,#0x1
   \   00013B   78..         MOV     R0,#?V0 + 2
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   78..         MOV     R0,#?V0 + 2
   \   000142   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000145   78..         MOV     R0,#?V0 + 0
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014A   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00014D   12....       LCALL   ?DEALLOC_XSTACK8
   2512              osal_mem_free( writeRspCmd );
   \   000150                ; Setup parameters for call to function osal_mem_free
   \   000150   AA..         MOV     R2,?V0 + 0
   \   000152   AB..         MOV     R3,?V0 + 1
   \   000154   12....       LCALL   ??osal_mem_free?relay
   2513            }
   2514            return TRUE; 
   \                     ??zclProcessInWriteCmd_10:
   \   000157   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteCmd_3:
   \   000159   740A         MOV     A,#0xa
   \   00015B   02....       LJMP    ??Subroutine127_0 & 0xFFFF
   2515          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine148_0
   \   000006                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   12....       LCALL   ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   7401         MOV     A,#0x1
   \   00000A   28           ADD     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   00000B   FD           MOV     R5,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2406         ADD     A,#0x6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   EE           MOV     A,R6
   \   000015   2414         ADD     A,#0x14
   \   000017   F582         MOV     DPL,A
   \   000019   EF           MOV     A,R7
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??zcl_SendWriteRsp?relay
   \   000023   7405         MOV     A,#0x5
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR     A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7401         MOV     A,#0x1
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
   2516          
   2517          /*********************************************************************
   2518           * @fn      zclRevertWriteUndividedCmd
   2519           * @brief   Revert the "Profile" Write Undevided Command
   2520           * @param   pInMsg - incoming message to process
   2521           *          curWriteRec - old data
   2522           *          numAttr - number of attributes to be reverted
   2523           */
   2524          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg, zclWriteRec_t *curWriteRec, uint16 numAttr )
   2525          {
   2526            zclWriteRec_t *statusRec;
   2527            zclAttrRec_t attrRec;
   2528            uint8 dataLen;
   2529            uint8 i;
   2530          
   2531            statusRec = curWriteRec;
   2532            for (i = 0; i < numAttr; i++)
   2533            {
   2534              statusRec = &(curWriteRec[i]);
   2535              
   2536              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2537                break; // should never happen
   2538           
   2539              // Just copy the old data back - no need to validate the data
   2540              dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   2541              osal_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   2542            } // for loop
   2543          }
   2544          
   2545          /*********************************************************************
   2546           * @fn      zclProcessInWriteUndividedCmd
   2547           * @brief   Process the "Profile" Write Undivided Command
   2548           * @param   pInMsg - incoming message to process
   2549           * @return  TRUE if command processed. FALSE, otherwise.
   2550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine149_0
   \   000006                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2551          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   2552          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   2553            zclWriteCmd_t *writeCmd;
   2554            zclWriteRec_t *statusRec;
   2555            zclWriteRec_t *curWriteRec;
   2556            zclWriteRec_t *curStatusRec;
   2557            zclWriteRspCmd_t *writeRspCmd;
   2558            zclAttrRec_t attrRec;
   2559            uint8 *curDataPtr;
   2560            uint8 hdrLen;
   2561            uint8 dataLen;
   2562            uint8 curLen = 0;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2563            uint8 status;
   2564            uint8 i, j = 0;
   \   000011   7F00         MOV     R7,#0x0
   2565          
   2566            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000013   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000016   F5..         MOV     ?V0 + 6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 7,A
   2567            
   2568            // Allocate space for Write Response Command
   2569            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   85..82       MOV     DPL,?V0 + 6
   \   00001F   F583         MOV     DPH,A
   \   000021   12....       LCALL   ?Subroutine24 & 0xFFFF
   2570            
   2571            if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_29:
   \   000024   7001         JNZ     ??zclProcessInWriteUndividedCmd_0
   \   000026   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000027   7005         JNZ     ??zclProcessInWriteUndividedCmd_1
   2572              return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000029   7900         MOV     R1,#0x0
   \   00002B   02....       LJMP    ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   2573            
   2574            // If any attribute cannot be written, no attribute values are changed. Hence,
   2575            // make sure all the attributes are supported and writable
   2576            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00002E   7E00         MOV     R6,#0x0
   \   000030   801C         SJMP    ??zclProcessInWriteUndividedCmd_4
   2577            {
   2578              statusRec = &(writeCmd->attrList[i]);
   2579              
   2580              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2581              {
   2582                // Attribute is not supported - stop here
   2583                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   2584                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2585                break;
   2586              }
   2587              
   2588              if ( statusRec->dataType != attrRec.attr.dataType )
   2589              {
   2590                // Attribute data type is incorrect - stope here
   2591                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2592                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2593                break;
   2594              }
   2595              
   2596              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   2597              {
   2598                // Attribute is not writable - stop here
   2599                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   2600                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2601                break;
   2602              }  
   2603              dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000032                ; Setup parameters for call to function zclGetAttrDataLength
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00003E   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000041   E9           MOV     A,R1
   \   000042   FA           MOV     R2,A
   2604              
   2605              // add padding if needed
   2606              if ( PADDING_NEEDED( dataLen ) )
   \   000043   A2E0         MOV     C,0xE0 /* A   */.0
   \   000045   5001         JNC     ??zclProcessInWriteUndividedCmd_6
   2607                dataLen++;
   \   000047   0A           INC     R2
   2608              curLen += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   000048   EA           MOV     A,R2
   \   000049   25..         ADD     A,?V0 + 4
   \   00004B   F5..         MOV     ?V0 + 4,A
   \   00004D   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   00004E   85..82       MOV     DPL,?V0 + 6
   \   000051   85..83       MOV     DPH,?V0 + 7
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   EE           MOV     A,R6
   \   000057   C3           CLR     C
   \   000058   9A           SUBB    A,R2
   \   000059   505D         JNC     ??zclProcessInWriteUndividedCmd_7
   \   00005B   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00005E   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   8582..       MOV     ?V0 + 10,DPL
   \   000067   8583..       MOV     ?V0 + 11,DPH
   \   00006A   78..         MOV     R0,#?V0 + 10
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   E9           MOV     A,R1
   \   000076   7004         JNZ     ??zclProcessInWriteUndividedCmd_8
   \   000078   7486         MOV     A,#-0x7a
   \   00007A   8023         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   00007C   85..82       MOV     DPL,?V0 + 2
   \   00007F   85..83       MOV     DPH,?V0 + 3
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   7406         MOV     A,#0x6
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   69           XRL     A,R1
   \   00008D   6004         JZ      ??zclProcessInWriteUndividedCmd_10
   \   00008F   748D         MOV     A,#-0x73
   \   000091   800C         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   000093   7407         MOV     A,#0x7
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   A2E1         MOV     C,0xE0 /* A   */.1
   \   00009B   4095         JC      ??zclProcessInWriteUndividedCmd_5
   \   00009D   7488         MOV     A,#-0x78
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   00009F   85..82       MOV     DPL,?V0 + 0
   \   0000A2   85..83       MOV     DPH,?V0 + 1
   \   0000A5   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A8   F8           MOV     R0,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   85..82       MOV     DPL,?V0 + 0
   \   0000AF   85..83       MOV     DPH,?V0 + 1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0000B7   0F           INC     R7
   2609            } // for loop
   2610            
   2611            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0000B8   EF           MOV     A,R7
   \   0000B9   85..82       MOV     DPL,?V0 + 0
   \   0000BC   85..83       MOV     DPH,?V0 + 1
   \   0000BF   F0           MOVX    @DPTR,A
   2612            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000C0   6003         JZ      $+5
   \   0000C2   02....       LJMP    ??zclProcessInWriteUndividedCmd_11 & 0xFFFF
   2613            {
   2614              // calculate the length of the current data header
   2615              hdrLen = j * sizeof( zclWriteRec_t );
   \   0000C5   75F005       MOV     B,#0x5
   \   0000C8   A4           MUL     AB
   \   0000C9   FA           MOV     R2,A
   2616            
   2617              // Allocate space to keep a copy of the current data
   2618              curWriteRec = (zclWriteRec_t *) osal_mem_alloc( hdrLen + curLen ); 
   \   0000CA   8A82         MOV     DPL,R2
   \   0000CC   8582..       MOV     ?V0 + 2,DPL
   \   0000CF                ; Setup parameters for call to function osal_mem_alloc
   \   0000CF   E5..         MOV     A,?V0 + 4
   \   0000D1   25..         ADD     A,?V0 + 2
   \   0000D3   FA           MOV     R2,A
   \   0000D4   E4           CLR     A
   \   0000D5   3400         ADDC    A,#0x0
   \   0000D7   FB           MOV     R3,A
   \   0000D8   12....       LCALL   ??osal_mem_alloc?relay
   \   0000DB   8A..         MOV     ?V0 + 12,R2
   \   0000DD   8B..         MOV     ?V0 + 13,R3
   2619              if ( curWriteRec == NULL )
   \   0000DF   EA           MOV     A,R2
   \   0000E0   7001         JNZ     ??zclProcessInWriteUndividedCmd_12
   \   0000E2   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   0000E3   700A         JNZ     ??zclProcessInWriteUndividedCmd_13
   2620              {
   2621                osal_mem_free(writeRspCmd );
   \   0000E5                ; Setup parameters for call to function osal_mem_free
   \   0000E5   AA..         MOV     R2,?V0 + 0
   \   0000E7   AB..         MOV     R3,?V0 + 1
   \   0000E9   12....       LCALL   ??osal_mem_free?relay
   2622                return FALSE; // EMBEDDED RETURN
   \   0000EC   02....       LJMP    ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   2623              }
   2624          
   2625              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0000EF   EA           MOV     A,R2
   \   0000F0   25..         ADD     A,?V0 + 2
   \   0000F2   F5..         MOV     ?V0 + 4,A
   \   0000F4   EB           MOV     A,R3
   \   0000F5   3400         ADDC    A,#0x0
   \   0000F7   F5..         MOV     ?V0 + 5,A
   2626              
   2627              // Write the new data over
   2628              for (i = 0; i < writeCmd->numAttr; i++)
   \   0000F9   7E00         MOV     R6,#0x0
   \   0000FB   8023         SJMP    ??zclProcessInWriteUndividedCmd_14
   2629              {
   2630                statusRec = &(writeCmd->attrList[i]);
   2631                curStatusRec = &(curWriteRec[i]);
   2632              
   2633                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2634                  break; // should never happen
   2635          
   2636                // Keep a copy of the current data before before writing the new data over
   2637                curStatusRec->attrID = statusRec->attrID;
   2638                zclReadAttrData( curDataPtr, &attrRec );
   2639                curStatusRec->attrData = curDataPtr;
   2640                
   2641                status = zclWriteAttrData( &attrRec, statusRec );
   2642                   
   2643                // If successful, a write attribute status record shall NOT be generated
   2644                if ( status != ZCL_STATUS_SUCCESS )
   2645                {
   2646                  writeRspCmd->attrList[j].status = status;
   2647                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2648                    
   2649                  // Since this write failed, we need to revert all the pervious writes
   2650                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   2651                  break;
   2652                }
   2653                
   2654                dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0000FD                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000FD   85..82       MOV     DPL,?V0 + 2
   \   000100   85..83       MOV     DPH,?V0 + 3
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000109   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   2655                
   2656                // add padding if needed
   2657                if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_202:
   \   00010C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00010E   5001         JNC     ??zclProcessInWriteUndividedCmd_16
   2658                  dataLen++;
   \   000110   0A           INC     R2
   2659                curDataPtr += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000111   8A..         MOV     ?V0 + 2,R2
   \   000113   E5..         MOV     A,?V0 + 4
   \   000115   25..         ADD     A,?V0 + 2
   \   000117   F5..         MOV     ?V0 + 4,A
   \   000119   E5..         MOV     A,?V0 + 5
   \   00011B   3400         ADDC    A,#0x0
   \   00011D   F5..         MOV     ?V0 + 5,A
   \   00011F   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000120   85..82       MOV     DPL,?V0 + 6
   \   000123   85..83       MOV     DPH,?V0 + 7
   \   000126   E0           MOVX    A,@DPTR
   \   000127   FA           MOV     R2,A
   \   000128   EE           MOV     A,R6
   \   000129   C3           CLR     C
   \   00012A   9A           SUBB    A,R2
   \   00012B   4003         JC      $+5
   \   00012D   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   000130   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000133   E5..         MOV     A,?V0 + 12
   \   000135   28           ADD     A,R0
   \   000136   F8           MOV     R0,A
   \   000137   E5..         MOV     A,?V0 + 13
   \   000139   39           ADDC    A,R1
   \   00013A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00013D   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   8582..       MOV     ?V0 + 10,DPL
   \   000146   8583..       MOV     ?V0 + 11,DPH
   \   000149   78..         MOV     R0,#?V0 + 10
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000151   12....       LCALL   ?DEALLOC_XSTACK8
   \   000154   E9           MOV     A,R1
   \   000155   7003         JNZ     $+5
   \   000157   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   00015A   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00015D   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000160   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000163                ; Setup parameters for call to function zclReadAttrData
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   AC82         MOV     R4,DPL
   \   00016A   AD83         MOV     R5,DPH
   \   00016C   AA..         MOV     R2,?V0 + 4
   \   00016E   AB..         MOV     R3,?V0 + 5
   \   000170   12....       LCALL   ??zclReadAttrData?relay
   \   000173   85..82       MOV     DPL,?XSP + 0
   \   000176   85..83       MOV     DPH,?XSP + 1
   \   000179   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00017C   E5..         MOV     A,?V0 + 4
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   A3           INC     DPTR
   \   000180   E5..         MOV     A,?V0 + 5
   \   000182   F0           MOVX    @DPTR,A
   \   000183                ; Setup parameters for call to function zclWriteAttrData
   \   000183   AC..         MOV     R4,?V0 + 2
   \   000185   AD..         MOV     R5,?V0 + 3
   \   000187   7402         MOV     A,#0x2
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   AA82         MOV     R2,DPL
   \   00018E   AB83         MOV     R3,DPH
   \   000190   12....       LCALL   ??zclWriteAttrData?relay
   \   000193   E9           MOV     A,R1
   \   000194   FB           MOV     R3,A
   \   000195   7003         JNZ     $+5
   \   000197   02....       LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   00019A   EF           MOV     A,R7
   \   00019B   75F003       MOV     B,#0x3
   \   00019E   A4           MUL     AB
   \   00019F   F8           MOV     R0,A
   \   0001A0   A9F0         MOV     R1,B
   \   0001A2   E5..         MOV     A,?V0 + 0
   \   0001A4   28           ADD     A,R0
   \   0001A5   F8           MOV     R0,A
   \   0001A6   E5..         MOV     A,?V0 + 1
   \   0001A8   39           ADDC    A,R1
   \   0001A9   F9           MOV     R1,A
   \   0001AA   EB           MOV     A,R3
   \   0001AB   8882         MOV     DPL,R0
   \   0001AD   8983         MOV     DPH,R1
   \   0001AF   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001B2   FA           MOV     R2,A
   \   0001B3   A3           INC     DPTR
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   FB           MOV     R3,A
   \   0001B6   8882         MOV     DPL,R0
   \   0001B8   8983         MOV     DPH,R1
   \   0001BA   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   0001BD   0F           INC     R7
   \   0001BE   8E82         MOV     DPL,R6
   \   0001C0   8582..       MOV     ?V0 + 8,DPL
   \   0001C3   7E00         MOV     R6,#0x0
   \   0001C5   8032         SJMP    ??zclProcessInWriteUndividedCmd_18
   2660              } // for loop
   \                     ??zclProcessInWriteUndividedCmd_19:
   \   0001C7   E5..         MOV     A,?V0 + 2
   \   0001C9   2403         ADD     A,#0x3
   \   0001CB   F5..         MOV     ?V0 + 2,A
   \   0001CD   E5..         MOV     A,?V0 + 3
   \   0001CF   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001D2   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0001D5   740E         MOV     A,#0xe
   \   0001D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DA   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0001DD                ; Setup parameters for call to function osal_memcpy
   \   0001DD   85..82       MOV     DPL,?V0 + 2
   \   0001E0   85..83       MOV     DPH,?V0 + 3
   \   0001E3   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0001E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E9   EA           MOV     A,R2
   \   0001EA   FC           MOV     R4,A
   \   0001EB   7D00         MOV     R5,#0x0
   \   0001ED   7413         MOV     A,#0x13
   \   0001EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F2   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0001F5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F8   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   0001F9   8E..         MOV     ?V0 + 2,R6
   \   0001FB   C3           CLR     C
   \   0001FC   E5..         MOV     A,?V0 + 2
   \   0001FE   95..         SUBB    A,?V0 + 8
   \   000200   E4           CLR     A
   \   000201   9400         SUBB    A,#0x0
   \   000203   505B         JNC     ??zclProcessInWriteUndividedCmd_17
   \   000205   EE           MOV     A,R6
   \   000206   75F005       MOV     B,#0x5
   \   000209   A4           MUL     AB
   \   00020A   F8           MOV     R0,A
   \   00020B   A9F0         MOV     R1,B
   \   00020D   E5..         MOV     A,?V0 + 12
   \   00020F   28           ADD     A,R0
   \   000210   F5..         MOV     ?V0 + 2,A
   \   000212   E5..         MOV     A,?V0 + 13
   \   000214   39           ADDC    A,R1
   \   000215   F5..         MOV     ?V0 + 3,A
   \   000217   85..82       MOV     DPL,?V0 + 14
   \   00021A   85..83       MOV     DPH,?V0 + 15
   \   00021D   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000220                ; Setup parameters for call to function zclFindAttrRec
   \   000220   740A         MOV     A,#0xa
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   8582..       MOV     ?V0 + 6,DPL
   \   000228   8583..       MOV     ?V0 + 7,DPH
   \   00022B   78..         MOV     R0,#?V0 + 6
   \   00022D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000230   85..82       MOV     DPL,?V0 + 2
   \   000233   85..83       MOV     DPH,?V0 + 3
   \   000236   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000239   85..82       MOV     DPL,?V0 + 4
   \   00023C   85..83       MOV     DPH,?V0 + 5
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000246   E5..         MOV     A,?V0 + 4
   \   000248   2414         ADD     A,#0x14
   \   00024A   F582         MOV     DPL,A
   \   00024C   E5..         MOV     A,?V0 + 5
   \   00024E   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000251   F9           MOV     R1,A
   \   000252   12....       LCALL   ??zclFindAttrRec?relay
   \   000255   7402         MOV     A,#0x2
   \   000257   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025A   E9           MOV     A,R1
   \   00025B   6003         JZ      $+5
   \   00025D   02....       LJMP    ??zclProcessInWriteUndividedCmd_19 & 0xFFFF
   2661            
   2662              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000260   EF           MOV     A,R7
   \   000261   85..82       MOV     DPL,?V0 + 0
   \   000264   85..83       MOV     DPH,?V0 + 1
   \   000267   F0           MOVX    @DPTR,A
   2663              if ( writeRspCmd->numAttr  == 0 )
   \   000268   7003         JNZ     ??CrossCallReturnLabel_13
   2664              {
   2665                // Since all records were written successful, include a single status record in the resonse command
   2666                // with the status field set to SUCCESS and the attribute ID field omitted.
   2667                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   00026A   12....       LCALL   ?Subroutine10 & 0xFFFF
   2668                writeRspCmd->numAttr = 1;
   2669              }
   2670          
   2671              osal_mem_free( curWriteRec );
   \                     ??CrossCallReturnLabel_13:
   \   00026D                ; Setup parameters for call to function osal_mem_free
   \   00026D   AA..         MOV     R2,?V0 + 12
   \   00026F   AB..         MOV     R3,?V0 + 13
   \   000271   12....       LCALL   ??osal_mem_free?relay
   2672            }
   2673            
   2674            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2675                              pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2676                              true, pInMsg->hdr.transSeqNum );  
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000274   85..82       MOV     DPL,?V0 + 14
   \   000277   85..83       MOV     DPH,?V0 + 15
   \   00027A   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00027D                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00027D   85..82       MOV     DPL,?V0 + 14
   \   000280   85..83       MOV     DPH,?V0 + 15
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   A3           INC     DPTR
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   A3           INC     DPTR
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   F5..         MOV     ?V0 + 2,A
   \   00028C   78..         MOV     R0,#?V0 + 2
   \   00028E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000291   75..01       MOV     ?V0 + 2,#0x1
   \   000294   78..         MOV     R0,#?V0 + 2
   \   000296   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000299   78..         MOV     R0,#?V0 + 2
   \   00029B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029E   78..         MOV     R0,#?V0 + 0
   \   0002A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0002A6   12....       LCALL   ?DEALLOC_XSTACK8
   2677            osal_mem_free( writeRspCmd );
   \   0002A9                ; Setup parameters for call to function osal_mem_free
   \   0002A9   AA..         MOV     R2,?V0 + 0
   \   0002AB   AB..         MOV     R3,?V0 + 1
   \   0002AD   12....       LCALL   ??osal_mem_free?relay
   2678           
   2679            return TRUE; 
   \   0002B0   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   0002B2   02....       LJMP    ?Subroutine125 & 0xFFFF
   2680          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EE           MOV     A,R6
   \   000001   75F005       MOV     B,#0x5
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V0 + 7
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   8582..       MOV     ?V0 + 2,DPL
   \   000016   8583..       MOV     ?V0 + 3,DPH
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006                REQUIRE ??Subroutine151_0
   \   000006                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   85..82       MOV     DPL,?V0 + 2
   \   000005   85..83       MOV     DPH,?V0 + 3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   2681          #endif // ZCL_WRITE
   2682          
   2683          #ifdef ZCL_DISCOVER
   2684          /*********************************************************************
   2685           * @fn      zclProcessInDiscCmd
   2686           * @brief   Process the "Profile" Discover Command
   2687           * @param   pInMsg - incoming message to process
   2688           * @return  TRUE if command processed. FALSE, otherwise.
   2689           */
   2690          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   2691          {
   2692            zclDiscoverCmd_t *discoverCmd;
   2693            zclDiscoverRspCmd_t *discoverRspCmd;
   2694            uint8 discComplete = TRUE;
   2695            zclAttrRec_t attrRec;
   2696            uint16 attrID;
   2697            uint8 i;
   2698            
   2699            discoverCmd = (zclDiscoverCmd_t *)pInMsg->attrCmd;
   2700            
   2701            // Find out the number of attributes supported within the specified range
   2702            for ( i = 0, attrID = discoverCmd->startAttr; i < discoverCmd->maxAttrIDs; i++, attrID++ )
   2703            {
   2704              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2705                break;
   2706            }
   2707            
   2708            // Allocate space for the response command
   2709            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof (zclDiscoverRspCmd_t) 
   2710                                                                   + sizeof ( zclDiscoverInfo_t ) * i );
   2711            if ( discoverRspCmd == NULL )
   2712              return FALSE; // EMEDDED RETURN
   2713            
   2714            discoverRspCmd->numAttr = i;
   2715            if ( discoverRspCmd->numAttr != 0 )
   2716            {
   2717              for ( i = 0, attrID = discoverCmd->startAttr; i < discoverRspCmd->numAttr; i++, attrID++ )
   2718              {
   2719                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2720                  break; // Attribute not supported
   2721                
   2722                discoverRspCmd->attrList[i].attrID = attrRec.attr.attrId;
   2723                discoverRspCmd->attrList[i].dataType = attrRec.attr.dataType;
   2724              }
   2725              
   2726              // Are there more attributes to be discovered?
   2727              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2728                discComplete = FALSE;
   2729            }
   2730            
   2731            discoverRspCmd->discComplete = discComplete;
   2732            zcl_SendDiscoverRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr, 
   2733                                    pInMsg->msg->clusterId, discoverRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2734                                    true, pInMsg->hdr.transSeqNum );
   2735            osal_mem_free( discoverRspCmd );
   2736            
   2737            return TRUE;
   2738          }
   2739          #endif // ZCL_DISCOVER
   2740          
   2741          /*********************************************************************
   2742           * @fn      zclSendMsg
   2743           * @brief   Send an incoming message to the Application
   2744           * @param   pInMsg - incoming message to process
   2745           * @return  TRUE
   2746           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2747          static uint8 zclSendMsg( zclIncoming_t *pInMsg )
   \                     zclSendMsg:
   2748          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2749            zclIncomingMsg_t *pCmd;
   2750              
   2751            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000009   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   7005         JNZ     ??zclSendMsg_0
   2752              return ( TRUE );
   \                     ??zclSendMsg_1:
   \   000011   7901         MOV     R1,#0x1
   \   000013   02....       LJMP    ?Subroutine119 & 0xFFFF
   2753            
   2754            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \                     ??zclSendMsg_0:
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A18         MOV     R2,#0x18
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_msg_allocate?relay
   2755            if ( pCmd != NULL )
   \   00001D   EA           MOV     A,R2
   \   00001E   7001         JNZ     ??zclSendMsg_2
   \   000020   EB           MOV     A,R3
   \                     ??zclSendMsg_2:
   \   000021   60EE         JZ      ??zclSendMsg_1
   2756            {
   2757              // fill in the message
   2758              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000023   7434         MOV     A,#0x34
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
   2759              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_232:
   \   000028   A3           INC     DPTR
   \   000029   EA           MOV     A,R2
   \   00002A   2402         ADD     A,#0x2
   \   00002C   FC           MOV     R4,A
   \   00002D   EB           MOV     A,R3
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FD           MOV     R5,A
   \   000031   7406         MOV     A,#0x6
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2760              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E8           MOV     A,R0
   \   00004E   12....       LCALL   ?Subroutine12 & 0xFFFF
   2761              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_18:
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F583         MOV     DPH,A
   \   000056   8882         MOV     DPL,R0
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   EA           MOV     A,R2
   \   00005F   240A         ADD     A,#0xa
   \   000061   FC           MOV     R4,A
   \   000062   EB           MOV     A,R3
   \   000063   3400         ADDC    A,#0x0
   \   000065   FD           MOV     R5,A
   \   000066   740C         MOV     A,#0xc
   \   000068   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2762              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00006B   EE           MOV     A,R6
   \   00006C   240C         ADD     A,#0xc
   \   00006E   F8           MOV     R0,A
   \   00006F   EF           MOV     A,R7
   \   000070   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000073   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000076   EA           MOV     A,R2
   \   000077   2416         ADD     A,#0x16
   \   000079   F582         MOV     DPL,A
   \   00007B   EB           MOV     A,R3
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F583         MOV     DPH,A
   \   000080   EC           MOV     A,R4
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   ED           MOV     A,R5
   \   000084   F0           MOVX    @DPTR,A
   2763              
   2764              // Application will free the attrCmd buffer
   2765              pInMsg->attrCmd = NULL;
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   F0           MOVX    @DPTR,A
   2766              
   2767              /* send message through task message */
   2768              osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
   \   00008D                ; Setup parameters for call to function osal_msg_send
   \   00008D   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   12....       LCALL   ??osal_msg_send?relay
   \   000095   02....       LJMP    ??zclSendMsg_1 & 0xFFFF
   2769            }
   2770            return ( TRUE );
   2771          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_RegisteredMsgTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerPlugin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerAttrList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerClusterOptionList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerValidateAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerForMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_DeviceOperational?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessMessageMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclBuildHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindAttrRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSetSecurityOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSerializeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetDataTypeLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclWriteAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteUndividedCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSendMsg

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "3">`:
   \   000000   3300         DB "3"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",">`:
   \   000000   2C00         DB ","

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$\\r\\n">`:
   \   000000   240D0A00     DB "$\015\012"
   2772          
   2773          /*********************************************************************
   2774          *********************************************************************/

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     zclBuildHdr                       1      0     54
     zclFindAttrRec                    1      0     62
     zclFindClusterOption              1      0     21
     zclGetAttrDataLength              2      0     42
       -> zclGetDataTypeLength         4      0      0
     zclGetClusterOption               0      0     81
       -> zclFindClusterOption         0      0     20
     zclGetDataTypeLength              2      0      0
     zclParseHdr                       1      0     83
       -> osal_memset                  0      0     24
     zclParseInDefaultRspCmd           1      0     10
       -> osal_mem_alloc               0      0     20
     zclParseInReadCmd                 1      0     12
       -> osal_mem_alloc               0      0     24
     zclParseInReadRspCmd              1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteCmd                1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteRspCmd             1      0     16
       -> osal_mem_alloc               0      0     32
     zclProcessInReadCmd               1      0     35
       -> osal_mem_alloc               0      0     60
       -> zclFindAttrRec               0      0     64
       -> zcl_SendReadRsp              0      0     70
       -> osal_mem_free                0      0     60
     zclProcessInWriteCmd              1      0     39
       -> osal_mem_alloc               0      0     68
       -> zclFindAttrRec               0      0     72
       -> zclWriteAttrData             0      0     68
       -> zcl_SendWriteRsp             0      0     78
       -> osal_mem_free                0      0     68
     zclProcessInWriteUndividedCmd     1      0     47
       -> osal_mem_alloc               0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> osal_mem_alloc               0      0     84
       -> osal_mem_free                0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> zclReadAttrData              0      0     84
       -> zclWriteAttrData             0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> osal_memcpy                  0      0     90
       -> zclFindAttrRec               0      0     88
       -> osal_mem_free                0      0     84
       -> zcl_SendWriteRsp             0      0     94
       -> osal_mem_free                0      0     84
     zclProcessMessageMSG              2      0     90
       -> HalUARTWrite                 0      0    142
       -> HalUARTWrite                 0      0    142
       -> HalUARTWrite                 0      0    142
       -> HalUARTWrite                 0      0    142
       -> HalUARTWrite                 0      0    142
       -> HalUARTWrite                 0      0    142
       -> zclParseHdr                  0      0    142
       -> afFindEndPointDesc           0      0    142
       -> zcl_DeviceOperational        0      0    146
       -> zclGetClusterOption          0      0    142
       -> zclSetSecurityOption         0      0    142
       -> zcl_SendDefaultRspCmd        0      0    156
       -> zclSetSecurityOption         0      0    142
       -> osal_mem_free                0      0    142
       -> zcl_SendDefaultRspCmd        0      0    156
     zclReadAttrData                   0      0     56
       -> zclGetAttrDataLength         0      0     22
       -> osal_memcpy                  0      0     28
     zclSendMsg                        1      0     10
       -> osal_msg_allocate            0      0     20
       -> osal_msg_send                0      0     20
     zclSerializeData                  1      0     44
       -> osal_buffer_uint32           0      0     32
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
     zclSetSecurityOption              0      0     81
       -> zclFindClusterOption         0      0     20
     zclWriteAttrData                  0      0     60
       -> zclGetAttrDataLength         0      0     30
       -> osal_memcpy                  0      0     36
     zcl_DeviceOperational             1      0     94
       -> zclFindAttrRec               0      0     42
       -> zclReadAttrData              0      0     38
     zcl_Init                          2      0      0
     zcl_SendCommand                   1      0     90
       -> osal_memcpy                  0      0     90
       -> afFindEndPointDesc           0      0     84
       -> zclGetClusterOption          0      0     84
       -> osal_memset                  0      0     84
       -> zcl_DeviceOperational        0      0     88
       -> osal_mem_alloc               0      0     84
       -> zclBuildHdr                  0      0     90
       -> osal_memcpy                  0      0     90
       -> AF_DataRequest               0      0    102
       -> osal_mem_free                0      0     84
     zcl_SendDefaultRspCmd             1      0    105
       -> zcl_SendCommand              0      0     54
     zcl_SendRead                      1      0     38
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_SendReadRsp                   1      0     74
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRequest              1      0     45
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRsp                  1      0     80
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_event_loop                    0      0     12
       -> osal_msg_receive             0      0     24
       -> zclProcessMessageMSG         0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> osal_msg_send                0      0     24
     zcl_registerAttrList              1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerClusterOptionList     1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerForMsg                2      0      0
     zcl_registerPlugin                0      0     16
       -> osal_mem_alloc               0      0     28
     zcl_registerValidateAttrData      2      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     zcl_TaskID                                    1
     zcl_RegisteredMsgTaskID                       1
     zcl_ValidateAttrDataCB                        2
     zcl_SeqNum                                    1
     plugins                                       2
     attrList                                      2
     clusterOptionList                             2
     zcl_TransID                                   1
     zclCmdTable                                  56
     zcl_Init                                     31
     ?Subroutine109                                7
     zcl_event_loop                              102
     ?Subroutine110                                5
     zcl_registerPlugin                          127
     ?Subroutine111                                5
     ?Subroutine33                                 5
     ??Subroutine126_0                             5
     ?Subroutine11                                 8
     ?Subroutine14                                 4
     ?Subroutine100                                7
     ?Subroutine90                                 5
     ??Subroutine138_0                             5
     ?Subroutine103                                5
     ?Subroutine39                                 6
     ?Subroutine17                                 2
     ??Subroutine152_0                             6
     zcl_registerAttrList                         59
     ?Subroutine63                                25
     ?Subroutine0                                 28
     ?Subroutine81                                 6
     zcl_registerClusterOptionList                59
     zcl_registerValidateAttrData                 14
     zcl_registerForMsg                           20
     zcl_DeviceOperational                       118
     ?Subroutine119                                5
     zcl_SendCommand                             514
     ?Subroutine125                                4
     ??Subroutine127_0                             8
     ?Subroutine40                                10
     ?Subroutine113                                6
     ?Subroutine91                                 6
     ?Subroutine82                                 8
     zcl_SendRead                                218
     ?Subroutine121                                2
     ??Subroutine128_0                             5
     ?Subroutine28                                 5
     ??Subroutine129_0                            11
     ?Subroutine116                                5
     ?Subroutine96                                 6
     ?Subroutine64                                11
     ?Subroutine57                                 6
     ?Subroutine41                                10
     ?Subroutine120                                4
     zcl_SendReadRsp                             251
     ?Subroutine89                                 7
     ?Subroutine74                                 4
     ?Subroutine97                                 7
     ?Subroutine65                                21
     ?Subroutine58                                10
     ?Subroutine44                                16
     ?Subroutine87                                 5
     ?Subroutine102                               11
     ?Subroutine42                                10
     ?Subroutine37                                13
     ?Subroutine36                                 9
     ?Subroutine20                                28
     ?Subroutine115                                5
     ?Subroutine83                                19
     ?Subroutine2                                 21
     ?Subroutine1                                 25
     ??Subroutine133_0                             5
     ?Subroutine85                                 3
     ?Subroutine107                               12
     zcl_SendWriteRequest                        222
     zcl_SendWriteRsp                            250
     zcl_SendDefaultRspCmd                       171
     ?Subroutine56                                 4
     zclProcessMessageMSG                       1321
     ?Subroutine122                                5
     ?Subroutine77                                15
     ?Subroutine76                                19
     ?Subroutine75                                11
     ?Subroutine69                                 7
     ?Subroutine95                                 5
     ?Subroutine59                                 7
     ?Subroutine53                                11
     ?Subroutine52                                11
     ?Subroutine49                                12
     ?Subroutine45                                 5
     ?Subroutine31                                 7
     ?Subroutine92                                 8
     ?Subroutine27                                15
     ?Subroutine26                                13
     ?Subroutine105                                8
     ?Subroutine78                                 8
     ?Subroutine25                                 3
     ??Subroutine131_0                             2
     ??Subroutine132_0                             2
     ?Subroutine34                                 3
     ??Subroutine134_0                             5
     ?Subroutine60                                 6
     ??Subroutine137_0                             4
     ??Subroutine146_0                             1
     ??Subroutine147_0                             5
     ?Subroutine48                                12
     ?Subroutine93                                 4
     ?Subroutine104                                9
     ?Subroutine106                               10
     ??Subroutine150_0                             6
     ?Subroutine43                                 4
     ?Subroutine84                                11
     ?Subroutine88                                 6
     zclParseHdr                                 223
     ?Subroutine118                                5
     ?Subroutine9                                  4
     ?Subroutine79                                 5
     ??Subroutine141_0                             4
     ?Subroutine80                                 9
     ?Subroutine108                                8
     ?Subroutine5                                  6
     ??Subroutine142_0                             5
     ??Subroutine144_0                             7
     ?Subroutine101                                4
     ?Subroutine12                                 8
     zclBuildHdr                                 102
     ?Subroutine54                                11
     ?Subroutine16                                 7
     ??Subroutine130_0                             7
     ?Subroutine8                                  6
     ?Subroutine117                                5
     zclFindAttrRec                              186
     zclFindClusterOption                        123
     ?Subroutine123                                5
     zclGetClusterOption                          32
     zclSetSecurityOption                         46
     zclSerializeData                            289
     ?Subroutine15                                 5
     ?Subroutine50                                 4
     ??Subroutine145_0                             4
     zclGetDataTypeLength                        131
     zclGetAttrDataLength                         29
     zclReadAttrData                              75
     ?Subroutine29                                 2
     ??Subroutine135_0                             2
     ??Subroutine136_0                             5
     zclWriteAttrData                            122
     ?Subroutine114                                6
     ??Subroutine148_0                             4
     ?Subroutine51                                 6
     ?Subroutine35                                 6
     zclParseInReadCmd                            99
     ?Subroutine32                                25
     ?Subroutine62                                10
     zclParseInReadRspCmd                        126
     ?Subroutine124                                9
     ?Subroutine61                                22
     ??Subroutine139_0                             4
     ?Subroutine21                                 7
     ??Subroutine140_0                            22
     ?Subroutine6                                  8
     ?Subroutine73                                14
     ?Subroutine71                                 5
     ?Subroutine112                                6
     ?Subroutine68                                16
     ?Subroutine67                                26
     ?Subroutine38                                24
     ?Subroutine23                                32
     ?Subroutine4                                 23
     ?Subroutine3                                 34
     ?Subroutine99                                 4
     ?Subroutine98                                15
     ?Subroutine94                                 9
     zclParseInWriteCmd                          103
     zclParseInWriteRspCmd                       123
     ?Subroutine70                                 4
     zclParseInDefaultRspCmd                      44
     ?Subroutine7                                  4
     zclProcessInReadCmd                         320
     ?Subroutine86                                 6
     ??Subroutine143_0                             8
     ?Subroutine55                                 1
     ??Subroutine149_0                            34
     ?Subroutine66                                 6
     ?Subroutine13                                 7
     zclProcessInWriteCmd                        350
     ?Subroutine47                                 6
     ??Subroutine151_0                             6
     ?Subroutine24                                19
     ?Subroutine22                                38
     ?Subroutine10                                13
     ?Subroutine19                                 6
     zclProcessInWriteUndividedCmd               693
     ?Subroutine72                                26
     ?Subroutine30                                 6
     ?Subroutine18                                10
     ?Subroutine46                                 5
     zclSendMsg                                  152
     ?<Initializer for zcl_RegisteredMsgTaskID>    1
     ??zcl_Init?relay                              6
     ??zcl_event_loop?relay                        6
     ??zcl_registerPlugin?relay                    6
     ??zcl_registerAttrList?relay                  6
     ??zcl_registerClusterOptionList?relay         6
     ??zcl_registerValidateAttrData?relay          6
     ??zcl_registerForMsg?relay                    6
     ??zcl_DeviceOperational?relay                 6
     ??zcl_SendCommand?relay                       6
     ??zcl_SendRead?relay                          6
     ??zcl_SendReadRsp?relay                       6
     ??zcl_SendWriteRequest?relay                  6
     ??zcl_SendWriteRsp?relay                      6
     ??zcl_SendDefaultRspCmd?relay                 6
     ??zclProcessMessageMSG?relay                  6
     ??zclParseHdr?relay                           6
     ??zclBuildHdr?relay                           6
     ??zclFindAttrRec?relay                        6
     ??zclFindClusterOption?relay                  6
     ??zclGetClusterOption?relay                   6
     ??zclSetSecurityOption?relay                  6
     ??zclSerializeData?relay                      6
     ??zclGetDataTypeLength?relay                  6
     ??zclGetAttrDataLength?relay                  6
     ??zclReadAttrData?relay                       6
     ??zclWriteAttrData?relay                      6
     ??zclParseInReadCmd?relay                     6
     ??zclParseInReadRspCmd?relay                  6
     ??zclParseInWriteCmd?relay                    6
     ??zclParseInWriteRspCmd?relay                 6
     ??zclParseInDefaultRspCmd?relay               6
     ??zclProcessInReadCmd?relay                   6
     ??zclProcessInWriteCmd?relay                  6
     ??zclProcessInWriteUndividedCmd?relay         6
     ??zclSendMsg?relay                            6
     ?<Constant "3">                               2
     ?<Constant ",">                               2
     ?<Constant "$\r\n">                           4

 
 8 256 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    56 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
 8 523 bytes of CODE  memory
     8 bytes of CONST memory
    12 bytes of XDATA memory

Errors: none
Warnings: 1
