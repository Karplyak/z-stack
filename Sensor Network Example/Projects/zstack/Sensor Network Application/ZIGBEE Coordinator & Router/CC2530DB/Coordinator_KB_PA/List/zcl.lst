###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                03/Sep/2013  01:19:33 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Components\stack\zcl\zcl.c                 #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Components\stack\zcl\zcl.c" -D CC2530 -D   #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\zcl.lst     #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\zcl.r51      #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Components\stack\zcl\zcl.c
      1          #include "ZComDef.h"
      2          #include "OSAL.h"
      3          #include "OSAL_Tasks.h"
      4          #include "AF.h"
      5          #include "ZDConfig.h"
      6          #include "zcl.h"
      7          #include "zcl_general.h"
      8          #include <string.h>
      9          #include <stdio.h>
     10          
     11          #if defined ( INTER_PAN )
     12            #include "stub_aps.h"
     13          #endif
     14          
     15          #include "hal_uart.h"
     16          #include "hal_timer.h"
     17          #include "hal_led.h"
     18          #if defined (LCD_SUPPORTED)
     19            #include "hal_lcd.h"
     20          #endif
     21          
     22          #if defined(M160)
     23            #include "hal_sensor.h"
     24            #include "M160.h"
     25          #endif 
     26          
     27          /* MT */
     28          #include "MT_UART.h"
     29          #include "MT.h"
     30          
     31          /*** Frame Control ***/
     32          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     33          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     34          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     35          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     36          
     37          /*** Attribute Access Control ***/
     38          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     39          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     40          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     41          
     42          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     43          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     44          
     45          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     46                                                  (zclHdr).fc.manuSpecific == 0          && \
     47                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     48          
     49          // Commands that have corresponding responses
     50          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ            || \
     51                                                  (cmd) == ZCL_CMD_WRITE           || \
     52                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED || \
     53                                                  (cmd) == ZCL_CMD_CONFIG_REPORT   || \
     54                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG || \
     55                                                  (cmd) == ZCL_CMD_DISCOVER        || \
     56                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     57          
     58          typedef struct zclLibPlugin
     59          {
     60            struct zclLibPlugin *next;
     61            uint16              startClusterID;    // starting cluster ID
     62            uint16              endClusterID;      // ending cluster ID
     63            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
     64          } zclLibPlugin_t;
     65          
     66          // Attribute record list item
     67          typedef struct zclAttrRecsList
     68          {
     69            struct zclAttrRecsList *next;
     70            uint8                  endpoint;      // Used to link it into the endpoint descriptor
     71            uint8                  numAttributes; // Number of the following records
     72            CONST zclAttrRec_t     *attrs;        // attribute records
     73          } zclAttrRecsList;
     74          
     75          // Cluster option list item
     76          typedef struct zclClusterOptionList
     77          {
     78            struct zclClusterOptionList *next;
     79            uint8                       endpoint;   // Used to link it into the endpoint descriptor
     80            uint8                       numOptions; // Number of the following records
     81            zclOptionRec_t              *options;   // option records
     82          } zclClusterOptionList;
     83          
     84          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
     85          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
     86          
     87          typedef struct
     88          {
     89            zclParseInProfileCmd_t   pfnParseInProfile;
     90            zclProcessInProfileCmd_t pfnProcessInProfile;
     91          } zclCmdItems_t;
     92          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     94          
     95          // global entry

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          int stack = 0;
   \                     stack:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          char global_entry[9][4];
   \                     global_entry:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          byte global_recv_data[9][30];
   \                     global_recv_data:
   \   000000                DS 270
   \   00010E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint8 global_data_length[9];
   \                     global_data_length:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    100          
    101          // The task Id of the Application where the unprocessed Foundation
    102          // Command/Response messages will be sent to.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
   \                     zcl_RegisteredMsgTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    104          
    105          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          zclValidateAttrData_t zcl_ValidateAttrDataCB = NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    107          
    108          // ZCL Sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint8 zcl_SeqNum = 0x00;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          static zclLibPlugin_t *plugins;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          static zclAttrRecsList *attrList;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          static zclClusterOptionList *clusterOptionList;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          static uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    115          
    116          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt );  // Not static for ZNP build.
    117          void zclZigbeeReceiverMSG(afIncomingMSGPacket_t *msg);
    118          
    119          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    120          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    121          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    122          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    123          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    124          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    125          
    126          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    127          
    128          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)
    129            static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf );
    130          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
    131          
    132          #ifdef ZCL_READ
    133            static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    134            static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    135          #endif // ZCL_READ
    136          
    137          #ifdef ZCL_WRITE
    138            static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    139            static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    140            static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    141            static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    142          #endif // ZCL_WRITE
    143          
    144          #ifdef ZCL_REPORT
    145            static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    146            static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    147          #endif // ZCL_REPORT
    148          
    149          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    150          
    151          #ifdef ZCL_DISCOVER
    152            static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint16 *attrId, zclAttrRec_t *pAttr );
    153            static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd );
    154            static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    155          #endif // ZCL_DISCOVER
    156          
    157          static uint8 zclSendMsg( zclIncoming_t *pInMsg );
    158          

   \                                 In  segment CODE_C, align 1
    159          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ........     DW ??zclParseInReadCmd?relay, ??zclProcessInReadCmd?relay
   \   000004   ........     DW ??zclParseInReadRspCmd?relay, ??zclSendMsg?relay
   \   000008   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay
   \   00000C   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteUndividedCmd?relay
   \   000010   ........     DW ??zclParseInWriteRspCmd?relay, ??zclSendMsg?relay
   \   000014   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay, 0H, 0H, 0H
   \            00000000
   \            0000    
   \   00001E   00000000     DW 0H, 0H, 0H, 0H, 0H, 0H, 0H, ??zclParseInDefaultRspCmd?relay
   \            00000000
   \            00000000
   \            0000....
   \   00002E   ....0000     DW ??zclSendMsg?relay, 0H, 0H, 0H, 0H
   \            00000000
   \            0000    
    160          {
    161          #ifdef ZCL_READ
    162            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    163            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zclSendMsg                      },
    164          #else
    165            /* ZCL_CMD_READ */                { NULL,                          NULL                            },
    166            /* ZCL_CMD_READ_RSP */            { NULL,                          NULL                            },
    167          #endif // ZCL_READ
    168          
    169          #ifdef ZCL_WRITE
    170            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    171            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    172            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zclSendMsg                      },
    173            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    174          #else
    175            /* ZCL_CMD_WRITE */               { NULL,                          NULL                            },
    176            /* ZCL_CMD_WRITE_UNDIVIDED */     { NULL,                          NULL                            },
    177            /* ZCL_CMD_WRITE_RSP */           { NULL,                          NULL                            },
    178            /* ZCL_CMD_WRITE_NO_RSP */        { NULL,                          NULL                            },
    179          #endif // ZCL_WRITE
    180          
    181          #ifdef ZCL_REPORT
    182            /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zclSendMsg                      },
    183            /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zclSendMsg                      },
    184            /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zclSendMsg                      },
    185            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zclSendMsg                      },
    186            /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zclSendMsg                      },
    187          #else
    188            /* ZCL_CMD_CONFIG_REPORT */       { NULL,                          NULL                            },
    189            /* ZCL_CMD_CONFIG_REPORT_RSP */   { NULL,                          NULL                            },
    190            /* ZCL_CMD_READ_REPORT_CFG */     { NULL,                          NULL                            },
    191            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { NULL,                          NULL                            },
    192            /* ZCL_CMD_REPORT */              { NULL,                          NULL                            },
    193          #endif // ZCL_REPORT
    194          
    195            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zclSendMsg                      },
    196            
    197          #ifdef ZCL_DISCOVER  
    198            /* ZCL_CMD_DISCOVER */            { zclParseInDiscCmd,             zclProcessInDiscCmd             },
    199            /* ZCL_CMD_DISCOVER_RSP */        { zclParseInDiscRspCmd,          zclSendMsg                      }
    200          #else
    201            /* ZCL_CMD_DISCOVER */            { NULL,                          NULL                            },
    202            /* ZCL_CMD_DISCOVER_RSP */        { NULL,                          NULL                            }
    203          #endif // ZCL_DISCOVER
    204          };
    205          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    207          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    208            zcl_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#zcl_TaskID
   \   000008   F0           MOVX    @DPTR,A
    209          
    210            plugins = (zclLibPlugin_t  *)NULL;
   \   000009   90....       MOV     DPTR,#plugins
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
    211            attrList = (zclAttrRecsList *)NULL;
   \   000010   90....       MOV     DPTR,#attrList
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    212            clusterOptionList = (zclClusterOptionList *)NULL;
   \   000016   90....       MOV     DPTR,#clusterOptionList
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    213          }
   \   00001C   02....       LJMP    ?Subroutine107 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    214          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    215          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    216          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    217            uint8 *msgPtr;
    218            (void)task_id;  // Intentionally unreferenced parameter
    219            
    220            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??zcl_event_loop_0
   \   000011   E9           MOV     A,R1
   \                     ??zcl_event_loop_0:
   \   000012   604B         JZ      ??zcl_event_loop_1
    221            {
    222              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000014                ; Setup parameters for call to function osal_msg_receive
   \   000014   800E         SJMP    ??zcl_event_loop_2
    223              while ( msgPtr != NULL )
    224              {
    225                uint8 dealloc = TRUE;
    226                
    227                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    228                {
    229                  zclProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_3:
   \   000016                ; Setup parameters for call to function zclProcessMessageMSG
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??zclProcessMessageMSG?relay
    230                }
    231                else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
    232                {
    233                  osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr ); // send it to another task to process.
    234                  dealloc = FALSE;
    235                }
    236                if ( dealloc ) // Release the memory
    237                {
    238                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_4:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    239                }
    240                msgPtr = osal_msg_receive( zcl_TaskID ); // Next
   \                     ??zcl_event_loop_2:
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \   000024   90....       MOV     DPTR,#zcl_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   \   000030   AE..         MOV     R6,?V0 + 2
   \   000032   AF..         MOV     R7,?V0 + 3
   \   000034   EE           MOV     A,R6
   \   000035   7001         JNZ     ??zcl_event_loop_5
   \   000037   EF           MOV     A,R7
   \                     ??zcl_event_loop_5:
   \   000038   601C         JZ      ??zcl_event_loop_6
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   641A         XRL     A,#0x1a
   \   000041   60D3         JZ      ??zcl_event_loop_3
   \   000043   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FF         XRL     A,#0xff
   \   000049   60D2         JZ      ??zcl_event_loop_4
   \   00004B                ; Setup parameters for call to function osal_msg_send
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_send?relay
   \   000054   80CE         SJMP    ??zcl_event_loop_2
    241              } 
    242              return (events ^ SYS_EVENT_MSG);// return unprocessed events
   \                     ??zcl_event_loop_6:
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   7480         MOV     A,#-0x80
   \   00005A   65..         XRL     A,?V0 + 1
   \   00005C   FB           MOV     R3,A
   \   00005D   8004         SJMP    ??zcl_event_loop_7
    243            }
    244            return 0; // Discard unknown events
   \                     ??zcl_event_loop_1:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??zcl_event_loop_7:
   \   000063   02....       LJMP    ?Subroutine108 & 0xFFFF
    245          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    246          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    248                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    249          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine39 & 0xFFFF
    250            zclLibPlugin_t *pNewItem;
    251            zclLibPlugin_t *pLoop;
    252          
    253            // Fill in the new profile list
    254            pNewItem = osal_mem_alloc( sizeof( zclLibPlugin_t ) );
   \                     ??CrossCallReturnLabel_46:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A08         MOV     R2,#0x8
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_mem_alloc?relay
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
   \   000020   A8..         MOV     R0,?V0 + 4
   \   000022   A9..         MOV     R1,?V0 + 5
    255            if ( pNewItem == NULL )
   \   000024   E8           MOV     A,R0
   \   000025   7001         JNZ     ??zcl_registerPlugin_0
   \   000027   E9           MOV     A,R1
   \                     ??zcl_registerPlugin_0:
   \   000028   7004         JNZ     ??zcl_registerPlugin_1
    256              return (ZMemError);
   \   00002A   7910         MOV     R1,#0x10
   \   00002C   8051         SJMP    ??CrossCallReturnLabel_14
    257          
    258            // Fill in the plugin record.
    259            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_1:
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine14 & 0xFFFF
    260            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_19:
   \   000038   A3           INC     DPTR
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   12....       LCALL   ?Subroutine14 & 0xFFFF
    261            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_20:
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0 + 3
   \   00004B   F0           MOVX    @DPTR,A
    262            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ?Subroutine17 & 0xFFFF
    263          
    264            if (  plugins == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_309:
   \   00005B   90....       MOV     DPTR,#plugins
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   7002         JNZ     ??zcl_registerPlugin_2
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \                     ??zcl_registerPlugin_2:
   \   000063   90....       MOV     DPTR,#plugins
   \   000066   6014         JZ      ??zcl_registerPlugin_3
    265            {
    266              plugins = pNewItem;
    267            }
    268            else
    269            {
    270              // Look for end of list
    271              pLoop = plugins;
   \   000068   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   00006B   8003         SJMP    ??zcl_registerPlugin_4
    272              while ( pLoop->next != NULL )
    273                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_5:
   \   00006D   EA           MOV     A,R2
   \   00006E   FC           MOV     R4,A
   \   00006F   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_4:
   \   000070   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000073   7001         JNZ     ??zcl_registerPlugin_6
   \   000075   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_6:
   \   000076   70F5         JNZ     ??zcl_registerPlugin_5
    274          
    275              pLoop->next = pNewItem; // Put new item at end of list
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
    276            }
   \                     ??zcl_registerPlugin_3:
   \   00007C   12....       LCALL   ?Subroutine11 & 0xFFFF
    277            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_14:
   \   00007F                REQUIRE ?Subroutine109
   \   00007F                ; // Fall through to label ?Subroutine109
    278          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine124_0
   \   000005                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine151_0
   \   000002                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    279          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    281          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine62 & 0xFFFF
    282            zclAttrRecsList *pNewItem;
    283            zclAttrRecsList *pLoop;
    284          
    285            pNewItem = osal_mem_alloc( sizeof( zclAttrRecsList ) ); // Fill in the new profile list
    286            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_83:
   \   000008   7001         JNZ     ??zcl_registerAttrList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerAttrList_0:
   \   00000B   7004         JNZ     ??zcl_registerAttrList_1
    287              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_15
    288          
    289            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    290            pNewItem->endpoint = endpoint;
    291            pNewItem->numAttributes = numAttr;
    292            pNewItem->attrs = newAttrList;
    293          
    294            if ( attrList == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_0:
   \   000014   90....       MOV     DPTR,#attrList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerAttrList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerAttrList_2:
   \   00001C   90....       MOV     DPTR,#attrList
   \   00001F   6014         JZ      ??zcl_registerAttrList_3
    295            {
    296              attrList = pNewItem;
    297            }
    298            else
    299            {
    300              pLoop = attrList; // Look for end of list
   \   000021   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000024   8003         SJMP    ??zcl_registerAttrList_4
    301              while ( pLoop->next != NULL )
    302                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_4:
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00002C   7001         JNZ     ??zcl_registerAttrList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_6:
   \   00002F   70F5         JNZ     ??zcl_registerAttrList_5
    303          
    304              pLoop->next = pNewItem; // Put new item at end of list
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    305            }
   \                     ??zcl_registerAttrList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    306            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_15:
   \   000038   02....       LJMP    ?Subroutine108 & 0xFFFF
    307          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   89..         MOV     ?V0 + 0,R1
   \   000002   8A..         MOV     ?V0 + 1,R2
   \   000004   EC           MOV     A,R4
   \   000005   FE           MOV     R6,A
   \   000006   ED           MOV     A,R5
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A06         MOV     R2,#0x6
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 2,R2
   \   000011   8B..         MOV     ?V0 + 3,R3
   \   000013   A8..         MOV     R0,?V0 + 2
   \   000015   A9..         MOV     R1,?V0 + 3
   \   000017   E8           MOV     A,R0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00000A   A3           INC     DPTR
   \   00000B   E5..         MOV     A,?V0 + 0
   \   00000D   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000010   E5..         MOV     A,?V0 + 1
   \   000012   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000015   A3           INC     DPTR
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EF           MOV     A,R7
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    308          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    310          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine62 & 0xFFFF
    311            zclClusterOptionList *pNewItem;
    312            zclClusterOptionList *pLoop;
    313          
    314            // Fill in the new profile list
    315            pNewItem = osal_mem_alloc( sizeof( zclClusterOptionList ) );
    316            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_84:
   \   000008   7001         JNZ     ??zcl_registerClusterOptionList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerClusterOptionList_0:
   \   00000B   7004         JNZ     ??zcl_registerClusterOptionList_1
    317              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_16
    318          
    319            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    320            pNewItem->endpoint = endpoint;
    321            pNewItem->numOptions = numOption;
    322            pNewItem->options = optionList;
    323          
    324            // Find spot in list
    325            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_1:
   \   000014   90....       MOV     DPTR,#clusterOptionList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerClusterOptionList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerClusterOptionList_2:
   \   00001C   90....       MOV     DPTR,#clusterOptionList
   \   00001F   6014         JZ      ??zcl_registerClusterOptionList_3
    326            {
    327              clusterOptionList = pNewItem;
    328            }
    329            else
    330            {
    331              // Look for end of list
    332              pLoop = clusterOptionList;
   \   000021   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000024   8003         SJMP    ??zcl_registerClusterOptionList_4
    333              while ( pLoop->next != NULL )
    334                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_4:
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00002C   7001         JNZ     ??zcl_registerClusterOptionList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_6:
   \   00002F   70F5         JNZ     ??zcl_registerClusterOptionList_5
    335          
    336              // Put new item at end of list
    337              pLoop->next = pNewItem;
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    338            }
   \                     ??zcl_registerClusterOptionList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    339            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_16:
   \   000038   02....       LJMP    ?Subroutine108 & 0xFFFF
    340          }
    341          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    343          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    344            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL   ??Subroutine151_0 & 0xFFFF
    345            
    346            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_305:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   80..         SJMP    ?Subroutine107
    347          }
    348          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    350          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    351            // Allow only the first task
    352            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000004   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64FF         XRL     A,#0xff
   \   00000A   7006         JNZ     ??zcl_registerForMsg_0
    353            {
    354              zcl_RegisteredMsgTaskID = taskId;  
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
    355              return ( true );
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8002         SJMP    ??zcl_registerForMsg_1
    356            }
    357            return ( false );
   \                     ??zcl_registerForMsg_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??zcl_registerForMsg_1:
   \   000014                REQUIRE ?Subroutine107
   \   000014                ; // Fall through to label ?Subroutine107
    358          }
    359          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, 
   \                     zcl_DeviceOperational:
    361                                              uint8 frameType, uint8 cmd, uint16 profileID )
    362          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    363            zclAttrRec_t attrRec;
    364            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
    365            (void)profileID;  // Intentionally unreferenced parameter
    366            
    367            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it 
    368            // cannot send or respond to application level commands, other than commands
    369            // to read or write attributes. Note that the Identify cluster cannot be 
    370            // disabled, and remains functional regardless of this setting.
    371            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000013   EC           MOV     A,R4
   \   000014   700A         JNZ     ??zcl_DeviceOperational_0
   \   000016   ED           MOV     A,R5
   \   000017   C3           CLR     C
   \   000018   9406         SUBB    A,#0x6
   \   00001A   5004         JNC     ??zcl_DeviceOperational_0
    372              return ( TRUE );
   \                     ??zcl_DeviceOperational_1:
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   804E         SJMP    ??zcl_DeviceOperational_2
    373            
    374            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV     A,#0x3
   \   000022   6A           XRL     A,R2
   \   000023   7001         JNZ     ??zcl_DeviceOperational_3
   \   000025   EB           MOV     A,R3
   \                     ??zcl_DeviceOperational_3:
   \   000026   60F4         JZ      ??zcl_DeviceOperational_1
    375              return ( TRUE );
    376            
    377            // Is device enabled?
    378            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC, ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000028                ; Setup parameters for call to function zclFindAttrRec
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   8582..       MOV     ?V0 + 0,DPL
   \   000030   8583..       MOV     ?V0 + 1,DPH
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C12         MOV     R4,#0x12
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??zclFindAttrRec?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6016         JZ      ??zcl_DeviceOperational_4
    379              zclReadAttrData( &deviceEnabled, &attrRec );
   \   00004B                ; Setup parameters for call to function zclReadAttrData
   \   00004B   7401         MOV     A,#0x1
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AC82         MOV     R4,DPL
   \   000052   AD83         MOV     R5,DPH
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??zclReadAttrData?relay
    380            
    381            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_4:
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   60B0         JZ      ??zcl_DeviceOperational_1
   \   00006C   7900         MOV     R1,#0x0
   \                     ??zcl_DeviceOperational_2:
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   02....       LJMP    ?Subroutine117 & 0xFFFF
    382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
    385                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
    386                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
    387                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    388          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
   \   000010   742A         MOV     A,#0x2a
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   742B         MOV     A,#0x2b
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
   \   00001F   742C         MOV     A,#0x2c
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   742D         MOV     A,#0x2d
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
   \   00002F   742E         MOV     A,#0x2e
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 12,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 13,A
   \   00003B   7430         MOV     A,#0x30
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 7,A
   \   000043   7431         MOV     A,#0x31
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 14,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 15,A
    389            endPointDesc_t *epDesc;
    390            zclFrameHdr_t hdr;
    391            uint8 *msgBuf;
    392            uint16 msgLen;
    393            uint8 *pBuf;
    394            afAddrType_t dstAddr;
    395            uint8 options;
    396            ZStatus_t status;
    397          
    398            osal_memcpy( &dstAddr, destAddr, sizeof ( afAddrType_t ) );
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8A..         MOV     ?V0 + 4,R2
   \   000051   8B..         MOV     ?V0 + 5,R3
   \   000053   75..00       MOV     ?V0 + 6,#0x0
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C0C         MOV     R4,#0xc
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    399          
    400            epDesc = afFindEndPointDesc( srcEP );
   \   00006E                ; Setup parameters for call to function afFindEndPointDesc
   \   00006E   EF           MOV     A,R7
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??afFindEndPointDesc?relay
   \   000073   8A..         MOV     ?V0 + 10,R2
   \   000075   8B..         MOV     ?V0 + 11,R3
    401            if ( epDesc == NULL )
   \   000077   EA           MOV     A,R2
   \   000078   7001         JNZ     ??zcl_SendCommand_0
   \   00007A   EB           MOV     A,R3
   \                     ??zcl_SendCommand_0:
   \   00007B   7005         JNZ     ??zcl_SendCommand_1
    402              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_2:
   \   00007D   7902         MOV     R1,#0x2
   \   00007F   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    403          
    404            if ( clusterID == ZCL_INVALID_CLUSTER_ID )
   \                     ??zcl_SendCommand_1:
   \   000082   74FF         MOV     A,#-0x1
   \   000084   65..         XRL     A,?V0 + 0
   \   000086   7004         JNZ     ??zcl_SendCommand_4
   \   000088   74FF         MOV     A,#-0x1
   \   00008A   65..         XRL     A,?V0 + 1
   \                     ??zcl_SendCommand_4:
   \   00008C   60EF         JZ      ??zcl_SendCommand_2
    405              return ( ZInvalidParameter ); // EMBEDDED RETURN
    406          
    407          #if defined ( INTER_PAN )
    408            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
    409              options = AF_TX_OPTIONS_NONE;
    410            else
    411          #endif
    412              options = zclGetClusterOption( srcEP, clusterID );
   \   00008E                ; Setup parameters for call to function zclGetClusterOption
   \   00008E   AA..         MOV     R2,?V0 + 0
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   EF           MOV     A,R7
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??zclGetClusterOption?relay
   \   000097   E9           MOV     A,R1
   \   000098   F5..         MOV     ?V0 + 2,A
    413            
    414            osal_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \   00009A                ; Setup parameters for call to function osal_memset
   \   00009A   7C06         MOV     R4,#0x6
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??osal_memset?relay
    415          
    416            // Not Profile wide command (like READ, WRITE)
    417            if ( specific )
   \   0000AD   E5..         MOV     A,?V0 + 3
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   6015         JZ      ??zcl_SendCommand_5
    418              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   54FC         ANL     A,#0xfc
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   7401         MOV     A,#0x1
   \   0000C0   48           ORL     A,R0
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E9           MOV     A,R1
   \   0000CA   8006         SJMP    ??zcl_SendCommand_6
    419            else
    420              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_5:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   54FC         ANL     A,#0xfc
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \                     ??zcl_SendCommand_6:
   \   0000D2   F0           MOVX    @DPTR,A
    421          
    422            if ((epDesc->simpleDesc == NULL) ||
    423                (zcl_DeviceOperational(srcEP, clusterID, hdr.fc.type, cmd, epDesc->simpleDesc->AppProfId) == FALSE))
   \   0000D3   85..82       MOV     DPL,?V0 + 10
   \   0000D6   85..83       MOV     DPH,?V0 + 11
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000DF   7002         JNZ     ??zcl_SendCommand_7
   \   0000E1   E583         MOV     A,DPH
   \                     ??zcl_SendCommand_7:
   \   0000E3   6020         JZ      ??zcl_SendCommand_8
   \   0000E5                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E5   A3           INC     DPTR
   \   0000E6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000E9   EE           MOV     A,R6
   \   0000EA   FD           MOV     R5,A
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   5403         ANL     A,#0x3
   \   0000F3   FC           MOV     R4,A
   \   0000F4   AA..         MOV     R2,?V0 + 0
   \   0000F6   AB..         MOV     R3,?V0 + 1
   \   0000F8   EF           MOV     A,R7
   \   0000F9   F9           MOV     R1,A
   \   0000FA   12....       LCALL   ??zcl_DeviceOperational?relay
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000102   E9           MOV     A,R1
   \   000103   7005         JNZ     ??zcl_SendCommand_9
    424              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_8:
   \   000105   7901         MOV     R1,#0x1
   \   000107   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    425            
    426            if ( manuCode != 0 ) // Fill in the Maufacturer Code
   \                     ??zcl_SendCommand_9:
   \   00010A   E5..         MOV     A,?V0 + 12
   \   00010C   7002         JNZ     ??zcl_SendCommand_10
   \   00010E   E5..         MOV     A,?V0 + 13
   \                     ??zcl_SendCommand_10:
   \   000110   6019         JZ      ??zcl_SendCommand_11
    427            {
    428              hdr.fc.manuSpecific = 1;
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   4404         ORL     A,#0x4
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F0           MOVX    @DPTR,A
    429              hdr.manuCode = manuCode;
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E5..         MOV     A,?V0 + 12
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   E5..         MOV     A,?V0 + 13
   \   00012A   F0           MOVX    @DPTR,A
    430            }
    431            
    432            if ( direction ) // Set the Command Direction
   \                     ??zcl_SendCommand_11:
   \   00012B   E5..         MOV     A,?V0 + 9
   \   00012D   85..82       MOV     DPL,?XSP + 0
   \   000130   85..83       MOV     DPH,?XSP + 1
   \   000133   6005         JZ      ??zcl_SendCommand_12
    433              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000135   E0           MOVX    A,@DPTR
   \   000136   4408         ORL     A,#0x8
   \   000138   8003         SJMP    ??zcl_SendCommand_13
    434            else
    435              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_12:
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   54F7         ANL     A,#0xf7
   \                     ??zcl_SendCommand_13:
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F0           MOVX    @DPTR,A
    436          
    437            if ( disableDefaultRsp ) // Set the Disable Default Response field
   \   000141   E5..         MOV     A,?V0 + 8
   \   000143   85..82       MOV     DPL,?XSP + 0
   \   000146   85..83       MOV     DPH,?XSP + 1
   \   000149   6005         JZ      ??zcl_SendCommand_14
    438              hdr.fc.disableDefaultRsp = 1;
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   4410         ORL     A,#0x10
   \   00014E   8003         SJMP    ??zcl_SendCommand_15
    439            else
    440              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_14:
   \   000150   E0           MOVX    A,@DPTR
   \   000151   54EF         ANL     A,#0xef
   \                     ??zcl_SendCommand_15:
   \   000153   F0           MOVX    @DPTR,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F0           MOVX    @DPTR,A
    441                               
    442            hdr.transSeqNum = seqNum; // Fill in the Transaction Sequence Number
   \   000157   7404         MOV     A,#0x4
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E5..         MOV     A,?V0 + 7
   \   00015E   F0           MOVX    @DPTR,A
    443            
    444            hdr.commandID = cmd; // Fill in the command
   \   00015F   7405         MOV     A,#0x5
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   EE           MOV     A,R6
   \   000165   F0           MOVX    @DPTR,A
    445            
    446            msgLen = zclCalcHdrSize( &hdr ); // calculate the needed buffer size
   \   000166   75..03       MOV     ?V0 + 4,#0x3
   \   000169   85..82       MOV     DPL,?XSP + 0
   \   00016C   85..83       MOV     DPH,?XSP + 1
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   5404         ANL     A,#0x4
   \   000172   6003         JZ      ??zcl_SendCommand_16
   \   000174   75..05       MOV     ?V0 + 4,#0x5
    447            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_16:
   \   000177   E5..         MOV     A,?V0 + 14
   \   000179   25..         ADD     A,?V0 + 4
   \   00017B   F5..         MOV     ?V0 + 12,A
   \   00017D   E5..         MOV     A,?V0 + 15
   \   00017F   3400         ADDC    A,#0x0
   \   000181   F5..         MOV     ?V0 + 13,A
    448          
    449            msgBuf = osal_mem_alloc( msgLen ); // Allocate the buffer needed
   \   000183                ; Setup parameters for call to function osal_mem_alloc
   \   000183   AA..         MOV     R2,?V0 + 12
   \   000185   FB           MOV     R3,A
   \   000186   12....       LCALL   ??osal_mem_alloc?relay
   \   000189   8A..         MOV     ?V0 + 8,R2
   \   00018B   8B..         MOV     ?V0 + 9,R3
    450            if ( msgBuf != NULL )
   \   00018D   EA           MOV     A,R2
   \   00018E   7001         JNZ     ??zcl_SendCommand_17
   \   000190   EB           MOV     A,R3
   \                     ??zcl_SendCommand_17:
   \   000191   606B         JZ      ??zcl_SendCommand_18
    451            {
    452              pBuf = zclBuildHdr( &hdr, msgBuf ); // Fill in the ZCL Header
    453          
    454              osal_memcpy( pBuf, cmdFormat, cmdFormatLen ); // Fill in the command frame
   \   000193                ; Setup parameters for call to function osal_memcpy
   \   000193   7433         MOV     A,#0x33
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00019B   78..         MOV     R0,#?V0 + 4
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A0                ; Setup parameters for call to function zclBuildHdr
   \   0001A0   AC..         MOV     R4,?V0 + 8
   \   0001A2   AD..         MOV     R5,?V0 + 9
   \   0001A4   7403         MOV     A,#0x3
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   AA82         MOV     R2,DPL
   \   0001AB   AB83         MOV     R3,DPH
   \   0001AD   12....       LCALL   ??zclBuildHdr?relay
   \   0001B0   AC..         MOV     R4,?V0 + 14
   \   0001B2   AD..         MOV     R5,?V0 + 15
   \   0001B4   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
    455          
    456              status = AF_DataRequest( &dstAddr, epDesc, clusterID, msgLen, msgBuf, 
    457                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );  
   \   0001BA                ; Setup parameters for call to function AF_DataRequest
   \   0001BA   75..1E       MOV     ?V0 + 3,#0x1e
   \   0001BD   78..         MOV     R0,#?V0 + 3
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C2   75....       MOV     ?V0 + 4,#(zcl_TransID & 0xff)
   \   0001C5   75....       MOV     ?V0 + 5,#((zcl_TransID >> 8) & 0xff)
   \   0001C8   78..         MOV     R0,#?V0 + 4
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CD   78..         MOV     R0,#?V0 + 8
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   78..         MOV     R0,#?V0 + 12
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   78..         MOV     R0,#?V0 + 0
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   A9..         MOV     R1,?V0 + 2
   \   0001DE   AC..         MOV     R4,?V0 + 10
   \   0001E0   AD..         MOV     R5,?V0 + 11
   \   0001E2   740F         MOV     A,#0xf
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   AA82         MOV     R2,DPL
   \   0001E9   AB83         MOV     R3,DPH
   \   0001EB   12....       LCALL   ??AF_DataRequest?relay
   \   0001EE   7409         MOV     A,#0x9
   \   0001F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F3   E9           MOV     A,R1
   \   0001F4   FE           MOV     R6,A
    458              osal_mem_free ( msgBuf );
   \   0001F5                ; Setup parameters for call to function osal_mem_free
   \   0001F5   AA..         MOV     R2,?V0 + 8
   \   0001F7   AB..         MOV     R3,?V0 + 9
   \   0001F9   12....       LCALL   ??osal_mem_free?relay
   \   0001FC   8002         SJMP    ??zcl_SendCommand_19
    459            }
    460            else
    461              status = ZMemError;
   \                     ??zcl_SendCommand_18:
   \   0001FE   7E10         MOV     R6,#0x10
    462          
    463            return ( status );
   \                     ??zcl_SendCommand_19:
   \   000200   EE           MOV     A,R6
   \   000201   F9           MOV     R1,A
   \                     ??zcl_SendCommand_3:
   \   000202                REQUIRE ?Subroutine123
   \   000202                ; // Fall through to label ?Subroutine123
    464          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   7412         MOV     A,#0x12
   \   000002   80..         SJMP    ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET
    465          
    466          #ifdef ZCL_READ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
    468                                  uint16 clusterID, zclReadCmd_t *readCmd,
    469                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
    470          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 8,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 9,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 12,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 13,A
    471            uint8 dataLen;
    472            uint8 *buf;
    473            uint8 *pBuf;
    474            ZStatus_t status;
    475          
    476            dataLen = readCmd->numAttr * 2; // Attribute ID
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   33           RLC     A
   \   000036   FA           MOV     R2,A
    477          
    478            buf = osal_mem_alloc( dataLen );
   \   000037   8A82         MOV     DPL,R2
   \   000039   8582..       MOV     ?V0 + 6,DPL
   \   00003C   75..00       MOV     ?V0 + 7,#0x0
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   12....       LCALL   ?Subroutine63 & 0xFFFF
    479            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_85:
   \   000042   7001         JNZ     ??zcl_SendRead_0
   \   000044   EB           MOV     A,R3
   \                     ??zcl_SendRead_0:
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??zcl_SendRead_1 & 0xFFFF
    480            {
    481              uint8 i;
    482          
    483              pBuf = buf; // Load the buffer - serially
   \   00004A   A8..         MOV     R0,?V0 + 2
   \   00004C   A9..         MOV     R1,?V0 + 3
    484              for (i = 0; i < readCmd->numAttr; i++)
   \   00004E   75..00       MOV     ?V0 + 10,#0x0
   \   000051   801F         SJMP    ??zcl_SendRead_2
    485              {
    486                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_3:
   \   000053   E5..         MOV     A,?V0 + 10
   \   000055   C3           CLR     C
   \   000056   33           RLC     A
   \   000057   FA           MOV     R2,A
   \   000058   E4           CLR     A
   \   000059   33           RLC     A
   \   00005A   FB           MOV     R3,A
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   2A           ADD     A,R2
   \   00005E   F582         MOV     DPL,A
   \   000060   E5..         MOV     A,?V0 + 5
   \   000062   3B           ADDC    A,R3
   \   000063   F583         MOV     DPH,A
   \   000065   A3           INC     DPTR
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ?Subroutine41 & 0xFFFF
    487                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   \                     ??CrossCallReturnLabel_164:
   \   00006D   12....       LCALL   ?Subroutine28 & 0xFFFF
    488              }
   \                     ??CrossCallReturnLabel_174:
   \   000070   05..         INC     ?V0 + 10
   \                     ??zcl_SendRead_2:
   \   000072   85..82       MOV     DPL,?V0 + 4
   \   000075   85..83       MOV     DPH,?V0 + 5
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FA           MOV     R2,A
   \   00007A   E5..         MOV     A,?V0 + 10
   \   00007C   C3           CLR     C
   \   00007D   9A           SUBB    A,R2
   \   00007E   40D3         JC      ??zcl_SendRead_3
    489              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
    490                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );  
   \   000080                ; Setup parameters for call to function zcl_SendCommand
   \   000080   78..         MOV     R0,#?V0 + 2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   78..         MOV     R0,#?V0 + 6
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   E5..         MOV     A,?V0 + 13
   \   00008C   F5..         MOV     ?V0 + 4,A
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..00       MOV     ?V0 + 4,#0x0
   \   000096   75..00       MOV     ?V0 + 5,#0x0
   \   000099   78..         MOV     R0,#?V0 + 4
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   E5..         MOV     A,?V0 + 12
   \   0000A0   F5..         MOV     ?V0 + 4,A
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   E5..         MOV     A,?V0 + 9
   \   0000A9   F5..         MOV     ?V0 + 4,A
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..00       MOV     ?V0 + 4,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   78..         MOV     R0,#?V0 + 4
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   AC..         MOV     R4,?V0 + 0
   \   0000BF   AD..         MOV     R5,?V0 + 1
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   A9..         MOV     R1,?V0 + 8
   \   0000C7   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
   \   0000CE   FE           MOV     R6,A
    491              osal_mem_free( buf );
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V0 + 2
   \   0000D1   AB..         MOV     R3,?V0 + 3
   \   0000D3   12....       LCALL   ??osal_mem_free?relay
   \   0000D6   8002         SJMP    ??zcl_SendRead_4
    492            }
    493            else
    494              status = ZMemError;
   \                     ??zcl_SendRead_1:
   \   0000D8   7E10         MOV     R6,#0x10
    495          
    496            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000DA                REQUIRE ?Subroutine119
   \   0000DA                ; // Fall through to label ?Subroutine119
    497          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine126_0
   \   000002                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine127_0
   \   000005                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   A882         MOV     R0,DPL
   \   000002   A983         MOV     R1,DPH
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_mem_alloc?relay
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   7418         MOV     A,#0x18
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   02....       LJMP    ?Subroutine114 & 0xFFFF
    498          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7404         MOV     A,#0x4
   \   000004                REQUIRE ??Subroutine125_0
   \   000004                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
    500                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
    501                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    502          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 10,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 9,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 8,A
    503            uint8 *buf;
    504            uint8 *pBuf;
    505            zclReadRspStatus_t *statusRec;
    506            uint8 len = 0;
   \   00002E   7E00         MOV     R6,#0x0
    507            uint8 i;
    508            ZStatus_t status;
    509            
    510            // calculate the size of the command
    511            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000030   8E..         MOV     ?V0 + 5,R6
   \   000032   8021         SJMP    ??zcl_SendReadRsp_0
    512            {
    513              statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_1:
   \   000034   E5..         MOV     A,?V0 + 5
   \   000036   75F006       MOV     B,#0x6
   \   000039   12....       LCALL   ?Subroutine73 & 0xFFFF
    514              
    515              len += 2 + 1; // Attribute ID + Status
   \                     ??CrossCallReturnLabel_97:
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   0E           INC     R6
    516          
    517              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   700F         JNZ     ??zcl_SendReadRsp_2
    518              {
    519                len++; // Attribute Data Type
    520                len += zclGetAttrDataLength( statusRec->dataType, statusRec->data); // Attribute Data
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine42 & 0xFFFF
    521              }
    522            }
   \                     ??CrossCallReturnLabel_53:
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000050   04           INC     A
   \   000051   2E           ADD     A,R6
   \   000052   FE           MOV     R6,A
   \                     ??zcl_SendReadRsp_2:
   \   000053   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_0:
   \   000055   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000058   40DA         JC      ??zcl_SendReadRsp_1
    523          
    524            buf = osal_mem_alloc( len );
   \   00005A   12....       LCALL   ?Subroutine64 & 0xFFFF
    525            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_87:
   \   00005D   7001         JNZ     ??zcl_SendReadRsp_3
   \   00005F   EB           MOV     A,R3
   \                     ??zcl_SendReadRsp_3:
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??zcl_SendReadRsp_4 & 0xFFFF
    526            {
    527              // Load the buffer - serially
    528              pBuf = buf;
   \   000065   AE..         MOV     R6,?V0 + 6
   \   000067   AF..         MOV     R7,?V0 + 7
    529              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000069   75..00       MOV     ?V0 + 5,#0x0
   \   00006C   8028         SJMP    ??zcl_SendReadRsp_5
    530              {
    531                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_6:
   \   00006E   E5..         MOV     A,?V0 + 5
   \   000070   75F006       MOV     B,#0x6
   \   000073   12....       LCALL   ?Subroutine1 & 0xFFFF
    532                
    533                *pBuf++ = LO_UINT16( statusRec->attrID );
    534                *pBuf++ = HI_UINT16( statusRec->attrID );
    535                *pBuf++ = statusRec->status;
   \                     ??CrossCallReturnLabel_2:
   \   000076   FA           MOV     R2,A
   \   000077   E9           MOV     A,R1
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FB           MOV     R3,A
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   12....       LCALL   ?Subroutine101 & 0xFFFF
    536          
    537                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_137:
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   700B         JNZ     ??CrossCallReturnLabel_160
    538                {
    539                  *pBuf++ = statusRec->dataType;
   \   000089   E8           MOV     A,R0
   \   00008A   2403         ADD     A,#0x3
   \   00008C   12....       LCALL   ?Subroutine44 & 0xFFFF
    540                  zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
    541                  
    542                  // move pass attribute data
    543                  pBuf += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
    544                }
    545              } // for loop
   \                     ??CrossCallReturnLabel_57:
   \   00008F   2404         ADD     A,#0x4
   \   000091   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000094   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_5:
   \   000096   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000099   40D3         JC      ??zcl_SendReadRsp_6
    546          
    547              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE, 
    548                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \   00009B                ; Setup parameters for call to function zcl_SendCommand
   \   00009B   78..         MOV     R0,#?V0 + 6
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   E5..         MOV     A,?V0 + 8
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   75..00       MOV     ?V0 + 0,#0x0
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   E5..         MOV     A,?V0 + 9
   \   0000B8   F5..         MOV     ?V0 + 0,A
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   E5..         MOV     A,?V0 + 10
   \   0000C1   F5..         MOV     ?V0 + 0,A
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   75..00       MOV     ?V0 + 0,#0x0
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   75..01       MOV     ?V0 + 0,#0x1
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   740B         MOV     A,#0xb
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000E0   740D         MOV     A,#0xd
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   \   0000EC   FE           MOV     R6,A
    549              osal_mem_free( buf );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV     R2,?V0 + 6
   \   0000EF   AB..         MOV     R3,?V0 + 7
   \   0000F1   12....       LCALL   ??osal_mem_free?relay
   \   0000F4   8002         SJMP    ??zcl_SendReadRsp_7
    550            }
    551            else
    552              status = ZMemError;
   \                     ??zcl_SendReadRsp_4:
   \   0000F6   7E10         MOV     R6,#0x10
    553          
    554            return ( status );
   \                     ??zcl_SendReadRsp_7:
   \   0000F8   02....       LJMP    ?Subroutine118 & 0xFFFF
    555          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000005   E9           MOV     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000007                REQUIRE ?Subroutine114
   \   000007                ; // Fall through to label ?Subroutine114

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   75..00       MOV     ?V0 + 1,#0x0
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   AA..         MOV     R2,?V0 + 0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   EA           MOV     A,R2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   741E         MOV     A,#0x1e
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F5..         MOV     ?V0 + 12,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 13,A
   \   000007   85..82       MOV     DPL,?V0 + 12
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   E5..         MOV     A,?V0 + 5
   \   00000A   C3           CLR     C
   \   00000B   9A           SUBB    A,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   A9..         MOV     R1,?V0 + 4
   \   000005   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F5..         MOV     ?V0 + 14,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007   EE           MOV     A,R6
   \   000008   FC           MOV     R4,A
   \   000009   EF           MOV     A,R7
   \   00000A   FD           MOV     R5,A
   \   00000B   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00000E   12....       LCALL   ??zclSerializeData?relay
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000014   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000017   E9           MOV     A,R1
   \   000018   F8           MOV     R0,A
   \   000019   EE           MOV     A,R6
   \   00001A   28           ADD     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C                REQUIRE ?Subroutine113
   \   00001C                ; // Fall through to label ?Subroutine113

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000009   FB           MOV     R3,A
   \   00000A   85..82       MOV     DPL,?V0 + 12
   \   00000D   85..83       MOV     DPH,?V0 + 13
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   EC           MOV     A,R4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   ED           MOV     A,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   89..         MOV     ?V0 + 4,R1
   \   000012   741C         MOV     A,#0x1c
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   AE82         MOV     R6,DPL
   \   00000C   AF83         MOV     R7,DPH
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000016   2402         ADD     A,#0x2
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   FD           MOV     R5,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine136_0
   \   000003                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 3
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
    556          #endif // ZCL_READ
    557          
    558          #ifdef ZCL_WRITE

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, 
   \                     zcl_SendWriteRequest:
    560                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction, 
    561                                          uint8 disableDefaultRsp, uint8 seqNum )
    562          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 10,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 9,A
   \   00002E   7421         MOV     A,#0x21
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 8,A
    563            uint8 *buf;
    564            uint8 *pBuf;
    565            zclWriteRec_t *statusRec;
    566            uint8 attrDataLen;
    567            uint8 dataLen = 0;
   \   000036   7E00         MOV     R6,#0x0
    568            uint8 i;
    569            ZStatus_t status;
    570            
    571            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000038   8E..         MOV     ?V0 + 5,R6
   \   00003A   8014         SJMP    ??zcl_SendWriteRequest_0
    572            {
    573              statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   00003C   E5..         MOV     A,?V0 + 5
   \   00003E   75F005       MOV     B,#0x5
   \   000041   12....       LCALL   ?Subroutine73 & 0xFFFF
    574              
    575              attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    576              dataLen += 2 + 1 + attrDataLen; // Attribute ID + Attribute Type + Attribute Data
   \                     ??CrossCallReturnLabel_98:
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   12....       LCALL   ?Subroutine42 & 0xFFFF
    577            }
   \                     ??CrossCallReturnLabel_54:
   \   000047   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00004A   2403         ADD     A,#0x3
   \   00004C   2E           ADD     A,R6
   \   00004D   FE           MOV     R6,A
   \   00004E   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_0:
   \   000050   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000053   40E7         JC      ??zcl_SendWriteRequest_1
    578          
    579            buf = osal_mem_alloc( dataLen );
   \   000055   12....       LCALL   ?Subroutine64 & 0xFFFF
    580            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_88:
   \   000058   7001         JNZ     ??zcl_SendWriteRequest_2
   \   00005A   EB           MOV     A,R3
   \                     ??zcl_SendWriteRequest_2:
   \   00005B   607C         JZ      ??zcl_SendWriteRequest_3
    581            {
    582              // Load the buffer - serially
    583              pBuf = buf;
   \   00005D   AE..         MOV     R6,?V0 + 6
   \   00005F   AF..         MOV     R7,?V0 + 7
    584              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000061   75..00       MOV     ?V0 + 5,#0x0
   \   000064   8012         SJMP    ??zcl_SendWriteRequest_4
    585              { 
    586                statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_5:
   \   000066   E5..         MOV     A,?V0 + 5
   \   000068   75F005       MOV     B,#0x5
   \   00006B   12....       LCALL   ?Subroutine1 & 0xFFFF
    587                
    588                *pBuf++ = LO_UINT16( statusRec->attrID );
    589                *pBuf++ = HI_UINT16( statusRec->attrID );
    590                *pBuf++ = statusRec->dataType;
    591                
    592                zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
    593                
    594                attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    595                pBuf += attrDataLen; // move pass attribute data
    596              }
   \                     ??CrossCallReturnLabel_3:
   \   00006E   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000071   2403         ADD     A,#0x3
   \   000073   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000076   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_4:
   \   000078   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00007B   40E9         JC      ??zcl_SendWriteRequest_5
    597          
    598              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE, 
    599                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007D                ; Setup parameters for call to function zcl_SendCommand
   \   00007D   78..         MOV     R0,#?V0 + 6
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   E5..         MOV     A,?V0 + 8
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   75..00       MOV     ?V0 + 0,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   E5..         MOV     A,?V0 + 9
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   E5..         MOV     A,?V0 + 10
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   75..00       MOV     ?V0 + 0,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   E5..         MOV     A,?V0 + 11
   \   0000B4   F5..         MOV     ?V0 + 0,A
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000C3   740D         MOV     A,#0xd
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   E9           MOV     A,R1
   \   0000CF   FE           MOV     R6,A
    600              osal_mem_free( buf );
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   AA..         MOV     R2,?V0 + 6
   \   0000D2   AB..         MOV     R3,?V0 + 7
   \   0000D4   12....       LCALL   ??osal_mem_free?relay
   \   0000D7   8002         SJMP    ??zcl_SendWriteRequest_6
    601            }
    602            else
    603              status = ZMemError;
   \                     ??zcl_SendWriteRequest_3:
   \   0000D9   7E10         MOV     R6,#0x10
    604          
    605            return ( status);
   \                     ??zcl_SendWriteRequest_6:
   \   0000DB   02....       LJMP    ?Subroutine118 & 0xFFFF
    606          }
    607          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
    609                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
    610                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    611          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 6,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 7,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 10,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 11,A
    612            uint8 dataLen;
    613            uint8 *buf;
    614            uint8 *pBuf;
    615            uint8 i;
    616            ZStatus_t status;
    617            
    618            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \   00002D   75F003       MOV     B,#0x3
   \   000030   85..82       MOV     DPL,?V0 + 4
   \   000033   85..83       MOV     DPH,?V0 + 5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   A4           MUL     AB
   \   000038   F5..         MOV     ?V0 + 12,A
    619          
    620            buf = osal_mem_alloc( dataLen );
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   FA           MOV     R2,A
   \   00003B   12....       LCALL   ?Subroutine63 & 0xFFFF
    621            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_86:
   \   00003E   7001         JNZ     ??zcl_SendWriteRsp_0
   \   000040   EB           MOV     A,R3
   \                     ??zcl_SendWriteRsp_0:
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??zcl_SendWriteRsp_1 & 0xFFFF
    622            {
    623              // Load the buffer - serially
    624              pBuf = buf;
   \   000046   A8..         MOV     R0,?V0 + 2
   \   000048   A9..         MOV     R1,?V0 + 3
    625              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   00004A   75..00       MOV     ?V0 + 8,#0x0
   \   00004D   802E         SJMP    ??zcl_SendWriteRsp_2
    626              { 
    627                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_3:
   \   00004F   E5..         MOV     A,?V0 + 8
   \   000051   75F003       MOV     B,#0x3
   \   000054   A4           MUL     AB
   \   000055   FA           MOV     R2,A
   \   000056   ABF0         MOV     R3,B
   \   000058   E5..         MOV     A,?V0 + 4
   \   00005A   2A           ADD     A,R2
   \   00005B   FA           MOV     R2,A
   \   00005C   E5..         MOV     A,?V0 + 5
   \   00005E   3B           ADDC    A,R3
   \   00005F   FB           MOV     R3,A
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine41 & 0xFFFF
    628                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_165:
   \   000068   EA           MOV     A,R2
   \   000069   2402         ADD     A,#0x2
   \   00006B   0A           INC     R2
   \   00006C   0A           INC     R2
   \   00006D   EB           MOV     A,R3
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   12....       LCALL   ??Subroutine127_0 & 0xFFFF
    629                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_173:
   \   000078   12....       LCALL   ?Subroutine28 & 0xFFFF
    630              }
   \                     ??CrossCallReturnLabel_175:
   \   00007B   05..         INC     ?V0 + 8
   \                     ??zcl_SendWriteRsp_2:
   \   00007D   85..82       MOV     DPL,?V0 + 4
   \   000080   85..83       MOV     DPH,?V0 + 5
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   E5..         MOV     A,?V0 + 8
   \   000087   C3           CLR     C
   \   000088   9A           SUBB    A,R2
   \   000089   40C4         JC      ??zcl_SendWriteRsp_3
    631              
    632              // If there's only a single status record and its status field is set to 
    633              // SUCCESS then omit the attribute ID field.
    634              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6401         XRL     A,#0x1
   \   00008E   7007         JNZ     ??zcl_SendWriteRsp_4
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   7003         JNZ     ??zcl_SendWriteRsp_4
    635                dataLen = 1;
   \   000094   75..01       MOV     ?V0 + 12,#0x1
    636                
    637              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
    638                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_4:
   \   000097                ; Setup parameters for call to function zcl_SendCommand
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   75..00       MOV     ?V0 + 13,#0x0
   \   00009F   78..         MOV     R0,#?V0 + 12
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   E5..         MOV     A,?V0 + 11
   \   0000A6   F5..         MOV     ?V0 + 4,A
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   75..00       MOV     ?V0 + 4,#0x0
   \   0000B0   75..00       MOV     ?V0 + 5,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   E5..         MOV     A,?V0 + 10
   \   0000BA   F5..         MOV     ?V0 + 4,A
   \   0000BC   78..         MOV     R0,#?V0 + 4
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   E5..         MOV     A,?V0 + 7
   \   0000C3   F5..         MOV     ?V0 + 4,A
   \   0000C5   78..         MOV     R0,#?V0 + 4
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   75..00       MOV     ?V0 + 4,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   75..04       MOV     ?V0 + 4,#0x4
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   AC..         MOV     R4,?V0 + 0
   \   0000DC   AD..         MOV     R5,?V0 + 1
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FB           MOV     R3,A
   \   0000E2   A9..         MOV     R1,?V0 + 6
   \   0000E4   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   FE           MOV     R6,A
    639              osal_mem_free( buf );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   AA..         MOV     R2,?V0 + 2
   \   0000EE   AB..         MOV     R3,?V0 + 3
   \   0000F0   12....       LCALL   ??osal_mem_free?relay
   \   0000F3   8002         SJMP    ??zcl_SendWriteRsp_5
    640            }
    641            else
    642              status = ZMemError;
   \                     ??zcl_SendWriteRsp_1:
   \   0000F5   7E10         MOV     R6,#0x10
    643          
    644            return ( status );
   \                     ??zcl_SendWriteRsp_5:
   \   0000F7   02....       LJMP    ?Subroutine119 & 0xFFFF
    645          }
    646          #endif // ZCL_WRITE
    647          
    648          #ifdef ZCL_REPORT
    649          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    650                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
    651                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    652          {
    653            uint8 *buf;
    654            uint8 *pBuf;
    655            uint8 dataLen = 0;
    656            zclCfgReportRec_t *reportRec;
    657            uint8 reportChangeLen; // length of Reportable Change field
    658            uint8 i;
    659            ZStatus_t status;
    660            
    661            // Find out the data length
    662            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    663            {
    664              reportRec = &(cfgReportCmd->attrList[i]);
    665              
    666              dataLen += 1 + 2; // Direction + Attribute ID
    667              reportChangeLen = 0;
    668              
    669              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    670              {
    671                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    672                
    673                // Find out the size of the Reportable Change field (for Analog data types)
    674                if ( zclAnalogDataType( reportRec->dataType ) )
    675                {
    676                  reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    677                  dataLen += reportChangeLen;
    678                }
    679              }
    680              else
    681              {
    682                dataLen += 2; // Timeout Period
    683              }
    684            }
    685            
    686            buf = osal_mem_alloc( dataLen );
    687            if ( buf != NULL )
    688            {
    689              // Load the buffer - serially
    690              pBuf = buf;
    691              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    692              {
    693                reportRec = &(cfgReportCmd->attrList[i]);
    694                
    695                *pBuf++ = reportRec->direction;
    696                *pBuf++ = LO_UINT16( reportRec->attrID );
    697                *pBuf++ = HI_UINT16( reportRec->attrID );
    698                
    699                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    700                {
    701                  *pBuf++ = reportRec->dataType;
    702                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
    703                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
    704                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
    705                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
    706          
    707                  if ( zclAnalogDataType( reportRec->dataType ) )
    708                  {
    709                    zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
    710                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    711                    pBuf += reportChangeLen;
    712                  }
    713                }
    714                else
    715                {
    716                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
    717                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
    718                } 
    719              } // for loop
    720              
    721              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE, 
    722                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    723              osal_mem_free( buf );
    724            }
    725            else
    726              status = ZMemError;
    727            
    728            return ( status );
    729          }
    730          
    731          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    732                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
    733                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    734          {
    735            uint8 dataLen;
    736            uint8 *buf;
    737            uint8 *pBuf;
    738            uint8 i;
    739            ZStatus_t status;
    740            
    741            // Atrribute list (Status, Direction and Attribute ID)
    742            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 ); 
    743            
    744            buf = osal_mem_alloc( dataLen );
    745            if ( buf != NULL )
    746            {
    747              // Load the buffer - serially
    748              pBuf = buf; 
    749              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
    750              {
    751                *pBuf++ = cfgReportRspCmd->attrList[i].status;
    752                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
    753                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
    754                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
    755              }
    756              
    757              // If there's only a single status record and its status field is set to 
    758              // SUCCESS then omit the attribute ID field.
    759              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
    760                dataLen = 1;
    761              
    762              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    763                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction, 
    764                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
    765              osal_mem_free( buf );
    766            }
    767            else
    768              status = ZMemError;
    769            
    770            return ( status );
    771          }
    772          
    773          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
    774                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
    775                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    776          {
    777            uint8 dataLen;
    778            uint8 *buf;
    779            uint8 *pBuf;
    780            uint8 i;
    781            ZStatus_t status;
    782           
    783            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
    784            
    785            buf = osal_mem_alloc( dataLen );
    786            if ( buf != NULL )
    787            {
    788              // Load the buffer - serially
    789              pBuf = buf;
    790              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
    791              {
    792                *pBuf++ = readReportCfgCmd->attrList[i].direction;
    793                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
    794                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
    795              }
    796              
    797              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE, 
    798                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    799              osal_mem_free( buf );
    800            }
    801            else
    802              status = ZMemError;
    803            
    804            return ( status );
    805          }
    806          
    807          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    808                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
    809                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    810          {
    811            uint8 *buf;
    812            uint8 *pBuf;
    813            uint8 dataLen = 0;
    814            zclReportCfgRspRec_t *reportRspRec;
    815            uint8 reportChangeLen;
    816            uint8 i;
    817            ZStatus_t status;
    818          
    819            // Find out the data length
    820            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
    821            {
    822              reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    823              
    824              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
    825              
    826              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
    827              {
    828                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
    829                {
    830                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    831                
    832                  if ( zclAnalogDataType( reportRspRec->dataType ) )
    833                  {
    834                    reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
    835                    dataLen += reportChangeLen; // Reportable Change field
    836                  }
    837                }
    838                else
    839                {
    840                  dataLen += 2; // Timeout Period
    841                }
    842              }
    843            }
    844            
    845            buf = osal_mem_alloc( dataLen );
    846            if ( buf != NULL )
    847            {
    848              // Load the buffer - serially
    849              pBuf = buf;
    850          
    851              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
    852              {
    853                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    854          
    855                *pBuf++ = reportRspRec->status;
    856                *pBuf++ = reportRspRec->direction;
    857                *pBuf++ = LO_UINT16( reportRspRec->attrID );
    858                *pBuf++ = HI_UINT16( reportRspRec->attrID );
    859               
    860                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
    861                {
    862                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
    863                  {
    864                    *pBuf++ = reportRspRec->dataType;
    865                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
    866                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
    867                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
    868                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
    869          
    870                    if ( zclAnalogDataType( reportRspRec->dataType ) )
    871                    {
    872                      zclSerializeData( reportRspRec->dataType, 
    873                                        reportRspRec->reportableChange, pBuf );
    874                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
    875                      pBuf += reportChangeLen;
    876                    }
    877                  }
    878                  else
    879                  {
    880                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
    881                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
    882                  }
    883                }
    884              }
    885             
    886              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    887                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
    888                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    889              osal_mem_free( buf );
    890            }
    891            else
    892              status = ZMemError;
    893            
    894            return ( status );
    895          }
    896          
    897          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    898                                       uint16 clusterID, zclReportCmd_t *reportCmd,
    899                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    900          {
    901            zclReport_t *reportRec;
    902            uint8 attrDataLen;
    903            uint8 dataLen = 0;
    904            uint8 *buf;
    905            uint8 *pBuf;
    906            uint8 i;
    907            ZStatus_t status;
    908            
    909            // calculate the size of the command
    910            for ( i = 0; i < reportCmd->numAttr; i++ )
    911            {
    912              reportRec = &(reportCmd->attrList[i]);
    913              
    914              dataLen += 2 + 1; // Attribute ID + data type
    915          
    916              attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
    917              dataLen += attrDataLen; // Attribute Data
    918            }
    919            
    920            buf = osal_mem_alloc( dataLen );
    921            if ( buf != NULL )
    922            {
    923              // Load the buffer - serially
    924              pBuf = buf;
    925              for ( i = 0; i < reportCmd->numAttr; i++ )
    926              {
    927                reportRec = &(reportCmd->attrList[i]);
    928                
    929                *pBuf++ = LO_UINT16( reportRec->attrID );
    930                *pBuf++ = HI_UINT16( reportRec->attrID );
    931                *pBuf++ = reportRec->dataType;
    932          
    933                zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
    934                attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
    935                pBuf += attrDataLen; // move pass attribute data
    936              }
    937           
    938              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE, 
    939                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    940              osal_mem_free( buf );
    941            }
    942            else
    943              status = ZMemError;
    944            
    945            return ( status );
    946          }
    947          #endif // ZCL_REPORT
    948          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
    950                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
    951                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
    952          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 3,A
   \   00002F   7416         MOV     A,#0x16
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
    953            uint8 buf[2]; // Command ID and Status;
    954          
    955            // Load the buffer - serially
    956            buf[0] = defaultRspCmd->commandID;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   12....       LCALL   ?Subroutine14 & 0xFFFF
    957            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_21:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
    958          
    959            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
    960                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) ); 
   \   000050                ; Setup parameters for call to function zcl_SendCommand
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   75..02       MOV     ?V0 + 0,#0x2
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   E5..         MOV     A,?V0 + 5
   \   00006E   F5..         MOV     ?V0 + 0,A
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   EF           MOV     A,R7
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV     ?V0 + 0,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..0B       MOV     ?V0 + 0,#0xb
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   02....       LJMP    ?Subroutine109 & 0xFFFF
    961          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   22           RET
    962          
    963          #ifdef ZCL_DISCOVER
    964          ZStatus_t zcl_SendDiscoverCmd( uint8 srcEP, afAddrType_t *dstAddr,
    965                                      uint16 clusterID, zclDiscoverCmd_t *discoverCmd,
    966                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    967          {
    968            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
    969            uint8 *buf;
    970            uint8 *pBuf;
    971            ZStatus_t status;
    972            
    973            buf = osal_mem_alloc( dataLen );
    974            if ( buf != NULL )
    975            {
    976              // Load the buffer - serially
    977              pBuf = buf;
    978              *pBuf++ = LO_UINT16(discoverCmd->startAttr);
    979              *pBuf++ = HI_UINT16(discoverCmd->startAttr);
    980              *pBuf++ = discoverCmd->maxAttrIDs;
    981              
    982              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER, FALSE, 
    983                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    984              osal_mem_free( buf );
    985            }
    986            else
    987              status = ZMemError;
    988            
    989            return ( status );
    990          }
    991          
    992          ZStatus_t zcl_SendDiscoverRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    993                                uint16 clusterID, zclDiscoverRspCmd_t *discoverRspCmd,
    994                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    995          {
    996            uint8 dataLen = 1; // Discovery complete
    997            uint8 *buf;
    998            uint8 *pBuf;
    999            uint8 i;
   1000            ZStatus_t status;
   1001            
   1002            // calculate the size of the command
   1003            dataLen += discoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   1004            
   1005            buf = osal_mem_alloc( dataLen );
   1006            if ( buf != NULL )
   1007            {
   1008              // Load the buffer - serially
   1009              pBuf = buf;
   1010              *pBuf++ = discoverRspCmd->discComplete;    
   1011              for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1012              {
   1013                *pBuf++ = LO_UINT16(discoverRspCmd->attrList[i].attrID);
   1014                *pBuf++ = HI_UINT16(discoverRspCmd->attrList[i].attrID);
   1015                *pBuf++ = discoverRspCmd->attrList[i].dataType;
   1016              }
   1017              
   1018              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_RSP, FALSE,
   1019                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1020              osal_mem_free( buf );
   1021            }
   1022            else
   1023              status = ZMemError;
   1024            
   1025            return ( status );
   1026          }
   1027          #endif // ZCL_DISCOVER
   1028          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zclProcessMessageMSG:
   1030          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 55
   \   000005   74C9         MOV     A,#-0x37
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1031          #if defined(Coor_receiver) // The coordinator receive data
   1032            byte recv_data[30];  
   1033          #endif
   1034            byte receive[20]; 
   1035            uint16 len;
   1036            endPointDesc_t *epDesc;
   1037            zclIncoming_t inMsg;
   1038            zclLibPlugin_t *pInPlugin;
   1039            zclDefaultRspCmd_t defautlRspCmd;
   1040            uint8 options;
   1041            uint8 securityEnable;
   1042            uint8 interPanMsg;
   1043            ZStatus_t status = ZFailure;
   1044          
   1045            if ( pkt->cmd.DataLength == 0 ) return;   // Error, ignore the message
   \   00000E   EE           MOV     A,R6
   \   00000F   241F         ADD     A,#0x1f
   \   000011   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000014   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000017   7001         JNZ     ??zclProcessMessageMSG_0
   \   000019   EB           MOV     A,R3
   \                     ??zclProcessMessageMSG_0:
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1046          
   1047          #if defined(Coor_receiver)
   1048            if (pkt->cmd.DataLength > 0)
   1049            {
   1050              for(len = 0; len < pkt->cmd.DataLength; len++) // Send the recv_data to UART
   \   00001F   7800         MOV     R0,#0x0
   \   000021   7900         MOV     R1,#0x0
   \   000023   EE           MOV     A,R6
   \   000024   2421         ADD     A,#0x21
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   EF           MOV     A,R7
   \   000029   3400         ADDC    A,#0x0
   \   00002B   F5..         MOV     ?V0 + 5,A
   1051              {
   1052                  recv_data[len] = pkt->cmd.Data[len+3]; // the cmd.Data[0~2] is cluster ID.
   \                     ??zclProcessMessageMSG_2:
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   E0           MOVX    A,@DPTR
   \   000034   28           ADD     A,R0
   \   000035   FC           MOV     R4,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   39           ADDC    A,R1
   \   000039   8C82         MOV     DPL,R4
   \   00003B   F583         MOV     DPH,A
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C0E0         PUSH    A
   \   000043   7419         MOV     A,#0x19
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine74 & 0xFFFF
   1053              }
   \                     ??CrossCallReturnLabel_99:
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000051   9A           SUBB    A,R2
   \   000052   E9           MOV     A,R1
   \   000053   9B           SUBB    A,R3
   \   000054   40D7         JC      ??zclProcessMessageMSG_2
   1054              
   1055              #define HI_UINT16(a) (((a) >> 8) & 0xFF)
   1056              #define LO_UINT16(a) ((a) & 0xFF)
   1057              
   1058              char entry[4];
   1059              uint8 hi = HI_UINT16( pkt->srcAddr.addr.shortAddr );
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000063   FC           MOV     R4,A
   1060              uint8 lo = LO_UINT16( pkt->srcAddr.addr.shortAddr );
   1061          
   1062              entry[0] = hi/16 + 48;  /* Little Endian for the radio RAM */
   \   000064   C4           SWAP    A
   \   000065   540F         ANL     A,#0xf
   \   000067   2430         ADD     A,#0x30
   \   000069   C0E0         PUSH    A
   \   00006B   7410         MOV     A,#0x10
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   D0E0         POP     A
   \   000072   F0           MOVX    @DPTR,A
   1063              entry[1] = hi%16 + 48;
   \   000073   740F         MOV     A,#0xf
   \   000075   5C           ANL     A,R4
   \   000076   2430         ADD     A,#0x30
   \   000078   C0E0         PUSH    A
   \   00007A   7411         MOV     A,#0x11
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   D0E0         POP     A
   \   000081   F0           MOVX    @DPTR,A
   1064              entry[2] = lo/16 + 48;
   \   000082   EA           MOV     A,R2
   \   000083   C4           SWAP    A
   \   000084   540F         ANL     A,#0xf
   \   000086   2430         ADD     A,#0x30
   \   000088   C0E0         PUSH    A
   \   00008A   7412         MOV     A,#0x12
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
   1065              entry[3] = lo%16 + 48;
   \   000092   740F         MOV     A,#0xf
   \   000094   5A           ANL     A,R2
   \   000095   2430         ADD     A,#0x30
   \   000097   C0E0         PUSH    A
   \   000099   7413         MOV     A,#0x13
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   D0E0         POP     A
   \   0000A0   F0           MOVX    @DPTR,A
   1066              for (int k=0;k<4;k++)
   \   0000A1   7800         MOV     R0,#0x0
   \   0000A3   7900         MOV     R1,#0x0
   1067              {
   1068                if(entry[k]>57)
   \                     ??zclProcessMessageMSG_3:
   \   0000A5   7410         MOV     A,#0x10
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   C3           CLR     C
   \   0000AF   943A         SUBB    A,#0x3a
   \   0000B1   4004         JC      ??zclProcessMessageMSG_4
   1069                  entry[k]+=7;
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   2407         ADD     A,#0x7
   \   0000B6   F0           MOVX    @DPTR,A
   1070              }
   \                     ??zclProcessMessageMSG_4:
   \   0000B7   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000BA   9404         SUBB    A,#0x4
   \   0000BC   E9           MOV     A,R1
   \   0000BD   9400         SUBB    A,#0x0
   \   0000BF   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000C1   65D0         XRL     A,PSW
   \   0000C3   33           RLC     A
   \   0000C4   40DF         JC      ??zclProcessMessageMSG_3
   1071          
   1072              // search 0-9
   1073              for(int search_id=0; search_id<9; search_id++)
   \   0000C6   75..00       MOV     ?V0 + 0,#0x0
   \   0000C9   75..00       MOV     ?V0 + 1,#0x0
   1074              {
   1075                //strcmp entry, if they arenot equeal
   1076                if(strncmp(entry,global_entry[search_id], 4) == 0)
   \                     ??zclProcessMessageMSG_5:
   \   0000CC                ; Setup parameters for call to function strncmp
   \   0000CC   75..04       MOV     ?V0 + 6,#0x4
   \   0000CF   75..00       MOV     ?V0 + 7,#0x0
   \   0000D2   78..         MOV     R0,#?V0 + 6
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   85....       MOV     ?V0 + 6,?V0 + 0
   \   0000DA   85....       MOV     ?V0 + 7,?V0 + 1
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   78..         MOV     R0,#?V0 + 6
   \   0000E1   12....       LCALL   ?S_SHL
   \   0000E4   E5..         MOV     A,?V0 + 6
   \   0000E6   24..         ADD     A,#(global_entry & 0xff)
   \   0000E8   FC           MOV     R4,A
   \   0000E9   E5..         MOV     A,?V0 + 7
   \   0000EB   34..         ADDC    A,#((global_entry >> 8) & 0xff)
   \   0000ED   FD           MOV     R5,A
   \   0000EE   7412         MOV     A,#0x12
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   AA82         MOV     R2,DPL
   \   0000F5   AB83         MOV     R3,DPH
   \   0000F7   12....       LCALL   ??strncmp?relay
   \   0000FA   7402         MOV     A,#0x2
   \   0000FC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FF   EA           MOV     A,R2
   \   000100   7001         JNZ     ??zclProcessMessageMSG_6
   \   000102   EB           MOV     A,R3
   \                     ??zclProcessMessageMSG_6:
   \   000103   702E         JNZ     ??zclProcessMessageMSG_7
   1077                {
   1078                  strcpy(global_recv_data[search_id], recv_data);
                                ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

          strcpy(global_recv_data[search_id], recv_data);
                                              ^
"D:\GitHub\z-stack\Sensor Network Example\Components\stack\zcl\zcl.c",1078  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   000105                ; Setup parameters for call to function strcpy
   \   000105   7419         MOV     A,#0x19
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   AC82         MOV     R4,DPL
   \   00010C   AD83         MOV     R5,DPH
   \   00010E   E5..         MOV     A,?V0 + 0
   \   000110   75F01E       MOV     B,#0x1e
   \   000113   A4           MUL     AB
   \   000114   F8           MOV     R0,A
   \   000115   AAF0         MOV     R2,B
   \   000117   75F01E       MOV     B,#0x1e
   \   00011A   E5..         MOV     A,?V0 + 1
   \   00011C   12....       LCALL   ?Subroutine70 & 0xFFFF
   1079                  global_data_length[search_id] = pkt->cmd.DataLength-2;
   \                     ??CrossCallReturnLabel_93:
   \   00011F   C0E0         PUSH    A
   \   000121   E5..         MOV     A,?V0 + 0
   \   000123   24..         ADD     A,#(global_data_length & 0xff)
   \   000125   F582         MOV     DPL,A
   \   000127   E5..         MOV     A,?V0 + 1
   \   000129   34..         ADDC    A,#((global_data_length >> 8) & 0xff)
   \   00012B   F583         MOV     DPH,A
   \   00012D   D0E0         POP     A
   \   00012F   F0           MOVX    @DPTR,A
   1080                  break;
   \   000130   02....       LJMP    ??zclProcessMessageMSG_8 & 0xFFFF
   1081                }
   1082                
   1083                if(search_id==8)
   \                     ??zclProcessMessageMSG_7:
   \   000133   7408         MOV     A,#0x8
   \   000135   65..         XRL     A,?V0 + 0
   \   000137   7002         JNZ     ??zclProcessMessageMSG_9
   \   000139   E5..         MOV     A,?V0 + 1
   \                     ??zclProcessMessageMSG_9:
   \   00013B   7065         JNZ     ??zclProcessMessageMSG_10
   1084                {
   1085                  strcpy(global_entry[stack], entry);
   \   00013D                ; Setup parameters for call to function strcpy
   \   00013D   7410         MOV     A,#0x10
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   AC82         MOV     R4,DPL
   \   000144   AD83         MOV     R5,DPH
   \   000146   90....       MOV     DPTR,#stack
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F5..         MOV     ?V0 + 6,A
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F5..         MOV     ?V0 + 7,A
   \   000150   7402         MOV     A,#0x2
   \   000152   78..         MOV     R0,#?V0 + 6
   \   000154   12....       LCALL   ?S_SHL
   \   000157   E5..         MOV     A,?V0 + 6
   \   000159   24..         ADD     A,#(global_entry & 0xff)
   \   00015B   FA           MOV     R2,A
   \   00015C   E5..         MOV     A,?V0 + 7
   \   00015E   34..         ADDC    A,#((global_entry >> 8) & 0xff)
   \   000160   FB           MOV     R3,A
   \   000161   12....       LCALL   ??strcpy?relay
   1086                  strcpy(global_recv_data[stack], recv_data);
                                ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

          strcpy(global_recv_data[stack], recv_data);
                                          ^
"D:\GitHub\z-stack\Sensor Network Example\Components\stack\zcl\zcl.c",1086  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"

    byte receive[20]; 
         ^
"D:\GitHub\z-stack\Sensor Network Example\Components\stack\zcl\zcl.c",1034  Warning[Pe177]: 
          variable "receive" was declared but never referenced
   \   000164                ; Setup parameters for call to function strcpy
   \   000164   7419         MOV     A,#0x19
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   AC82         MOV     R4,DPL
   \   00016B   AD83         MOV     R5,DPH
   \   00016D   90....       MOV     DPTR,#stack
   \   000170   12....       LCALL   ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000173   75F01E       MOV     B,#0x1e
   \   000176   A4           MUL     AB
   \   000177   F8           MOV     R0,A
   \   000178   AAF0         MOV     R2,B
   \   00017A   75F01E       MOV     B,#0x1e
   \   00017D   E9           MOV     A,R1
   \   00017E   12....       LCALL   ?Subroutine70 & 0xFFFF
   1087                  global_data_length[stack] = pkt->cmd.DataLength-2;
   \                     ??CrossCallReturnLabel_94:
   \   000181   C0E0         PUSH    A
   \   000183   90....       MOV     DPTR,#stack
   \   000186   E0           MOVX    A,@DPTR
   \   000187   24..         ADD     A,#(global_data_length & 0xff)
   \   000189   F8           MOV     R0,A
   \   00018A   A3           INC     DPTR
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   34..         ADDC    A,#((global_data_length >> 8) & 0xff)
   \   00018E   F9           MOV     R1,A
   \   00018F   8882         MOV     DPL,R0
   \   000191   8983         MOV     DPH,R1
   \   000193   D0E0         POP     A
   \   000195   F0           MOVX    @DPTR,A
   1088                  stack++;
   \   000196   90....       MOV     DPTR,#stack
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   2401         ADD     A,#0x1
   \   00019C   F0           MOVX    @DPTR,A
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   3400         ADDC    A,#0x0
   \   0001A1   F0           MOVX    @DPTR,A
   1089                }
   1090              }
   \                     ??zclProcessMessageMSG_10:
   \   0001A2   E5..         MOV     A,?V0 + 0
   \   0001A4   2401         ADD     A,#0x1
   \   0001A6   F5..         MOV     ?V0 + 0,A
   \   0001A8   E5..         MOV     A,?V0 + 1
   \   0001AA   3400         ADDC    A,#0x0
   \   0001AC   F5..         MOV     ?V0 + 1,A
   \   0001AE   C3           CLR     C
   \   0001AF   E5..         MOV     A,?V0 + 0
   \   0001B1   9409         SUBB    A,#0x9
   \   0001B3   E5..         MOV     A,?V0 + 1
   \   0001B5   9400         SUBB    A,#0x0
   \   0001B7   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001B9   65D0         XRL     A,PSW
   \   0001BB   33           RLC     A
   \   0001BC   5003         JNC     $+5
   \   0001BE   02....       LJMP    ??zclProcessMessageMSG_5 & 0xFFFF
   1091            }
   1092          #endif
   1093          
   1094          // The device receive the uart command with RF
   1095          #if defined(End_Device) || defined(Router_Device)
   1096            if(pkt->cmd.DataLength > 0)
   1097            {
   1098              for(len = 0; len < pkt->cmd.DataLength; len++)
   1099              {
   1100                receive[len] = pkt->cmd.Data[len+3];
   1101              }
   1102              // Write receive coordinator command to UART, chrischris
   1103              // HalUARTWrite(MT_UART_DEFAULT_PORT, receive, pkt->cmd.DataLength-2);
   1104              // a - k 97=>107
   1105              // This part is addressing the level of the pwn(M160),
   1106              // and there are 11 levels which is from 97(a) to 107
   1107              #if defined(M160)
   1108                if((int)receive[0] >= 97 && (int)receive[0] <= 107 )
   1109                {
   1110                  int var = (int)receive[0];
   1111                  var = var + 3 - 100;
   1112                  duty_M160 = var * 10;
   1113                  M160_On(duty_M160);
   1114                }
   1115              #endif  
   1116              return ;
   1117            }
   1118          #endif  
   1119            
   1120            // Initialize
   1121            inMsg.msg = pkt;
   \                     ??zclProcessMessageMSG_8:
   \   0001C1   7402         MOV     A,#0x2
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   EE           MOV     A,R6
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   A3           INC     DPTR
   \   0001C9   EF           MOV     A,R7
   \   0001CA   F0           MOVX    @DPTR,A
   1122            inMsg.attrCmd = NULL;
   \   0001CB   740E         MOV     A,#0xe
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   E4           CLR     A
   \   0001D1   F0           MOVX    @DPTR,A
   \   0001D2   A3           INC     DPTR
   \   0001D3   F0           MOVX    @DPTR,A
   1123            inMsg.pData = NULL;
   \   0001D4   740A         MOV     A,#0xa
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   E4           CLR     A
   \   0001DA   F0           MOVX    @DPTR,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   F0           MOVX    @DPTR,A
   1124            inMsg.pDataLen = 0;
   \   0001DD   740C         MOV     A,#0xc
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   E4           CLR     A
   \   0001E3   F0           MOVX    @DPTR,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   F0           MOVX    @DPTR,A
   1125          
   1126            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   0001E6                ; Setup parameters for call to function zclParseHdr
   \   0001E6   85..82       MOV     DPL,?V0 + 4
   \   0001E9   85..83       MOV     DPH,?V0 + 5
   \   0001EC   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0001EF   7404         MOV     A,#0x4
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   AA82         MOV     R2,DPL
   \   0001F6   AB83         MOV     R3,DPH
   \   0001F8   12....       LCALL   ??zclParseHdr?relay
   \   0001FB   740A         MOV     A,#0xa
   \   0001FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000200   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   1127            inMsg.pDataLen = pkt->cmd.DataLength;
   1128            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_306:
   \   000203   85..82       MOV     DPL,?V0 + 2
   \   000206   85..83       MOV     DPH,?V0 + 3
   \   000209   C082         PUSH    DPL
   \   00020B   C083         PUSH    DPH
   \   00020D   740A         MOV     A,#0xa
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000215   D083         POP     DPH
   \   000217   D082         POP     DPL
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   C3           CLR     C
   \   00021B   98           SUBB    A,R0
   \   00021C   F8           MOV     R0,A
   \   00021D   A3           INC     DPTR
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   99           SUBB    A,R1
   \   000220   F9           MOV     R1,A
   \   000221   85..82       MOV     DPL,?V0 + 4
   \   000224   85..83       MOV     DPH,?V0 + 5
   \   000227   E0           MOVX    A,@DPTR
   \   000228   28           ADD     A,R0
   \   000229   F8           MOV     R0,A
   \   00022A   A3           INC     DPTR
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   39           ADDC    A,R1
   \   00022D   F9           MOV     R1,A
   \   00022E   740C         MOV     A,#0xc
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   1129          
   1130            // Find the wanted endpoint
   1131            epDesc = afFindEndPointDesc( pkt->endPoint );
   \                     ??CrossCallReturnLabel_246:
   \   000236   EE           MOV     A,R6
   \   000237   2414         ADD     A,#0x14
   \   000239   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   F9           MOV     R1,A
   \   00023E   12....       LCALL   ??afFindEndPointDesc?relay
   \   000241   8A..         MOV     ?V0 + 0,R2
   \   000243   8B..         MOV     ?V0 + 1,R3
   \   000245   A8..         MOV     R0,?V0 + 0
   \   000247   A9..         MOV     R1,?V0 + 1
   1132            if ( epDesc == NULL )
   \   000249   E8           MOV     A,R0
   \   00024A   7001         JNZ     ??zclProcessMessageMSG_11
   \   00024C   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_11:
   \   00024D   7003         JNZ     $+5
   \   00024F   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1133              return;   // Error, ignore the message
   1134          
   1135            if ( pkt->clusterId == ZCL_INVALID_CLUSTER_ID )
   \   000252   EE           MOV     A,R6
   \   000253   2404         ADD     A,#0x4
   \   000255   F5..         MOV     ?V0 + 4,A
   \   000257   EF           MOV     A,R7
   \   000258   3400         ADDC    A,#0x0
   \   00025A   F5..         MOV     ?V0 + 5,A
   \   00025C   85..82       MOV     DPL,?V0 + 4
   \   00025F   F583         MOV     DPH,A
   \   000261   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000264   7003         JNZ     ??zclProcessMessageMSG_12
   \   000266   74FF         MOV     A,#-0x1
   \   000268   6B           XRL     A,R3
   \                     ??zclProcessMessageMSG_12:
   \   000269   7003         JNZ     $+5
   \   00026B   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1136              return;   // Error, ignore the message
   1137            
   1138            if ((epDesc->simpleDesc == NULL) ||
   1139                (zcl_DeviceOperational(pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type, 
   1140                  inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId) == FALSE))
   \   00026E   E8           MOV     A,R0
   \   00026F   2403         ADD     A,#0x3
   \   000271   F5..         MOV     ?V0 + 6,A
   \   000273   E9           MOV     A,R1
   \   000274   3400         ADDC    A,#0x0
   \   000276   F5..         MOV     ?V0 + 7,A
   \   000278   85..82       MOV     DPL,?V0 + 6
   \   00027B   F583         MOV     DPH,A
   \   00027D   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000280   7002         JNZ     ??zclProcessMessageMSG_13
   \   000282   E583         MOV     A,DPH
   \                     ??zclProcessMessageMSG_13:
   \   000284   7003         JNZ     $+5
   \   000286   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   000289                ; Setup parameters for call to function zcl_DeviceOperational
   \   000289   A3           INC     DPTR
   \   00028A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00028D   740B         MOV     A,#0xb
   \   00028F   12....       LCALL   ?XSTACK_DISP0_8
   \   000292   E0           MOVX    A,@DPTR
   \   000293   FD           MOV     R5,A
   \   000294   7406         MOV     A,#0x6
   \   000296   12....       LCALL   ?XSTACK_DISP0_8
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   5403         ANL     A,#0x3
   \   00029C   FC           MOV     R4,A
   \   00029D   85..82       MOV     DPL,?V0 + 2
   \   0002A0   85..83       MOV     DPH,?V0 + 3
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   F9           MOV     R1,A
   \   0002A5   12....       LCALL   ??zcl_DeviceOperational?relay
   \   0002A8   7402         MOV     A,#0x2
   \   0002AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002AD   E9           MOV     A,R1
   \   0002AE   7003         JNZ     $+5
   \   0002B0   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1141            {
   1142              return; // Error, ignore the message
   1143            }
   1144          
   1145          #if defined ( INTER_PAN )
   1146            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   1147            {
   1148              // No foundation command is supported thru Inter-PAN communication
   1149              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   1150                return;
   1151          
   1152              interPanMsg = TRUE; 
   1153              options = AF_TX_OPTIONS_NONE;
   1154            }
   1155            else
   1156          #endif
   1157            {
   1158              interPanMsg = FALSE;
   1159              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \   0002B3                ; Setup parameters for call to function zclGetClusterOption
   \   0002B3   85..82       MOV     DPL,?V0 + 4
   \   0002B6   85..83       MOV     DPH,?V0 + 5
   \   0002B9   12....       LCALL   ?Subroutine43 & 0xFFFF
   1160            }
   \                     ??CrossCallReturnLabel_55:
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   F9           MOV     R1,A
   \   0002BE   12....       LCALL   ??zclGetClusterOption?relay
   \   0002C1   E9           MOV     A,R1
   \   0002C2   FA           MOV     R2,A
   1161            
   1162            // Local and remote Security options must match except for Default Response command
   1163            if ( !zcl_DefaultRspCmd( inMsg.hdr ) )
   \   0002C3   7404         MOV     A,#0x4
   \   0002C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C8   E0           MOVX    A,@DPTR
   \   0002C9   F8           MOV     R0,A
   \   0002CA   5407         ANL     A,#0x7
   \   0002CC   700D         JNZ     ??zclProcessMessageMSG_14
   \   0002CE   7409         MOV     A,#0x9
   \   0002D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D3   E0           MOVX    A,@DPTR
   \   0002D4   640B         XRL     A,#0xb
   \   0002D6   7003         JNZ     $+5
   \   0002D8   02....       LJMP    ??zclProcessMessageMSG_15 & 0xFFFF
   1164            {
   1165              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zclProcessMessageMSG_14:
   \   0002DB   EA           MOV     A,R2
   \   0002DC   A2E6         MOV     C,0xE0 /* A   */.6
   \   0002DE   5004         JNC     ??zclProcessMessageMSG_16
   \   0002E0   D2F0         SETB    B.0
   \   0002E2   8002         SJMP    ??zclProcessMessageMSG_17
   \                     ??zclProcessMessageMSG_16:
   \   0002E4   C2F0         CLR     B.0
   \                     ??zclProcessMessageMSG_17:
   \   0002E6   A2F0         MOV     C,B.0
   \   0002E8   E4           CLR     A
   \   0002E9   92E0         MOV     0xE0 /* A   */.0,C
   \   0002EB   F5..         MOV     ?V0 + 0,A
   1166              if ( pkt->SecurityUse != securityEnable )
   \   0002ED   EE           MOV     A,R6
   \   0002EE   2419         ADD     A,#0x19
   \   0002F0   F582         MOV     DPL,A
   \   0002F2   EF           MOV     A,R7
   \   0002F3   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0002F6   65..         XRL     A,?V0 + 0
   \   0002F8   7003         JNZ     $+5
   \   0002FA   02....       LJMP    ??zclProcessMessageMSG_15 & 0xFFFF
   1167              {
   1168                if ( UNICAST_MSG( inMsg.msg ) )
   \   0002FD   7402         MOV     A,#0x2
   \   0002FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000302   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000305   6003         JZ      $+5
   \   000307   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   00030A   7402         MOV     A,#0x2
   \   00030C   12....       LCALL   ?XSTACK_DISP0_8
   \   00030F   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000312   7002         JNZ     ??zclProcessMessageMSG_18
   \   000314   A3           INC     DPTR
   \   000315   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_18:
   \   000316   6003         JZ      $+5
   \   000318   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1169                {
   1170                  // Send a Default Response command back with no Application Link Key security
   1171                  if ( securityEnable )
   \   00031B   E5..         MOV     A,?V0 + 0
   \   00031D   6005         JZ      ??CrossCallReturnLabel_32
   1172                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   00031F                ; Setup parameters for call to function zclSetSecurityOption
   \   00031F   7C00         MOV     R4,#0x0
   \   000321   12....       LCALL   ?Subroutine27 & 0xFFFF
   1173                  
   1174                  defautlRspCmd.statusCode = status;
   \                     ??CrossCallReturnLabel_32:
   \   000324   7401         MOV     A,#0x1
   \   000326   12....       LCALL   ?XSTACK_DISP0_8
   \   000329   7401         MOV     A,#0x1
   \   00032B   F0           MOVX    @DPTR,A
   1175                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   00032C   7409         MOV     A,#0x9
   \   00032E   12....       LCALL   ?XSTACK_DISP0_8
   \   000331   12....       LCALL   ?Subroutine51 & 0xFFFF
   1176                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1177                                         inMsg.msg->clusterId, &defautlRspCmd, 
   1178                                         ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1179                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_65:
   \   000334   12....       LCALL   ?XSTACK_DISP0_8
   \   000337   E0           MOVX    A,@DPTR
   \   000338   F5..         MOV     ?V0 + 1,A
   \   00033A   78..         MOV     R0,#?V0 + 1
   \   00033C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00033F   7407         MOV     A,#0x7
   \   000341   12....       LCALL   ?XSTACK_DISP0_8
   \   000344   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000347   75..01       MOV     ?V0 + 1,#0x1
   \   00034A   78..         MOV     R0,#?V0 + 1
   \   00034C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00034F   78..         MOV     R0,#?V0 + 1
   \   000351   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000354   7405         MOV     A,#0x5
   \   000356   12....       LCALL   ?XSTACK_DISP0_8
   \   000359   8582..       MOV     ?V0 + 6,DPL
   \   00035C   8583..       MOV     ?V0 + 7,DPH
   \   00035F   78..         MOV     R0,#?V0 + 6
   \   000361   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000364   7409         MOV     A,#0x9
   \   000366   12....       LCALL   ?XSTACK_DISP0_8
   \   000369   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00036C   7409         MOV     A,#0x9
   \   00036E   12....       LCALL   ?XSTACK_DISP0_8
   \   000371   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000374   12....       LCALL   ?XSTACK_DISP0_8
   \   000377   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00037A   12....       LCALL   ?DEALLOC_XSTACK8
   1180                  if ( securityEnable )
   \   00037D   E5..         MOV     A,?V0 + 0
   \   00037F   7003         JNZ     $+5
   \   000381   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1181                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );       
   \   000384                ; Setup parameters for call to function zclSetSecurityOption
   \   000384   7C01         MOV     R4,#0x1
   \   000386   12....       LCALL   ?Subroutine27 & 0xFFFF
   1182                }
   1183                return;   // Error, ignore the message
   1184              }
   1185            }
   \                     ??CrossCallReturnLabel_33:
   \   000389   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1186            
   1187            // Is this a foundation type message
   1188            if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zclProcessMessageMSG_15:
   \   00038C   E8           MOV     A,R0
   \   00038D   5403         ANL     A,#0x3
   \   00038F   6003         JZ      $+5
   \   000391   02....       LJMP    ??zclProcessMessageMSG_19 & 0xFFFF
   1189            { 
   1190              if ( inMsg.hdr.fc.manuSpecific )
   \   000394   E8           MOV     A,R0
   \   000395   5404         ANL     A,#0x4
   \   000397   6005         JZ      ??zclProcessMessageMSG_20
   1191              {
   1192                // We don't support any manufacturer specific command
   1193                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   000399   7A84         MOV     R2,#-0x7c
   \   00039B   02....       LJMP    ??zclProcessMessageMSG_21 & 0xFFFF
   1194              }
   1195              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) && 
   1196                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zclProcessMessageMSG_20:
   \   00039E   7409         MOV     A,#0x9
   \   0003A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A3   E0           MOVX    A,@DPTR
   \   0003A4   F5..         MOV     ?V0 + 0,A
   \   0003A6   C3           CLR     C
   \   0003A7   940E         SUBB    A,#0xe
   \   0003A9   4003         JC      $+5
   \   0003AB   02....       LJMP    ??zclProcessMessageMSG_22 & 0xFFFF
   \   0003AE   75..00       MOV     ?V0 + 1,#0x0
   \   0003B1   7402         MOV     A,#0x2
   \   0003B3   78..         MOV     R0,#?V0 + 0
   \   0003B5   12....       LCALL   ?S_SHL
   \   0003B8   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0003BB   F8           MOV     R0,A
   \   0003BC   7401         MOV     A,#0x1
   \   0003BE   93           MOVC    A,@A+DPTR
   \   0003BF   F9           MOV     R1,A
   \   0003C0   E8           MOV     A,R0
   \   0003C1   7001         JNZ     ??zclProcessMessageMSG_23
   \   0003C3   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_23:
   \   0003C4   7003         JNZ     $+5
   \   0003C6   02....       LJMP    ??zclProcessMessageMSG_22 & 0xFFFF
   1197              {
   1198                zclParseCmd_t parseCmd;
   1199                
   1200                parseCmd.endpoint = pkt->endPoint;
   \   0003C9   85..82       MOV     DPL,?V0 + 2
   \   0003CC   85..83       MOV     DPH,?V0 + 3
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   C0E0         PUSH    A
   \   0003D2   7414         MOV     A,#0x14
   \   0003D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D7   D0E0         POP     A
   \   0003D9   F0           MOVX    @DPTR,A
   1201                parseCmd.dataLen = inMsg.pDataLen;
   \   0003DA   740C         MOV     A,#0xc
   \   0003DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DF   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0003E2   7415         MOV     A,#0x15
   \   0003E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E7   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   1202                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_247:
   \   0003EA   740A         MOV     A,#0xa
   \   0003EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EF   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0003F2   7417         MOV     A,#0x17
   \   0003F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F7   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   1203                
   1204                // Parse the command, remember that the return value is a pointer to allocated memory
   1205                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_248:
   \   0003FA                ; Setup parameters for indirect call
   \   0003FA   7414         MOV     A,#0x14
   \   0003FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FF   AA82         MOV     R2,DPL
   \   000401   AB83         MOV     R3,DPH
   \   000403   7409         MOV     A,#0x9
   \   000405   12....       LCALL   ?XSTACK_DISP0_8
   \   000408   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00040B   12....       LCALL   ?S_SHL
   \   00040E   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000411   C0E0         PUSH    A
   \   000413   7401         MOV     A,#0x1
   \   000415   93           MOVC    A,@A+DPTR
   \   000416   F583         MOV     DPH,A
   \   000418   D082         POP     DPL
   \   00041A   12....       LCALL   ?CALL_IND
   \   00041D   740E         MOV     A,#0xe
   \   00041F   12....       LCALL   ?XSTACK_DISP0_8
   \   000422   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   1206                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_307:
   \   000425   740E         MOV     A,#0xe
   \   000427   12....       LCALL   ?XSTACK_DISP0_8
   \   00042A   E0           MOVX    A,@DPTR
   \   00042B   7002         JNZ     ??zclProcessMessageMSG_24
   \   00042D   A3           INC     DPTR
   \   00042E   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_24:
   \   00042F   6047         JZ      ??zclProcessMessageMSG_25
   \   000431   7409         MOV     A,#0x9
   \   000433   12....       LCALL   ?XSTACK_DISP0_8
   \   000436   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000439   12....       LCALL   ?S_SHL
   \   00043C   E5..         MOV     A,?V0 + 0
   \   00043E   24..         ADD     A,#((zclCmdTable + 2) & 0xff)
   \   000440   F582         MOV     DPL,A
   \   000442   E5..         MOV     A,?V0 + 1
   \   000444   34..         ADDC    A,#(((zclCmdTable + 2) >> 8) & 0xff)
   \   000446   F583         MOV     DPH,A
   \   000448   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00044B   E8           MOV     A,R0
   \   00044C   7001         JNZ     ??zclProcessMessageMSG_26
   \   00044E   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_26:
   \   00044F   601C         JZ      ??zclProcessMessageMSG_27
   1207                { 
   1208                  // Process the command
   1209                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   000451                ; Setup parameters for indirect call
   \   000451   7402         MOV     A,#0x2
   \   000453   12....       LCALL   ?XSTACK_DISP0_8
   \   000456   AA82         MOV     R2,DPL
   \   000458   AB83         MOV     R3,DPH
   \   00045A   8882         MOV     DPL,R0
   \   00045C   8983         MOV     DPH,R1
   \   00045E   12....       LCALL   ?CALL_IND
   1210                  {
   1211                    // Couldn't find attribute in the table.
   1212                  }
   1213                }
   1214                 
   1215                // Free the buffer
   1216                if ( inMsg.attrCmd )
   \   000461   740E         MOV     A,#0xe
   \   000463   12....       LCALL   ?XSTACK_DISP0_8
   \   000466   E0           MOVX    A,@DPTR
   \   000467   7002         JNZ     ??zclProcessMessageMSG_28
   \   000469   A3           INC     DPTR
   \   00046A   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_28:
   \   00046B   600B         JZ      ??zclProcessMessageMSG_25
   1217                  osal_mem_free( inMsg.attrCmd );
   \                     ??zclProcessMessageMSG_27:
   \   00046D                ; Setup parameters for call to function osal_mem_free
   \   00046D   740E         MOV     A,#0xe
   \   00046F   12....       LCALL   ?XSTACK_DISP0_8
   \   000472   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000475   12....       LCALL   ??osal_mem_free?relay
   1218                
   1219                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zclProcessMessageMSG_25:
   \   000478   7409         MOV     A,#0x9
   \   00047A   12....       LCALL   ?XSTACK_DISP0_8
   \   00047D   E0           MOVX    A,@DPTR
   \   00047E   FA           MOV     R2,A
   \   00047F   7003         JNZ     $+5
   \   000481   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   000484   7402         MOV     A,#0x2
   \   000486   6A           XRL     A,R2
   \   000487   7003         JNZ     $+5
   \   000489   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   00048C   7403         MOV     A,#0x3
   \   00048E   6A           XRL     A,R2
   \   00048F   7003         JNZ     $+5
   \   000491   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   000494   7406         MOV     A,#0x6
   \   000496   6A           XRL     A,R2
   \   000497   7003         JNZ     $+5
   \   000499   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   00049C   7408         MOV     A,#0x8
   \   00049E   6A           XRL     A,R2
   \   00049F   7003         JNZ     $+5
   \   0004A1   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0004A4   740C         MOV     A,#0xc
   \   0004A6   6A           XRL     A,R2
   \   0004A7   7003         JNZ     $+5
   \   0004A9   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   \   0004AC   740B         MOV     A,#0xb
   \   0004AE   6A           XRL     A,R2
   \   0004AF   7003         JNZ     $+5
   \   0004B1   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1220                  return; // We're done
   1221                
   1222                status = ZSuccess;
   \   0004B4   7A00         MOV     R2,#0x0
   \   0004B6   02....       LJMP    ??zclProcessMessageMSG_21 & 0xFFFF
   1223              }
   1224              else
   1225              {
   1226                // Unsupported message
   1227                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zclProcessMessageMSG_22:
   \   0004B9   7A82         MOV     R2,#-0x7e
   \   0004BB   02....       LJMP    ??zclProcessMessageMSG_21 & 0xFFFF
   1228              }
   1229            }
   1230            else  // Not a foundation type message, so it must be specific to the cluster ID.
   1231            {
   1232              if (epDesc->simpleDesc == NULL)
   \                     ??zclProcessMessageMSG_19:
   \   0004BE   85..82       MOV     DPL,?V0 + 6
   \   0004C1   85..83       MOV     DPH,?V0 + 7
   \   0004C4   E0           MOVX    A,@DPTR
   \   0004C5   7002         JNZ     ??zclProcessMessageMSG_29
   \   0004C7   A3           INC     DPTR
   \   0004C8   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_29:
   \   0004C9   607D         JZ      ??zclProcessMessageMSG_30
   1233              {
   1234                pInPlugin = NULL;
   1235              }
   1236              else
   1237              {
   1238                // Find the appropriate plugin
   1239                pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   0004CB   85..82       MOV     DPL,?V0 + 4
   \   0004CE   85..83       MOV     DPH,?V0 + 5
   \   0004D1   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0004D4   7003         JNZ     ??zclProcessMessageMSG_31
   \   0004D6   74FF         MOV     A,#-0x1
   \   0004D8   6B           XRL     A,R3
   \                     ??zclProcessMessageMSG_31:
   \   0004D9   6035         JZ      ??zclProcessMessageMSG_32
   \   0004DB   90....       MOV     DPTR,#plugins
   \   0004DE   8004         SJMP    ??zclProcessMessageMSG_33
   \                     ??zclProcessMessageMSG_34:
   \   0004E0   8882         MOV     DPL,R0
   \   0004E2   8983         MOV     DPH,R1
   \                     ??zclProcessMessageMSG_33:
   \   0004E4   12....       LCALL   ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0004E7   7001         JNZ     ??zclProcessMessageMSG_35
   \   0004E9   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_35:
   \   0004EA   6024         JZ      ??zclProcessMessageMSG_32
   \   0004EC   8882         MOV     DPL,R0
   \   0004EE   8983         MOV     DPH,R1
   \   0004F0   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0004F3   C3           CLR     C
   \   0004F4   EA           MOV     A,R2
   \   0004F5   9C           SUBB    A,R4
   \   0004F6   EB           MOV     A,R3
   \   0004F7   9D           SUBB    A,R5
   \   0004F8   40E6         JC      ??zclProcessMessageMSG_34
   \   0004FA   8882         MOV     DPL,R0
   \   0004FC   8983         MOV     DPH,R1
   \   0004FE   A3           INC     DPTR
   \   0004FF   A3           INC     DPTR
   \   000500   A3           INC     DPTR
   \   000501   A3           INC     DPTR
   \   000502   C3           CLR     C
   \   000503   E0           MOVX    A,@DPTR
   \   000504   9A           SUBB    A,R2
   \   000505   A3           INC     DPTR
   \   000506   E0           MOVX    A,@DPTR
   \   000507   9B           SUBB    A,R3
   \   000508   40D6         JC      ??zclProcessMessageMSG_34
   \   00050A   8882         MOV     DPL,R0
   \   00050C   8983         MOV     DPH,R1
   \   00050E   8006         SJMP    ??zclProcessMessageMSG_36
   \                     ??zclProcessMessageMSG_32:
   \   000510   758200       MOV     DPL,#0x0
   \   000513   758300       MOV     DPH,#0x0
   1240              }
   1241              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zclProcessMessageMSG_36:
   \   000516   E582         MOV     A,DPL
   \   000518   7002         JNZ     ??zclProcessMessageMSG_37
   \   00051A   E583         MOV     A,DPH
   \                     ??zclProcessMessageMSG_37:
   \   00051C   602A         JZ      ??zclProcessMessageMSG_30
   \   00051E   A3           INC     DPTR
   \   00051F   A3           INC     DPTR
   \   000520   A3           INC     DPTR
   \   000521   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000524   7001         JNZ     ??zclProcessMessageMSG_38
   \   000526   E9           MOV     A,R1
   \                     ??zclProcessMessageMSG_38:
   \   000527   601F         JZ      ??zclProcessMessageMSG_30
   1242              { 
   1243                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   000529                ; Setup parameters for indirect call
   \   000529   7402         MOV     A,#0x2
   \   00052B   12....       LCALL   ?XSTACK_DISP0_8
   \   00052E   AA82         MOV     R2,DPL
   \   000530   AB83         MOV     R3,DPH
   \   000532   8882         MOV     DPL,R0
   \   000534   8983         MOV     DPH,R1
   \   000536   12....       LCALL   ?CALL_IND
   \   000539   E9           MOV     A,R1
   \   00053A   FA           MOV     R2,A
   1244                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   00053B   74FF         MOV     A,#-0x1
   \   00053D   6A           XRL     A,R2
   \   00053E   7003         JNZ     $+5
   \   000540   02....       LJMP    ??zclProcessMessageMSG_1 & 0xFFFF
   1245                  return; // We're done      
   1246              }
   1247              
   1248              if ( status == ZFailure )
   \   000543   7401         MOV     A,#0x1
   \   000545   6A           XRL     A,R2
   \   000546   7010         JNZ     ??zclProcessMessageMSG_21
   1249              {
   1250                // Unsupported message
   1251                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zclProcessMessageMSG_30:
   \   000548   7404         MOV     A,#0x4
   \   00054A   12....       LCALL   ?XSTACK_DISP0_8
   \   00054D   E0           MOVX    A,@DPTR
   \   00054E   5404         ANL     A,#0x4
   \   000550   6004         JZ      ??zclProcessMessageMSG_39
   1252                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   000552   7A83         MOV     R2,#-0x7d
   \   000554   8002         SJMP    ??zclProcessMessageMSG_21
   1253                else
   1254                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zclProcessMessageMSG_39:
   \   000556   7A81         MOV     R2,#-0x7f
   1255              }
   1256            }
   1257            
   1258            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zclProcessMessageMSG_21:
   \   000558   7402         MOV     A,#0x2
   \   00055A   12....       LCALL   ?XSTACK_DISP0_8
   \   00055D   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000560   7070         JNZ     ??zclProcessMessageMSG_1
   \   000562   7402         MOV     A,#0x2
   \   000564   12....       LCALL   ?XSTACK_DISP0_8
   \   000567   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00056A   7002         JNZ     ??zclProcessMessageMSG_40
   \   00056C   A3           INC     DPTR
   \   00056D   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_40:
   \   00056E   7062         JNZ     ??zclProcessMessageMSG_1
   \   000570   7404         MOV     A,#0x4
   \   000572   12....       LCALL   ?XSTACK_DISP0_8
   \   000575   E0           MOVX    A,@DPTR
   \   000576   5410         ANL     A,#0x10
   \   000578   7058         JNZ     ??zclProcessMessageMSG_1
   1259            {
   1260              // Send a Default Response command back
   1261              defautlRspCmd.statusCode = status;
   \   00057A   7401         MOV     A,#0x1
   \   00057C   12....       LCALL   ?XSTACK_DISP0_8
   \   00057F   EA           MOV     A,R2
   \   000580   F0           MOVX    @DPTR,A
   1262              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   000581   7409         MOV     A,#0x9
   \   000583   12....       LCALL   ?XSTACK_DISP0_8
   \   000586   12....       LCALL   ?Subroutine51 & 0xFFFF
   1263              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1264                                     inMsg.msg->clusterId, &defautlRspCmd, 
   1265                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1266                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   1267            }
   \                     ??CrossCallReturnLabel_66:
   \   000589   12....       LCALL   ?XSTACK_DISP0_8
   \   00058C   E0           MOVX    A,@DPTR
   \   00058D   F5..         MOV     ?V0 + 0,A
   \   00058F   78..         MOV     R0,#?V0 + 0
   \   000591   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000594   7407         MOV     A,#0x7
   \   000596   12....       LCALL   ?XSTACK_DISP0_8
   \   000599   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00059C   75..01       MOV     ?V0 + 0,#0x1
   \   00059F   78..         MOV     R0,#?V0 + 0
   \   0005A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005A4   78..         MOV     R0,#?V0 + 0
   \   0005A6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005A9   7405         MOV     A,#0x5
   \   0005AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0005AE   8582..       MOV     ?V0 + 0,DPL
   \   0005B1   8583..       MOV     ?V0 + 1,DPH
   \   0005B4   78..         MOV     R0,#?V0 + 0
   \   0005B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005B9   7409         MOV     A,#0x9
   \   0005BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0005BE   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0005C1   7409         MOV     A,#0x9
   \   0005C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0005C6   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0005C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005CC   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0005CF   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zclProcessMessageMSG_1:
   \   0005D2   7437         MOV     A,#0x37
   \   0005D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005D7                REQUIRE ?Subroutine120
   \   0005D7                ; // Fall through to label ?Subroutine120
   1268          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   24..         ADD     A,#(zclCmdTable & 0xff)
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   34..         ADDC    A,#((zclCmdTable >> 8) & 0xff)
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   A4           MUL     AB
   \   000001   2A           ADD     A,R2
   \   000002   F9           MOV     R1,A
   \   000003   E8           MOV     A,R0
   \   000004   24..         ADD     A,#(global_recv_data & 0xff)
   \   000006   FA           MOV     R2,A
   \   000007   E9           MOV     A,R1
   \   000008   34..         ADDC    A,#((global_recv_data >> 8) & 0xff)
   \   00000A   FB           MOV     R3,A
   \   00000B   12....       LCALL   ??strcpy?relay
   \   00000E   85..82       MOV     DPL,?V0 + 2
   \   000011   85..83       MOV     DPH,?V0 + 3
   \   000014   E0           MOVX    A,@DPTR
   \   000015   24FE         ADD     A,#-0x2
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   74FF         MOV     A,#-0x1
   \   000005   6A           XRL     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   75..00       MOV     ?V0 + 1,#0x0
   \   000006   7402         MOV     A,#0x2
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008   7408         MOV     A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   7409         MOV     A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2415         ADD     A,#0x15
   \   000003   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??zclSetSecurityOption?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2414         ADD     A,#0x14
   \   000003   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??zcl_SendDefaultRspCmd?relay
   \   00000A   7407         MOV     A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E4           CLR     A
   \   000001   93           MOVC    A,@A+DPTR
   \   000002   F8           MOV     R0,A
   \   000003   7401         MOV     A,#0x1
   \   000005   93           MOVC    A,@A+DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003                REQUIRE ??Subroutine129_0
   \   000003                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine130_0
   \   000002                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine131_0
   \   000002                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine132_0
   \   000003                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine145_0
   \   000001                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine149_0
   \   000003                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004                ; Setup parameters for call to function afFindEndPointDesc
   \   000004                ; Setup parameters for call to function zclGetAttrDataLength
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   FB           MOV     R3,A
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   85..83       MOV     DPH,?V0 + 3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1269          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1270          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   1271          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1272            // Clear the header
   1273            osal_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV     R4,#0x6
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??osal_memset?relay
   1274          
   1275            // Parse the Frame Control
   1276            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   54FC         ANL     A,#0xfc
   \   00001F   12....       LCALL   ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7403         MOV     A,#0x3
   \   000026   5A           ANL     A,R2
   \   000027   48           ORL     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   1277            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_245:
   \   000032   74FB         MOV     A,#-0x5
   \   000034   58           ANL     A,R0
   \   000035   FA           MOV     R2,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00003D   E4           CLR     A
   \   00003E   92E0         MOV     0xE0 /* A   */.0,C
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   75..00       MOV     ?V0 + 3,#0x0
   \   000045   7402         MOV     A,#0x2
   \   000047   78..         MOV     R0,#?V0 + 2
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   7404         MOV     A,#0x4
   \   00004E   55..         ANL     A,?V0 + 2
   \   000050   4A           ORL     A,R2
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   1278            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_17:
   \   00005A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00005C   85..82       MOV     DPL,?V0 + 0
   \   00005F   85..83       MOV     DPH,?V0 + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5004         JNC     ??zclParseHdr_0
   1279              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000065   4408         ORL     A,#0x8
   \   000067   8002         SJMP    ??zclParseHdr_1
   1280            else
   1281              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_0:
   \   000069   54F7         ANL     A,#0xf7
   \                     ??zclParseHdr_1:
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F0           MOVX    @DPTR,A
   1282            
   1283            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \   00006F   85..82       MOV     DPL,?V0 + 0
   \   000072   85..83       MOV     DPH,?V0 + 1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   54EF         ANL     A,#0xef
   \   000078   FA           MOV     R2,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FB           MOV     R3,A
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   A2E4         MOV     C,0xE0 /* A   */.4
   \   000083   E4           CLR     A
   \   000084   92E0         MOV     0xE0 /* A   */.0,C
   \   000086   F5..         MOV     ?V0 + 2,A
   \   000088   7404         MOV     A,#0x4
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?S_SHL
   \   00008F   7410         MOV     A,#0x10
   \   000091   55..         ANL     A,?V0 + 2
   \   000093   4A           ORL     A,R2
   \   000094   F8           MOV     R0,A
   \   000095   EB           MOV     A,R3
   \   000096   F9           MOV     R1,A
   \   000097   85..82       MOV     DPL,?V0 + 0
   \   00009A   85..83       MOV     DPH,?V0 + 1
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   1284            pData++;  // move past the frame control field
   1285          
   1286            // parse the manfacturer code
   1287            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_220:
   \   0000A4   E8           MOV     A,R0
   \   0000A5   5404         ANL     A,#0x4
   \   0000A7   6013         JZ      ??CrossCallReturnLabel_10
   1288            {
   1289              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A9   12....       LCALL   ?Subroutine102 & 0xFFFF
   1290              pData += 2;
   1291            }
   \                     ??CrossCallReturnLabel_282:
   \   0000AC   F9           MOV     R1,A
   \   0000AD   EA           MOV     A,R2
   \   0000AE   85..82       MOV     DPL,?V0 + 0
   \   0000B1   85..83       MOV     DPH,?V0 + 1
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E9           MOV     A,R1
   \   0000B9   12....       LCALL   ?Subroutine9 & 0xFFFF
   1292          
   1293            // parse the Transaction Sequence Number
   1294            hdr->transSeqNum = *pData++;
   \                     ??CrossCallReturnLabel_10:
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   85..83       MOV     DPH,?V0 + 1
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   12....       LCALL   ?Subroutine5 & 0xFFFF
   1295          
   1296            // parse the Cluster's command ID
   1297            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_8:
   \   0000CD   85..82       MOV     DPL,?V0 + 0
   \   0000D0   85..83       MOV     DPH,?V0 + 1
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   1298          
   1299            // Should point to the frame payload
   1300            return ( pData );
   \                     ??CrossCallReturnLabel_226:
   \   0000DB   AA82         MOV     R2,DPL
   \   0000DD   AB83         MOV     R3,DPH
   \   0000DF                REQUIRE ?Subroutine108
   \   0000DF                ; // Fall through to label ?Subroutine108
   1301          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   02....       LJMP    ?Subroutine113 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   02....       LJMP    ?Subroutine116 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ?Subroutine116 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1302          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1303          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   1304          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1305            // Build the Frame Control byte
   1306            *pData = hdr->fc.type;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   5403         ANL     A,#0x3
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   1307            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_178:
   \   000013   5404         ANL     A,#0x4
   \   000015   12....       LCALL   ?Subroutine16 & 0xFFFF
   1308            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_176:
   \   000018   5408         ANL     A,#0x8
   \   00001A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1309            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_177:
   \   00001D   5410         ANL     A,#0x10
   \   00001F   FE           MOV     R6,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   4E           ORL     A,R6
   \   000026   12....       LCALL   ?Subroutine8 & 0xFFFF
   1310            pData++;  // move past the frame control field
   1311          
   1312            // Add the manfacturer code
   1313            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_238:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5404         ANL     A,#0x4
   \   00002C   6013         JZ      ??CrossCallReturnLabel_70
   1314            {
   1315              *pData++ = LO_UINT16( hdr->manuCode );
   \   00002E   EA           MOV     A,R2
   \   00002F   2402         ADD     A,#0x2
   \   000031   F8           MOV     R0,A
   \   000032   EB           MOV     A,R3
   \   000033   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000036   12....       LCALL   ?Subroutine53 & 0xFFFF
   1316              *pData++ = HI_UINT16( hdr->manuCode );
   \                     ??CrossCallReturnLabel_69:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine53 & 0xFFFF
   1317            }
   1318          
   1319            // Add the Transaction Sequence Number
   1320            *pData++ = hdr->transSeqNum;
   \                     ??CrossCallReturnLabel_70:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   12....       LCALL   ?Subroutine8 & 0xFFFF
   1321            
   1322            // Add the Cluster's command ID
   1323            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_239:
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   8C82         MOV     DPL,R4
   \   000059   8D83         MOV     DPH,R5
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   1324          
   1325            // Should point to the frame payload
   1326            return ( pData );
   \   00005D   AA82         MOV     R2,DPL
   \   00005F   AB83         MOV     R3,DPH
   \   000061   7F01         MOV     R7,#0x1
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
   1327          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0C           INC     R4
   \   000008   AD83         MOV     R5,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   FE           MOV     R6,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   E0           MOVX    A,@DPTR
   \   000006   4E           ORL     A,R6
   \   000007                REQUIRE ??Subroutine128_0
   \   000007                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AC82         MOV     R4,DPL
   \   000004   AD83         MOV     R5,DPH
   \   000006                REQUIRE ?Subroutine115
   \   000006                ; // Fall through to label ?Subroutine115

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   22           RET
   1328          
   1329          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   1330          {
   1331            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   1332          
   1333            // Add the manfacturer code
   1334            if ( hdr->fc.manuSpecific )
   1335              needed += 2;
   1336          
   1337            return ( needed );
   1338          }
   1339          
   1340          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   1341          {
   1342            zclLibPlugin_t *pLoop;
   1343            
   1344            (void)profileID;  // Intentionally unreferenced parameter
   1345          
   1346            if ( clusterID != ZCL_INVALID_CLUSTER_ID )
   1347            {
   1348              pLoop = plugins;
   1349              while ( pLoop != NULL )
   1350              {
   1351                if ( clusterID >= pLoop->startClusterID && clusterID <= pLoop->endClusterID )
   1352                  return ( pLoop );
   1353                pLoop = pLoop->next;
   1354              }
   1355            }
   1356            return ( (zclLibPlugin_t *)NULL );
   1357          }
   1358          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1359          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   1360          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   1361            uint8 x;
   1362            zclAttrRecsList *pLoop;
   1363          
   1364            pLoop = attrList;
   \                     ??CrossCallReturnLabel_182:
   \   000017   90....       MOV     DPTR,#attrList
   \   00001A   8004         SJMP    ??zclFindAttrRec_0
   1365          
   1366            while ( pLoop != NULL )
   1367            {
   1368              if ( pLoop->endpoint == endpoint )
   1369              {
   1370                for ( x = 0; x < pLoop->numAttributes; x++ )
   1371                {
   1372                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId == attrId )
   1373                  {
   1374                    *pAttr = pLoop->attrs[x];
   1375                    return ( TRUE ); // EMBEDDED RETURN
   1376                  }
   1377                }
   1378              }
   1379              pLoop = pLoop->next;
   \                     ??zclFindAttrRec_1:
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \                     ??zclFindAttrRec_0:
   \   000020   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000023   7001         JNZ     ??zclFindAttrRec_2
   \   000025   EB           MOV     A,R3
   \                     ??zclFindAttrRec_2:
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??zclFindAttrRec_3 & 0xFFFF
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   65..         XRL     A,?V0 + 2
   \   000034   70E6         JNZ     ??zclFindAttrRec_1
   \   000036   75..00       MOV     ?V0 + 3,#0x0
   \   000039   EA           MOV     A,R2
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V0 + 4,R0
   \   000043   89..         MOV     ?V0 + 5,R1
   \   000045   8002         SJMP    ??zclFindAttrRec_4
   \                     ??zclFindAttrRec_5:
   \   000047   05..         INC     ?V0 + 3
   \                     ??zclFindAttrRec_4:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   C3           CLR     C
   \   000055   98           SUBB    A,R0
   \   000056   50C4         JNC     ??zclFindAttrRec_1
   \   000058   85....       MOV     ?V0 + 8,?V0 + 3
   \   00005B   75..00       MOV     ?V0 + 9,#0x0
   \   00005E   7403         MOV     A,#0x3
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?S_SHL
   \   000065   85....       MOV     ?V0 + 6,?V0 + 8
   \   000068   85....       MOV     ?V0 + 7,?V0 + 9
   \   00006B   85..82       MOV     DPL,?V0 + 4
   \   00006E   85..83       MOV     DPH,?V0 + 5
   \   000071   E0           MOVX    A,@DPTR
   \   000072   25..         ADD     A,?V0 + 6
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   35..         ADDC    A,?V0 + 7
   \   000079   F9           MOV     R1,A
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000081   EE           MOV     A,R6
   \   000082   68           XRL     A,R0
   \   000083   7002         JNZ     ??zclFindAttrRec_6
   \   000085   EF           MOV     A,R7
   \   000086   69           XRL     A,R1
   \                     ??zclFindAttrRec_6:
   \   000087   70BE         JNZ     ??zclFindAttrRec_5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00008E   E5..         MOV     A,?V0 + 0
   \   000090   68           XRL     A,R0
   \   000091   7003         JNZ     ??zclFindAttrRec_7
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   69           XRL     A,R1
   \                     ??zclFindAttrRec_7:
   \   000096   70AF         JNZ     ??zclFindAttrRec_5
   \   000098   85..82       MOV     DPL,?V0 + 4
   \   00009B   85..83       MOV     DPH,?V0 + 5
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   25..         ADD     A,?V0 + 6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   35..         ADDC    A,?V0 + 7
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   F583         MOV     DPH,A
   \   0000AA   7408         MOV     A,#0x8
   \   0000AC   12....       LCALL   ?MOVE_LONG8_XDATA_CODE
   \   0000AF   7901         MOV     R1,#0x1
   \   0000B1   8002         SJMP    ??zclFindAttrRec_8
   1380            }
   1381            return ( FALSE );
   \                     ??zclFindAttrRec_3:
   \   0000B3   7900         MOV     R1,#0x0
   \                     ??zclFindAttrRec_8:
   \   0000B5   7F0A         MOV     R7,#0xa
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA
   1382          }
   1383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1384          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   1385          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   1386            uint8 x;
   1387            zclClusterOptionList *pLoop;
   1388          
   1389            pLoop = clusterOptionList;
   \   000007   90....       MOV     DPTR,#clusterOptionList
   \   00000A   8004         SJMP    ??zclFindClusterOption_0
   1390          
   1391            while ( pLoop != NULL )
   1392            {
   1393              if ( pLoop->endpoint == endpoint )
   1394              {
   1395                for ( x = 0; x < pLoop->numOptions; x++ )
   1396                {
   1397                  if ( pLoop->options[x].clusterID == clusterID )
   1398                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   1399                }
   1400              }
   1401              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000010   12....       LCALL   ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000013   7001         JNZ     ??zclFindClusterOption_2
   \   000015   E9           MOV     A,R1
   \                     ??zclFindClusterOption_2:
   \   000016   605F         JZ      ??zclFindClusterOption_3
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   65..         XRL     A,?V0 + 0
   \   000021   70E9         JNZ     ??zclFindClusterOption_1
   \   000023   75..00       MOV     ?V0 + 2,#0x0
   \   000026   E8           MOV     A,R0
   \   000027   2404         ADD     A,#0x4
   \   000029   FC           MOV     R4,A
   \   00002A   E9           MOV     A,R1
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   FD           MOV     R5,A
   \   00002E   EC           MOV     A,R4
   \   00002F   FE           MOV     R6,A
   \   000030   ED           MOV     A,R5
   \   000031   FF           MOV     R7,A
   \   000032   8002         SJMP    ??zclFindClusterOption_4
   \                     ??zclFindClusterOption_5:
   \   000034   05..         INC     ?V0 + 2
   \                     ??zclFindClusterOption_4:
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   E5..         MOV     A,?V0 + 2
   \   000041   C3           CLR     C
   \   000042   9C           SUBB    A,R4
   \   000043   50C7         JNC     ??zclFindClusterOption_1
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   75F003       MOV     B,#0x3
   \   00004A   A4           MUL     AB
   \   00004B   FC           MOV     R4,A
   \   00004C   85F0..       MOV     ?V0 + 1,B
   \   00004F   AD..         MOV     R5,?V0 + 1
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2C           ADD     A,R4
   \   000057   F5..         MOV     ?V0 + 1,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   3D           ADDC    A,R5
   \   00005C   85..82       MOV     DPL,?V0 + 1
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6A           XRL     A,R2
   \   000063   7003         JNZ     ??zclFindClusterOption_6
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6B           XRL     A,R3
   \                     ??zclFindClusterOption_6:
   \   000068   70CA         JNZ     ??zclFindClusterOption_5
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   2C           ADD     A,R4
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   3D           ADDC    A,R5
   \   000074   FB           MOV     R3,A
   \   000075   8004         SJMP    ??zclFindClusterOption_7
   1402            }
   1403            return ( NULL );
   \                     ??zclFindClusterOption_3:
   \   000077   7A00         MOV     R2,#0x0
   \   000079   7B00         MOV     R3,#0x0
   \                     ??zclFindClusterOption_7:
   \   00007B                REQUIRE ?Subroutine121
   \   00007B                ; // Fall through to label ?Subroutine121
   1404          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1405          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1406          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   1407          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1408            uint8 option;
   1409            zclOptionRec_t *pOption;
   1410          
   1411             pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL   ??zclFindClusterOption?relay
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   1412            if ( pOption != NULL )
   \   00000C   E582         MOV     A,DPL
   \   00000E   7002         JNZ     ??zclGetClusterOption_0
   \   000010   E583         MOV     A,DPH
   \                     ??zclGetClusterOption_0:
   \   000012   6008         JZ      ??zclGetClusterOption_1
   1413            {
   1414              option = pOption->option;
   1415              if ( !ZG_SECURE_ENABLED )
   1416                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   1417          
   1418              return ( option ); // EMBEDDED RETURN
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   54BF         ANL     A,#0xbf
   \   000019   F9           MOV     R1,A
   \   00001A   8002         SJMP    ??zclGetClusterOption_2
   1419            }
   1420          
   1421            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_1:
   \   00001C   7900         MOV     R1,#0x0
   \                     ??zclGetClusterOption_2:
   \   00001E   80..         SJMP    ?Subroutine117
   1422          }
   1423          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1424          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   1425          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   1426            zclOptionRec_t *pOption;
   1427          
   1428            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL   ??zclFindClusterOption?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
   1429            if ( pOption != NULL )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??zclSetSecurityOption_0
   \   000015   E9           MOV     A,R1
   \                     ??zclSetSecurityOption_0:
   \   000016   6016         JZ      ??zclSetSecurityOption_1
   1430            {
   1431              if ( enable )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   EE           MOV     A,R6
   \   000023   6005         JZ      ??zclSetSecurityOption_2
   1432                pOption->option |= AF_EN_SECURITY;
   \   000025   E0           MOVX    A,@DPTR
   \   000026   D2E6         SETB    0xE0 /* A   */.6
   \   000028   8003         SJMP    ??zclSetSecurityOption_3
   1433              else
   1434                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_2:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C2E6         CLR     0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_3:
   \   00002D   F0           MOVX    @DPTR,A
   1435            }
   1436          }
   \                     ??zclSetSecurityOption_1:
   \   00002E                REQUIRE ?Subroutine117
   \   00002E                ; // Fall through to label ?Subroutine117
   1437          
   1438          #ifdef ZCL_DISCOVER
   1439          
   1440          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID,
   1441                                           uint16 *attrId, zclAttrRec_t *pAttr )
   1442          {
   1443            uint16 x;
   1444            zclAttrRecsList *pLoop;
   1445          
   1446            pLoop = attrList;
   1447          
   1448            while ( pLoop != NULL )
   1449            {
   1450              if ( pLoop->endpoint == endpoint )
   1451              {
   1452                for ( x = 0; x < pLoop->numAttributes; x++ )
   1453                {
   1454                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId >= *attrId )
   1455                  {
   1456                    *pAttr = pLoop->attrs[x];
   1457                    
   1458                    // Update attribute ID
   1459                    *attrId = pAttr->attr.attrId; 
   1460                    return ( TRUE ); // EMBEDDED RETURN
   1461                  }
   1462                }
   1463              }
   1464              pLoop = pLoop->next;
   1465            }
   1466          
   1467            return ( FALSE );
   1468          }
   1469          #endif // ZCL_DISCOVER
   1470          
   1471          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1472          static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   1473          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   1474            uint8 *pStr;
   1475            uint8 len;
   1476          
   1477            switch ( dataType )
   \   00000D   8E..         MOV     ?V0 + 0,R6
   \   00000F   8F..         MOV     ?V0 + 1,R7
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000021   03           DB        3
   \   000022   41           DB        65
   \   000023   42           DB        66
   \   000024   ....         DW        ??zclSerializeData_0
   \   000026   E0           DB        224
   \   000027   E2           DB        226
   \   000028   ....         DW        ??zclSerializeData_1
   \   00002A   E8           DB        232
   \   00002B   E9           DB        233
   \   00002C   ....         DW        ??zclSerializeData_2
   \   00002E   19           DB        25
   \   00002F   08           DB        8
   \   000030   ....         DW        ??zclSerializeData_3
   \   000032   09           DB        9
   \   000033   ....         DW        ??zclSerializeData_2
   \   000035   0A           DB        10
   \   000036   ....         DW        ??zclSerializeData_4
   \   000038   0B           DB        11
   \   000039   ....         DW        ??zclSerializeData_1
   \   00003B   10           DB        16
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   18           DB        24
   \   00003F   ....         DW        ??zclSerializeData_3
   \   000041   19           DB        25
   \   000042   ....         DW        ??zclSerializeData_2
   \   000044   1A           DB        26
   \   000045   ....         DW        ??zclSerializeData_4
   \   000047   1B           DB        27
   \   000048   ....         DW        ??zclSerializeData_1
   \   00004A   20           DB        32
   \   00004B   ....         DW        ??zclSerializeData_3
   \   00004D   21           DB        33
   \   00004E   ....         DW        ??zclSerializeData_2
   \   000050   22           DB        34
   \   000051   ....         DW        ??zclSerializeData_4
   \   000053   23           DB        35
   \   000054   ....         DW        ??zclSerializeData_1
   \   000056   24           DB        36
   \   000057   ....         DW        ??zclSerializeData_5
   \   000059   25           DB        37
   \   00005A   ....         DW        ??zclSerializeData_6
   \   00005C   28           DB        40
   \   00005D   ....         DW        ??zclSerializeData_3
   \   00005F   29           DB        41
   \   000060   ....         DW        ??zclSerializeData_2
   \   000062   2A           DB        42
   \   000063   ....         DW        ??zclSerializeData_4
   \   000065   2B           DB        43
   \   000066   ....         DW        ??zclSerializeData_1
   \   000068   30           DB        48
   \   000069   ....         DW        ??zclSerializeData_3
   \   00006B   31           DB        49
   \   00006C   ....         DW        ??zclSerializeData_2
   \   00006E   38           DB        56
   \   00006F   ....         DW        ??zclSerializeData_2
   \   000071   39           DB        57
   \   000072   ....         DW        ??zclSerializeData_1
   \   000074   EA           DB        234
   \   000075   ....         DW        ??zclSerializeData_1
   \   000077   F0           DB        240
   \   000078   ....         DW        ??zclSerializeData_7
   \   00007A   ....         DW        ??zclSerializeData_8
   1478            {
   1479              case ZCL_DATATYPE_DATA8:
   1480              case ZCL_DATATYPE_BOOLEAN:
   1481              case ZCL_DATATYPE_BITMAP8:
   1482              case ZCL_DATATYPE_INT8:
   1483              case ZCL_DATATYPE_UINT8:
   1484              case ZCL_DATATYPE_ENUM8:
   1485                *buf = *((uint8 *)attrData);
   \                     ??zclSerializeData_3:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \                     ??zclSerializeData_9:
   \   000080   12....       LCALL   ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   02....       LJMP    ??zclSerializeData_8 & 0xFFFF
   1486                 break;
   1487          
   1488              case ZCL_DATATYPE_DATA16:
   1489              case ZCL_DATATYPE_BITMAP16:
   1490              case ZCL_DATATYPE_UINT16:
   1491              case ZCL_DATATYPE_INT16: 
   1492              case ZCL_DATATYPE_ENUM16:
   1493              case ZCL_DATATYPE_SEMI_PREC:
   1494              case ZCL_DATATYPE_CLUSTER_ID:
   1495              case ZCL_DATATYPE_ATTR_ID:
   1496                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_2:
   \   000087   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00008A   12....       LCALL   ?Subroutine15 & 0xFFFF
   1497                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_233:
   \   00008D   A3           INC     DPTR
   \   00008E   80F0         SJMP    ??zclSerializeData_9
   1498                break;
   1499          
   1500              case ZCL_DATATYPE_DATA24:
   1501              case ZCL_DATATYPE_BITMAP24: 
   1502              case ZCL_DATATYPE_UINT24:
   1503              case ZCL_DATATYPE_INT24:
   1504                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_4:
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   12....       LCALL   ?Subroutine15 & 0xFFFF
   1505                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_234:
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   0A           INC     R2
   \   0000B0   AB83         MOV     R3,DPH
   1506                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?L_MOV_X
   \   0000BB   7410         MOV     A,#0x10
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?UL_SHR
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   E5..         MOV     A,?V0 + 0
   \   0000C8   80B9         SJMP    ??CrossCallReturnLabel_240
   1507                break;
   1508                
   1509              case ZCL_DATATYPE_DATA32:
   1510              case ZCL_DATATYPE_BITMAP32:
   1511              case ZCL_DATATYPE_UINT32:
   1512              case ZCL_DATATYPE_INT32:
   1513              case ZCL_DATATYPE_SINGLE_PREC:
   1514              case ZCL_DATATYPE_TOD:
   1515              case ZCL_DATATYPE_DATE:
   1516              case ZCL_DATATYPE_UTC:
   1517              case ZCL_DATATYPE_BAC_OID:
   1518                buf = osal_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_1:
   \   0000CA                ; Setup parameters for call to function osal_buffer_uint32
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D1   12....       LCALL   ??osal_buffer_uint32?relay
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   8043         SJMP    ??zclSerializeData_8
   1519                break;
   1520                
   1521              case ZCL_DATATYPE_UINT40:
   1522                pStr = (uint8*)attrData;
   1523                osal_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_5:
   \   0000DB                ; Setup parameters for call to function osal_memcpy
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E0   7C05         MOV     R4,#0x5
   \   0000E2   8032         SJMP    ??zclSerializeData_10
   1524                break;
   1525                
   1526              case ZCL_DATATYPE_UINT48:
   1527                pStr = (uint8*)attrData;
   1528                osal_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_6:
   \   0000E4                ; Setup parameters for call to function osal_memcpy
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E9   7C06         MOV     R4,#0x6
   \   0000EB   8029         SJMP    ??zclSerializeData_10
   1529                break;
   1530                
   1531              case ZCL_DATATYPE_IEEE_ADDR:
   1532                pStr = (uint8*)attrData;
   1533                osal_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_7:
   \   0000ED                ; Setup parameters for call to function osal_memcpy
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C08         MOV     R4,#0x8
   \   0000F4   8020         SJMP    ??zclSerializeData_10
   1534                break;
   1535                
   1536              case ZCL_DATATYPE_CHAR_STR:
   1537              case ZCL_DATATYPE_OCTET_STR:
   1538                pStr = (uint8*)attrData;
   1539                len = *pStr++;
   \                     ??zclSerializeData_0:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F5..         MOV     ?V0 + 3,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   AE82         MOV     R6,DPL
   \   000100   AF83         MOV     R7,DPH
   1540                *buf++ = len;
   \   000102   8A82         MOV     DPL,R2
   \   000104   8B83         MOV     DPH,R3
   \   000106   F0           MOVX    @DPTR,A
   \   000107   EC           MOV     A,R4
   \   000108   FA           MOV     R2,A
   \   000109   ED           MOV     A,R5
   \   00010A   FB           MOV     R3,A
   1541                osal_memcpy( buf, pStr, len );
   \   00010B                ; Setup parameters for call to function osal_memcpy
   \   00010B   8E..         MOV     ?V0 + 0,R6
   \   00010D   8F..         MOV     ?V0 + 1,R7
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000114   AC..         MOV     R4,?V0 + 3
   \                     ??zclSerializeData_10:
   \   000116   7D00         MOV     R5,#0x0
   1542                break;
   1543                
   1544              case ZCL_DATATYPE_NO_DATA:
   1545              case ZCL_DATATYPE_UNKNOWN:
   1546                // Fall through
   1547          
   1548              default:
   1549                break;
   1550            }
   \   000118   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   1551          }
   \                     ??zclSerializeData_8:
   \   00011E   02....       LJMP    ?Subroutine108 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   FA           MOV     R2,A
   \   000003   ED           MOV     A,R5
   \   000004   FB           MOV     R3,A
   \   000005                REQUIRE ?Subroutine116
   \   000005                ; // Fall through to label ?Subroutine116

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine143_0
   \   000004                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   02....       LJMP    ?Subroutine115 & 0xFFFF
   1552          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
   1553          
   1554          #ifdef ZCL_REPORT
   1555          uint8 zclAnalogDataType( uint8 dataType )
   1556          {
   1557            uint8 analog;
   1558            
   1559            switch ( dataType )
   1560            {
   1561              case ZCL_DATATYPE_UINT8:
   1562              case ZCL_DATATYPE_UINT16:
   1563              case ZCL_DATATYPE_UINT24:
   1564              case ZCL_DATATYPE_UINT32:
   1565              case ZCL_DATATYPE_UINT40:
   1566              case ZCL_DATATYPE_UINT48:
   1567              case ZCL_DATATYPE_INT8:
   1568              case ZCL_DATATYPE_INT16:
   1569              case ZCL_DATATYPE_INT24:
   1570              case ZCL_DATATYPE_INT32:
   1571              case ZCL_DATATYPE_SEMI_PREC:
   1572              case ZCL_DATATYPE_SINGLE_PREC:
   1573              case ZCL_DATATYPE_DOUBLE_PREC:
   1574              case ZCL_DATATYPE_TOD:
   1575              case ZCL_DATATYPE_DATE:
   1576              case ZCL_DATATYPE_UTC:
   1577                analog = TRUE;
   1578                break;
   1579                
   1580              default:
   1581                analog = FALSE;
   1582                break;
   1583            }
   1584            return ( analog );
   1585          }
   1586          
   1587          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf)
   1588          {
   1589            switch ( dataType )
   1590            {
   1591              case ZCL_DATATYPE_UINT8:
   1592              case ZCL_DATATYPE_INT8:
   1593                *pData = *pBuf;
   1594                break;
   1595          
   1596              case ZCL_DATATYPE_UINT16:
   1597              case ZCL_DATATYPE_INT16:
   1598              case ZCL_DATATYPE_SEMI_PREC:
   1599                *((uint16*)pData) = BUILD_UINT16( pBuf[0], pBuf[1] ); 
   1600                break;
   1601           
   1602              case ZCL_DATATYPE_UINT24:
   1603              case ZCL_DATATYPE_INT24:
   1604                *((uint32*)pData) = osal_build_uint32( pBuf, 3 );
   1605                break;
   1606                
   1607              case ZCL_DATATYPE_UINT32:
   1608              case ZCL_DATATYPE_INT32:
   1609              case ZCL_DATATYPE_SINGLE_PREC:
   1610              case ZCL_DATATYPE_TOD:
   1611              case ZCL_DATATYPE_DATE:
   1612              case ZCL_DATATYPE_UTC:
   1613                *((uint32*)pData) = osal_build_uint32( pBuf, 4 );
   1614                break;
   1615                
   1616              case ZCL_DATATYPE_DOUBLE_PREC:
   1617                *pData = 0;
   1618                break;
   1619           
   1620              default:
   1621                break;
   1622            }
   1623          }
   1624          #endif // ZCL_REPORT
   1625          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1626          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   1627          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1628            uint8 len;
   1629            
   1630            switch ( dataType )
   \   000004   E9           MOV     A,R1
   \   000005   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclGetDataTypeLength>_0`:
   \   000008   02           DB        2
   \   000009   E0           DB        224
   \   00000A   E2           DB        226
   \   00000B   ....         DW        ??zclGetDataTypeLength_0
   \   00000D   E8           DB        232
   \   00000E   E9           DB        233
   \   00000F   ....         DW        ??zclGetDataTypeLength_1
   \   000011   1A           DB        26
   \   000012   08           DB        8
   \   000013   ....         DW        ??zclGetDataTypeLength_2
   \   000015   09           DB        9
   \   000016   ....         DW        ??zclGetDataTypeLength_1
   \   000018   0A           DB        10
   \   000019   ....         DW        ??zclGetDataTypeLength_3
   \   00001B   0B           DB        11
   \   00001C   ....         DW        ??zclGetDataTypeLength_0
   \   00001E   10           DB        16
   \   00001F   ....         DW        ??zclGetDataTypeLength_2
   \   000021   18           DB        24
   \   000022   ....         DW        ??zclGetDataTypeLength_2
   \   000024   19           DB        25
   \   000025   ....         DW        ??zclGetDataTypeLength_1
   \   000027   1A           DB        26
   \   000028   ....         DW        ??zclGetDataTypeLength_3
   \   00002A   1B           DB        27
   \   00002B   ....         DW        ??zclGetDataTypeLength_0
   \   00002D   20           DB        32
   \   00002E   ....         DW        ??zclGetDataTypeLength_2
   \   000030   21           DB        33
   \   000031   ....         DW        ??zclGetDataTypeLength_1
   \   000033   22           DB        34
   \   000034   ....         DW        ??zclGetDataTypeLength_3
   \   000036   23           DB        35
   \   000037   ....         DW        ??zclGetDataTypeLength_0
   \   000039   24           DB        36
   \   00003A   ....         DW        ??zclGetDataTypeLength_4
   \   00003C   25           DB        37
   \   00003D   ....         DW        ??zclGetDataTypeLength_5
   \   00003F   28           DB        40
   \   000040   ....         DW        ??zclGetDataTypeLength_2
   \   000042   29           DB        41
   \   000043   ....         DW        ??zclGetDataTypeLength_1
   \   000045   2A           DB        42
   \   000046   ....         DW        ??zclGetDataTypeLength_3
   \   000048   2B           DB        43
   \   000049   ....         DW        ??zclGetDataTypeLength_0
   \   00004B   30           DB        48
   \   00004C   ....         DW        ??zclGetDataTypeLength_2
   \   00004E   31           DB        49
   \   00004F   ....         DW        ??zclGetDataTypeLength_1
   \   000051   38           DB        56
   \   000052   ....         DW        ??zclGetDataTypeLength_1
   \   000054   39           DB        57
   \   000055   ....         DW        ??zclGetDataTypeLength_0
   \   000057   3A           DB        58
   \   000058   ....         DW        ??zclGetDataTypeLength_6
   \   00005A   EA           DB        234
   \   00005B   ....         DW        ??zclGetDataTypeLength_0
   \   00005D   F0           DB        240
   \   00005E   ....         DW        ??zclGetDataTypeLength_6
   \   000060   ....         DW        ??zclGetDataTypeLength_7
   1631            {
   1632              case ZCL_DATATYPE_DATA8:
   1633              case ZCL_DATATYPE_BOOLEAN:
   1634              case ZCL_DATATYPE_BITMAP8:
   1635              case ZCL_DATATYPE_INT8:
   1636              case ZCL_DATATYPE_UINT8:
   1637              case ZCL_DATATYPE_ENUM8:
   1638                len = 1;
   \                     ??zclGetDataTypeLength_2:
   \   000062   7901         MOV     R1,#0x1
   \   000064   801A         SJMP    ??zclGetDataTypeLength_8
   1639                break;
   1640                
   1641              case ZCL_DATATYPE_DATA16:
   1642              case ZCL_DATATYPE_BITMAP16:
   1643              case ZCL_DATATYPE_UINT16:
   1644              case ZCL_DATATYPE_INT16: 
   1645              case ZCL_DATATYPE_ENUM16:
   1646              case ZCL_DATATYPE_SEMI_PREC:
   1647              case ZCL_DATATYPE_CLUSTER_ID:
   1648              case ZCL_DATATYPE_ATTR_ID:
   1649                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000066   7902         MOV     R1,#0x2
   \   000068   8016         SJMP    ??zclGetDataTypeLength_8
   1650                break;
   1651                
   1652              case ZCL_DATATYPE_DATA24:
   1653              case ZCL_DATATYPE_BITMAP24: 
   1654              case ZCL_DATATYPE_UINT24:
   1655              case ZCL_DATATYPE_INT24:
   1656                len = 3;
   \                     ??zclGetDataTypeLength_3:
   \   00006A   7903         MOV     R1,#0x3
   \   00006C   8012         SJMP    ??zclGetDataTypeLength_8
   1657                break;
   1658                
   1659              case ZCL_DATATYPE_DATA32:
   1660              case ZCL_DATATYPE_BITMAP32:
   1661              case ZCL_DATATYPE_UINT32:
   1662              case ZCL_DATATYPE_INT32:
   1663              case ZCL_DATATYPE_SINGLE_PREC:
   1664              case ZCL_DATATYPE_TOD:
   1665              case ZCL_DATATYPE_DATE:
   1666              case ZCL_DATATYPE_UTC:
   1667              case ZCL_DATATYPE_BAC_OID:
   1668                len = 4;
   \                     ??zclGetDataTypeLength_0:
   \   00006E   7904         MOV     R1,#0x4
   \   000070   800E         SJMP    ??zclGetDataTypeLength_8
   1669                break;                       
   1670                          
   1671             case ZCL_DATATYPE_UINT40:
   1672                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   000072   7905         MOV     R1,#0x5
   \   000074   800A         SJMP    ??zclGetDataTypeLength_8
   1673                 break;
   1674                 
   1675             case ZCL_DATATYPE_UINT48:
   1676                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000076   7906         MOV     R1,#0x6
   \   000078   8006         SJMP    ??zclGetDataTypeLength_8
   1677                 break;
   1678                 
   1679             case ZCL_DATATYPE_DOUBLE_PREC:
   1680             case ZCL_DATATYPE_IEEE_ADDR:
   1681               len = 8;
   \                     ??zclGetDataTypeLength_6:
   \   00007A   7908         MOV     R1,#0x8
   \   00007C   8002         SJMP    ??zclGetDataTypeLength_8
   1682               break;
   1683          
   1684              case ZCL_DATATYPE_NO_DATA:
   1685              case ZCL_DATATYPE_UNKNOWN:
   1686                // Fall through
   1687                
   1688              default:
   1689                len = 0;
   \                     ??zclGetDataTypeLength_7:
   \   00007E   7900         MOV     R1,#0x0
   1690                break;
   1691            }  
   1692            return ( len );
   \                     ??zclGetDataTypeLength_8:
   \   000080   02....       LJMP    ?Subroutine107 & 0xFFFF
   1693          }
   1694          
   1695          /*********************************************************************
   1696           * @fn      zclGetAttrDataLength
   1697           * @brief   Return the length of the attribute.
   1698           * @param   dataType - data type
   1699           *          pData - pointer to data
   1700           * @return  returns atrribute lentgh
   1701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1702          uint8 zclGetAttrDataLength( uint8  dataType, uint8 *pData)
   \                     zclGetAttrDataLength:
   1703          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1704            uint8 dataLen = 0;
   1705            
   1706            if ( dataType  == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \   000004   7442         MOV     A,#0x42
   \   000006   69           XRL     A,R1
   \   000007   6005         JZ      ??zclGetAttrDataLength_0
   \   000009   7441         MOV     A,#0x41
   \   00000B   69           XRL     A,R1
   \   00000C   7009         JNZ     ??zclGetAttrDataLength_1
   1707            {
   1708              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   04           INC     A
   \   000014   F9           MOV     R1,A
   \   000015   8003         SJMP    ??zclGetAttrDataLength_2
   1709            }
   1710            else
   1711            {
   1712              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_1:
   \   000017                ; Setup parameters for call to function zclGetDataTypeLength
   \   000017   12....       LCALL   ??zclGetDataTypeLength?relay
   1713            }
   1714          
   1715            return ( dataLen );
   \                     ??zclGetAttrDataLength_2:
   \   00001A   02....       LJMP    ?Subroutine107 & 0xFFFF
   1716          }
   1717          
   1718          /*********************************************************************
   1719           * @fn      zclReadAttrData
   1720           * @brief   Read the attribute's current value into pAttrData.
   1721           * @param   pAttrData - where to put attribute data
   1722           *          pAttr - pointer to attribute
   1723           * @return Success
   1724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1725          uint8 zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr )
   \                     zclReadAttrData:
   1726          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1727            uint8 dataLen;
   1728              
   1729            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \   000009   EC           MOV     A,R4
   \   00000A   2406         ADD     A,#0x6
   \   00000C   F8           MOV     R0,A
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015                ; Setup parameters for call to function zclGetAttrDataLength
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   12....       LCALL   ?Subroutine29 & 0xFFFF
   1730            osal_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \                     ??CrossCallReturnLabel_194:
   \   000023                ; Setup parameters for call to function osal_memcpy
   \   000023   85..82       MOV     DPL,?V0 + 0
   \   000026   85..83       MOV     DPH,?V0 + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 1,A
   \   000030   75..00       MOV     ?V0 + 2,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EA           MOV     A,R2
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   1731            return ( ZCL_STATUS_SUCCESS );
   \   000046   7900         MOV     R1,#0x0
   \   000048   02....       LJMP    ?Subroutine121 & 0xFFFF
   1732          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine133_0
   \   000002                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine134_0
   \   000002                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   FA           MOV     R2,A
   \   000004   22           RET
   1733          
   1734          #ifdef ZCL_WRITE
   1735          /*********************************************************************
   1736           * @fn      zclWriteAttrData
   1737           * @brief   Write the received data.
   1738           * @param   pAttr - where to write data to
   1739           *          pWriteRec - data to be written
   1740           * @return  Successful if data was written
   1741           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1742          static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   \                     zclWriteAttrData:
   1743          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1744            uint8 len;
   1745          
   1746            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   5058         JNC     ??zclWriteAttrData_0
   1747            {
   1748              if ( zcl_ValidateAttrDataCB && !zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   00001B   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7002         JNZ     ??zclWriteAttrData_1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??zclWriteAttrData_1:
   \   000023   6010         JZ      ??zclWriteAttrData_2
   \   000025                ; Setup parameters for indirect call
   \   000025   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000028   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   E9           MOV     A,R1
   \   00002F   7004         JNZ     ??zclWriteAttrData_2
   1749                return ( ZCL_STATUS_INVALID_VALUE );
   \   000031   7987         MOV     R1,#-0x79
   \   000033   8040         SJMP    ??zclWriteAttrData_3
   1750              
   1751              len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000035   EE           MOV     A,R6
   \   000036   2403         ADD     A,#0x3
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   0E           INC     R6
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   FF           MOV     R7,A
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000046   85..82       MOV     DPL,?V0 + 0
   \   000049   85..83       MOV     DPH,?V0 + 1
   \   00004C   12....       LCALL   ?Subroutine29 & 0xFFFF
   1752              osal_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \                     ??CrossCallReturnLabel_195:
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   EA           MOV     A,R2
   \   00005A   FC           MOV     R4,A
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   1753              return ( ZCL_STATUS_SUCCESS );
   \   00006F   7900         MOV     R1,#0x0
   \   000071   8002         SJMP    ??zclWriteAttrData_3
   1754            }
   1755            return ( ZCL_STATUS_READ_ONLY );
   \                     ??zclWriteAttrData_0:
   \   000073   7988         MOV     R1,#-0x78
   \                     ??zclWriteAttrData_3:
   \   000075   7F07         MOV     R7,#0x7
   \   000077   02....       LJMP    ?BANKED_LEAVE_XDATA
   1756          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   75..00       MOV     ?V0 + 6,#0x0
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   02....       LJMP    ?Subroutine111 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   02....       LJMP    ?Subroutine112 & 0xFFFF
   1757          #endif // ZCL_WRITE
   1758          
   1759          #ifdef ZCL_READ
   1760          /*********************************************************************
   1761           * @fn      zclParseInReadCmd
   1762           * @brief   Parse the "Profile" Read Commands
   1763           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1764           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1765           * @param   pCmd - pointer to incoming data to parse
   1766           * @return  pointer to the parsed command structure
   1767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1768          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   1769          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1770            zclReadCmd_t *readCmd;
   1771            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00000C   FE           MOV     R6,A
   \   00000D   E9           MOV     A,R1
   \   00000E   FF           MOV     R7,A
   1772            
   1773            readCmd = (zclReadCmd_t *)osal_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \   00000F   12....       LCALL   ?Subroutine34 & 0xFFFF
   1774            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_36:
   \   000012   7001         JNZ     ??zclParseInReadCmd_0
   \   000014   EB           MOV     A,R3
   \                     ??zclParseInReadCmd_0:
   \   000015   6049         JZ      ??zclParseInReadCmd_1
   1775            {
   1776              uint8 i;
   1777              
   1778              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000017   85..82       MOV     DPL,?V0 + 0
   \   00001A   85..83       MOV     DPH,?V0 + 1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C3           CLR     C
   \   000022   13           RRC     A
   \   000023   E8           MOV     A,R0
   \   000024   13           RRC     A
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   F0           MOVX    @DPTR,A
   1779              for ( i = 0; i < readCmd->numAttr; i++ )
   \   00002A   75..00       MOV     ?V0 + 0,#0x0
   \   00002D   8025         SJMP    ??zclParseInReadCmd_2
   1780              {
   1781                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_3:
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   12....       LCALL   ?Subroutine89 & 0xFFFF
   1782                pBuf += 2;
   1783              }
   \                     ??CrossCallReturnLabel_270:
   \   000036   F9           MOV     R1,A
   \   000037   E4           CLR     A
   \   000038   2C           ADD     A,R4
   \   000039   E9           MOV     A,R1
   \   00003A   FD           MOV     R5,A
   \   00003B   E5..         MOV     A,?V0 + 0
   \   00003D   33           RLC     A
   \   00003E   F8           MOV     R0,A
   \   00003F   E4           CLR     A
   \   000040   33           RLC     A
   \   000041   F9           MOV     R1,A
   \   000042   EA           MOV     A,R2
   \   000043   28           ADD     A,R0
   \   000044   F582         MOV     DPL,A
   \   000046   EB           MOV     A,R3
   \   000047   39           ADDC    A,R1
   \   000048   F583         MOV     DPH,A
   \   00004A   A3           INC     DPTR
   \   00004B   EC           MOV     A,R4
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   ED           MOV     A,R5
   \   00004F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000052   05..         INC     ?V0 + 0
   \                     ??zclParseInReadCmd_2:
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FC           MOV     R4,A
   \   00005A   E5..         MOV     A,?V0 + 0
   \   00005C   C3           CLR     C
   \   00005D   9C           SUBB    A,R4
   \   00005E   40CF         JC      ??zclParseInReadCmd_3
   1784            }
   1785            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_1:
   \   000060   02....       LJMP    ?Subroutine108 & 0xFFFF
   1786          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   8582..       MOV     ?V0 + 0,DPL
   \   000008   8583..       MOV     ?V0 + 1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2401         ADD     A,#0x1
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??osal_mem_alloc?relay
   \   000017   EA           MOV     A,R2
   \   000018   22           RET
   1787          
   1788          /*********************************************************************
   1789           * @fn      zclParseInReadRspCmd
   1790           * @brief   Parse the "Profile" Read Response Commands
   1791           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1792           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1793           * @param   pCmd - pointer to incoming data to parse
   1794           * @return  pointer to the parsed command structure
   1795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E9           MOV     A,R1
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   FC           MOV     R4,A
   \   000004   7D00         MOV     R5,#0x0
   \   000006   AA..         MOV     R2,?V0 + 2
   \   000008   AB..         MOV     R3,?V0 + 3
   \   00000A                REQUIRE ?Subroutine111
   \   00000A                ; // Fall through to label ?Subroutine111

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1796          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   1797          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   1798            zclReadRspCmd_t *readRspCmd;
   1799            zclReadRspStatus_t *statusRec;
   1800            uint8 *pBuf = pCmd->pData;
   1801            uint8 *dataPtr;
   1802            uint8 numAttr = 0;
   1803            uint8 hdrLen;
   1804            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_44:
   \   000008   801B         SJMP    ??zclParseInReadRspCmd_0
   1805            uint8 attrDataLen;
   1806            uint8 dataType;
   1807            uint8 status;
   1808            uint8 i;
   1809            
   1810            // find out the number of attributes and the length of attribute data
   1811            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   1812            {
   1813              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   00000A   12....       LCALL   ?Subroutine69 & 0xFFFF
   1814          
   1815              pBuf += 2; // move pass attribute id
   1816              
   1817              status = *pBuf++;  
   \                     ??CrossCallReturnLabel_146:
   \   00000D   A3           INC     DPTR
   \   00000E   AE82         MOV     R6,DPL
   \   000010   AF83         MOV     R7,DPH
   1818              if ( status == ZCL_STATUS_SUCCESS )
   \   000012   7011         JNZ     ??zclParseInReadRspCmd_0
   1819              {
   1820                dataType = *pBuf++;
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   A3           INC     DPTR
   \   000017   0E           INC     R6
   \   000018   12....       LCALL   ?Subroutine67 & 0xFFFF
   1821          
   1822                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   1823                pBuf += attrDataLen; // move pass attribute data
   1824                
   1825                if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_89:
   \   00001B   5002         JNC     ??zclParseInReadRspCmd_2
   1826                  attrDataLen++;
   \   00001D   05..         INC     ?V0 + 8
   1827                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   00001F   E5..         MOV     A,?V0 + 8
   \   000021   25..         ADD     A,?V0 + 6
   \   000023   F5..         MOV     ?V0 + 6,A
   1828              }
   1829            }
   \                     ??zclParseInReadRspCmd_0:
   \   000025   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000028   40E0         JC      ??zclParseInReadRspCmd_1
   1830           
   1831            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) ); // calculate the length of the response header
   \   00002A   75F006       MOV     B,#0x6
   \   00002D   12....       LCALL   ?Subroutine60 & 0xFFFF
   1832            
   1833            readRspCmd = (zclReadRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   1834            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_208:
   \   000030   7001         JNZ     ??zclParseInReadRspCmd_3
   \   000032   EB           MOV     A,R3
   \                     ??zclParseInReadRspCmd_3:
   \   000033   6049         JZ      ??zclParseInReadRspCmd_4
   1835            {
   1836              pBuf = pCmd->pData;
   \   000035   12....       LCALL   ?Subroutine23 & 0xFFFF
   1837              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   1838                  
   1839              readRspCmd->numAttr = numAttr;
   1840              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_26:
   \   000038   803D         SJMP    ??zclParseInReadRspCmd_5
   1841              {
   1842                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   00003A   E5..         MOV     A,?V0 + 9
   \   00003C   75F006       MOV     B,#0x6
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
   1843                
   1844                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   1845                pBuf += 2;
   1846                
   1847                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_144:
   \   000042   12....       LCALL   ?Subroutine6 & 0xFFFF
   1848                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_221:
   \   000045   702E         JNZ     ??CrossCallReturnLabel_91
   1849                {
   1850                  statusRec->dataType = *pBuf++;
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   85..82       MOV     DPL,?V0 + 10
   \   00004C   85..83       MOV     DPH,?V0 + 11
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000055   0E           INC     R6
   \   000056   AF83         MOV     R7,DPH
   1851          
   1852                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   000058                ; Setup parameters for call to function zclGetAttrDataLength
   \   000058   12....       LCALL   ?Subroutine72 & 0xFFFF
   1853                  osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_156:
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   1854                  statusRec->data = dataPtr;
   \   000064   85..82       MOV     DPL,?V0 + 10
   \   000067   85..83       MOV     DPH,?V0 + 11
   \   00006A   A3           INC     DPTR
   \   00006B   12....       LCALL   ?Subroutine4 & 0xFFFF
   1855                  
   1856                  pBuf += attrDataLen; // move pass attribute data
   1857                 
   1858                  if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_6:
   \   00006E   5002         JNC     ??zclParseInReadRspCmd_7
   1859                    attrDataLen++;
   \   000070   05..         INC     ?V0 + 8
   1860                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   000072   12....       LCALL   ?Subroutine68 & 0xFFFF
   1861                }
   1862              }
   \                     ??CrossCallReturnLabel_91:
   \   000075   05..         INC     ?V0 + 9
   \                     ??zclParseInReadRspCmd_5:
   \   000077   E5..         MOV     A,?V0 + 9
   \   000079   C3           CLR     C
   \   00007A   95..         SUBB    A,?V0 + 7
   \   00007C   40BC         JC      ??zclParseInReadRspCmd_6
   1863            }
   1864            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   00007E                REQUIRE ?Subroutine122
   \   00007E                ; // Fall through to label ?Subroutine122
   1865          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   7F0C         MOV     R7,#0xc
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E5..         MOV     A,?V0 + 7
   \   000002   A4           MUL     AB
   \   000003   04           INC     A
   \   000004   FA           MOV     R2,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8582..       MOV     ?V0 + 4,DPL
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   85....       MOV     ?V0 + 0,?V0 + 6
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3400         ADDC    A,#0x0
   \   000015   FB           MOV     R3,A
   \   000016                REQUIRE ??Subroutine137_0
   \   000016                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine138_0
   \   000007                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   28           ADD     A,R0
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   39           ADDC    A,R1
   \   00000F   F9           MOV     R1,A
   \   000010   C3           CLR     C
   \   000011   EE           MOV     A,R6
   \   000012   98           SUBB    A,R0
   \   000013   EF           MOV     A,R7
   \   000014   99           SUBB    A,R1
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?V0 + 10
   \   000003   85..83       MOV     DPH,?V0 + 11
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine139_0
   \   000008                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000007   E9           MOV     A,R1
   \   000008   F5..         MOV     ?V0 + 8,A
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   8E..         MOV     ?V0 + 4,R6
   \   00000C   8F..         MOV     ?V0 + 5,R7
   \   00000E                REQUIRE ?Subroutine112
   \   00000E                ; // Fall through to label ?Subroutine112

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   05..         INC     ?V0 + 7
   \   000002   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000005                REQUIRE ?Subroutine110
   \   000005                ; // Fall through to label ?Subroutine110

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 8
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   25..         ADD     A,?V0 + 4
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   E5..         MOV     A,?V0 + 3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   AF83         MOV     R7,DPH
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000009   E9           MOV     A,R1
   \   00000A   F5..         MOV     ?V0 + 8,A
   \   00000C   F5..         MOV     ?V0 + 4,A
   \   00000E   EE           MOV     A,R6
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FE           MOV     R6,A
   \   000012   EF           MOV     A,R7
   \   000013   3400         ADDC    A,#0x0
   \   000015   FF           MOV     R7,A
   \   000016   E9           MOV     A,R1
   \   000017   A2E0         MOV     C,0xE0 /* A   */.0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   EA           MOV     A,R2
   \   000005   2403         ADD     A,#0x3
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FE           MOV     R6,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
   \   000012   75..00       MOV     ?V0 + 7,#0x0
   \   000015   75..00       MOV     ?V0 + 6,#0x0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   EA           MOV     A,R2
   \   00000C   25..         ADD     A,?V0 + 4
   \   00000E   F5..         MOV     ?V0 + 2,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F5..         MOV     ?V0 + 3,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   E5..         MOV     A,?V0 + 7
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   75..00       MOV     ?V0 + 9,#0x0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   25..         ADD     A,?V0 + 4
   \   00000D   FE           MOV     R6,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FF           MOV     R7,A
   \   000012   E5..         MOV     A,?V0 + 8
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 10,DPL
   \   000007   8583..       MOV     ?V0 + 11,DPH
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000011   F9           MOV     R1,A
   \   000012   EA           MOV     A,R2
   \   000013   85..82       MOV     DPL,?V0 + 10
   \   000016   85..83       MOV     DPH,?V0 + 11
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   E9           MOV     A,R1
   \   00001C   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00001F   02....       LJMP    ?Subroutine110 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 0
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 1
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET
   1866          #endif // ZCL_READ
   1867          
   1868          #ifdef ZCL_WRITE
   1869          /*********************************************************************
   1870           * @fn      zclParseInWriteCmd
   1871           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   1872           *          Response Commands
   1873           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1874           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1875           * @param   pCmd - pointer to incoming data to parse
   1876           * @return  pointer to the parsed command structure
   1877           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1878          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   1879          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine38 & 0xFFFF
   1880            zclWriteCmd_t *writeCmd;
   1881            zclWriteRec_t *statusRec;
   1882            uint8 *pBuf = pCmd->pData;
   1883            uint8 attrDataLen;
   1884            uint8 *dataPtr;
   1885            uint8 numAttr = 0;
   1886            uint8 hdrLen;
   1887            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_45:
   \   000008   8014         SJMP    ??zclParseInWriteCmd_0
   1888            uint8 dataType;
   1889            uint8 i;
   1890          
   1891            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   1892            {
   1893              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   00000A   12....       LCALL   ?Subroutine69 & 0xFFFF
   1894          
   1895              pBuf += 2; // move pass attribute id
   1896          
   1897              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_147:
   \   00000D   F9           MOV     R1,A
   \   00000E   A3           INC     DPTR
   \   00000F   AE82         MOV     R6,DPL
   \   000011   12....       LCALL   ?Subroutine67 & 0xFFFF
   1898          
   1899              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   1900              pBuf += attrDataLen; // move pass attribute data
   1901              
   1902              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_90:
   \   000014   5002         JNC     ??zclParseInWriteCmd_2
   1903                attrDataLen++;
   \   000016   05..         INC     ?V0 + 8
   1904              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   000018   E5..         MOV     A,?V0 + 8
   \   00001A   25..         ADD     A,?V0 + 6
   \   00001C   F5..         MOV     ?V0 + 6,A
   1905            }
   \                     ??zclParseInWriteCmd_0:
   \   00001E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000021   40E7         JC      ??zclParseInWriteCmd_1
   1906            
   1907            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) ); // calculate the length of the response header
   \   000023   75F005       MOV     B,#0x5
   \   000026   12....       LCALL   ?Subroutine60 & 0xFFFF
   1908            
   1909            writeCmd = (zclWriteCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   1910            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_209:
   \   000029   7001         JNZ     ??zclParseInWriteCmd_3
   \   00002B   EB           MOV     A,R3
   \                     ??zclParseInWriteCmd_3:
   \   00002C   6036         JZ      ??zclParseInWriteCmd_4
   1911            {
   1912              pBuf = pCmd->pData;
   \   00002E   12....       LCALL   ?Subroutine23 & 0xFFFF
   1913              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   1914          
   1915              writeCmd->numAttr = numAttr;
   1916              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_27:
   \   000031   802A         SJMP    ??zclParseInWriteCmd_5
   1917              {
   1918                statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   000033   E5..         MOV     A,?V0 + 9
   \   000035   75F005       MOV     B,#0x5
   \   000038   12....       LCALL   ?Subroutine3 & 0xFFFF
   1919                
   1920                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   1921                pBuf += 2;
   1922                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_145:
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ?Subroutine6 & 0xFFFF
   1923          
   1924                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_222:
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   12....       LCALL   ?Subroutine72 & 0xFFFF
   1925                osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_157:
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000045   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1926                statusRec->attrData = dataPtr;
   \   00004B   85..82       MOV     DPL,?V0 + 10
   \   00004E   85..83       MOV     DPH,?V0 + 11
   \   000051   12....       LCALL   ?Subroutine4 & 0xFFFF
   1927                
   1928                pBuf += attrDataLen; // move pass attribute data
   1929          
   1930                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_7:
   \   000054   5002         JNC     ??zclParseInWriteCmd_7
   1931                  attrDataLen++;
   \   000056   05..         INC     ?V0 + 8
   1932                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   000058   12....       LCALL   ?Subroutine68 & 0xFFFF
   1933              }
   \                     ??CrossCallReturnLabel_92:
   \   00005B   05..         INC     ?V0 + 9
   \                     ??zclParseInWriteCmd_5:
   \   00005D   E5..         MOV     A,?V0 + 9
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V0 + 7
   \   000062   40CF         JC      ??zclParseInWriteCmd_6
   1934            }
   1935            
   1936            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   000064   02....       LJMP    ?Subroutine122 & 0xFFFF
   1937          }
   1938          
   1939          /*********************************************************************
   1940           * @fn      zclParseInWriteRspCmd
   1941           * @brief   Parse the "Profile" Write Response Commands
   1942           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1943           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1944           * @param   pCmd - pointer to incoming data to parse
   1945           * @return  pointer to the parsed command structure
   1946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1947          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   1948          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1949            zclWriteRspCmd_t *writeRspCmd;
   1950            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV     A,R2
   \   000006   2403         ADD     A,#0x3
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00000E   12....       LCALL   ?Subroutine39 & 0xFFFF
   1951            uint8 i = 0;
   \                     ??CrossCallReturnLabel_47:
   \   000011   75..00       MOV     ?V0 + 4,#0x0
   1952          
   1953            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000014   12....       LCALL   ?Subroutine34 & 0xFFFF
   1954            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_37:
   \   000017   7001         JNZ     ??zclParseInWriteRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInWriteRspCmd_0:
   \   00001A   605C         JZ      ??zclParseInWriteRspCmd_1
   1955            {
   1956              if ( pCmd->dataLen == 1 )
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7002         JNZ     ??zclParseInWriteRspCmd_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \                     ??zclParseInWriteRspCmd_2:
   \   000029   703B         JNZ     ??CrossCallReturnLabel_132
   1957              {
   1958                writeRspCmd->attrList[i++].status = *pBuf; // special case when all writes were successfull
   \   00002B   12....       LCALL   ?Subroutine49 & 0xFFFF
   1959              }
   \                     ??CrossCallReturnLabel_244:
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   75..01       MOV     ?V0 + 4,#0x1
   \   000033   803C         SJMP    ??zclParseInWriteRspCmd_3
   1960              else
   1961              {
   1962                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   1963                {
   1964                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000035   E5..         MOV     A,?V0 + 4
   \   000037   75F003       MOV     B,#0x3
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   EA           MOV     A,R2
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EB           MOV     A,R3
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ?Subroutine5 & 0xFFFF
   1965                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_9:
   \   000050   F5..         MOV     ?V0 + 6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FD           MOV     R5,A
   \   000055   E5..         MOV     A,?V0 + 6
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   ED           MOV     A,R5
   \   000060   F0           MOVX    @DPTR,A
   \   000061   05..         INC     ?V0 + 4
   1966                  pBuf += 2;
   \   000063   12....       LCALL   ?Subroutine98 & 0xFFFF
   1967                }
   \                     ??CrossCallReturnLabel_132:
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   1968              }
   \                     ??CrossCallReturnLabel_213:
   \   00006F   40C4         JC      ??zclParseInWriteRspCmd_4
   1969              writeRspCmd->numAttr = i; 
   \                     ??zclParseInWriteRspCmd_3:
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   E5..         MOV     A,?V0 + 4
   \   000077   F0           MOVX    @DPTR,A
   1970            }
   1971            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_1:
   \   000078   02....       LJMP    ?Subroutine120 & 0xFFFF
   1972          }
   1973          #endif // ZCL_WRITE
   1974          
   1975          #ifdef ZCL_REPORT
   1976          /*********************************************************************
   1977           * @fn      zclParseInConfigReportCmd
   1978           * @brief   Parse the "Profile" Configure Reporting Command
   1979           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1980           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1981           * @param   pCmd - pointer to incoming data to parse
   1982           * @return  pointer to the parsed command structure
   1983           */
   1984          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   1985          {
   1986            zclCfgReportCmd_t *cfgReportCmd;
   1987            zclCfgReportRec_t *reportRec;
   1988            uint8 *pBuf = pCmd->pData;
   1989            uint8 *dataPtr;
   1990            uint8 numAttr = 0;
   1991            uint8 direction;
   1992            uint8 dataType;
   1993            uint8 hdrLen;
   1994            uint8 dataLen = 0;
   1995            uint8 reportChangeLen; // length of Reportable Change field
   1996            uint8 i;
   1997           
   1998            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // Calculate the length of the Request command
   1999            {
   2000              numAttr++;
   2001              
   2002              direction = *pBuf++;
   2003              pBuf += 2; // move pass the attribute ID
   2004              
   2005              if ( direction == ZCL_SEND_ATTR_REPORTS ) // Is there a Reportable Change field?
   2006              {
   2007                dataType = *pBuf++;
   2008                pBuf += 4; // move pass the Min and Max Reporting Intervals
   2009           
   2010                if ( zclAnalogDataType( dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2011                {
   2012                  reportChangeLen = zclGetDataTypeLength( dataType );
   2013                  pBuf += reportChangeLen;
   2014                  
   2015                  if ( PADDING_NEEDED( reportChangeLen ) ) // add padding if needed
   2016                    reportChangeLen++;
   2017                  dataLen += reportChangeLen;
   2018                }
   2019              }
   2020              else
   2021              {
   2022                pBuf += 2; // move pass the Timeout Period
   2023              }
   2024            } // while loop
   2025          
   2026            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   2027            
   2028            cfgReportCmd = (zclCfgReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2029            if ( cfgReportCmd != NULL )
   2030            { 
   2031              pBuf = pCmd->pData;
   2032              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   2033              
   2034              cfgReportCmd->numAttr = numAttr;
   2035              for ( i = 0; i < numAttr; i++ )
   2036              {
   2037                reportRec = &(cfgReportCmd->attrList[i]);
   2038                
   2039                osal_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   2040                  
   2041                reportRec->direction = *pBuf++;
   2042                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2043                pBuf += 2;
   2044                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   2045                {
   2046                 
   2047                  reportRec->dataType = *pBuf++; // Attribute to be reported
   2048                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2049                  pBuf += 2;
   2050                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2051                  pBuf += 2;
   2052                 
   2053                  if ( zclAnalogDataType( reportRec->dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2054                  {
   2055                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   2056                    reportRec->reportableChange = dataPtr;
   2057                    
   2058                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   2059                    pBuf += reportChangeLen;
   2060                   
   2061                    if ( PADDING_NEEDED( reportChangeLen ) ) // advance attribute data pointer
   2062                      reportChangeLen++;
   2063                    dataPtr += reportChangeLen;
   2064                  }
   2065                }
   2066                else
   2067                {
   2068                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] ); // Attribute reports to be received
   2069                  pBuf += 2;
   2070                }
   2071              } // while loop
   2072            }
   2073            return ( (void *)cfgReportCmd );
   2074          }
   2075          
   2076          /*********************************************************************
   2077           * @fn      zclParseInConfigReportRspCmd
   2078           * @brief   Parse the "Profile" Configure Reporting Response Command
   2079           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2080           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2081           * @param   pCmd - pointer to incoming data to parse
   2082           * @return  pointer to the parsed command structure
   2083           */
   2084          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   2085          {
   2086            zclCfgReportRspCmd_t *cfgReportRspCmd;
   2087            uint8 *pBuf = pCmd->pData;
   2088            uint8 numAttr;
   2089            uint8 i; 
   2090            
   2091            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   2092            
   2093            cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof( zclCfgReportRspCmd_t ) 
   2094                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   2095            if ( cfgReportRspCmd != NULL )
   2096            {
   2097              cfgReportRspCmd->numAttr = numAttr;
   2098              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   2099              {
   2100                cfgReportRspCmd->attrList[i].status = *pBuf++;
   2101                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   2102                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2103                pBuf += 2;
   2104              }
   2105            }
   2106            return ( (void *)cfgReportRspCmd );  
   2107          }
   2108          
   2109          /*********************************************************************
   2110           * @fn      zclParseInReadReportCfgCmd
   2111           * @brief   Parse the "Profile" Read Reporting Configuration Command
   2112           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2113           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2114           * @param   pCmd - pointer to incoming data to parse
   2115           * @return  pointer to the parsed command structure
   2116           */
   2117          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   2118          {
   2119            zclReadReportCfgCmd_t *readReportCfgCmd;
   2120            uint8 *pBuf = pCmd->pData;
   2121            uint8 numAttr;
   2122            uint8 i;
   2123            
   2124            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   2125            
   2126            readReportCfgCmd = (zclReadReportCfgCmd_t *)osal_mem_alloc( sizeof( zclReadReportCfgCmd_t ) 
   2127                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   2128            if ( readReportCfgCmd != NULL )
   2129            {
   2130              readReportCfgCmd->numAttr = numAttr;
   2131              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   2132              {
   2133                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   2134                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2135                pBuf += 2;
   2136              }
   2137            }
   2138            return ( (void *)readReportCfgCmd );
   2139          }
   2140          
   2141          /*********************************************************************
   2142           * @fn      zclParseInReadReportCfgRspCmd
   2143           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   2144           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2145           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2146           * @param   pCmd - pointer to incoming data to parse
   2147           * @return  pointer to the parsed command structure
   2148           */
   2149          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   2150          {
   2151            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   2152            zclReportCfgRspRec_t *reportRspRec;
   2153            uint8 reportChangeLen;
   2154            uint8 *pBuf = pCmd->pData;
   2155            uint8 *dataPtr;
   2156            uint8 numAttr = 0;
   2157            uint8 hdrLen;
   2158            uint8 dataLen = 0;
   2159            uint8 status;
   2160            uint8 direction;
   2161            uint8 dataType;
   2162            uint8 i;
   2163            
   2164            // Calculate the length of the response command
   2165            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2166            { 
   2167              numAttr++;
   2168              
   2169              status = *pBuf++;
   2170              direction = *pBuf++; 
   2171              pBuf += 2; // move pass the attribute ID
   2172              
   2173              if ( status == ZCL_STATUS_SUCCESS )
   2174              {
   2175                if ( direction == ZCL_SEND_ATTR_REPORTS )
   2176                {
   2177                  dataType = *pBuf++;
   2178                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   2179           
   2180                  // For attributes of 'discrete' data types this field is omitted
   2181                  if ( zclAnalogDataType( dataType ) )
   2182                  {
   2183                    reportChangeLen = zclGetDataTypeLength( dataType );
   2184                    pBuf += reportChangeLen;
   2185                    
   2186                    // add padding if needed
   2187                    if ( PADDING_NEEDED( reportChangeLen ) )
   2188                      reportChangeLen++;
   2189                    dataLen += reportChangeLen;
   2190                  }
   2191                }
   2192                else
   2193                {
   2194                  pBuf += 2; // move pass the Timeout field
   2195                }
   2196              }
   2197            } // while loop
   2198            
   2199            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   2200            
   2201            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2202            if ( readReportCfgRspCmd != NULL )
   2203            {
   2204              pBuf = pCmd->pData;
   2205              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   2206              
   2207              readReportCfgRspCmd->numAttr = numAttr;
   2208              for ( i = 0; i < numAttr; i++ )
   2209              {
   2210                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   2211                
   2212                reportRspRec->status = *pBuf++;
   2213                reportRspRec->direction = *pBuf++;
   2214                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2215                pBuf += 2;
   2216           
   2217                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   2218                {
   2219                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   2220                  {
   2221                    reportRspRec->dataType = *pBuf++;
   2222                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2223                    pBuf += 2;
   2224                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2225                    pBuf += 2;
   2226          
   2227                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   2228                    {
   2229                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   2230                      reportRspRec->reportableChange = dataPtr;
   2231                      
   2232                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType ); 
   2233                      pBuf += reportChangeLen;
   2234                      
   2235                      // advance attribute data pointer
   2236                      if ( PADDING_NEEDED( reportChangeLen ) )
   2237                        reportChangeLen++;
   2238                      dataPtr += reportChangeLen;
   2239                    }
   2240                  }
   2241                  else
   2242                  {
   2243                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   2244                    pBuf += 2;
   2245                  }
   2246                }
   2247              } 
   2248            }
   2249            
   2250            return ( (void *)readReportCfgRspCmd );
   2251          }
   2252          
   2253          /*********************************************************************
   2254           * @fn      zclParseInReportCmd
   2255           * @brief   Parse the "Profile" Report Command
   2256           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2257           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2258           * @param   pCmd - pointer to incoming data to parse
   2259           * @return  pointer to the parsed command structure
   2260           */
   2261          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   2262          {
   2263            zclReportCmd_t *reportCmd;
   2264            zclReport_t *reportRec;
   2265            uint8 *pBuf = pCmd->pData;
   2266            uint8 attrDataLen;
   2267            uint8 *dataPtr;
   2268            uint8 numAttr = 0;
   2269            uint8 hdrLen;
   2270            uint8 dataLen = 0;
   2271            uint8 dataType;
   2272            uint8 i;
   2273          
   2274            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   2275            {
   2276              numAttr++;
   2277          
   2278              pBuf += 2; // move pass attribute id
   2279              dataType = *pBuf++;
   2280              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2281              pBuf += attrDataLen; // move pass attribute data
   2282                
   2283              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   2284                attrDataLen++;
   2285              dataLen += attrDataLen;
   2286            }
   2287            
   2288            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   2289            
   2290            reportCmd = (zclReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2291            if (reportCmd != NULL )
   2292            {
   2293              pBuf = pCmd->pData;
   2294              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   2295              
   2296              reportCmd->numAttr = numAttr;
   2297              for ( i = 0; i < numAttr; i++ )
   2298              {
   2299                reportRec = &(reportCmd->attrList[i]);
   2300                
   2301                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2302                pBuf += 2;
   2303                reportRec->dataType = *pBuf++;
   2304          
   2305                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );  
   2306                osal_memcpy( dataPtr, pBuf, attrDataLen );
   2307                reportRec->attrData = dataPtr;
   2308                
   2309                pBuf += attrDataLen; // move pass attribute data
   2310                
   2311                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   2312                  attrDataLen++;
   2313                dataPtr += attrDataLen;
   2314              }
   2315            }
   2316            return ( (void *)reportCmd );
   2317          }
   2318          #endif // ZCL_REPORT
   2319          
   2320          /*********************************************************************
   2321           * @fn      zclParseInDefaultRspCmd
   2322           * @brief   Parse the "Profile" Default Response Command
   2323           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2324           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2325           * @param   pCmd - pointer to incoming data to parse
   2326           * @return  pointer to the parsed command structure
   2327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2328          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   2329          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2330            zclDefaultRspCmd_t *defaultRspCmd;
   2331            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine39 & 0xFFFF
   2332          
   2333            defaultRspCmd = (zclDefaultRspCmd_t *)osal_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_48:
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A02         MOV     R2,#0x2
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_mem_alloc?relay
   2334            if ( defaultRspCmd != NULL )
   \   000016   EA           MOV     A,R2
   \   000017   7001         JNZ     ??zclParseInDefaultRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInDefaultRspCmd_0:
   \   00001A   600D         JZ      ??zclParseInDefaultRspCmd_1
   2335            {
   2336              defaultRspCmd->commandID = *pBuf++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   12....       LCALL   ?Subroutine7 & 0xFFFF
   2337              defaultRspCmd->statusCode = *pBuf;
   \                     ??CrossCallReturnLabel_228:
   \   000024   12....       LCALL   ??Subroutine143_0 & 0xFFFF
   2338            }
   \                     ??CrossCallReturnLabel_241:
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   2339            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_1:
   \   000029   02....       LJMP    ?Subroutine117 & 0xFFFF
   2340          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine140_0
   \   000004                ; // Fall through to label ??Subroutine140_0
   2341          
   2342          #ifdef ZCL_DISCOVER
   2343          /*********************************************************************
   2344           * @fn      zclParseInDiscCmd
   2345           * @brief   Parse the "Profile" Discovery Commands
   2346           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2347           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2348           * @param   pCmd - pointer to incoming data to parse
   2349           * @return  pointer to the parsed command structure
   2350           */
   2351          void *zclParseInDiscCmd( zclParseCmd_t *pCmd )
   2352          {
   2353            zclDiscoverCmd_t *discoverCmd;
   2354            uint8 *pBuf = pCmd->pData;
   2355          
   2356            discoverCmd = (zclDiscoverCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverCmd_t ) );
   2357            if ( discoverCmd != NULL )
   2358            {
   2359              discoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2360              pBuf += 2;
   2361              discoverCmd->maxAttrIDs = *pBuf;
   2362            }
   2363            return ( (void *)discoverCmd );
   2364          }
   2365          
   2366          /*********************************************************************
   2367           * @fn      zclParseInDiscRspCmd
   2368           * @brief   Parse the "Profile" Discovery Response Commands
   2369           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2370           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2371           * @param   pCmd - pointer to incoming data to parse
   2372           * @return  pointer to the parsed command structure
   2373           */
   2374          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   2375          static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd )
   2376          {
   2377            zclDiscoverRspCmd_t *discoverRspCmd;
   2378            uint8 *pBuf = pCmd->pData;
   2379            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   2380            uint8 i;
   2381          
   2382            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverRspCmd_t ) 
   2383                                                           + ( numAttr * sizeof(zclDiscoverInfo_t) ) );
   2384            if ( discoverRspCmd != NULL )
   2385            {
   2386              discoverRspCmd->discComplete = *pBuf++;
   2387              discoverRspCmd->numAttr = numAttr;
   2388              
   2389              for ( i = 0; i < numAttr; i++ )
   2390              {
   2391                discoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2392                pBuf += 2;
   2393                discoverRspCmd->attrList[i].dataType = *pBuf++;;
   2394              }
   2395            }
   2396            return ( (void *)discoverRspCmd );
   2397          }
   2398          #endif // ZCL_DISCOVER
   2399          
   2400          #ifdef ZCL_READ
   2401          /*********************************************************************
   2402           * @fn      zclProcessInReadCmd
   2403           * @brief   Process the "Profile" Read Command
   2404           * @param   pInMsg - incoming message to process
   2405           * @return  TRUE if command processed. FALSE, otherwise.
   2406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2407          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   2408          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   2409            zclReadCmd_t *readCmd;
   2410            zclReadRspCmd_t *readRspCmd;
   2411            zclReadRspStatus_t *statusRec;
   2412            zclAttrRec_t attrRec;
   2413            uint8 len;
   2414            uint8 i;
   2415            
   2416            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
   2417            
   2418            // calculate the length of the response status record
   2419            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   2420            
   2421            readRspCmd = osal_mem_alloc( len );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   75F006       MOV     B,#0x6
   \   00001A   85..82       MOV     DPL,?V0 + 2
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   A4           MUL     AB
   \   000021   04           INC     A
   \   000022   FA           MOV     R2,A
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   2422            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_210:
   \   000028   7001         JNZ     ??zclProcessInReadCmd_0
   \   00002A   EB           MOV     A,R3
   \                     ??zclProcessInReadCmd_0:
   \   00002B   7005         JNZ     ??zclProcessInReadCmd_1
   2423              return FALSE; // EMBEDDED RETURN
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   02....       LJMP    ??zclProcessInReadCmd_2 & 0xFFFF
   2424          
   2425            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_1:
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   12....       LCALL   ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00003B   F0           MOVX    @DPTR,A
   2426            for (i = 0; i < readCmd->numAttr; i++)
   \   00003C   75..00       MOV     ?V0 + 6,#0x0
   \   00003F   800B         SJMP    ??zclProcessInReadCmd_3
   2427            {
   2428              statusRec = &(readRspCmd->attrList[i]);
   2429              statusRec->attrID = readCmd->attrID[i];
   2430              
   2431              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec ) )
   2432              {
   2433                statusRec->data = attrRec.attr.dataPtr;
   2434                statusRec->status = ZCL_STATUS_SUCCESS;
   2435                statusRec->dataType = attrRec.attr.dataType;
   2436              }
   2437              else
   2438              {
   2439                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_4:
   \   000041   7486         MOV     A,#-0x7a
   \   000043   85..82       MOV     DPL,?V0 + 10
   \   000046   85..83       MOV     DPH,?V0 + 11
   \                     ??zclProcessInReadCmd_5:
   \   000049   F0           MOVX    @DPTR,A
   2440              }
   \   00004A   05..         INC     ?V0 + 6
   \                     ??zclProcessInReadCmd_3:
   \   00004C   85..82       MOV     DPL,?V0 + 2
   \   00004F   85..83       MOV     DPH,?V0 + 3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   E5..         MOV     A,?V0 + 6
   \   000056   C3           CLR     C
   \   000057   9A           SUBB    A,R2
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??zclProcessInReadCmd_6 & 0xFFFF
   \   00005D   85..82       MOV     DPL,?V0 + 6
   \   000060   A882         MOV     R0,DPL
   \   000062   E8           MOV     A,R0
   \   000063   75F006       MOV     B,#0x6
   \   000066   A4           MUL     AB
   \   000067   FA           MOV     R2,A
   \   000068   ABF0         MOV     R3,B
   \   00006A   E5..         MOV     A,?V0 + 0
   \   00006C   2A           ADD     A,R2
   \   00006D   F582         MOV     DPL,A
   \   00006F   E5..         MOV     A,?V0 + 1
   \   000071   3B           ADDC    A,R3
   \   000072   F583         MOV     DPH,A
   \   000074   A3           INC     DPTR
   \   000075   AE82         MOV     R6,DPL
   \   000077   AF83         MOV     R7,DPH
   \   000079   E8           MOV     A,R0
   \   00007A   C3           CLR     C
   \   00007B   33           RLC     A
   \   00007C   F8           MOV     R0,A
   \   00007D   E4           CLR     A
   \   00007E   33           RLC     A
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00008A   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00008D   EE           MOV     A,R6
   \   00008E   2402         ADD     A,#0x2
   \   000090   F5..         MOV     ?V0 + 10,A
   \   000092   EF           MOV     A,R7
   \   000093   3400         ADDC    A,#0x0
   \   000095   F5..         MOV     ?V0 + 11,A
   \   000097   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00009A                ; Setup parameters for call to function zclFindAttrRec
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   8582..       MOV     ?V0 + 12,DPL
   \   0000A3   8583..       MOV     ?V0 + 13,DPH
   \   0000A6   78..         MOV     R0,#?V0 + 12
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV     A,R1
   \   0000B6   6089         JZ      ??zclProcessInReadCmd_4
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0000C7   E4           CLR     A
   \   0000C8   85..82       MOV     DPL,?V0 + 10
   \   0000CB   85..83       MOV     DPH,?V0 + 11
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   02....       LJMP    ??zclProcessInReadCmd_5 & 0xFFFF
   2441            }
   2442            
   2443            // Build and send Read Response command
   2444            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   2445                             readRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   2446                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   0000DF   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   0000E2                ; Setup parameters for call to function zcl_SendReadRsp
   \   0000E2   85..82       MOV     DPL,?V0 + 4
   \   0000E5   85..83       MOV     DPH,?V0 + 5
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V0 + 2,A
   \   0000F1   78..         MOV     R0,#?V0 + 2
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   75..01       MOV     ?V0 + 2,#0x1
   \   0000F9   78..         MOV     R0,#?V0 + 2
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   85..82       MOV     DPL,?V0 + 8
   \   00010B   85..83       MOV     DPH,?V0 + 9
   \   00010E   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000111   E5..         MOV     A,?V0 + 8
   \   000113   2406         ADD     A,#0x6
   \   000115   FA           MOV     R2,A
   \   000116   E5..         MOV     A,?V0 + 9
   \   000118   3400         ADDC    A,#0x0
   \   00011A   FB           MOV     R3,A
   \   00011B   E5..         MOV     A,?V0 + 8
   \   00011D   2414         ADD     A,#0x14
   \   00011F   F582         MOV     DPL,A
   \   000121   E5..         MOV     A,?V0 + 9
   \   000123   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000126   F9           MOV     R1,A
   \   000127   12....       LCALL   ??zcl_SendReadRsp?relay
   \   00012A   7405         MOV     A,#0x5
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   2447            osal_mem_free( readRspCmd );
   \   00012F                ; Setup parameters for call to function osal_mem_free
   \   00012F   AA..         MOV     R2,?V0 + 0
   \   000131   AB..         MOV     R3,?V0 + 1
   \   000133   12....       LCALL   ??osal_mem_free?relay
   2448              
   2449            return TRUE;
   \   000136   7901         MOV     R1,#0x1
   \                     ??zclProcessInReadCmd_2:
   \   000138   7408         MOV     A,#0x8
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   02....       LJMP    ??Subroutine126_0 & 0xFFFF
   2450          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine141_0
   \   000006                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine142_0
   \   000001                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 8
   \   000007   85..83       MOV     DPH,?V0 + 9
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00000E   E5..         MOV     A,?V0 + 8
   \   000010   2414         ADD     A,#0x14
   \   000012   F582         MOV     DPL,A
   \   000014   E5..         MOV     A,?V0 + 9
   \   000016   3400         ADDC    A,#0x0
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??zclFindAttrRec?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine148_0
   \   000006                ; // Fall through to label ??Subroutine148_0
   2451          #endif // ZCL_READ
   2452          
   2453          #ifdef ZCL_WRITE
   2454          /*********************************************************************
   2455           * @fn      processInWriteCmd
   2456           * @brief   Process the "Profile" Write and Write No Response Commands
   2457           * @param   pInMsg - incoming message to process
   2458           * @return  TRUE if command processed. FALSE, otherwise.
   2459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F9           MOV     R1,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine144_0
   \   000007                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2460          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   2461          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   2462            zclWriteCmd_t *writeCmd;
   2463            zclWriteRec_t *statusRec;
   2464            zclWriteRspCmd_t *writeRspCmd;
   2465            zclAttrRec_t attrRec;
   2466            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2467            uint8 status;
   2468            uint8 i, j = 0;
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   2469          
   2470            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000014   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2471            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_253:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6402         XRL     A,#0x2
   \   00002B   7013         JNZ     ??zclProcessInWriteCmd_0
   2472            {
   2473              // We need to send a response back - allocate space for it
   2474              writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) 
   2475                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000030   12....       LCALL   ?Subroutine24 & 0xFFFF
   2476              if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_28:
   \   000033   7001         JNZ     ??zclProcessInWriteCmd_1
   \   000035   EB           MOV     A,R3
   \                     ??zclProcessInWriteCmd_1:
   \   000036   7005         JNZ     ??zclProcessInWriteCmd_2
   2477                return FALSE; // EMBEDDED RETURN
   \   000038   7900         MOV     R1,#0x0
   \   00003A   02....       LJMP    ??zclProcessInWriteCmd_3 & 0xFFFF
   2478              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_2:
   \   00003D   75..01       MOV     ?V0 + 4,#0x1
   2479            }
   2480            
   2481            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteCmd_0:
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   801F         SJMP    ??zclProcessInWriteCmd_4
   2482            {
   2483              statusRec = &(writeCmd->attrList[i]);
   2484              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2485              {
   2486                if ( statusRec->dataType == attrRec.attr.dataType )
   2487                {
   2488                  status = zclWriteAttrData( &attrRec, statusRec );
   2489          
   2490                  if ( sendRsp && status != ZCL_STATUS_SUCCESS ) // If successful, a write attribute status record shall NOT be generated
   2491                  {
   2492                    writeRspCmd->attrList[j].status = status; // Attribute is read only - move on to the next write attribute record
   2493                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2494                  }
   2495                }
   2496                else
   2497                {
   2498                  if ( sendRsp ) // Attribute data type is incorrect - move on to the next write attribute record
   2499                  {
   2500                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2501                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2502                  }
   2503                }
   2504              }
   2505              else
   2506              {
   2507                if ( sendRsp ) // Attribute is not supported - move on to the next write attribute record
   \                     ??zclProcessInWriteCmd_5:
   \   000045   E5..         MOV     A,?V0 + 4
   \   000047   6019         JZ      ??zclProcessInWriteCmd_6
   2508                {
   2509                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000049   7486         MOV     A,#-0x7a
   \                     ??zclProcessInWriteCmd_7:
   \   00004B   85..82       MOV     DPL,?V0 + 14
   \   00004E   85..83       MOV     DPH,?V0 + 15
   2510                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2511                }
   2512              }
   \   000051   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000054   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000057   85..82       MOV     DPL,?V0 + 12
   \   00005A   85..83       MOV     DPH,?V0 + 13
   \   00005D   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000060   05..         INC     ?V0 + 2
   \                     ??zclProcessInWriteCmd_6:
   \   000062   05..         INC     ?V0 + 3
   \                     ??zclProcessInWriteCmd_4:
   \   000064   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   C3           CLR     C
   \   00006C   9A           SUBB    A,R2
   \   00006D   4003         JC      $+5
   \   00006F   02....       LJMP    ??zclProcessInWriteCmd_8 & 0xFFFF
   \   000072   E5..         MOV     A,?V0 + 3
   \   000074   75F005       MOV     B,#0x5
   \   000077   A4           MUL     AB
   \   000078   F8           MOV     R0,A
   \   000079   A9F0         MOV     R1,B
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   28           ADD     A,R0
   \   000083   FA           MOV     R2,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   39           ADDC    A,R1
   \   000087   8A82         MOV     DPL,R2
   \   000089   F583         MOV     DPH,A
   \   00008B   A3           INC     DPTR
   \   00008C   AE82         MOV     R6,DPL
   \   00008E   AF83         MOV     R7,DPH
   \   000090   E5..         MOV     A,?V0 + 2
   \   000092   75F003       MOV     B,#0x3
   \   000095   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000098   E582         MOV     A,DPL
   \   00009A   2402         ADD     A,#0x2
   \   00009C   F5..         MOV     ?V0 + 12,A
   \   00009E   E583         MOV     A,DPH
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F5..         MOV     ?V0 + 13,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   8582..       MOV     ?V0 + 14,DPL
   \   0000A8   8583..       MOV     ?V0 + 15,DPH
   \   0000AB   85..82       MOV     DPL,?V0 + 6
   \   0000AE   85..83       MOV     DPH,?V0 + 7
   \   0000B1   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   8582..       MOV     ?V0 + 10,DPL
   \   0000BA   8583..       MOV     ?V0 + 11,DPH
   \   0000BD   78..         MOV     R0,#?V0 + 10
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV     A,R1
   \   0000CD   7003         JNZ     $+5
   \   0000CF   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FA           MOV     R2,A
   \   0000DA   7406         MOV     A,#0x6
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6A           XRL     A,R2
   \   0000E1   7022         JNZ     ??zclProcessInWriteCmd_9
   \   0000E3                ; Setup parameters for call to function zclWriteAttrData
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FC           MOV     R4,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   FD           MOV     R5,A
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   AA82         MOV     R2,DPL
   \   0000EE   AB83         MOV     R3,DPH
   \   0000F0   12....       LCALL   ??zclWriteAttrData?relay
   \   0000F3   E9           MOV     A,R1
   \   0000F4   FA           MOV     R2,A
   \   0000F5   E5..         MOV     A,?V0 + 4
   \   0000F7   7003         JNZ     $+5
   \   0000F9   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   0000FC   EA           MOV     A,R2
   \   0000FD   7003         JNZ     $+5
   \   0000FF   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   000102   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   \                     ??zclProcessInWriteCmd_9:
   \   000105   E5..         MOV     A,?V0 + 4
   \   000107   7003         JNZ     $+5
   \   000109   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   00010C   748D         MOV     A,#-0x73
   \   00010E   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   2513            } // for loop
   2514          
   2515            if ( sendRsp )
   \                     ??zclProcessInWriteCmd_8:
   \   000111   E5..         MOV     A,?V0 + 4
   \   000113   604A         JZ      ??zclProcessInWriteCmd_10
   2516            {
   2517              writeRspCmd->numAttr = j;
   \   000115   85..82       MOV     DPL,?V0 + 0
   \   000118   85..83       MOV     DPH,?V0 + 1
   \   00011B   E5..         MOV     A,?V0 + 2
   \   00011D   F0           MOVX    @DPTR,A
   2518              if ( writeRspCmd->numAttr == 0 )
   \   00011E   7003         JNZ     ??CrossCallReturnLabel_12
   2519              {
   2520                // Since all records were written successful, include a single status record in the resonse command 
   2521                // with the status field set to SUCCESS and the attribute ID field omitted.
   2522                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000120   12....       LCALL   ?Subroutine10 & 0xFFFF
   2523                writeRspCmd->numAttr = 1;
   2524              }
   2525              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2526                                pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2527                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_12:
   \   000123   85..82       MOV     DPL,?V0 + 6
   \   000126   85..83       MOV     DPH,?V0 + 7
   \   000129   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00012C                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00012C   85..82       MOV     DPL,?V0 + 6
   \   00012F   85..83       MOV     DPH,?V0 + 7
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   F5..         MOV     ?V0 + 2,A
   \   00013B   78..         MOV     R0,#?V0 + 2
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   75..01       MOV     ?V0 + 2,#0x1
   \   000143   78..         MOV     R0,#?V0 + 2
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   78..         MOV     R0,#?V0 + 2
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014D   78..         MOV     R0,#?V0 + 0
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000155   12....       LCALL   ?DEALLOC_XSTACK8
   2528              osal_mem_free( writeRspCmd );
   \   000158                ; Setup parameters for call to function osal_mem_free
   \   000158   AA..         MOV     R2,?V0 + 0
   \   00015A   AB..         MOV     R3,?V0 + 1
   \   00015C   12....       LCALL   ??osal_mem_free?relay
   2529            }
   2530            return TRUE; 
   \                     ??zclProcessInWriteCmd_10:
   \   00015F   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteCmd_3:
   \   000161   740A         MOV     A,#0xa
   \   000163   02....       LJMP    ??Subroutine125_0 & 0xFFFF
   2531          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine146_0
   \   000006                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   7401         MOV     A,#0x1
   \   00000A   28           ADD     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00000B   FD           MOV     R5,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2406         ADD     A,#0x6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   EE           MOV     A,R6
   \   000015   2414         ADD     A,#0x14
   \   000017   F582         MOV     DPL,A
   \   000019   EF           MOV     A,R7
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??zcl_SendWriteRsp?relay
   \   000023   7405         MOV     A,#0x5
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR     A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7401         MOV     A,#0x1
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
   2532          
   2533          /*********************************************************************
   2534           * @fn      zclRevertWriteUndividedCmd
   2535           * @brief   Revert the "Profile" Write Undevided Command
   2536           * @param   pInMsg - incoming message to process
   2537           *          curWriteRec - old data
   2538           *          numAttr - number of attributes to be reverted
   2539           */
   2540          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg, zclWriteRec_t *curWriteRec, uint16 numAttr )
   2541          {
   2542            zclWriteRec_t *statusRec;
   2543            zclAttrRec_t attrRec;
   2544            uint8 dataLen;
   2545            uint8 i;
   2546          
   2547            statusRec = curWriteRec;
   2548            for (i = 0; i < numAttr; i++)
   2549            {
   2550              statusRec = &(curWriteRec[i]);
   2551              
   2552              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2553                break; // should never happen
   2554           
   2555              // Just copy the old data back - no need to validate the data
   2556              dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   2557              osal_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   2558            } // for loop
   2559          }
   2560          
   2561          /*********************************************************************
   2562           * @fn      zclProcessInWriteUndividedCmd
   2563           * @brief   Process the "Profile" Write Undivided Command
   2564           * @param   pInMsg - incoming message to process
   2565           * @return  TRUE if command processed. FALSE, otherwise.
   2566           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine135_0
   \   000003                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine147_0
   \   000006                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2567          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   2568          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   2569            zclWriteCmd_t *writeCmd;
   2570            zclWriteRec_t *statusRec;
   2571            zclWriteRec_t *curWriteRec;
   2572            zclWriteRec_t *curStatusRec;
   2573            zclWriteRspCmd_t *writeRspCmd;
   2574            zclAttrRec_t attrRec;
   2575            uint8 *curDataPtr;
   2576            uint8 hdrLen;
   2577            uint8 dataLen;
   2578            uint8 curLen = 0;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2579            uint8 status;
   2580            uint8 i, j = 0;
   \   000011   7F00         MOV     R7,#0x0
   2581          
   2582            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000013   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000016   F5..         MOV     ?V0 + 6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 7,A
   2583            
   2584            // Allocate space for Write Response Command
   2585            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   85..82       MOV     DPL,?V0 + 6
   \   00001F   F583         MOV     DPH,A
   \   000021   12....       LCALL   ?Subroutine24 & 0xFFFF
   2586            
   2587            if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_29:
   \   000024   7001         JNZ     ??zclProcessInWriteUndividedCmd_0
   \   000026   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000027   7005         JNZ     ??zclProcessInWriteUndividedCmd_1
   2588              return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000029   7900         MOV     R1,#0x0
   \   00002B   02....       LJMP    ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   2589            
   2590            // If any attribute cannot be written, no attribute values are changed. Hence,
   2591            // make sure all the attributes are supported and writable
   2592            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00002E   7E00         MOV     R6,#0x0
   \   000030   8019         SJMP    ??zclProcessInWriteUndividedCmd_4
   2593            {
   2594              statusRec = &(writeCmd->attrList[i]);
   2595              
   2596              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2597              {
   2598                // Attribute is not supported - stop here
   2599                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   2600                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2601                break;
   2602              }
   2603              
   2604              if ( statusRec->dataType != attrRec.attr.dataType )
   2605              {
   2606                // Attribute data type is incorrect - stope here
   2607                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2608                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2609                break;
   2610              }
   2611              
   2612              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   2613              {
   2614                // Attribute is not writable - stop here
   2615                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   2616                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2617                break;
   2618              }  
   2619              dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000032                ; Setup parameters for call to function zclGetAttrDataLength
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00003B   12....       LCALL   ??zclGetAttrDataLength?relay
   \   00003E   E9           MOV     A,R1
   \   00003F   FA           MOV     R2,A
   2620              
   2621              // add padding if needed
   2622              if ( PADDING_NEEDED( dataLen ) )
   \   000040   A2E0         MOV     C,0xE0 /* A   */.0
   \   000042   5001         JNC     ??zclProcessInWriteUndividedCmd_6
   2623                dataLen++;
   \   000044   0A           INC     R2
   2624              curLen += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   000045   EA           MOV     A,R2
   \   000046   25..         ADD     A,?V0 + 4
   \   000048   F5..         MOV     ?V0 + 4,A
   \   00004A   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   00004B   85..82       MOV     DPL,?V0 + 6
   \   00004E   85..83       MOV     DPH,?V0 + 7
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FA           MOV     R2,A
   \   000053   EE           MOV     A,R6
   \   000054   C3           CLR     C
   \   000055   9A           SUBB    A,R2
   \   000056   505D         JNC     ??zclProcessInWriteUndividedCmd_7
   \   000058   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00005B   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   8582..       MOV     ?V0 + 10,DPL
   \   000064   8583..       MOV     ?V0 + 11,DPH
   \   000067   78..         MOV     R0,#?V0 + 10
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072   E9           MOV     A,R1
   \   000073   7004         JNZ     ??zclProcessInWriteUndividedCmd_8
   \   000075   7486         MOV     A,#-0x7a
   \   000077   8023         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000079   85..82       MOV     DPL,?V0 + 2
   \   00007C   85..83       MOV     DPH,?V0 + 3
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   7406         MOV     A,#0x6
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   E0           MOVX    A,@DPTR
   \   000089   69           XRL     A,R1
   \   00008A   6004         JZ      ??zclProcessInWriteUndividedCmd_10
   \   00008C   748D         MOV     A,#-0x73
   \   00008E   800C         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   000090   7407         MOV     A,#0x7
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E0           MOVX    A,@DPTR
   \   000096   A2E1         MOV     C,0xE0 /* A   */.1
   \   000098   4098         JC      ??zclProcessInWriteUndividedCmd_5
   \   00009A   7488         MOV     A,#-0x78
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   00009C   85..82       MOV     DPL,?V0 + 0
   \   00009F   85..83       MOV     DPH,?V0 + 1
   \   0000A2   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A5   F8           MOV     R0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   85..82       MOV     DPL,?V0 + 0
   \   0000AC   85..83       MOV     DPH,?V0 + 1
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   12....       LCALL   ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000B4   0F           INC     R7
   2625            } // for loop
   2626            
   2627            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0000B5   EF           MOV     A,R7
   \   0000B6   85..82       MOV     DPL,?V0 + 0
   \   0000B9   85..83       MOV     DPH,?V0 + 1
   \   0000BC   F0           MOVX    @DPTR,A
   2628            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000BD   6003         JZ      $+5
   \   0000BF   02....       LJMP    ??zclProcessInWriteUndividedCmd_11 & 0xFFFF
   2629            {
   2630              // calculate the length of the current data header
   2631              hdrLen = j * sizeof( zclWriteRec_t );
   \   0000C2   75F005       MOV     B,#0x5
   \   0000C5   A4           MUL     AB
   \   0000C6   FA           MOV     R2,A
   2632            
   2633              // Allocate space to keep a copy of the current data
   2634              curWriteRec = (zclWriteRec_t *) osal_mem_alloc( hdrLen + curLen ); 
   \   0000C7   8A82         MOV     DPL,R2
   \   0000C9   8582..       MOV     ?V0 + 2,DPL
   \   0000CC                ; Setup parameters for call to function osal_mem_alloc
   \   0000CC   E5..         MOV     A,?V0 + 4
   \   0000CE   25..         ADD     A,?V0 + 2
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E4           CLR     A
   \   0000D2   3400         ADDC    A,#0x0
   \   0000D4   FB           MOV     R3,A
   \   0000D5   12....       LCALL   ??osal_mem_alloc?relay
   \   0000D8   8A..         MOV     ?V0 + 12,R2
   \   0000DA   8B..         MOV     ?V0 + 13,R3
   2635              if ( curWriteRec == NULL )
   \   0000DC   EA           MOV     A,R2
   \   0000DD   7001         JNZ     ??zclProcessInWriteUndividedCmd_12
   \   0000DF   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   0000E0   700A         JNZ     ??zclProcessInWriteUndividedCmd_13
   2636              {
   2637                osal_mem_free(writeRspCmd );
   \   0000E2                ; Setup parameters for call to function osal_mem_free
   \   0000E2   AA..         MOV     R2,?V0 + 0
   \   0000E4   AB..         MOV     R3,?V0 + 1
   \   0000E6   12....       LCALL   ??osal_mem_free?relay
   2638                return FALSE; // EMBEDDED RETURN
   \   0000E9   02....       LJMP    ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   2639              }
   2640          
   2641              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0000EC   EA           MOV     A,R2
   \   0000ED   25..         ADD     A,?V0 + 2
   \   0000EF   F5..         MOV     ?V0 + 4,A
   \   0000F1   EB           MOV     A,R3
   \   0000F2   3400         ADDC    A,#0x0
   \   0000F4   F5..         MOV     ?V0 + 5,A
   2642              
   2643              // Write the new data over
   2644              for (i = 0; i < writeCmd->numAttr; i++)
   \   0000F6   7E00         MOV     R6,#0x0
   \   0000F8   8023         SJMP    ??zclProcessInWriteUndividedCmd_14
   2645              {
   2646                statusRec = &(writeCmd->attrList[i]);
   2647                curStatusRec = &(curWriteRec[i]);
   2648              
   2649                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2650                  break; // should never happen
   2651          
   2652                // Keep a copy of the current data before before writing the new data over
   2653                curStatusRec->attrID = statusRec->attrID;
   2654                zclReadAttrData( curDataPtr, &attrRec );
   2655                curStatusRec->attrData = curDataPtr;
   2656                
   2657                status = zclWriteAttrData( &attrRec, statusRec );
   2658                   
   2659                // If successful, a write attribute status record shall NOT be generated
   2660                if ( status != ZCL_STATUS_SUCCESS )
   2661                {
   2662                  writeRspCmd->attrList[j].status = status;
   2663                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2664                    
   2665                  // Since this write failed, we need to revert all the pervious writes
   2666                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   2667                  break;
   2668                }
   2669                
   2670                dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0000FA                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000FA   85..82       MOV     DPL,?V0 + 2
   \   0000FD   85..83       MOV     DPH,?V0 + 3
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000106   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   2671                
   2672                // add padding if needed
   2673                if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_196:
   \   000109   A2E0         MOV     C,0xE0 /* A   */.0
   \   00010B   5001         JNC     ??zclProcessInWriteUndividedCmd_16
   2674                  dataLen++;
   \   00010D   0A           INC     R2
   2675                curDataPtr += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   00010E   8A..         MOV     ?V0 + 2,R2
   \   000110   E5..         MOV     A,?V0 + 4
   \   000112   25..         ADD     A,?V0 + 2
   \   000114   F5..         MOV     ?V0 + 4,A
   \   000116   E5..         MOV     A,?V0 + 5
   \   000118   3400         ADDC    A,#0x0
   \   00011A   F5..         MOV     ?V0 + 5,A
   \   00011C   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   00011D   85..82       MOV     DPL,?V0 + 6
   \   000120   85..83       MOV     DPH,?V0 + 7
   \   000123   E0           MOVX    A,@DPTR
   \   000124   FA           MOV     R2,A
   \   000125   EE           MOV     A,R6
   \   000126   C3           CLR     C
   \   000127   9A           SUBB    A,R2
   \   000128   4003         JC      $+5
   \   00012A   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   00012D   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000130   E5..         MOV     A,?V0 + 12
   \   000132   28           ADD     A,R0
   \   000133   F8           MOV     R0,A
   \   000134   E5..         MOV     A,?V0 + 13
   \   000136   39           ADDC    A,R1
   \   000137   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00013A   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   8582..       MOV     ?V0 + 10,DPL
   \   000143   8583..       MOV     ?V0 + 11,DPH
   \   000146   78..         MOV     R0,#?V0 + 10
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014B   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00014E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000151   E9           MOV     A,R1
   \   000152   7003         JNZ     $+5
   \   000154   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   000157   85..82       MOV     DPL,?V0 + 2
   \   00015A   85..83       MOV     DPH,?V0 + 3
   \   00015D   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000160   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000163   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000166                ; Setup parameters for call to function zclReadAttrData
   \   000166   7402         MOV     A,#0x2
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   AC82         MOV     R4,DPL
   \   00016D   AD83         MOV     R5,DPH
   \   00016F   AA..         MOV     R2,?V0 + 4
   \   000171   AB..         MOV     R3,?V0 + 5
   \   000173   12....       LCALL   ??zclReadAttrData?relay
   \   000176   85..82       MOV     DPL,?XSP + 0
   \   000179   85..83       MOV     DPH,?XSP + 1
   \   00017C   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00017F   E5..         MOV     A,?V0 + 4
   \   000181   F0           MOVX    @DPTR,A
   \   000182   A3           INC     DPTR
   \   000183   E5..         MOV     A,?V0 + 5
   \   000185   F0           MOVX    @DPTR,A
   \   000186                ; Setup parameters for call to function zclWriteAttrData
   \   000186   AC..         MOV     R4,?V0 + 2
   \   000188   AD..         MOV     R5,?V0 + 3
   \   00018A   7402         MOV     A,#0x2
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   AA82         MOV     R2,DPL
   \   000191   AB83         MOV     R3,DPH
   \   000193   12....       LCALL   ??zclWriteAttrData?relay
   \   000196   E9           MOV     A,R1
   \   000197   FB           MOV     R3,A
   \   000198   7003         JNZ     $+5
   \   00019A   02....       LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   00019D   EF           MOV     A,R7
   \   00019E   75F003       MOV     B,#0x3
   \   0001A1   A4           MUL     AB
   \   0001A2   F8           MOV     R0,A
   \   0001A3   A9F0         MOV     R1,B
   \   0001A5   E5..         MOV     A,?V0 + 0
   \   0001A7   28           ADD     A,R0
   \   0001A8   F8           MOV     R0,A
   \   0001A9   E5..         MOV     A,?V0 + 1
   \   0001AB   39           ADDC    A,R1
   \   0001AC   F9           MOV     R1,A
   \   0001AD   EB           MOV     A,R3
   \   0001AE   8882         MOV     DPL,R0
   \   0001B0   8983         MOV     DPH,R1
   \   0001B2   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001B5   FA           MOV     R2,A
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   FB           MOV     R3,A
   \   0001B9   8882         MOV     DPL,R0
   \   0001BB   8983         MOV     DPH,R1
   \   0001BD   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0001C0   0F           INC     R7
   \   0001C1   8E82         MOV     DPL,R6
   \   0001C3   8582..       MOV     ?V0 + 8,DPL
   \   0001C6   7E00         MOV     R6,#0x0
   \   0001C8   8032         SJMP    ??zclProcessInWriteUndividedCmd_18
   2676              } // for loop
   \                     ??zclProcessInWriteUndividedCmd_19:
   \   0001CA   E5..         MOV     A,?V0 + 2
   \   0001CC   2403         ADD     A,#0x3
   \   0001CE   F5..         MOV     ?V0 + 2,A
   \   0001D0   E5..         MOV     A,?V0 + 3
   \   0001D2   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   0001D5   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0001D8   740E         MOV     A,#0xe
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0001E0                ; Setup parameters for call to function osal_memcpy
   \   0001E0   85..82       MOV     DPL,?V0 + 2
   \   0001E3   85..83       MOV     DPH,?V0 + 3
   \   0001E6   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001EC   EA           MOV     A,R2
   \   0001ED   FC           MOV     R4,A
   \   0001EE   7D00         MOV     R5,#0x0
   \   0001F0   7413         MOV     A,#0x13
   \   0001F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0001F8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FB   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   0001FC   8E..         MOV     ?V0 + 2,R6
   \   0001FE   C3           CLR     C
   \   0001FF   E5..         MOV     A,?V0 + 2
   \   000201   95..         SUBB    A,?V0 + 8
   \   000203   E4           CLR     A
   \   000204   9400         SUBB    A,#0x0
   \   000206   5058         JNC     ??zclProcessInWriteUndividedCmd_17
   \   000208   EE           MOV     A,R6
   \   000209   75F005       MOV     B,#0x5
   \   00020C   A4           MUL     AB
   \   00020D   F8           MOV     R0,A
   \   00020E   A9F0         MOV     R1,B
   \   000210   E5..         MOV     A,?V0 + 12
   \   000212   28           ADD     A,R0
   \   000213   F5..         MOV     ?V0 + 2,A
   \   000215   E5..         MOV     A,?V0 + 13
   \   000217   39           ADDC    A,R1
   \   000218   F5..         MOV     ?V0 + 3,A
   \   00021A   85..82       MOV     DPL,?V0 + 14
   \   00021D   85..83       MOV     DPH,?V0 + 15
   \   000220   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000223                ; Setup parameters for call to function zclFindAttrRec
   \   000223   740A         MOV     A,#0xa
   \   000225   12....       LCALL   ?XSTACK_DISP0_8
   \   000228   8582..       MOV     ?V0 + 6,DPL
   \   00022B   8583..       MOV     ?V0 + 7,DPH
   \   00022E   78..         MOV     R0,#?V0 + 6
   \   000230   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000233   85..82       MOV     DPL,?V0 + 2
   \   000236   85..83       MOV     DPH,?V0 + 3
   \   000239   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00023C   85..82       MOV     DPL,?V0 + 4
   \   00023F   85..83       MOV     DPH,?V0 + 5
   \   000242   A3           INC     DPTR
   \   000243   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000246   E5..         MOV     A,?V0 + 4
   \   000248   2414         ADD     A,#0x14
   \   00024A   F582         MOV     DPL,A
   \   00024C   E5..         MOV     A,?V0 + 5
   \   00024E   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000251   F9           MOV     R1,A
   \   000252   12....       LCALL   ??zclFindAttrRec?relay
   \   000255   7402         MOV     A,#0x2
   \   000257   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025A   E9           MOV     A,R1
   \   00025B   6003         JZ      $+5
   \   00025D   02....       LJMP    ??zclProcessInWriteUndividedCmd_19 & 0xFFFF
   2677            
   2678              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000260   EF           MOV     A,R7
   \   000261   85..82       MOV     DPL,?V0 + 0
   \   000264   85..83       MOV     DPH,?V0 + 1
   \   000267   F0           MOVX    @DPTR,A
   2679              if ( writeRspCmd->numAttr  == 0 )
   \   000268   7003         JNZ     ??CrossCallReturnLabel_13
   2680              {
   2681                // Since all records were written successful, include a single status record in the resonse command
   2682                // with the status field set to SUCCESS and the attribute ID field omitted.
   2683                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   00026A   12....       LCALL   ?Subroutine10 & 0xFFFF
   2684                writeRspCmd->numAttr = 1;
   2685              }
   2686          
   2687              osal_mem_free( curWriteRec );
   \                     ??CrossCallReturnLabel_13:
   \   00026D                ; Setup parameters for call to function osal_mem_free
   \   00026D   AA..         MOV     R2,?V0 + 12
   \   00026F   AB..         MOV     R3,?V0 + 13
   \   000271   12....       LCALL   ??osal_mem_free?relay
   2688            }
   2689            
   2690            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2691                              pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2692                              true, pInMsg->hdr.transSeqNum );  
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000274   85..82       MOV     DPL,?V0 + 14
   \   000277   85..83       MOV     DPH,?V0 + 15
   \   00027A   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00027D                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00027D   85..82       MOV     DPL,?V0 + 14
   \   000280   85..83       MOV     DPH,?V0 + 15
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   A3           INC     DPTR
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   A3           INC     DPTR
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   F5..         MOV     ?V0 + 2,A
   \   00028C   78..         MOV     R0,#?V0 + 2
   \   00028E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000291   75..01       MOV     ?V0 + 2,#0x1
   \   000294   78..         MOV     R0,#?V0 + 2
   \   000296   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000299   78..         MOV     R0,#?V0 + 2
   \   00029B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029E   78..         MOV     R0,#?V0 + 0
   \   0002A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0002A6   12....       LCALL   ?DEALLOC_XSTACK8
   2693            osal_mem_free( writeRspCmd );
   \   0002A9                ; Setup parameters for call to function osal_mem_free
   \   0002A9   AA..         MOV     R2,?V0 + 0
   \   0002AB   AB..         MOV     R3,?V0 + 1
   \   0002AD   12....       LCALL   ??osal_mem_free?relay
   2694           
   2695            return TRUE; 
   \   0002B0   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   0002B2   02....       LJMP    ?Subroutine123 & 0xFFFF
   2696          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   EE           MOV     A,R6
   \   000001   75F005       MOV     B,#0x5
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V0 + 7
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   8582..       MOV     ?V0 + 2,DPL
   \   000016   8583..       MOV     ?V0 + 3,DPH
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006                REQUIRE ??Subroutine150_0
   \   000006                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   85..82       MOV     DPL,?V0 + 2
   \   000005   85..83       MOV     DPH,?V0 + 3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   2697          #endif // ZCL_WRITE
   2698          
   2699          #ifdef ZCL_DISCOVER
   2700          /*********************************************************************
   2701           * @fn      zclProcessInDiscCmd
   2702           * @brief   Process the "Profile" Discover Command
   2703           * @param   pInMsg - incoming message to process
   2704           * @return  TRUE if command processed. FALSE, otherwise.
   2705           */
   2706          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   2707          {
   2708            zclDiscoverCmd_t *discoverCmd;
   2709            zclDiscoverRspCmd_t *discoverRspCmd;
   2710            uint8 discComplete = TRUE;
   2711            zclAttrRec_t attrRec;
   2712            uint16 attrID;
   2713            uint8 i;
   2714            
   2715            discoverCmd = (zclDiscoverCmd_t *)pInMsg->attrCmd;
   2716            
   2717            // Find out the number of attributes supported within the specified range
   2718            for ( i = 0, attrID = discoverCmd->startAttr; i < discoverCmd->maxAttrIDs; i++, attrID++ )
   2719            {
   2720              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2721                break;
   2722            }
   2723            
   2724            // Allocate space for the response command
   2725            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof (zclDiscoverRspCmd_t) 
   2726                                                                   + sizeof ( zclDiscoverInfo_t ) * i );
   2727            if ( discoverRspCmd == NULL )
   2728              return FALSE; // EMEDDED RETURN
   2729            
   2730            discoverRspCmd->numAttr = i;
   2731            if ( discoverRspCmd->numAttr != 0 )
   2732            {
   2733              for ( i = 0, attrID = discoverCmd->startAttr; i < discoverRspCmd->numAttr; i++, attrID++ )
   2734              {
   2735                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2736                  break; // Attribute not supported
   2737                
   2738                discoverRspCmd->attrList[i].attrID = attrRec.attr.attrId;
   2739                discoverRspCmd->attrList[i].dataType = attrRec.attr.dataType;
   2740              }
   2741              
   2742              // Are there more attributes to be discovered?
   2743              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2744                discComplete = FALSE;
   2745            }
   2746            
   2747            discoverRspCmd->discComplete = discComplete;
   2748            zcl_SendDiscoverRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr, 
   2749                                    pInMsg->msg->clusterId, discoverRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2750                                    true, pInMsg->hdr.transSeqNum );
   2751            osal_mem_free( discoverRspCmd );
   2752            
   2753            return TRUE;
   2754          }
   2755          #endif // ZCL_DISCOVER
   2756          
   2757          /*********************************************************************
   2758           * @fn      zclSendMsg
   2759           * @brief   Send an incoming message to the Application
   2760           * @param   pInMsg - incoming message to process
   2761           * @return  TRUE
   2762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2763          static uint8 zclSendMsg( zclIncoming_t *pInMsg )
   \                     zclSendMsg:
   2764          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2765            zclIncomingMsg_t *pCmd;
   2766              
   2767            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000009   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   7005         JNZ     ??zclSendMsg_0
   2768              return ( TRUE );
   \                     ??zclSendMsg_1:
   \   000011   7901         MOV     R1,#0x1
   \   000013   02....       LJMP    ?Subroutine117 & 0xFFFF
   2769            
   2770            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \                     ??zclSendMsg_0:
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A18         MOV     R2,#0x18
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_msg_allocate?relay
   2771            if ( pCmd != NULL )
   \   00001D   EA           MOV     A,R2
   \   00001E   7001         JNZ     ??zclSendMsg_2
   \   000020   EB           MOV     A,R3
   \                     ??zclSendMsg_2:
   \   000021   60EE         JZ      ??zclSendMsg_1
   2772            {
   2773              // fill in the message
   2774              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000023   7434         MOV     A,#0x34
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
   2775              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_225:
   \   000028   A3           INC     DPTR
   \   000029   EA           MOV     A,R2
   \   00002A   2402         ADD     A,#0x2
   \   00002C   FC           MOV     R4,A
   \   00002D   EB           MOV     A,R3
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FD           MOV     R5,A
   \   000031   7406         MOV     A,#0x6
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2776              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E8           MOV     A,R0
   \   00004E   12....       LCALL   ?Subroutine12 & 0xFFFF
   2777              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_18:
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F583         MOV     DPH,A
   \   000056   8882         MOV     DPL,R0
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   EA           MOV     A,R2
   \   00005F   240A         ADD     A,#0xa
   \   000061   FC           MOV     R4,A
   \   000062   EB           MOV     A,R3
   \   000063   3400         ADDC    A,#0x0
   \   000065   FD           MOV     R5,A
   \   000066   740C         MOV     A,#0xc
   \   000068   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2778              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00006B   EE           MOV     A,R6
   \   00006C   240C         ADD     A,#0xc
   \   00006E   F8           MOV     R0,A
   \   00006F   EF           MOV     A,R7
   \   000070   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000073   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000076   EA           MOV     A,R2
   \   000077   2416         ADD     A,#0x16
   \   000079   F582         MOV     DPL,A
   \   00007B   EB           MOV     A,R3
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F583         MOV     DPH,A
   \   000080   EC           MOV     A,R4
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   ED           MOV     A,R5
   \   000084   F0           MOVX    @DPTR,A
   2779              
   2780              // Application will free the attrCmd buffer
   2781              pInMsg->attrCmd = NULL;
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   F0           MOVX    @DPTR,A
   2782              
   2783              /* send message through task message */
   2784              osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
   \   00008D                ; Setup parameters for call to function osal_msg_send
   \   00008D   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   12....       LCALL   ??osal_msg_send?relay
   \   000095   02....       LJMP    ??zclSendMsg_1 & 0xFFFF
   2785            }
   2786            return ( TRUE );
   2787          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_RegisteredMsgTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerPlugin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerAttrList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerClusterOptionList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerValidateAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerForMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_DeviceOperational?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessMessageMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclBuildHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindAttrRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSetSecurityOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSerializeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetDataTypeLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclWriteAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteUndividedCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSendMsg
   2788          
   2789          /*********************************************************************
   2790          *********************************************************************/

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     zclBuildHdr                       1      0     54
     zclFindAttrRec                    1      0     62
     zclFindClusterOption              1      0     21
     zclGetAttrDataLength              2      0     42
       -> zclGetDataTypeLength         4      0      0
     zclGetClusterOption               0      0     81
       -> zclFindClusterOption         0      0     20
     zclGetDataTypeLength              2      0      0
     zclParseHdr                       1      0     83
       -> osal_memset                  0      0     24
     zclParseInDefaultRspCmd           1      0     10
       -> osal_mem_alloc               0      0     20
     zclParseInReadCmd                 1      0     12
       -> osal_mem_alloc               0      0     24
     zclParseInReadRspCmd              1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteCmd                1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteRspCmd             1      0     16
       -> osal_mem_alloc               0      0     32
     zclProcessInReadCmd               1      0     35
       -> osal_mem_alloc               0      0     60
       -> zclFindAttrRec               0      0     64
       -> zcl_SendReadRsp              0      0     70
       -> osal_mem_free                0      0     60
     zclProcessInWriteCmd              1      0     39
       -> osal_mem_alloc               0      0     68
       -> zclFindAttrRec               0      0     72
       -> zclWriteAttrData             0      0     68
       -> zcl_SendWriteRsp             0      0     78
       -> osal_mem_free                0      0     68
     zclProcessInWriteUndividedCmd     1      0     47
       -> osal_mem_alloc               0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> osal_mem_alloc               0      0     84
       -> osal_mem_free                0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> zclReadAttrData              0      0     84
       -> zclWriteAttrData             0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> osal_memcpy                  0      0     90
       -> zclFindAttrRec               0      0     88
       -> osal_mem_free                0      0     84
       -> zcl_SendWriteRsp             0      0     94
       -> osal_mem_free                0      0     84
     zclProcessMessageMSG              2      0     90
       -> strncmp                      0      0    146
       -> strcpy                       0      0    142
       -> strcpy                       0      0    142
       -> strcpy                       0      0    142
       -> zclParseHdr                  0      0    142
       -> afFindEndPointDesc           0      0    142
       -> zcl_DeviceOperational        0      0    146
       -> zclGetClusterOption          0      0    142
       -> zclSetSecurityOption         0      0    142
       -> zcl_SendDefaultRspCmd        0      0    156
       -> zclSetSecurityOption         0      0    142
       -> osal_mem_free                0      0    142
       -> zcl_SendDefaultRspCmd        0      0    156
     zclReadAttrData                   0      0     56
       -> zclGetAttrDataLength         0      0     22
       -> osal_memcpy                  0      0     28
     zclSendMsg                        1      0     10
       -> osal_msg_allocate            0      0     20
       -> osal_msg_send                0      0     20
     zclSerializeData                  1      0     44
       -> osal_buffer_uint32           0      0     32
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
     zclSetSecurityOption              0      0     81
       -> zclFindClusterOption         0      0     20
     zclWriteAttrData                  0      0     60
       -> zclGetAttrDataLength         0      0     30
       -> osal_memcpy                  0      0     36
     zcl_DeviceOperational             1      0     94
       -> zclFindAttrRec               0      0     42
       -> zclReadAttrData              0      0     38
     zcl_Init                          2      0      0
     zcl_SendCommand                   1      0     90
       -> osal_memcpy                  0      0     90
       -> afFindEndPointDesc           0      0     84
       -> zclGetClusterOption          0      0     84
       -> osal_memset                  0      0     84
       -> zcl_DeviceOperational        0      0     88
       -> osal_mem_alloc               0      0     84
       -> zclBuildHdr                  0      0     90
       -> osal_memcpy                  0      0     90
       -> AF_DataRequest               0      0    102
       -> osal_mem_free                0      0     84
     zcl_SendDefaultRspCmd             1      0    105
       -> zcl_SendCommand              0      0     54
     zcl_SendRead                      1      0     38
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_SendReadRsp                   1      0     74
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRequest              1      0     45
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRsp                  1      0     80
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_event_loop                    0      0     12
       -> osal_msg_receive             0      0     24
       -> zclProcessMessageMSG         0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> osal_msg_send                0      0     24
     zcl_registerAttrList              1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerClusterOptionList     1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerForMsg                2      0      0
     zcl_registerPlugin                0      0     16
       -> osal_mem_alloc               0      0     28
     zcl_registerValidateAttrData      2      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     zcl_TaskID                                    1
     stack                                         2
     global_entry                                 36
     global_recv_data                            270
     global_data_length                            9
     zcl_RegisteredMsgTaskID                       1
     zcl_ValidateAttrDataCB                        2
     zcl_SeqNum                                    1
     plugins                                       2
     attrList                                      2
     clusterOptionList                             2
     zcl_TransID                                   1
     zclCmdTable                                  56
     zcl_Init                                     31
     ?Subroutine107                                7
     zcl_event_loop                              102
     ?Subroutine108                                5
     zcl_registerPlugin                          127
     ?Subroutine109                                5
     ?Subroutine30                                 5
     ??Subroutine124_0                             5
     ?Subroutine11                                 8
     ?Subroutine14                                 4
     ?Subroutine99                                 7
     ?Subroutine89                                 5
     ??Subroutine136_0                             5
     ?Subroutine102                                5
     ?Subroutine39                                 6
     ?Subroutine17                                 2
     ??Subroutine151_0                             6
     zcl_registerAttrList                         59
     ?Subroutine62                                25
     ?Subroutine0                                 28
     ?Subroutine80                                 6
     zcl_registerClusterOptionList                59
     zcl_registerValidateAttrData                 14
     zcl_registerForMsg                           20
     zcl_DeviceOperational                       118
     ?Subroutine117                                5
     zcl_SendCommand                             514
     ?Subroutine123                                4
     ??Subroutine125_0                             8
     ?Subroutine40                                10
     ?Subroutine111                                6
     ?Subroutine91                                 6
     ?Subroutine81                                 8
     zcl_SendRead                                218
     ?Subroutine119                                2
     ??Subroutine126_0                             5
     ?Subroutine28                                 5
     ??Subroutine127_0                            11
     ?Subroutine114                                5
     ?Subroutine95                                 6
     ?Subroutine63                                11
     ?Subroutine56                                 6
     ?Subroutine41                                10
     ?Subroutine118                                4
     zcl_SendReadRsp                             251
     ?Subroutine88                                 7
     ?Subroutine73                                 4
     ?Subroutine96                                 7
     ?Subroutine64                                21
     ?Subroutine57                                10
     ?Subroutine44                                16
     ?Subroutine86                                 5
     ?Subroutine101                               11
     ?Subroutine42                                10
     ?Subroutine37                                13
     ?Subroutine36                                 9
     ?Subroutine20                                28
     ?Subroutine113                                5
     ?Subroutine82                                19
     ?Subroutine2                                 21
     ?Subroutine1                                 25
     ??Subroutine131_0                             5
     ?Subroutine84                                 3
     ?Subroutine105                               12
     zcl_SendWriteRequest                        222
     zcl_SendWriteRsp                            250
     zcl_SendDefaultRspCmd                       171
     ?Subroutine55                                 4
     zclProcessMessageMSG                       1495
     ?Subroutine120                                5
     ?Subroutine76                                15
     ?Subroutine75                                11
     ?Subroutine74                                11
     ?Subroutine70                                24
     ?Subroutine58                                 7
     ?Subroutine52                                11
     ?Subroutine51                                11
     ?Subroutine48                                12
     ?Subroutine45                                 5
     ?Subroutine33                                 7
     ?Subroutine90                                 8
     ?Subroutine27                                15
     ?Subroutine26                                13
     ?Subroutine104                                8
     ?Subroutine77                                 8
     ?Subroutine25                                 3
     ??Subroutine129_0                             2
     ??Subroutine130_0                             2
     ?Subroutine32                                 3
     ??Subroutine132_0                             5
     ??Subroutine135_0                             4
     ??Subroutine144_0                             1
     ??Subroutine145_0                             5
     ?Subroutine92                                 4
     ?Subroutine103                                9
     ??Subroutine148_0                             6
     ?Subroutine65                                 3
     ??Subroutine149_0                             4
     ?Subroutine94                                10
     ?Subroutine43                                 4
     ?Subroutine83                                11
     ?Subroutine87                                 6
     zclParseHdr                                 223
     ?Subroutine116                                5
     ?Subroutine9                                  4
     ?Subroutine78                                 5
     ??Subroutine139_0                             4
     ?Subroutine79                                 9
     ?Subroutine106                                8
     ?Subroutine5                                  6
     ??Subroutine140_0                             5
     ??Subroutine142_0                             7
     ?Subroutine100                                4
     ?Subroutine12                                 8
     zclBuildHdr                                 102
     ?Subroutine53                                11
     ?Subroutine16                                 7
     ??Subroutine128_0                             7
     ?Subroutine8                                  6
     ?Subroutine115                                5
     zclFindAttrRec                              186
     zclFindClusterOption                        123
     ?Subroutine121                                5
     zclGetClusterOption                          32
     zclSetSecurityOption                         46
     zclSerializeData                            289
     ?Subroutine15                                 5
     ?Subroutine49                                 4
     ??Subroutine143_0                             4
     zclGetDataTypeLength                        131
     zclGetAttrDataLength                         29
     zclReadAttrData                              75
     ?Subroutine29                                 2
     ??Subroutine133_0                             2
     ??Subroutine134_0                             5
     zclWriteAttrData                            122
     ?Subroutine112                                6
     ??Subroutine146_0                             4
     ?Subroutine50                                 6
     ?Subroutine35                                 6
     zclParseInReadCmd                            99
     ?Subroutine34                                25
     ?Subroutine61                                10
     zclParseInReadRspCmd                        126
     ?Subroutine122                                9
     ?Subroutine60                                22
     ??Subroutine137_0                             4
     ?Subroutine21                                 7
     ??Subroutine138_0                            22
     ?Subroutine6                                  8
     ?Subroutine72                                14
     ?Subroutine69                                 5
     ?Subroutine110                                6
     ?Subroutine68                                16
     ?Subroutine67                                26
     ?Subroutine38                                25
     ?Subroutine23                                32
     ?Subroutine4                                 23
     ?Subroutine3                                 34
     ?Subroutine98                                 4
     ?Subroutine97                                15
     ?Subroutine93                                 9
     zclParseInWriteCmd                          103
     zclParseInWriteRspCmd                       123
     zclParseInDefaultRspCmd                      44
     ?Subroutine7                                  4
     zclProcessInReadCmd                         320
     ?Subroutine85                                 6
     ??Subroutine141_0                             8
     ?Subroutine54                                 1
     ??Subroutine147_0                            34
     ?Subroutine66                                 6
     ?Subroutine13                                 7
     zclProcessInWriteCmd                        358
     ?Subroutine47                                 6
     ??Subroutine150_0                             6
     ?Subroutine24                                19
     ?Subroutine22                                38
     ?Subroutine10                                13
     ?Subroutine59                                 3
     ?Subroutine19                                 6
     zclProcessInWriteUndividedCmd               693
     ?Subroutine71                                26
     ?Subroutine31                                 6
     ?Subroutine18                                10
     ?Subroutine46                                 5
     zclSendMsg                                  152
     ?<Initializer for zcl_RegisteredMsgTaskID>    1
     ??zcl_Init?relay                              6
     ??zcl_event_loop?relay                        6
     ??zcl_registerPlugin?relay                    6
     ??zcl_registerAttrList?relay                  6
     ??zcl_registerClusterOptionList?relay         6
     ??zcl_registerValidateAttrData?relay          6
     ??zcl_registerForMsg?relay                    6
     ??zcl_DeviceOperational?relay                 6
     ??zcl_SendCommand?relay                       6
     ??zcl_SendRead?relay                          6
     ??zcl_SendReadRsp?relay                       6
     ??zcl_SendWriteRequest?relay                  6
     ??zcl_SendWriteRsp?relay                      6
     ??zcl_SendDefaultRspCmd?relay                 6
     ??zclProcessMessageMSG?relay                  6
     ??zclParseHdr?relay                           6
     ??zclBuildHdr?relay                           6
     ??zclFindAttrRec?relay                        6
     ??zclFindClusterOption?relay                  6
     ??zclGetClusterOption?relay                   6
     ??zclSetSecurityOption?relay                  6
     ??zclSerializeData?relay                      6
     ??zclGetDataTypeLength?relay                  6
     ??zclGetAttrDataLength?relay                  6
     ??zclReadAttrData?relay                       6
     ??zclWriteAttrData?relay                      6
     ??zclParseInReadCmd?relay                     6
     ??zclParseInReadRspCmd?relay                  6
     ??zclParseInWriteCmd?relay                    6
     ??zclParseInWriteRspCmd?relay                 6
     ??zclParseInDefaultRspCmd?relay               6
     ??zclProcessInReadCmd?relay                   6
     ??zclProcessInWriteCmd?relay                  6
     ??zclProcessInWriteUndividedCmd?relay         6
     ??zclSendMsg?relay                            6

 
 8 431 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    56 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   328 bytes in segment XDATA_Z
 
 8 698 bytes of CODE  memory
   329 bytes of XDATA memory

Errors: none
Warnings: 5
