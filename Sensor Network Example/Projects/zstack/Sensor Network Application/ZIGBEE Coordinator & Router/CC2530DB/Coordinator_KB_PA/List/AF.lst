###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                19/Aug/2013  00:53:39 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\GitHub\z-stack\Sensor Network                   #
#                          Example\Components\stack\af\AF.c                   #
#    Command line       =  -f "C:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "C:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Components\stack\af\AF.c" -D CC2530 -D     #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "C:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "C:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "C:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "C:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "C:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "C:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "C:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "C:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "C:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "C:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program           #
#                          Files\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\AF.lst      #
#    Object file        =  C:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\AF.r51       #
#                                                                             #
#                                                                             #
###############################################################################

C:\GitHub\z-stack\Sensor Network Example\Components\stack\af\AF.c
      1          #include "OSAL.h"
      2          #include "nwk_globals.h"
      3          #include "nwk_util.h"
      4          #include "aps_groups.h"
      5          #include "ZDProfile.h"
      6          #include "aps_frag.h"
      7          #include "rtg.h"
      8          
      9          #if defined ( MT_AF_CB_FUNC )
     10            #include "MT_AF.h"
     11          #endif
     12          #if defined ( INTER_PAN )
     13            #include "stub_aps.h"
     14          #endif
     15          
     16          /* Profile */
     17          #include "AF.h"
     18          
     19          /*********************************************************************
     20           * @fn      afSend
     21           *
     22           * @brief   Helper macro for V1 API to invoke V2 API.
     23           *
     24           * input parameters
     25           *
     26           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     27           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     28           * @param   cID - A valid cluster ID as specified by the Profile.
     29           * @param   len - Number of bytes of data pointed to by next param.
     30           * @param  *buf - A pointer to the data bytes to send.
     31           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     32           * @param  *transID - A pointer to a byte which can be modified and which will
     33           *                    be used as the transaction sequence number of the msg.
     34           *
     35           * output parameters
     36           *
     37           * @param  *transID - Incremented by one if the return value is success.
     38           *
     39           * @return  afStatus_t - See previous definition of afStatus_... types.
     40           */
     41          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     42                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     43                                    (cID), (len), (buf), (transID), (options), (radius) )
     44          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     45          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     46          //Chris Defined

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     47          packet_t device_manager;
   \                     device_manager:
   \   000000                DS 48
   \   000030                REQUIRE __INIT_XDATA_Z
     48          
     49          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
     50                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
     51                          byte SecurityUse, uint32 timestamp );
     52          
     53          static epList_t *afFindEndPointDescList( byte EndPoint );
     54          
     55          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
     56          
     57          /*********************************************************************
     58           * NETWORK LAYER CALLBACKS
     59           */
     60          
     61          /*********************************************************************
     62           * PUBLIC FUNCTIONS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afInit
     67           *
     68           * @brief   Initialization function for the AF.
     69           *
     70           * @param   none
     71           *
     72           * @return  none
     73           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          void afInit( void )
   \                     afInit:
     75          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     76            // Start with no endpoint defined
     77            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
     78          }
   \   00000B                REQUIRE ?Subroutine23
   \   00000B                ; // Fall through to label ?Subroutine23

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     79          
     80          /*********************************************************************
     81           * @fn      afRegisterExtended
     82           *
     83           * @brief   Register an Application's EndPoint description.
     84           *
     85           * @param   epDesc - pointer to the Application's endpoint descriptor.
     86           * @param   descFn - pointer to descriptor callback function
     87           *
     88           * NOTE:  The memory that epDesc is pointing to must exist after this call.
     89           *
     90           * @return  Pointer to epList_t on success, NULL otherwise.
     91           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     92          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
     93          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
     94            epList_t *ep;
     95            epList_t *epSearch;
     96          
     97            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay
     98            if ( ep )
   \   000014   EA           MOV     A,R2
   \   000015   7001         JNZ     ??afRegisterExtended_0
   \   000017   EB           MOV     A,R3
   \                     ??afRegisterExtended_0:
   \   000018   6054         JZ      ??afRegisterExtended_1
     99            {
    100              // Fill in the new list entry
    101              ep->epDesc = epDesc;
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   EE           MOV     A,R6
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EF           MOV     A,R7
   \   000022   F0           MOVX    @DPTR,A
    102          
    103              // Default to allow Match Descriptor.
    104              ep->flags = eEP_AllowMatch;
   \   000023   7401         MOV     A,#0x1
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine0 & 0xFFFF
    105              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_0:
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   12....       LCALL   ?Subroutine0 & 0xFFFF
    106              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_1:
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    107          
    108              // Does a list exist?
    109              if ( epList == NULL )
   \   00003D   90....       MOV     DPTR,#epList
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7002         JNZ     ??afRegisterExtended_2
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \                     ??afRegisterExtended_2:
   \   000045   90....       MOV     DPTR,#epList
   \   000048   601F         JZ      ??afRegisterExtended_3
    110                epList = ep;  // Make this the first entry
    111              else
    112              {
    113                // Look for the end of the list
    114                epSearch = epList;
   \   00004A   12....       LCALL   ??Subroutine32_0 & 0xFFFF
    115                while( epSearch->nextDesc != NULL )
    116                  epSearch = epSearch->nextDesc;
   \                     ??CrossCallReturnLabel_69:
   \   00004D   E8           MOV     A,R0
   \   00004E   2405         ADD     A,#0x5
   \   000050   F8           MOV     R0,A
   \   000051   E9           MOV     A,R1
   \   000052   3400         ADDC    A,#0x0
   \   000054   F9           MOV     R1,A
   \   000055   E8           MOV     A,R0
   \   000056   FC           MOV     R4,A
   \   000057   E9           MOV     A,R1
   \   000058   FD           MOV     R5,A
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000060   7001         JNZ     ??afRegisterExtended_4
   \   000062   E9           MOV     A,R1
   \                     ??afRegisterExtended_4:
   \   000063   70E8         JNZ     ??CrossCallReturnLabel_69
    117          
    118                // Add new entry to end of list
    119                epSearch->nextDesc = ep;
   \   000065   8C82         MOV     DPL,R4
   \   000067   8D83         MOV     DPH,R5
   \                     ??afRegisterExtended_3:
   \   000069   EA           MOV     A,R2
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   EB           MOV     A,R3
   \   00006D   F0           MOVX    @DPTR,A
    120              }
    121            }
    122          
    123            return ep;
   \                     ??afRegisterExtended_1:
   \   00006E                REQUIRE ?Subroutine24
   \   00006E                ; // Fall through to label ?Subroutine24
    124          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   22           RET
    125          
    126          /*********************************************************************
    127           * @fn      afRegister
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           *
    133           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    134           *
    135           * @return  afStatus_SUCCESS - Registered
    136           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    137           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    140          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    141            epList_t *ep;
    142            
    143            // Look for duplicate endpoint
    144            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??afFindEndPointDescList?relay
   \   000012   EA           MOV     A,R2
   \   000013   7001         JNZ     ??afRegister_0
   \   000015   EB           MOV     A,R3
   \                     ??afRegister_0:
   \   000016   6004         JZ      ??afRegister_1
    145              return ( afStatus_INVALID_PARAMETER );
   \   000018   7902         MOV     R1,#0x2
   \   00001A   8017         SJMP    ??afRegister_2
    146            
    147            ep = afRegisterExtended( epDesc, NULL );
    148          
    149            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_1:
   \   00001C                ; Setup parameters for call to function afRegisterExtended
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??afRegisterExtended?relay
   \   000027   EA           MOV     A,R2
   \   000028   7001         JNZ     ??afRegister_3
   \   00002A   EB           MOV     A,R3
   \                     ??afRegister_3:
   \   00002B   7004         JNZ     ??afRegister_4
   \   00002D   7910         MOV     R1,#0x10
   \   00002F   8002         SJMP    ??afRegister_2
   \                     ??afRegister_4:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afRegister_2:
   \   000033   02....       LJMP    ?Subroutine25 & 0xFFFF
    150          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    151          
    152          
    153          /*********************************************************************
    154           * @fn          afDataConfirm
    155           *
    156           * @brief       This function will generate the Data Confirm back to
    157           *              the application.
    158           *
    159           * @param       endPoint - confirm end point
    160           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    161           * @param       status - status of APSDE_DATA_REQUEST
    162           *
    163           * @return      none
    164           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    165          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    166          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   8B..         MOV     ?V0 + 2,R3
    167            endPointDesc_t *epDesc;
    168            afDataConfirm_t *msgPtr;
    169          
    170            // Find the endpoint description
    171            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   ??afFindEndPointDesc?relay
   \   00000E   8A..         MOV     ?V0 + 4,R2
   \   000010   8B..         MOV     ?V0 + 5,R3
   \   000012   AE..         MOV     R6,?V0 + 4
   \   000014   AF..         MOV     R7,?V0 + 5
    172            if ( epDesc == NULL )
   \   000016   EE           MOV     A,R6
   \   000017   7001         JNZ     ??afDataConfirm_0
   \   000019   EF           MOV     A,R7
   \                     ??afDataConfirm_0:
   \   00001A   602D         JZ      ??CrossCallReturnLabel_9
    173              return;
    174          
    175            // Determine the incoming command type
    176            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001C                ; Setup parameters for call to function osal_msg_allocate
   \   00001C   7A04         MOV     R2,#0x4
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   12....       LCALL   ??osal_msg_allocate?relay
    177            if ( msgPtr )
   \   000023   EA           MOV     A,R2
   \   000024   7001         JNZ     ??afDataConfirm_1
   \   000026   EB           MOV     A,R3
   \                     ??afDataConfirm_1:
   \   000027   6020         JZ      ??CrossCallReturnLabel_9
    178            {
    179              // Build the Data Confirm message
    180              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000029   74FD         MOV     A,#-0x3
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   F0           MOVX    @DPTR,A
    181              msgPtr->hdr.status = status;
   \   000030   A3           INC     DPTR
   \   000031   E5..         MOV     A,?V0 + 2
   \   000033   F0           MOVX    @DPTR,A
    182              msgPtr->endpoint = endPoint;
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   12....       LCALL   ?Subroutine0 & 0xFFFF
    183              msgPtr->transID = transID;
   \                     ??CrossCallReturnLabel_2:
   \   00003F   E5..         MOV     A,?V0 + 1
   \   000041   F0           MOVX    @DPTR,A
    184          
    185          #if defined ( MT_AF_CB_FUNC )
    186              /* If MT has subscribed for this callback, don't send as a message. */
    187              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    188              {
    189                /* Send callback if it's subscribed */
    190                MT_AfDataConfirm ((void *)msgPtr);
    191                /* Release the memory. */
    192                osal_msg_deallocate( (void *)msgPtr );
    193              }
    194              else
    195          #endif
    196              {
    197                /* send message through task message */
    198                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   000042                ; Setup parameters for call to function osal_msg_send
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   12....       LCALL   ?Subroutine5 & 0xFFFF
    199              }
    200            }
   \                     ??CrossCallReturnLabel_9:
   \   000049   7F06         MOV     R7,#0x6
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    201          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_msg_send?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    202          
    203          /*********************************************************************
    204           * @fn          afIncomingData
    205           *
    206           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    207           *
    208           * @param       aff  - pointer to APS frame format
    209           * @param       SrcAddress  - Source address
    210           * @param       sig - incoming message's link quality
    211           * @param       SecurityUse - Security enable/disable
    212           *
    213           * @return      none
    214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    215          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    216                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    217          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8A..         MOV     ?V0 + 10,R2
   \   000017   8B..         MOV     ?V0 + 11,R3
   \   000019   89..         MOV     ?V0 + 3,R1
   \   00001B   741A         MOV     A,#0x1a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 8,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   741E         MOV     A,#0x1e
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
    218            endPointDesc_t *epDesc = NULL;
    219            uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   000031   75..FF       MOV     ?V0 + 14,#-0x1
   \   000034   75..FF       MOV     ?V0 + 15,#-0x1
    220            epList_t *pList = epList;
   \   000037   90....       MOV     DPTR,#epList
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V0 + 1,A
    221          #if !defined ( APS_NO_GROUPS )    
    222            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000041   75..FE       MOV     ?V0 + 2,#-0x2
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E0           MOVX    A,@DPTR
   \   000049   540C         ANL     A,#0xc
   \   00004B   640C         XRL     A,#0xc
   \   00004D   701A         JNZ     ??afIncomingData_0
    223          #endif  
    224          
    225            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    226            {
    227          #if !defined ( APS_NO_GROUPS )    
    228              // Find the first endpoint for this group
    229              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00004F                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00004F   79FE         MOV     R1,#-0x2
   \   000051   12....       LCALL   ?Subroutine4 & 0xFFFF
    230              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_7:
   \   000054   7003         JNZ     $+5
   \   000056   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    231                return;   // No endpoint found
    232          
    233              epDesc = afFindEndPointDesc( grpEp );
   \   000059                ; Setup parameters for call to function afFindEndPointDesc
   \   000059   12....       LCALL   ?Subroutine18 & 0xFFFF
    234              if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_39:
   \   00005C   7001         JNZ     ??afIncomingData_2
   \   00005E   EF           MOV     A,R7
   \                     ??afIncomingData_2:
   \   00005F   7003         JNZ     $+5
   \   000061   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    235                return;   // Endpoint descriptor not found
    236          
    237              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_3:
   \   000064                ; Setup parameters for call to function afFindEndPointDescList
   \   000064   12....       LCALL   ?Subroutine13 & 0xFFFF
    238          #else
    239              return; // Not supported
    240          #endif    
    241            }
   \                     ??CrossCallReturnLabel_27:
   \   000067   8038         SJMP    ??afIncomingData_4
    242            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   74FF         MOV     A,#-0x1
   \   00006F   69           XRL     A,R1
   \   000070   700D         JNZ     ??afIncomingData_5
    243            {
    244              // Set the list
    245              if ( pList != NULL )
   \   000072   E5..         MOV     A,?V0 + 0
   \   000074   7002         JNZ     ??afIncomingData_6
   \   000076   E5..         MOV     A,?V0 + 1
   \                     ??afIncomingData_6:
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    246              {
    247                epDesc = pList->epDesc;
   \   00007D   8017         SJMP    ??afIncomingData_7
    248              }
    249            }
    250            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_5:
   \   00007F                ; Setup parameters for call to function afFindEndPointDesc
   \   00007F   12....       LCALL   ??afFindEndPointDesc?relay
   \   000082   8A..         MOV     ?V0 + 12,R2
   \   000084   8B..         MOV     ?V0 + 13,R3
   \   000086   A8..         MOV     R0,?V0 + 12
   \   000088   A9..         MOV     R1,?V0 + 13
   \   00008A   E8           MOV     A,R0
   \   00008B   FE           MOV     R6,A
   \   00008C   E9           MOV     A,R1
   \   00008D   FF           MOV     R7,A
   \   00008E   E8           MOV     A,R0
   \   00008F   7001         JNZ     ??afIncomingData_8
   \   000091   E9           MOV     A,R1
   \                     ??afIncomingData_8:
   \   000092   600D         JZ      ??afIncomingData_4
   \   000094   80CE         SJMP    ??afIncomingData_3
    251            {
    252              pList = afFindEndPointDescList( epDesc->endPoint );
    253            }
    254          
    255            while ( epDesc )
    256            {
    257              if ( pList->pfnDescCB )
    258              {
    259                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    260                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    261                if ( pID )
    262                {
    263                  epProfileID = *pID;
    264                  osal_mem_free( pID );
    265                }
    266              }
    267              else if ( epDesc->simpleDesc )
    268              {
    269                epProfileID = epDesc->simpleDesc->AppProfId;
    270              }
    271          
    272              if ( (aff->ProfileID == epProfileID) ||
    273                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    274              {
    275                {
    276                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    277                }
    278              }
    279          
    280              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    281              {
    282          #if !defined ( APS_NO_GROUPS )      
    283                // Find the next endpoint for this group
    284                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    285                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    286                  return;   // No endpoint found
    287          
    288                epDesc = afFindEndPointDesc( grpEp );
    289                if ( epDesc == NULL )
    290                  return;   // Endpoint descriptor not found
    291          
    292                pList = afFindEndPointDescList( epDesc->endPoint );
    293          #else
    294                return;
    295          #endif      
    296              }
    297              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    298              {
    299                pList = pList->nextDesc;
    300                if ( pList )
    301                  epDesc = pList->epDesc;
   \                     ??afIncomingData_7:
   \   000096   85..82       MOV     DPL,?V0 + 0
   \   000099   85..83       MOV     DPH,?V0 + 1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FE           MOV     R6,A
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   FF           MOV     R7,A
   \                     ??afIncomingData_4:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   7001         JNZ     ??afIncomingData_9
   \   0000A4   EF           MOV     A,R7
   \                     ??afIncomingData_9:
   \   0000A5   7003         JNZ     $+5
   \   0000A7   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000AA   8018         SJMP    ??CrossCallReturnLabel_28
   \                     ??afIncomingData_10:
   \   0000AC                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0000AC   A9..         MOV     R1,?V0 + 2
   \   0000AE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000B1   7003         JNZ     $+5
   \   0000B3   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000B6                ; Setup parameters for call to function afFindEndPointDesc
   \   0000B6   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000B9   7001         JNZ     ??afIncomingData_11
   \   0000BB   EF           MOV     A,R7
   \                     ??afIncomingData_11:
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000C1                ; Setup parameters for call to function afFindEndPointDescList
   \   0000C1   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000C4   85..82       MOV     DPL,?V0 + 0
   \   0000C7   85..83       MOV     DPH,?V0 + 1
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FC           MOV     R4,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FD           MOV     R5,A
   \   0000D2   EC           MOV     A,R4
   \   0000D3   7001         JNZ     ??afIncomingData_12
   \   0000D5   ED           MOV     A,R5
   \                     ??afIncomingData_12:
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   6018         JZ      ??afIncomingData_13
   \   0000DC                ; Setup parameters for indirect call
   \   0000DC   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000DF   12....       LCALL   ?CALL_IND
   \   0000E2   EA           MOV     A,R2
   \   0000E3   7001         JNZ     ??afIncomingData_14
   \   0000E5   EB           MOV     A,R3
   \                     ??afIncomingData_14:
   \   0000E6   6019         JZ      ??CrossCallReturnLabel_22
   \   0000E8   8A82         MOV     DPL,R2
   \   0000EA   8B83         MOV     DPH,R3
   \   0000EC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000EF                ; Setup parameters for call to function osal_mem_free
   \   0000EF   12....       LCALL   ??osal_mem_free?relay
   \   0000F2   800D         SJMP    ??CrossCallReturnLabel_22
   \                     ??afIncomingData_13:
   \   0000F4   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000F7   7002         JNZ     ??afIncomingData_15
   \   0000F9   E583         MOV     A,DPH
   \                     ??afIncomingData_15:
   \   0000FB   6004         JZ      ??CrossCallReturnLabel_22
   \   0000FD   A3           INC     DPTR
   \   0000FE   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000101   85..82       MOV     DPL,?V0 + 10
   \   000104   85..83       MOV     DPH,?V0 + 11
   \   000107   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00010A   E5..         MOV     A,?V0 + 14
   \   00010C   68           XRL     A,R0
   \   00010D   7003         JNZ     ??afIncomingData_16
   \   00010F   E5..         MOV     A,?V0 + 15
   \   000111   69           XRL     A,R1
   \                     ??afIncomingData_16:
   \   000112   600D         JZ      ??afIncomingData_17
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   E0           MOVX    A,@DPTR
   \   000119   7032         JNZ     ??afIncomingData_18
   \   00011B   E8           MOV     A,R0
   \   00011C   7001         JNZ     ??afIncomingData_19
   \   00011E   E9           MOV     A,R1
   \                     ??afIncomingData_19:
   \   00011F   702C         JNZ     ??afIncomingData_18
   \                     ??afIncomingData_17:
   \   000121                ; Setup parameters for call to function afBuildMSGIncoming
   \   000121   78..         MOV     R0,#?V0 + 4
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000126   7420         MOV     A,#0x20
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00012E   78..         MOV     R0,#?V0 + 8
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000133   7408         MOV     A,#0x8
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00013B   A9..         MOV     R1,?V0 + 3
   \   00013D   EE           MOV     A,R6
   \   00013E   FC           MOV     R4,A
   \   00013F   EF           MOV     A,R7
   \   000140   FD           MOV     R5,A
   \   000141   AA..         MOV     R2,?V0 + 10
   \   000143   AB..         MOV     R3,?V0 + 11
   \   000145   12....       LCALL   ??afBuildMSGIncoming?relay
   \   000148   740A         MOV     A,#0xa
   \   00014A   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??afIncomingData_18:
   \   00014D   85..82       MOV     DPL,?V0 + 10
   \   000150   85..83       MOV     DPH,?V0 + 11
   \   000153   E0           MOVX    A,@DPTR
   \   000154   540C         ANL     A,#0xc
   \   000156   640C         XRL     A,#0xc
   \   000158   7003         JNZ     $+5
   \   00015A   02....       LJMP    ??afIncomingData_10 & 0xFFFF
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   64FF         XRL     A,#0xff
   \   000162   701D         JNZ     ??afIncomingData_1
   \   000164   85..82       MOV     DPL,?V0 + 0
   \   000167   85..83       MOV     DPH,?V0 + 1
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F5..         MOV     ?V0 + 0,A
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   F5..         MOV     ?V0 + 1,A
   \   000176   E5..         MOV     A,?V0 + 0
   \   000178   7002         JNZ     ??afIncomingData_20
   \   00017A   E5..         MOV     A,?V0 + 1
   \                     ??afIncomingData_20:
   \   00017C   6003         JZ      $+5
   \   00017E   02....       LJMP    ??afIncomingData_7 & 0xFFFF
    302                else
    303                  epDesc = NULL;
   \                     ??afIncomingData_1:
   \   000181                REQUIRE ?Subroutine26
   \   000181                ; // Fall through to label ?Subroutine26
    304              }
    305              else
    306                epDesc = NULL;
    307            }
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F10         MOV     R7,#0x10
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??afFindEndPointDesc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B   EE           MOV     A,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??afFindEndPointDescList?relay
   \   000009   8A..         MOV     ?V0 + 0,R2
   \   00000B   8B..         MOV     ?V0 + 1,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   12....       LCALL   ??aps_FindGroupForEndpoint?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   F5..         MOV     ?V0 + 2,A
   \   00000F   74FE         MOV     A,#-0x2
   \   000011   65..         XRL     A,?V0 + 2
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 14,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine28_0
   \   000003                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine31_0
   \   000007                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine32_0
   \   000001                ; // Fall through to label ??Subroutine32_0
    309          
    310          /*********************************************************************
    311           * @fn          afBuildMSGIncoming
    312           *
    313           * @brief       Build the message for the app
    314           *
    315           * @param
    316           *
    317           * @return      pointer to next in data buffer
    318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    319          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    320                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    321                           byte SecurityUse, uint32 timestamp )
    322          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8A..         MOV     ?V0 + 0,R2
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   89..         MOV     ?V0 + 8,R1
   \   00001B   741E         MOV     A,#0x1e
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 3,A
   \   000027   7420         MOV     A,#0x20
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
    323            afIncomingMSGPacket_t *MSGpkt;
    324            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    325            byte *asdu = aff->asdu;
   \   000031   EA           MOV     A,R2
   \   000032   240E         ADD     A,#0xe
   \   000034   F582         MOV     DPL,A
   \   000036   EB           MOV     A,R3
   \   000037   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00003A   12....       LCALL   ?Subroutine10 & 0xFFFF
    326            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_23:
   \   00003D   EA           MOV     A,R2
   \   00003E   2410         ADD     A,#0x10
   \   000040   F5..         MOV     ?V0 + 10,A
   \   000042   EB           MOV     A,R3
   \   000043   3400         ADDC    A,#0x0
   \   000045   F5..         MOV     ?V0 + 11,A
   \   000047                ; Setup parameters for call to function osal_msg_allocate
   \   000047   85..82       MOV     DPL,?V0 + 10
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   2423         ADD     A,#0x23
   \   00004F   FA           MOV     R2,A
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   ??osal_msg_allocate?relay
   \   000055   8A..         MOV     ?V0 + 12,R2
   \   000057   8B..         MOV     ?V0 + 13,R3
   \   000059   AE..         MOV     R6,?V0 + 12
   \   00005B   AF..         MOV     R7,?V0 + 13
    327          
    328            if ( MSGpkt == NULL )
   \   00005D   EE           MOV     A,R6
   \   00005E   7001         JNZ     ??afBuildMSGIncoming_0
   \   000060   EF           MOV     A,R7
   \                     ??afBuildMSGIncoming_0:
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
    329            {
    330              return;
    331            }
    332          
    333            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000066   741A         MOV     A,#0x1a
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   F0           MOVX    @DPTR,A
    334            MSGpkt->groupId = aff->GroupID;
   \   00006D   85..82       MOV     DPL,?V0 + 0
   \   000070   85..83       MOV     DPH,?V0 + 1
   \   000073   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000076   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    335            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_47:
   \   000079   85..82       MOV     DPL,?V0 + 0
   \   00007C   85..83       MOV     DPH,?V0 + 1
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    336            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_48:
   \   000089                ; Setup parameters for call to function afCopyAddress
   \   000089   741A         MOV     A,#0x1a
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   FC           MOV     R4,A
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FD           MOV     R5,A
   \   000093   EE           MOV     A,R6
   \   000094   2406         ADD     A,#0x6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   3400         ADDC    A,#0x0
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   ??afCopyAddress?relay
    337            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00009E   85..82       MOV     DPL,?V0 + 0
   \   0000A1   85..83       MOV     DPH,?V0 + 1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C0E0         PUSH    A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   240F         ADD     A,#0xf
   \   0000AD   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
    338            MSGpkt->endPoint = epDesc->endPoint;
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000BC   C0E0         PUSH    A
   \   0000BE   EE           MOV     A,R6
   \   0000BF   2414         ADD     A,#0x14
   \   0000C1   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000C4   D0E0         POP     A
   \   0000C6   F0           MOVX    @DPTR,A
    339            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000C7   E5..         MOV     A,?V0 + 0
   \   0000C9   240C         ADD     A,#0xc
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E5..         MOV     A,?V0 + 1
   \   0000CF   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   EE           MOV     A,R6
   \   0000D6   2415         ADD     A,#0x15
   \   0000D8   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000DB   D0E0         POP     A
   \   0000DD   12....       LCALL   ?Subroutine2 & 0xFFFF
    340            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_3:
   \   0000E0   C0E0         PUSH    A
   \   0000E2   EE           MOV     A,R6
   \   0000E3   2416         ADD     A,#0x16
   \   0000E5   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000E8   D0E0         POP     A
   \   0000EA   12....       LCALL   ?Subroutine3 & 0xFFFF
    341            MSGpkt->correlation = sig->correlation;
   \                     ??CrossCallReturnLabel_5:
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   C0E0         PUSH    A
   \   0000F0   EE           MOV     A,R6
   \   0000F1   2417         ADD     A,#0x17
   \   0000F3   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000F6   D0E0         POP     A
   \   0000F8   12....       LCALL   ?Subroutine3 & 0xFFFF
    342            MSGpkt->rssi = sig->rssi;
   \                     ??CrossCallReturnLabel_6:
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   C0E0         PUSH    A
   \   0000FF   EE           MOV     A,R6
   \   000100   2418         ADD     A,#0x18
   \   000102   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000105   D0E0         POP     A
   \   000107   F0           MOVX    @DPTR,A
    343            MSGpkt->SecurityUse = SecurityUse;
   \   000108   EE           MOV     A,R6
   \   000109   2419         ADD     A,#0x19
   \   00010B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00010E   E5..         MOV     A,?V0 + 8
   \   000110   F0           MOVX    @DPTR,A
    344            MSGpkt->timestamp = timestamp;
   \   000111   EE           MOV     A,R6
   \   000112   241A         ADD     A,#0x1a
   \   000114   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000117   78..         MOV     R0,#?V0 + 4
   \   000119   12....       LCALL   ?L_MOV_TO_X
    345            MSGpkt->macDestAddr = aff->macDestAddr;
   \   00011C   85..82       MOV     DPL,?V0 + 0
   \   00011F   85..83       MOV     DPH,?V0 + 1
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000127   EE           MOV     A,R6
   \   000128   2412         ADD     A,#0x12
   \   00012A   12....       LCALL   ?Subroutine1 & 0xFFFF
    346            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_54:
   \   00012D   741C         MOV     A,#0x1c
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000135   EE           MOV     A,R6
   \   000136   2410         ADD     A,#0x10
   \   000138   12....       LCALL   ?Subroutine1 & 0xFFFF
    347            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_55:
   \   00013B   EE           MOV     A,R6
   \   00013C   241E         ADD     A,#0x1e
   \   00013E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000141   E4           CLR     A
   \   000142   F0           MOVX    @DPTR,A
    348            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000143   85..82       MOV     DPL,?V0 + 10
   \   000146   85..83       MOV     DPH,?V0 + 11
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   FC           MOV     R4,A
   \   00014B   7D00         MOV     R5,#0x0
   \   00014D   EE           MOV     A,R6
   \   00014E   241F         ADD     A,#0x1f
   \   000150   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000153   EC           MOV     A,R4
   \   000154   F0           MOVX    @DPTR,A
   \   000155   A3           INC     DPTR
   \   000156   E4           CLR     A
   \   000157   F0           MOVX    @DPTR,A
    349          
    350            if ( MSGpkt->cmd.DataLength )
   \   000158   EE           MOV     A,R6
   \   000159   2421         ADD     A,#0x21
   \   00015B   F8           MOV     R0,A
   \   00015C   EF           MOV     A,R7
   \   00015D   3400         ADDC    A,#0x0
   \   00015F   F9           MOV     R1,A
   \   000160   E8           MOV     A,R0
   \   000161   FA           MOV     R2,A
   \   000162   E9           MOV     A,R1
   \   000163   FB           MOV     R3,A
   \   000164   EC           MOV     A,R4
   \   000165   7001         JNZ     ??afBuildMSGIncoming_1
   \   000167   E4           CLR     A
   \                     ??afBuildMSGIncoming_1:
   \   000168   602E         JZ      ??afBuildMSGIncoming_2
    351            {
    352              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   00016A   EE           MOV     A,R6
   \   00016B   2423         ADD     A,#0x23
   \   00016D   08           INC     R0
   \   00016E   08           INC     R0
   \   00016F   EF           MOV     A,R7
   \   000170   3400         ADDC    A,#0x0
   \   000172   F9           MOV     R1,A
   \   000173   8A82         MOV     DPL,R2
   \   000175   8B83         MOV     DPH,R3
   \   000177   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    353              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_49:
   \   00017A                ; Setup parameters for call to function osal_memcpy
   \   00017A   85....       MOV     ?V0 + 0,?V0 + 14
   \   00017D   85....       MOV     ?V0 + 1,?V0 + 15
   \   000180   8D..         MOV     ?V0 + 2,R5
   \   000182   78..         MOV     R0,#?V0 + 0
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000187   8A82         MOV     DPL,R2
   \   000189   8B83         MOV     DPH,R3
   \   00018B   12....       LCALL   ?Subroutine15 & 0xFFFF
    354            }
   \                     ??CrossCallReturnLabel_31:
   \   00018E   12....       LCALL   ??osal_memcpy?relay
   \   000191   7403         MOV     A,#0x3
   \   000193   12....       LCALL   ?DEALLOC_XSTACK8
   \   000196   8008         SJMP    ??afBuildMSGIncoming_3
    355            else
    356            {
    357              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_2:
   \   000198   8A82         MOV     DPL,R2
   \   00019A   8B83         MOV     DPH,R3
   \   00019C   E4           CLR     A
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E   A3           INC     DPTR
   \   00019F   F0           MOVX    @DPTR,A
    358            }
    359          
    360          #if defined ( MT_AF_CB_FUNC )
    361            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    362            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    363            {
    364              MT_AfIncomingMsg( (void *)MSGpkt );
    365              // Release the memory.
    366              osal_msg_deallocate( (void *)MSGpkt );
    367            }
    368            else
    369          #endif
    370            {
    371              // Send message through task message.
    372              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_3:
   \   0001A0                ; Setup parameters for call to function osal_msg_send
   \   0001A0   EE           MOV     A,R6
   \   0001A1   FA           MOV     R2,A
   \   0001A2   EF           MOV     A,R7
   \   0001A3   FB           MOV     R3,A
   \   0001A4   85..82       MOV     DPL,?XSP + 0
   \   0001A7   85..83       MOV     DPH,?XSP + 1
   \   0001AA   12....       LCALL   ?Subroutine7 & 0xFFFF
    373            }
   \                     ??CrossCallReturnLabel_14:
   \   0001AD   12....       LCALL   ?Subroutine5 & 0xFFFF
    374          }
   \                     ??CrossCallReturnLabel_10:
   \   0001B0   02....       LJMP    ?Subroutine26 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine29_0
   \   000007                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    375          
    376          /*********************************************************************
    377           * @fn      AF_DataRequest
    378           *
    379           * @brief   Common functionality for invoking APSDE_DataReq() for both
    380           *          SendMulti and MSG-Send.
    381           *
    382           * input parameters
    383           *
    384           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    385           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    386           * @param   cID - A valid cluster ID as specified by the Profile.
    387           * @param   len - Number of bytes of data pointed to by next param.
    388           * @param  *buf - A pointer to the data bytes to send.
    389           * @param  *transID - A pointer to a byte which can be modified and which will
    390           *                    be used as the transaction sequence number of the msg.
    391           * @param   options - Valid bit mask of Tx options.
    392           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    393           *
    394           * output parameters
    395           *
    396           * @param  *transID - Incremented by one if the return value is success.
    397           *
    398           * @return  afStatus_t - See previous definition of afStatus_... types.
    399           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    400          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    402                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    403                                     uint8 options, uint8 radius )
    404          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   89..         MOV     ?V0 + 6,R1
   \   000014   7434         MOV     A,#0x34
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 10,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 11,A
   \   000020   7436         MOV     A,#0x36
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 8,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 9,A
   \   00002C   7438         MOV     A,#0x38
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 12,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 13,A
   \   000038   743A         MOV     A,#0x3a
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V0 + 3,A
   \   000044   743C         MOV     A,#0x3c
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 7,A
    405            pDescCB pfnDescCB;
    406            ZStatus_t stat;
    407            APSDE_DataReq_t req;
    408            afDataReqMTU_t mtu;
    409          
    410            // Verify source end point
    411            if ( srcEP == NULL )
   \   00004C   EC           MOV     A,R4
   \   00004D   7001         JNZ     ??AF_DataRequest_0
   \   00004F   ED           MOV     A,R5
   \                     ??AF_DataRequest_0:
   \   000050   7005         JNZ     ??AF_DataRequest_1
    412            {
    413              return afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_2:
   \   000052   7902         MOV     R1,#0x2
   \   000054   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    414            }
    415          
    416          #if !defined( REFLECTOR )
    417            if ( dstAddr->addrMode == afAddrNotPresent )
    418            {
    419              return afStatus_INVALID_PARAMETER;
    420            }
    421          #endif
    422          
    423            // Validate broadcasting
    424            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    425                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000057   EE           MOV     A,R6
   \   000058   2408         ADD     A,#0x8
   \   00005A   F5..         MOV     ?V0 + 4,A
   \   00005C   EF           MOV     A,R7
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F5..         MOV     ?V0 + 5,A
   \   000061   85..82       MOV     DPL,?V0 + 4
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7402         MOV     A,#0x2
   \   00006A   6A           XRL     A,R2
   \   00006B   6005         JZ      ??AF_DataRequest_4
   \   00006D   740F         MOV     A,#0xf
   \   00006F   6A           XRL     A,R2
   \   000070   7025         JNZ     ??AF_DataRequest_5
    426            {
    427              // Check for valid broadcast values
    428              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000072                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000079   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00007C   E9           MOV     A,R1
   \   00007D   600B         JZ      ??AF_DataRequest_6
    429              {
    430                // Force mode to broadcast
    431                dstAddr->addrMode = afAddrBroadcast;
   \   00007F   740F         MOV     A,#0xf
   \   000081   85..82       MOV     DPL,?V0 + 4
   \   000084   85..83       MOV     DPH,?V0 + 5
   \   000087   F0           MOVX    @DPTR,A
   \   000088   801A         SJMP    ??AF_DataRequest_7
    432              }
    433              else
    434              {
    435                // Address is not a valid broadcast type
    436                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_6:
   \   00008A   85..82       MOV     DPL,?V0 + 4
   \   00008D   85..83       MOV     DPH,?V0 + 5
   \   000090   E0           MOVX    A,@DPTR
   \   000091   640F         XRL     A,#0xf
   \   000093   700F         JNZ     ??AF_DataRequest_7
   \   000095   80BB         SJMP    ??AF_DataRequest_2
    437                {
    438                  return afStatus_INVALID_PARAMETER;
    439                }
    440              }
    441            }
    442            else if ( dstAddr->addrMode != afAddr64Bit &&
    443                      dstAddr->addrMode != afAddrGroup &&
    444                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_5:
   \   000097   7403         MOV     A,#0x3
   \   000099   6A           XRL     A,R2
   \   00009A   6008         JZ      ??AF_DataRequest_7
   \   00009C   7401         MOV     A,#0x1
   \   00009E   6A           XRL     A,R2
   \   00009F   6003         JZ      ??AF_DataRequest_7
   \   0000A1   EA           MOV     A,R2
   \   0000A2   70AE         JNZ     ??AF_DataRequest_2
    445            {
    446              return afStatus_INVALID_PARAMETER;
    447            }
    448            
    449            // Set destination address
    450            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   740A         MOV     A,#0xa
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   D0E0         POP     A
   \   0000AE   F0           MOVX    @DPTR,A
    451            if ( dstAddr->addrMode == afAddr64Bit )
   \   0000AF   85..82       MOV     DPL,?V0 + 4
   \   0000B2   85..83       MOV     DPH,?V0 + 5
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   6403         XRL     A,#0x3
   \   0000B8   7012         JNZ     ??AF_DataRequest_8
    452              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000BA                ; Setup parameters for call to function sAddrExtCpy
   \   0000BA   EE           MOV     A,R6
   \   0000BB   FC           MOV     R4,A
   \   0000BC   EF           MOV     A,R7
   \   0000BD   FD           MOV     R5,A
   \   0000BE   7402         MOV     A,#0x2
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   AA82         MOV     R2,DPL
   \   0000C5   AB83         MOV     R3,DPH
   \   0000C7   12....       LCALL   ??sAddrExtCpy?relay
   \   0000CA   800F         SJMP    ??CrossCallReturnLabel_50
    453            else
    454              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    455            
    456            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_50:
   \   0000DB   7411         MOV     A,#0x11
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E4           CLR     A
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   F0           MOVX    @DPTR,A
    457          
    458            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000E4   90....       MOV     DPTR,#epList
   \   0000E7   8002         SJMP    ??AF_DataRequest_9
   \                     ??AF_DataRequest_10:
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \                     ??AF_DataRequest_9:
   \   0000EB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000EE   7001         JNZ     ??AF_DataRequest_11
   \   0000F0   E9           MOV     A,R1
   \                     ??AF_DataRequest_11:
   \   0000F1   604A         JZ      ??AF_DataRequest_12
   \   0000F3   8882         MOV     DPL,R0
   \   0000F5   8983         MOV     DPH,R1
   \   0000F7   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000FA   E5..         MOV     A,?V0 + 0
   \   0000FC   6A           XRL     A,R2
   \   0000FD   7003         JNZ     ??AF_DataRequest_13
   \   0000FF   E5..         MOV     A,?V0 + 1
   \   000101   6B           XRL     A,R3
   \                     ??AF_DataRequest_13:
   \   000102   8882         MOV     DPL,R0
   \   000104   8983         MOV     DPH,R1
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   70DE         JNZ     ??AF_DataRequest_10
   \   00010B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00010E   FC           MOV     R4,A
   \   00010F   E9           MOV     A,R1
   \   000110   FD           MOV     R5,A
   \   000111   EC           MOV     A,R4
   \   000112   7001         JNZ     ??AF_DataRequest_14
   \   000114   ED           MOV     A,R5
   \                     ??AF_DataRequest_14:
   \   000115   6026         JZ      ??AF_DataRequest_12
    459            {
    460              uint16 *pID = (uint16 *)(pfnDescCB(
    461                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000117                ; Setup parameters for indirect call
   \   000117   85..82       MOV     DPL,?V0 + 0
   \   00011A   85..83       MOV     DPH,?V0 + 1
   \   00011D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000120   12....       LCALL   ?CALL_IND
    462              if ( pID )
   \   000123   EA           MOV     A,R2
   \   000124   7001         JNZ     ??AF_DataRequest_15
   \   000126   EB           MOV     A,R3
   \                     ??AF_DataRequest_15:
   \   000127   602E         JZ      ??CrossCallReturnLabel_52
    463              {
    464                req.profileID = *pID;
   \   000129   8A82         MOV     DPL,R2
   \   00012B   8B83         MOV     DPH,R3
   \   00012D   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000130   7411         MOV     A,#0x11
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    465                osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_51:
   \   000138                ; Setup parameters for call to function osal_mem_free
   \   000138   12....       LCALL   ??osal_mem_free?relay
   \   00013B   801A         SJMP    ??CrossCallReturnLabel_52
    466              }
    467            }
    468            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   00013D   85..82       MOV     DPL,?V0 + 0
   \   000140   85..83       MOV     DPH,?V0 + 1
   \   000143   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000146   7002         JNZ     ??AF_DataRequest_16
   \   000148   E583         MOV     A,DPH
   \                     ??AF_DataRequest_16:
   \   00014A   600B         JZ      ??CrossCallReturnLabel_52
    469            {
    470              req.profileID = srcEP->simpleDesc->AppProfId;
   \   00014C   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    471            }
   \                     ??CrossCallReturnLabel_75:
   \   00014F   7411         MOV     A,#0x11
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    472          
    473            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_52:
   \   000157   7417         MOV     A,#0x17
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E4           CLR     A
   \   00015D   F0           MOVX    @DPTR,A
   \   00015E   A3           INC     DPTR
   \   00015F   F0           MOVX    @DPTR,A
    474          
    475            if ( ( options & AF_ACK_REQUEST              ) &&
    476                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    477                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000160   E5..         MOV     A,?V0 + 6
   \   000162   A2E4         MOV     C,0xE0 /* A   */.4
   \   000164   501C         JNC     ??AF_DataRequest_17
   \   000166   740A         MOV     A,#0xa
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   FA           MOV     R2,A
   \   00016D   740F         MOV     A,#0xf
   \   00016F   6A           XRL     A,R2
   \   000170   6010         JZ      ??AF_DataRequest_17
   \   000172   7401         MOV     A,#0x1
   \   000174   6A           XRL     A,R2
   \   000175   600B         JZ      ??AF_DataRequest_17
    478            {
    479              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000177   7417         MOV     A,#0x17
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   7404         MOV     A,#0x4
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   A3           INC     DPTR
   \   000180   E4           CLR     A
   \   000181   F0           MOVX    @DPTR,A
    480            }
    481          
    482            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_17:
   \   000182   E5..         MOV     A,?V0 + 6
   \   000184   A2E7         MOV     C,0xE0 /* A   */.7
   \   000186   500C         JNC     ??AF_DataRequest_18
    483            {
    484              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000188   7417         MOV     A,#0x17
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   4410         ORL     A,#0x10
   \   000190   F0           MOVX    @DPTR,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F0           MOVX    @DPTR,A
    485            }
    486          
    487            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_18:
   \   000194   E5..         MOV     A,?V0 + 6
   \   000196   A2E6         MOV     C,0xE0 /* A   */.6
   \   000198   5015         JNC     ??AF_DataRequest_19
    488            {
    489              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   00019A   7417         MOV     A,#0x17
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   4401         ORL     A,#0x1
   \   0001A2   F0           MOVX    @DPTR,A
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   F0           MOVX    @DPTR,A
    490              mtu.aps.secure = TRUE;
   \   0001A6   7401         MOV     A,#0x1
   \   0001A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AB   7401         MOV     A,#0x1
   \   0001AD   8006         SJMP    ??AF_DataRequest_20
    491            }
    492            else
    493            {
    494              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001AF   7401         MOV     A,#0x1
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   E4           CLR     A
   \                     ??AF_DataRequest_20:
   \   0001B5   F0           MOVX    @DPTR,A
    495            }
    496          
    497            mtu.kvp = FALSE;
   \   0001B6   E4           CLR     A
   \   0001B7   85..82       MOV     DPL,?XSP + 0
   \   0001BA   85..83       MOV     DPH,?XSP + 1
   \   0001BD   12....       LCALL   ?Subroutine2 & 0xFFFF
    498          
    499            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_4:
   \   0001C0   C0E0         PUSH    A
   \   0001C2   7419         MOV     A,#0x19
   \   0001C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C7   D0E0         POP     A
   \   0001C9   F0           MOVX    @DPTR,A
    500            req.srcEP         = srcEP->endPoint;
   \   0001CA   85..82       MOV     DPL,?V0 + 0
   \   0001CD   85..83       MOV     DPH,?V0 + 1
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   C0E0         PUSH    A
   \   0001D3   740B         MOV     A,#0xb
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   D0E0         POP     A
   \   0001DA   F0           MOVX    @DPTR,A
    501            req.dstEP         = dstAddr->endPoint;
   \   0001DB   8E82         MOV     DPL,R6
   \   0001DD   8F83         MOV     DPH,R7
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   A3           INC     DPTR
   \   0001E2   A3           INC     DPTR
   \   0001E3   A3           INC     DPTR
   \   0001E4   A3           INC     DPTR
   \   0001E5   A3           INC     DPTR
   \   0001E6   A3           INC     DPTR
   \   0001E7   A3           INC     DPTR
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   C0E0         PUSH    A
   \   0001EB   740C         MOV     A,#0xc
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   D0E0         POP     A
   \   0001F2   F0           MOVX    @DPTR,A
    502            req.clusterID     = cID;
   \   0001F3   740F         MOV     A,#0xf
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   E5..         MOV     A,?V0 + 10
   \   0001FA   F0           MOVX    @DPTR,A
   \   0001FB   A3           INC     DPTR
   \   0001FC   E5..         MOV     A,?V0 + 11
   \   0001FE   F0           MOVX    @DPTR,A
    503            req.asduLen       = len;
   \   0001FF   7413         MOV     A,#0x13
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   E5..         MOV     A,?V0 + 8
   \   000206   F0           MOVX    @DPTR,A
   \   000207   A3           INC     DPTR
   \   000208   E5..         MOV     A,?V0 + 9
   \   00020A   F0           MOVX    @DPTR,A
    504            req.asdu          = buf;
   \   00020B   7415         MOV     A,#0x15
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   E5..         MOV     A,?V0 + 12
   \   000212   F0           MOVX    @DPTR,A
   \   000213   A3           INC     DPTR
   \   000214   E5..         MOV     A,?V0 + 13
   \   000216   F0           MOVX    @DPTR,A
    505            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \   000217   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   C0E0         PUSH    A
   \   00021D   741A         MOV     A,#0x1a
   \   00021F   12....       LCALL   ?XSTACK_DISP0_8
   \   000222   D0E0         POP     A
   \   000224   F0           MOVX    @DPTR,A
    506            req.radiusCounter = radius;
   \   000225   741B         MOV     A,#0x1b
   \   000227   12....       LCALL   ?XSTACK_DISP0_8
   \   00022A   E5..         MOV     A,?V0 + 7
   \   00022C   F0           MOVX    @DPTR,A
    507          #if defined ( INTER_PAN )
    508            req.dstPanId      = dstAddr->panId;
    509          
    510            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    511            {
    512              if ( len > INTERP_DataReqMTU() )
    513              {
    514                stat = afStatus_INVALID_PARAMETER;
    515              }
    516              else
    517              {
    518                stat = INTERP_DataReq( &req );
    519              }
    520            }
    521            else
    522          #endif // INTER_PAN
    523            {
    524              if (len > afDataReqMTU( &mtu ) )
   \   00022D                ; Setup parameters for call to function afDataReqMTU
   \   00022D   85..82       MOV     DPL,?XSP + 0
   \   000230   85..83       MOV     DPH,?XSP + 1
   \   000233   AA82         MOV     R2,DPL
   \   000235   AB83         MOV     R3,DPH
   \   000237   12....       LCALL   ??afDataReqMTU?relay
   \   00023A   E9           MOV     A,R1
   \   00023B   C3           CLR     C
   \   00023C   95..         SUBB    A,?V0 + 8
   \   00023E   E4           CLR     A
   \   00023F   95..         SUBB    A,?V0 + 9
   \   000241   5022         JNC     ??AF_DataRequest_21
    525              {
    526                if (apsfSendFragmented)
   \   000243   90....       MOV     DPTR,#apsfSendFragmented
   \   000246   E0           MOVX    A,@DPTR
   \   000247   7002         JNZ     ??AF_DataRequest_22
   \   000249   A3           INC     DPTR
   \   00024A   E0           MOVX    A,@DPTR
   \                     ??AF_DataRequest_22:
   \   00024B   6014         JZ      ??AF_DataRequest_23
    527                {
    528                  stat = (*apsfSendFragmented)( &req );
   \   00024D                ; Setup parameters for indirect call
   \   00024D   7402         MOV     A,#0x2
   \   00024F   12....       LCALL   ?XSTACK_DISP0_8
   \   000252   AA82         MOV     R2,DPL
   \   000254   AB83         MOV     R3,DPH
   \   000256   90....       MOV     DPTR,#apsfSendFragmented
   \   000259   12....       LCALL   ?Subroutine7 & 0xFFFF
    529                }
   \                     ??CrossCallReturnLabel_15:
   \   00025C   12....       LCALL   ?CALL_IND
   \   00025F   8010         SJMP    ??AF_DataRequest_24
    530                else
    531                {
    532                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_23:
   \   000261   7E02         MOV     R6,#0x2
   \   000263   800E         SJMP    ??AF_DataRequest_25
    533                }
    534              }
    535              else
    536              {
    537                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_21:
   \   000265                ; Setup parameters for call to function APSDE_DataReq
   \   000265   7402         MOV     A,#0x2
   \   000267   12....       LCALL   ?XSTACK_DISP0_8
   \   00026A   AA82         MOV     R2,DPL
   \   00026C   AB83         MOV     R3,DPH
   \   00026E   12....       LCALL   ??APSDE_DataReq?relay
   \                     ??AF_DataRequest_24:
   \   000271   E9           MOV     A,R1
   \   000272   FE           MOV     R6,A
    538              }
    539            }
    540          
    541            /*
    542             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    543             * get added to the NWK databufs. So it will not go OTA and it will not get
    544             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    545             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    546             * message with the first in line TransSeqNumber, even on a multi message.
    547             * Also note that a reflected msg will not have its confirmation generated
    548             * here.
    549             */
    550            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    551                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_25:
   \   000273   740A         MOV     A,#0xa
   \   000275   12....       LCALL   ?XSTACK_DISP0_8
   \   000278   E0           MOVX    A,@DPTR
   \   000279   6402         XRL     A,#0x2
   \   00027B   702E         JNZ     ??AF_DataRequest_26
   \   00027D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00027D   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000280   8A..         MOV     ?V0 + 4,R2
   \   000282   8B..         MOV     ?V0 + 5,R3
   \   000284   A8..         MOV     R0,?V0 + 4
   \   000286   A9..         MOV     R1,?V0 + 5
   \   000288   7402         MOV     A,#0x2
   \   00028A   12....       LCALL   ?XSTACK_DISP0_8
   \   00028D   E0           MOVX    A,@DPTR
   \   00028E   68           XRL     A,R0
   \   00028F   7003         JNZ     ??AF_DataRequest_27
   \   000291   A3           INC     DPTR
   \   000292   E0           MOVX    A,@DPTR
   \   000293   69           XRL     A,R1
   \                     ??AF_DataRequest_27:
   \   000294   7015         JNZ     ??AF_DataRequest_26
    552            {
    553              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000296                ; Setup parameters for call to function afDataConfirm
   \   000296   EE           MOV     A,R6
   \   000297   FB           MOV     R3,A
   \   000298   85..82       MOV     DPL,?V0 + 2
   \   00029B   85..83       MOV     DPH,?V0 + 3
   \   00029E   E0           MOVX    A,@DPTR
   \   00029F   FA           MOV     R2,A
   \   0002A0   85..82       MOV     DPL,?V0 + 0
   \   0002A3   85..83       MOV     DPH,?V0 + 1
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   F9           MOV     R1,A
   \   0002A8   12....       LCALL   ??afDataConfirm?relay
    554            }
    555          
    556            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_26:
   \   0002AB   EE           MOV     A,R6
   \   0002AC   7009         JNZ     ??AF_DataRequest_28
    557            {
    558              (*transID)++;
   \   0002AE   85..82       MOV     DPL,?V0 + 2
   \   0002B1   85..83       MOV     DPH,?V0 + 3
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   04           INC     A
   \   0002B6   F0           MOVX    @DPTR,A
    559            }
    560          
    561            return (afStatus_t)stat;
   \                     ??AF_DataRequest_28:
   \   0002B7   EE           MOV     A,R6
   \   0002B8   F9           MOV     R1,A
   \                     ??AF_DataRequest_3:
   \   0002B9   741E         MOV     A,#0x1e
   \   0002BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002BE   7F0E         MOV     R7,#0xe
   \   0002C0   02....       LJMP    ?BANKED_LEAVE_XDATA
    562          }
    563          
    564          #if defined ( ZIGBEE_SOURCE_ROUTING )
    565          /*********************************************************************
    566           * @fn      AF_DataRequestSrcRtg
    567           *
    568           * @brief   Common functionality for invoking APSDE_DataReq() for both
    569           *          SendMulti and MSG-Send.
    570           *
    571           * input parameters
    572           *
    573           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    574           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    575           * @param   cID - A valid cluster ID as specified by the Profile.
    576           * @param   len - Number of bytes of data pointed to by next param.
    577           * @param  *buf - A pointer to the data bytes to send.
    578           * @param  *transID - A pointer to a byte which can be modified and which will
    579           *                    be used as the transaction sequence number of the msg.
    580           * @param   options - Valid bit mask of Tx options.
    581           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    582           * @param   relayCnt - Number of devices in the relay list
    583           * @param   pRelayList - Pointer to the relay list
    584           *
    585           * output parameters
    586           *
    587           * @param  *transID - Incremented by one if the return value is success.
    588           *
    589           * @return  afStatus_t - See previous definition of afStatus_... types.
    590           */
    591          
    592          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
    593                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    594                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    595          {
    596            uint8 status;
    597            
    598            /* Add the source route to the source routing table */
    599            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    600                                                   pRelayList );
    601          
    602            if( status == RTG_SUCCESS)
    603            {
    604              /* Call AF_DataRequest to send the data */
    605              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
    606            }
    607            else if( status == RTG_INVALID_PATH )
    608            {
    609              /* The source route relay count is exceeding the network limit */
    610              status = afStatus_INVALID_PARAMETER;
    611            }
    612            else
    613            {
    614              /* The guaranteed adding entry fails due to memory failure */
    615              status = afStatus_MEM_FAIL;
    616            }
    617            return status;
    618          }
    619          
    620          #endif
    621          
    622          /*********************************************************************
    623           * @fn      afFindEndPointDescList
    624           *
    625           * @brief   Find the endpoint description entry from the endpoint
    626           *          number.
    627           *
    628           * @param   EndPoint - Application Endpoint to look for
    629           *
    630           * @return  the address to the endpoint/interface description entry
    631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    632          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    633          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    634            epList_t *epSearch;
    635          
    636            // Start at the beginning
    637            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8009         SJMP    ??afFindEndPointDescList_0
    638          
    639            // Look through the list until the end
    640            while ( epSearch )
    641            {
    642              // Is there a match?
    643              if ( epSearch->epDesc->endPoint == EndPoint )
    644              {
    645                return ( epSearch );
    646              }
    647              else
    648                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000015   EA           MOV     A,R2
   \   000016   7001         JNZ     ??afFindEndPointDescList_2
   \   000018   EB           MOV     A,R3
   \                     ??afFindEndPointDescList_2:
   \   000019   600C         JZ      ??afFindEndPointDescList_3
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000022   69           XRL     A,R1
   \   000023   70E4         JNZ     ??afFindEndPointDescList_1
   \   000025   8004         SJMP    ??afFindEndPointDescList_4
    649            }
    650          
    651            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_3:
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDescList_4:
   \   00002B   02....       LJMP    ?Subroutine23 & 0xFFFF
    652          }
    653          
    654          /*********************************************************************
    655           * @fn      afFindEndPointDesc
    656           *
    657           * @brief   Find the endpoint description entry from the endpoint
    658           *          number.
    659           *
    660           * @param   EndPoint - Application Endpoint to look for
    661           *
    662           * @return  the address to the endpoint/interface description entry
    663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    665          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    666            epList_t *epSearch;
    667          
    668            // Look for the endpoint
    669            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
    670          
    671            if ( epSearch )
   \                     ??CrossCallReturnLabel_41:
   \   000008   7002         JNZ     ??afFindEndPointDesc_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afFindEndPointDesc_0:
   \   00000C   6005         JZ      ??afFindEndPointDesc_1
    672              return ( epSearch->epDesc );
   \   00000E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000011   8004         SJMP    ??afFindEndPointDesc_2
    673            else
    674              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_1:
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_2:
   \   000017   02....       LJMP    ?Subroutine25 & 0xFFFF
    675          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??afFindEndPointDescList?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET
    676          
    677          /*********************************************************************
    678           * @fn      afFindSimpleDesc
    679           *
    680           * @brief   Find the Simple Descriptor from the endpoint number.
    681           *
    682           * @param   EP - Application Endpoint to look for.
    683           *
    684           * @return  Non-zero to indicate that the descriptor memory must be freed.
    685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    687          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    688            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000E   8A..         MOV     ?V0 + 2,R2
   \   000010   8B..         MOV     ?V0 + 3,R3
   \   000012   AC..         MOV     R4,?V0 + 2
   \   000014   AD..         MOV     R5,?V0 + 3
    689            byte rtrn = FALSE;
   \   000016   7900         MOV     R1,#0x0
    690          
    691            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   7001         JNZ     ??afFindSimpleDesc_0
   \   00001B   ED           MOV     A,R5
   \                     ??afFindSimpleDesc_0:
   \   00001C   6039         JZ      ??afFindSimpleDesc_1
    692            {
    693              if ( epItem->pfnDescCB )
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000025   E582         MOV     A,DPL
   \   000027   7002         JNZ     ??afFindSimpleDesc_2
   \   000029   E583         MOV     A,DPH
   \                     ??afFindSimpleDesc_2:
   \   00002B   6013         JZ      ??afFindSimpleDesc_3
    694              {
    695                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   AA..         MOV     R2,?V0 + 0
   \   00002F   09           INC     R1
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   EA           MOV     A,R2
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   EB           MOV     A,R3
   \   00003B   F0           MOVX    @DPTR,A
    696                rtrn = TRUE;
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   801F         SJMP    ??afFindSimpleDesc_4
    697              }
    698              else
    699              {
    700                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_3:
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   12....       LCALL   ?Subroutine7 & 0xFFFF
    701              }
    702            }
   \                     ??CrossCallReturnLabel_16:
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   EA           MOV     A,R2
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EB           MOV     A,R3
   \   000055   8007         SJMP    ??afFindSimpleDesc_5
    703            else
    704            {
    705              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_1:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \                     ??afFindSimpleDesc_5:
   \   00005E   F0           MOVX    @DPTR,A
    706            }
    707          
    708            return rtrn;
   \                     ??afFindSimpleDesc_4:
   \   00005F   02....       LJMP    ?Subroutine24 & 0xFFFF
    709          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   22           RET
    710          
    711          /*********************************************************************
    712           * @fn      afGetDescCB
    713           *
    714           * @brief   Get the Descriptor callback function.
    715           *
    716           * @param   epDesc - pointer to the endpoint descriptor
    717           *
    718           * @return  function pointer or NULL
    719           */
    720          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    721          {
    722            epList_t *epSearch;
    723          
    724            // Start at the beginning
    725            epSearch = epList;
    726          
    727            // Look through the list until the end
    728            while ( epSearch )
    729            {
    730              // Is there a match?
    731              if ( epSearch->epDesc == epDesc )
    732              {
    733                return ( epSearch->pfnDescCB );
    734              }
    735              else
    736                epSearch = epSearch->nextDesc;  // Next entry
    737            }
    738          
    739            return ( (pDescCB)NULL );
    740          }
    741          
    742          /*********************************************************************
    743           * @fn      afDataReqMTU
    744           *
    745           * @brief   Get the Data Request MTU(Max Transport Unit).
    746           *
    747           * @param   fields - afDataReqMTU_t
    748           *
    749           * @return  uint8(MTU)
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    752          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    753            uint8 len;
    754            uint8 hdr;
    755          
    756            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    757            {
    758              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    759            }
    760            else
    761            {
    762              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    763            }
    764          
    765            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??APSDE_DataReqMTU?relay
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
    766          
    767            return len;
   \   000020                REQUIRE ?Subroutine27
   \   000020                ; // Fall through to label ?Subroutine27
    768          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    769          
    770          /*********************************************************************
    771           * @fn      afGetMatch
    772           *
    773           * @brief   Set the allow response flag.
    774           *
    775           * @param   ep - Application Endpoint to look for
    776           * @param   action - true - allow response, false - no response
    777           *
    778           * @return  TRUE allow responses, FALSE no response
    779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    780          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    781          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    782            epList_t *epSearch;
    783          
    784            // Look for the endpoint
    785            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
    786          
    787            if ( epSearch )
   \                     ??CrossCallReturnLabel_42:
   \   000008   7002         JNZ     ??afGetMatch_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afGetMatch_0:
   \   00000C   600B         JZ      ??afGetMatch_1
    788            {
    789              if ( epSearch->flags & eEP_AllowMatch )
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5004         JNC     ??afGetMatch_1
    790                return ( TRUE );
   \   000015   7901         MOV     R1,#0x1
   \   000017   8002         SJMP    ??afGetMatch_2
    791              else
    792                return ( FALSE );
   \                     ??afGetMatch_1:
   \   000019   7900         MOV     R1,#0x0
    793            }
   \                     ??afGetMatch_2:
   \   00001B                REQUIRE ?Subroutine25
   \   00001B                ; // Fall through to label ?Subroutine25
    794            else
    795              return ( FALSE );
    796          }
    797          
    798          /*********************************************************************
    799           * @fn      afSetMatch
    800           *
    801           * @brief   Set the allow response flag.
    802           *
    803           * @param   ep - Application Endpoint to look for
    804           * @param   action - true - allow response, false - no response
    805           *
    806           * @return  TRUE if success, FALSE if endpoint not found
    807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    809          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    810            epList_t *epSearch;
    811          
    812            // Look for the endpoint
    813            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
    814          
    815            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??afSetMatch_0
   \   000015   E9           MOV     A,R1
   \                     ??afSetMatch_0:
   \   000016   6019         JZ      ??afSetMatch_1
    816            {
    817              if ( action )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000021   EE           MOV     A,R6
   \   000022   6005         JZ      ??afSetMatch_2
    818              {
    819                epSearch->flags |= eEP_AllowMatch;
   \   000024   E0           MOVX    A,@DPTR
   \   000025   D2E0         SETB    0xE0 /* A   */.0
   \   000027   8003         SJMP    ??afSetMatch_3
    820              }
    821              else
    822              {
    823                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_2:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_3:
   \   00002C   F0           MOVX    @DPTR,A
    824              }
    825              return ( TRUE );
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   8002         SJMP    ??afSetMatch_4
    826            }
    827            else
    828              return ( FALSE );
   \                     ??afSetMatch_1:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afSetMatch_4:
   \   000033   80..         SJMP    ?Subroutine25
    829          }
    830          
    831          /*********************************************************************
    832           * @fn      afNumEndPoints
    833           *
    834           * @brief   Returns the number of endpoints defined (including 0)
    835           *
    836           * @param   none
    837           *
    838           * @return  number of endpoints
    839           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    840          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    841          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    842            epList_t *epSearch;
    843            byte endpoints;
    844          
    845            // Start at the beginning
    846            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
    847            endpoints = 0;
   \   00000E   7900         MOV     R1,#0x0
   \   000010   8006         SJMP    ??CrossCallReturnLabel_30
    848          
    849            while ( epSearch )
    850            {
    851              endpoints++;
   \                     ??afNumEndPoints_0:
   \   000012   09           INC     R1
    852              epSearch = epSearch->nextDesc;
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   12....       LCALL   ?Subroutine14 & 0xFFFF
    853            }
   \                     ??CrossCallReturnLabel_30:
   \   000018   E582         MOV     A,DPL
   \   00001A   7002         JNZ     ??afNumEndPoints_1
   \   00001C   E583         MOV     A,DPH
   \                     ??afNumEndPoints_1:
   \   00001E   70F2         JNZ     ??afNumEndPoints_0
    854          
    855            return ( endpoints );
   \   000020   02....       LJMP    ?Subroutine23 & 0xFFFF
    856          }
    857          
    858          /*********************************************************************
    859           * @fn      afEndPoints
    860           *
    861           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    862           *          Use afNumEndPoints to find out how big a buffer to supply.
    863           *
    864           * @param   epBuf - pointer to mem used
    865           *
    866           * @return  void
    867           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    868          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    869          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    870            epList_t *epSearch;
    871            byte endPoint;
    872          
    873            // Start at the beginning
    874            epSearch = epList;
   \   000005   90....       MOV     DPTR,#epList
   \   000008   8022         SJMP    ??afEndPoints_0
    875          
    876            while ( epSearch )
    877            {
    878              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000011   FE           MOV     R6,A
    879          
    880              if ( !skipZDO || endPoint != 0 )
   \   000012   E9           MOV     A,R1
   \   000013   6003         JZ      ??afEndPoints_2
   \   000015   EE           MOV     A,R6
   \   000016   600B         JZ      ??afEndPoints_3
    881                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000018   EE           MOV     A,R6
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
    882          
    883              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \                     ??afEndPoints_0:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FC           MOV     R4,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FD           MOV     R5,A
    884            }
   \   000031   EC           MOV     A,R4
   \   000032   7001         JNZ     ??afEndPoints_4
   \   000034   ED           MOV     A,R5
   \                     ??afEndPoints_4:
   \   000035   70D3         JNZ     ??afEndPoints_1
    885          }
   \   000037   02....       LJMP    ?Subroutine27 & 0xFFFF
    886          
    887          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    888          void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    889          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    890            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000005   EC           MOV     A,R4
   \   000006   2408         ADD     A,#0x8
   \   000008   F8           MOV     R0,A
   \   000009   ED           MOV     A,R5
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    891            if ( zAddr->addrMode == Addr64Bit )
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6403         XRL     A,#0x3
   \   000026   7005         JNZ     ??afCopyAddress_0
    892              osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000028                ; Setup parameters for call to function sAddrExtCpy
   \   000028   12....       LCALL   ??sAddrExtCpy?relay
   \   00002B   800E         SJMP    ??CrossCallReturnLabel_53
    893            else
    894              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   12....       LCALL   ??Subroutine29_0 & 0xFFFF
    895          }
   \                     ??CrossCallReturnLabel_53:
   \   00003B   02....       LJMP    ?Subroutine27 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDescList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
    896          
    897          /*********************************************************************
    898          *********************************************************************/
    899          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     AF_DataRequest                    1      0     61
       -> NLME_IsAddressBroadcast      0      0    104
       -> sAddrExtCpy                  0      0    104
       -> osal_mem_free                0      0    104
       -> afDataReqMTU                 0      0    104
       -> APSDE_DataReq                0      0    104
       -> NLME_GetShortAddr            0      0    104
       -> afDataConfirm                0      0    104
     afBuildMSGIncoming                1      0     65
       -> osal_msg_allocate            0      0     52
       -> afCopyAddress                0      0     52
       -> osal_memcpy                  0      0     58
       -> osal_msg_send                0      0     52
     afCopyAddress                     1      0     35
       -> sAddrExtCpy                  0      0     18
     afDataConfirm                     1      0     66
       -> afFindEndPointDesc           0      0     28
       -> osal_msg_allocate            0      0     28
       -> osal_msg_send                0      0     28
     afDataReqMTU                      0      0     61
       -> APSDE_DataReqMTU             0      0     18
     afEndPoints                       1      0      9
     afFindEndPointDesc                0      0     36
       -> afFindEndPointDescList       0      0     20
     afFindEndPointDescList            2      0     26
     afFindSimpleDesc                  0      0     12
       -> afFindEndPointDescList       0      0     24
     afGetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20
     afIncomingData                    0      0     44
       -> aps_FindGroupForEndpoint     0      0     52
       -> afFindEndPointDesc           0      0     52
       -> afFindEndPointDescList       0      0     52
       -> afFindEndPointDesc           0      0     52
       -> aps_FindGroupForEndpoint     0      0     52
       -> afFindEndPointDesc           0      0     52
       -> afFindEndPointDescList       0      0     52
       -> osal_mem_free                0      0     52
       -> afBuildMSGIncoming           0      0     72
     afInit                            2      0      0
     afNumEndPoints                    2      0      0
     afRegister                        0      0     10
       -> afFindEndPointDescList       0      0     20
       -> afRegisterExtended           0      0     20
     afRegisterExtended                1      0     22
       -> osal_mem_alloc               0      0     24
     afSetMatch                        0      0     10
       -> afFindEndPointDescList       0      0     20


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     epList                                            2
     device_manager                                   48
     afInit                                           11
     ?Subroutine23                                     7
     afRegisterExtended                              110
     ?Subroutine24                                     5
     ?Subroutine0                                      9
     ??Subroutine28_0                                  6
     ?Subroutine11                                     5
     ??Subroutine32_0                                  4
     afRegister                                       54
     ?Subroutine25                                     5
     afDataConfirm                                    78
     ?Subroutine5                                      9
     ?Subroutine22                                     9
     ?Subroutine21                                     5
     afIncomingData                                  385
     ?Subroutine26                                    10
     ?Subroutine18                                    13
     ?Subroutine13                                    14
     ?Subroutine4                                     20
     ?Subroutine10                                     8
     ?Subroutine20                                     3
     ?Subroutine16                                     9
     ?Subroutine8                                     10
     ?Subroutine12                                     7
     ??Subroutine31_0                                  1
     afBuildMSGIncoming                              435
     ?Subroutine9                                     11
     ?Subroutine3                                      9
     ?Subroutine7                                      4
     ?Subroutine2                                      9
     ?Subroutine1                                      7
     ??Subroutine29_0                                  6
     ?Subroutine15                                     6
     ?Subroutine6                                      4
     ?Subroutine17                                     3
     ??Subroutine30_0                                  5
     AF_DataRequestDiscoverRoute                       1
     AF_DataRequest                                  707
     afFindEndPointDescList                           46
     afFindEndPointDesc                               26
     ?Subroutine19                                    10
     afFindSimpleDesc                                 98
     ?Subroutine14                                    13
     afDataReqMTU                                     32
     ?Subroutine27                                     5
     afGetMatch                                       27
     afSetMatch                                       53
     afNumEndPoints                                   35
     afEndPoints                                      58
     afCopyAddress                                    62
     ?<Initializer for AF_DataRequestDiscoverRoute>    1
     ??afInit?relay                                    6
     ??afRegisterExtended?relay                        6
     ??afRegister?relay                                6
     ??afDataConfirm?relay                             6
     ??afIncomingData?relay                            6
     ??afBuildMSGIncoming?relay                        6
     ??AF_DataRequest?relay                            6
     ??afFindEndPointDescList?relay                    6
     ??afFindEndPointDesc?relay                        6
     ??afFindSimpleDesc?relay                          6
     ??afDataReqMTU?relay                              6
     ??afGetMatch?relay                                6
     ??afSetMatch?relay                                6
     ??afNumEndPoints?relay                            6
     ??afEndPoints?relay                               6
     ??afCopyAddress?relay                             6

 
 2 468 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    50 bytes in segment XDATA_Z
 
 2 565 bytes of CODE  memory
    51 bytes of XDATA memory

Errors: none
Warnings: none
