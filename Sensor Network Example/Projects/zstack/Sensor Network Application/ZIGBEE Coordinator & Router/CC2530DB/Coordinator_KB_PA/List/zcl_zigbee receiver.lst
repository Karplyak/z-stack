###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                19/Aug/2013  15:31:52 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c                #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c" -D CC2530 -D  #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\zcl_zigbee  #
#                          receiver.lst                                       #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\zcl_zigbee   #
#                          receiver.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Coordinator & Router\Source\zcl_zigbee receiver.c
      1          #include <stdio.h>
      2          #include <string.h>
      3          #include "ZComDef.h"
      4          #include "OSAL.h"
      5          #include "AF.h"
      6          #include "ZDApp.h"
      7          
      8          /* ZCL */
      9          #include "zcl.h"
     10          #include "zcl_general.h"
     11          #include "zcl_ha.h"
     12          #include "zcl_zigbee receiver.h"
     13          
     14          /* HAL */
     15          #include "onboard.h"
     16          #include "hal_lcd.h"
     17          #include "hal_led.h"
     18          #include "hal_timer.h"
     19          #include "hal_uart.h"
     20          #include "hal_key.h"
     21          #include "hal_keypad.h"
     22          
     23          /* MAC_high-level */
     24          #include "mac_high_level.h"
     25          
     26          /* MT */
     27          #include "MT_UART.h"
     28          #include "MT.h"
     29          #include "ZComDef.h"
     30          
     31          #define TRANSMITAPP_MAX_DATA_LEN    102
     32          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     33          uint8 send_msg_counter = 0;
   \                     send_msg_counter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     34          byte zclZigbeeReceiver_TaskID; // The zigbee task_ID
   \                     zclZigbeeReceiver_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     35          byte ZDO_MSG_SEND_ID; // The zigbee task_ID
   \                     ZDO_MSG_SEND_ID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     36          
     37          // The UART transmit variable and array, the transmit data length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38          uint8 len; 
   \                     len:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     39          // Transmit message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     41          // The coordinator send to device message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     42          byte UartTransmit_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     UartTransmit_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     43          // Receive the UART command

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     44          uint8 uart_recv[TRANSMITAPP_MAX_DATA_LEN]; 
   \                     uart_recv:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     45          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     46          afAddrType_t zclZigbeeRecv_DstAddr;  // AF address type
   \                     zclZigbeeRecv_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     47          aps_Group_t zclZigbeeRecv_Group;
   \                     zclZigbeeRecv_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     48          
     49          #define ZCLZIGBEERECV_BINDINGLIST       2
     50          
     51          static cId_t bindingInClusters[ZCLZIGBEERECV_BINDINGLIST] =
     52          {
     53            ZCL_CLUSTER_ID_GEN_ON_OFF,
     54            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
     55          };
     56          
     57          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
     58          static endPointDesc_t zigbeeReceiver_TestEp =
   \                     zigbeeReceiver_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for zigbeeReceiver_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
     59          {
     60            20,                                 // Test endpoint
     61            &zclZigbeeReceiver_TaskID,
     62            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
     63            (afNetworkLatencyReq_t)0            // No Network Latency req
     64          };
     65          
     66          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys );
     67          static void zclZigbeeReceiver_BasicResetCB( void );
     68          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd );
     69          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
     70          static void zclZigbeeReceiver_OnOffCB( uint8 cmd );
     71          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void );
     72          
     73          void zclUARTMsg_CallBack(uint8 port, uint8 event); // The UART Message callback
     74          void zclUartReceiver( void ); // The coordinator receive command function
     75          
     76          // Functions to process ZCL Foundation incoming Command/Response messages 
     77          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *msg );
     78          #ifdef ZCL_READ
     79            static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
     80          #endif
     81          #ifdef ZCL_WRITE
     82            static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
     83          #endif
     84            static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
     85          #ifdef ZCL_DISCOVER
     86            static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
     87          #endif
     88          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          static zclGeneral_AppCallbacks_t zclZigbeeReceiver_CmdCallbacks =
   \                     zclZigbeeReceiver_CmdCallbacks:
   \   000000                DS 30
   \   00001E                REQUIRE `?<Initializer for zclZigbeeReceiver_CmdCallbac`
   \   00001E                REQUIRE __INIT_XDATA_I
     90          {
     91            zclZigbeeReceiver_BasicResetCB,              // Basic Cluster Reset command
     92            zclZigbeeReceiver_IdentifyCB,                // Identify command  
     93            zclZigbeeReceiver_IdentifyQueryRspCB,        // Identify Query Response command
     94            zclZigbeeReceiver_OnOffCB,                   // On/Off cluster command
     95            NULL,                                        // Level Control Move to Level command
     96            NULL,                                        // Level Control Move command
     97            NULL,                                        // Level Control Step command
     98            NULL,                                        // Group Response commands
     99            NULL,                                        // Scene Store Request command
    100            NULL,                                        // Scene Recall Request command
    101            NULL,                                        // Scene Response command
    102            NULL,                                        // Alarm (Response) command
    103            NULL,                                        // RSSI Location commands
    104            NULL,                                        // RSSI Location Response commands
    105          };
    106          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    107          void ZSendMsgProcess(void)
   \                     ZSendMsgProcess:
    108          {  
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    109              HalUARTWrite(HAL_UART_PORT_0, device_manager.Type, 8);
                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C08         MOV     R4,#0x8
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(device_manager & 0xff)
   \   00000B   7B..         MOV     R3,#((device_manager >> 8) & 0xff)
   \   00000D   12....       LCALL   ?Subroutine0 & 0xFFFF
    110              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 3); 
    111              HalUARTWrite(HAL_UART_PORT_0, device_manager.Module, 10);  
                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_0:
   \   000010                ; Setup parameters for call to function HalUARTWrite
   \   000010   7C0A         MOV     R4,#0xa
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A..         MOV     R2,#((device_manager + 8) & 0xff)
   \   000016   7B..         MOV     R3,#(((device_manager + 8) >> 8) & 0xff)
   \   000018   12....       LCALL   ?Subroutine0 & 0xFFFF
    112              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 3);     
    113              // Write receive coordinator command to UART
    114              HalUARTWrite(MT_UART_DEFAULT_PORT, device_manager.Data, device_manager.DataLength-2); 
   \                     ??CrossCallReturnLabel_1:
   \   00001B                ; Setup parameters for call to function HalUARTWrite
   \   00001B   90....       MOV     DPTR,#(device_manager + 48)
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   24FE         ADD     A,#-0x2
   \   000021   FC           MOV     R4,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   34FF         ADDC    A,#-0x1
   \   000026   FD           MOV     R5,A
   \   000027   7A..         MOV     R2,#((device_manager + 18) & 0xff)
   \   000029   7B..         MOV     R3,#(((device_manager + 18) >> 8) & 0xff)
   \   00002B   12....       LCALL   ?Subroutine0 & 0xFFFF
    115              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 3);  
    116              osal_start_timerEx( zclZigbeeReceiver_TaskID, ZDO_MSG_SEND_EVT, 3000 );        
   \                     ??CrossCallReturnLabel_2:
   \   00002E                ; Setup parameters for call to function osal_start_timerEx
   \   00002E   7CB8         MOV     R4,#-0x48
   \   000030   7D0B         MOV     R5,#0xb
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B08         MOV     R3,#0x8
   \   000036   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   ??osal_start_timerEx?relay
    117          }
   \   00003E   7F01         MOV     R7,#0x1
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C03         MOV     R4,#0x3
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(`?<Constant "\\r\\n">` & 0xff)
   \   00000B   7B..         MOV     R3,#((`?<Constant "\\r\\n">` >> 8) & 0xff)
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    118          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          void zclZigbeeRecv_Init( byte task_id )
   \                     zclZigbeeRecv_Init:
    120          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    121            zclZigbeeReceiver_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000009   F0           MOVX    @DPTR,A
    122            
    123            // Setup for the flash command's destination address ( Group )
    124            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;  // transmit mode - Group address
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   00000F   F0           MOVX    @DPTR,A
    125            zclZigbeeRecv_DstAddr.endPoint = ZIGBEERECV_ENDPOINT;        // end-point number:20
   \   000010   740D         MOV     A,#0xd
   \   000012   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000015   F0           MOVX    @DPTR,A
    126            zclZigbeeRecv_DstAddr.addr.shortAddr = RECV_GROUP;           // Group short address
   \   000016   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000019   7410         MOV     A,#0x10
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   7420         MOV     A,#0x20
   \   00001F   F0           MOVX    @DPTR,A
    127            
    128            // This App is part of the Zigbee Device Profile
    129            zclZD_Init( &zclZigbeeRecv_SimpleDesc ); 
   \   000020                ; Setup parameters for call to function zclZD_Init
   \   000020   7A..         MOV     R2,#(zclZigbeeRecv_SimpleDesc & 0xff)
   \   000022   7B..         MOV     R3,#((zclZigbeeRecv_SimpleDesc >> 8) & 0xff)
   \   000024   12....       LCALL   ??zclZD_Init?relay
    130            
    131            // Register the ZCL General Cluster Library callback functions
    132            zclGeneral_RegisterCmdCallbacks( ZIGBEERECV_ENDPOINT, &zclZigbeeReceiver_CmdCallbacks ); 
   \   000027                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000027   7A..         MOV     R2,#(zclZigbeeReceiver_CmdCallbacks & 0xff)
   \   000029   7B..         MOV     R3,#((zclZigbeeReceiver_CmdCallbacks >> 8) & 0xff)
   \   00002B   790D         MOV     R1,#0xd
   \   00002D   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
    133            
    134            // Register the application's attribute list
    135            zcl_registerAttrList( ZIGBEERECV_ENDPOINT, ZIGBEERECV_MAX_ATTRIBUTES, zclZigbeeRecv_Attrs ); 
   \   000030                ; Setup parameters for call to function zcl_registerAttrList
   \   000030   7C..         MOV     R4,#(zclZigbeeRecv_Attrs & 0xff)
   \   000032   7D..         MOV     R5,#((zclZigbeeRecv_Attrs >> 8) & 0xff)
   \   000034   7A0C         MOV     R2,#0xc
   \   000036   790D         MOV     R1,#0xd
   \   000038   12....       LCALL   ??zcl_registerAttrList?relay
    136            
    137            // Register the Application to receive the unprocessed Foundation command/response messages
    138            zcl_registerForMsg( zclZigbeeReceiver_TaskID ); 
   \   00003B                ; Setup parameters for call to function zcl_registerForMsg
   \   00003B   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??zcl_registerForMsg?relay
    139            
    140            // Register for all key events - This app will handle all key events
    141            RegisterForKeys( zclZigbeeReceiver_TaskID ); 
   \   000043                ; Setup parameters for call to function RegisterForKeys
   \   000043   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??RegisterForKeys?relay
    142            
    143            // By default, all devices start out in Group 1 ( register grouop )
    144            zclZigbeeRecv_Group.ID = RECV_GROUP;
   \   00004B   90....       MOV     DPTR,#zclZigbeeRecv_Group
   \   00004E   7410         MOV     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   7420         MOV     A,#0x20
   \   000054   F0           MOVX    @DPTR,A
    145            osal_memcpy( zclZigbeeRecv_Group.name, "RECV_GROUP", 8  );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   75....       MOV     ?V0 + 0,#(`?<Constant "RECV_GROUP">` & 0xff)
   \   000058   75....       MOV     ?V0 + 1,#((`?<Constant "RECV_GROUP">` >> 8) & 0xff)
   \   00005B   75..00       MOV     ?V0 + 2,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7C08         MOV     R4,#0x8
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7A..         MOV     R2,#((zclZigbeeRecv_Group + 2) & 0xff)
   \   000069   7B..         MOV     R3,#(((zclZigbeeRecv_Group + 2) >> 8) & 0xff)
   \   00006B   12....       LCALL   ??osal_memcpy?relay
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    146            aps_AddGroup( ZIGBEERECV_ENDPOINT, &zclZigbeeRecv_Group ); 
   \   000073                ; Setup parameters for call to function aps_AddGroup
   \   000073   7A..         MOV     R2,#(zclZigbeeRecv_Group & 0xff)
   \   000075   7B..         MOV     R3,#((zclZigbeeRecv_Group >> 8) & 0xff)
   \   000077   790D         MOV     R1,#0xd
   \   000079   12....       LCALL   ??aps_AddGroup?relay
    147            
    148            // Register for a test endpoint
    149            afRegister( &zigbeeReceiver_TestEp ); 
   \   00007C                ; Setup parameters for call to function afRegister
   \   00007C   7A..         MOV     R2,#(zigbeeReceiver_TestEp & 0xff)
   \   00007E   7B..         MOV     R3,#((zigbeeReceiver_TestEp >> 8) & 0xff)
   \   000080   12....       LCALL   ??afRegister?relay
    150           
    151            // Set osal event for zclZigbeeReceiver_TaskID, chris
    152            osal_set_event( zclZigbeeReceiver_TaskID, NWK_RETRY_DELAY);  
   \   000083                ; Setup parameters for call to function osal_set_event
   \   000083   7AE8         MOV     R2,#-0x18
   \   000085   7B03         MOV     R3,#0x3
   \   000087   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??osal_set_event?relay
    153          }
   \   00008F   7F03         MOV     R7,#0x3
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    154          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    155          uint16 zclZigbeeRecv_event_loop( uint8 task_id, uint16 events )
   \                     zclZigbeeRecv_event_loop:
    156          {   
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    157              afIncomingMSGPacket_t *MSGpkt;
    158              (void)task_id;  // Intentionally unreferenced parameter
    159            
    160              if ( events & SYS_EVENT_MSG ) // SYSTEM Message event
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??zclZigbeeRecv_event_loop_0
   \   000011   E9           MOV     A,R1
   \                     ??zclZigbeeRecv_event_loop_0:
   \   000012   702B         JNZ     ??zclZigbeeRecv_event_loop_1
    161              {
    162                while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigbeeReceiver_TaskID )) )
    163                {   
    164                  switch ( MSGpkt->hdr.event )
    165                  {       
    166                  case ZCL_INCOMING_MSG: //0x34 : Incoming ZCL foundation message
    167                      show("ZCL_INCOMING_MSG");
    168                      // Incoming ZCL Foundation command/response messages
    169                      zclZigbeeReceiver_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt ); 
    170                      break;          
    171                  case AF_DATA_CONFIRM_CMD:            
    172                        strcpy(device_manager.Type, "\r 1 \n");  
    173                        strcpy(device_manager.Module, "\r 140 \n");                            
    174                      break;         
    175                  case ZDO_STATE_CHANGE:       
    176                      ZSendMsgProcess();            
    177                      break;         
    178                  case ZDO_MATCH_DESC_RSP_SENT:       
    179                      show("ZDO_MATCH_DESC_RSP_SENT");
    180                      // Check the state of NWK
    181                      break;         
    182                    default:
    183                      break;
    184                  }
    185                  osal_msg_deallocate( (uint8 *)MSGpkt ); // Release the memory
    186                }
    187                return (events ^ SYS_EVENT_MSG); // return unprocessed events
    188              }
    189            
    190              // The user define application events
    191              switch ( events )
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_0`:
   \   000019   0000         DW        0
   \   00001B   0300         DW        3
   \   00001D   0100         DW        1
   \   00001F   ....         DW        ??zclZigbeeRecv_event_loop_2
   \   000021   0200         DW        2
   \   000023   ....         DW        ??zclZigbeeRecv_event_loop_3
   \   000025   0008         DW        2048
   \   000027   ....         DW        ??zclZigbeeRecv_event_loop_4
   \   000029   ....         DW        ??zclZigbeeRecv_event_loop_5
    192              {
    193                case ZDO_MSG_SEND_EVT:
    194                      ZSendMsgProcess();                
   \                     ??zclZigbeeRecv_event_loop_4:
   \   00002B                ; Setup parameters for call to function ZSendMsgProcess
   \   00002B   12....       LCALL   ??ZSendMsgProcess?relay
   \   00002E   02....       LJMP    ??zclZigbeeRecv_event_loop_5 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_6:
   \   000031                ; Setup parameters for call to function show
   \   000031   7A..         MOV     R2,#(`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` & 0xff)
   \   000033   7B..         MOV     R3,#((`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` >> 8) & 0xff)
   \   000035   12....       LCALL   ??show?relay
   \                     ??zclZigbeeRecv_event_loop_7:
   \   000038                ; Setup parameters for call to function osal_msg_deallocate
   \   000038   EE           MOV     A,R6
   \   000039   FA           MOV     R2,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??zclZigbeeRecv_event_loop_1:
   \   00003F                ; Setup parameters for call to function osal_msg_receive
   \   00003F   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   ??osal_msg_receive?relay
   \   000047   8A..         MOV     ?V0 + 2,R2
   \   000049   8B..         MOV     ?V0 + 3,R3
   \   00004B   AE..         MOV     R6,?V0 + 2
   \   00004D   AF..         MOV     R7,?V0 + 3
   \   00004F   EE           MOV     A,R6
   \   000050   7001         JNZ     ??zclZigbeeRecv_event_loop_8
   \   000052   EF           MOV     A,R7
   \                     ??zclZigbeeRecv_event_loop_8:
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??zclZigbeeRecv_event_loop_9 & 0xFFFF
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_1`:
   \   000060   00           DB        0
   \   000061   04           DB        4
   \   000062   34           DB        52
   \   000063   ....         DW        ??zclZigbeeRecv_event_loop_10
   \   000065   D1           DB        209
   \   000066   ....         DW        ??zclZigbeeRecv_event_loop_11
   \   000068   D2           DB        210
   \   000069   ....         DW        ??zclZigbeeRecv_event_loop_6
   \   00006B   FD           DB        253
   \   00006C   ....         DW        ??zclZigbeeRecv_event_loop_12
   \   00006E   ....         DW        ??zclZigbeeRecv_event_loop_7
   \                     ??zclZigbeeRecv_event_loop_10:
   \   000070                ; Setup parameters for call to function show
   \   000070   7A..         MOV     R2,#(`?<Constant "ZCL_INCOMING_MSG">` & 0xff)
   \   000072   7B..         MOV     R3,#((`?<Constant "ZCL_INCOMING_MSG">` >> 8) & 0xff)
   \   000074   12....       LCALL   ??show?relay
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_2`:
   \   000086   00           DB        0
   \   000087   02           DB        2
   \   000088   01           DB        1
   \   000089   ....         DW        ??zclZigbeeRecv_event_loop_13
   \   00008B   04           DB        4
   \   00008C   ....         DW        ??zclZigbeeRecv_event_loop_14
   \   00008E   ....         DW        ??zclZigbeeRecv_event_loop_15
   \                     ??zclZigbeeRecv_event_loop_13:
   \   000090   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FA           MOV     R2,A
   \   000095   EB           MOV     A,R3
   \   000096   C3           CLR     C
   \   000097   9A           SUBB    A,R2
   \   000098   5010         JNC     ??zclZigbeeRecv_event_loop_15
   \   00009A   0B           INC     R3
   \   00009B   80F6         SJMP    ??CrossCallReturnLabel_3
   \                     ??zclZigbeeRecv_event_loop_14:
   \   00009D   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000A0   8001         SJMP    ??zclZigbeeRecv_event_loop_16
   \                     ??zclZigbeeRecv_event_loop_17:
   \   0000A2   0B           INC     R3
   \                     ??zclZigbeeRecv_event_loop_16:
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EB           MOV     A,R3
   \   0000A6   C3           CLR     C
   \   0000A7   9A           SUBB    A,R2
   \   0000A8   40F8         JC      ??zclZigbeeRecv_event_loop_17
   \                     ??zclZigbeeRecv_event_loop_15:
   \   0000AA   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000AD   FA           MOV     R2,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   FB           MOV     R3,A
   \   0000B1   EA           MOV     A,R2
   \   0000B2   7001         JNZ     ??zclZigbeeRecv_event_loop_18
   \   0000B4   EB           MOV     A,R3
   \                     ??zclZigbeeRecv_event_loop_18:
   \   0000B5   6081         JZ      ??zclZigbeeRecv_event_loop_7
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   12....       LCALL   ??osal_mem_free?relay
   \   0000BA   02....       LJMP    ??zclZigbeeRecv_event_loop_7 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_12:
   \   0000BD                ; Setup parameters for call to function strcpy
   \   0000BD   7C..         MOV     R4,#(`?<Constant "\\r 1 \\n">` & 0xff)
   \   0000BF   7D..         MOV     R5,#((`?<Constant "\\r 1 \\n">` >> 8) & 0xff)
   \   0000C1   7A..         MOV     R2,#(device_manager & 0xff)
   \   0000C3   7B..         MOV     R3,#((device_manager >> 8) & 0xff)
   \   0000C5   12....       LCALL   ??strcpy?relay
   \   0000C8                ; Setup parameters for call to function strcpy
   \   0000C8   7C..         MOV     R4,#(`?<Constant "\\r 140 \\n">` & 0xff)
   \   0000CA   7D..         MOV     R5,#((`?<Constant "\\r 140 \\n">` >> 8) & 0xff)
   \   0000CC   7A..         MOV     R2,#((device_manager + 8) & 0xff)
   \   0000CE   7B..         MOV     R3,#(((device_manager + 8) >> 8) & 0xff)
   \   0000D0   12....       LCALL   ??strcpy?relay
   \   0000D3   02....       LJMP    ??zclZigbeeRecv_event_loop_7 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_11:
   \   0000D6                ; Setup parameters for call to function ZSendMsgProcess
   \   0000D6   12....       LCALL   ??ZSendMsgProcess?relay
   \   0000D9   02....       LJMP    ??zclZigbeeRecv_event_loop_7 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_9:
   \   0000DC   AA..         MOV     R2,?V0 + 0
   \   0000DE   7480         MOV     A,#-0x80
   \   0000E0   65..         XRL     A,?V0 + 1
   \   0000E2   FB           MOV     R3,A
   \   0000E3   8030         SJMP    ??zclZigbeeRecv_event_loop_19
    195                      break;
    196                case SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT: // ZIGBEE Receiver identify timeout event
    197                  show("SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT");
   \                     ??zclZigbeeRecv_event_loop_2:
   \   0000E5                ; Setup parameters for call to function show
   \   0000E5   7A..         MOV     R2,#(`?<Constant "SAMPLELIGHT_IDENTIFY_...">` & 0xff)
   \   0000E7   7B..         MOV     R3,#((`?<Constant "SAMPLELIGHT_IDENTIFY_...">` >> 8) & 0xff)
   \   0000E9   12....       LCALL   ??show?relay
    198                  if ( zclZigbeeRecv_IdentifyTime > 0 )
   \   0000EC   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   7002         JNZ     ??zclZigbeeRecv_event_loop_20
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeRecv_event_loop_20:
   \   0000F4   600C         JZ      ??zclZigbeeRecv_event_loop_21
    199                       zclZigbeeRecv_IdentifyTime--;
   \   0000F6   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   24FF         ADD     A,#-0x1
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   34FF         ADDC    A,#-0x1
   \   000101   F0           MOVX    @DPTR,A
    200                       zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \                     ??zclZigbeeRecv_event_loop_21:
   \   000102                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   000102   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
   \   000105   800A         SJMP    ??zclZigbeeRecv_event_loop_5
    201                  break;   
    202                case UART_MSG_EVT: // The UART Message event
    203                  show("UART_MSG_EVT");
   \                     ??zclZigbeeRecv_event_loop_3:
   \   000107                ; Setup parameters for call to function show
   \   000107   7A..         MOV     R2,#(`?<Constant "UART_MSG_EVT">` & 0xff)
   \   000109   7B..         MOV     R3,#((`?<Constant "UART_MSG_EVT">` >> 8) & 0xff)
   \   00010B   12....       LCALL   ??show?relay
    204                  zclUartReceiver();
   \   00010E                ; Setup parameters for call to function zclUartReceiver
   \   00010E   12....       LCALL   ??zclUartReceiver?relay
    205                  break;
    206              }    
    207              return 0; // Discard unknown events
   \                     ??zclZigbeeRecv_event_loop_5:
   \   000111   7A00         MOV     R2,#0x0
   \   000113   7B00         MOV     R3,#0x0
   \                     ??zclZigbeeRecv_event_loop_19:
   \   000115   7F04         MOV     R7,#0x4
   \   000117   02....       LJMP    ?BANKED_LEAVE_XDATA
    208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2416         ADD     A,#0x16
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    209          
    210          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys )
                             ^
Warning[Pe177]: function "zclZigbeeReceiver_HandleKeys" was declared but never
          referenced
    211          {
    212            zAddrType_t dstAddr;
    213            (void)shift; // Intentionally unreferenced parameter
    214            
    215          #if defined(Coor_receiver) || defined (Router_receiver)
    216          
    217            if ( keys & HAL_KEY_SW1 ) // Init EndDevice bind reequest, and use cluster list important to binding.
    218            {
    219              dstAddr.addrMode = afAddr16Bit;
    220              dstAddr.addr.shortAddr = 0x0000;   // Coordinator makes the match
    221              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), ZIGBEERECV_ENDPOINT, // ZIGBEERECV_ENDPOINT = 13 is coordinator
    222                                    ZCL_HA_PROFILE_ID, ZCLZIGBEERECV_BINDINGLIST, bindingInClusters, 0,
    223                                    NULL, // No Outgoing clusters to bind
    224                                    TRUE );
    225            }
    226            
    227            if ( keys & HAL_KEY_SW2 ) 
    228            {
    229              
    230            }
    231            
    232          #endif
    233          }
    234          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void )
   \                     zclZigbeeReceiver_ProcessIdentifyTimeChange:
    236          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    237            if ( zclZigbeeRecv_IdentifyTime > 0 )
   \   000004   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0:
   \   00000C   601F         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1
    238            {
    239              osal_start_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   7CE8         MOV     R4,#-0x18
   \   000010   7D03         MOV     R5,#0x3
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_start_timerEx?relay
    240              HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7B05         MOV     R3,#0x5
   \   000024   7AFF         MOV     R2,#-0x1
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   ??HalLedBlink?relay
   \   00002B   8022         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    241            }
    242            else
    243              {
    244                if ( zclZigbeeRecv_OnOff )
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1:
   \   00002D   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6009         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3
    245                {
    246                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7901         MOV     R1,#0x1
   \   000037   12....       LCALL   ??HalLedSet?relay
   \   00003A   8013         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    247                }
    248                else
    249                  {
    250                    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3:
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   ??HalLedSet?relay
    251                    osal_stop_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000043                ; Setup parameters for call to function osal_stop_timerEx
   \   000043   7A01         MOV     R2,#0x1
   \   000045   7B00         MOV     R3,#0x0
   \   000047   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   ??osal_stop_timerEx?relay
    252                  }
    253              }
    254          }
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2:
   \   00004F                REQUIRE ?Subroutine3
   \   00004F                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    255          
    256          /*********************************************************************
    257           * @fn      zclZigbeeReceiver_BasicResetCB
    258           * @brief   Callback from the ZCL General Cluster Library
    259           *          to set all the Basic Cluster attributes to default values.
    260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          static void zclZigbeeReceiver_BasicResetCB( void )
   \                     zclZigbeeReceiver_BasicResetCB:
    262          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    263            // Reset all attributes to default values
    264          }
   \   000000   02....       LJMP    ?BRET
    265          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclZigbeeReceiver_IdentifyCB:
    267          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    268            zclZigbeeRecv_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000012   E8           MOV     A,R0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E9           MOV     A,R1
   \   000016   F0           MOVX    @DPTR,A
    269            zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \   000017                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   000017   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
    270          }
   \   00001A   80..         SJMP    ?Subroutine3
    271          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    272          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
   \                     zclZigbeeReceiver_IdentifyQueryRspCB:
    273          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    274            (void)pRsp; // Query Response (with timeout value)
    275          }
   \   000000   02....       LJMP    ?BRET
    276          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    277          static void zclZigbeeReceiver_OnOffCB( uint8 cmd )
   \                     zclZigbeeReceiver_OnOffCB:
    278          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    279            if ( cmd == COMMAND_ON ) // Turn on the light
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   700E         JNZ     ??zclZigbeeReceiver_OnOffCB_0
    280              zclZigbeeRecv_OnOff = LIGHT_ON;
   \                     ??zclZigbeeReceiver_OnOffCB_1:
   \   000009   7401         MOV     A,#0x1
   \                     ??zclZigbeeReceiver_OnOffCB_2:
   \   00000B   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   00000E   F0           MOVX    @DPTR,A
    281          
    282            else if ( cmd == COMMAND_OFF ) // Turn off the light
    283              zclZigbeeRecv_OnOff = LIGHT_OFF;
    284          
    285            else // Toggle the light
    286            {
    287              if ( zclZigbeeRecv_OnOff == LIGHT_OFF )
    288                    zclZigbeeRecv_OnOff = LIGHT_ON;
    289              else
    290                    zclZigbeeRecv_OnOff = LIGHT_OFF;
    291            }
    292          
    293            // In this sample app, we use LED4 to simulate the Light  
    294            if ( zclZigbeeRecv_OnOff == LIGHT_ON )
    295            {
    296              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON ); // setting the LED_1 on
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   FA           MOV     R2,A
   \   000010   7902         MOV     R1,#0x2
   \   000012   12....       LCALL   ??HalLedSet?relay
    297            }
    298            else
    299              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF ); // setting the LED_1 off
    300          }
   \   000015   80..         SJMP    ?Subroutine3
   \                     ??zclZigbeeReceiver_OnOffCB_0:
   \   000017   E9           MOV     A,R1
   \   000018   7003         JNZ     ??zclZigbeeReceiver_OnOffCB_3
   \                     ??zclZigbeeReceiver_OnOffCB_4:
   \   00001A   E4           CLR     A
   \   00001B   80EE         SJMP    ??zclZigbeeReceiver_OnOffCB_2
   \                     ??zclZigbeeReceiver_OnOffCB_3:
   \   00001D   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000020   E0           MOVX    A,@DPTR
   \   000021   70F7         JNZ     ??zclZigbeeReceiver_OnOffCB_4
   \   000023   80E4         SJMP    ??zclZigbeeReceiver_OnOffCB_1
    301          
    302          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
    303          {
    304            switch ( pInMsg->zclHdr.commandID )
    305            {
    306          #ifdef ZCL_READ
    307              case ZCL_CMD_READ_RSP:
    308                zclZigbeeReceiver_ProcessInReadRspCmd( pInMsg );
    309                break;
    310          #endif
    311                
    312          #ifdef ZCL_WRITE    
    313              case ZCL_CMD_WRITE_RSP:
    314                zclZigbeeReceiver_ProcessInWriteRspCmd( pInMsg );
    315                break;
    316          #endif
    317                
    318          #ifdef ZCL_REPORT
    319              case ZCL_CMD_CONFIG_REPORT: // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    320                //zclSampleLight_ProcessInConfigReportCmd( pInMsg );
    321                break;
    322              
    323              case ZCL_CMD_CONFIG_REPORT_RSP:
    324                //zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
    325                break;
    326              
    327              case ZCL_CMD_READ_REPORT_CFG:
    328                //zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
    329                break;
    330              
    331              case ZCL_CMD_READ_REPORT_CFG_RSP:
    332                //zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
    333                break;
    334              
    335              case ZCL_CMD_REPORT:
    336                //zclSampleLight_ProcessInReportCmd( pInMsg );
    337                break;
    338          #endif   
    339                
    340              case ZCL_CMD_DEFAULT_RSP:
    341                zclZigbeeReceiver_ProcessInDefaultRspCmd( pInMsg );
    342                break;
    343                
    344          #ifdef ZCL_DISCOVER     
    345              case ZCL_CMD_DISCOVER_RSP:
    346                zclZigbeeReceiver_ProcessInDiscRspCmd( pInMsg );
    347                break;
    348          #endif
    349                
    350              default:
    351                break;
    352            }
    353            if ( pInMsg->attrCmd )
    354              osal_mem_free( pInMsg->attrCmd );
    355          }
    356          
    357          #ifdef ZCL_READ
    358          
    359          static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    360          {
    361            zclReadRspCmd_t *readRspCmd;
    362            uint8 i;
    363          
    364            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    365            for (i = 0; i < readRspCmd->numAttr; i++)
    366            {
    367              // Notify the originator of the results of the original read attributes attempt and, 
    368              // for each successfull request, the value of the requested attribute
    369            }
    370            return TRUE; 
    371          }
    372          #endif // ZCL_READ
    373          
    374          #ifdef ZCL_WRITE
    375          
    376          static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    377          {
    378            zclWriteRspCmd_t *writeRspCmd;
    379            uint8 i;
    380          
    381            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    382            for (i = 0; i < writeRspCmd->numAttr; i++)
    383            {
    384              // Notify the device of the results of the its original write attributes command.
    385            }
    386            return TRUE; 
    387          }
    388          #endif // ZCL_WRITE
    389          
    390          /*********************************************************************
    391           * @fn      zclZigbeeReceiver_ProcessInDefaultRspCmd
    392           * @brief   Process the "Profile" Default Response Command
    393           * @param   pInMsg - incoming message to process
    394           */
    395          static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    396          {
    397            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd; 
    398            // Device is notified of the Default Response command.
    399            (void)pInMsg;
    400            return TRUE; 
    401          }
    402          
    403          #ifdef ZCL_DISCOVER
    404          /*********************************************************************
    405           * @fn      zclZigbeeReceiver_ProcessInDiscRspCmd
    406           * @brief   Process the "Profile" Discover Response Command
    407           * @param   pInMsg - incoming message to process
    408           */
    409          static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
    410          {
    411            zclDiscoverRspCmd_t *discoverRspCmd;
    412            uint8 i;
    413            
    414            discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
    415            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    416            {
    417              // Device is notified of the result of its attribute discovery command.
    418            }
    419            return TRUE;
    420          }
    421          #endif // ZCL_DISCOVER
    422          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void zclUARTMsg_CallBack(uint8 port, uint8 event)
   \                     zclUARTMsg_CallBack:
    424          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    425            (void)port;
    426            
    427            if(Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT) > 0 )
   \   000005                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000005   7900         MOV     R1,#0x0
   \   000007   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00000A   EA           MOV     A,R2
   \   00000B   7001         JNZ     ??zclUARTMsg_CallBack_0
   \   00000D   EB           MOV     A,R3
   \                     ??zclUARTMsg_CallBack_0:
   \   00000E   6022         JZ      ??zclUARTMsg_CallBack_1
    428            {
    429                len = Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT );
   \   000010                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000015   EA           MOV     A,R2
   \   000016   90....       MOV     DPTR,#len
   \   000019   F0           MOVX    @DPTR,A
    430                HalUARTRead( MT_UART_DEFAULT_PORT, TransmitApp_Msg, len );
   \   00001A                ; Setup parameters for call to function HalUARTRead
   \   00001A   FC           MOV     R4,A
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A..         MOV     R2,#(TransmitApp_Msg & 0xff)
   \   00001F   7B..         MOV     R3,#((TransmitApp_Msg >> 8) & 0xff)
   \   000021   7900         MOV     R1,#0x0
   \   000023   12....       LCALL   ??HalUARTRead?relay
    431                osal_set_event( zclZigbeeReceiver_TaskID, UART_MSG_EVT );
   \   000026                ; Setup parameters for call to function osal_set_event
   \   000026   7A02         MOV     R2,#0x2
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??osal_set_event?relay
    432            }
    433          }
   \                     ??zclUARTMsg_CallBack_1:
   \   000032                REQUIRE ?Subroutine4
   \   000032                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    434          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void zclUartReceiver( void )
   \                     zclUartReceiver:
    436          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    437            show("zclUartReceiver");
   \   000005                ; Setup parameters for call to function show
   \   000005   7A..         MOV     R2,#(`?<Constant "zclUartReceiver">` & 0xff)
   \   000007   7B..         MOV     R3,#((`?<Constant "zclUartReceiver">` >> 8) & 0xff)
   \   000009   12....       LCALL   ??show?relay
    438            
    439            for(uint8 length = 0; length < len; length++)
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   8024         SJMP    ??zclUartReceiver_0
    440            {
    441              uart_recv[length] = TransmitApp_Msg[length];
   \                     ??zclUartReceiver_1:
   \   000010   8E82         MOV     DPL,R6
   \   000012   A882         MOV     R0,DPL
   \   000014   E8           MOV     A,R0
   \   000015   24..         ADD     A,#(TransmitApp_Msg & 0xff)
   \   000017   F582         MOV     DPL,A
   \   000019   E4           CLR     A
   \   00001A   34..         ADDC    A,#((TransmitApp_Msg >> 8) & 0xff)
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   E8           MOV     A,R0
   \   000021   24..         ADD     A,#(uart_recv & 0xff)
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   34..         ADDC    A,#((uart_recv >> 8) & 0xff)
   \   000028   F583         MOV     DPH,A
   \   00002A   EB           MOV     A,R3
   \   00002B   F0           MOVX    @DPTR,A
    442            #if defined( LCD_SUPPORTED )
    443              HalLcdWriteChar(HAL_LCD_LINE_4, length, uart_recv[length]);
   \   00002C                ; Setup parameters for call to function HalLcdWriteChar
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   7904         MOV     R1,#0x4
   \   000030   12....       LCALL   ??HalLcdWriteChar?relay
    444            #endif
    445            }
   \   000033   0E           INC     R6
   \                     ??zclUartReceiver_0:
   \   000034   90....       MOV     DPTR,#len
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   EE           MOV     A,R6
   \   00003A   C3           CLR     C
   \   00003B   9A           SUBB    A,R2
   \   00003C   40D2         JC      ??zclUartReceiver_1
    446            
    447            // Set the End Device state
    448            zclZigbeeRecv_DstAddr.endPoint = 12;
   \   00003E   740C         MOV     A,#0xc
   \   000040   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000043   F0           MOVX    @DPTR,A
    449            zclZigbeeRecv_DstAddr.addr.shortAddr = 0xFFFF;
   \   000044   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000047   74FF         MOV     A,#-0x1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
    450            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00004C   740F         MOV     A,#0xf
   \   00004E   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   000051   F0           MOVX    @DPTR,A
    451              
    452            // Transmit the UART command to End Device
    453            uint8 send = zcl_SendCommand( ZIGBEERECV_ENDPOINT, 
    454                                          &zclZigbeeRecv_DstAddr,
    455                                          ZCL_CLUSTER_ID_GEN_ON_OFF,
    456                                          COMMAND_TOGGLE,
    457                                          TRUE,
    458                                          ZCL_FRAME_CLIENT_SERVER_DIR,
    459                                          false,
    460                                          0,
    461                                          0,
    462                                          10,
    463                                          uart_recv );
   \   000052                ; Setup parameters for call to function zcl_SendCommand
   \   000052   75....       MOV     ?V0 + 0,#(uart_recv & 0xff)
   \   000055   75....       MOV     ?V0 + 1,#((uart_recv >> 8) & 0xff)
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..0A       MOV     ?V0 + 0,#0xa
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..00       MOV     ?V0 + 0,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   75..02       MOV     ?V0 + 0,#0x2
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   7C06         MOV     R4,#0x6
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A..         MOV     R2,#(zclZigbeeRecv_DstAddr & 0xff)
   \   000095   7B..         MOV     R3,#((zclZigbeeRecv_DstAddr >> 8) & 0xff)
   \   000097   790D         MOV     R1,#0xd
   \   000099   12....       LCALL   ??zcl_SendCommand?relay
   \   00009C   740B         MOV     A,#0xb
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    464          }
   \   0000A1   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zigbeeReceiver_TestEp>`:
   \   000000   14           DB 20
   \   000001   ....0000     DW zclZigbeeReceiver_TaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclZigbeeReceiver_CmdCallbac`:
   \   000000   ....         DW ??zclZigbeeReceiver_BasicResetCB?relay
   \   000002   ....         DW ??zclZigbeeReceiver_IdentifyCB?relay
   \   000004   ....         DW ??zclZigbeeReceiver_IdentifyQueryRspCB?relay
   \   000006   ....0000     DW ??zclZigbeeReceiver_OnOffCB?relay, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
   \            00000000
   \            00000000
   \            00000000
   \            0000    
   \   000018   00000000     DW 0H, 0H
   \   00001C   0000         DB 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZSendMsgProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZSendMsgProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_OnOffCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUARTMsg_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUARTMsg_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUartReceiver?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUartReceiver

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RECV_GROUP">`:
   \   000000   52454356     DB "RECV_GROUP"
   \            5F47524F
   \            555000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZCL_INCOMING_MSG">`:
   \   000000   5A434C5F     DB "ZCL_INCOMING_MSG"
   \            494E434F
   \            4D494E47
   \            5F4D5347
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r 1 \\n">`:
   \   000000   0D203120     DB "\015 1 \012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r 140 \\n">`:
   \   000000   0D203134     DB "\015 140 \012"
   \            30200A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZDO_MATCH_DESC_RSP_SENT">`:
   \   000000   5A444F5F     DB "ZDO_MATCH_DESC_RSP_SENT"
   \            4D415443
   \            485F4445
   \            53435F52
   \            53505F53
   \            454E5400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLELIGHT_IDENTIFY_...">`:
   \   000000   53414D50     DB "SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT"
   \            4C454C49
   \            4748545F
   \            4944454E
   \            54494659
   \            5F54494D
   \            454F5554
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_MSG_EVT">`:
   \   000000   55415254     DB "UART_MSG_EVT"
   \            5F4D5347
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zclUartReceiver">`:
   \   000000   7A636C55     DB "zclUartReceiver"
   \            61727452
   \            65636569
   \            76657200

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ZSendMsgProcess                    0      0     21
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> osal_start_timerEx            0      0     18
     zclUARTMsg_CallBack                0      0     10
       -> Hal_UART_RxBufLen             0      0     20
       -> Hal_UART_RxBufLen             0      0     20
       -> HalUARTRead                   0      0     20
       -> osal_set_event                0      0     20
     zclUartReceiver                    1      0     33
       -> show                          0      0     20
       -> HalLcdWriteChar               0      0     20
       -> zcl_SendCommand               0      0     42
     zclZigbeeReceiver_BasicResetCB     0      0      0
     zclZigbeeReceiver_IdentifyCB       2      0      0
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        4      0      0
     zclZigbeeReceiver_IdentifyQueryRspCB
                                        0      0      0
     zclZigbeeReceiver_OnOffCB          2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        2      0     12
       -> osal_start_timerEx            4      0      0
       -> HalLedBlink                   4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_stop_timerEx             4      0      0
     zclZigbeeRecv_Init                 0      0     14
       -> zclZD_Init                    0      0     22
       -> zclGeneral_RegisterCmdCallbacks
                                        0      0     22
       -> zcl_registerAttrList          0      0     22
       -> zcl_registerForMsg            0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> afRegister                    0      0     22
       -> osal_set_event                0      0     22
     zclZigbeeRecv_event_loop           1      0     12
       -> ZSendMsgProcess               0      0     24
       -> show                          0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> show                          0      0     24
       -> osal_mem_free                 0      0     24
       -> strcpy                        0      0     24
       -> strcpy                        0      0     24
       -> ZSendMsgProcess               0      0     24
       -> show                          0      0     24
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        0      0     24
       -> show                          0      0     24
       -> zclUartReceiver               0      0     24


   Segment part sizes:

     Function/Label                                  Bytes
     --------------                                  -----
     send_msg_counter                                   1
     zclZigbeeReceiver_TaskID                           1
     ZDO_MSG_SEND_ID                                    1
     len                                                1
     TransmitApp_Msg                                  102
     UartTransmit_Msg                                 102
     uart_recv                                        102
     zclZigbeeRecv_DstAddr                             12
     zclZigbeeRecv_Group                               18
     zigbeeReceiver_TestEp                              6
     zclZigbeeReceiver_CmdCallbacks                    30
     ZSendMsgProcess                                   67
     ?Subroutine0                                      19
     zclZigbeeRecv_Init                               148
     zclZigbeeRecv_event_loop                         282
     ?Subroutine1                                      14
     ?Subroutine2                                      12
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                                       79
     ?Subroutine3                                       7
     zclZigbeeReceiver_BasicResetCB                     3
     zclZigbeeReceiver_IdentifyCB                      28
     zclZigbeeReceiver_IdentifyQueryRspCB
                                                        3
     zclZigbeeReceiver_OnOffCB                         37
     zclUARTMsg_CallBack                               50
     ?Subroutine4                                       5
     zclUartReceiver                                  164
     ?<Initializer for zigbeeReceiver_TestEp>           6
     ?<Initializer for zclZigbeeReceiver_CmdCallbac    30
     ??ZSendMsgProcess?relay                            6
     ??zclZigbeeRecv_Init?relay                         6
     ??zclZigbeeRecv_event_loop?relay                   6
     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r    6
     ??zclZigbeeReceiver_BasicResetCB?relay             6
     ??zclZigbeeReceiver_IdentifyCB?relay               6
     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay       6
     ??zclZigbeeReceiver_OnOffCB?relay                  6
     ??zclUARTMsg_CallBack?relay                        6
     ??zclUartReceiver?relay                            6
     ?<Constant "\r\n">                                 3
     ?<Constant "RECV_GROUP">                          11
     ?<Constant "ZCL_INCOMING_MSG">                    17
     ?<Constant "\r 1 \n">                              6
     ?<Constant "\r 140 \n">                            8
     ?<Constant "ZDO_MATCH_DESC_RSP_SENT">             24
     ?<Constant "SAMPLELIGHT_IDENTIFY_...">            33
     ?<Constant "UART_MSG_EVT">                        13
     ?<Constant "zclUartReceiver">                     16

 
 918 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
  36 bytes in segment XDATA_I
  36 bytes in segment XDATA_ID
 131 bytes in segment XDATA_ROM_C
 340 bytes in segment XDATA_Z
 
 1 014 bytes of CODE  memory
   131 bytes of CONST memory
   376 bytes of XDATA memory

Errors: none
Warnings: 3
