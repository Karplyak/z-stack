###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                04/Sep/2013  16:31:42 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c                #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c" -D CC2530 -D  #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\zcl_zigbee  #
#                          receiver.lst                                       #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\zcl_zigbee   #
#                          receiver.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Coordinator & Router\Source\zcl_zigbee receiver.c
      1          #include <stdio.h>
      2          #include <string.h>
      3          #include <stdlib.h>
      4          #include "ZComDef.h"
      5          #include "OSAL.h"
      6          #include "AF.h"
      7          #include "ZDApp.h"
      8          
      9          /* ZCL */
     10          #include "zcl.h"
     11          #include "zcl_general.h"
     12          #include "zcl_ha.h"
     13          #include "zcl_zigbee receiver.h"
     14          
     15          /* HAL */
     16          #include "onboard.h"
     17          #include "hal_lcd.h"
     18          #include "hal_led.h"
     19          #include "hal_timer.h"
     20          #include "hal_uart.h"
     21          #include "hal_key.h"
     22          #include "hal_keypad.h"
     23          
     24          /* MAC_high-level */
     25          #include "mac_high_level.h"
     26          
     27          /* MT */
     28          #include "MT_UART.h"
     29          #include "MT.h"
     30          #include "ZComDef.h"
     31          
     32          #define TRANSMITAPP_MAX_DATA_LEN    102
     33          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     34          uint8 send_msg_counter = 0;
   \                     send_msg_counter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     35          byte zclZigbeeReceiver_TaskID; // The zigbee task_ID
   \                     zclZigbeeReceiver_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     36          byte ZDO_MSG_SEND_ID; // The zigbee task_ID
   \                     ZDO_MSG_SEND_ID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     37          
     38          // The UART transmit variable and array, the transmit data length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39          uint8 len; 
   \                     len:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     40          // Transmit message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     42          // The coordinator send to device message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     43          byte UartTransmit_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     UartTransmit_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     44          // Receive the UART command

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     45          uint8 uart_recv[TRANSMITAPP_MAX_DATA_LEN]; 
   \                     uart_recv:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     46          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     47          afAddrType_t zclZigbeeRecv_DstAddr;  // AF address type
   \                     zclZigbeeRecv_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     48          aps_Group_t zclZigbeeRecv_Group;
   \                     zclZigbeeRecv_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     49          
     50          #define ZCLZIGBEERECV_BINDINGLIST       2
     51          
     52          static cId_t bindingInClusters[ZCLZIGBEERECV_BINDINGLIST] =
     53          {
     54            ZCL_CLUSTER_ID_GEN_ON_OFF,
     55            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
     56          };
     57          
     58          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
     59          static endPointDesc_t zigbeeReceiver_TestEp =
   \                     zigbeeReceiver_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for zigbeeReceiver_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
     60          {
     61            20,                                 // Test endpoint
     62            &zclZigbeeReceiver_TaskID,
     63            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
     64            (afNetworkLatencyReq_t)0            // No Network Latency req
     65          };
     66          
     67          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys );
     68          static void zclZigbeeReceiver_BasicResetCB( void );
     69          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd );
     70          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
     71          static void zclZigbeeReceiver_OnOffCB( uint8 cmd );
     72          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void );
     73          
     74          void zclUARTMsg_CallBack(uint8 port, uint8 event); // The UART Message callback
     75          void zclUartReceiver( void ); // The coordinator receive command function
     76          
     77          // Functions to process ZCL Foundation incoming Command/Response messages 
     78          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *msg );
     79          #ifdef ZCL_READ
     80            static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
     81          #endif
     82          #ifdef ZCL_WRITE
     83            static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
     84          #endif
     85            static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
     86          #ifdef ZCL_DISCOVER
     87            static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
     88          #endif
     89          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          static zclGeneral_AppCallbacks_t zclZigbeeReceiver_CmdCallbacks =
   \                     zclZigbeeReceiver_CmdCallbacks:
   \   000000                DS 30
   \   00001E                REQUIRE `?<Initializer for zclZigbeeReceiver_CmdCallbac`
   \   00001E                REQUIRE __INIT_XDATA_I
     91          {
     92            zclZigbeeReceiver_BasicResetCB,              // Basic Cluster Reset command
     93            zclZigbeeReceiver_IdentifyCB,                // Identify command  
     94            zclZigbeeReceiver_IdentifyQueryRspCB,        // Identify Query Response command
     95            zclZigbeeReceiver_OnOffCB,                   // On/Off cluster command
     96            NULL,                                        // Level Control Move to Level command
     97            NULL,                                        // Level Control Move command
     98            NULL,                                        // Level Control Step command
     99            NULL,                                        // Group Response commands
    100            NULL,                                        // Scene Store Request command
    101            NULL,                                        // Scene Recall Request command
    102            NULL,                                        // Scene Response command
    103            NULL,                                        // Alarm (Response) command
    104            NULL,                                        // RSSI Location commands
    105            NULL,                                        // RSSI Location Response commands
    106          };
    107          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          int top = 0;
   \                     top:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    109          void ZSendMsgProcess(void)
   \                     ZSendMsgProcess:
    110          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    111              //for(int flag_count=0;flag_count<9;flag_count++)
    112                //global_flag[flag_count]=1;
    113              switch(top)
   \   000005   90....       MOV     DPTR,#top
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0 + 4,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6003         JZ      $+5
   \   00000F   02....       LJMP    ??ZSendMsgProcess_0 & 0xFFFF
   \   000012   E5..         MOV     A,?V0 + 4
   \   000014   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZSendMsgProcess>_0`:
   \   000017   00           DB        0
   \   000018   04           DB        4
   \   000019   00           DB        0
   \   00001A   ....         DW        ??ZSendMsgProcess_1
   \   00001C   02           DB        2
   \   00001D   ....         DW        ??ZSendMsgProcess_2
   \   00001F   04           DB        4
   \   000020   ....         DW        ??ZSendMsgProcess_3
   \   000022   06           DB        6
   \   000023   ....         DW        ??ZSendMsgProcess_4
   \   000025   ....         DW        ??ZSendMsgProcess_0
    114              {
    115              case 0:
    116                if(stack <= top++ || global_flag[0]==0)
   \                     ??ZSendMsgProcess_1:
   \   000027   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00002A   5028         JNC     ??ZSendMsgProcess_5
   \   00002C   90....       MOV     DPTR,#global_flag
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   7002         JNZ     ??ZSendMsgProcess_6
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_6:
   \   000034   601E         JZ      ??ZSendMsgProcess_5
    117                  //break;
    118                  ;
    119                else
    120                {
    121                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   000036                ; Setup parameters for call to function HalUARTWrite
   \   000036   12....       LCALL   ?Subroutine3 & 0xFFFF
    122                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    123                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[0], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_20:
   \   000039   7A..         MOV     R2,#(global_entry & 0xff)
   \   00003B   7B..         MOV     R3,#((global_entry >> 8) & 0xff)
   \   00003D   12....       LCALL   ?Subroutine4 & 0xFFFF
    124                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    125                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[0], global_data_length[0]);//Device Data
   \                     ??CrossCallReturnLabel_29:
   \   000040                ; Setup parameters for call to function HalUARTWrite
   \   000040   90....       MOV     DPTR,#global_data_length
   \   000043   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000046   7A..         MOV     R2,#(global_recv_data & 0xff)
   \   000048   7B..         MOV     R3,#((global_recv_data >> 8) & 0xff)
   \   00004A   12....       LCALL   ?Subroutine5 & 0xFFFF
    126                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    127                global_flag[0]=0;
   \                     ??CrossCallReturnLabel_42:
   \   00004D   90....       MOV     DPTR,#global_flag
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   F0           MOVX    @DPTR,A
    128                }
    129                //break;      
    130              //case 1:
    131                if(stack <= top++ || global_flag[1]==0)
   \                     ??ZSendMsgProcess_5:
   \   000054   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000057   4003         JC      $+5
   \   000059   02....       LJMP    ??ZSendMsgProcess_0 & 0xFFFF
   \   00005C   90....       MOV     DPTR,#(global_flag + 2)
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   7002         JNZ     ??ZSendMsgProcess_7
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_7:
   \   000064   7003         JNZ     $+5
   \   000066   02....       LJMP    ??ZSendMsgProcess_0 & 0xFFFF
    132                  break;
    133                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   000069                ; Setup parameters for call to function HalUARTWrite
   \   000069   12....       LCALL   ?Subroutine3 & 0xFFFF
    134                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    135                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[1], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_21:
   \   00006C   7A..         MOV     R2,#((global_entry + 4) & 0xff)
   \   00006E   7B..         MOV     R3,#(((global_entry + 4) >> 8) & 0xff)
   \   000070   12....       LCALL   ?Subroutine4 & 0xFFFF
    136                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    137                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[1], global_data_length[1]);//Device Data
   \                     ??CrossCallReturnLabel_30:
   \   000073                ; Setup parameters for call to function HalUARTWrite
   \   000073   90....       MOV     DPTR,#(global_data_length + 1)
   \   000076   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000079   7A..         MOV     R2,#((global_recv_data + 30) & 0xff)
   \   00007B   7B..         MOV     R3,#(((global_recv_data + 30) >> 8) & 0xff)
   \   00007D   12....       LCALL   ?Subroutine5 & 0xFFFF
    138                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    139                global_flag[1]=0;
   \                     ??CrossCallReturnLabel_43:
   \   000080   90....       MOV     DPTR,#(global_flag + 2)
   \                     ??ZSendMsgProcess_8:
   \   000083   E4           CLR     A
   \   000084   02....       LJMP    ??ZSendMsgProcess_9 & 0xFFFF
    140                break;
    141              case 2:
    142                if(stack <= top++ || global_flag[2]==0)
   \                     ??ZSendMsgProcess_2:
   \   000087   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00008A   5028         JNC     ??ZSendMsgProcess_10
   \   00008C   90....       MOV     DPTR,#(global_flag + 4)
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   7002         JNZ     ??ZSendMsgProcess_11
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_11:
   \   000094   601E         JZ      ??ZSendMsgProcess_10
    143                  //break;
    144                  ;
    145                else
    146                {
    147                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   000096                ; Setup parameters for call to function HalUARTWrite
   \   000096   12....       LCALL   ?Subroutine3 & 0xFFFF
    148                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    149                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[2], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_22:
   \   000099   7A..         MOV     R2,#((global_entry + 8) & 0xff)
   \   00009B   7B..         MOV     R3,#(((global_entry + 8) >> 8) & 0xff)
   \   00009D   12....       LCALL   ?Subroutine4 & 0xFFFF
    150                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    151                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[2], global_data_length[2]);//Device Data
   \                     ??CrossCallReturnLabel_31:
   \   0000A0                ; Setup parameters for call to function HalUARTWrite
   \   0000A0   90....       MOV     DPTR,#(global_data_length + 2)
   \   0000A3   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000A6   7A..         MOV     R2,#((global_recv_data + 60) & 0xff)
   \   0000A8   7B..         MOV     R3,#(((global_recv_data + 60) >> 8) & 0xff)
   \   0000AA   12....       LCALL   ?Subroutine5 & 0xFFFF
    152                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    153                global_flag[2]=0;
   \                     ??CrossCallReturnLabel_44:
   \   0000AD   90....       MOV     DPTR,#(global_flag + 4)
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   F0           MOVX    @DPTR,A
    154                }
    155                //break;
    156              //case 3:    
    157                if(stack <= top++ || global_flag[3]==0)
   \                     ??ZSendMsgProcess_10:
   \   0000B4   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000B7   4003         JC      $+5
   \   0000B9   02....       LJMP    ??ZSendMsgProcess_0 & 0xFFFF
   \   0000BC   90....       MOV     DPTR,#(global_flag + 6)
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   7002         JNZ     ??ZSendMsgProcess_12
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_12:
   \   0000C4   7003         JNZ     $+5
   \   0000C6   02....       LJMP    ??ZSendMsgProcess_0 & 0xFFFF
    158                  break;
    159                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   0000C9                ; Setup parameters for call to function HalUARTWrite
   \   0000C9   12....       LCALL   ?Subroutine3 & 0xFFFF
    160                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    161                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[3], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_23:
   \   0000CC   7A..         MOV     R2,#((global_entry + 12) & 0xff)
   \   0000CE   7B..         MOV     R3,#(((global_entry + 12) >> 8) & 0xff)
   \   0000D0   12....       LCALL   ?Subroutine4 & 0xFFFF
    162                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    163                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[3], global_data_length[3]);//Device Data
   \                     ??CrossCallReturnLabel_32:
   \   0000D3                ; Setup parameters for call to function HalUARTWrite
   \   0000D3   90....       MOV     DPTR,#(global_data_length + 3)
   \   0000D6   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000D9   7A..         MOV     R2,#((global_recv_data + 90) & 0xff)
   \   0000DB   7B..         MOV     R3,#(((global_recv_data + 90) >> 8) & 0xff)
   \   0000DD   12....       LCALL   ?Subroutine5 & 0xFFFF
    164                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    165                global_flag[3]=0;
   \                     ??CrossCallReturnLabel_45:
   \   0000E0   90....       MOV     DPTR,#(global_flag + 6)
   \   0000E3   809E         SJMP    ??ZSendMsgProcess_8
    166                break;
    167              case 4:    
    168                if(stack <= top++ || global_flag[4]==0)
   \                     ??ZSendMsgProcess_3:
   \   0000E5   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000E8   5028         JNC     ??ZSendMsgProcess_13
   \   0000EA   90....       MOV     DPTR,#(global_flag + 8)
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   7002         JNZ     ??ZSendMsgProcess_14
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_14:
   \   0000F2   601E         JZ      ??ZSendMsgProcess_13
    169                  //break;
    170                  ;
    171                else
    172                {
    173                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   0000F4                ; Setup parameters for call to function HalUARTWrite
   \   0000F4   12....       LCALL   ?Subroutine3 & 0xFFFF
    174                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    175                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[4], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_24:
   \   0000F7   7A..         MOV     R2,#((global_entry + 16) & 0xff)
   \   0000F9   7B..         MOV     R3,#(((global_entry + 16) >> 8) & 0xff)
   \   0000FB   12....       LCALL   ?Subroutine4 & 0xFFFF
    176                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    177                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[4], global_data_length[4]);//Device Data
   \                     ??CrossCallReturnLabel_33:
   \   0000FE                ; Setup parameters for call to function HalUARTWrite
   \   0000FE   90....       MOV     DPTR,#(global_data_length + 4)
   \   000101   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000104   7A..         MOV     R2,#((global_recv_data + 120) & 0xff)
   \   000106   7B..         MOV     R3,#(((global_recv_data + 120) >> 8) & 0xff)
   \   000108   12....       LCALL   ?Subroutine5 & 0xFFFF
    178                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    179                global_flag[4]=0;
   \                     ??CrossCallReturnLabel_46:
   \   00010B   90....       MOV     DPTR,#(global_flag + 8)
   \   00010E   E4           CLR     A
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   A3           INC     DPTR
   \   000111   F0           MOVX    @DPTR,A
    180                }
    181                //break;
    182              //case 5:  
    183                if(stack <= top++ || global_flag[5]==0)
   \                     ??ZSendMsgProcess_13:
   \   000112   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000115   4003         JC      $+5
   \   000117   02....       LJMP    ??ZSendMsgProcess_0 & 0xFFFF
   \   00011A   90....       MOV     DPTR,#(global_flag + 10)
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   7002         JNZ     ??ZSendMsgProcess_15
   \   000120   A3           INC     DPTR
   \   000121   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_15:
   \   000122   7003         JNZ     $+5
   \   000124   02....       LJMP    ??ZSendMsgProcess_0 & 0xFFFF
    184                  break;
    185                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   000127                ; Setup parameters for call to function HalUARTWrite
   \   000127   12....       LCALL   ?Subroutine3 & 0xFFFF
    186                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    187                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[5], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_25:
   \   00012A   7A..         MOV     R2,#((global_entry + 20) & 0xff)
   \   00012C   7B..         MOV     R3,#(((global_entry + 20) >> 8) & 0xff)
   \   00012E   12....       LCALL   ?Subroutine4 & 0xFFFF
    188                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    189                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[5], global_data_length[5]);//Device Data
   \                     ??CrossCallReturnLabel_34:
   \   000131                ; Setup parameters for call to function HalUARTWrite
   \   000131   90....       MOV     DPTR,#(global_data_length + 5)
   \   000134   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000137   7A..         MOV     R2,#((global_recv_data + 150) & 0xff)
   \   000139   7B..         MOV     R3,#(((global_recv_data + 150) >> 8) & 0xff)
   \   00013B   12....       LCALL   ?Subroutine5 & 0xFFFF
    190                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    191                global_flag[5]=0;
   \                     ??CrossCallReturnLabel_47:
   \   00013E   90....       MOV     DPTR,#(global_flag + 10)
   \   000141   02....       LJMP    ??ZSendMsgProcess_8 & 0xFFFF
    192                break;
    193              case 6:    
    194                if(stack <= top++ || global_flag[6]==0)
   \                     ??ZSendMsgProcess_4:
   \   000144   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000147   5028         JNC     ??ZSendMsgProcess_16
   \   000149   90....       MOV     DPTR,#(global_flag + 12)
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   7002         JNZ     ??ZSendMsgProcess_17
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_17:
   \   000151   601E         JZ      ??ZSendMsgProcess_16
    195                  //break;
    196                  ;
    197                else
    198                {
    199                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   000153                ; Setup parameters for call to function HalUARTWrite
   \   000153   12....       LCALL   ?Subroutine3 & 0xFFFF
    200                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    201                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[6], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_26:
   \   000156   7A..         MOV     R2,#((global_entry + 24) & 0xff)
   \   000158   7B..         MOV     R3,#(((global_entry + 24) >> 8) & 0xff)
   \   00015A   12....       LCALL   ?Subroutine4 & 0xFFFF
    202                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    203                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[6], global_data_length[6]);//Device Data
   \                     ??CrossCallReturnLabel_35:
   \   00015D                ; Setup parameters for call to function HalUARTWrite
   \   00015D   90....       MOV     DPTR,#(global_data_length + 6)
   \   000160   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000163   7A..         MOV     R2,#((global_recv_data + 180) & 0xff)
   \   000165   7B..         MOV     R3,#(((global_recv_data + 180) >> 8) & 0xff)
   \   000167   12....       LCALL   ?Subroutine5 & 0xFFFF
    204                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    205                global_flag[6]=0;
   \                     ??CrossCallReturnLabel_48:
   \   00016A   90....       MOV     DPTR,#(global_flag + 12)
   \   00016D   E4           CLR     A
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   A3           INC     DPTR
   \   000170   F0           MOVX    @DPTR,A
    206                }
    207                //break;
    208              //case 7:  
    209                if(stack <= top++ || global_flag[7]==0)
   \                     ??ZSendMsgProcess_16:
   \   000171   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000174   5028         JNC     ??ZSendMsgProcess_18
   \   000176   90....       MOV     DPTR,#(global_flag + 14)
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   7002         JNZ     ??ZSendMsgProcess_19
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_19:
   \   00017E   601E         JZ      ??ZSendMsgProcess_18
    210                  //break;
    211                  ;
    212                else
    213                {
    214                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \   000180                ; Setup parameters for call to function HalUARTWrite
   \   000180   12....       LCALL   ?Subroutine3 & 0xFFFF
    215                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    216                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[7], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_27:
   \   000183   7A..         MOV     R2,#((global_entry + 28) & 0xff)
   \   000185   7B..         MOV     R3,#(((global_entry + 28) >> 8) & 0xff)
   \   000187   12....       LCALL   ?Subroutine4 & 0xFFFF
    217                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    218                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[7], global_data_length[7]);//Device Data
   \                     ??CrossCallReturnLabel_36:
   \   00018A                ; Setup parameters for call to function HalUARTWrite
   \   00018A   90....       MOV     DPTR,#(global_data_length + 7)
   \   00018D   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000190   7A..         MOV     R2,#((global_recv_data + 210) & 0xff)
   \   000192   7B..         MOV     R3,#(((global_recv_data + 210) >> 8) & 0xff)
   \   000194   12....       LCALL   ?Subroutine5 & 0xFFFF
    219                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n 
    220                global_flag[7]=0;
   \                     ??CrossCallReturnLabel_49:
   \   000197   90....       MOV     DPTR,#(global_flag + 14)
   \   00019A   E4           CLR     A
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   A3           INC     DPTR
   \   00019D   F0           MOVX    @DPTR,A
    221                }
    222                //break;
    223              //case 8:      
    224                if(stack <= top || global_flag[8]==0)
   \                     ??ZSendMsgProcess_18:
   \   00019E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001A1   7583..       MOV     DPH,#((top >> 8) & 0xff)
   \   0001A4   7582..       MOV     DPL,#(top & 0xff)
   \   0001A7   C3           CLR     C
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   98           SUBB    A,R0
   \   0001AA   A3           INC     DPTR
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   99           SUBB    A,R1
   \   0001AD   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001AF   65D0         XRL     A,PSW
   \   0001B1   33           RLC     A
   \   0001B2   500A         JNC     ??ZSendMsgProcess_20
   \   0001B4   90....       MOV     DPTR,#(global_flag + 16)
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   7002         JNZ     ??ZSendMsgProcess_21
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \                     ??ZSendMsgProcess_21:
   \   0001BC   7006         JNZ     ??ZSendMsgProcess_22
    225                {
    226                  top=0;
   \                     ??ZSendMsgProcess_20:
   \   0001BE   90....       MOV     DPTR,#top
   \   0001C1   02....       LJMP    ??ZSendMsgProcess_8 & 0xFFFF
    227                  break;
    228                }
    229                HalUARTWrite(MT_UART_DEFAULT_PORT, "3", 1);//Cmd Type
   \                     ??ZSendMsgProcess_22:
   \   0001C4                ; Setup parameters for call to function HalUARTWrite
   \   0001C4   12....       LCALL   ?Subroutine3 & 0xFFFF
    230                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma   
    231                HalUARTWrite(MT_UART_DEFAULT_PORT, global_entry[8], 4);//Device ID
                                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_28:
   \   0001C7   7A..         MOV     R2,#((global_entry + 32) & 0xff)
   \   0001C9   7B..         MOV     R3,#(((global_entry + 32) >> 8) & 0xff)
   \   0001CB   12....       LCALL   ?Subroutine4 & 0xFFFF
    232                HalUARTWrite(MT_UART_DEFAULT_PORT, ",", 1);//Comma
    233                HalUARTWrite(MT_UART_DEFAULT_PORT, global_recv_data[8], global_data_length[8]);//Device Data
   \                     ??CrossCallReturnLabel_37:
   \   0001CE                ; Setup parameters for call to function HalUARTWrite
   \   0001CE   90....       MOV     DPTR,#(global_data_length + 8)
   \   0001D1   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001D4   7A..         MOV     R2,#((global_recv_data + 240) & 0xff)
   \   0001D6   7B..         MOV     R3,#(((global_recv_data + 240) >> 8) & 0xff)
   \   0001D8   12....       LCALL   ?Subroutine5 & 0xFFFF
    234                HalUARTWrite(MT_UART_DEFAULT_PORT, "$\r\n", 3);//$\n
    235                global_flag[8]=0;
   \                     ??CrossCallReturnLabel_50:
   \   0001DB   90....       MOV     DPTR,#(global_flag + 16)
   \   0001DE   E4           CLR     A
   \   0001DF   F0           MOVX    @DPTR,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   F0           MOVX    @DPTR,A
    236                top=0;
   \   0001E2   90....       MOV     DPTR,#top
   \                     ??ZSendMsgProcess_9:
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6   A3           INC     DPTR
   \   0001E7   F0           MOVX    @DPTR,A
    237                break;
    238              default:
    239                break;
    240              }
    241          
    242              osal_start_timerEx( zclZigbeeReceiver_TaskID, ZDO_MSG_SEND_EVT, 1500 );        
   \                     ??ZSendMsgProcess_0:
   \   0001E8                ; Setup parameters for call to function osal_start_timerEx
   \   0001E8   7CDC         MOV     R4,#-0x24
   \   0001EA   7D05         MOV     R5,#0x5
   \   0001EC   7A00         MOV     R2,#0x0
   \   0001EE   7B08         MOV     R3,#0x8
   \   0001F0   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   F9           MOV     R1,A
   \   0001F5   12....       LCALL   ??osal_start_timerEx?relay
    243          }
   \   0001F8   7F06         MOV     R7,#0x6
   \   0001FA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#stack
   \   000003                REQUIRE ??Subroutine12_0
   \   000003                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C03         MOV     R4,#0x3
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(`?<Constant "$\\r\\n">` & 0xff)
   \   00000B   7B..         MOV     R3,#((`?<Constant "$\\r\\n">` >> 8) & 0xff)
   \   00000D                REQUIRE ?Subroutine9
   \   00000D                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(`?<Constant ",">` & 0xff)
   \   00000B   7B..         MOV     R3,#((`?<Constant ",">` >> 8) & 0xff)
   \   00000D   80..         SJMP    ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7C01         MOV     R4,#0x1
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A..         MOV     R2,#(`?<Constant "3">` & 0xff)
   \   000006   7B..         MOV     R3,#((`?<Constant "3">` >> 8) & 0xff)
   \   000008   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B   7C04         MOV     R4,#0x4
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#top
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   7401         MOV     A,#0x1
   \   00000A   2A           ADD     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   F9           MOV     R1,A
   \   00000F   90....       MOV     DPTR,#top
   \   000012   E8           MOV     A,R0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E9           MOV     A,R1
   \   000016   F0           MOVX    @DPTR,A
   \   000017   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00001A   C3           CLR     C
   \   00001B   EA           MOV     A,R2
   \   00001C   98           SUBB    A,R0
   \   00001D   EB           MOV     A,R3
   \   00001E   99           SUBB    A,R1
   \   00001F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000021   65D0         XRL     A,PSW
   \   000023   33           RLC     A
   \   000024   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   7D00         MOV     R5,#0x0
   \   000004   22           RET
    244          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void zclZigbeeRecv_Init( byte task_id )
   \                     zclZigbeeRecv_Init:
    246          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    247            zclZigbeeReceiver_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000009   F0           MOVX    @DPTR,A
    248            
    249            // Setup for the flash command's destination address ( Group )
    250            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;  // transmit mode - Group address
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   00000F   F0           MOVX    @DPTR,A
    251            zclZigbeeRecv_DstAddr.endPoint = ZIGBEERECV_ENDPOINT;        // end-point number:20
   \   000010   740D         MOV     A,#0xd
   \   000012   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000015   F0           MOVX    @DPTR,A
    252            zclZigbeeRecv_DstAddr.addr.shortAddr = RECV_GROUP;           // Group short address
   \   000016   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000019   7410         MOV     A,#0x10
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   7420         MOV     A,#0x20
   \   00001F   F0           MOVX    @DPTR,A
    253            
    254            // This App is part of the Zigbee Device Profile
    255            zclZD_Init( &zclZigbeeRecv_SimpleDesc ); 
   \   000020                ; Setup parameters for call to function zclZD_Init
   \   000020   7A..         MOV     R2,#(zclZigbeeRecv_SimpleDesc & 0xff)
   \   000022   7B..         MOV     R3,#((zclZigbeeRecv_SimpleDesc >> 8) & 0xff)
   \   000024   12....       LCALL   ??zclZD_Init?relay
    256            
    257            // Register the ZCL General Cluster Library callback functions
    258            zclGeneral_RegisterCmdCallbacks( ZIGBEERECV_ENDPOINT, &zclZigbeeReceiver_CmdCallbacks ); 
   \   000027                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000027   7A..         MOV     R2,#(zclZigbeeReceiver_CmdCallbacks & 0xff)
   \   000029   7B..         MOV     R3,#((zclZigbeeReceiver_CmdCallbacks >> 8) & 0xff)
   \   00002B   790D         MOV     R1,#0xd
   \   00002D   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
    259            
    260            // Register the application's attribute list
    261            zcl_registerAttrList( ZIGBEERECV_ENDPOINT, ZIGBEERECV_MAX_ATTRIBUTES, zclZigbeeRecv_Attrs ); 
   \   000030                ; Setup parameters for call to function zcl_registerAttrList
   \   000030   7C..         MOV     R4,#(zclZigbeeRecv_Attrs & 0xff)
   \   000032   7D..         MOV     R5,#((zclZigbeeRecv_Attrs >> 8) & 0xff)
   \   000034   7A0C         MOV     R2,#0xc
   \   000036   790D         MOV     R1,#0xd
   \   000038   12....       LCALL   ??zcl_registerAttrList?relay
    262            
    263            // Register the Application to receive the unprocessed Foundation command/response messages
    264            zcl_registerForMsg( zclZigbeeReceiver_TaskID ); 
   \   00003B                ; Setup parameters for call to function zcl_registerForMsg
   \   00003B   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??zcl_registerForMsg?relay
    265            
    266            // Register for all key events - This app will handle all key events
    267            RegisterForKeys( zclZigbeeReceiver_TaskID ); 
   \   000043                ; Setup parameters for call to function RegisterForKeys
   \   000043   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??RegisterForKeys?relay
    268            
    269            // By default, all devices start out in Group 1 ( register grouop )
    270            zclZigbeeRecv_Group.ID = RECV_GROUP;
   \   00004B   90....       MOV     DPTR,#zclZigbeeRecv_Group
   \   00004E   7410         MOV     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   7420         MOV     A,#0x20
   \   000054   F0           MOVX    @DPTR,A
    271            osal_memcpy( zclZigbeeRecv_Group.name, "RECV_GROUP", 8  );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   75....       MOV     ?V0 + 0,#(`?<Constant "RECV_GROUP">` & 0xff)
   \   000058   75....       MOV     ?V0 + 1,#((`?<Constant "RECV_GROUP">` >> 8) & 0xff)
   \   00005B   75..00       MOV     ?V0 + 2,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7C08         MOV     R4,#0x8
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7A..         MOV     R2,#((zclZigbeeRecv_Group + 2) & 0xff)
   \   000069   7B..         MOV     R3,#(((zclZigbeeRecv_Group + 2) >> 8) & 0xff)
   \   00006B   12....       LCALL   ??osal_memcpy?relay
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    272            aps_AddGroup( ZIGBEERECV_ENDPOINT, &zclZigbeeRecv_Group ); 
   \   000073                ; Setup parameters for call to function aps_AddGroup
   \   000073   7A..         MOV     R2,#(zclZigbeeRecv_Group & 0xff)
   \   000075   7B..         MOV     R3,#((zclZigbeeRecv_Group >> 8) & 0xff)
   \   000077   790D         MOV     R1,#0xd
   \   000079   12....       LCALL   ??aps_AddGroup?relay
    273            
    274            // Register for a test endpoint
    275            afRegister( &zigbeeReceiver_TestEp ); 
   \   00007C                ; Setup parameters for call to function afRegister
   \   00007C   7A..         MOV     R2,#(zigbeeReceiver_TestEp & 0xff)
   \   00007E   7B..         MOV     R3,#((zigbeeReceiver_TestEp >> 8) & 0xff)
   \   000080   12....       LCALL   ??afRegister?relay
    276           
    277            // Set osal event for zclZigbeeReceiver_TaskID, chris
    278            osal_set_event( zclZigbeeReceiver_TaskID, NWK_RETRY_DELAY);  
   \   000083                ; Setup parameters for call to function osal_set_event
   \   000083   7AE8         MOV     R2,#-0x18
   \   000085   7B03         MOV     R3,#0x3
   \   000087   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??osal_set_event?relay
    279          }
   \   00008F   7F03         MOV     R7,#0x3
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    280          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          uint16 zclZigbeeRecv_event_loop( uint8 task_id, uint16 events )
   \                     zclZigbeeRecv_event_loop:
    282          {   
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    283              afIncomingMSGPacket_t *MSGpkt;
    284              (void)task_id;  // Intentionally unreferenced parameter
    285            
    286              if ( events & SYS_EVENT_MSG ) // SYSTEM Message event
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??zclZigbeeRecv_event_loop_0
   \   000011   E9           MOV     A,R1
   \                     ??zclZigbeeRecv_event_loop_0:
   \   000012   7027         JNZ     ??zclZigbeeRecv_event_loop_1
    287              {
    288                while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigbeeReceiver_TaskID )) )
    289                {   
    290                  switch ( MSGpkt->hdr.event )
    291                  {       
    292                  case ZCL_INCOMING_MSG: //0x34 : Incoming ZCL foundation message
    293                      // Incoming ZCL Foundation command/response messages
    294                      zclZigbeeReceiver_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt ); 
    295                      break;          
    296                  case AF_DATA_CONFIRM_CMD:   
    297                      break;         
    298                  case ZDO_STATE_CHANGE:       
    299                      ZSendMsgProcess();            
    300                      break;                 
    301                  default:
    302                      break;
    303                  }
    304                  osal_msg_deallocate( (uint8 *)MSGpkt ); // Release the memory
    305                }
    306                return (events ^ SYS_EVENT_MSG); // return unprocessed events
    307              }
    308            
    309              // The user define application events
    310              switch ( events )
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_0`:
   \   000019   0000         DW        0
   \   00001B   0300         DW        3
   \   00001D   0100         DW        1
   \   00001F   ....         DW        ??zclZigbeeRecv_event_loop_2
   \   000021   0200         DW        2
   \   000023   ....         DW        ??zclZigbeeRecv_event_loop_3
   \   000025   0008         DW        2048
   \   000027   ....         DW        ??zclZigbeeRecv_event_loop_4
   \   000029   ....         DW        ??zclZigbeeRecv_event_loop_5
    311              {
    312                case ZDO_MSG_SEND_EVT:
    313                      ZSendMsgProcess();                
   \                     ??zclZigbeeRecv_event_loop_4:
   \   00002B                ; Setup parameters for call to function ZSendMsgProcess
   \   00002B   12....       LCALL   ??ZSendMsgProcess?relay
   \   00002E   02....       LJMP    ??zclZigbeeRecv_event_loop_5 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_6:
   \   000031                ; Setup parameters for call to function ZSendMsgProcess
   \   000031   12....       LCALL   ??ZSendMsgProcess?relay
   \                     ??zclZigbeeRecv_event_loop_7:
   \   000034                ; Setup parameters for call to function osal_msg_deallocate
   \   000034   EE           MOV     A,R6
   \   000035   FA           MOV     R2,A
   \   000036   EF           MOV     A,R7
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??zclZigbeeRecv_event_loop_1:
   \   00003B                ; Setup parameters for call to function osal_msg_receive
   \   00003B   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??osal_msg_receive?relay
   \   000043   8A..         MOV     ?V0 + 2,R2
   \   000045   8B..         MOV     ?V0 + 3,R3
   \   000047   AE..         MOV     R6,?V0 + 2
   \   000049   AF..         MOV     R7,?V0 + 3
   \   00004B   EE           MOV     A,R6
   \   00004C   7001         JNZ     ??zclZigbeeRecv_event_loop_8
   \   00004E   EF           MOV     A,R7
   \                     ??zclZigbeeRecv_event_loop_8:
   \   00004F   6058         JZ      ??zclZigbeeRecv_event_loop_9
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_1`:
   \   000059   00           DB        0
   \   00005A   02           DB        2
   \   00005B   34           DB        52
   \   00005C   ....         DW        ??zclZigbeeRecv_event_loop_10
   \   00005E   D1           DB        209
   \   00005F   ....         DW        ??zclZigbeeRecv_event_loop_6
   \   000061   ....         DW        ??zclZigbeeRecv_event_loop_7
   \                     ??zclZigbeeRecv_event_loop_10:
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_2`:
   \   000072   00           DB        0
   \   000073   02           DB        2
   \   000074   01           DB        1
   \   000075   ....         DW        ??zclZigbeeRecv_event_loop_11
   \   000077   04           DB        4
   \   000078   ....         DW        ??zclZigbeeRecv_event_loop_12
   \   00007A   ....         DW        ??zclZigbeeRecv_event_loop_13
   \                     ??zclZigbeeRecv_event_loop_11:
   \   00007C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FA           MOV     R2,A
   \   000081   EB           MOV     A,R3
   \   000082   C3           CLR     C
   \   000083   9A           SUBB    A,R2
   \   000084   5010         JNC     ??zclZigbeeRecv_event_loop_13
   \   000086   0B           INC     R3
   \   000087   80F6         SJMP    ??CrossCallReturnLabel_18
   \                     ??zclZigbeeRecv_event_loop_12:
   \   000089   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00008C   8001         SJMP    ??zclZigbeeRecv_event_loop_14
   \                     ??zclZigbeeRecv_event_loop_15:
   \   00008E   0B           INC     R3
   \                     ??zclZigbeeRecv_event_loop_14:
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   EB           MOV     A,R3
   \   000092   C3           CLR     C
   \   000093   9A           SUBB    A,R2
   \   000094   40F8         JC      ??zclZigbeeRecv_event_loop_15
   \                     ??zclZigbeeRecv_event_loop_13:
   \   000096   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FA           MOV     R2,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FB           MOV     R3,A
   \   00009E   EA           MOV     A,R2
   \   00009F   7001         JNZ     ??zclZigbeeRecv_event_loop_16
   \   0000A1   EB           MOV     A,R3
   \                     ??zclZigbeeRecv_event_loop_16:
   \   0000A2   6090         JZ      ??zclZigbeeRecv_event_loop_7
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   12....       LCALL   ??osal_mem_free?relay
   \   0000A7   808B         SJMP    ??zclZigbeeRecv_event_loop_7
   \                     ??zclZigbeeRecv_event_loop_9:
   \   0000A9   AA..         MOV     R2,?V0 + 0
   \   0000AB   7480         MOV     A,#-0x80
   \   0000AD   65..         XRL     A,?V0 + 1
   \   0000AF   FB           MOV     R3,A
   \   0000B0   8022         SJMP    ??zclZigbeeRecv_event_loop_17
    314                      break;
    315                case SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT: // ZIGBEE Receiver identify timeout event
    316                  if ( zclZigbeeRecv_IdentifyTime > 0 )
   \                     ??zclZigbeeRecv_event_loop_2:
   \   0000B2   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   7002         JNZ     ??zclZigbeeRecv_event_loop_18
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeRecv_event_loop_18:
   \   0000BA   600C         JZ      ??zclZigbeeRecv_event_loop_19
    317                       zclZigbeeRecv_IdentifyTime--;
   \   0000BC   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   24FF         ADD     A,#-0x1
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   34FF         ADDC    A,#-0x1
   \   0000C7   F0           MOVX    @DPTR,A
    318                       zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \                     ??zclZigbeeRecv_event_loop_19:
   \   0000C8                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   0000C8   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
   \   0000CB   8003         SJMP    ??zclZigbeeRecv_event_loop_5
    319                  break;   
    320                case UART_MSG_EVT: // The UART Message event
    321                  //Chris Msg incoming
    322                  zclUartReceiver();
   \                     ??zclZigbeeRecv_event_loop_3:
   \   0000CD                ; Setup parameters for call to function zclUartReceiver
   \   0000CD   12....       LCALL   ??zclUartReceiver?relay
    323                  break;
    324              }    
    325              return 0; // Discard unknown events
   \                     ??zclZigbeeRecv_event_loop_5:
   \   0000D0   7A00         MOV     R2,#0x0
   \   0000D2   7B00         MOV     R3,#0x0
   \                     ??zclZigbeeRecv_event_loop_17:
   \   0000D4   7F04         MOV     R7,#0x4
   \   0000D6   02....       LJMP    ?BANKED_LEAVE_XDATA
    326          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV     A,R6
   \   000001   2416         ADD     A,#0x16
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    327          
    328          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys )
                             ^
Warning[Pe177]: function "zclZigbeeReceiver_HandleKeys" was declared but never
          referenced
    329          {
    330            zAddrType_t dstAddr;
    331            (void)shift; // Intentionally unreferenced parameter
    332            
    333          #if defined(Coor_receiver) || defined (Router_receiver)
    334          
    335            if ( keys & HAL_KEY_SW1 ) // Init EndDevice bind reequest, and use cluster list important to binding.
    336            {
    337              dstAddr.addrMode = afAddr16Bit;
    338              dstAddr.addr.shortAddr = 0x0000;   // Coordinator makes the match
    339              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), ZIGBEERECV_ENDPOINT, // ZIGBEERECV_ENDPOINT = 13 is coordinator
    340                                    ZCL_HA_PROFILE_ID, ZCLZIGBEERECV_BINDINGLIST, bindingInClusters, 0,
    341                                    NULL, // No Outgoing clusters to bind
    342                                    TRUE );
    343            }
    344          #endif
    345          }
    346          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void )
   \                     zclZigbeeReceiver_ProcessIdentifyTimeChange:
    348          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    349            if ( zclZigbeeRecv_IdentifyTime > 0 )
   \   000004   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0:
   \   00000C   601F         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1
    350            {
    351              osal_start_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   7CE8         MOV     R4,#-0x18
   \   000010   7D03         MOV     R5,#0x3
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_start_timerEx?relay
    352              HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7B05         MOV     R3,#0x5
   \   000024   7AFF         MOV     R2,#-0x1
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   ??HalLedBlink?relay
   \   00002B   8022         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    353            }
    354            else
    355              {
    356                if ( zclZigbeeRecv_OnOff )
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1:
   \   00002D   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6009         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3
    357                {
    358                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7901         MOV     R1,#0x1
   \   000037   12....       LCALL   ??HalLedSet?relay
   \   00003A   8013         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    359                }
    360                else
    361                  {
    362                    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3:
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   ??HalLedSet?relay
    363                    osal_stop_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000043                ; Setup parameters for call to function osal_stop_timerEx
   \   000043   7A01         MOV     R2,#0x1
   \   000045   7B00         MOV     R3,#0x0
   \   000047   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   ??osal_stop_timerEx?relay
    364                  }
    365              }
    366          }
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2:
   \   00004F                REQUIRE ?Subroutine10
   \   00004F                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    367          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          static void zclZigbeeReceiver_BasicResetCB( void )
   \                     zclZigbeeReceiver_BasicResetCB:
    369          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    370            // Reset all attributes to default values
    371          }
   \   000000   02....       LJMP    ?BRET
    372          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclZigbeeReceiver_IdentifyCB:
    374          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    375            zclZigbeeRecv_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00000D   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    376            zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
    377          }
   \   000018   80..         SJMP    ?Subroutine10
    378          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
   \                     zclZigbeeReceiver_IdentifyQueryRspCB:
    380          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    381            (void)pRsp; // Query Response (with timeout value)
    382          }
   \   000000   02....       LJMP    ?BRET
    383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          static void zclZigbeeReceiver_OnOffCB( uint8 cmd )
   \                     zclZigbeeReceiver_OnOffCB:
    385          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    386            if ( cmd == COMMAND_ON ) // Turn on the light
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   700E         JNZ     ??zclZigbeeReceiver_OnOffCB_0
    387              zclZigbeeRecv_OnOff = LIGHT_ON;
   \                     ??zclZigbeeReceiver_OnOffCB_1:
   \   000009   7401         MOV     A,#0x1
   \                     ??zclZigbeeReceiver_OnOffCB_2:
   \   00000B   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   00000E   F0           MOVX    @DPTR,A
    388          
    389            else if ( cmd == COMMAND_OFF ) // Turn off the light
    390              zclZigbeeRecv_OnOff = LIGHT_OFF;
    391          
    392            else // Toggle the light
    393            {
    394              if ( zclZigbeeRecv_OnOff == LIGHT_OFF )
    395                    zclZigbeeRecv_OnOff = LIGHT_ON;
    396              else
    397                    zclZigbeeRecv_OnOff = LIGHT_OFF;
    398            }
    399          
    400            // In this sample app, we use LED4 to simulate the Light  
    401            if ( zclZigbeeRecv_OnOff == LIGHT_ON )
    402            {
    403              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON ); // setting the LED_1 on
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   FA           MOV     R2,A
   \   000010   7902         MOV     R1,#0x2
   \   000012   12....       LCALL   ??HalLedSet?relay
    404            }
    405            else
    406              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF ); // setting the LED_1 off
    407          }
   \   000015   80..         SJMP    ?Subroutine10
   \                     ??zclZigbeeReceiver_OnOffCB_0:
   \   000017   E9           MOV     A,R1
   \   000018   7003         JNZ     ??zclZigbeeReceiver_OnOffCB_3
   \                     ??zclZigbeeReceiver_OnOffCB_4:
   \   00001A   E4           CLR     A
   \   00001B   80EE         SJMP    ??zclZigbeeReceiver_OnOffCB_2
   \                     ??zclZigbeeReceiver_OnOffCB_3:
   \   00001D   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000020   E0           MOVX    A,@DPTR
   \   000021   70F7         JNZ     ??zclZigbeeReceiver_OnOffCB_4
   \   000023   80E4         SJMP    ??zclZigbeeReceiver_OnOffCB_1
    408          
    409          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
    410          {
    411            switch ( pInMsg->zclHdr.commandID )
    412            {
    413          #ifdef ZCL_READ
    414              case ZCL_CMD_READ_RSP:
    415                zclZigbeeReceiver_ProcessInReadRspCmd( pInMsg );
    416                break;
    417          #endif
    418                
    419          #ifdef ZCL_WRITE    
    420              case ZCL_CMD_WRITE_RSP:
    421                zclZigbeeReceiver_ProcessInWriteRspCmd( pInMsg );
    422                break;
    423          #endif
    424                
    425          #ifdef ZCL_REPORT
    426              case ZCL_CMD_CONFIG_REPORT: // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    427                break;
    428              case ZCL_CMD_CONFIG_REPORT_RSP:
    429                break;
    430              case ZCL_CMD_READ_REPORT_CFG:
    431                break;
    432              case ZCL_CMD_READ_REPORT_CFG_RSP:
    433                break;
    434              case ZCL_CMD_REPORT:
    435                break;
    436          #endif   
    437              case ZCL_CMD_DEFAULT_RSP:
    438                zclZigbeeReceiver_ProcessInDefaultRspCmd( pInMsg );
    439                break;
    440          #ifdef ZCL_DISCOVER     
    441              case ZCL_CMD_DISCOVER_RSP:
    442                zclZigbeeReceiver_ProcessInDiscRspCmd( pInMsg );
    443                break;
    444          #endif
    445                
    446              default:
    447                break;
    448            }
    449            if ( pInMsg->attrCmd )
    450              osal_mem_free( pInMsg->attrCmd );
    451          }
    452          
    453          #ifdef ZCL_READ
    454          
    455          static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    456          {
    457            zclReadRspCmd_t *readRspCmd;
    458            uint8 i;
    459          
    460            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    461            for (i = 0; i < readRspCmd->numAttr; i++)
    462            {
    463              // Notify the originator of the results of the original read attributes attempt and, 
    464              // for each successfull request, the value of the requested attribute
    465            }
    466            return TRUE; 
    467          }
    468          #endif // ZCL_READ
    469          
    470          #ifdef ZCL_WRITE
    471          
    472          static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    473          {
    474            zclWriteRspCmd_t *writeRspCmd;
    475            uint8 i;
    476          
    477            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    478            for (i = 0; i < writeRspCmd->numAttr; i++)
    479            {
    480              // Notify the device of the results of the its original write attributes command.
    481            }
    482            return TRUE; 
    483          }
    484          #endif // ZCL_WRITE
    485          
    486          static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    487          {
    488            // Device is notified of the Default Response command.
    489            (void)pInMsg;
    490            return TRUE; 
    491          }
    492          
    493          #ifdef ZCL_DISCOVER
    494          static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
    495          {
    496            zclDiscoverRspCmd_t *discoverRspCmd;
    497            uint8 i;
    498            
    499            discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
    500            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    501            {
    502              // Device is notified of the result of its attribute discovery command.
    503            }
    504            return TRUE;
    505          }
    506          #endif // ZCL_DISCOVER
    507          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          void zclUARTMsg_CallBack(uint8 port, uint8 event)
   \                     zclUARTMsg_CallBack:
    509          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    510            (void)port;
    511            
    512            if(Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT) > 0 )
   \   000005                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000005   7900         MOV     R1,#0x0
   \   000007   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00000A   EA           MOV     A,R2
   \   00000B   7001         JNZ     ??zclUARTMsg_CallBack_0
   \   00000D   EB           MOV     A,R3
   \                     ??zclUARTMsg_CallBack_0:
   \   00000E   6022         JZ      ??zclUARTMsg_CallBack_1
    513            {
    514                len = Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT );
   \   000010                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000015   EA           MOV     A,R2
   \   000016   90....       MOV     DPTR,#len
   \   000019   F0           MOVX    @DPTR,A
    515                HalUARTRead( MT_UART_DEFAULT_PORT, TransmitApp_Msg, len );
   \   00001A                ; Setup parameters for call to function HalUARTRead
   \   00001A   FC           MOV     R4,A
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A..         MOV     R2,#(TransmitApp_Msg & 0xff)
   \   00001F   7B..         MOV     R3,#((TransmitApp_Msg >> 8) & 0xff)
   \   000021   7900         MOV     R1,#0x0
   \   000023   12....       LCALL   ??HalUARTRead?relay
    516                osal_set_event( zclZigbeeReceiver_TaskID, UART_MSG_EVT );
   \   000026                ; Setup parameters for call to function osal_set_event
   \   000026   7A02         MOV     R2,#0x2
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??osal_set_event?relay
    517            }
    518          }
   \                     ??zclUARTMsg_CallBack_1:
   \   000032                REQUIRE ?Subroutine11
   \   000032                ; // Fall through to label ?Subroutine11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          void zclUartReceiver( void )
   \                     zclUartReceiver:
    521          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    522            for(uint8 length = 0; length < len; length++)
   \   000005   7A00         MOV     R2,#0x0
   \   000007   801F         SJMP    ??zclUartReceiver_0
    523            {
    524              uart_recv[length] = TransmitApp_Msg[length];
   \                     ??zclUartReceiver_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A882         MOV     R0,DPL
   \   00000D   E8           MOV     A,R0
   \   00000E   24..         ADD     A,#(TransmitApp_Msg & 0xff)
   \   000010   F582         MOV     DPL,A
   \   000012   E4           CLR     A
   \   000013   34..         ADDC    A,#((TransmitApp_Msg >> 8) & 0xff)
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   E8           MOV     A,R0
   \   00001B   24..         ADD     A,#(uart_recv & 0xff)
   \   00001D   F582         MOV     DPL,A
   \   00001F   E4           CLR     A
   \   000020   34..         ADDC    A,#((uart_recv >> 8) & 0xff)
   \   000022   F583         MOV     DPH,A
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    525            }
   \   000027   0A           INC     R2
   \                     ??zclUartReceiver_0:
   \   000028   90....       MOV     DPTR,#len
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FB           MOV     R3,A
   \   00002D   EA           MOV     A,R2
   \   00002E   C3           CLR     C
   \   00002F   9B           SUBB    A,R3
   \   000030   40D7         JC      ??zclUartReceiver_1
    526          
    527            HalUARTWrite(MT_UART_DEFAULT_PORT, uart_recv, len);    
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000035   7A..         MOV     R2,#(uart_recv & 0xff)
   \   000037   7B..         MOV     R3,#((uart_recv >> 8) & 0xff)
   \   000039   7900         MOV     R1,#0x0
   \   00003B   12....       LCALL   ??HalUARTWrite?relay
    528            
    529            // Set the End Device state
    530            zclZigbeeRecv_DstAddr.endPoint = 12;
   \   00003E   740C         MOV     A,#0xc
   \   000040   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000043   F0           MOVX    @DPTR,A
    531            zclZigbeeRecv_DstAddr.addr.shortAddr = 0xFFFF;
   \   000044   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000047   74FF         MOV     A,#-0x1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
    532            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00004C   740F         MOV     A,#0xf
   \   00004E   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   000051   F0           MOVX    @DPTR,A
    533              
    534            // Transmit the UART command to End Device
    535            uint8 send = zcl_SendCommand( ZIGBEERECV_ENDPOINT, 
    536                                          &zclZigbeeRecv_DstAddr,
    537                                          ZCL_CLUSTER_ID_GEN_ON_OFF,
    538                                          COMMAND_TOGGLE,
    539                                          TRUE,
    540                                          ZCL_FRAME_CLIENT_SERVER_DIR,
    541                                          false,
    542                                          0,
    543                                          0,
    544                                          10,
    545                                          uart_recv );
   \   000052                ; Setup parameters for call to function zcl_SendCommand
   \   000052   75....       MOV     ?V0 + 0,#(uart_recv & 0xff)
   \   000055   75....       MOV     ?V0 + 1,#((uart_recv >> 8) & 0xff)
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..0A       MOV     ?V0 + 0,#0xa
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..00       MOV     ?V0 + 0,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   75..02       MOV     ?V0 + 0,#0x2
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   7C06         MOV     R4,#0x6
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A..         MOV     R2,#(zclZigbeeRecv_DstAddr & 0xff)
   \   000095   7B..         MOV     R3,#((zclZigbeeRecv_DstAddr >> 8) & 0xff)
   \   000097   790D         MOV     R1,#0xd
   \   000099   12....       LCALL   ??zcl_SendCommand?relay
   \   00009C   740B         MOV     A,#0xb
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    546          }
   \   0000A1   02....       LJMP    ?Subroutine11 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zigbeeReceiver_TestEp>`:
   \   000000   14           DB 20
   \   000001   ....0000     DW zclZigbeeReceiver_TaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclZigbeeReceiver_CmdCallbac`:
   \   000000   ....         DW ??zclZigbeeReceiver_BasicResetCB?relay
   \   000002   ....         DW ??zclZigbeeReceiver_IdentifyCB?relay
   \   000004   ....         DW ??zclZigbeeReceiver_IdentifyQueryRspCB?relay
   \   000006   ....0000     DW ??zclZigbeeReceiver_OnOffCB?relay, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
   \            00000000
   \            00000000
   \            00000000
   \            0000    
   \   000018   00000000     DW 0H, 0H
   \   00001C   0000         DB 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZSendMsgProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZSendMsgProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_OnOffCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUARTMsg_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUARTMsg_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUartReceiver?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUartReceiver

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "3">`:
   \   000000   3300         DB "3"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",">`:
   \   000000   2C00         DB ","

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$\\r\\n">`:
   \   000000   240D0A00     DB "$\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RECV_GROUP">`:
   \   000000   52454356     DB "RECV_GROUP"
   \            5F47524F
   \            555000  

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ZSendMsgProcess                    2      0     26
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> osal_start_timerEx            0      0     28
     zclUARTMsg_CallBack                0      0     10
       -> Hal_UART_RxBufLen             0      0     20
       -> Hal_UART_RxBufLen             0      0     20
       -> HalUARTRead                   0      0     20
       -> osal_set_event                0      0     20
     zclUartReceiver                    1      0     33
       -> HalUARTWrite                  0      0     20
       -> zcl_SendCommand               0      0     42
     zclZigbeeReceiver_BasicResetCB     0      0      0
     zclZigbeeReceiver_IdentifyCB       2      0      0
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        4      0      0
     zclZigbeeReceiver_IdentifyQueryRspCB
                                        0      0      0
     zclZigbeeReceiver_OnOffCB          2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        2      0     12
       -> osal_start_timerEx            4      0      0
       -> HalLedBlink                   4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_stop_timerEx             4      0      0
     zclZigbeeRecv_Init                 0      0     14
       -> zclZD_Init                    0      0     22
       -> zclGeneral_RegisterCmdCallbacks
                                        0      0     22
       -> zcl_registerAttrList          0      0     22
       -> zcl_registerForMsg            0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> afRegister                    0      0     22
       -> osal_set_event                0      0     22
     zclZigbeeRecv_event_loop           1      0     12
       -> ZSendMsgProcess               0      0     24
       -> ZSendMsgProcess               0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> osal_mem_free                 0      0     24
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        0      0     24
       -> zclUartReceiver               0      0     24


   Segment part sizes:

     Function/Label                                  Bytes
     --------------                                  -----
     send_msg_counter                                   1
     zclZigbeeReceiver_TaskID                           1
     ZDO_MSG_SEND_ID                                    1
     len                                                1
     TransmitApp_Msg                                  102
     UartTransmit_Msg                                 102
     uart_recv                                        102
     zclZigbeeRecv_DstAddr                             12
     zclZigbeeRecv_Group                               18
     zigbeeReceiver_TestEp                              6
     zclZigbeeReceiver_CmdCallbacks                    30
     top                                                2
     ZSendMsgProcess                                  509
     ?Subroutine6                                       3
     ??Subroutine12_0                                   6
     ?Subroutine5                                      13
     ?Subroutine9                                       6
     ?Subroutine4                                       4
     ?Subroutine7                                      15
     ?Subroutine3                                      16
     ?Subroutine0                                      37
     ?Subroutine1                                       5
     zclZigbeeRecv_Init                               148
     zclZigbeeRecv_event_loop                         217
     ?Subroutine2                                      13
     ?Subroutine8                                      11
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                                       79
     ?Subroutine10                                      7
     zclZigbeeReceiver_BasicResetCB                     3
     zclZigbeeReceiver_IdentifyCB                      26
     zclZigbeeReceiver_IdentifyQueryRspCB
                                                        3
     zclZigbeeReceiver_OnOffCB                         37
     zclUARTMsg_CallBack                               50
     ?Subroutine11                                      5
     zclUartReceiver                                  164
     ?<Initializer for zigbeeReceiver_TestEp>           6
     ?<Initializer for zclZigbeeReceiver_CmdCallbac    30
     ??ZSendMsgProcess?relay                            6
     ??zclZigbeeRecv_Init?relay                         6
     ??zclZigbeeRecv_event_loop?relay                   6
     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r    6
     ??zclZigbeeReceiver_BasicResetCB?relay             6
     ??zclZigbeeReceiver_IdentifyCB?relay               6
     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay       6
     ??zclZigbeeReceiver_OnOffCB?relay                  6
     ??zclUARTMsg_CallBack?relay                        6
     ??zclUartReceiver?relay                            6
     ?<Constant "3">                                    2
     ?<Constant ",">                                    2
     ?<Constant "$\r\n">                                4
     ?<Constant "RECV_GROUP">                          11

 
 1 377 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    36 bytes in segment XDATA_I
    36 bytes in segment XDATA_ID
    19 bytes in segment XDATA_ROM_C
   342 bytes in segment XDATA_Z
 
 1 473 bytes of CODE  memory
    19 bytes of CONST memory
   378 bytes of XDATA memory

Errors: none
Warnings: 10
