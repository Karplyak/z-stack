###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                16/Aug/2013  20:25:03 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\z-stack\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c                #
#    Command line       =  -f "D:\z-stack\z-stack\Sensor Network              #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\z-stack\z-stack\Sensor Network              #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c" -D CC2530 -D  #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\z-stack\z-stack\Sensor #
#                           Network Example\Projects\zstack\Sensor Network    #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\z-stack\z-stack\Sensor    #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\z-stack\z-stack\Sensor Network                 #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\z-stack\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "D:\z-stack\z-stack\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\z-stack\z-stack\Sensor Network     #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\z-stack\z-stack\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\z-stack\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\z-stack\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\z-stack\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\z-stack\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\z-stack\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\z-stack\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\z-stack\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\z-stack\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\z-stack\z-stack\Sensor Network              #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\z-stack\z-stack\Sensor Network     #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\z-stack\z-stack\Sensor Network     #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\z-stack\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\z-stack\z-stack\Sensor Network     #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\z-stack\z-stack\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\z-stack\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\zcl_zigbee  #
#                          receiver.lst                                       #
#    Object file        =  D:\z-stack\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\zcl_zigbee   #
#                          receiver.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\z-stack\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Coordinator & Router\Source\zcl_zigbee receiver.c
      1          /**************************************************************************************************
      2            Filename:       zcl_zigbee receiver.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Zigbee Cluster Library - ZIGBEE Receiver device application.
      7          
      8            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            Should you have any questions regarding your right to use this Software,
     11            contact Texas Instruments Incorporated at www.TI.com. 
     12          **************************************************************************************************/
     13          
     14          /*********************************************************************
     15           * INCLUDES
     16           */
     17          #include <stdio.h>
     18          #include <string.h>
     19          #include "ZComDef.h"
     20          #include "OSAL.h"
     21          #include "AF.h"
     22          #include "ZDApp.h"
     23          
     24          /* ZCL */
     25          #include "zcl.h"
     26          #include "zcl_general.h"
     27          #include "zcl_ha.h"
     28          #include "zcl_zigbee receiver.h"
     29          
     30          /* HAL */
     31          #include "onboard.h"
     32          #include "hal_lcd.h"
     33          #include "hal_led.h"
     34          #include "hal_timer.h"
     35          #include "hal_uart.h"
     36          #include "hal_key.h"
     37          #include "hal_keypad.h"
     38          
     39          /* MAC_high-level */
     40          #include "mac_high_level.h"
     41          
     42          /* MT */
     43          #include "MT_UART.h"
     44          #include "MT.h"
     45          
     46          #include "ZComDef.h"
     47          /*********************************************************************
     48           * MACROS
     49           */
     50          /*********************************************************************
     51           * CONSTANTS
     52           */
     53           #define TRANSMITAPP_MAX_DATA_LEN    102
     54          
     55          /*********************************************************************
     56           * TYPEDEFS
     57           */
     58          /*********************************************************************
     59           * GLOBAL VARIABLES
     60           */
     61          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     62          uint8 send_msg_counter = 0;
   \                     send_msg_counter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     63          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     64          byte zclZigbeeReceiver_TaskID; // The zigbee task_ID
   \                     zclZigbeeReceiver_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     65          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          byte ZDO_MSG_SEND_ID; // The zigbee task_ID
   \                     ZDO_MSG_SEND_ID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     67          
     68          // The UART transmit variable and array
     69          // the transmit data length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          uint8 len; 
   \                     len:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          // Transmit message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     73          // The coordinator send to device message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          byte UartTransmit_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     UartTransmit_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     75          // Receive the UART command

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8 uart_recv[TRANSMITAPP_MAX_DATA_LEN]; 
   \                     uart_recv:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     77          
     78          /*********************************************************************
     79           * GLOBAL FUNCTIONS
     80           */
     81          
     82          /*********************************************************************
     83           * LOCAL VARIABLES
     84           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          afAddrType_t zclZigbeeRecv_DstAddr;  // AF address type
   \                     zclZigbeeRecv_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          aps_Group_t zclZigbeeRecv_Group;
   \                     zclZigbeeRecv_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     87          
     88          #define ZCLZIGBEERECV_BINDINGLIST       2
     89          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          static cId_t bindingInClusters[ZCLZIGBEERECV_BINDINGLIST] =
   \                     bindingInClusters:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for bindingInClusters>`
   \   000004                REQUIRE __INIT_XDATA_I
     91          {
     92            ZCL_CLUSTER_ID_GEN_ON_OFF,
     93            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
     94          };
     95          
     96          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          static endPointDesc_t zigbeeReceiver_TestEp =
   \                     zigbeeReceiver_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for zigbeeReceiver_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
     98          {
     99            20,                                 // Test endpoint
    100            &zclZigbeeReceiver_TaskID,
    101            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    102            (afNetworkLatencyReq_t)0            // No Network Latency req
    103          };
    104          
    105          /*********************************************************************
    106           * LOCAL FUNCTIONS
    107           */
    108          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys );
    109          static void zclZigbeeReceiver_BasicResetCB( void );
    110          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd );
    111          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    112          static void zclZigbeeReceiver_OnOffCB( uint8 cmd );
    113          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void );
    114          
    115          void zclUARTMsg_CallBack(uint8 port, uint8 event); // The UART Message callback
    116          void zclUartReceiver( void ); // The coordinator receive command function
    117          
    118          // Functions to process ZCL Foundation incoming Command/Response messages 
    119          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    120          #ifdef ZCL_READ
    121            static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    122          #endif
    123          #ifdef ZCL_WRITE
    124            static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    125          #endif
    126            static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    127          #ifdef ZCL_DISCOVER
    128            static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
    129          #endif
    130            
    131          /*********************************************************************
    132           * ZCL General Profile Callback table
    133           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134          static zclGeneral_AppCallbacks_t zclZigbeeReceiver_CmdCallbacks =
   \                     zclZigbeeReceiver_CmdCallbacks:
   \   000000                DS 30
   \   00001E                REQUIRE `?<Initializer for zclZigbeeReceiver_CmdCallbac`
   \   00001E                REQUIRE __INIT_XDATA_I
    135          {
    136            zclZigbeeReceiver_BasicResetCB,              // Basic Cluster Reset command
    137            zclZigbeeReceiver_IdentifyCB,                // Identify command  
    138            zclZigbeeReceiver_IdentifyQueryRspCB,        // Identify Query Response command
    139            zclZigbeeReceiver_OnOffCB,                   // On/Off cluster command
    140            NULL,                                        // Level Control Move to Level command
    141            NULL,                                        // Level Control Move command
    142            NULL,                                        // Level Control Step command
    143            NULL,                                        // Group Response commands
    144            NULL,                                        // Scene Store Request command
    145            NULL,                                        // Scene Recall Request command
    146            NULL,                                        // Scene Response command
    147            NULL,                                        // Alarm (Response) command
    148            NULL,                                        // RSSI Location commands
    149            NULL,                                        // RSSI Location Response commands
    150          };
    151          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    152          void ZSendMsgProcess(char *temp)
   \                     ZSendMsgProcess:
    153          {  
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    154          //    show("ZSendMsgProcess"); 
    155          //    afIncomingMSGPacket_t *MSGpkt;
    156          //    char buf[64];
    157              
    158          //    memset(buf, 0x0, 64);
    159          //    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigbeeReceiver_TaskID );
    160          //    sprintf(buf, "%s", MSGpkt->cmd.Data);
    161           //   sprintf(buf, "%s", temp);
    162          //    show(device_manager.Type);
    163              
    164          //    sprintf(buf, "\r%s\n", temp);
    165            
    166              HalUARTWrite(HAL_UART_PORT_0, device_manager.Type, 8);
                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C08         MOV     R4,#0x8
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(device_manager & 0xff)
   \   00000B   7B..         MOV     R3,#((device_manager >> 8) & 0xff)
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
    167              HalUARTWrite(HAL_UART_PORT_0, device_manager.Module, 10);   
                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000012                ; Setup parameters for call to function HalUARTWrite
   \   000012   7C0A         MOV     R4,#0xa
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A..         MOV     R2,#((device_manager + 8) & 0xff)
   \   000018   7B..         MOV     R3,#(((device_manager + 8) >> 8) & 0xff)
   \   00001A   12....       LCALL   ?Subroutine1 & 0xFFFF
    168              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 3);     
    169              HalUARTWrite(HAL_UART_PORT_0, device_manager.Data, 20);   
                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??CrossCallReturnLabel_2:
   \   00001D                ; Setup parameters for call to function HalUARTWrite
   \   00001D   7C14         MOV     R4,#0x14
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A..         MOV     R2,#((device_manager + 18) & 0xff)
   \   000023   7B..         MOV     R3,#(((device_manager + 18) >> 8) & 0xff)
   \   000025   12....       LCALL   ?Subroutine1 & 0xFFFF
    170              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 3);   
    171           
    172          //    show(device_manager.Data);    
    173          //    show(device_manager.Module);    
    174             
    175              osal_start_timerEx( zclZigbeeReceiver_TaskID, ZDO_MSG_SEND_EVT, 3000 );        
   \                     ??CrossCallReturnLabel_3:
   \   000028                ; Setup parameters for call to function osal_start_timerEx
   \   000028   7CB8         MOV     R4,#-0x48
   \   00002A   7D0B         MOV     R5,#0xb
   \   00002C   7A00         MOV     R2,#0x0
   \   00002E   7B08         MOV     R3,#0x8
   \   000030   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   ??osal_start_timerEx?relay
    176          }
   \   000038   7F01         MOV     R7,#0x1
   \   00003A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C03         MOV     R4,#0x3
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#(`?<Constant "\\r\\n">` & 0xff)
   \   00000B   7B..         MOV     R3,#((`?<Constant "\\r\\n">` >> 8) & 0xff)
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    177          
    178          /*********************************************************************
    179           * @fn          zclZigbeeRecv_Init
    180           * @brief       Initialization function for the zclGeneral layer.
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void zclZigbeeRecv_Init( byte task_id )
   \                     zclZigbeeRecv_Init:
    183          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    184            zclZigbeeReceiver_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000009   F0           MOVX    @DPTR,A
    185            
    186            // Setup for the flash command's destination address ( Group )
    187            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;  // transmit mode - Group address
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   00000F   F0           MOVX    @DPTR,A
    188            zclZigbeeRecv_DstAddr.endPoint = ZIGBEERECV_ENDPOINT;        // end-point number:20
   \   000010   740D         MOV     A,#0xd
   \   000012   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000015   F0           MOVX    @DPTR,A
    189            zclZigbeeRecv_DstAddr.addr.shortAddr = RECV_GROUP;           // Group short address
   \   000016   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000019   7410         MOV     A,#0x10
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   7420         MOV     A,#0x20
   \   00001F   F0           MOVX    @DPTR,A
    190            
    191            // This App is part of the Zigbee Device Profile
    192            zclZD_Init( &zclZigbeeRecv_SimpleDesc ); 
   \   000020                ; Setup parameters for call to function zclZD_Init
   \   000020   7A..         MOV     R2,#(zclZigbeeRecv_SimpleDesc & 0xff)
   \   000022   7B..         MOV     R3,#((zclZigbeeRecv_SimpleDesc >> 8) & 0xff)
   \   000024   12....       LCALL   ??zclZD_Init?relay
    193            
    194            // Register the ZCL General Cluster Library callback functions
    195            zclGeneral_RegisterCmdCallbacks( ZIGBEERECV_ENDPOINT, &zclZigbeeReceiver_CmdCallbacks ); 
   \   000027                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000027   7A..         MOV     R2,#(zclZigbeeReceiver_CmdCallbacks & 0xff)
   \   000029   7B..         MOV     R3,#((zclZigbeeReceiver_CmdCallbacks >> 8) & 0xff)
   \   00002B   790D         MOV     R1,#0xd
   \   00002D   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
    196            
    197            // Register the application's attribute list
    198            zcl_registerAttrList( ZIGBEERECV_ENDPOINT, ZIGBEERECV_MAX_ATTRIBUTES, zclZigbeeRecv_Attrs ); 
   \   000030                ; Setup parameters for call to function zcl_registerAttrList
   \   000030   7C..         MOV     R4,#(zclZigbeeRecv_Attrs & 0xff)
   \   000032   7D..         MOV     R5,#((zclZigbeeRecv_Attrs >> 8) & 0xff)
   \   000034   7A0C         MOV     R2,#0xc
   \   000036   790D         MOV     R1,#0xd
   \   000038   12....       LCALL   ??zcl_registerAttrList?relay
    199            
    200            // Register the Application to receive the unprocessed Foundation command/response messages
    201            zcl_registerForMsg( zclZigbeeReceiver_TaskID ); 
   \   00003B                ; Setup parameters for call to function zcl_registerForMsg
   \   00003B   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??zcl_registerForMsg?relay
    202            
    203            // Register for all key events - This app will handle all key events
    204            RegisterForKeys( zclZigbeeReceiver_TaskID ); 
   \   000043                ; Setup parameters for call to function RegisterForKeys
   \   000043   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??RegisterForKeys?relay
    205            
    206            // By default, all devices start out in Group 1 ( register grouop )
    207            zclZigbeeRecv_Group.ID = RECV_GROUP;
   \   00004B   90....       MOV     DPTR,#zclZigbeeRecv_Group
   \   00004E   7410         MOV     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   7420         MOV     A,#0x20
   \   000054   F0           MOVX    @DPTR,A
    208            osal_memcpy( zclZigbeeRecv_Group.name, "RECV_GROUP", 8  );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   75....       MOV     ?V0 + 0,#(`?<Constant "RECV_GROUP">` & 0xff)
   \   000058   75....       MOV     ?V0 + 1,#((`?<Constant "RECV_GROUP">` >> 8) & 0xff)
   \   00005B   75..00       MOV     ?V0 + 2,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7C08         MOV     R4,#0x8
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7A..         MOV     R2,#((zclZigbeeRecv_Group + 2) & 0xff)
   \   000069   7B..         MOV     R3,#(((zclZigbeeRecv_Group + 2) >> 8) & 0xff)
   \   00006B   12....       LCALL   ??osal_memcpy?relay
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    209            aps_AddGroup( ZIGBEERECV_ENDPOINT, &zclZigbeeRecv_Group ); 
   \   000073                ; Setup parameters for call to function aps_AddGroup
   \   000073   7A..         MOV     R2,#(zclZigbeeRecv_Group & 0xff)
   \   000075   7B..         MOV     R3,#((zclZigbeeRecv_Group >> 8) & 0xff)
   \   000077   790D         MOV     R1,#0xd
   \   000079   12....       LCALL   ??aps_AddGroup?relay
    210            
    211            // Register for a test endpoint
    212            afRegister( &zigbeeReceiver_TestEp ); 
   \   00007C                ; Setup parameters for call to function afRegister
   \   00007C   7A..         MOV     R2,#(zigbeeReceiver_TestEp & 0xff)
   \   00007E   7B..         MOV     R3,#((zigbeeReceiver_TestEp >> 8) & 0xff)
   \   000080   12....       LCALL   ??afRegister?relay
    213              osal_set_event( zclZigbeeReceiver_TaskID, NWK_RETRY_DELAY);//chris  
   \   000083                ; Setup parameters for call to function osal_set_event
   \   000083   7AE8         MOV     R2,#-0x18
   \   000085   7B03         MOV     R3,#0x3
   \   000087   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??osal_set_event?relay
    214          }
   \   00008F   7F03         MOV     R7,#0x3
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    215          
    216          /*********************************************************************
    217           * @fn          zclZigbeeRecv_event_loop
    218           * @brief       Event Loop Processor for zclGeneral.
    219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    220          uint16 zclZigbeeRecv_event_loop( uint8 task_id, uint16 events )
   \                     zclZigbeeRecv_event_loop:
    221          {   
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
    222              afIncomingMSGPacket_t *MSGpkt;
    223              (void)task_id;  // Intentionally unreferenced parameter
    224            
    225              if ( events & SYS_EVENT_MSG ) // SYSTEM Message event
   \   00000E   7480         MOV     A,#-0x80
   \   000010   55..         ANL     A,?V0 + 3
   \   000012   F9           MOV     R1,A
   \   000013   E4           CLR     A
   \   000014   7001         JNZ     ??zclZigbeeRecv_event_loop_0
   \   000016   E9           MOV     A,R1
   \                     ??zclZigbeeRecv_event_loop_0:
   \   000017   7033         JNZ     ??zclZigbeeRecv_event_loop_1
    226              {
    227                while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigbeeReceiver_TaskID )) )
    228                {   
    229                  switch ( MSGpkt->hdr.event )
    230                  {       
    231                  case ZCL_INCOMING_MSG: //0x34 : Incoming ZCL foundation message
    232                      show("ZCL_INCOMING_MSG");
    233                      // Incoming ZCL Foundation command/response messages
    234                      zclZigbeeReceiver_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt ); 
    235                      break; 
    236                  case KEY_CHANGE: //0xC0 : Key Events
    237                      show("KEY_CHANGE");
    238                      zclZigbeeReceiver_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );            
    239                      break;           
    240                  case AF_DATA_CONFIRM_CMD:           
    241                        strcpy(device_manager.Type, "\r 1 \n");  
    242                        strcpy(device_manager.Module, "\r 140 \n");                            
    243                        strncpy(device_manager.Data, MSGpkt->cmd.Data, 14);         
                                                            ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
    244                      break;         
    245                  case ZDO_STATE_CHANGE:       
    246          //            show("ZDO_STATE_CHANGE");
    247                      ZSendMsgProcess("Hi");            
    248                      break;         
    249                  case ZDO_MATCH_DESC_RSP_SENT:       
    250                      show("ZDO_MATCH_DESC_RSP_SENT");
    251                      // Check the state of NWK
    252                      break;         
    253                    default:
    254                      break;
    255                  }
    256                  osal_msg_deallocate( (uint8 *)MSGpkt ); // Release the memory
    257                }
    258                return (events ^ SYS_EVENT_MSG); // return unprocessed events
    259              }
    260            
    261              // The user define application events
    262              switch ( events )
   \   000019   78..         MOV     R0,#?V0 + 2
   \   00001B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_0`:
   \   00001E   0000         DW        0
   \   000020   0400         DW        4
   \   000022   0100         DW        1
   \   000024   ....         DW        ??zclZigbeeRecv_event_loop_2
   \   000026   0200         DW        2
   \   000028   ....         DW        ??zclZigbeeRecv_event_loop_3
   \   00002A   0300         DW        3
   \   00002C   ....         DW        ??zclZigbeeRecv_event_loop_4
   \   00002E   0008         DW        2048
   \   000030   ....         DW        ??zclZigbeeRecv_event_loop_5
   \   000032   ....         DW        ??zclZigbeeRecv_event_loop_6
    263              {
    264                case ZDO_MSG_SEND_EVT:
    265          //          show("ZDO_MSG_SEND_EVT");
    266                      ZSendMsgProcess("Chris:ZDO_MSG_SEND_EVT");                
   \                     ??zclZigbeeRecv_event_loop_5:
   \   000034                ; Setup parameters for call to function ZSendMsgProcess
   \   000034   7A..         MOV     R2,#(`?<Constant "Chris:ZDO_MSG_SEND_EVT">` & 0xff)
   \   000036   7B..         MOV     R3,#((`?<Constant "Chris:ZDO_MSG_SEND_EVT">` >> 8) & 0xff)
   \   000038   12....       LCALL   ??ZSendMsgProcess?relay
   \   00003B   02....       LJMP    ??zclZigbeeRecv_event_loop_6 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_7:
   \   00003E                ; Setup parameters for call to function show
   \   00003E   7A..         MOV     R2,#(`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` & 0xff)
   \   000040   7B..         MOV     R3,#((`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` >> 8) & 0xff)
   \   000042   12....       LCALL   ??show?relay
   \                     ??zclZigbeeRecv_event_loop_8:
   \   000045                ; Setup parameters for call to function osal_msg_deallocate
   \   000045   AA..         MOV     R2,?V0 + 0
   \   000047   AB..         MOV     R3,?V0 + 1
   \   000049   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??zclZigbeeRecv_event_loop_1:
   \   00004C                ; Setup parameters for call to function osal_msg_receive
   \   00004C   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_receive?relay
   \   000054   8A..         MOV     ?V0 + 0,R2
   \   000056   8B..         MOV     ?V0 + 1,R3
   \   000058   EA           MOV     A,R2
   \   000059   7001         JNZ     ??zclZigbeeRecv_event_loop_9
   \   00005B   EB           MOV     A,R3
   \                     ??zclZigbeeRecv_event_loop_9:
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??zclZigbeeRecv_event_loop_10 & 0xFFFF
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_1`:
   \   000069   00           DB        0
   \   00006A   05           DB        5
   \   00006B   34           DB        52
   \   00006C   ....         DW        ??zclZigbeeRecv_event_loop_11
   \   00006E   C0           DB        192
   \   00006F   ....         DW        ??zclZigbeeRecv_event_loop_12
   \   000071   D1           DB        209
   \   000072   ....         DW        ??zclZigbeeRecv_event_loop_13
   \   000074   D2           DB        210
   \   000075   ....         DW        ??zclZigbeeRecv_event_loop_7
   \   000077   FD           DB        253
   \   000078   ....         DW        ??zclZigbeeRecv_event_loop_14
   \   00007A   ....         DW        ??zclZigbeeRecv_event_loop_8
   \                     ??zclZigbeeRecv_event_loop_11:
   \   00007C                ; Setup parameters for call to function show
   \   00007C   7A..         MOV     R2,#(`?<Constant "ZCL_INCOMING_MSG">` & 0xff)
   \   00007E   7B..         MOV     R3,#((`?<Constant "ZCL_INCOMING_MSG">` >> 8) & 0xff)
   \   000080   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_2`:
   \   00008B   00           DB        0
   \   00008C   02           DB        2
   \   00008D   01           DB        1
   \   00008E   ....         DW        ??zclZigbeeRecv_event_loop_15
   \   000090   04           DB        4
   \   000091   ....         DW        ??zclZigbeeRecv_event_loop_16
   \   000093   ....         DW        ??zclZigbeeRecv_event_loop_17
   \                     ??zclZigbeeRecv_event_loop_15:
   \   000095   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FA           MOV     R2,A
   \   00009A   EB           MOV     A,R3
   \   00009B   C3           CLR     C
   \   00009C   9A           SUBB    A,R2
   \   00009D   5010         JNC     ??zclZigbeeRecv_event_loop_17
   \   00009F   0B           INC     R3
   \   0000A0   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclZigbeeRecv_event_loop_16:
   \   0000A2   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000A5   8001         SJMP    ??zclZigbeeRecv_event_loop_18
   \                     ??zclZigbeeRecv_event_loop_19:
   \   0000A7   0B           INC     R3
   \                     ??zclZigbeeRecv_event_loop_18:
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EB           MOV     A,R3
   \   0000AB   C3           CLR     C
   \   0000AC   9A           SUBB    A,R2
   \   0000AD   40F8         JC      ??zclZigbeeRecv_event_loop_19
   \                     ??zclZigbeeRecv_event_loop_17:
   \   0000AF   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   EA           MOV     A,R2
   \   0000B7   7001         JNZ     ??zclZigbeeRecv_event_loop_20
   \   0000B9   EB           MOV     A,R3
   \                     ??zclZigbeeRecv_event_loop_20:
   \   0000BA   6089         JZ      ??zclZigbeeRecv_event_loop_8
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   12....       LCALL   ??osal_mem_free?relay
   \   0000BF   8084         SJMP    ??zclZigbeeRecv_event_loop_8
   \                     ??zclZigbeeRecv_event_loop_12:
   \   0000C1                ; Setup parameters for call to function show
   \   0000C1   7A..         MOV     R2,#(`?<Constant "KEY_CHANGE">` & 0xff)
   \   0000C3   7B..         MOV     R3,#((`?<Constant "KEY_CHANGE">` >> 8) & 0xff)
   \   0000C5   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CB   4003         JC      $+5
   \   0000CD   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \   0000D0   7408         MOV     A,#0x8
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   E4           CLR     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000E2   75..01       MOV     ?V0 + 4,#0x1
   \   0000E5   78..         MOV     R0,#?V0 + 4
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EA   75..00       MOV     ?V0 + 4,#0x0
   \   0000ED   75..00       MOV     ?V0 + 5,#0x0
   \   0000F0   78..         MOV     R0,#?V0 + 4
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   78..         MOV     R0,#?V0 + 4
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   75....       MOV     ?V0 + 4,#(bindingInClusters & 0xff)
   \   0000FD   75....       MOV     ?V0 + 5,#((bindingInClusters >> 8) & 0xff)
   \   000100   78..         MOV     R0,#?V0 + 4
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000105   75..02       MOV     ?V0 + 4,#0x2
   \   000108   78..         MOV     R0,#?V0 + 4
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010D   75..04       MOV     ?V0 + 4,#0x4
   \   000110   75..01       MOV     ?V0 + 5,#0x1
   \   000113   78..         MOV     R0,#?V0 + 4
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118                ; Setup parameters for call to function NLME_GetShortAddr
   \   000118   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00011B   EA           MOV     A,R2
   \   00011C   FC           MOV     R4,A
   \   00011D   EB           MOV     A,R3
   \   00011E   FD           MOV     R5,A
   \   00011F   790D         MOV     R1,#0xd
   \   000121   7409         MOV     A,#0x9
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   AA82         MOV     R2,DPL
   \   000128   AB83         MOV     R3,DPH
   \   00012A   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00012D   7409         MOV     A,#0x9
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000132   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_14:
   \   000135                ; Setup parameters for call to function strcpy
   \   000135   7C..         MOV     R4,#(`?<Constant "\\r 1 \\n">` & 0xff)
   \   000137   7D..         MOV     R5,#((`?<Constant "\\r 1 \\n">` >> 8) & 0xff)
   \   000139   7A..         MOV     R2,#(device_manager & 0xff)
   \   00013B   7B..         MOV     R3,#((device_manager >> 8) & 0xff)
   \   00013D   12....       LCALL   ??strcpy?relay
   \   000140                ; Setup parameters for call to function strcpy
   \   000140   7C..         MOV     R4,#(`?<Constant "\\r 140 \\n">` & 0xff)
   \   000142   7D..         MOV     R5,#((`?<Constant "\\r 140 \\n">` >> 8) & 0xff)
   \   000144   7A..         MOV     R2,#((device_manager + 8) & 0xff)
   \   000146   7B..         MOV     R3,#(((device_manager + 8) >> 8) & 0xff)
   \   000148   12....       LCALL   ??strcpy?relay
   \   00014B                ; Setup parameters for call to function strncpy
   \   00014B   75..0E       MOV     ?V0 + 4,#0xe
   \   00014E   75..00       MOV     ?V0 + 5,#0x0
   \   000151   78..         MOV     R0,#?V0 + 4
   \   000153   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000156   E5..         MOV     A,?V0 + 0
   \   000158   2421         ADD     A,#0x21
   \   00015A   F582         MOV     DPL,A
   \   00015C   E5..         MOV     A,?V0 + 1
   \   00015E   3400         ADDC    A,#0x0
   \   000160   F583         MOV     DPH,A
   \   000162   E0           MOVX    A,@DPTR
   \   000163   FC           MOV     R4,A
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   FD           MOV     R5,A
   \   000167   7A..         MOV     R2,#((device_manager + 18) & 0xff)
   \   000169   7B..         MOV     R3,#(((device_manager + 18) >> 8) & 0xff)
   \   00016B   12....       LCALL   ??strncpy?relay
   \   00016E   7402         MOV     A,#0x2
   \   000170   12....       LCALL   ?DEALLOC_XSTACK8
   \   000173   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_13:
   \   000176                ; Setup parameters for call to function ZSendMsgProcess
   \   000176   7A..         MOV     R2,#(`?<Constant "Hi">` & 0xff)
   \   000178   7B..         MOV     R3,#((`?<Constant "Hi">` >> 8) & 0xff)
   \   00017A   12....       LCALL   ??ZSendMsgProcess?relay
   \   00017D   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_10:
   \   000180   AA..         MOV     R2,?V0 + 2
   \   000182   7480         MOV     A,#-0x80
   \   000184   65..         XRL     A,?V0 + 3
   \   000186   FB           MOV     R3,A
   \   000187   8045         SJMP    ??zclZigbeeRecv_event_loop_21
    267                      break;
    268                case SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT: // ZIGBEE Receiver identify timeout event
    269                  show("SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT");
   \                     ??zclZigbeeRecv_event_loop_2:
   \   000189                ; Setup parameters for call to function show
   \   000189   7A..         MOV     R2,#(`?<Constant "SAMPLELIGHT_IDENTIFY_...">` & 0xff)
   \   00018B   7B..         MOV     R3,#((`?<Constant "SAMPLELIGHT_IDENTIFY_...">` >> 8) & 0xff)
   \   00018D   12....       LCALL   ??show?relay
    270                  if ( zclZigbeeRecv_IdentifyTime > 0 )
   \   000190   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000193   E0           MOVX    A,@DPTR
   \   000194   7002         JNZ     ??zclZigbeeRecv_event_loop_22
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeRecv_event_loop_22:
   \   000198   600C         JZ      ??zclZigbeeRecv_event_loop_23
    271                       zclZigbeeRecv_IdentifyTime--;
   \   00019A   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   24FF         ADD     A,#-0x1
   \   0001A0   F0           MOVX    @DPTR,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   34FF         ADDC    A,#-0x1
   \   0001A5   F0           MOVX    @DPTR,A
    272                       zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \                     ??zclZigbeeRecv_event_loop_23:
   \   0001A6                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   0001A6   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
   \   0001A9   801F         SJMP    ??zclZigbeeRecv_event_loop_6
    273                  break;
    274                
    275                case UART_MSG_EVT: // The UART Message event
    276                  show("UART_MSG_EVT");
   \                     ??zclZigbeeRecv_event_loop_3:
   \   0001AB                ; Setup parameters for call to function show
   \   0001AB   7A..         MOV     R2,#(`?<Constant "UART_MSG_EVT">` & 0xff)
   \   0001AD   7B..         MOV     R3,#((`?<Constant "UART_MSG_EVT">` >> 8) & 0xff)
   \   0001AF   12....       LCALL   ??show?relay
    277                  zclUartReceiver();
   \   0001B2                ; Setup parameters for call to function zclUartReceiver
   \   0001B2   12....       LCALL   ??zclUartReceiver?relay
   \   0001B5   8013         SJMP    ??zclZigbeeRecv_event_loop_6
    278                  break;
    279                
    280                case KEYPAD_MSG_EVT: // The KEYPAD keyin event
    281                  show("KEYPAD_MSG_EVT");
   \                     ??zclZigbeeRecv_event_loop_4:
   \   0001B7                ; Setup parameters for call to function show
   \   0001B7   7A..         MOV     R2,#(`?<Constant "KEYPAD_MSG_EVT">` & 0xff)
   \   0001B9   7B..         MOV     R3,#((`?<Constant "KEYPAD_MSG_EVT">` >> 8) & 0xff)
   \   0001BB   12....       LCALL   ??show?relay
    282                  #if defined( LCD_SUPPORTED )
    283                    HalLcdWriteChar(HAL_LCD_LINE_3, 0, ch);
   \   0001BE                ; Setup parameters for call to function HalLcdWriteChar
   \   0001BE   90....       MOV     DPTR,#ch
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   FB           MOV     R3,A
   \   0001C3   7A00         MOV     R2,#0x0
   \   0001C5   7903         MOV     R1,#0x3
   \   0001C7   12....       LCALL   ??HalLcdWriteChar?relay
    284                  #endif
    285                  break;
    286              }    
    287              return 0; // Discard unknown events
   \                     ??zclZigbeeRecv_event_loop_6:
   \   0001CA   7A00         MOV     R2,#0x0
   \   0001CC   7B00         MOV     R3,#0x0
   \                     ??zclZigbeeRecv_event_loop_21:
   \   0001CE   7409         MOV     A,#0x9
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   7F06         MOV     R7,#0x6
   \   0001D5   02....       LJMP    ?BANKED_LEAVE_XDATA
    288          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ??show?relay
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
    289          
    290          /*********************************************************************
    291           * @fn      zclZigbeeReceiver_HandleKeys
    292           * @brief   Handles all key events for this device.
    293           * @param   shift - true if in shift/alt.
    294           * @param   keys - bit field for key events.
    295           *          Valid entries: HAL_KEY_SW_1(MCU-K1)                        
    296           */
    297          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys )
    298          {
    299            zAddrType_t dstAddr;
    300            (void)shift; // Intentionally unreferenced parameter
    301            
    302          #if defined(Coor_receiver) || defined (Router_receiver)
    303          
    304            if ( keys & HAL_KEY_SW1 ) // Init EndDevice bind reequest, and use cluster list important to binding.
    305            {
    306              dstAddr.addrMode = afAddr16Bit;
    307              dstAddr.addr.shortAddr = 0x0000;   // Coordinator makes the match
    308              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), ZIGBEERECV_ENDPOINT, // ZIGBEERECV_ENDPOINT = 13 is coordinator
    309                                    ZCL_HA_PROFILE_ID, ZCLZIGBEERECV_BINDINGLIST, bindingInClusters, 0,
    310                                    NULL, // No Outgoing clusters to bind
    311                                    TRUE );
    312            }
    313            
    314            if ( keys & HAL_KEY_SW2 ) 
    315            {
    316              
    317            }
    318            
    319          #endif
    320          }
    321          
    322          /*********************************************************************
    323           * @fn      zclZigbeeReceiver_ProcessIdentifyTimeChange
    324           * @brief   Called to process any change to the IdentifyTime attribute.
    325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void )
   \                     zclZigbeeReceiver_ProcessIdentifyTimeChange:
    327          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    328            if ( zclZigbeeRecv_IdentifyTime > 0 )
   \   000004   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0:
   \   00000C   601F         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1
    329            {
    330              osal_start_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   7CE8         MOV     R4,#-0x18
   \   000010   7D03         MOV     R5,#0x3
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_start_timerEx?relay
    331              HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7B05         MOV     R3,#0x5
   \   000024   7AFF         MOV     R2,#-0x1
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   ??HalLedBlink?relay
   \   00002B   8022         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    332            }
    333            else
    334              {
    335                if ( zclZigbeeRecv_OnOff )
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1:
   \   00002D   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6009         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3
    336                {
    337                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7901         MOV     R1,#0x1
   \   000037   12....       LCALL   ??HalLedSet?relay
   \   00003A   8013         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    338                }
    339                else
    340                  {
    341                    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3:
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   ??HalLedSet?relay
    342                    osal_stop_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000043                ; Setup parameters for call to function osal_stop_timerEx
   \   000043   7A01         MOV     R2,#0x1
   \   000045   7B00         MOV     R3,#0x0
   \   000047   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   ??osal_stop_timerEx?relay
    343                  }
    344              }
    345          }
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2:
   \   00004F                REQUIRE ?Subroutine4
   \   00004F                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    346          
    347          /*********************************************************************
    348           * @fn      zclZigbeeReceiver_BasicResetCB
    349           * @brief   Callback from the ZCL General Cluster Library
    350           *          to set all the Basic Cluster attributes to default values.
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          static void zclZigbeeReceiver_BasicResetCB( void )
   \                     zclZigbeeReceiver_BasicResetCB:
    353          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    354            // Reset all attributes to default values
    355          }
   \   000000   02....       LJMP    ?BRET
    356          
    357          /*********************************************************************
    358           * @fn      zclZigbeeReceiver_IdentifyCB
    359           * @brief   Callback from the ZCL General Cluster Library when
    360           *          it received an Identity Command for this application.
    361           * @param   srcAddr - source address and endpoint of the response message
    362           *          identifyTime - the number of seconds to identify yourself
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclZigbeeReceiver_IdentifyCB:
    365          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    366            zclZigbeeRecv_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000012   E8           MOV     A,R0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E9           MOV     A,R1
   \   000016   F0           MOVX    @DPTR,A
    367            zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \   000017                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   000017   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
    368          }
   \   00001A   80..         SJMP    ?Subroutine4
    369          
    370          /*********************************************************************
    371           * @fn      zclZigbeeReceiver_IdentifyQueryRspCB
    372           * @brief   Callback from the ZCL General Cluster Library when
    373           *          it received an Identity Query Response Command for this application.
    374           * @param   srcAddr - requestor's address
    375           *          timeout - number of seconds to identify yourself (valid for query response)
    376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    377          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
   \                     zclZigbeeReceiver_IdentifyQueryRspCB:
    378          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    379            (void)pRsp; // Query Response (with timeout value)
    380          }
   \   000000   02....       LJMP    ?BRET
    381          
    382          /*********************************************************************
    383           * @fn      zclZigbeeReceiver_OnOffCB
    384           * @brief   Callback from the ZCL General Cluster Library when
    385           *          it received an On/Off Command for this application.
    386           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          static void zclZigbeeReceiver_OnOffCB( uint8 cmd )
   \                     zclZigbeeReceiver_OnOffCB:
    389          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    390            if ( cmd == COMMAND_ON ) // Turn on the light
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   700E         JNZ     ??zclZigbeeReceiver_OnOffCB_0
    391              zclZigbeeRecv_OnOff = LIGHT_ON;
   \                     ??zclZigbeeReceiver_OnOffCB_1:
   \   000009   7401         MOV     A,#0x1
   \                     ??zclZigbeeReceiver_OnOffCB_2:
   \   00000B   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   00000E   F0           MOVX    @DPTR,A
    392          
    393            else if ( cmd == COMMAND_OFF ) // Turn off the light
    394              zclZigbeeRecv_OnOff = LIGHT_OFF;
    395          
    396            else // Toggle the light
    397            {
    398              if ( zclZigbeeRecv_OnOff == LIGHT_OFF )
    399                    zclZigbeeRecv_OnOff = LIGHT_ON;
    400              else
    401                    zclZigbeeRecv_OnOff = LIGHT_OFF;
    402            }
    403          
    404            // In this sample app, we use LED4 to simulate the Light  
    405            if ( zclZigbeeRecv_OnOff == LIGHT_ON )
    406            {
    407              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON ); // setting the LED_1 on
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   FA           MOV     R2,A
   \   000010   7902         MOV     R1,#0x2
   \   000012   12....       LCALL   ??HalLedSet?relay
    408            }
    409            else
    410              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF ); // setting the LED_1 off
    411          }
   \   000015   80..         SJMP    ?Subroutine4
   \                     ??zclZigbeeReceiver_OnOffCB_0:
   \   000017   E9           MOV     A,R1
   \   000018   7003         JNZ     ??zclZigbeeReceiver_OnOffCB_3
   \                     ??zclZigbeeReceiver_OnOffCB_4:
   \   00001A   E4           CLR     A
   \   00001B   80EE         SJMP    ??zclZigbeeReceiver_OnOffCB_2
   \                     ??zclZigbeeReceiver_OnOffCB_3:
   \   00001D   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000020   E0           MOVX    A,@DPTR
   \   000021   70F7         JNZ     ??zclZigbeeReceiver_OnOffCB_4
   \   000023   80E4         SJMP    ??zclZigbeeReceiver_OnOffCB_1
    412          /****************************************************************************** 
    413           * 
    414           *  Functions for processing ZCL Foundation incoming Command/Response messages
    415           *
    416           *****************************************************************************/
    417          
    418          /*********************************************************************
    419           * @fn      zclZigbeeReceiver_ProcessIncomingMsg
    420           * @brief   Process ZCL Foundation incoming message
    421           * @param   pInMsg - pointer to the received message
    422           */
    423          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
    424          {
    425            switch ( pInMsg->zclHdr.commandID )
    426            {
    427          #ifdef ZCL_READ
    428              case ZCL_CMD_READ_RSP:
    429                zclZigbeeReceiver_ProcessInReadRspCmd( pInMsg );
    430                break;
    431          #endif
    432                
    433          #ifdef ZCL_WRITE    
    434              case ZCL_CMD_WRITE_RSP:
    435                zclZigbeeReceiver_ProcessInWriteRspCmd( pInMsg );
    436                break;
    437          #endif
    438                
    439          #ifdef ZCL_REPORT
    440              case ZCL_CMD_CONFIG_REPORT: // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    441                //zclSampleLight_ProcessInConfigReportCmd( pInMsg );
    442                break;
    443              
    444              case ZCL_CMD_CONFIG_REPORT_RSP:
    445                //zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
    446                break;
    447              
    448              case ZCL_CMD_READ_REPORT_CFG:
    449                //zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
    450                break;
    451              
    452              case ZCL_CMD_READ_REPORT_CFG_RSP:
    453                //zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
    454                break;
    455              
    456              case ZCL_CMD_REPORT:
    457                //zclSampleLight_ProcessInReportCmd( pInMsg );
    458                break;
    459          #endif   
    460                
    461              case ZCL_CMD_DEFAULT_RSP:
    462                zclZigbeeReceiver_ProcessInDefaultRspCmd( pInMsg );
    463                break;
    464                
    465          #ifdef ZCL_DISCOVER     
    466              case ZCL_CMD_DISCOVER_RSP:
    467                zclZigbeeReceiver_ProcessInDiscRspCmd( pInMsg );
    468                break;
    469          #endif
    470                
    471              default:
    472                break;
    473            }
    474            if ( pInMsg->attrCmd )
    475              osal_mem_free( pInMsg->attrCmd );
    476          }
    477          
    478          #ifdef ZCL_READ
    479          /*********************************************************************
    480           * @fn      zclZigbeeReceiver_ProcessInReadRspCmd
    481           * @brief   Process the "Profile" Read Response Command
    482           * @param   pInMsg - incoming message to process
    483           */
    484          static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    485          {
    486            zclReadRspCmd_t *readRspCmd;
    487            uint8 i;
    488          
    489            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    490            for (i = 0; i < readRspCmd->numAttr; i++)
    491            {
    492              // Notify the originator of the results of the original read attributes attempt and, 
    493              // for each successfull request, the value of the requested attribute
    494            }
    495            return TRUE; 
    496          }
    497          #endif // ZCL_READ
    498          
    499          #ifdef ZCL_WRITE
    500          /*********************************************************************
    501           * @fn      zclZigbeeReceiver_ProcessInWriteRspCmd
    502           * @brief   Process the "Profile" Write Response Command
    503           * @param   pInMsg - incoming message to process
    504           */
    505          static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    506          {
    507            zclWriteRspCmd_t *writeRspCmd;
    508            uint8 i;
    509          
    510            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    511            for (i = 0; i < writeRspCmd->numAttr; i++)
    512            {
    513              // Notify the device of the results of the its original write attributes command.
    514            }
    515            return TRUE; 
    516          }
    517          #endif // ZCL_WRITE
    518          
    519          /*********************************************************************
    520           * @fn      zclZigbeeReceiver_ProcessInDefaultRspCmd
    521           * @brief   Process the "Profile" Default Response Command
    522           * @param   pInMsg - incoming message to process
    523           */
    524          static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    525          {
    526            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd; 
    527            // Device is notified of the Default Response command.
    528            (void)pInMsg;
    529            return TRUE; 
    530          }
    531          
    532          #ifdef ZCL_DISCOVER
    533          /*********************************************************************
    534           * @fn      zclZigbeeReceiver_ProcessInDiscRspCmd
    535           * @brief   Process the "Profile" Discover Response Command
    536           * @param   pInMsg - incoming message to process
    537           */
    538          static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
    539          {
    540            zclDiscoverRspCmd_t *discoverRspCmd;
    541            uint8 i;
    542            
    543            discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
    544            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    545            {
    546              // Device is notified of the result of its attribute discovery command.
    547            }
    548            return TRUE;
    549          }
    550          #endif // ZCL_DISCOVER
    551          
    552          /****************************************************************************
    553          ****************************************************************************/
    554          
    555          /*********************************************************************
    556           * @fn      zclUARTMsg_CallBack
    557           * @brief   Send data OTA.
    558           * @param   port - UART port.
    559           * @param   event - the UART port event flag.
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          void zclUARTMsg_CallBack(uint8 port, uint8 event)
   \                     zclUARTMsg_CallBack:
    562          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    563            (void)port;
    564            
    565            if(Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT) > 0 )
   \   000005                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000005   7900         MOV     R1,#0x0
   \   000007   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00000A   EA           MOV     A,R2
   \   00000B   7001         JNZ     ??zclUARTMsg_CallBack_0
   \   00000D   EB           MOV     A,R3
   \                     ??zclUARTMsg_CallBack_0:
   \   00000E   6022         JZ      ??zclUARTMsg_CallBack_1
    566            {
    567                len = Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT );
   \   000010                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000015   EA           MOV     A,R2
   \   000016   90....       MOV     DPTR,#len
   \   000019   F0           MOVX    @DPTR,A
    568                HalUARTRead( MT_UART_DEFAULT_PORT, TransmitApp_Msg, len );
   \   00001A                ; Setup parameters for call to function HalUARTRead
   \   00001A   FC           MOV     R4,A
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A..         MOV     R2,#(TransmitApp_Msg & 0xff)
   \   00001F   7B..         MOV     R3,#((TransmitApp_Msg >> 8) & 0xff)
   \   000021   7900         MOV     R1,#0x0
   \   000023   12....       LCALL   ??HalUARTRead?relay
    569                osal_set_event( zclZigbeeReceiver_TaskID, UART_MSG_EVT );
   \   000026                ; Setup parameters for call to function osal_set_event
   \   000026   7A02         MOV     R2,#0x2
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??osal_set_event?relay
    570            }
    571          }
   \                     ??zclUARTMsg_CallBack_1:
   \   000032                REQUIRE ?Subroutine5
   \   000032                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    572          
    573          /*********************************************************************
    574           * @fn      zclUartReceiver
    575           * @brief   The coordinator receive command.
    576           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    577          void zclUartReceiver( void )
   \                     zclUartReceiver:
    578          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    579            show("zclUartReceiver");
   \   000005                ; Setup parameters for call to function show
   \   000005   7A..         MOV     R2,#(`?<Constant "zclUartReceiver">` & 0xff)
   \   000007   7B..         MOV     R3,#((`?<Constant "zclUartReceiver">` >> 8) & 0xff)
   \   000009   12....       LCALL   ??show?relay
    580            
    581            for(uint8 length = 0; length < len; length++)
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   8024         SJMP    ??zclUartReceiver_0
    582            {
    583              uart_recv[length] = TransmitApp_Msg[length];
   \                     ??zclUartReceiver_1:
   \   000010   8E82         MOV     DPL,R6
   \   000012   A882         MOV     R0,DPL
   \   000014   E8           MOV     A,R0
   \   000015   24..         ADD     A,#(TransmitApp_Msg & 0xff)
   \   000017   F582         MOV     DPL,A
   \   000019   E4           CLR     A
   \   00001A   34..         ADDC    A,#((TransmitApp_Msg >> 8) & 0xff)
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   E8           MOV     A,R0
   \   000021   24..         ADD     A,#(uart_recv & 0xff)
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   34..         ADDC    A,#((uart_recv >> 8) & 0xff)
   \   000028   F583         MOV     DPH,A
   \   00002A   EB           MOV     A,R3
   \   00002B   F0           MOVX    @DPTR,A
    584            #if defined( LCD_SUPPORTED )
    585              HalLcdWriteChar(HAL_LCD_LINE_4, length, uart_recv[length]);
   \   00002C                ; Setup parameters for call to function HalLcdWriteChar
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   7904         MOV     R1,#0x4
   \   000030   12....       LCALL   ??HalLcdWriteChar?relay
    586            #endif
    587            }
   \   000033   0E           INC     R6
   \                     ??zclUartReceiver_0:
   \   000034   90....       MOV     DPTR,#len
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   EE           MOV     A,R6
   \   00003A   C3           CLR     C
   \   00003B   9A           SUBB    A,R2
   \   00003C   40D2         JC      ??zclUartReceiver_1
    588            
    589            // Set the End Device state
    590            zclZigbeeRecv_DstAddr.endPoint = 12;
   \   00003E   740C         MOV     A,#0xc
   \   000040   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000043   F0           MOVX    @DPTR,A
    591            zclZigbeeRecv_DstAddr.addr.shortAddr = 0xFFFF;
   \   000044   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000047   74FF         MOV     A,#-0x1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
    592            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00004C   740F         MOV     A,#0xf
   \   00004E   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   000051   F0           MOVX    @DPTR,A
    593              
    594            // Transmit the UART command to End Device
    595            uint8 send = zcl_SendCommand( ZIGBEERECV_ENDPOINT, 
    596                                          &zclZigbeeRecv_DstAddr,
    597                                          ZCL_CLUSTER_ID_GEN_ON_OFF,
    598                                          COMMAND_TOGGLE,
    599                                          TRUE,
    600                                          ZCL_FRAME_CLIENT_SERVER_DIR,
    601                                          false,
    602                                          0,
    603                                          0,
    604                                          10,
    605                                          uart_recv );
   \   000052                ; Setup parameters for call to function zcl_SendCommand
   \   000052   75....       MOV     ?V0 + 0,#(uart_recv & 0xff)
   \   000055   75....       MOV     ?V0 + 1,#((uart_recv >> 8) & 0xff)
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..0A       MOV     ?V0 + 0,#0xa
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..00       MOV     ?V0 + 0,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   75..02       MOV     ?V0 + 0,#0x2
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   7C06         MOV     R4,#0x6
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A..         MOV     R2,#(zclZigbeeRecv_DstAddr & 0xff)
   \   000095   7B..         MOV     R3,#((zclZigbeeRecv_DstAddr >> 8) & 0xff)
   \   000097   790D         MOV     R1,#0xd
   \   000099   12....       LCALL   ??zcl_SendCommand?relay
   \   00009C   740B         MOV     A,#0xb
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    606          }
   \   0000A1   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bindingInClusters>`:
   \   000000   06000800     DW 6, 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zigbeeReceiver_TestEp>`:
   \   000000   14           DB 20
   \   000001   ....0000     DW zclZigbeeReceiver_TaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclZigbeeReceiver_CmdCallbac`:
   \   000000   ....         DW ??zclZigbeeReceiver_BasicResetCB?relay
   \   000002   ....         DW ??zclZigbeeReceiver_IdentifyCB?relay
   \   000004   ....         DW ??zclZigbeeReceiver_IdentifyQueryRspCB?relay
   \   000006   ....0000     DW ??zclZigbeeReceiver_OnOffCB?relay, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
   \            00000000
   \            00000000
   \            00000000
   \            0000    
   \   000018   00000000     DW 0H, 0H
   \   00001C   0000         DB 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZSendMsgProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZSendMsgProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_OnOffCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUARTMsg_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUARTMsg_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUartReceiver?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUartReceiver

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RECV_GROUP">`:
   \   000000   52454356     DB "RECV_GROUP"
   \            5F47524F
   \            555000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZCL_INCOMING_MSG">`:
   \   000000   5A434C5F     DB "ZCL_INCOMING_MSG"
   \            494E434F
   \            4D494E47
   \            5F4D5347
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEY_CHANGE">`:
   \   000000   4B45595F     DB "KEY_CHANGE"
   \            4348414E
   \            474500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r 1 \\n">`:
   \   000000   0D203120     DB "\015 1 \012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r 140 \\n">`:
   \   000000   0D203134     DB "\015 140 \012"
   \            30200A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hi">`:
   \   000000   486900       DB "Hi"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZDO_MATCH_DESC_RSP_SENT">`:
   \   000000   5A444F5F     DB "ZDO_MATCH_DESC_RSP_SENT"
   \            4D415443
   \            485F4445
   \            53435F52
   \            53505F53
   \            454E5400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Chris:ZDO_MSG_SEND_EVT">`:
   \   000000   43687269     DB "Chris:ZDO_MSG_SEND_EVT"
   \            733A5A44
   \            4F5F4D53
   \            475F5345
   \            4E445F45
   \            565400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLELIGHT_IDENTIFY_...">`:
   \   000000   53414D50     DB "SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT"
   \            4C454C49
   \            4748545F
   \            4944454E
   \            54494659
   \            5F54494D
   \            454F5554
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_MSG_EVT">`:
   \   000000   55415254     DB "UART_MSG_EVT"
   \            5F4D5347
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEYPAD_MSG_EVT">`:
   \   000000   4B455950     DB "KEYPAD_MSG_EVT"
   \            41445F4D
   \            53475F45
   \            565400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zclUartReceiver">`:
   \   000000   7A636C55     DB "zclUartReceiver"
   \            61727452
   \            65636569
   \            76657200

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ZSendMsgProcess                    0      0     32
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> osal_start_timerEx            0      0     18
     zclUARTMsg_CallBack                0      0     10
       -> Hal_UART_RxBufLen             0      0     20
       -> Hal_UART_RxBufLen             0      0     20
       -> HalUARTRead                   0      0     20
       -> osal_set_event                0      0     20
     zclUartReceiver                    1      0     44
       -> show                          0      0     20
       -> HalLcdWriteChar               0      0     20
       -> zcl_SendCommand               0      0     42
     zclZigbeeReceiver_BasicResetCB     0      0      0
     zclZigbeeReceiver_IdentifyCB       2      0      0
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        4      0      0
     zclZigbeeReceiver_IdentifyQueryRspCB
                                        0      0      0
     zclZigbeeReceiver_OnOffCB          2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        2      0     23
       -> osal_start_timerEx            4      0      0
       -> HalLedBlink                   4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_stop_timerEx             4      0      0
     zclZigbeeRecv_Init                 0      0     14
       -> zclZD_Init                    0      0     22
       -> zclGeneral_RegisterCmdCallbacks
                                        0      0     22
       -> zcl_registerAttrList          0      0     22
       -> zcl_registerForMsg            0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> afRegister                    0      0     22
       -> osal_set_event                0      0     22
     zclZigbeeRecv_event_loop           1      0     32
       -> ZSendMsgProcess               0      0     46
       -> show                          0      0     46
       -> osal_msg_deallocate           0      0     46
       -> osal_msg_receive              0      0     46
       -> show                          0      0     46
       -> osal_mem_free                 0      0     46
       -> show                          0      0     46
       -> NLME_GetShortAddr             0      0     64
       -> ZDP_EndDeviceBindReq          0      0     64
       -> strcpy                        0      0     46
       -> strcpy                        0      0     46
       -> strncpy                       0      0     50
       -> ZSendMsgProcess               0      0     46
       -> show                          0      0     46
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        0      0     46
       -> show                          0      0     46
       -> zclUartReceiver               0      0     46
       -> show                          0      0     46
       -> HalLcdWriteChar               0      0     46


   Segment part sizes:

     Function/Label                                  Bytes
     --------------                                  -----
     send_msg_counter                                   1
     zclZigbeeReceiver_TaskID                           1
     ZDO_MSG_SEND_ID                                    1
     len                                                1
     TransmitApp_Msg                                  102
     UartTransmit_Msg                                 102
     uart_recv                                        102
     zclZigbeeRecv_DstAddr                             12
     zclZigbeeRecv_Group                               18
     bindingInClusters                                  4
     zigbeeReceiver_TestEp                              6
     zclZigbeeReceiver_CmdCallbacks                    30
     ZSendMsgProcess                                   61
     ?Subroutine1                                      19
     zclZigbeeRecv_Init                               148
     zclZigbeeRecv_event_loop                         472
     ?Subroutine2                                      13
     ?Subroutine0                                      14
     ?Subroutine3                                      14
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                                       79
     ?Subroutine4                                       7
     zclZigbeeReceiver_BasicResetCB                     3
     zclZigbeeReceiver_IdentifyCB                      28
     zclZigbeeReceiver_IdentifyQueryRspCB
                                                        3
     zclZigbeeReceiver_OnOffCB                         37
     zclUARTMsg_CallBack                               50
     ?Subroutine5                                       5
     zclUartReceiver                                  164
     ?<Initializer for bindingInClusters>               4
     ?<Initializer for zigbeeReceiver_TestEp>           6
     ?<Initializer for zclZigbeeReceiver_CmdCallbac    30
     ??ZSendMsgProcess?relay                            6
     ??zclZigbeeRecv_Init?relay                         6
     ??zclZigbeeRecv_event_loop?relay                   6
     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r    6
     ??zclZigbeeReceiver_BasicResetCB?relay             6
     ??zclZigbeeReceiver_IdentifyCB?relay               6
     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay       6
     ??zclZigbeeReceiver_OnOffCB?relay                  6
     ??zclUARTMsg_CallBack?relay                        6
     ??zclUartReceiver?relay                            6
     ?<Constant "\r\n">                                 3
     ?<Constant "RECV_GROUP">                          11
     ?<Constant "ZCL_INCOMING_MSG">                    17
     ?<Constant "KEY_CHANGE">                          11
     ?<Constant "\r 1 \n">                              6
     ?<Constant "\r 140 \n">                            8
     ?<Constant "Hi">                                   3
     ?<Constant "ZDO_MATCH_DESC_RSP_SENT">             24
     ?<Constant "Chris:ZDO_MSG_SEND_EVT">              23
     ?<Constant "SAMPLELIGHT_IDENTIFY_...">            33
     ?<Constant "UART_MSG_EVT">                        13
     ?<Constant "KEYPAD_MSG_EVT">                      15
     ?<Constant "zclUartReceiver">                     16

 
 1 117 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    40 bytes in segment XDATA_I
    40 bytes in segment XDATA_ID
   183 bytes in segment XDATA_ROM_C
   340 bytes in segment XDATA_Z
 
 1 217 bytes of CODE  memory
   183 bytes of CONST memory
   380 bytes of XDATA memory

Errors: none
Warnings: 4
