###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                19/Aug/2013  00:54:15 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c                #
#    Command line       =  -f "C:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func                 #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "C:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\Source\zcl_zigbee receiver.c" -D CC2530 -D  #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Coor_receiver -D xHAL_KEYPAD -D xPA2591 -lC        #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\" -lA       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\" -e         #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "C:\GitHub\z-stack\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\SOURCE\" -I                  #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "C:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "C:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "C:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "C:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "C:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "C:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "C:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "C:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "C:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "C:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "C:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "C:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program           #
#                          Files\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\List\zcl_zigbee  #
#                          receiver.lst                                       #
#    Object file        =  C:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_KB_PA\Obj\zcl_zigbee   #
#                          receiver.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Coordinator & Router\Source\zcl_zigbee receiver.c
      1          #include <stdio.h>
      2          #include <string.h>
      3          #include <stdlib.h>
      4          #include "ZComDef.h"
      5          #include "OSAL.h"
      6          #include "AF.h"
      7          #include "ZDApp.h"
      8          
      9          /* ZCL */
     10          #include "zcl.h"
     11          #include "zcl_general.h"
     12          #include "zcl_ha.h"
     13          #include "zcl_zigbee receiver.h"
     14          
     15          /* HAL */
     16          #include "onboard.h"
     17          #include "hal_lcd.h"
     18          #include "hal_led.h"
     19          #include "hal_timer.h"
     20          #include "hal_uart.h"
     21          #include "hal_key.h"
     22          #include "hal_keypad.h"
     23          
     24          /* MAC_high-level */
     25          #include "mac_high_level.h"
     26          
     27          /* MT */
     28          #include "MT_UART.h"
     29          #include "MT.h"
     30          #include "ZComDef.h"
     31          
     32          #define TRANSMITAPP_MAX_DATA_LEN    102
     33          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     34          uint8 send_msg_counter = 0;
   \                     send_msg_counter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     35          byte zclZigbeeReceiver_TaskID; // The zigbee task_ID
   \                     zclZigbeeReceiver_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     36          byte ZDO_MSG_SEND_ID; // The zigbee task_ID
   \                     ZDO_MSG_SEND_ID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     37          
     38          // The UART transmit variable and array, the transmit data length

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39          uint8 len; 
   \                     len:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     40          // Transmit message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     42          // The coordinator send to device message array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     43          byte UartTransmit_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     UartTransmit_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     44          // Receive the UART command

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     45          uint8 uart_recv[TRANSMITAPP_MAX_DATA_LEN]; 
   \                     uart_recv:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     46          
     47          /*********************************************************************
     48           * LOCAL VARIABLES
     49           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     50          afAddrType_t zclZigbeeRecv_DstAddr;  // AF address type
   \                     zclZigbeeRecv_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          aps_Group_t zclZigbeeRecv_Group;
   \                     zclZigbeeRecv_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     52          
     53          #define ZCLZIGBEERECV_BINDINGLIST       2
     54          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     55          static cId_t bindingInClusters[ZCLZIGBEERECV_BINDINGLIST] =
   \                     bindingInClusters:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for bindingInClusters>`
   \   000004                REQUIRE __INIT_XDATA_I
     56          {
     57            ZCL_CLUSTER_ID_GEN_ON_OFF,
     58            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
     59          };
     60          
     61          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
     62          static endPointDesc_t zigbeeReceiver_TestEp =
   \                     zigbeeReceiver_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for zigbeeReceiver_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
     63          {
     64            20,                                 // Test endpoint
     65            &zclZigbeeReceiver_TaskID,
     66            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
     67            (afNetworkLatencyReq_t)0            // No Network Latency req
     68          };
     69          
     70          /*********************************************************************
     71           * LOCAL FUNCTIONS
     72           */
     73          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys );
     74          static void zclZigbeeReceiver_BasicResetCB( void );
     75          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd );
     76          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
     77          static void zclZigbeeReceiver_OnOffCB( uint8 cmd );
     78          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void );
     79          
     80          void zclUARTMsg_CallBack(uint8 port, uint8 event); // The UART Message callback
     81          void zclUartReceiver( void ); // The coordinator receive command function
     82          
     83          // Functions to process ZCL Foundation incoming Command/Response messages 
     84          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *msg );
     85          #ifdef ZCL_READ
     86            static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
     87          #endif
     88          #ifdef ZCL_WRITE
     89            static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
     90          #endif
     91            static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
     92          #ifdef ZCL_DISCOVER
     93            static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
     94          #endif
     95            
     96          /*********************************************************************
     97           * ZCL General Profile Callback table
     98           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     99          static zclGeneral_AppCallbacks_t zclZigbeeReceiver_CmdCallbacks =
   \                     zclZigbeeReceiver_CmdCallbacks:
   \   000000                DS 30
   \   00001E                REQUIRE `?<Initializer for zclZigbeeReceiver_CmdCallbac`
   \   00001E                REQUIRE __INIT_XDATA_I
    100          {
    101            zclZigbeeReceiver_BasicResetCB,              // Basic Cluster Reset command
    102            zclZigbeeReceiver_IdentifyCB,                // Identify command  
    103            zclZigbeeReceiver_IdentifyQueryRspCB,        // Identify Query Response command
    104            zclZigbeeReceiver_OnOffCB,                   // On/Off cluster command
    105            NULL,                                        // Level Control Move to Level command
    106            NULL,                                        // Level Control Move command
    107            NULL,                                        // Level Control Step command
    108            NULL,                                        // Group Response commands
    109            NULL,                                        // Scene Store Request command
    110            NULL,                                        // Scene Recall Request command
    111            NULL,                                        // Scene Response command
    112            NULL,                                        // Alarm (Response) command
    113            NULL,                                        // RSSI Location commands
    114            NULL,                                        // RSSI Location Response commands
    115          };
    116          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void ZSendMsgProcess(char *temp)
   \                     ZSendMsgProcess:
    118          {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    119              HalUARTWrite(HAL_UART_PORT_0, device_manager.Type, 8);
                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000004                ; Setup parameters for call to function HalUARTWrite
   \   000004   7C08         MOV     R4,#0x8
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7A..         MOV     R2,#(device_manager & 0xff)
   \   00000A   7B..         MOV     R3,#((device_manager >> 8) & 0xff)
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   12....       LCALL   ??HalUARTWrite?relay
    120              HalUARTWrite(HAL_UART_PORT_0, device_manager.Module, 10);       
                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000011                ; Setup parameters for call to function HalUARTWrite
   \   000011   7C0A         MOV     R4,#0xa
   \   000013   7D00         MOV     R5,#0x0
   \   000015   7A..         MOV     R2,#((device_manager + 8) & 0xff)
   \   000017   7B..         MOV     R3,#(((device_manager + 8) >> 8) & 0xff)
   \   000019   7900         MOV     R1,#0x0
   \   00001B   12....       LCALL   ??HalUARTWrite?relay
    121              HalUARTWrite(HAL_UART_PORT_0, device_manager.Data, len-2);    
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   90....       MOV     DPTR,#len
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   74FE         MOV     A,#-0x2
   \   000025   28           ADD     A,R0
   \   000026   FC           MOV     R4,A
   \   000027   74FF         MOV     A,#-0x1
   \   000029   3400         ADDC    A,#0x0
   \   00002B   FD           MOV     R5,A
   \   00002C   7A..         MOV     R2,#((device_manager + 18) & 0xff)
   \   00002E   7B..         MOV     R3,#(((device_manager + 18) >> 8) & 0xff)
   \   000030   7900         MOV     R1,#0x0
   \   000032   12....       LCALL   ??HalUARTWrite?relay
    122              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 3);   
   \   000035                ; Setup parameters for call to function HalUARTWrite
   \   000035   7C03         MOV     R4,#0x3
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A..         MOV     R2,#(`?<Constant "\\r\\n">` & 0xff)
   \   00003B   7B..         MOV     R3,#((`?<Constant "\\r\\n">` >> 8) & 0xff)
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   12....       LCALL   ??HalUARTWrite?relay
    123           
    124              osal_start_timerEx( zclZigbeeReceiver_TaskID, ZDO_MSG_SEND_EVT, 1000 );        
   \   000042                ; Setup parameters for call to function osal_start_timerEx
   \   000042   7CE8         MOV     R4,#-0x18
   \   000044   7D03         MOV     R5,#0x3
   \   000046   7A00         MOV     R2,#0x0
   \   000048   7B08         MOV     R3,#0x8
   \   00004A   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   12....       LCALL   ??osal_start_timerEx?relay
    125          }
   \   000052                REQUIRE ?Subroutine3
   \   000052                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    126          
    127          /*
    128           * @fn          zclZigbeeRecv_Init
    129           * @brief       Initialization function for the zclGeneral layer.
    130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          void zclZigbeeRecv_Init( byte task_id )
   \                     zclZigbeeRecv_Init:
    132          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    133            zclZigbeeReceiver_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000009   F0           MOVX    @DPTR,A
    134            
    135            // Setup for the flash command's destination address ( Group )
    136            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;  // transmit mode - Group address
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   00000F   F0           MOVX    @DPTR,A
    137            zclZigbeeRecv_DstAddr.endPoint = ZIGBEERECV_ENDPOINT;        // end-point number:20
   \   000010   740D         MOV     A,#0xd
   \   000012   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000015   F0           MOVX    @DPTR,A
    138            zclZigbeeRecv_DstAddr.addr.shortAddr = RECV_GROUP;           // Group short address
   \   000016   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000019   7410         MOV     A,#0x10
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   7420         MOV     A,#0x20
   \   00001F   F0           MOVX    @DPTR,A
    139            
    140            // This App is part of the Zigbee Device Profile
    141            zclZD_Init( &zclZigbeeRecv_SimpleDesc ); 
   \   000020                ; Setup parameters for call to function zclZD_Init
   \   000020   7A..         MOV     R2,#(zclZigbeeRecv_SimpleDesc & 0xff)
   \   000022   7B..         MOV     R3,#((zclZigbeeRecv_SimpleDesc >> 8) & 0xff)
   \   000024   12....       LCALL   ??zclZD_Init?relay
    142            
    143            // Register the ZCL General Cluster Library callback functions
    144            zclGeneral_RegisterCmdCallbacks( ZIGBEERECV_ENDPOINT, &zclZigbeeReceiver_CmdCallbacks ); 
   \   000027                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000027   7A..         MOV     R2,#(zclZigbeeReceiver_CmdCallbacks & 0xff)
   \   000029   7B..         MOV     R3,#((zclZigbeeReceiver_CmdCallbacks >> 8) & 0xff)
   \   00002B   790D         MOV     R1,#0xd
   \   00002D   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
    145            
    146            // Register the application's attribute list
    147            zcl_registerAttrList( ZIGBEERECV_ENDPOINT, ZIGBEERECV_MAX_ATTRIBUTES, zclZigbeeRecv_Attrs ); 
   \   000030                ; Setup parameters for call to function zcl_registerAttrList
   \   000030   7C..         MOV     R4,#(zclZigbeeRecv_Attrs & 0xff)
   \   000032   7D..         MOV     R5,#((zclZigbeeRecv_Attrs >> 8) & 0xff)
   \   000034   7A0C         MOV     R2,#0xc
   \   000036   790D         MOV     R1,#0xd
   \   000038   12....       LCALL   ??zcl_registerAttrList?relay
    148            
    149            // Register the Application to receive the unprocessed Foundation command/response messages
    150            zcl_registerForMsg( zclZigbeeReceiver_TaskID ); 
   \   00003B                ; Setup parameters for call to function zcl_registerForMsg
   \   00003B   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??zcl_registerForMsg?relay
    151            
    152            // Register for all key events - This app will handle all key events
    153            RegisterForKeys( zclZigbeeReceiver_TaskID ); 
   \   000043                ; Setup parameters for call to function RegisterForKeys
   \   000043   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??RegisterForKeys?relay
    154            
    155            // By default, all devices start out in Group 1 ( register grouop )
    156            zclZigbeeRecv_Group.ID = RECV_GROUP;
   \   00004B   90....       MOV     DPTR,#zclZigbeeRecv_Group
   \   00004E   7410         MOV     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   7420         MOV     A,#0x20
   \   000054   F0           MOVX    @DPTR,A
    157            osal_memcpy( zclZigbeeRecv_Group.name, "RECV_GROUP", 8  );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   75....       MOV     ?V0 + 0,#(`?<Constant "RECV_GROUP">` & 0xff)
   \   000058   75....       MOV     ?V0 + 1,#((`?<Constant "RECV_GROUP">` >> 8) & 0xff)
   \   00005B   75..00       MOV     ?V0 + 2,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7C08         MOV     R4,#0x8
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7A..         MOV     R2,#((zclZigbeeRecv_Group + 2) & 0xff)
   \   000069   7B..         MOV     R3,#(((zclZigbeeRecv_Group + 2) >> 8) & 0xff)
   \   00006B   12....       LCALL   ??osal_memcpy?relay
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    158            aps_AddGroup( ZIGBEERECV_ENDPOINT, &zclZigbeeRecv_Group ); 
   \   000073                ; Setup parameters for call to function aps_AddGroup
   \   000073   7A..         MOV     R2,#(zclZigbeeRecv_Group & 0xff)
   \   000075   7B..         MOV     R3,#((zclZigbeeRecv_Group >> 8) & 0xff)
   \   000077   790D         MOV     R1,#0xd
   \   000079   12....       LCALL   ??aps_AddGroup?relay
    159            
    160            // Register for a test endpoint
    161            afRegister( &zigbeeReceiver_TestEp ); 
   \   00007C                ; Setup parameters for call to function afRegister
   \   00007C   7A..         MOV     R2,#(zigbeeReceiver_TestEp & 0xff)
   \   00007E   7B..         MOV     R3,#((zigbeeReceiver_TestEp >> 8) & 0xff)
   \   000080   12....       LCALL   ??afRegister?relay
    162              osal_set_event( zclZigbeeReceiver_TaskID, NWK_RETRY_DELAY);//chris  
   \   000083                ; Setup parameters for call to function osal_set_event
   \   000083   7AE8         MOV     R2,#-0x18
   \   000085   7B03         MOV     R3,#0x3
   \   000087   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??osal_set_event?relay
    163          }
   \   00008F   7F03         MOV     R7,#0x3
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    164          
    165          /*********************************************************************
    166           * @fn          zclZigbeeRecv_event_loop
    167           * @brief       Event Loop Processor for zclGeneral.
    168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          uint16 zclZigbeeRecv_event_loop( uint8 task_id, uint16 events )
   \                     zclZigbeeRecv_event_loop:
    170          {   
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
    171              afIncomingMSGPacket_t *MSGpkt;
    172              (void)task_id;  // Intentionally unreferenced parameter
    173            
    174              if ( events & SYS_EVENT_MSG ) // SYSTEM Message event
   \   00000E   7480         MOV     A,#-0x80
   \   000010   55..         ANL     A,?V0 + 3
   \   000012   F9           MOV     R1,A
   \   000013   E4           CLR     A
   \   000014   7001         JNZ     ??zclZigbeeRecv_event_loop_0
   \   000016   E9           MOV     A,R1
   \                     ??zclZigbeeRecv_event_loop_0:
   \   000017   7033         JNZ     ??zclZigbeeRecv_event_loop_1
    175              {
    176                while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigbeeReceiver_TaskID )) )
    177                {   
    178                  switch ( MSGpkt->hdr.event )
    179                  {       
    180                  case ZCL_INCOMING_MSG: //0x34 : Incoming ZCL foundation message
    181                      show("ZCL_INCOMING_MSG");
    182                      // Incoming ZCL Foundation command/response messages
    183                      zclZigbeeReceiver_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt ); 
    184                      break; 
    185                  case KEY_CHANGE: //0xC0 : Key Events
    186                      show("KEY_CHANGE");
    187                      zclZigbeeReceiver_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );            
    188                      break;           
    189                  case AF_DATA_CONFIRM_CMD:           
    190                      strcpy(device_manager.Type, "\r 1 \n");  
    191                      strcpy(device_manager.Module, "\r 140 \n");        
    192                      
    193                      if (MSGpkt->cmd.DataLength > 0)
    194                        for(len = 0; len < MSGpkt->cmd.DataLength; len++) // Send the recv_data to UART
    195                        {
    196                          device_manager.Data[len] = MSGpkt->cmd.Data[len+3]; // the cmd.Data[0~2] is cluster ID.
    197                        }       
    198                      len = MSGpkt->cmd.DataLength;
    199                      break;         
    200                  case ZDO_STATE_CHANGE:       
    201          //            show("ZDO_STATE_CHANGE");
    202                      ZSendMsgProcess("Hi");            
    203                      break;         
    204                  case ZDO_MATCH_DESC_RSP_SENT:       
    205                      show("ZDO_MATCH_DESC_RSP_SENT");
    206                      // Check the state of NWK
    207                      break;         
    208                    default:
    209                      break;
    210                  }
    211                  osal_msg_deallocate( (uint8 *)MSGpkt ); // Release the memory
    212                }
    213                return (events ^ SYS_EVENT_MSG); // return unprocessed events
    214              }
    215            
    216              // The user define application events
    217              switch ( events )
   \   000019   78..         MOV     R0,#?V0 + 2
   \   00001B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_0`:
   \   00001E   0000         DW        0
   \   000020   0400         DW        4
   \   000022   0100         DW        1
   \   000024   ....         DW        ??zclZigbeeRecv_event_loop_2
   \   000026   0200         DW        2
   \   000028   ....         DW        ??zclZigbeeRecv_event_loop_3
   \   00002A   0300         DW        3
   \   00002C   ....         DW        ??zclZigbeeRecv_event_loop_4
   \   00002E   0008         DW        2048
   \   000030   ....         DW        ??zclZigbeeRecv_event_loop_5
   \   000032   ....         DW        ??zclZigbeeRecv_event_loop_6
    218              {
    219                case ZDO_MSG_SEND_EVT:
    220          //          show("ZDO_MSG_SEND_EVT");
    221                      ZSendMsgProcess("Chris:ZDO_MSG_SEND_EVT");                
   \                     ??zclZigbeeRecv_event_loop_5:
   \   000034                ; Setup parameters for call to function ZSendMsgProcess
   \   000034   7A..         MOV     R2,#(`?<Constant "Chris:ZDO_MSG_SEND_EVT">` & 0xff)
   \   000036   7B..         MOV     R3,#((`?<Constant "Chris:ZDO_MSG_SEND_EVT">` >> 8) & 0xff)
   \   000038   12....       LCALL   ??ZSendMsgProcess?relay
   \   00003B   02....       LJMP    ??zclZigbeeRecv_event_loop_6 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_7:
   \   00003E                ; Setup parameters for call to function show
   \   00003E   7A..         MOV     R2,#(`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` & 0xff)
   \   000040   7B..         MOV     R3,#((`?<Constant "ZDO_MATCH_DESC_RSP_SENT">` >> 8) & 0xff)
   \   000042   12....       LCALL   ??show?relay
   \                     ??zclZigbeeRecv_event_loop_8:
   \   000045                ; Setup parameters for call to function osal_msg_deallocate
   \   000045   AA..         MOV     R2,?V0 + 0
   \   000047   AB..         MOV     R3,?V0 + 1
   \   000049   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??zclZigbeeRecv_event_loop_1:
   \   00004C                ; Setup parameters for call to function osal_msg_receive
   \   00004C   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_receive?relay
   \   000054   8A..         MOV     ?V0 + 0,R2
   \   000056   8B..         MOV     ?V0 + 1,R3
   \   000058   EA           MOV     A,R2
   \   000059   7001         JNZ     ??zclZigbeeRecv_event_loop_9
   \   00005B   EB           MOV     A,R3
   \                     ??zclZigbeeRecv_event_loop_9:
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??zclZigbeeRecv_event_loop_10 & 0xFFFF
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_1`:
   \   000069   00           DB        0
   \   00006A   05           DB        5
   \   00006B   34           DB        52
   \   00006C   ....         DW        ??zclZigbeeRecv_event_loop_11
   \   00006E   C0           DB        192
   \   00006F   ....         DW        ??zclZigbeeRecv_event_loop_12
   \   000071   D1           DB        209
   \   000072   ....         DW        ??zclZigbeeRecv_event_loop_13
   \   000074   D2           DB        210
   \   000075   ....         DW        ??zclZigbeeRecv_event_loop_7
   \   000077   FD           DB        253
   \   000078   ....         DW        ??zclZigbeeRecv_event_loop_14
   \   00007A   ....         DW        ??zclZigbeeRecv_event_loop_8
   \                     ??zclZigbeeRecv_event_loop_11:
   \   00007C                ; Setup parameters for call to function show
   \   00007C   7A..         MOV     R2,#(`?<Constant "ZCL_INCOMING_MSG">` & 0xff)
   \   00007E   7B..         MOV     R3,#((`?<Constant "ZCL_INCOMING_MSG">` >> 8) & 0xff)
   \   000080   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclZigbeeRecv_event_loop>_2`:
   \   00008B   00           DB        0
   \   00008C   02           DB        2
   \   00008D   01           DB        1
   \   00008E   ....         DW        ??zclZigbeeRecv_event_loop_15
   \   000090   04           DB        4
   \   000091   ....         DW        ??zclZigbeeRecv_event_loop_16
   \   000093   ....         DW        ??zclZigbeeRecv_event_loop_17
   \                     ??zclZigbeeRecv_event_loop_15:
   \   000095   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FA           MOV     R2,A
   \   00009A   EB           MOV     A,R3
   \   00009B   C3           CLR     C
   \   00009C   9A           SUBB    A,R2
   \   00009D   5010         JNC     ??zclZigbeeRecv_event_loop_17
   \   00009F   0B           INC     R3
   \   0000A0   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclZigbeeRecv_event_loop_16:
   \   0000A2   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000A5   8001         SJMP    ??zclZigbeeRecv_event_loop_18
   \                     ??zclZigbeeRecv_event_loop_19:
   \   0000A7   0B           INC     R3
   \                     ??zclZigbeeRecv_event_loop_18:
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EB           MOV     A,R3
   \   0000AB   C3           CLR     C
   \   0000AC   9A           SUBB    A,R2
   \   0000AD   40F8         JC      ??zclZigbeeRecv_event_loop_19
   \                     ??zclZigbeeRecv_event_loop_17:
   \   0000AF   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   EA           MOV     A,R2
   \   0000B7   7001         JNZ     ??zclZigbeeRecv_event_loop_20
   \   0000B9   EB           MOV     A,R3
   \                     ??zclZigbeeRecv_event_loop_20:
   \   0000BA   6089         JZ      ??zclZigbeeRecv_event_loop_8
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   12....       LCALL   ??osal_mem_free?relay
   \   0000BF   8084         SJMP    ??zclZigbeeRecv_event_loop_8
   \                     ??zclZigbeeRecv_event_loop_12:
   \   0000C1                ; Setup parameters for call to function show
   \   0000C1   7A..         MOV     R2,#(`?<Constant "KEY_CHANGE">` & 0xff)
   \   0000C3   7B..         MOV     R3,#((`?<Constant "KEY_CHANGE">` >> 8) & 0xff)
   \   0000C5   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CB   4003         JC      $+5
   \   0000CD   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \   0000D0   7408         MOV     A,#0x8
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   E4           CLR     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000E2   75..01       MOV     ?V0 + 4,#0x1
   \   0000E5   78..         MOV     R0,#?V0 + 4
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EA   75..00       MOV     ?V0 + 4,#0x0
   \   0000ED   75..00       MOV     ?V0 + 5,#0x0
   \   0000F0   78..         MOV     R0,#?V0 + 4
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   78..         MOV     R0,#?V0 + 4
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   75....       MOV     ?V0 + 4,#(bindingInClusters & 0xff)
   \   0000FD   75....       MOV     ?V0 + 5,#((bindingInClusters >> 8) & 0xff)
   \   000100   78..         MOV     R0,#?V0 + 4
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000105   75..02       MOV     ?V0 + 4,#0x2
   \   000108   78..         MOV     R0,#?V0 + 4
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010D   75..04       MOV     ?V0 + 4,#0x4
   \   000110   75..01       MOV     ?V0 + 5,#0x1
   \   000113   78..         MOV     R0,#?V0 + 4
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118                ; Setup parameters for call to function NLME_GetShortAddr
   \   000118   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00011B   EA           MOV     A,R2
   \   00011C   FC           MOV     R4,A
   \   00011D   EB           MOV     A,R3
   \   00011E   FD           MOV     R5,A
   \   00011F   790D         MOV     R1,#0xd
   \   000121   7409         MOV     A,#0x9
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   AA82         MOV     R2,DPL
   \   000128   AB83         MOV     R3,DPH
   \   00012A   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00012D   7409         MOV     A,#0x9
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000132   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_14:
   \   000135                ; Setup parameters for call to function strcpy
   \   000135   7C..         MOV     R4,#(`?<Constant "\\r 1 \\n">` & 0xff)
   \   000137   7D..         MOV     R5,#((`?<Constant "\\r 1 \\n">` >> 8) & 0xff)
   \   000139   7A..         MOV     R2,#(device_manager & 0xff)
   \   00013B   7B..         MOV     R3,#((device_manager >> 8) & 0xff)
   \   00013D   12....       LCALL   ??strcpy?relay
   \   000140                ; Setup parameters for call to function strcpy
   \   000140   7C..         MOV     R4,#(`?<Constant "\\r 140 \\n">` & 0xff)
   \   000142   7D..         MOV     R5,#((`?<Constant "\\r 140 \\n">` >> 8) & 0xff)
   \   000144   7A..         MOV     R2,#((device_manager + 8) & 0xff)
   \   000146   7B..         MOV     R3,#(((device_manager + 8) >> 8) & 0xff)
   \   000148   12....       LCALL   ??strcpy?relay
   \   00014B   E5..         MOV     A,?V0 + 0
   \   00014D   241F         ADD     A,#0x1f
   \   00014F   F8           MOV     R0,A
   \   000150   E5..         MOV     A,?V0 + 1
   \   000152   3400         ADDC    A,#0x0
   \   000154   F9           MOV     R1,A
   \   000155   8882         MOV     DPL,R0
   \   000157   8983         MOV     DPH,R1
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   7002         JNZ     ??zclZigbeeRecv_event_loop_21
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeRecv_event_loop_21:
   \   00015E   604D         JZ      ??zclZigbeeRecv_event_loop_22
   \   000160   E4           CLR     A
   \   000161   90....       MOV     DPTR,#len
   \   000164   8034         SJMP    ??zclZigbeeRecv_event_loop_23
   \                     ??zclZigbeeRecv_event_loop_24:
   \   000166   90....       MOV     DPTR,#len
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   FA           MOV     R2,A
   \   00016B   E5..         MOV     A,?V0 + 0
   \   00016D   2421         ADD     A,#0x21
   \   00016F   F582         MOV     DPL,A
   \   000171   E5..         MOV     A,?V0 + 1
   \   000173   3400         ADDC    A,#0x0
   \   000175   F583         MOV     DPH,A
   \   000177   E0           MOVX    A,@DPTR
   \   000178   2A           ADD     A,R2
   \   000179   FC           MOV     R4,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   3400         ADDC    A,#0x0
   \   00017E   8C82         MOV     DPL,R4
   \   000180   F583         MOV     DPH,A
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   C0E0         PUSH    A
   \   000188   EA           MOV     A,R2
   \   000189   24..         ADD     A,#((device_manager + 18) & 0xff)
   \   00018B   F582         MOV     DPL,A
   \   00018D   E4           CLR     A
   \   00018E   34..         ADDC    A,#(((device_manager + 18) >> 8) & 0xff)
   \   000190   F583         MOV     DPH,A
   \   000192   D0E0         POP     A
   \   000194   F0           MOVX    @DPTR,A
   \   000195   90....       MOV     DPTR,#len
   \   000198   E0           MOVX    A,@DPTR
   \   000199   04           INC     A
   \                     ??zclZigbeeRecv_event_loop_23:
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   FC           MOV     R4,A
   \   00019D   8882         MOV     DPL,R0
   \   00019F   8983         MOV     DPH,R1
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FA           MOV     R2,A
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   FB           MOV     R3,A
   \   0001A6   C3           CLR     C
   \   0001A7   EC           MOV     A,R4
   \   0001A8   9A           SUBB    A,R2
   \   0001A9   E4           CLR     A
   \   0001AA   9B           SUBB    A,R3
   \   0001AB   40B9         JC      ??zclZigbeeRecv_event_loop_24
   \                     ??zclZigbeeRecv_event_loop_22:
   \   0001AD   8882         MOV     DPL,R0
   \   0001AF   8983         MOV     DPH,R1
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   90....       MOV     DPTR,#len
   \   0001B5   F0           MOVX    @DPTR,A
   \   0001B6   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_13:
   \   0001B9                ; Setup parameters for call to function ZSendMsgProcess
   \   0001B9   7A..         MOV     R2,#(`?<Constant "Hi">` & 0xff)
   \   0001BB   7B..         MOV     R3,#((`?<Constant "Hi">` >> 8) & 0xff)
   \   0001BD   12....       LCALL   ??ZSendMsgProcess?relay
   \   0001C0   02....       LJMP    ??zclZigbeeRecv_event_loop_8 & 0xFFFF
   \                     ??zclZigbeeRecv_event_loop_10:
   \   0001C3   AA..         MOV     R2,?V0 + 2
   \   0001C5   7480         MOV     A,#-0x80
   \   0001C7   65..         XRL     A,?V0 + 3
   \   0001C9   FB           MOV     R3,A
   \   0001CA   8045         SJMP    ??zclZigbeeRecv_event_loop_25
    222                      break;
    223                case SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT: // ZIGBEE Receiver identify timeout event
    224                  show("SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT");
   \                     ??zclZigbeeRecv_event_loop_2:
   \   0001CC                ; Setup parameters for call to function show
   \   0001CC   7A..         MOV     R2,#(`?<Constant "SAMPLELIGHT_IDENTIFY_...">` & 0xff)
   \   0001CE   7B..         MOV     R3,#((`?<Constant "SAMPLELIGHT_IDENTIFY_...">` >> 8) & 0xff)
   \   0001D0   12....       LCALL   ??show?relay
    225                  if ( zclZigbeeRecv_IdentifyTime > 0 )
   \   0001D3   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   7002         JNZ     ??zclZigbeeRecv_event_loop_26
   \   0001D9   A3           INC     DPTR
   \   0001DA   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeRecv_event_loop_26:
   \   0001DB   600C         JZ      ??zclZigbeeRecv_event_loop_27
    226                       zclZigbeeRecv_IdentifyTime--;
   \   0001DD   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   24FF         ADD     A,#-0x1
   \   0001E3   F0           MOVX    @DPTR,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   34FF         ADDC    A,#-0x1
   \   0001E8   F0           MOVX    @DPTR,A
    227                       zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \                     ??zclZigbeeRecv_event_loop_27:
   \   0001E9                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   0001E9   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
   \   0001EC   801F         SJMP    ??zclZigbeeRecv_event_loop_6
    228                  break;
    229                
    230                case UART_MSG_EVT: // The UART Message event
    231                  show("UART_MSG_EVT");
   \                     ??zclZigbeeRecv_event_loop_3:
   \   0001EE                ; Setup parameters for call to function show
   \   0001EE   7A..         MOV     R2,#(`?<Constant "UART_MSG_EVT">` & 0xff)
   \   0001F0   7B..         MOV     R3,#((`?<Constant "UART_MSG_EVT">` >> 8) & 0xff)
   \   0001F2   12....       LCALL   ??show?relay
    232                  zclUartReceiver();
   \   0001F5                ; Setup parameters for call to function zclUartReceiver
   \   0001F5   12....       LCALL   ??zclUartReceiver?relay
   \   0001F8   8013         SJMP    ??zclZigbeeRecv_event_loop_6
    233                  break;
    234                
    235                case KEYPAD_MSG_EVT: // The KEYPAD keyin event
    236                  show("KEYPAD_MSG_EVT");
   \                     ??zclZigbeeRecv_event_loop_4:
   \   0001FA                ; Setup parameters for call to function show
   \   0001FA   7A..         MOV     R2,#(`?<Constant "KEYPAD_MSG_EVT">` & 0xff)
   \   0001FC   7B..         MOV     R3,#((`?<Constant "KEYPAD_MSG_EVT">` >> 8) & 0xff)
   \   0001FE   12....       LCALL   ??show?relay
    237                  #if defined( LCD_SUPPORTED )
    238                    HalLcdWriteChar(HAL_LCD_LINE_3, 0, ch);
   \   000201                ; Setup parameters for call to function HalLcdWriteChar
   \   000201   90....       MOV     DPTR,#ch
   \   000204   E0           MOVX    A,@DPTR
   \   000205   FB           MOV     R3,A
   \   000206   7A00         MOV     R2,#0x0
   \   000208   7903         MOV     R1,#0x3
   \   00020A   12....       LCALL   ??HalLcdWriteChar?relay
    239                  #endif
    240                  break;
    241              }    
    242              return 0; // Discard unknown events
   \                     ??zclZigbeeRecv_event_loop_6:
   \   00020D   7A00         MOV     R2,#0x0
   \   00020F   7B00         MOV     R3,#0x0
   \                     ??zclZigbeeRecv_event_loop_25:
   \   000211   7409         MOV     A,#0x9
   \   000213   12....       LCALL   ?DEALLOC_XSTACK8
   \   000216   7F06         MOV     R7,#0x6
   \   000218   02....       LJMP    ?BANKED_LEAVE_XDATA
    243          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??show?relay
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
    244          
    245          /*********************************************************************
    246           * @fn      zclZigbeeReceiver_HandleKeys
    247           * @brief   Handles all key events for this device.
    248           * @param   shift - true if in shift/alt.
    249           * @param   keys - bit field for key events.
    250           *          Valid entries: HAL_KEY_SW_1(MCU-K1)                        
    251           */
    252          static void zclZigbeeReceiver_HandleKeys( byte shift, byte keys )
    253          {
    254            zAddrType_t dstAddr;
    255            (void)shift; // Intentionally unreferenced parameter
    256            
    257          #if defined(Coor_receiver) || defined (Router_receiver)
    258          
    259            if ( keys & HAL_KEY_SW1 ) // Init EndDevice bind reequest, and use cluster list important to binding.
    260            {
    261              dstAddr.addrMode = afAddr16Bit;
    262              dstAddr.addr.shortAddr = 0x0000;   // Coordinator makes the match
    263              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), ZIGBEERECV_ENDPOINT, // ZIGBEERECV_ENDPOINT = 13 is coordinator
    264                                    ZCL_HA_PROFILE_ID, ZCLZIGBEERECV_BINDINGLIST, bindingInClusters, 0,
    265                                    NULL, // No Outgoing clusters to bind
    266                                    TRUE );
    267            }
    268            
    269            if ( keys & HAL_KEY_SW2 ) 
    270            {
    271              
    272            }
    273            
    274          #endif
    275          }
    276          
    277          /*********************************************************************
    278           * @fn      zclZigbeeReceiver_ProcessIdentifyTimeChange
    279           * @brief   Called to process any change to the IdentifyTime attribute.
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          static void zclZigbeeReceiver_ProcessIdentifyTimeChange( void )
   \                     zclZigbeeReceiver_ProcessIdentifyTimeChange:
    282          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    283            if ( zclZigbeeRecv_IdentifyTime > 0 )
   \   000004   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_0:
   \   00000C   601F         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1
    284            {
    285              osal_start_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   7CE8         MOV     R4,#-0x18
   \   000010   7D03         MOV     R5,#0x3
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_start_timerEx?relay
    286              HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7B05         MOV     R3,#0x5
   \   000024   7AFF         MOV     R2,#-0x1
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   ??HalLedBlink?relay
   \   00002B   8022         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    287            }
    288            else
    289              {
    290                if ( zclZigbeeRecv_OnOff )
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_1:
   \   00002D   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6009         JZ      ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3
    291                {
    292                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7901         MOV     R1,#0x1
   \   000037   12....       LCALL   ??HalLedSet?relay
   \   00003A   8013         SJMP    ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2
    293                }
    294                else
    295                  {
    296                    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_3:
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   ??HalLedSet?relay
    297                    osal_stop_timerEx( zclZigbeeReceiver_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
   \   000043                ; Setup parameters for call to function osal_stop_timerEx
   \   000043   7A01         MOV     R2,#0x1
   \   000045   7B00         MOV     R3,#0x0
   \   000047   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   ??osal_stop_timerEx?relay
    298                  }
    299              }
    300          }
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange_2:
   \   00004F   02....       LJMP    ?Subroutine3 & 0xFFFF
    301          
    302          /*********************************************************************
    303           * @fn      zclZigbeeReceiver_BasicResetCB
    304           * @brief   Callback from the ZCL General Cluster Library
    305           *          to set all the Basic Cluster attributes to default values.
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          static void zclZigbeeReceiver_BasicResetCB( void )
   \                     zclZigbeeReceiver_BasicResetCB:
    308          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    309            // Reset all attributes to default values
    310          }
   \   000000   02....       LJMP    ?BRET
    311          
    312          /*********************************************************************
    313           * @fn      zclZigbeeReceiver_IdentifyCB
    314           * @brief   Callback from the ZCL General Cluster Library when
    315           *          it received an Identity Command for this application.
    316           * @param   srcAddr - source address and endpoint of the response message
    317           *          identifyTime - the number of seconds to identify yourself
    318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    319          static void zclZigbeeReceiver_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclZigbeeReceiver_IdentifyCB:
    320          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    321            zclZigbeeRecv_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   90....       MOV     DPTR,#zclZigbeeRecv_IdentifyTime
   \   000012   E8           MOV     A,R0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E9           MOV     A,R1
   \   000016   F0           MOVX    @DPTR,A
    322            zclZigbeeReceiver_ProcessIdentifyTimeChange();
   \   000017                ; Setup parameters for call to function zclZigbeeReceiver_ProcessIdentifyTimeChange
   \   000017   12....       LCALL   ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r
    323          }
   \   00001A   02....       LJMP    ?Subroutine3 & 0xFFFF
    324          
    325          /*********************************************************************
    326           * @fn      zclZigbeeReceiver_IdentifyQueryRspCB
    327           * @brief   Callback from the ZCL General Cluster Library when
    328           *          it received an Identity Query Response Command for this application.
    329           * @param   srcAddr - requestor's address
    330           *          timeout - number of seconds to identify yourself (valid for query response)
    331           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    332          static void zclZigbeeReceiver_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
   \                     zclZigbeeReceiver_IdentifyQueryRspCB:
    333          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    334            (void)pRsp; // Query Response (with timeout value)
    335          }
   \   000000   02....       LJMP    ?BRET
    336          
    337          /*********************************************************************
    338           * @fn      zclZigbeeReceiver_OnOffCB
    339           * @brief   Callback from the ZCL General Cluster Library when
    340           *          it received an On/Off Command for this application.
    341           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
    342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          static void zclZigbeeReceiver_OnOffCB( uint8 cmd )
   \                     zclZigbeeReceiver_OnOffCB:
    344          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    345            if ( cmd == COMMAND_ON ) // Turn on the light
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   700F         JNZ     ??zclZigbeeReceiver_OnOffCB_0
    346              zclZigbeeRecv_OnOff = LIGHT_ON;
   \                     ??zclZigbeeReceiver_OnOffCB_1:
   \   000009   7401         MOV     A,#0x1
   \                     ??zclZigbeeReceiver_OnOffCB_2:
   \   00000B   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   00000E   F0           MOVX    @DPTR,A
    347          
    348            else if ( cmd == COMMAND_OFF ) // Turn off the light
    349              zclZigbeeRecv_OnOff = LIGHT_OFF;
    350          
    351            else // Toggle the light
    352            {
    353              if ( zclZigbeeRecv_OnOff == LIGHT_OFF )
    354                    zclZigbeeRecv_OnOff = LIGHT_ON;
    355              else
    356                    zclZigbeeRecv_OnOff = LIGHT_OFF;
    357            }
    358          
    359            // In this sample app, we use LED4 to simulate the Light  
    360            if ( zclZigbeeRecv_OnOff == LIGHT_ON )
    361            {
    362              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON ); // setting the LED_1 on
   \   00000F                ; Setup parameters for call to function HalLedSet
   \   00000F   FA           MOV     R2,A
   \   000010   7902         MOV     R1,#0x2
   \   000012   12....       LCALL   ??HalLedSet?relay
    363            }
    364            else
    365              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF ); // setting the LED_1 off
    366          }
   \   000015   02....       LJMP    ?Subroutine3 & 0xFFFF
   \                     ??zclZigbeeReceiver_OnOffCB_0:
   \   000018   E9           MOV     A,R1
   \   000019   7003         JNZ     ??zclZigbeeReceiver_OnOffCB_3
   \                     ??zclZigbeeReceiver_OnOffCB_4:
   \   00001B   E4           CLR     A
   \   00001C   80ED         SJMP    ??zclZigbeeReceiver_OnOffCB_2
   \                     ??zclZigbeeReceiver_OnOffCB_3:
   \   00001E   90....       MOV     DPTR,#zclZigbeeRecv_OnOff
   \   000021   E0           MOVX    A,@DPTR
   \   000022   70F7         JNZ     ??zclZigbeeReceiver_OnOffCB_4
   \   000024   80E3         SJMP    ??zclZigbeeReceiver_OnOffCB_1
    367          /****************************************************************************** 
    368           * 
    369           *  Functions for processing ZCL Foundation incoming Command/Response messages
    370           *
    371           *****************************************************************************/
    372          
    373          /*********************************************************************
    374           * @fn      zclZigbeeReceiver_ProcessIncomingMsg
    375           * @brief   Process ZCL Foundation incoming message
    376           * @param   pInMsg - pointer to the received message
    377           */
    378          static void zclZigbeeReceiver_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
    379          {
    380            switch ( pInMsg->zclHdr.commandID )
    381            {
    382          #ifdef ZCL_READ
    383              case ZCL_CMD_READ_RSP:
    384                zclZigbeeReceiver_ProcessInReadRspCmd( pInMsg );
    385                break;
    386          #endif
    387                
    388          #ifdef ZCL_WRITE    
    389              case ZCL_CMD_WRITE_RSP:
    390                zclZigbeeReceiver_ProcessInWriteRspCmd( pInMsg );
    391                break;
    392          #endif
    393                
    394          #ifdef ZCL_REPORT
    395              case ZCL_CMD_CONFIG_REPORT: // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    396                //zclSampleLight_ProcessInConfigReportCmd( pInMsg );
    397                break;
    398              
    399              case ZCL_CMD_CONFIG_REPORT_RSP:
    400                //zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
    401                break;
    402              
    403              case ZCL_CMD_READ_REPORT_CFG:
    404                //zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
    405                break;
    406              
    407              case ZCL_CMD_READ_REPORT_CFG_RSP:
    408                //zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
    409                break;
    410              
    411              case ZCL_CMD_REPORT:
    412                //zclSampleLight_ProcessInReportCmd( pInMsg );
    413                break;
    414          #endif   
    415                
    416              case ZCL_CMD_DEFAULT_RSP:
    417                zclZigbeeReceiver_ProcessInDefaultRspCmd( pInMsg );
    418                break;
    419                
    420          #ifdef ZCL_DISCOVER     
    421              case ZCL_CMD_DISCOVER_RSP:
    422                zclZigbeeReceiver_ProcessInDiscRspCmd( pInMsg );
    423                break;
    424          #endif
    425                
    426              default:
    427                break;
    428            }
    429            if ( pInMsg->attrCmd )
    430              osal_mem_free( pInMsg->attrCmd );
    431          }
    432          
    433          #ifdef ZCL_READ
    434          /*********************************************************************
    435           * @fn      zclZigbeeReceiver_ProcessInReadRspCmd
    436           * @brief   Process the "Profile" Read Response Command
    437           * @param   pInMsg - incoming message to process
    438           */
    439          static uint8 zclZigbeeReceiver_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    440          {
    441            zclReadRspCmd_t *readRspCmd;
    442            uint8 i;
    443          
    444            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    445            for (i = 0; i < readRspCmd->numAttr; i++)
    446            {
    447              // Notify the originator of the results of the original read attributes attempt and, 
    448              // for each successfull request, the value of the requested attribute
    449            }
    450            return TRUE; 
    451          }
    452          #endif // ZCL_READ
    453          
    454          #ifdef ZCL_WRITE
    455          /*********************************************************************
    456           * @fn      zclZigbeeReceiver_ProcessInWriteRspCmd
    457           * @brief   Process the "Profile" Write Response Command
    458           * @param   pInMsg - incoming message to process
    459           */
    460          static uint8 zclZigbeeReceiver_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    461          {
    462            zclWriteRspCmd_t *writeRspCmd;
    463            uint8 i;
    464          
    465            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    466            for (i = 0; i < writeRspCmd->numAttr; i++)
    467            {
    468              // Notify the device of the results of the its original write attributes command.
    469            }
    470            return TRUE; 
    471          }
    472          #endif // ZCL_WRITE
    473          
    474          /*********************************************************************
    475           * @fn      zclZigbeeReceiver_ProcessInDefaultRspCmd
    476           * @brief   Process the "Profile" Default Response Command
    477           * @param   pInMsg - incoming message to process
    478           */
    479          static uint8 zclZigbeeReceiver_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    480          {
    481            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd; 
    482            // Device is notified of the Default Response command.
    483            (void)pInMsg;
    484            return TRUE; 
    485          }
    486          
    487          #ifdef ZCL_DISCOVER
    488          /*********************************************************************
    489           * @fn      zclZigbeeReceiver_ProcessInDiscRspCmd
    490           * @brief   Process the "Profile" Discover Response Command
    491           * @param   pInMsg - incoming message to process
    492           */
    493          static uint8 zclZigbeeReceiver_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
    494          {
    495            zclDiscoverRspCmd_t *discoverRspCmd;
    496            uint8 i;
    497            
    498            discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
    499            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    500            {
    501              // Device is notified of the result of its attribute discovery command.
    502            }
    503            return TRUE;
    504          }
    505          #endif // ZCL_DISCOVER
    506          
    507          /*********************************************************************
    508           * @fn      zclUARTMsg_CallBack
    509           * @brief   Send data OTA.
    510           * @param   port - UART port.
    511           * @param   event - the UART port event flag.
    512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          void zclUARTMsg_CallBack(uint8 port, uint8 event)
   \                     zclUARTMsg_CallBack:
    514          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    515            (void)port;
    516            
    517            if(Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT) > 0 )
   \   000005                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000005   7900         MOV     R1,#0x0
   \   000007   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00000A   EA           MOV     A,R2
   \   00000B   7001         JNZ     ??zclUARTMsg_CallBack_0
   \   00000D   EB           MOV     A,R3
   \                     ??zclUARTMsg_CallBack_0:
   \   00000E   6022         JZ      ??zclUARTMsg_CallBack_1
    518            {
    519                len = Hal_UART_RxBufLen( MT_UART_DEFAULT_PORT );
   \   000010                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000015   EA           MOV     A,R2
   \   000016   90....       MOV     DPTR,#len
   \   000019   F0           MOVX    @DPTR,A
    520                HalUARTRead( MT_UART_DEFAULT_PORT, TransmitApp_Msg, len );
   \   00001A                ; Setup parameters for call to function HalUARTRead
   \   00001A   FC           MOV     R4,A
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A..         MOV     R2,#(TransmitApp_Msg & 0xff)
   \   00001F   7B..         MOV     R3,#((TransmitApp_Msg >> 8) & 0xff)
   \   000021   7900         MOV     R1,#0x0
   \   000023   12....       LCALL   ??HalUARTRead?relay
    521                osal_set_event( zclZigbeeReceiver_TaskID, UART_MSG_EVT );
   \   000026                ; Setup parameters for call to function osal_set_event
   \   000026   7A02         MOV     R2,#0x2
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   90....       MOV     DPTR,#zclZigbeeReceiver_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??osal_set_event?relay
    522            }
    523          }
   \                     ??zclUARTMsg_CallBack_1:
   \   000032                REQUIRE ?Subroutine4
   \   000032                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    524          
    525          /*********************************************************************
    526           * @fn      zclUartReceiver
    527           * @brief   The coordinator receive command.
    528           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          void zclUartReceiver( void )
   \                     zclUartReceiver:
    530          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    531            show("zclUartReceiver");
   \   000005                ; Setup parameters for call to function show
   \   000005   7A..         MOV     R2,#(`?<Constant "zclUartReceiver">` & 0xff)
   \   000007   7B..         MOV     R3,#((`?<Constant "zclUartReceiver">` >> 8) & 0xff)
   \   000009   12....       LCALL   ??show?relay
    532            
    533            for(uint8 length = 0; length < len; length++)
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   8024         SJMP    ??zclUartReceiver_0
    534            {
    535              uart_recv[length] = TransmitApp_Msg[length];
   \                     ??zclUartReceiver_1:
   \   000010   8E82         MOV     DPL,R6
   \   000012   A882         MOV     R0,DPL
   \   000014   E8           MOV     A,R0
   \   000015   24..         ADD     A,#(TransmitApp_Msg & 0xff)
   \   000017   F582         MOV     DPL,A
   \   000019   E4           CLR     A
   \   00001A   34..         ADDC    A,#((TransmitApp_Msg >> 8) & 0xff)
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   E8           MOV     A,R0
   \   000021   24..         ADD     A,#(uart_recv & 0xff)
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   34..         ADDC    A,#((uart_recv >> 8) & 0xff)
   \   000028   F583         MOV     DPH,A
   \   00002A   EB           MOV     A,R3
   \   00002B   F0           MOVX    @DPTR,A
    536            #if defined( LCD_SUPPORTED )
    537              HalLcdWriteChar(HAL_LCD_LINE_4, length, uart_recv[length]);
   \   00002C                ; Setup parameters for call to function HalLcdWriteChar
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   7904         MOV     R1,#0x4
   \   000030   12....       LCALL   ??HalLcdWriteChar?relay
    538            #endif
    539            }
   \   000033   0E           INC     R6
   \                     ??zclUartReceiver_0:
   \   000034   90....       MOV     DPTR,#len
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   EE           MOV     A,R6
   \   00003A   C3           CLR     C
   \   00003B   9A           SUBB    A,R2
   \   00003C   40D2         JC      ??zclUartReceiver_1
    540            
    541            // Set the End Device state
    542            zclZigbeeRecv_DstAddr.endPoint = 12;
   \   00003E   740C         MOV     A,#0xc
   \   000040   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 9)
   \   000043   F0           MOVX    @DPTR,A
    543            zclZigbeeRecv_DstAddr.addr.shortAddr = 0xFFFF;
   \   000044   90....       MOV     DPTR,#zclZigbeeRecv_DstAddr
   \   000047   74FF         MOV     A,#-0x1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   F0           MOVX    @DPTR,A
    544            zclZigbeeRecv_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00004C   740F         MOV     A,#0xf
   \   00004E   90....       MOV     DPTR,#(zclZigbeeRecv_DstAddr + 8)
   \   000051   F0           MOVX    @DPTR,A
    545              
    546            // Transmit the UART command to End Device
    547            uint8 send = zcl_SendCommand( ZIGBEERECV_ENDPOINT, 
    548                                          &zclZigbeeRecv_DstAddr,
    549                                          ZCL_CLUSTER_ID_GEN_ON_OFF,
    550                                          COMMAND_TOGGLE,
    551                                          TRUE,
    552                                          ZCL_FRAME_CLIENT_SERVER_DIR,
    553                                          false,
    554                                          0,
    555                                          0,
    556                                          10,
    557                                          uart_recv );
   \   000052                ; Setup parameters for call to function zcl_SendCommand
   \   000052   75....       MOV     ?V0 + 0,#(uart_recv & 0xff)
   \   000055   75....       MOV     ?V0 + 1,#((uart_recv >> 8) & 0xff)
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..0A       MOV     ?V0 + 0,#0xa
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..00       MOV     ?V0 + 0,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   75..02       MOV     ?V0 + 0,#0x2
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   7C06         MOV     R4,#0x6
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A..         MOV     R2,#(zclZigbeeRecv_DstAddr & 0xff)
   \   000095   7B..         MOV     R3,#((zclZigbeeRecv_DstAddr >> 8) & 0xff)
   \   000097   790D         MOV     R1,#0xd
   \   000099   12....       LCALL   ??zcl_SendCommand?relay
   \   00009C   740B         MOV     A,#0xb
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    558          }
   \   0000A1   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bindingInClusters>`:
   \   000000   06000800     DW 6, 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zigbeeReceiver_TestEp>`:
   \   000000   14           DB 20
   \   000001   ....0000     DW zclZigbeeReceiver_TaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclZigbeeReceiver_CmdCallbac`:
   \   000000   ....         DW ??zclZigbeeReceiver_BasicResetCB?relay
   \   000002   ....         DW ??zclZigbeeReceiver_IdentifyCB?relay
   \   000004   ....         DW ??zclZigbeeReceiver_IdentifyQueryRspCB?relay
   \   000006   ....0000     DW ??zclZigbeeReceiver_OnOffCB?relay, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
   \            00000000
   \            00000000
   \            00000000
   \            0000    
   \   000018   00000000     DW 0H, 0H
   \   00001C   0000         DB 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZSendMsgProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZSendMsgProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeRecv_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeRecv_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclZigbeeReceiver_OnOffCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclZigbeeReceiver_OnOffCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUARTMsg_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUARTMsg_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclUartReceiver?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclUartReceiver

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RECV_GROUP">`:
   \   000000   52454356     DB "RECV_GROUP"
   \            5F47524F
   \            555000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZCL_INCOMING_MSG">`:
   \   000000   5A434C5F     DB "ZCL_INCOMING_MSG"
   \            494E434F
   \            4D494E47
   \            5F4D5347
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEY_CHANGE">`:
   \   000000   4B45595F     DB "KEY_CHANGE"
   \            4348414E
   \            474500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r 1 \\n">`:
   \   000000   0D203120     DB "\015 1 \012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r 140 \\n">`:
   \   000000   0D203134     DB "\015 140 \012"
   \            30200A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hi">`:
   \   000000   486900       DB "Hi"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZDO_MATCH_DESC_RSP_SENT">`:
   \   000000   5A444F5F     DB "ZDO_MATCH_DESC_RSP_SENT"
   \            4D415443
   \            485F4445
   \            53435F52
   \            53505F53
   \            454E5400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Chris:ZDO_MSG_SEND_EVT">`:
   \   000000   43687269     DB "Chris:ZDO_MSG_SEND_EVT"
   \            733A5A44
   \            4F5F4D53
   \            475F5345
   \            4E445F45
   \            565400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLELIGHT_IDENTIFY_...">`:
   \   000000   53414D50     DB "SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT"
   \            4C454C49
   \            4748545F
   \            4944454E
   \            54494659
   \            5F54494D
   \            454F5554
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_MSG_EVT">`:
   \   000000   55415254     DB "UART_MSG_EVT"
   \            5F4D5347
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEYPAD_MSG_EVT">`:
   \   000000   4B455950     DB "KEYPAD_MSG_EVT"
   \            41445F4D
   \            53475F45
   \            565400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zclUartReceiver">`:
   \   000000   7A636C55     DB "zclUartReceiver"
   \            61727452
   \            65636569
   \            76657200

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ZSendMsgProcess                    2      0     23
       -> HalUARTWrite                  4      0      0
       -> HalUARTWrite                  4      0      0
       -> HalUARTWrite                  4      0      0
       -> HalUARTWrite                  4      0      0
       -> osal_start_timerEx            4      0      0
     zclUARTMsg_CallBack                0      0     10
       -> Hal_UART_RxBufLen             0      0     20
       -> Hal_UART_RxBufLen             0      0     20
       -> HalUARTRead                   0      0     20
       -> osal_set_event                0      0     20
     zclUartReceiver                    1      0     44
       -> show                          0      0     20
       -> HalLcdWriteChar               0      0     20
       -> zcl_SendCommand               0      0     42
     zclZigbeeReceiver_BasicResetCB     0      0      0
     zclZigbeeReceiver_IdentifyCB       2      0      0
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        4      0      0
     zclZigbeeReceiver_IdentifyQueryRspCB
                                        0      0      0
     zclZigbeeReceiver_OnOffCB          2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        2      0     23
       -> osal_start_timerEx            4      0      0
       -> HalLedBlink                   4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_stop_timerEx             4      0      0
     zclZigbeeRecv_Init                 0      0     14
       -> zclZD_Init                    0      0     22
       -> zclGeneral_RegisterCmdCallbacks
                                        0      0     22
       -> zcl_registerAttrList          0      0     22
       -> zcl_registerForMsg            0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> afRegister                    0      0     22
       -> osal_set_event                0      0     22
     zclZigbeeRecv_event_loop           1      0     32
       -> ZSendMsgProcess               0      0     46
       -> show                          0      0     46
       -> osal_msg_deallocate           0      0     46
       -> osal_msg_receive              0      0     46
       -> show                          0      0     46
       -> osal_mem_free                 0      0     46
       -> show                          0      0     46
       -> NLME_GetShortAddr             0      0     64
       -> ZDP_EndDeviceBindReq          0      0     64
       -> strcpy                        0      0     46
       -> strcpy                        0      0     46
       -> ZSendMsgProcess               0      0     46
       -> show                          0      0     46
       -> zclZigbeeReceiver_ProcessIdentifyTimeChange
                                        0      0     46
       -> show                          0      0     46
       -> zclUartReceiver               0      0     46
       -> show                          0      0     46
       -> HalLcdWriteChar               0      0     46


   Segment part sizes:

     Function/Label                                  Bytes
     --------------                                  -----
     send_msg_counter                                   1
     zclZigbeeReceiver_TaskID                           1
     ZDO_MSG_SEND_ID                                    1
     len                                                1
     TransmitApp_Msg                                  102
     UartTransmit_Msg                                 102
     uart_recv                                        102
     zclZigbeeRecv_DstAddr                             12
     zclZigbeeRecv_Group                               18
     bindingInClusters                                  4
     zigbeeReceiver_TestEp                              6
     zclZigbeeReceiver_CmdCallbacks                    30
     ZSendMsgProcess                                   82
     ?Subroutine3                                       7
     zclZigbeeRecv_Init                               148
     zclZigbeeRecv_event_loop                         539
     ?Subroutine1                                      13
     ?Subroutine0                                      14
     ?Subroutine2                                      14
     zclZigbeeReceiver_ProcessIdentifyTimeChange
                                                       82
     zclZigbeeReceiver_BasicResetCB                     3
     zclZigbeeReceiver_IdentifyCB                      29
     zclZigbeeReceiver_IdentifyQueryRspCB
                                                        3
     zclZigbeeReceiver_OnOffCB                         38
     zclUARTMsg_CallBack                               50
     ?Subroutine4                                       5
     zclUartReceiver                                  164
     ?<Initializer for bindingInClusters>               4
     ?<Initializer for zigbeeReceiver_TestEp>           6
     ?<Initializer for zclZigbeeReceiver_CmdCallbac    30
     ??ZSendMsgProcess?relay                            6
     ??zclZigbeeRecv_Init?relay                         6
     ??zclZigbeeRecv_event_loop?relay                   6
     ??zclZigbeeReceiver_ProcessIdentifyTimeChange?r    6
     ??zclZigbeeReceiver_BasicResetCB?relay             6
     ??zclZigbeeReceiver_IdentifyCB?relay               6
     ??zclZigbeeReceiver_IdentifyQueryRspCB?relay       6
     ??zclZigbeeReceiver_OnOffCB?relay                  6
     ??zclUARTMsg_CallBack?relay                        6
     ??zclUartReceiver?relay                            6
     ?<Constant "\r\n">                                 3
     ?<Constant "RECV_GROUP">                          11
     ?<Constant "ZCL_INCOMING_MSG">                    17
     ?<Constant "KEY_CHANGE">                          11
     ?<Constant "\r 1 \n">                              6
     ?<Constant "\r 140 \n">                            8
     ?<Constant "Hi">                                   3
     ?<Constant "ZDO_MATCH_DESC_RSP_SENT">             24
     ?<Constant "Chris:ZDO_MSG_SEND_EVT">              23
     ?<Constant "SAMPLELIGHT_IDENTIFY_...">            33
     ?<Constant "UART_MSG_EVT">                        13
     ?<Constant "KEYPAD_MSG_EVT">                      15
     ?<Constant "zclUartReceiver">                     16

 
 1 191 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
    40 bytes in segment XDATA_I
    40 bytes in segment XDATA_ID
   183 bytes in segment XDATA_ROM_C
   340 bytes in segment XDATA_Z
 
 1 291 bytes of CODE  memory
   183 bytes of CONST memory
   380 bytes of XDATA memory

Errors: none
Warnings: 2
