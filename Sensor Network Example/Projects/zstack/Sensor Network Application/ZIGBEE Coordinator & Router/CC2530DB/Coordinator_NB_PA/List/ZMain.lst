###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                30/Aug/2010  08:56:27 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\X #
#                          T200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\ZMain\TI2530DB\ZMain.c                     #
#    Command line       =  -f "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRout #
#                          er\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Sensor Network Application\ZIGBEE      #
#                          Coordinator & Router\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func   #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wConfig.cfg" (-DSECURE=0                     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRout #
#                          er\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Sensor Network Application\ZIGBEE      #
#                          Coordinator & Router\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE            #
#                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF            #
#                          -DZCL_KEY_ESTABLISH -DZCL_LOAD_CONTROL             #
#                          -DZCL_SIMPLE_METERING -DZCL_PRICING)               #
#                          -DZCL_MESSAGE D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ #
#                          ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\ZMain\TI2530DB\ZMain.c -D    #
#                          CC2530 -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D    #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                      #
#                          xLCD_SUPPORTED=DEBUG -D Coor_receiver -D           #
#                          xHAL_KEYPAD -D PA2591 -lC                          #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\Coordinator_NB_PA\Li #
#                          st\" -lA "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigb #
#                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Sensor Network                   #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\Coordinator_NB_PA\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\Coordinator_NB_PA\Ob #
#                          j\" -e --require_prototypes --debug --core=plain   #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì #
#                          ¤j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Sensor Network    #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_ #
#                          Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Sensor Network       #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\SOURCE\" -I    #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigb #
#                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Sensor Network                   #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\HAL\INCLUDE\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤ #
#                          j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 #
#                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530NB\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-St #
#                          ack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Sensor Network           #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Z #
#                          igbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Sensor Network                #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zig #
#                          beeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Sensor Network                  #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeR #
#                          outer\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\P #
#                          rojects\zstack\Sensor Network Application\ZIGBEE   #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\NWK\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_ #
#                          Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Sensor Network       #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigbee #
#                          Router\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Sensor Network Application\ZIGBEE  #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\SAPI\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j #
#                          _Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Sensor Network      #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigbee #
#                          Router\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Sensor Network Application\ZIGBEE  #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\ZCL\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_ #
#                          Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Sensor Network       #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigbee #
#                          Router\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Sensor Network Application\ZIGBEE  #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\ZMAC\F8W\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z #
#                          -Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530 #
#                          -2.3.0-1.4.0\Projects\zstack\Sensor Network        #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRout #
#                          er\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Sensor Network Application\ZIGBEE      #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\SERVICES\SADDR\" -I                          #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\SERVICES\SDATA\" -I                          #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\INCLUDE\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤ #
#                          j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 #
#                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Z #
#                          igbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Sensor Network                #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-St #
#                          ack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Sensor Network           #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR               #
#                          Systems\Embedded Workbench MCS 51\8051\INC\" -I    #
#                          "C:\IAR Systems\Embedded Workbench MCS             #
#                          51\8051\INC\CLIB\" -Ohz                            #
#    List file          =  D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\X #
#                          T200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Sensor Network Application\ZIGBEE          #
#                          Coordinator & Router\CC2530DB\Coordinator_NB_PA\Li #
#                          st\ZMain.lst                                       #
#    Object file        =  D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\X #
#                          T200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Sensor Network Application\ZIGBEE          #
#                          Coordinator & Router\CC2530DB\Coordinator_NB_PA\Ob #
#                          j\ZMain.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2009-09-17 20:35:33 -0700 (Thu, 17 Sep 2009) $
      4            Revision:       $Revision: 20782 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            Should you have any questions regarding your right to use this Software,
     12            contact Texas Instruments Incorporated at www.TI.com.
     13          **************************************************************************************************/
     14          
     15          /*********************************************************************
     16           * INCLUDES
     17           */
     18          #include "ZComDef.h"
     19          
     20          /* OSAL */
     21          #include "OSAL.h"
     22          #include "OSAL_Nv.h"
     23          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     24          
     25          /* ZMac */
     26          #include "ZMAC.h"
     27          #ifndef NONWK
     28            #include "AF.h"
     29          #endif
     30          
     31          /* Hal */
     32          #include "hal_lcd.h"
     33          #include "hal_keypad.h"
     34          #include "hal_led.h"
     35          #include "hal_adc.h"
     36          #include "hal_drivers.h"
     37          #include "hal_assert.h"
     38          #include "hal_flash.h"
     39          #include "hal_keypad.h"
     40          #include "hal_buzzer.h"
     41          #include "hal_rs485.h"
     42          
     43          /* Sensor */
     44          #if defined(M140)||(M170)||(M200)
     45            #include "M200.h"
     46            #include "M140.h"
     47          #endif
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * CONSTANTS
     55           */
     56          
     57          // Maximun number of Vdd samples checked before go on
     58          #define MAX_VDD_SAMPLES  3
     59          #define ZMAIN_VDD_LIMIT  HAL_ADC_VDD_LIMIT_4
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL VARIABLES
     67           */
     68          
     69          /*********************************************************************
     70           * EXTERNAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * EXTERNAL FUNCTIONS
     75           */
     76          extern bool HalAdcCheckVdd (uint8 limit);
     77          
     78          /*********************************************************************
     79           * LOCAL FUNCTIONS
     80           */
     81          static void zmain_dev_info( void );
     82          static void zmain_ext_addr( void );
     83          static void zmain_vdd_check( void );
     84          
     85          #ifdef LCD_SUPPORTED
     86            static void zmain_lcd_init( void );
     87          #endif
     88          
     89          /*********************************************************************
     90           * @fn      main
     91           * @brief   First function called after startup.
     92           * @return  don't caresd
     93           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     94          int main( void )
   \                     main:
     95          { 
   \   000000                ; Auto size: 0
     96            // Turn off interrupts
     97            osal_int_disable( INTS_ALL ); 
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
     98            // Initialization for board related stuff such as LEDs
     99            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   7001         JNZ     ??main_2
   \   00001F   E9           MOV     A,R1
   \                     ??main_2:
   \   000020   70F1         JNZ     ??main_1
   \   000022   75C680       MOV     0xc6,#-0x80
   \                     ??main_3:
   \   000025   7480         MOV     A,#-0x80
   \   000027   659E         XRL     A,0x9e
   \   000029   70FA         JNZ     ??main_3
   \   00002B   43BE04       ORL     0xbe,#0x4
   \   00002E   7408         MOV     A,#0x8
   \   000030   906270       MOV     DPTR,#0x6270
   \   000033   F0           MOVX    @DPTR,A
   \   000034   43FE01       ORL     0xfe,#0x1
   \   000037   43FE02       ORL     0xfe,#0x2
   \   00003A   43FE04       ORL     0xfe,#0x4
   \   00003D   43FE08       ORL     0xfe,#0x8
    100            // Make sure supply voltage is high enough to run
    101            zmain_vdd_check();
   \   000040                ; Setup parameters for call to function zmain_vdd_check
   \   000040   12....       LCALL   ??zmain_vdd_check?relay
    102            // Initialize board I/O
    103            InitBoard( OB_COLD );
   \   000043                ; Setup parameters for call to function InitBoard
   \   000043   7900         MOV     R1,#0x0
   \   000045   12....       LCALL   ??InitBoard?relay
    104            // Initialze HAL drivers
    105            HalDriverInit(); 
   \   000048                ; Setup parameters for call to function HalDriverInit
   \   000048   12....       LCALL   ??HalDriverInit?relay
    106            // Initialize NV System
    107            osal_nv_init( NULL ); 
   \   00004B                ; Setup parameters for call to function osal_nv_init
   \   00004B   7A00         MOV     R2,#0x0
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??osal_nv_init?relay
    108            // Initialize the MAC
    109            ZMacInit(); 
   \   000052                ; Setup parameters for call to function ZMacInit
   \   000052   12....       LCALL   ??ZMacInit?relay
    110            // Determine the extended address
    111            zmain_ext_addr(); 
   \   000055                ; Setup parameters for call to function zmain_ext_addr
   \   000055   12....       LCALL   ??zmain_ext_addr?relay
    112            // Initialize basic NV items
    113            zgInit(); 
   \   000058                ; Setup parameters for call to function zgInit
   \   000058   12....       LCALL   ??zgInit?relay
    114            // Since the AF isn't a task, call it's initialization routine
    115          #ifndef NONWK
    116            afInit(); 
   \   00005B                ; Setup parameters for call to function afInit
   \   00005B   12....       LCALL   ??afInit?relay
    117          #endif
    118            // Initialize the operating system
    119            osal_init_system(); 
   \   00005E                ; Setup parameters for call to function osal_init_system
   \   00005E   12....       LCALL   ??osal_init_system?relay
    120            // Allow interrupts
    121            osal_int_enable( INTS_ALL );
   \   000061                ; Setup parameters for call to function osal_int_enable
   \   000061   79FF         MOV     R1,#-0x1
   \   000063   12....       LCALL   ??osal_int_enable?relay
    122            // Final board initialization
    123            InitBoard( OB_READY ); 
   \   000066                ; Setup parameters for call to function InitBoard
   \   000066   7902         MOV     R1,#0x2
   \   000068   12....       LCALL   ??InitBoard?relay
    124            // Display information about this device
    125            zmain_dev_info(); 
    126            // Display the device info on the LCD 
    127          #ifdef LCD_SUPPORTED
    128            zmain_lcd_init(); 
    129          #endif
    130            // If WDT is used, this is a good place to enable it.
    131          #ifdef WDT_IN_PM1
    132            WatchDogEnable( WDTIMX ); 
    133          #endif 
    134            
    135          #ifdef RS485
    136            HalRS485Init(); // Initilization the RS485 Enable pin to low
    137          #endif
    138            
    139            // No Return from here
    140            osal_start_system(); 
   \   00006B                ; Setup parameters for call to function osal_start_system
   \   00006B   12....       LCALL   ??osal_start_system?relay
    141          
    142            return 0;  // Shouldn't get here.
   \   00006E   7A00         MOV     R2,#0x0
   \   000070   7B00         MOV     R3,#0x0
   \   000072   02....       LJMP    ?BRET
   \   000075                REQUIRE SLEEPSTA
   \   000075                REQUIRE CLKCONSTA
   \   000075                REQUIRE SLEEPCMD
   \   000075                REQUIRE CLKCONCMD
   \   000075                REQUIRE P1DIR
    143          } // main()
    144          
    145          /*********************************************************************
    146           * @fn      zmain_vdd_check
    147           * @brief   Check if the Vdd is OK to run the processor.
    148           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    149           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    151          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    152            uint8 vdd_passed_count = 0;
   \   000005   7E00         MOV     R6,#0x0
    153            bool toggle = 0;
   \   000007   7F00         MOV     R7,#0x0
    154          
    155            // Repeat getting the sample until number of failures or successes hits MAX
    156            // then based on the count value, determine if the device is ready or not
    157            while ( vdd_passed_count < MAX_VDD_SAMPLES )
    158            {
    159              if ( HalAdcCheckVdd (ZMAIN_VDD_LIMIT) )
   \                     ??zmain_vdd_check_0:
   \   000009                ; Setup parameters for call to function HalAdcCheckVdd
   \   000009   7904         MOV     R1,#0x4
   \   00000B   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000E   E9           MOV     A,R1
   \   00000F   601D         JZ      ??zmain_vdd_check_1
    160              {
    161                vdd_passed_count++;    // Keep track # times Vdd passes in a row
   \   000011   0E           INC     R6
    162                MicroWait (10000);     // Wait 10ms to try again
   \   000012                ; Setup parameters for call to function Onboard_wait
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B27         MOV     R3,#0x27
   \   000016   12....       LCALL   ??Onboard_wait?relay
    163              }
    164              else
    165              {
    166                vdd_passed_count = 0;  // Reset passed counter
    167                MicroWait (50000);     // Wait 50ms
    168                MicroWait (50000);     // Wait another 50ms to try again
    169              }
    170              
    171              if (vdd_passed_count == 0) // toggle LED1 and LED2
   \   000019   EE           MOV     A,R6
   \   00001A   6022         JZ      ??zmain_vdd_check_2
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   40E8         JC      ??zmain_vdd_check_0
    172              {
    173                if ((toggle = !(toggle)))
    174                  HAL_TOGGLE_LED1();
    175                else
    176                  HAL_TOGGLE_LED2();
    177              }
    178            }
    179            
    180            /* turn off LED1 */
    181            HAL_TURN_OFF_LED1();
   \   000021   D290         SETB    0x90.0
    182            HAL_TURN_OFF_LED2();
   \   000023   D291         SETB    0x90.1
    183            
    184            #if !defined ( XT200_PA )
    185              HAL_TURN_OFF_LED3();
   \   000025   D292         SETB    0x90.2
    186              HAL_TURN_OFF_LED4();
   \   000027   D293         SETB    0x90.3
    187            #endif
    188          }
   \   000029   7F01         MOV     R7,#0x1
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_vdd_check_1:
   \   00002E   7E00         MOV     R6,#0x0
   \   000030                ; Setup parameters for call to function Onboard_wait
   \   000030   7A50         MOV     R2,#0x50
   \   000032   7BC3         MOV     R3,#-0x3d
   \   000034   12....       LCALL   ??Onboard_wait?relay
   \   000037                ; Setup parameters for call to function Onboard_wait
   \   000037   7A50         MOV     R2,#0x50
   \   000039   7BC3         MOV     R3,#-0x3d
   \   00003B   12....       LCALL   ??Onboard_wait?relay
   \                     ??zmain_vdd_check_2:
   \   00003E   EF           MOV     A,R7
   \   00003F   700A         JNZ     ??zmain_vdd_check_3
   \   000041   7F01         MOV     R7,#0x1
   \   000043   A290         MOV     C,0x90.0
   \   000045   400E         JC      ??zmain_vdd_check_4
   \   000047   D290         SETB    0x90.0
   \   000049   80BE         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_3:
   \   00004B   7F00         MOV     R7,#0x0
   \   00004D   A291         MOV     C,0x90.1
   \   00004F   4008         JC      ??zmain_vdd_check_5
   \   000051   D291         SETB    0x90.1
   \   000053   80B4         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_4:
   \   000055   C290         CLR     0x90.0
   \   000057   80B0         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_5:
   \   000059   C291         CLR     0x90.1
   \   00005B   80AC         SJMP    ??zmain_vdd_check_0
   \   00005D                REQUIRE _A_P1
    189          
    190          /**************************************************************************************************
    191           * @fn          zmain_ext_addr
    192           * @brief       Execute a prioritized search for a valid extended address and write the results
    193           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    194           **************************************************************************************************
    195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    197          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    198            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff)
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    199            uint8 writeNV = TRUE;
    200          
    201            // First check whether a non-erased extended address exists in the OSAL NV.
    202            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    203                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    204                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A982         MOV     R1,DPL
   \   000027   AA83         MOV     R2,DPH
   \   000029   89..         MOV     ?V0 + 4,R1
   \   00002B   8A..         MOV     ?V0 + 5,R2
   \   00002D   F5..         MOV     ?V0 + 6,A
   \   00002F                ; Setup parameters for call to function osal_nv_item_init
   \   00002F   F5..         MOV     ?V0 + 8,A
   \   000031   F5..         MOV     ?V0 + 9,A
   \   000033   78..         MOV     R0,#?V0 + 8
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C08         MOV     R4,#0x8
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A01         MOV     R2,#0x1
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_nv_item_init?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   7046         JNZ     ??zmain_ext_addr_0
   \   00004B                ; Setup parameters for call to function osal_nv_read
   \   00004B   75....       MOV     ?V0 + 8,#(aExtendedAddress & 0xff)
   \   00004E   75....       MOV     ?V0 + 9,#((aExtendedAddress >> 8) & 0xff)
   \   000051   78..         MOV     R0,#?V0 + 8
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   75..08       MOV     ?V0 + 8,#0x8
   \   000059   75..00       MOV     ?V0 + 9,#0x0
   \   00005C   78..         MOV     R0,#?V0 + 8
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C00         MOV     R4,#0x0
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7A01         MOV     R2,#0x1
   \   000067   7B00         MOV     R3,#0x0
   \   000069   12....       LCALL   ??osal_nv_read?relay
   \   00006C   7404         MOV     A,#0x4
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   E9           MOV     A,R1
   \   000072   701D         JNZ     ??zmain_ext_addr_0
   \   000074                ; Setup parameters for call to function osal_memcmp
   \   000074   78..         MOV     R0,#?V0 + 4
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000079   7C08         MOV     R4,#0x8
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   79..         MOV     R1,#(aExtendedAddress & 0xff)
   \   00007F   7A..         MOV     R2,#((aExtendedAddress >> 8) & 0xff)
   \   000081   7B00         MOV     R3,#0x0
   \   000083   12....       LCALL   ??osal_memcmp?relay
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   E9           MOV     A,R1
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    205            {
    206              // Attempt to read the extended address from the location on the lock bits page
    207              // where the programming tools know to reserve it.
    208              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000091                ; Setup parameters for call to function HalFlashRead
   \   000091   75..08       MOV     ?V0 + 8,#0x8
   \   000094   78..         MOV     R0,#?V0 + 8
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7C..         MOV     R4,#(aExtendedAddress & 0xff)
   \   00009B   7D..         MOV     R5,#((aExtendedAddress >> 8) & 0xff)
   \   00009D   7AE8         MOV     R2,#-0x18
   \   00009F   7B07         MOV     R3,#0x7
   \   0000A1   797F         MOV     R1,#0x7f
   \   0000A3   12....       LCALL   ??HalFlashRead?relay
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
    209          
    210              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AB                ; Setup parameters for call to function osal_memcmp
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B0   7C08         MOV     R4,#0x8
   \   0000B2   7D00         MOV     R5,#0x0
   \   0000B4   79..         MOV     R1,#(aExtendedAddress & 0xff)
   \   0000B6   7A..         MOV     R2,#((aExtendedAddress >> 8) & 0xff)
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   12....       LCALL   ??osal_memcmp?relay
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   E9           MOV     A,R1
   \   0000C3   6038         JZ      ??zmain_ext_addr_2
    211              {
    212                // Attempt to read the extended address from the designated location in the Info Page.
    213                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000C5                ; Setup parameters for call to function osal_memcmp
   \   0000C5   78..         MOV     R0,#?V0 + 4
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CA   7C08         MOV     R4,#0x8
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   790C         MOV     R1,#0xc
   \   0000D0   7A78         MOV     R2,#0x78
   \   0000D2   7B00         MOV     R3,#0x0
   \   0000D4   12....       LCALL   ??osal_memcmp?relay
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   7057         JNZ     ??zmain_ext_addr_3
    214                {
    215                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   75..0C       MOV     ?V0 + 0,#0xc
   \   0000E2   75..78       MOV     ?V0 + 1,#0x78
   \   0000E5   75..00       MOV     ?V0 + 2,#0x0
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000ED   7C08         MOV     R4,#0x8
   \   0000EF   7D00         MOV     R5,#0x0
   \   0000F1   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   0000F3   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   0000F5   12....       LCALL   ??osal_memcpy?relay
   \   0000F8   7403         MOV     A,#0x3
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
    216                }
    217                else  // No valid extended address was found.
    218                {
    219                  uint8 idx;
    220                  
    221          #if !defined ( NV_RESTORE )
    222                  writeNV = FALSE;  // Make this a temporary IEEE address
    223          #endif
    224          
    225                  // Attempt to create a sufficiently random extended address for expediency.
    226                  // Note: this is only valid/legal in a test environment and must never be used for a commercial product.                
    227                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    228                  {
    229                    uint16 randy = osal_rand();
    230                    aExtendedAddress[idx++] = LO_UINT16(randy);
    231                    aExtendedAddress[idx++] = HI_UINT16(randy);
    232                  }
    233                  // Next-to-MSB identifies ZigBee devicetype.
    234          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    235                  aExtendedAddress[idx++] = 0x10;
    236          #elif ZG_BUILD_RTRONLY_TYPE
    237                  aExtendedAddress[idx++] = 0x20;
    238          #else
    239                  aExtendedAddress[idx++] = 0x30;
    240          #endif
    241                  // MSB has historical signficance.
    242                  aExtendedAddress[idx] = 0xF8;
    243                }
    244              }
    245              if (writeNV)
    246              {
    247                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   0000FD                ; Setup parameters for call to function osal_nv_write
   \   0000FD   75....       MOV     ?V0 + 0,#(aExtendedAddress & 0xff)
   \   000100   75....       MOV     ?V0 + 1,#((aExtendedAddress >> 8) & 0xff)
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   75..08       MOV     ?V0 + 0,#0x8
   \   00010B   75..00       MOV     ?V0 + 1,#0x0
   \   00010E   78..         MOV     R0,#?V0 + 0
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   7C00         MOV     R4,#0x0
   \   000115   7D00         MOV     R5,#0x0
   \   000117   7A01         MOV     R2,#0x1
   \   000119   7B00         MOV     R3,#0x0
   \   00011B   12....       LCALL   ??osal_nv_write?relay
   \   00011E   7404         MOV     A,#0x4
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
    248              }
    249            }
    250            // Set the MAC PIB extended address according to results from above.
    251            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000123                ; Setup parameters for call to function ZMacSetReq
   \   000123   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   000125   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   000127   79E2         MOV     R1,#-0x1e
   \   000129   12....       LCALL   ??ZMacSetReq?relay
    252          }
   \   00012C   7408         MOV     A,#0x8
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   7F0A         MOV     R7,#0xa
   \   000133   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000136   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   000138                ; Setup parameters for call to function osal_rand
   \   000138   12....       LCALL   ??osal_rand?relay
   \   00013B   8A..         MOV     ?V0 + 0,R2
   \   00013D   A8..         MOV     R0,?V0 + 0
   \   00013F   8E..         MOV     ?V0 + 0,R6
   \   000141   E5..         MOV     A,?V0 + 0
   \   000143   12....       LCALL   ??Subroutine1_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000146   E8           MOV     A,R0
   \   000147   F0           MOVX    @DPTR,A
   \   000148   0E           INC     R6
   \   000149   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00014C   EB           MOV     A,R3
   \   00014D   F0           MOVX    @DPTR,A
   \   00014E   0E           INC     R6
   \   00014F   EE           MOV     A,R6
   \   000150   C3           CLR     C
   \   000151   9406         SUBB    A,#0x6
   \   000153   40E3         JC      ??zmain_ext_addr_4
   \   000155   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000158   7410         MOV     A,#0x10
   \   00015A   F0           MOVX    @DPTR,A
   \   00015B   7401         MOV     A,#0x1
   \   00015D   2E           ADD     A,R6
   \   00015E   12....       LCALL   ??Subroutine1_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000161   74F8         MOV     A,#-0x8
   \   000163   F0           MOVX    @DPTR,A
   \   000164   80BD         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine1_0
   \   000001                ; // Fall through to label ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine1_0:
   \   000000   24..         ADD     A,#(aExtendedAddress & 0xff)
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#((aExtendedAddress >> 8) & 0xff)
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_vdd_check?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FFFFFFFF     DB 255, 255, 255, 255, 255, 255, 255, 255
   \            FFFFFFFF
    253          
    254          /**************************************************************************************************
    255           * @fn          zmain_dev_info
    256           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    257           *************************************************************************************************/
    258          static void zmain_dev_info(void)
    259          {
    260          #ifdef LCD_SUPPORTED
    261            uint8 i;
    262            uint8 *xad;
    263            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    264          
    265            xad = aExtendedAddress + Z_EXTADDR_LEN - 1; // Display the extended address.
    266          
    267            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    268            {
    269              uint8 ch;
    270              ch = (*xad >> 4) & 0x0F;
    271              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    272              ch = *xad & 0x0F;
    273              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    274            }
    275            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    276            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    277            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    278          #endif
    279          }
    280          
    281          #ifdef LCD_SUPPORTED
    282          /*********************************************************************
    283           * @fn      zmain_lcd_init
    284           * @brief   Initialize LCD at start up.
    285           *********************************************************************/
    286          static void zmain_lcd_init ( void )
    287          {
    288          #ifdef SERIAL_DEBUG_SUPPORTED
    289            {
    290              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    291          
    292            #if defined( MT_MAC_FUNC )
    293            #if defined( ZDO_COORDINATOR )
    294                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    295            #else
    296                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    297            #endif // ZDO
    298            #elif defined( MT_NWK_FUNC )
    299            
    300            #if defined( ZDO_COORDINATOR )
    301                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    302            #else
    303                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    304            #endif // ZDO
    305            #endif // MT_FUNC
    306            }
    307            #endif // SERIAL_DEBUG_SUPPORTED
    308          }
    309          #endif
    310          
    311          /*********************************************************************
    312          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     main                       0      0      0
       -> osal_int_disable      0      0      0
       -> zmain_vdd_check       0      0      0
       -> InitBoard             0      0      0
       -> HalDriverInit         0      0      0
       -> osal_nv_init          0      0      0
       -> ZMacInit              0      0      0
       -> zmain_ext_addr        0      0      0
       -> zgInit                0      0      0
       -> afInit                0      0      0
       -> osal_init_system      0      0      0
       -> osal_int_enable       0      0      0
       -> InitBoard             0      0      0
       -> osal_start_system     0      0      0
     zmain_ext_addr             2      0     30
       -> osal_nv_item_init     0      0     56
       -> osal_nv_read          0      0     60
       -> osal_memcmp           0      0     58
       -> HalFlashRead          0      0     56
       -> osal_memcmp           0      0     58
       -> osal_memcmp           0      0     58
       -> osal_memcpy           0      0     58
       -> osal_nv_write         0      0     60
       -> ZMacSetReq            0      0     52
       -> osal_rand             0      0     52
     zmain_vdd_check            0      0      9
       -> HalAdcCheckVdd        0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P1DIR                                             1
     main                                            117
     zmain_vdd_check                                  93
     zmain_ext_addr                                  358
     ?Subroutine0                                      1
     ??Subroutine1_0                                  10
     ??main?relay                                      6
     ??zmain_vdd_check?relay                           6
     ??zmain_ext_addr?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8

 
 579 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   6 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 597 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
