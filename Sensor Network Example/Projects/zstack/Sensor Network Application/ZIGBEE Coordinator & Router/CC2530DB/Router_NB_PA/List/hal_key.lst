###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                27/Aug/2010  11:02:34 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\X #
#                          T200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Componen #
#                          ts\hal\target\CC2530NB\hal_key.c                   #
#    Command line       =  -f "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRout #
#                          er\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Sensor Network Application\ZIGBEE      #
#                          Coordinator & Router\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wRouter.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-St #
#                          ack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Sensor Network           #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRout #
#                          er\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Sensor Network Application\ZIGBEE      #
#                          Coordinator & Router\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE            #
#                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF            #
#                          -DZCL_KEY_ESTABLISH -DZCL_LOAD_CONTROL             #
#                          -DZCL_SIMPLE_METERING -DZCL_PRICING)               #
#                          -DZCL_MESSAGE D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ #
#                          ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\Components\hal\target\CC2530NB\hal_key.c -D  #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          Router_receiver -D HAL_KEYPAD -D PA2591 -lC        #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\Router_NB_PA\List\"  #
#                          -lA "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRou #
#                          ter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Pro #
#                          jects\zstack\Sensor Network Application\ZIGBEE     #
#                          Coordinator & Router\CC2530DB\Router_NB_PA\List\"  #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\Router_NB_PA\Obj\"   #
#                          -e --require_prototypes --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì #
#                          ¤j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Sensor Network    #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_ #
#                          Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Sensor Network       #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\SOURCE\" -I    #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\ZMAIN\TI253 #
#                          0DB\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigb #
#                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Sensor Network                   #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\HAL\INCLUDE\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤ #
#                          j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 #
#                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530NB\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-St #
#                          ack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Sensor Network           #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Z #
#                          igbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Sensor Network                #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zig #
#                          beeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Sensor Network                  #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeR #
#                          outer\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\P #
#                          rojects\zstack\Sensor Network Application\ZIGBEE   #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\NWK\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_ #
#                          Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Sensor Network       #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigbee #
#                          Router\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Sensor Network Application\ZIGBEE  #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\SAPI\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j #
#                          _Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC25 #
#                          30-2.3.0-1.4.0\Projects\zstack\Sensor Network      #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigbee #
#                          Router\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Sensor Network Application\ZIGBEE  #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\STACK\ZCL\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_ #
#                          Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC253 #
#                          0-2.3.0-1.4.0\Projects\zstack\Sensor Network       #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Zigbee #
#                          Router\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Sensor Network Application\ZIGBEE  #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\ZMAC\F8W\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z #
#                          -Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530 #
#                          -2.3.0-1.4.0\Projects\zstack\Sensor Network        #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRout #
#                          er\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Sensor Network Application\ZIGBEE      #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\SERVICES\SADDR\" -I                          #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\SERVICES\SDATA\" -I                          #
#                          "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\ #
#                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Sensor Network Application\ZIGBEE         #
#                          Coordinator & Router\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\MAC\INCLUDE\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤ #
#                          j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 #
#                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_Z #
#                          igbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Sensor Network                #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-St #
#                          ack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Sensor Network           #
#                          Application\ZIGBEE Coordinator &                   #
#                          Router\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR               #
#                          Systems\Embedded Workbench MCS 51\8051\INC\" -I    #
#                          "C:\IAR Systems\Embedded Workbench MCS             #
#                          51\8051\INC\CLIB\" -Ohz                            #
#    List file          =  D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\X #
#                          T200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Sensor Network Application\ZIGBEE          #
#                          Coordinator & Router\CC2530DB\Router_NB_PA\List\ha #
#                          l_key.lst                                          #
#    Object file        =  D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\X #
#                          T200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Sensor Network Application\ZIGBEE          #
#                          Coordinator & Router\CC2530DB\Router_NB_PA\Obj\hal #
#                          _key.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\Z-Stack¾ã²zCode\«n¶}¬ì¤j_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Components\hal\target\CC2530NB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
      4            Revision:       $Revision: 21351 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            Should you have any questions regarding your right to use this Software,
     11            contact Texas Instruments Incorporated at www.TI.com.
     12          **************************************************************************************************/
     13          /*********************************************************************
     14           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     15                 to occur every 100ms.  This should be long enough to naturally
     16                 debounce the keys.  The KeyRead() function remembers the key
     17                 state of the previous poll and will only return a non-zero
     18                 value if the key state changes.
     19          
     20           NOTE: If interrupts are used, the KeyRead() function is scheduled
     21                 25ms after the interrupt occurs by the ISR.  This delay is used
     22                 for key debouncing.  The ISR disables any further Key interrupt
     23                 until KeyRead() is executed.  KeyRead() will re-enable Key
     24                 interrupts after executing.  Unlike polling, when interrupts
     25                 are enabled, the previous key state is not remembered.  This
     26                 means that KeyRead() will return the current state of the keys
     27                 (not a change in state of the keys).
     28          
     29           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     30                 the ISR.  Therefore, the joystick movements will only be detected
     31                 during a pushbutton interrupt caused by S1 or the center joystick
     32                 pushbutton.
     33          
     34           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     35                 high state to a low state.  This transition is typically clean.  The
     36                 duration of the low state is around 200ms.  When the signal returns
     37                 to the high state, there is a high likelihood of signal bounce, which
     38                 causes a unwanted interrupts.  Normally, we would set the interrupt
     39                 edge to falling edge to generate an interrupt when S1 is pushed, but
     40                 because of the signal bounce, it is better to set the edge to rising
     41                 edge to generate an interrupt when S1 is released.  The debounce logic
     42                 can then filter out the signal bounce.  The result is that we typically
     43                 get only 1 interrupt per button push.  This mechanism is not totally
     44                 foolproof because occasionally, signal bound occurs during the falling
     45                 edge as well.  A similar mechanism is used to handle the joystick
     46                 pushbutton on the DB.  For the EB, we do not have independent control
     47                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     48                 a result, only one or the other pushbuttons work reasonably well with
     49                 interrupts.  The default is the make the S1 switch on the EB work more
     50                 reliably.
     51          
     52          *********************************************************************/
     53          
     54          /**************************************************************************************************
     55           *                                            INCLUDES
     56           **************************************************************************************************/
     57          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     58          #include "hal_defs.h"
     59          #include "hal_types.h"
     60          #include "hal_board.h"
     61          #include "hal_drivers.h"
     62          #include "hal_adc.h"
     63          #include "hal_key.h"
     64          #include "osal.h"
     65          #include "hal_lcd.h"
     66          
     67          #include "mac_radio_defs.h"
     68          #include "mac_low_level.h"
     69          #include "hal_keypad.h"
     70          
     71          //#if (defined HAL_KEY) && (HAL_KEY == TRUE)
     72          /**************************************************************************************************
     73           *                                              MACROS
     74           **************************************************************************************************/
     75          
     76          /**************************************************************************************************
     77           *                                            CONSTANTS
     78           **************************************************************************************************/
     79          #define HAL_KEY_RISING_EDGE   0
     80          #define HAL_KEY_FALLING_EDGE  1
     81          
     82          #define HAL_KEY_DEBOUNCE_VALUE  25
     83          #define HAL_KEY_POLLING_VALUE   100
     84          
     85          /* CPU port interrupt */
     86          #define HAL_KEY_CPU_PORT_0_IF P0IF
     87          #define HAL_KEY_CPU_PORT_2_IF P2IF
     88          
     89          /* SW_6 is at P0.1 */
     90          #define HAL_KEY_SW_6_PORT   P0
     91          #define HAL_KEY_SW_6_BIT    BV(1)
     92          #define HAL_KEY_SW_6_SEL    P0SEL
     93          #define HAL_KEY_SW_6_DIR    P0DIR
     94          
     95          /* edge interrupt */
     96          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
     97          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
     98          
     99          /* SW_6 interrupts */
    100          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    101          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    102          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    103          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    104          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    105          
    106          /**************************************************************************************************
    107           *                                            TYPEDEFS
    108           **************************************************************************************************/
    109          /**************************************************************************************************
    110           *                                        GLOBAL VARIABLES
    111           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    116          
    117          /**************************************************************************************************
    118           *                                        FUNCTIONS - Local
    119           **************************************************************************************************/
    120          void halProcessKeyInterrupt(void);
    121          
    122          /**************************************************************************************************
    123           *                                        FUNCTIONS - API
    124           **************************************************************************************************/
    125          
    126          /**************************************************************************************************
    127           * @fn      HalKeyInit
    128           * @brief   Initilize Key Service
    129           * @param   none
    130           * @return  None
    131           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    132          void HalKeyInit( void )
   \                     HalKeyInit:
    133          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    134          #if (HAL_KEY == TRUE)
    135            /* Initialize previous key to 0 */
    136            halKeySavedKeys = 0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#halKeySavedKeys
   \   000008   F0           MOVX    @DPTR,A
    137            
    138            /* Initialize callback function */
    139            pHalKeyProcessFunction  = NULL;
   \   000009   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   F0           MOVX    @DPTR,A
    140          
    141            /* Start with key is not configured */
    142            HalKeyConfigured = FALSE;
   \   00000F   90....       MOV     DPTR,#HalKeyConfigured
   \   000012   F0           MOVX    @DPTR,A
    143          #endif /* HAL_KEY */
    144          }
   \   000013   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    145          
    146          /*******************************************************************************
    147           * @fn      HalKeyConfig
    148           * @brief   Configure the Key serivce
    149           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    150           *          cback - pointer to the CallBack function
    151           * @return  None
    152           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    154          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    155          #if (HAL_KEY == TRUE) 
    156            /* Enable/Disable Interrupt or */
    157            Hal_KeyIntEnable = interruptEnable;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000008   F0           MOVX    @DPTR,A
    158          
    159            /* Register the callback fucntion */
    160            pHalKeyProcessFunction = cback;
   \   000009   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000C   EA           MOV     A,R2
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   EB           MOV     A,R3
   \   000010   F0           MOVX    @DPTR,A
    161          
    162            /* Determine if interrupt is enable or not */
    163            if (Hal_KeyIntEnable)
   \   000011   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6016         JZ      ??HalKeyConfig_0
    164            {
    165              /* Do this only after the hal_key is configured - to work with sleep stuff */
    166              if (HalKeyConfigured == TRUE)
   \   000017   90....       MOV     DPTR,#HalKeyConfigured
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   701E         JNZ     ??HalKeyConfig_1
    167              {
    168                osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   00001F                ; Setup parameters for call to function osal_stop_timerEx
   \   00001F   7A01         MOV     R2,#0x1
   \   000021   7B00         MOV     R3,#0x0
   \   000023   90....       MOV     DPTR,#Hal_TaskID
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   12....       LCALL   ??osal_stop_timerEx?relay
   \   00002B   8010         SJMP    ??HalKeyConfig_1
    169              }
    170            }
    171            else    /* Interrupts NOT enabled */
    172            {
    173              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
   \                     ??HalKeyConfig_0:
   \   00002D                ; Setup parameters for call to function osal_start_timerEx
   \   00002D   7C64         MOV     R4,#0x64
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7A01         MOV     R2,#0x1
   \   000033   7B00         MOV     R3,#0x0
   \   000035   90....       MOV     DPTR,#Hal_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_start_timerEx?relay
    174            }
    175            /* Key now is configured */
    176            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   00003D   7401         MOV     A,#0x1
   \   00003F   90....       MOV     DPTR,#HalKeyConfigured
   \   000042   F0           MOVX    @DPTR,A
    177            
    178            //Switch Buttons
    179              SWITCH1_INPUT();
   \   000043   53F5F7       ANL     0xf5,#0xf7
   \   000046   53FFF7       ANL     0xff,#0xf7
    180              SWITCH2_INPUT();
   \   000049   53F5EF       ANL     0xf5,#0xef
   \   00004C   53FFEF       ANL     0xff,#0xef
    181          
    182          #endif /* HAL_KEY */
    183          }
   \   00004F   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000052                REQUIRE P2SEL
   \   000052                REQUIRE P2DIR
    184          
    185          
    186          /*******************************************************************************
    187           * @fn      HalKeyRead
    188           * @brief   Read the current value of a key
    189           * @param   None
    190           * @return  keys - current keys status
    191           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    193          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    194            uint8 keys=0;
   \   000000   7900         MOV     R1,#0x0
    195              
    196            if (HAL_SW_1_PUSH())
   \   000002   A2A3         MOV     C,0xa0.3
   \   000004   4010         JC      ??HalKeyRead_0
    197            {
    198              HAL_debounce(!HAL_SW_1_PUSH());
   \   000006   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_1:
   \   000008   A2A3         MOV     C,0xa0.3
   \   00000A   4002         JC      ??HalKeyRead_2
   \   00000C   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_2:
   \   00000E   0A           INC     R2
   \   00000F   EA           MOV     A,R2
   \   000010   C3           CLR     C
   \   000011   9432         SUBB    A,#0x32
   \   000013   40F3         JC      ??HalKeyRead_1
    199              keys |= HAL_KEY_SW1;
   \   000015   09           INC     R1
    200            }
    201            if (HAL_SW_2_PUSH())
   \                     ??HalKeyRead_0:
   \   000016   A2A4         MOV     C,0xa0.4
   \   000018   4013         JC      ??HalKeyRead_3
    202            {
    203              HAL_debounce(!HAL_SW_2_PUSH());
   \   00001A   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_4:
   \   00001C   A2A4         MOV     C,0xa0.4
   \   00001E   4002         JC      ??HalKeyRead_5
   \   000020   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_5:
   \   000022   0A           INC     R2
   \   000023   EA           MOV     A,R2
   \   000024   C3           CLR     C
   \   000025   9432         SUBB    A,#0x32
   \   000027   40F3         JC      ??HalKeyRead_4
    204              keys |= HAL_KEY_SW2;
   \   000029   E9           MOV     A,R1
   \   00002A   D2E3         SETB    0xE0 /* A   */.3
   \   00002C   F9           MOV     R1,A
    205            }
    206            return keys;
   \                     ??HalKeyRead_3:
   \   00002D   02....       LJMP    ?BRET
   \   000030                REQUIRE _A_P2
    207          }
    208          
    209          
    210          /*******************************************************************************
    211           * @fn      HalKeyPoll
    212           * @brief   Called by hal_driver to poll the keys
    213           * @param   None
    214           * @return  None
    215           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          void HalKeyPoll (void)
   \                     HalKeyPoll:
    217          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    218            uint8 keys = 0;
   \   000004   7900         MOV     R1,#0x0
    219            
    220            if (HAL_SW_1_PUSH())
   \   000006   A2A3         MOV     C,0xa0.3
   \   000008   4010         JC      ??HalKeyPoll_0
    221            {
    222              HAL_debounce(!HAL_SW_1_PUSH());
   \   00000A   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_1:
   \   00000C   A2A3         MOV     C,0xa0.3
   \   00000E   4002         JC      ??HalKeyPoll_2
   \   000010   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_2:
   \   000012   0A           INC     R2
   \   000013   EA           MOV     A,R2
   \   000014   C3           CLR     C
   \   000015   9432         SUBB    A,#0x32
   \   000017   40F3         JC      ??HalKeyPoll_1
    223              keys |= HAL_KEY_SW1;
   \   000019   09           INC     R1
    224            }
    225                
    226            if (HAL_SW_2_PUSH())
   \                     ??HalKeyPoll_0:
   \   00001A   A2A4         MOV     C,0xa0.4
   \   00001C   4013         JC      ??HalKeyPoll_3
    227            {
    228              HAL_debounce(!HAL_SW_2_PUSH());
   \   00001E   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_4:
   \   000020   A2A4         MOV     C,0xa0.4
   \   000022   4002         JC      ??HalKeyPoll_5
   \   000024   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_5:
   \   000026   0A           INC     R2
   \   000027   EA           MOV     A,R2
   \   000028   C3           CLR     C
   \   000029   9432         SUBB    A,#0x32
   \   00002B   40F3         JC      ??HalKeyPoll_4
    229              keys |= HAL_KEY_SW2;
   \   00002D   E9           MOV     A,R1
   \   00002E   D2E3         SETB    0xE0 /* A   */.3
   \   000030   F9           MOV     R1,A
    230            }
    231            
    232            /* If interrupts are not enabled, previous key status and current key status
    233             * are compared to find out if a key has changed status.
    234             */
    235            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_3:
   \   000031   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000034   E0           MOVX    A,@DPTR
   \   000035   7009         JNZ     ??HalKeyPoll_6
    236            {
    237              if (keys == halKeySavedKeys)
   \   000037   90....       MOV     DPTR,#halKeySavedKeys
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \   00003C   601F         JZ      ??HalKeyPoll_7
    238              {
    239                /* Exit - since no keys have changed */
    240                return;
    241              }
    242              /* Store the current keys for comparation next time */
    243              halKeySavedKeys = keys;
   \   00003E   E9           MOV     A,R1
   \   00003F   F0           MOVX    @DPTR,A
    244            }
    245            else
    246            {
    247              /* Key interrupt handled here */
    248            }
    249          
    250            /* Invoke Callback if new keys were depressed */
    251            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_6:
   \   000040   E9           MOV     A,R1
   \   000041   601A         JZ      ??HalKeyPoll_7
   \   000043   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000046   E0           MOVX    A,@DPTR
   \   000047   7002         JNZ     ??HalKeyPoll_8
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \                     ??HalKeyPoll_8:
   \   00004B   6010         JZ      ??HalKeyPoll_7
    252            {
    253              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F583         MOV     DPH,A
   \   000058   8882         MOV     DPL,R0
   \   00005A   12....       LCALL   ?CALL_IND
    254            }
   \                     ??HalKeyPoll_7:
   \   00005D                REQUIRE ?Subroutine0
   \   00005D                REQUIRE _A_P2
   \   00005D                ; // Fall through to label ?Subroutine0
    255          }
    256          
    257          /**************************************************************************************************
    258           * @fn      halProcessKeyInterrupt
    259           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    260           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    261           * @param
    262           * @return
    263           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    265          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    266          #if (HAL_KEY == TRUE)
    267            
    268            bool valid=FALSE;
    269          
    270            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000004   E589         MOV     A,0x89
   \   000006   A2E1         MOV     C,0xE0 /* A   */.1
   \   000008   5013         JNC     ??halProcessKeyInterrupt_0
    271            {
    272              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000A   7589FD       MOV     0x89,#-0x3
    273              valid = TRUE;
    274            }
    275          
    276            if (valid)
    277            {
    278              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   7C19         MOV     R4,#0x19
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#Hal_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??osal_start_timerEx?relay
    279            }
    280          #endif /* HAL_KEY */
    281          }
   \                     ??halProcessKeyInterrupt_0:
   \   00001D   80..         SJMP    ?Subroutine0
   \   00001F                REQUIRE P0IFG
    282          
    283          /**************************************************************************************************
    284           * @fn      HalKeyEnterSleep
    285           * @brief  - Get called to enter sleep mode
    286           * @param
    287           * @return
    288           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    290          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    291          }
   \   000000   02....       LJMP    ?BRET
    292          
    293          /**************************************************************************************************
    294           * @fn      HalKeyExitSleep
    295           * @brief   - Get called when sleep is over
    296           * @param
    297           * @return  - return saved keys
    298           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    300          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    301            /* Wake up and read keys */
    302            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   80..         SJMP    ?Subroutine0
    303          }
    304          
    305          /***************************************************************************************************
    306           *                                    INTERRUPT SERVICE ROUTINE
    307           ***************************************************************************************************/
    308          
    309          /**************************************************************************************************
    310           * @fn      halKeyPort0Isr
    311           * @brief   Port0 ISR
    312           * @param
    313           * @return
    314           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    315          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    316          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    317            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   000007   E589         MOV     A,0x89
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5003         JNC     ??halKeyPort0Isr_0
    318            {
    319              halProcessKeyInterrupt();
   \   00000D                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00000D   12....       LCALL   ??halProcessKeyInterrupt?relay
    320            }
    321          
    322            /*
    323              Clear the CPU interrupt flag for Port_0
    324              PxIFG has to be cleared before PxIF
    325            */
    326            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000010   758900       MOV     0x89,#0x0
    327            HAL_KEY_CPU_PORT_0_IF = 0;
   \   000013   C2C5         CLR     0xc0.5
    328          }
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   00001A                REQUIRE _A_IRCON
   \   00001A                REQUIRE P0IFG
    329          
    330          
    331          /**************************************************************************************************
    332           * @fn      halKeyPort2Isr
    333           * @brief   Port2 ISR
    334           * @param
    335           * @return
    336           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    337          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    338          {
   \   000000                ; Saved register size: 1
   \   000000                ; Auto size: 0
    339          //  if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
    340          //  {
    341          //    halProcessKeyInterrupt();
    342          //  }
    343          
    344            /*
    345              Clear the CPU interrupt flag for Port_2
    346              PxIFG has to be cleared before PxIF
    347              Notes: P2_1 and P2_2 are debug lines.
    348            */
    349            //HAL_KEY_JOY_MOVE_PXIFG = 0;
    350            HAL_KEY_CPU_PORT_2_IF = 0;
   \   000000   C2E8         CLR     0xe8.0
    351          }
   \   000002   32           RETI
   \   000003                REQUIRE _A_IRCON2

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyConfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halProcessKeyInterrupt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    352          
    353          //#else
    354          //
    355          //
    356          //void HalKeyInit(void){}
    357          //void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    358          //uint8 HalKeyRead(void){ return 0;}
    359          //void HalKeyPoll(void){}
    360          
    361          //#endif /* HAL_KEY */
    362          
    363          
    364          
    365          
    366          
    367          /**************************************************************************************************
    368          **************************************************************************************************/
    369          
    370          
    371          

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     HalKeyConfig                    2      0      0
       -> osal_stop_timerEx          4      0      0
       -> osal_start_timerEx         4      0      0
     HalKeyEnterSleep                0      0      0
     HalKeyExitSleep                 2      0      0
       -> HalKeyRead                 4      0      0
     HalKeyInit                      2      0      0
     HalKeyPoll                      2      0      0
     HalKeyRead                      0      0      0
     halKeyPort0Isr                 15      0      0
       -> halProcessKeyInterrupt    30      0      0
     halKeyPort2Isr                  1      0      0
     halProcessKeyInterrupt          2      0      0
       -> osal_start_timerEx         4      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     P0IFG                             1
     _A_P2                             1
     _A_IRCON                          1
     _A_IRCON2                         1
     P2SEL                             1
     P2DIR                             1
     halKeySavedKeys                   1
     pHalKeyProcessFunction            2
     HalKeyConfigured                  1
     Hal_KeyIntEnable                  1
     HalKeyInit                       22
     ?Subroutine0                      7
     HalKeyConfig                     82
     HalKeyRead                       48
     HalKeyPoll                       93
     halProcessKeyInterrupt           31
     HalKeyEnterSleep                  3
     HalKeyExitSleep                   9
     halKeyPort0Isr                   26
     halKeyPort2Isr                    3
     ??halKeyPort2Isr??INTVEC 51       3
     ??halKeyPort0Isr??INTVEC 107      3
     ??HalKeyInit?relay                6
     ??HalKeyConfig?relay              6
     ??HalKeyRead?relay                6
     ??HalKeyPoll?relay                6
     ??halProcessKeyInterrupt?relay    6
     ??HalKeyEnterSleep?relay          6
     ??HalKeyExitSleep?relay           6

 
 295 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  29 bytes in segment NEAR_CODE
   6 bytes in segment SFR_AN
   5 bytes in segment XDATA_Z
 
 366 bytes of CODE  memory (+ 6 bytes shared)
   0 bytes of DATA  memory (+ 6 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: none
