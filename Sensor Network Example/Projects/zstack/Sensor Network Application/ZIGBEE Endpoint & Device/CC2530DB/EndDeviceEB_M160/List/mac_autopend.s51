///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               02/Sep/2013  22:54:22 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Components\mac\low_level\srf04\mac_autope /
//                          nd.c                                              /
//    Command line       =  -f "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\GitHub\z-stack\Sensor        /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Components\mac\low_level\srf04\mac_autope /
//                          nd.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D  /
//                          MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D      /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D           /
//                          End_Device -D HAL_KEYPAD -D xPA2591 -D HAL_TIMER  /
//                          -D M160 -lC "D:\GitHub\z-stack\Sensor Network     /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\" -lA       /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint & Device\CC2530DB\"   /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\mac_autopen /
//                          d.s51                                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mac_autopend

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??macSrcMatchCheckSrcAddr?relay
        EXTERN ??macSrcMatchGetEnableBit?relay
        EXTERN ??macSrcMatchSetEnableBit?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND
        EXTERN ?L_EQ_X
        EXTERN ?L_IOR
        EXTERN ?L_NOT
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MAC_SrcMatchAckAllPending?relay
        FUNCTION ??MAC_SrcMatchAckAllPending?relay,0203H
        PUBLIC ??MAC_SrcMatchAddEntry?relay
        FUNCTION ??MAC_SrcMatchAddEntry?relay,0203H
        PUBLIC ??MAC_SrcMatchCheckAllPending?relay
        FUNCTION ??MAC_SrcMatchCheckAllPending?relay,0203H
        PUBLIC ??MAC_SrcMatchCheckResult?relay
        FUNCTION ??MAC_SrcMatchCheckResult?relay,0203H
        PUBLIC ??MAC_SrcMatchDeleteEntry?relay
        FUNCTION ??MAC_SrcMatchDeleteEntry?relay,0203H
        PUBLIC ??MAC_SrcMatchEnable?relay
        FUNCTION ??MAC_SrcMatchEnable?relay,0203H
        FUNCTION ??macSrcMatchCheckSrcAddr?relay,0203H
        FUNCTION ??macSrcMatchGetEnableBit?relay,0203H
        FUNCTION ??macSrcMatchSetEnableBit?relay,0203H
        PUBLIC MAC_SrcMatchAckAllPending
        FUNCTION MAC_SrcMatchAckAllPending,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchAddEntry
        FUNCTION MAC_SrcMatchAddEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchCheckResult
        FUNCTION MAC_SrcMatchCheckResult,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MAC_SrcMatchDeleteEntry
        FUNCTION MAC_SrcMatchDeleteEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MAC_SrcMatchEnable
        FUNCTION MAC_SrcMatchEnable,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK __Constant_0
        PUBLIC macSrcMatchAddrMode
        FUNCTION macSrcMatchCheckSrcAddr,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        FUNCTION macSrcMatchGetEnableBit,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC macSrcMatchIsAckAllPending
        PUBLIC macSrcMatchIsEnabled
        PUBLIC macSrcMatchMaxNumEntries
        FUNCTION macSrcMatchSetEnableBit,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macMemWriteRam      SYMBOL "macMemWriteRam"
macMemReadRam       SYMBOL "macMemReadRam"
osal_build_uint32   SYMBOL "osal_build_uint32"
osal_buffer_uint24  SYMBOL "osal_buffer_uint24"
osal_memcmp         SYMBOL "osal_memcmp"
??macMemReadRam?relay SYMBOL "?relay", macMemReadRam
??macMemWriteRam?relay SYMBOL "?relay", macMemWriteRam
??osal_buffer_uint24?relay SYMBOL "?relay", osal_buffer_uint24
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
??osal_memcmp?relay SYMBOL "?relay", osal_memcmp
MAC_SrcMatchAckAllPending SYMBOL "MAC_SrcMatchAckAllPending"
??MAC_SrcMatchAckAllPending?relay SYMBOL "?relay", MAC_SrcMatchAckAllPending
MAC_SrcMatchAddEntry SYMBOL "MAC_SrcMatchAddEntry"
??MAC_SrcMatchAddEntry?relay SYMBOL "?relay", MAC_SrcMatchAddEntry
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
??MAC_SrcMatchCheckAllPending?relay SYMBOL "?relay", MAC_SrcMatchCheckAllPending
MAC_SrcMatchCheckResult SYMBOL "MAC_SrcMatchCheckResult"
??MAC_SrcMatchCheckResult?relay SYMBOL "?relay", MAC_SrcMatchCheckResult
MAC_SrcMatchDeleteEntry SYMBOL "MAC_SrcMatchDeleteEntry"
??MAC_SrcMatchDeleteEntry?relay SYMBOL "?relay", MAC_SrcMatchDeleteEntry
MAC_SrcMatchEnable  SYMBOL "MAC_SrcMatchEnable"
??MAC_SrcMatchEnable?relay SYMBOL "?relay", MAC_SrcMatchEnable

        EXTERN macMemWriteRam
        FUNCTION macMemWriteRam,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMemReadRam
        FUNCTION macMemReadRam,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint24
        FUNCTION osal_buffer_uint24,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??macMemReadRam?relay
        FUNCTION ??macMemReadRam?relay,00H
        EXTERN ??macMemWriteRam?relay
        FUNCTION ??macMemWriteRam?relay,00H
        EXTERN ??osal_buffer_uint24?relay
        FUNCTION ??osal_buffer_uint24?relay,00H
        EXTERN ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,00H
        EXTERN ??osal_memcmp?relay
        FUNCTION ??osal_memcmp?relay,00H

// D:\GitHub\z-stack\Sensor Network Example\Components\mac\low_level\srf04\mac_autopend.c
//    1 #include "mac_api.h"
//    2 #include "mac_radio_defs.h"
//    3 #include "OSAL.h"
//    4 #include "saddr.h"
//    5 #include "ZComDef.h"
//    6 #include "mac_autopend.h"
//    7 #include "mac_high_level.h"
//    8 #include "mac_spec.h"
//    9 #include "hal_lcd.h"
//   10 
//   11 #define MAC_SRCMATCH_INVALID_INDEX           0xFF
//   12 #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
//   13 #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
//   14 #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
//   15 #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
//   16 #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
//   17 /* bit of proprietary FCS format that indicates if the CRC is OK */
//   18 #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
//   19 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   20 bool macSrcMatchIsEnabled = FALSE; 
macSrcMatchIsEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   21 uint8 macSrcMatchMaxNumEntries = 0;   
macSrcMatchMaxNumEntries:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   22 uint8 macSrcMatchAddrMode = SADDR_MODE_SHORT;  
macSrcMatchAddrMode:
        DS 1
        REQUIRE `?<Initializer for macSrcMatchAddrMode>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   23 bool macSrcMatchIsAckAllPending = FALSE;
macSrcMatchIsAckAllPending:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   24 
//   25 static uint8 macSrcMatchFindEmptyEntry( void );
//   26 static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
//   27 static void macSrcMatchSetPendEnBit( uint8 index );
//   28 static void macSrcMatchSetEnableBit( uint8 index, bool option );
//   29 static bool macSrcMatchCheckEnableBit( uint8 index );
//   30 static uint24 macSrcMatchGetEnableBit( void );
//   31 static uint24 macSrcMatchGetPendEnBit( void );
//   32 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   33 uint8 MAC_SrcMatchEnable ( uint8 addrType, uint8 num  )
MAC_SrcMatchEnable:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MAC_SrcMatchEnable
//   34 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R3,A
//   35   uint8 rtn;
//   36   uint8 maxNum;
//   37     
//   38   /* Verify the address type */
//   39   if( addrType != SADDR_MODE_SHORT && addrType != SADDR_MODE_EXT )
        MOV     A,#0x2
        XRL     A,R3
        JZ      ??MAC_SrcMatchEnable_0
        MOV     A,#0x3
        XRL     A,R3
        JZ      ??MAC_SrcMatchEnable_1
//   40   {
//   41     return MAC_INVALID_PARAMETER;
        MOV     R1,#-0x18
        SJMP    ??MAC_SrcMatchEnable_2
//   42   }
??MAC_SrcMatchEnable_0:
        MOV     R4,#0x18
        SJMP    ??MAC_SrcMatchEnable_3
??MAC_SrcMatchEnable_1:
        MOV     R4,#0xc
//   43   
//   44   maxNum = ( addrType == SADDR_MODE_SHORT ) ? 
//   45            MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES : MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES;
//   46            
//   47   if( num > maxNum )
??MAC_SrcMatchEnable_3:
        MOV     A,R4
        CLR     C
        SUBB    A,R2
        JNC     ??MAC_SrcMatchEnable_4
//   48   {
//   49     rtn = MAC_INVALID_PARAMETER;
        MOV     R1,#-0x18
//   50     num = maxNum;
        MOV     A,R4
        MOV     R2,A
        SJMP    ??MAC_SrcMatchEnable_5
//   51   }
//   52   else
//   53   {
//   54     rtn = MAC_SUCCESS;
??MAC_SrcMatchEnable_4:
        MOV     R1,#0x0
//   55   }
//   56     
//   57   /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
//   58   MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
??MAC_SrcMatchEnable_5:
        MOV     DPTR,#0x6180
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//   59   
//   60   /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
//   61   MAC_RADIO_TURN_ON_AUTO_ACK();
        MOV     DPTR,#0x6189
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//   62   
//   63   /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
//   64   MAC_RADIO_TURN_ON_SRC_MATCH();
        MOV     DPTR,#0x6182
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//   65  
//   66   /* Set SRCMATCH.AUTOPEND */
//   67   MAC_RADIO_TURN_ON_AUTOPEND();
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//   68   
//   69   /* Configure all the globals */
//   70   macSrcMatchIsEnabled = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#macSrcMatchIsEnabled
        MOVX    @DPTR,A
//   71   macSrcMatchMaxNumEntries = num;
        MOV     A,R2
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    @DPTR,A
//   72   macSrcMatchAddrMode = addrType;           
        MOV     A,R3
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    @DPTR,A
//   73 
//   74   return rtn;
??MAC_SrcMatchEnable_2:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock0
//   75 }
//   76 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   77 uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
MAC_SrcMatchAddEntry:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MAC_SrcMatchAddEntry
//   78 {
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macMemWriteRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchAddEntry, macSrcMatchSetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//   79   uint8 index;
//   80   uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
//   81   
//   82   /* Check if the input parameters are valid */
//   83   if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
        MOV     A,R2
        JNZ     ??MAC_SrcMatchAddEntry_0
        MOV     A,R3
??MAC_SrcMatchAddEntry_0:
        JZ      ??MAC_SrcMatchAddEntry_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??MAC_SrcMatchAddEntry_2
//   84   {
//   85     return MAC_INVALID_PARAMETER;  
??MAC_SrcMatchAddEntry_1:
        MOV     R1,#-0x18
        LJMP    ??MAC_SrcMatchAddEntry_3 & 0xFFFF
//   86   }
//   87   
//   88   /* Check if the entry already exists. Do not add duplicated entry */
//   89   if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
??MAC_SrcMatchAddEntry_2:
        ; Setup parameters for call to function macSrcMatchCheckSrcAddr
        MOV     R2,?V0 + 14
        LCALL   ??macSrcMatchCheckSrcAddr?relay
        MOV     A,R1
        XRL     A,#0xff
        JZ      ??MAC_SrcMatchAddEntry_4
//   90   {
//   91     return MAC_DUPLICATED_ENTRY; 
        MOV     R1,#0x1e
        LJMP    ??MAC_SrcMatchAddEntry_3 & 0xFFFF
//   92   }
//   93   
//   94   /* If not duplicated, write to the radio RAM and enable the control bit */
//   95   
//   96   /* Find the first empty entry */
//   97   index = macSrcMatchFindEmptyEntry();
??MAC_SrcMatchAddEntry_4:
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     ?V0 + 4,R2
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     ?V0 + 12,#0x0
        JNZ     ??MAC_SrcMatchAddEntry_5
        SJMP    ??MAC_SrcMatchAddEntry_6
??MAC_SrcMatchAddEntry_7:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 12
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_AND
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??MAC_SrcMatchAddEntry_8
        INC     ?V0 + 12
??MAC_SrcMatchAddEntry_6:
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 12
        CLR     C
        SUBB    A,R2
        JC      ??MAC_SrcMatchAddEntry_7
//   98   if ( index == macSrcMatchMaxNumEntries )
??MAC_SrcMatchAddEntry_9:
        MOVX    A,@DPTR
        XRL     A,?V0 + 12
        JNZ     ??MAC_SrcMatchAddEntry_10
//   99   {
//  100     return MAC_NO_RESOURCES;   /* Table is full */
        MOV     R1,#0x1a
        LJMP    ??MAC_SrcMatchAddEntry_3 & 0xFFFF
??MAC_SrcMatchAddEntry_5:
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 12
        CLR     C
        SUBB    A,R2
        JNC     ??MAC_SrcMatchAddEntry_9
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 12
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_AND
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??MAC_SrcMatchAddEntry_11
        INC     ?V0 + 12
        SJMP    ??MAC_SrcMatchAddEntry_5
//  101   }
//  102   
//  103   if ( macSrcMatchAddrMode == SADDR_MODE_SHORT )
??MAC_SrcMatchAddEntry_10:
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??MAC_SrcMatchAddEntry_11
//  104   {
//  105     /* Write the PanID and short address */
//  106     entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
??MAC_SrcMatchAddEntry_8:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  107     entry[1] = HI_UINT16( panID );
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R7
        MOVX    @DPTR,A
//  108     entry[2] = LO_UINT16( addr->addr.shortAddr );
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  109     entry[3] = HI_UINT16( addr->addr.shortAddr );
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  110     MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
//  111                    entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x4
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        SJMP    ??MAC_SrcMatchAddEntry_12
//  112   }
//  113   else
//  114   {
//  115     /* Write the extended address */
//  116     MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
//  117                    addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
??MAC_SrcMatchAddEntry_11:
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x8
        MOV     R4,?V0 + 14
        MOV     R5,?V0 + 15
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
??MAC_SrcMatchAddEntry_12:
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0x0
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x61
        MOV     R3,A
        LCALL   ??macMemWriteRam?relay
//  118   }
//  119   
//  120   /* Set the Autopend enable bits */
//  121   macSrcMatchSetPendEnBit( index );
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x3
        JNZ     ??MAC_SrcMatchAddEntry_13
        ; Setup parameters for call to function macMemReadRam
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x67
        SJMP    ??MAC_SrcMatchAddEntry_14
??MAC_SrcMatchAddEntry_13:
        ; Setup parameters for call to function macMemReadRam
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x64
??MAC_SrcMatchAddEntry_14:
        MOV     R3,#0x61
        LCALL   ??macMemReadRam?relay
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x3
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_build_uint32?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        JNZ     ??MAC_SrcMatchAddEntry_15
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,?V0 + 12
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x67
        SJMP    ??MAC_SrcMatchAddEntry_16
??MAC_SrcMatchAddEntry_15:
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     A,?V0 + 12
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        ; Setup parameters for call to function macMemWriteRam
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x64
??MAC_SrcMatchAddEntry_16:
        MOV     R3,#0x61
        LCALL   ??macMemWriteRam?relay
//  122   
//  123   /* Set the Src Match enable bits */
//  124   macSrcMatchSetEnableBit( index, TRUE );
        ; Setup parameters for call to function macSrcMatchSetEnableBit
        MOV     R2,#0x1
        MOV     R1,?V0 + 12
        LCALL   ??macSrcMatchSetEnableBit?relay
//  125   
//  126   return MAC_SUCCESS;
        MOV     R1,#0x0
??MAC_SrcMatchAddEntry_3:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  127 }
//  128 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  129 uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
MAC_SrcMatchDeleteEntry:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MAC_SrcMatchDeleteEntry
//  130 {
        FUNCALL MAC_SrcMatchDeleteEntry, macSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MAC_SrcMatchDeleteEntry, macSrcMatchSetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  131   uint8 index;
//  132   
//  133   if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
        MOV     A,R2
        JNZ     ??MAC_SrcMatchDeleteEntry_0
        MOV     A,R3
??MAC_SrcMatchDeleteEntry_0:
        JZ      ??MAC_SrcMatchDeleteEntry_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??MAC_SrcMatchDeleteEntry_2
//  134   {
//  135     return MAC_INVALID_PARAMETER;  
??MAC_SrcMatchDeleteEntry_1:
        MOV     R1,#-0x18
        SJMP    ??MAC_SrcMatchDeleteEntry_3
//  136   }
//  137   
//  138   /* Look up the source address table and find the entry. */
//  139   index = macSrcMatchCheckSrcAddr( addr, panID );
??MAC_SrcMatchDeleteEntry_2:
        ; Setup parameters for call to function macSrcMatchCheckSrcAddr
        LCALL   ??macSrcMatchCheckSrcAddr?relay
//  140 
//  141   if( index == MAC_SRCMATCH_INVALID_INDEX )
        MOV     A,#-0x1
        XRL     A,R1
        JZ      ??MAC_SrcMatchDeleteEntry_1
//  142   {
//  143     return MAC_INVALID_PARAMETER; 
//  144   }
//  145   
//  146   /* Clear Src Match enable bits */
//  147   macSrcMatchSetEnableBit( index, FALSE );
        ; Setup parameters for call to function macSrcMatchSetEnableBit
        MOV     R2,#0x0
        LCALL   ??macSrcMatchSetEnableBit?relay
//  148 
//  149   return MAC_SUCCESS;
        MOV     R1,#0x0
??MAC_SrcMatchDeleteEntry_3:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  150 }
//  151                   

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  152 void MAC_SrcMatchAckAllPending ( uint8 option  ) 
MAC_SrcMatchAckAllPending:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MAC_SrcMatchAckAllPending
//  153 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  154   if( option == TRUE )
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??MAC_SrcMatchAckAllPending_0
//  155   {
//  156     macSrcMatchIsAckAllPending = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    @DPTR,A
//  157     
//  158     /* Set the PENDING_OR register */
//  159     MAC_RADIO_TURN_ON_PENDING_OR();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??MAC_SrcMatchAckAllPending_1
//  160   }
//  161   else
//  162   {
//  163     macSrcMatchIsAckAllPending = FALSE;
??MAC_SrcMatchAckAllPending_0:
        CLR     A
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    @DPTR,A
//  164     
//  165     /* Clear the PENDING_OR register */
//  166     MAC_RADIO_TURN_OFF_PENDING_OR();
        MOV     DPTR,#0x618a
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
??MAC_SrcMatchAckAllPending_1:
        MOVX    @DPTR,A
//  167   }
//  168 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock3
//  169 
//  170 /*********************************************************************
//  171  * @fn          MAC_SrcMatchCheckAllPending
//  172  *
//  173  * @brief       Check if acknowledging all packets with pending bit set
//  174  *              is enabled. 
//  175  *
//  176  * @param       none 
//  177  *
//  178  * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
//  179  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 uint8 MAC_SrcMatchCheckAllPending ( void )
MAC_SrcMatchCheckAllPending:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function MAC_SrcMatchCheckAllPending
//  181 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  182   if( macSrcMatchIsAckAllPending == TRUE )
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??MAC_SrcMatchCheckAllPending_0
//  183   {
//  184     return MAC_AUTOACK_PENDING_ALL_ON; 
        MOV     R1,#-0x2
        SJMP    ??MAC_SrcMatchCheckAllPending_1
//  185   }
//  186   
//  187   return MAC_AUTOACK_PENDING_ALL_OFF;
??MAC_SrcMatchCheckAllPending_0:
        MOV     R1,#-0x1
        CFI EndBlock cfiBlock4
??MAC_SrcMatchCheckAllPending_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  188 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  189 
//  190 /*********************************************************************
//  191  * @fn          MAC_SrcMatchCheckResult
//  192  *
//  193  * @brief       Check the result of source matching
//  194  *
//  195  * @param       index - index of the entry in the source address table
//  196  *
//  197  * @return      TRUE or FALSE
//  198  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 MAC_INTERNAL_API bool MAC_SrcMatchCheckResult( void )
MAC_SrcMatchCheckResult:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function MAC_SrcMatchCheckResult
//  200 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  201   uint8 resIndex;
//  202   
//  203   if ( macSrcMatchIsAckAllPending )
        MOV     DPTR,#macSrcMatchIsAckAllPending
        MOVX    A,@DPTR
        JZ      ??MAC_SrcMatchCheckResult_0
//  204   {
//  205     return (TRUE);
        MOV     R1,#0x1
        SJMP    ??MAC_SrcMatchCheckResult_1
//  206   }
//  207   
//  208   MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
??MAC_SrcMatchCheckResult_0:
        MOV     DPTR,#0x6163
        MOVX    A,@DPTR
        MOV     R2,A
//  209   
//  210   return ( resIndex & AUTOPEND_RES );
        MOV     A,#0x40
        ANL     A,R2
        MOV     R1,A
??MAC_SrcMatchCheckResult_1:
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock6
//  211 }
//  212 
//  213 /*********************************************************************
//  214  * @fn          macSrcMatchFindEmptyEntry
//  215  *
//  216  * @brief       return index of the first empty entry found
//  217  *
//  218  * @param       none
//  219  *
//  220  * @return      uint8 - return index of the first empty entry found
//  221  */
//  222 static uint8 macSrcMatchFindEmptyEntry( void )
//  223 {
//  224   uint8  index;
//  225   uint24 enable;
//  226      
//  227   enable = MAC_RADIO_SRC_MATCH_GET_EN();
//  228         
//  229   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  230   {
//  231     for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
//  232     {  
//  233       if( ( enable & ( (uint24)0x01 << index ) ) == 0 )
//  234       {
//  235         return index;
//  236       }
//  237     }
//  238   }
//  239   else
//  240   {
//  241     for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
//  242     {  
//  243       if( ( enable & ( (uint24)0x01 << ( index * 2 ) ) ) == 0 )
//  244       {
//  245         return index;
//  246       }
//  247     }
//  248   }
//  249   
//  250   /* 
//  251    The value of index shall be macSrcMatchMaxNumEntries when it executes
//  252    here. The table is full.
//  253   */
//  254   return index;
//  255 }
//  256 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  257 static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
macSrcMatchCheckSrcAddr:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function macSrcMatchCheckSrcAddr
//  258 {
        FUNCALL macSrcMatchCheckSrcAddr, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchCheckSrcAddr, macMemReadRam
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchCheckSrcAddr, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  259   uint8 index;     
//  260   uint8 *pAddr;
//  261   uint8 entrySize;
//  262   uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
//  263   uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
//  264 
//  265   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??macSrcMatchCheckSrcAddr_0
//  266   {
//  267     entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
        MOV     A,R4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  268     entry[1] = HI_UINT16( panID );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
//  269     entry[2] = LO_UINT16( addr->addr.shortAddr );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  270     entry[3] = HI_UINT16( addr->addr.shortAddr );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  271     pAddr = entry;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 10,DPL
        MOV     ?V0 + 11,DPH
//  272     entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
        MOV     R7,#0x4
        SJMP    ??macSrcMatchCheckSrcAddr_1
//  273   }
//  274   else
//  275   {
//  276     pAddr = addr->addr.extAddr;
??macSrcMatchCheckSrcAddr_0:
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
//  277     entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
        MOV     R7,#0x8
//  278   }
//  279 
//  280   for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
??macSrcMatchCheckSrcAddr_1:
        MOV     R6,#0x0
        SJMP    ??macSrcMatchCheckSrcAddr_2
??macSrcMatchCheckSrcAddr_3:
        INC     R6
??macSrcMatchCheckSrcAddr_2:
        MOV     DPTR,#macSrcMatchMaxNumEntries
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R6
        CLR     C
        SUBB    A,R2
        JC      $+5
        LJMP    ??macSrcMatchCheckSrcAddr_4 & 0xFFFF
//  281   {
//  282     /* Check if the entry is enabled */
//  283     if( macSrcMatchCheckEnableBit( index ) == FALSE )
        MOV     ?V0 + 8,R6
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??macSrcMatchCheckSrcAddr_5
        MOV     A,?V0 + 8
        CLR     C
        RLC     A
        MOV     ?V0 + 8,A
??macSrcMatchCheckSrcAddr_5:
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,?V0 + 8
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_AND
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??macSrcMatchCheckSrcAddr_3
//  284     {
//  285       continue; 
//  286     }
//  287       
//  288     /* Compare the short address and pan ID */
//  289     MAC_RADIO_SRC_MATCH_TABLE_READ( ( index * entrySize ), ramEntry, entrySize );
        ; Setup parameters for call to function macMemReadRam
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,R6
        MOV     A,R7
        MOV     B,?V0 + 0
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        CLR     A
        ADD     A,R0
        ADDC    A,#0x61
        MOV     R3,A
        LCALL   ??macMemReadRam?relay
//  290      
//  291     if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R7
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   ??osal_memcmp?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??macSrcMatchCheckSrcAddr_3 & 0xFFFF
//  292     {
//  293       /* Match found */
//  294       return index;
        MOV     A,R6
        MOV     R1,A
        SJMP    ??macSrcMatchCheckSrcAddr_6
//  295     }
//  296   }
//  297   return MAC_SRCMATCH_INVALID_INDEX;
??macSrcMatchCheckSrcAddr_4:
        MOV     R1,#-0x1
??macSrcMatchCheckSrcAddr_6:
        MOV     A,#0xc
        CFI EndBlock cfiBlock7
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  298 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Valid
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  299 
//  300 static void macSrcMatchSetPendEnBit( uint8 index )
//  301 {
//  302   uint24 enable;
//  303   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  304        
//  305   enable = MAC_RADIO_SRC_MATCH_GET_PENDEN(); 
//  306       
//  307   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  308   {
//  309     enable |= ( (uint24)0x01 << index );
//  310     osal_buffer_uint24( buf, enable );
//  311     MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
//  312   }
//  313   else
//  314   {
//  315     enable |= ( (uint24)0x01 << ( index * 2 ) );
//  316     osal_buffer_uint24( buf, enable );
//  317     MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
//  318   }
//  319 }
//  320 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  321 static void macSrcMatchSetEnableBit( uint8 index, bool option )
macSrcMatchSetEnableBit:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function macSrcMatchSetEnableBit
//  322 {
        FUNCALL macSrcMatchSetEnableBit, macSrcMatchGetEnableBit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchSetEnableBit, osal_buffer_uint24
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  323   uint24 enable;  
//  324   
//  325   enable = MAC_RADIO_SRC_MATCH_GET_EN(); 
        ; Setup parameters for call to function macSrcMatchGetEnableBit
        LCALL   ?Subroutine0 & 0xFFFF
//  326       
//  327   if( option == TRUE )
??CrossCallReturnLabel_0:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     A,R6
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     A,#0x1
        XRL     A,R7
        MOV     DPTR,#macSrcMatchAddrMode
        JNZ     ??macSrcMatchSetEnableBit_0
//  328   {
//  329     if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R0,#?V0 + 0
        JNZ     ??macSrcMatchSetEnableBit_1
//  330     {
//  331       enable |= ( (uint24)0x01 << index );
//  332       MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     R1,#?V0 + 8
        LCALL   ?L_IOR
??macSrcMatchSetEnableBit_2:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R2,#-0x7d
        SJMP    ??macSrcMatchSetEnableBit_3
        CFI CFA_XSP16 add(XSP16, 20)
//  333     }
//  334     else
//  335     {
//  336       enable |= ( (uint24)0x01 << ( index * 2 ) );
//  337       MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
??macSrcMatchSetEnableBit_1:
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        SJMP    ??macSrcMatchSetEnableBit_4
//  338     }
//  339   }
//  340   else
//  341   {
//  342     if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
??macSrcMatchSetEnableBit_0:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??macSrcMatchSetEnableBit_5
//  343     {
//  344       enable &= ~( (uint24)0x01 << index );
//  345       MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     R0,#?V0 + 8
        LCALL   ?L_NOT
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_AND
        SJMP    ??macSrcMatchSetEnableBit_2
//  346     }
//  347     else
//  348     {
//  349       enable &= ~( (uint24)0x01 << ( index * 2 ) );
//  350       MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
??macSrcMatchSetEnableBit_5:
        ; Setup parameters for call to function osal_buffer_uint24
        MOV     R0,#?V0 + 4
        LCALL   ?L_NOT
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_AND
??macSrcMatchSetEnableBit_4:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R2,#-0x7a
??macSrcMatchSetEnableBit_3:
        MOV     R3,#0x61
        LCALL   ??osal_buffer_uint24?relay
        MOV     A,#0x4
//  351     }
//  352   }
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock9
//  353 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ??macSrcMatchGetEnableBit?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  354 
//  355 static bool macSrcMatchCheckEnableBit( uint8 index )
//  356 {
//  357   uint24 enable;
//  358   
//  359   if( macSrcMatchAddrMode == SADDR_MODE_EXT )
//  360   {
//  361     index *= 2;
//  362   }
//  363   
//  364   enable = MAC_RADIO_SRC_MATCH_GET_EN();
//  365      
//  366   if( enable & ( (uint24)0x01 << index ) )
//  367   {
//  368     return TRUE;
//  369   }
//  370 
//  371   return FALSE; 
//  372 }
//  373 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 static uint24 macSrcMatchGetEnableBit( void )
macSrcMatchGetEnableBit:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function macSrcMatchGetEnableBit
//  375 { 
        FUNCALL macSrcMatchGetEnableBit, macMemReadRam
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchGetEnableBit, macMemReadRam
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL macSrcMatchGetEnableBit, osal_build_uint32
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 3)
//  376   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  377   
//  378   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
        MOV     DPTR,#macSrcMatchAddrMode
        MOVX    A,@DPTR
        XRL     A,#0x2
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        JNZ     ??macSrcMatchGetEnableBit_0
//  379   {
//  380     MAC_RADIO_GET_SRC_SHORTEN( buf );
        ; Setup parameters for call to function macMemReadRam
        MOV     R2,#-0x7d
        SJMP    ??macSrcMatchGetEnableBit_1
//  381   }
//  382   else
//  383   {
//  384     MAC_RADIO_GET_SRC_EXTEN( buf );
??macSrcMatchGetEnableBit_0:
        ; Setup parameters for call to function macMemReadRam
        MOV     R2,#-0x7a
??macSrcMatchGetEnableBit_1:
        MOV     R3,#0x61
        LCALL   ??macMemReadRam?relay
//  385   }
//  386   
//  387   return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_build_uint32?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock13
//  388 }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for macSrcMatchAddrMode>`:
        DB 2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchAddEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchDeleteEntry?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchDeleteEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchAckAllPending?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchAckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchCheckAllPending?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchCheckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MAC_SrcMatchCheckResult?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MAC_SrcMatchCheckResult

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchCheckSrcAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchCheckSrcAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchSetEnableBit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchSetEnableBit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??macSrcMatchGetEnableBit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    macSrcMatchGetEnableBit

        END
//  389 
//  390 static uint24 macSrcMatchGetPendEnBit( void )
//  391 {
//  392   uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
//  393 
//  394   if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
//  395   {
//  396     MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
//  397   }
//  398   else
//  399   {
//  400     MAC_RADIO_GET_SRC_EXTENPEND( buf );
//  401   }
//  402   
//  403   return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
//  404 }
// 
// 1 208 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     4 bytes in segment XDATA_ROM_C
//     3 bytes in segment XDATA_Z
// 
// 1 263 bytes of CODE  memory
//     0 bytes of CONST memory (+ 4 bytes shared)
//     4 bytes of XDATA memory
//
//Errors: none
//Warnings: none
