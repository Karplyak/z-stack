///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               19/Aug/2013  22:10:47 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c                        /
//    Command line       =  -f "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\GitHub\z-stack\Sensor        /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c" -D NWK_AUTO_POLL -D   /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D           /
//                          End_Device -D HAL_KEYPAD -D M160 -D xPA2591 -lC   /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\" -lA       /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint & Device\CC2530DB\"   /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\hal_sensor. /
//                          s51                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_sensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??M160_SensorFunction?relay
        FUNCTION ??M160_SensorFunction?relay,0203H
        PUBLIC ??sleep?relay
        FUNCTION ??sleep?relay,0203H
        PUBLIC M160_SensorFunction
        FUNCTION M160_SensorFunction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC TransmitApp_Msg
        PUBLIC sleep
        FUNCTION sleep,080203H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
M160_Init           SYMBOL "M160_Init"
M160_On             SYMBOL "M160_On"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??M160_Init?relay   SYMBOL "?relay", M160_Init
??M160_On?relay     SYMBOL "?relay", M160_On
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
M160_SensorFunction SYMBOL "M160_SensorFunction"
??M160_SensorFunction?relay SYMBOL "?relay", M160_SensorFunction
sleep               SYMBOL "sleep"
??sleep?relay       SYMBOL "?relay", sleep

        EXTERN M160_Init
        FUNCTION M160_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M160_On
        FUNCTION M160_On,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??M160_Init?relay
        FUNCTION ??M160_Init?relay,00H
        EXTERN ??M160_On?relay
        FUNCTION ??M160_On?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN ch
        EXTERN zclZigbeeDevice_DstAddr

// D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
//    1 #include <string.h>
//    2 #include <stdio.h>
//    3 #include "ZComDef.h"
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 #include "mac_radio_defs.h"
//   10 
//   11 /* ZCL */
//   12 #include "zcl.h"
//   13 #include "zcl_general.h"
//   14 #include "zcl_ha.h"
//   15 #include "zcl_zigbee device.h"
//   16 
//   17 /* HAL */
//   18 #include "onboard.h"
//   19 #include "hal_lcd.h"
//   20 #include "hal_led.h"
//   21 #include "hal_key.h"
//   22 #include "MT_UART.h"
//   23 #include "hal_uart.h"
//   24 #include "hal_timer.h"
//   25 #include "hal_keypad.h"
//   26 #include "hal_buzzer.h"
//   27   
//   28 /* HAL Sensor */
//   29 #include "hal_sensor.h"
//   30 
//   31 #if defined(M110)
//   32   #include "M110.h"
//   33 #endif
//   34 #if defined(M140)
//   35   #include "M140.h"
//   36 #endif
//   37 #if defined(M160)
//   38   #include "M160.h"
//   39 #endif
//   40 #if defined(M170)
//   41   #include "M170.h"
//   42 #endif
//   43 #if defined(M190)
//   44   #include "M190.h"
//   45 #endif
//   46 #if defined(M200)
//   47   #include "M200.h"
//   48 #endif
//   49 #if defined(M270)
//   50   #include "M270.h"
//   51 #endif
//   52 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   53 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   54  
//   55 void M110_SensorFunction(void); // M140 Module function
//   56 void M140_SensorFunction(void); // M140 Module function
//   57 void M160_SensorFunction(void); // M160 Module function
//   58 void M170_SensorFunction(void); // M170 Module function
//   59 void M190_SensorFunction(void); // M190 Module function
//   60 void M200_SensorFunction(void); // M200 Module function
//   61 void M270_SensorFunction(void); // M270 Module function
//   62 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   63 void sleep(uint16 sec)
sleep:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function sleep
//   64 {
        ; Saved register size: 0
        ; Auto size: 0
//   65     uint16 i,j,k;
//   66     
//   67     k = sec * 1000;
        MOV     A,R2
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#-0x18
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
//   68     
//   69     for(i=0;i<1600;i++)
        MOV     R4,#0x40
        MOV     R5,#0x6
//   70       for(j=0;j<k;j++)
??sleep_0:
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??sleep_1
//   71         asm("nop");
??sleep_2:
        nop
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??sleep_1:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??sleep_2
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R4
        JNZ     ??sleep_3
        MOV     A,R5
??sleep_3:
        JNZ     ??sleep_0
//   72 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   73 
//   74 #if defined(M110)
//   75 
//   76 void M110_SensorFunction(void)
//   77 {
//   78     uint16 val;
//   79       
//   80     M110_Init();
//   81     
//   82     val = M110_GetValue();
//   83     
//   84     TransmitApp_Msg[0] = 3 + '0';   
//   85     TransmitApp_Msg[1] = ',';
//   86     TransmitApp_Msg[2] = 1 + '0';  
//   87     TransmitApp_Msg[3] = 1 + '0';   
//   88     TransmitApp_Msg[4] = 0 + '0';        
//   89     TransmitApp_Msg[5] = ',';
//   90     TransmitApp_Msg[6] = 'N';     
//   91     TransmitApp_Msg[7] = ',';
//   92     if(val > 3000)
//   93     {    
//   94         TransmitApp_Msg[8] = 1 + '0';
//   95     }
//   96     else
//   97     {
//   98         TransmitApp_Msg[8] = 0 + '0';  
//   99     }    
//  100 
//  101     TransmitApp_Msg[9] = '$';     
//  102     TransmitApp_Msg[10] = '\n';     
//  103   
//  104     sleep(1);
//  105    
//  106     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  107                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  108                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 11, 
//  109                                  TransmitApp_Msg );
//  110  }
//  111 #endif
//  112   
//  113 #if defined(M140)
//  114 
//  115 void M140_SensorFunction(void)
//  116 {
//  117   uint16 val;
//  118 
//  119   M140_Init();
//  120       
//  121   val = M140_GetValue();  
//  122   if((0x2000 & val) == 0x2000) // check sign bit for negative value
//  123   {
//  124     val = ((val - 16384) * 10) / 32;
//  125   }
//  126   else
//  127   {
//  128     val = (val * 10) / 32;
//  129   }
//  130 
//  131   TransmitApp_Msg[0] = 3 + '0';   
//  132   TransmitApp_Msg[1] = ',';
//  133   TransmitApp_Msg[2] = 1 + '0';  
//  134   TransmitApp_Msg[3] = 4 + '0';   
//  135   TransmitApp_Msg[4] = 0 + '0';        
//  136   TransmitApp_Msg[5] = ',';
//  137   TransmitApp_Msg[6] = 'B';   
//  138   TransmitApp_Msg[7] = ',';  
//  139   TransmitApp_Msg[8] = (val / 100) + '0';
//  140   TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
//  141   TransmitApp_Msg[10] = '.';
//  142   TransmitApp_Msg[11] = (val % 10) + '0';
//  143   TransmitApp_Msg[12] = '$'; 
//  144   TransmitApp_Msg[13] = '\n'; 
//  145   
//  146   sleep(1);
//  147     
//  148   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  149                                 ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
//  150                                 TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 14, 
//  151                                 TransmitApp_Msg );   
//  152  }
//  153 #endif
//  154 
//  155 #if defined(M160)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 void M160_SensorFunction(void)
M160_SensorFunction:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function M160_SensorFunction
//  157 {
        FUNCALL M160_SensorFunction, M160_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M160_SensorFunction, M160_On
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M160_SensorFunction, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  158   static uint8 duty = 50;
//  159 
//  160   M160_Init();
        ; Setup parameters for call to function M160_Init
        LCALL   ??M160_Init?relay
//  161   
//  162   if (ch > 0)
        MOV     DPTR,#ch
        MOVX    A,@DPTR
        JZ      ??M160_SensorFunction_0
//  163   {           
//  164     if (ch == 'U')
        XRL     A,#0x55
        JNZ     ??M160_SensorFunction_1
//  165     {
//  166       if (duty < 100)
        MOV     DPTR,#??duty
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x64
        JNC     ??M160_SensorFunction_2
//  167       {
//  168         duty = duty + 5;
        MOVX    A,@DPTR
        ADD     A,#0x5
        SJMP    ??M160_SensorFunction_3
//  169       }
//  170     }
//  171     
//  172     if (ch == 'N')
??M160_SensorFunction_1:
        MOVX    A,@DPTR
        XRL     A,#0x4e
        JNZ     ??M160_SensorFunction_2
//  173     {
//  174       if (duty > 0)
        MOV     DPTR,#??duty
        MOVX    A,@DPTR
        JZ      ??M160_SensorFunction_2
//  175       {
//  176         duty = duty - 5;
        ADD     A,#-0x5
??M160_SensorFunction_3:
        MOVX    @DPTR,A
//  177       }
//  178     }
//  179       
//  180     M160_On(duty);
??M160_SensorFunction_2:
        ; Setup parameters for call to function M160_On
        MOV     DPTR,#??duty
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??M160_On?relay
//  181   }
//  182   
//  183   TransmitApp_Msg[0] = 3 + '0';   
??M160_SensorFunction_0:
        MOV     A,#0x33
        MOV     DPTR,#TransmitApp_Msg
        MOVX    @DPTR,A
//  184   TransmitApp_Msg[1] = ',';
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 1)
        MOVX    @DPTR,A
//  185   TransmitApp_Msg[2] = 2 + '0';  
        MOV     A,#0x32
        MOV     DPTR,#(TransmitApp_Msg + 2)
        MOVX    @DPTR,A
//  186   TransmitApp_Msg[3] = 8 + '0';   
        MOV     A,#0x38
        MOV     DPTR,#(TransmitApp_Msg + 3)
        MOVX    @DPTR,A
//  187   TransmitApp_Msg[4] = 0 + '0';        
        MOV     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 4)
        MOVX    @DPTR,A
//  188   TransmitApp_Msg[5] = ',';
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 5)
        MOVX    @DPTR,A
//  189   TransmitApp_Msg[6] = 'A';   
        MOV     A,#0x41
        MOV     DPTR,#(TransmitApp_Msg + 6)
        MOVX    @DPTR,A
//  190   TransmitApp_Msg[7] = ',';  
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 7)
        MOVX    @DPTR,A
//  191   TransmitApp_Msg[8] = (duty / 100) + '0';
        MOV     B,#0x64
        MOV     DPTR,#??duty
        MOVX    A,@DPTR
        DIV     AB
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 8)
        MOVX    @DPTR,A
//  192   TransmitApp_Msg[9] = ((duty / 10) % 10) + '0';
        MOV     B,#0xa
        MOV     DPTR,#??duty
        MOVX    A,@DPTR
        DIV     AB
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 9)
        MOVX    @DPTR,A
//  193   TransmitApp_Msg[10] = (duty % 10) + '0';
        MOV     DPTR,#??duty
        MOVX    A,@DPTR
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 10)
        MOVX    @DPTR,A
//  194   TransmitApp_Msg[11] = '$'; 
        MOV     A,#0x24
        MOV     DPTR,#(TransmitApp_Msg + 11)
        MOVX    @DPTR,A
//  195   TransmitApp_Msg[12] = '\n';
        MOV     A,#0xa
        MOV     DPTR,#(TransmitApp_Msg + 12)
        MOVX    @DPTR,A
//  196     
//  197   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  198                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
//  199                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
//  200                                  TransmitApp_Msg ); 
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
        MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0xd
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
        MOV     R1,#0xc
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  201 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??duty:
        DS 1
        REQUIRE `?<Initializer for duty>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for duty>`:
        DB 50

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M160_SensorFunction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M160_SensorFunction

        END
//  202 #endif 
//  203 
//  204 #if defined(M170)
//  205 void M170_SensorFunction(void)
//  206 {
//  207     uint16 val;
//  208      
//  209     M170_Init();
//  210   
//  211     val = M170_GetValue();
//  212     if (val > 2000)
//  213     {
//  214         val -= 2000;
//  215     }
//  216     else
//  217     {
//  218         val = 0;
//  219     }
//  220     val /= 120;
//  221             
//  222     if (val > 100)
//  223     {
//  224         val = 100;
//  225     }
//  226    
//  227     TransmitApp_Msg[0] = 3 + '0';   
//  228     TransmitApp_Msg[1] = ',';
//  229     TransmitApp_Msg[2] = 1 + '0';  
//  230     TransmitApp_Msg[3] = 7 + '0';   
//  231     TransmitApp_Msg[4] = 0 + '0';        
//  232     TransmitApp_Msg[5] = ',';
//  233     TransmitApp_Msg[6] = 'A';   
//  234     TransmitApp_Msg[7] = ',';  
//  235     TransmitApp_Msg[8] = (val / 100) + '0';
//  236     TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
//  237     TransmitApp_Msg[10] = (val % 10) + '0';
//  238     TransmitApp_Msg[11] = '$'; 
//  239     TransmitApp_Msg[12] = '\n'; 
//  240 
//  241     sleep(1);
//  242     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  243                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  244                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
//  245                                  TransmitApp_Msg );
//  246  }
//  247 #endif
//  248  
//  249 #if defined(M190)
//  250 void M190_SensorFunction(void)
//  251 {
//  252     uint16 val;
//  253 
//  254     M190_Init();
//  255     val = M190_GetValue();  
//  256 
//  257     if (val > 2000)
//  258     {
//  259         val -= 2000;
//  260     }
//  261     else
//  262     {
//  263         val = 0;
//  264     }
//  265     val /= 120;
//  266             
//  267     if (val > 100)
//  268     {
//  269         val = 100;
//  270     }
//  271     
//  272     TransmitApp_Msg[0] = 3 + '0';   
//  273     TransmitApp_Msg[1] = ',';
//  274     TransmitApp_Msg[2] = 1 + '0';  
//  275     TransmitApp_Msg[3] = 9 + '0';   
//  276     TransmitApp_Msg[4] = 0 + '0';        
//  277     TransmitApp_Msg[5] = ',';
//  278     TransmitApp_Msg[6] = 'A';   
//  279     TransmitApp_Msg[7] = ',';  
//  280     TransmitApp_Msg[8] = (val / 100) + '0';
//  281     TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
//  282     TransmitApp_Msg[10] = (val % 10) + '0';
//  283     TransmitApp_Msg[11] = '$'; 
//  284     TransmitApp_Msg[12] = '\n';
//  285 
//  286     sleep(1);    
//  287     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  288                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  289                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
//  290                                  TransmitApp_Msg );
//  291  }
//  292 #endif
//  293  
//  294 #if defined(M200)
//  295 void M200_SensorFunction(void)
//  296  {
//  297     // M200 module variable
//  298     uint16 temp, humi;
//  299     uint8 hum_1,hum_2,hum_3,hum_4;
//  300     uint8 temp_1,temp_2,temp_3,temp_4;
//  301     uint8 len;
//  302       
//  303     // initilization the device
//  304     M200_Init();
//  305   
//  306     M200_GetValue();
//  307     temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
//  308     humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
//  309     if (humi > 999)
//  310     {
//  311       humi = 999;
//  312     }
//  313     if (temp > 999)
//  314     {
//  315       temp = 999;
//  316     }
//  317     hum_1 = (humi / 100) + '0';
//  318     TransmitApp_Msg[0] = hum_1;
//  319     hum_2 = ((humi / 10) % 10) + '0';
//  320     TransmitApp_Msg[1] = hum_2;
//  321     hum_3 = '.';
//  322     TransmitApp_Msg[2] = hum_3;
//  323     hum_4 = (humi % 10) + '0';
//  324     TransmitApp_Msg[3] = hum_4;
//  325     TransmitApp_Msg[4] = ' ';
//  326     temp_1 = (temp / 100) + '0';
//  327     TransmitApp_Msg[5] = temp_1;
//  328     temp_2 = ((temp / 10) % 10) + '0';
//  329     TransmitApp_Msg[6] = temp_2;
//  330     temp_3 = '.';
//  331     TransmitApp_Msg[7] = temp_3;
//  332     temp_4 = (temp % 10) + '0';
//  333     TransmitApp_Msg[8] = temp_4;
//  334     
//  335     #if defined ( LCD_SUPPORTED )
//  336       HalLcdWriteString("Humidity=      %", HAL_LCD_LINE_1);
//  337       HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
//  338       // Humi
//  339       HalLcdWriteChar(HAL_LCD_LINE_1, 10, hum_1);
//  340       HalLcdWriteChar(HAL_LCD_LINE_1, 11, hum_2);
//  341       HalLcdWriteChar(HAL_LCD_LINE_1, 12, hum_3);
//  342       HalLcdWriteChar(HAL_LCD_LINE_1, 13, hum_4);
//  343       // Temp
//  344       HalLcdWriteChar(HAL_LCD_LINE_2, 9, temp_1);
//  345       HalLcdWriteChar(HAL_LCD_LINE_2, 10, temp_2);
//  346       HalLcdWriteChar(HAL_LCD_LINE_2, 11, temp_3);
//  347       HalLcdWriteChar(HAL_LCD_LINE_2, 12, temp_4);
//  348     #endif
//  349 
//  350     len = 9;
//  351     uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, 
//  352                                  ZCL_CLUSTER_ID_GEN_BASIC, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
//  353  }
//  354 #endif
//  355  
//  356 #if defined(M270)
//  357 /*********************************************************************
//  358  * @fn          M270_SensorFunction
//  359  * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
//  360  */
//  361  void M270_SensorFunction(void)
//  362  {
//  363     static uint8 udo;
//  364 
//  365     M270_Init();
//  366     
//  367      if( ch == 'A' )
//  368      {
//  369         udo = 1;
//  370         M270_SetDO(udo);
//  371      }
//  372      
//  373      if( ch == 'D' )
//  374      {
//  375         udo = 0;
//  376         M270_SetDO(udo);
//  377      }
//  378     
//  379      #if defined ( LCD_SUPPORTED )
//  380         HalLcdWriteString("** M270 Test  **", HAL_LCD_LINE_1);
//  381         HalLcdWriteString("* RELAY DO=[0] *", HAL_LCD_LINE_2);
//  382         // Show the control value
//  383         HalLcdWriteChar(HAL_LCD_LINE_2, 12, udo + '0');
//  384      #endif
//  385  }
//  386 #endif
// 
// 312 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
// 102 bytes in segment XDATA_Z
// 
// 325 bytes of CODE  memory
// 103 bytes of XDATA memory
//
//Errors: none
//Warnings: none
