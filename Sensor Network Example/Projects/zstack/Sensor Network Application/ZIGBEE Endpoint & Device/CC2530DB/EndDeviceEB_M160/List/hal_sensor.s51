///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               20/Aug/2013  00:07:17 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c                        /
//    Command line       =  -f "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\GitHub\z-stack\Sensor        /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c" -D NWK_AUTO_POLL -D   /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D           /
//                          End_Device -D HAL_KEYPAD -D M190 -D xPA2591 -lC   /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\" -lA       /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint & Device\CC2530DB\"   /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M160\List\hal_sensor. /
//                          s51                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_sensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??sleep?relay
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??M190_SensorFunction?relay
        FUNCTION ??M190_SensorFunction?relay,0203H
        PUBLIC ??sleep?relay
        FUNCTION ??sleep?relay,0203H
        PUBLIC M190_SensorFunction
        FUNCTION M190_SensorFunction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC TransmitApp_Msg
        PUBLIC sleep
        FUNCTION sleep,080203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
M190_Init           SYMBOL "M190_Init"
M190_GetValue       SYMBOL "M190_GetValue"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??M190_GetValue?relay SYMBOL "?relay", M190_GetValue
??M190_Init?relay   SYMBOL "?relay", M190_Init
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
M190_SensorFunction SYMBOL "M190_SensorFunction"
??M190_SensorFunction?relay SYMBOL "?relay", M190_SensorFunction
sleep               SYMBOL "sleep"
??sleep?relay       SYMBOL "?relay", sleep

        EXTERN M190_Init
        FUNCTION M190_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M190_GetValue
        FUNCTION M190_GetValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??M190_GetValue?relay
        FUNCTION ??M190_GetValue?relay,00H
        EXTERN ??M190_Init?relay
        FUNCTION ??M190_Init?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN zclZigbeeDevice_DstAddr

// D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
//    1 #include <string.h>
//    2 #include <stdio.h>
//    3 #include "ZComDef.h"
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 #include "mac_radio_defs.h"
//   10 
//   11 /* ZCL */
//   12 #include "zcl.h"
//   13 #include "zcl_general.h"
//   14 #include "zcl_ha.h"
//   15 #include "zcl_zigbee device.h"
//   16 
//   17 /* HAL */
//   18 #include "onboard.h"
//   19 #include "hal_lcd.h"
//   20 #include "hal_led.h"
//   21 #include "hal_key.h"
//   22 #include "MT_UART.h"
//   23 #include "hal_uart.h"
//   24 #include "hal_timer.h"
//   25 #include "hal_keypad.h"
//   26 #include "hal_buzzer.h"
//   27   
//   28 /* HAL Sensor */
//   29 #include "hal_sensor.h"
//   30 
//   31 #if defined(M110)
//   32   #include "M110.h"
//   33 #endif
//   34 #if defined(M140)
//   35   #include "M140.h"
//   36 #endif
//   37 #if defined(M160)
//   38   #include "M160.h"
//   39 #endif
//   40 #if defined(M170)
//   41   #include "M170.h"
//   42 #endif
//   43 #if defined(M190)
//   44   #include "M190.h"
//   45 #endif
//   46 #if defined(M200)
//   47   #include "M200.h"
//   48 #endif
//   49 #if defined(M270)
//   50   #include "M270.h"
//   51 #endif
//   52 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   53 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   54  
//   55 void M110_SensorFunction(void); // M140 Module function
//   56 void M140_SensorFunction(void); // M140 Module function
//   57 void M160_SensorFunction(void); // M160 Module function
//   58 void M170_SensorFunction(void); // M170 Module function
//   59 void M190_SensorFunction(void); // M190 Module function
//   60 void M200_SensorFunction(void); // M200 Module function
//   61 void M270_SensorFunction(void); // M270 Module function
//   62 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   63 void sleep(uint16 sec)
sleep:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function sleep
//   64 {
        ; Saved register size: 0
        ; Auto size: 0
//   65     uint16 i,j,k;
//   66     
//   67     k = sec * 1000;
        MOV     A,R2
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#-0x18
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
//   68     
//   69     for(i=0;i<1600;i++)
        MOV     R4,#0x40
        MOV     R5,#0x6
//   70       for(j=0;j<k;j++)
??sleep_0:
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??sleep_1
//   71         asm("nop");
??sleep_2:
        nop
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??sleep_1:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??sleep_2
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R4
        JNZ     ??sleep_3
        MOV     A,R5
??sleep_3:
        JNZ     ??sleep_0
//   72 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   73 
//   74 #if defined(M110)
//   75 
//   76 void M110_SensorFunction(void)
//   77 {
//   78     uint16 val;
//   79       
//   80     M110_Init();
//   81     
//   82     val = M110_GetValue();
//   83     
//   84     TransmitApp_Msg[0] = 3 + '0';   
//   85     TransmitApp_Msg[1] = ',';
//   86     TransmitApp_Msg[2] = 1 + '0';  
//   87     TransmitApp_Msg[3] = 1 + '0';   
//   88     TransmitApp_Msg[4] = 0 + '0';        
//   89     TransmitApp_Msg[5] = ',';
//   90     TransmitApp_Msg[6] = 'N';     
//   91     TransmitApp_Msg[7] = ',';
//   92     if(val > 3000)
//   93     {    
//   94         TransmitApp_Msg[8] = 1 + '0';
//   95     }
//   96     else
//   97     {
//   98         TransmitApp_Msg[8] = 0 + '0';  
//   99     }    
//  100 
//  101     TransmitApp_Msg[9] = '$';     
//  102     TransmitApp_Msg[10] = '\n';     
//  103   
//  104     sleep(3);
//  105    
//  106     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  107                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  108                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 11, 
//  109                                  TransmitApp_Msg );
//  110  }
//  111 #endif
//  112   
//  113 #if defined(M140)
//  114 
//  115 void M140_SensorFunction(void)
//  116 {
//  117   uint16 val;
//  118 
//  119   M140_Init();
//  120       
//  121   val = M140_GetValue();  
//  122   if((0x2000 & val) == 0x2000) // check sign bit for negative value
//  123   {
//  124     val = ((val - 16384) * 10) / 32;
//  125   }
//  126   else
//  127   {
//  128     val = (val * 10) / 32;
//  129   }
//  130 
//  131   TransmitApp_Msg[0] = 3 + '0';   
//  132   TransmitApp_Msg[1] = ',';
//  133   TransmitApp_Msg[2] = 1 + '0';  
//  134   TransmitApp_Msg[3] = 4 + '0';   
//  135   TransmitApp_Msg[4] = 0 + '0';        
//  136   TransmitApp_Msg[5] = ',';
//  137   TransmitApp_Msg[6] = 'A';   
//  138   TransmitApp_Msg[7] = ',';  
//  139   TransmitApp_Msg[8] = (val / 100) + '0';
//  140   TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
//  141   TransmitApp_Msg[10] = '.';
//  142   TransmitApp_Msg[11] = (val % 10) + '0';
//  143   TransmitApp_Msg[12] = '$'; 
//  144   TransmitApp_Msg[13] = '\n'; 
//  145   
//  146   sleep(3);
//  147     
//  148   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  149                                 ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
//  150                                 TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 14, 
//  151                                 TransmitApp_Msg );   
//  152 }
//  153 #endif
//  154 
//  155 #if defined(M160)
//  156 void M160_SensorFunction(void)
//  157 {
//  158   static uint8 duty = 50;
//  159 
//  160   M160_Init();
//  161   
//  162   if (ch > 0)
//  163   {           
//  164     if (ch == 'U')
//  165     {
//  166       if (duty < 100)
//  167       {
//  168         duty = duty + 5;
//  169       }
//  170     }
//  171     
//  172     if (ch == 'N')
//  173     {
//  174       if (duty > 0)
//  175       {
//  176         duty = duty - 5;
//  177       }
//  178     }
//  179       
//  180     M160_On(duty);
//  181   }
//  182   
//  183   TransmitApp_Msg[0] = 3 + '0';   
//  184   TransmitApp_Msg[1] = ',';
//  185   TransmitApp_Msg[2] = 2 + '0';  
//  186   TransmitApp_Msg[3] = 8 + '0';   
//  187   TransmitApp_Msg[4] = 0 + '0';        
//  188   TransmitApp_Msg[5] = ',';
//  189   TransmitApp_Msg[6] = 'A';   
//  190   TransmitApp_Msg[7] = ',';  
//  191   TransmitApp_Msg[8] = (duty / 100) + '0';
//  192   TransmitApp_Msg[9] = ((duty / 10) % 10) + '0';
//  193   TransmitApp_Msg[10] = (duty % 10) + '0';
//  194   TransmitApp_Msg[11] = '$'; 
//  195   TransmitApp_Msg[12] = '\n';
//  196     
//  197   sleep(3);  
//  198   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  199                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
//  200                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
//  201                                  TransmitApp_Msg ); 
//  202 }
//  203 #endif 
//  204 
//  205 #if defined(M170)
//  206 void M170_SensorFunction(void)
//  207 {
//  208     uint16 val;
//  209      
//  210     M170_Init();
//  211   
//  212     val = M170_GetValue();  
//  213     if (val > 2000)
//  214     {
//  215         val -= 2000;
//  216     }
//  217     else
//  218     {
//  219         val = 0;
//  220     }
//  221     val /= 120;
//  222             
//  223     if (val > 100)
//  224     {
//  225         val = 100;
//  226     }
//  227    
//  228     TransmitApp_Msg[0] = 3 + '0';   
//  229     TransmitApp_Msg[1] = ',';
//  230     TransmitApp_Msg[2] = 1 + '0';  
//  231     TransmitApp_Msg[3] = 7 + '0';   
//  232     TransmitApp_Msg[4] = 0 + '0';        
//  233     TransmitApp_Msg[5] = ',';
//  234     TransmitApp_Msg[6] = 'A';   
//  235     TransmitApp_Msg[7] = ',';  
//  236     TransmitApp_Msg[8] = (val / 100) + '0';
//  237     TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
//  238     TransmitApp_Msg[10] = (val % 10) + '0';
//  239     TransmitApp_Msg[11] = '$'; 
//  240     TransmitApp_Msg[12] = '\n'; 
//  241 
//  242     sleep(1);
//  243     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  244                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  245                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
//  246                                  TransmitApp_Msg );
//  247  }
//  248 #endif
//  249  
//  250 #if defined(M190)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  251 void M190_SensorFunction(void)
M190_SensorFunction:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function M190_SensorFunction
//  252 {
        FUNCALL M190_SensorFunction, M190_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M190_SensorFunction, M190_GetValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M190_SensorFunction, sleep
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M190_SensorFunction, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  253     uint16 val;
//  254      
//  255     M190_Init();
        ; Setup parameters for call to function M190_Init
        LCALL   ??M190_Init?relay
//  256   
//  257     val = M190_GetValue();  
        ; Setup parameters for call to function M190_GetValue
        LCALL   ??M190_GetValue?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  258     if (val > 2000)
        CLR     C
        MOV     A,R4
        SUBB    A,#-0x2f
        MOV     A,R5
        SUBB    A,#0x7
        JC      ??M190_SensorFunction_0
//  259     {
//  260         val -= 2000;
        MOV     A,R4
        ADD     A,#0x30
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#-0x8
        MOV     R5,A
        SJMP    ??M190_SensorFunction_1
//  261     }
//  262     else
//  263     {
//  264         val = 0;
??M190_SensorFunction_0:
        MOV     R4,#0x0
        MOV     R5,#0x0
//  265     }
//  266     val /= 120;
??M190_SensorFunction_1:
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x78
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  267             
//  268     if (val > 100)
        MOV     A,R4
        SUBB    A,#0x65
        MOV     A,R5
        SUBB    A,#0x0
        JC      ??M190_SensorFunction_2
//  269     {
//  270         val = 100;
        MOV     R4,#0x64
        MOV     R5,#0x0
//  271     }
//  272    
//  273     TransmitApp_Msg[0] = 3 + '0';   
??M190_SensorFunction_2:
        MOV     A,#0x33
        MOV     DPTR,#TransmitApp_Msg
        MOVX    @DPTR,A
//  274     TransmitApp_Msg[1] = ',';
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 1)
        MOVX    @DPTR,A
//  275     TransmitApp_Msg[2] = 1 + '0';  
        MOV     A,#0x31
        MOV     DPTR,#(TransmitApp_Msg + 2)
        MOVX    @DPTR,A
//  276     TransmitApp_Msg[3] = 7 + '0';   
        MOV     A,#0x37
        MOV     DPTR,#(TransmitApp_Msg + 3)
        MOVX    @DPTR,A
//  277     TransmitApp_Msg[4] = 0 + '0';        
        MOV     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 4)
        MOVX    @DPTR,A
//  278     TransmitApp_Msg[5] = ',';
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 5)
        MOVX    @DPTR,A
//  279     TransmitApp_Msg[6] = 'B';   
        MOV     A,#0x42
        MOV     DPTR,#(TransmitApp_Msg + 6)
        MOVX    @DPTR,A
//  280     TransmitApp_Msg[7] = ',';  
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 7)
        MOVX    @DPTR,A
//  281     TransmitApp_Msg[8] = (val / 100) + '0';
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 8)
        LCALL   ?Subroutine0 & 0xFFFF
//  282     TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
??CrossCallReturnLabel_0:
        LCALL   ?US_DIV_MOD
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 9)
        LCALL   ?Subroutine0 & 0xFFFF
//  283     TransmitApp_Msg[10] = (val % 10) + '0';
??CrossCallReturnLabel_1:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 10)
        MOVX    @DPTR,A
//  284     TransmitApp_Msg[11] = '$'; 
        MOV     A,#0x24
        MOV     DPTR,#(TransmitApp_Msg + 11)
        MOVX    @DPTR,A
//  285     TransmitApp_Msg[12] = '\n'; 
        MOV     A,#0xa
        MOV     DPTR,#(TransmitApp_Msg + 12)
        MOVX    @DPTR,A
//  286 
//  287     sleep(3);
        ; Setup parameters for call to function sleep
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??sleep?relay
//  288     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  289                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  290                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
//  291                                  TransmitApp_Msg );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
        MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0xd
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
        MOV     R1,#0xc
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  292  }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M190_SensorFunction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M190_SensorFunction

        END
//  293 #endif
//  294  
//  295 #if defined(M200)
//  296 void M200_SensorFunction(void)
//  297  {
//  298     // M200 module variable
//  299     uint16 temp, humi;
//  300     uint8 hum_1,hum_2,hum_3,hum_4;
//  301     uint8 temp_1,temp_2,temp_3,temp_4;
//  302     uint8 len;
//  303       
//  304     // initilization the device
//  305     M200_Init();
//  306   
//  307     M200_GetValue();
//  308     temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
//  309     humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
//  310     if (humi > 999)
//  311     {
//  312       humi = 999;
//  313     }
//  314     if (temp > 999)
//  315     {
//  316       temp = 999;
//  317     }
//  318     hum_1 = (humi / 100) + '0';
//  319     TransmitApp_Msg[0] = hum_1;
//  320     hum_2 = ((humi / 10) % 10) + '0';
//  321     TransmitApp_Msg[1] = hum_2;
//  322     hum_3 = '.';
//  323     TransmitApp_Msg[2] = hum_3;
//  324     hum_4 = (humi % 10) + '0';
//  325     TransmitApp_Msg[3] = hum_4;
//  326     TransmitApp_Msg[4] = ' ';
//  327     temp_1 = (temp / 100) + '0';
//  328     TransmitApp_Msg[5] = temp_1;
//  329     temp_2 = ((temp / 10) % 10) + '0';
//  330     TransmitApp_Msg[6] = temp_2;
//  331     temp_3 = '.';
//  332     TransmitApp_Msg[7] = temp_3;
//  333     temp_4 = (temp % 10) + '0';
//  334     TransmitApp_Msg[8] = temp_4;
//  335     
//  336     #if defined ( LCD_SUPPORTED )
//  337       HalLcdWriteString("Humidity=      %", HAL_LCD_LINE_1);
//  338       HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
//  339       // Humi
//  340       HalLcdWriteChar(HAL_LCD_LINE_1, 10, hum_1);
//  341       HalLcdWriteChar(HAL_LCD_LINE_1, 11, hum_2);
//  342       HalLcdWriteChar(HAL_LCD_LINE_1, 12, hum_3);
//  343       HalLcdWriteChar(HAL_LCD_LINE_1, 13, hum_4);
//  344       // Temp
//  345       HalLcdWriteChar(HAL_LCD_LINE_2, 9, temp_1);
//  346       HalLcdWriteChar(HAL_LCD_LINE_2, 10, temp_2);
//  347       HalLcdWriteChar(HAL_LCD_LINE_2, 11, temp_3);
//  348       HalLcdWriteChar(HAL_LCD_LINE_2, 12, temp_4);
//  349     #endif
//  350 
//  351     len = 9;
//  352     uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, 
//  353                                  ZCL_CLUSTER_ID_GEN_BASIC, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
//  354  }
//  355 #endif
//  356  
//  357 #if defined(M270)
//  358 /*********************************************************************
//  359  * @fn          M270_SensorFunction
//  360  * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
//  361  */
//  362  void M270_SensorFunction(void)
//  363  {
//  364     static uint8 udo;
//  365 
//  366     M270_Init();
//  367     
//  368      if( ch == 'A' )
//  369      {
//  370         udo = 1;
//  371         M270_SetDO(udo);
//  372      }
//  373      
//  374      if( ch == 'D' )
//  375      {
//  376         udo = 0;
//  377         M270_SetDO(udo);
//  378      }
//  379     
//  380      #if defined ( LCD_SUPPORTED )
//  381         HalLcdWriteString("** M270 Test  **", HAL_LCD_LINE_1);
//  382         HalLcdWriteString("* RELAY DO=[0] *", HAL_LCD_LINE_2);
//  383         // Show the control value
//  384         HalLcdWriteChar(HAL_LCD_LINE_2, 12, udo + '0');
//  385      #endif
//  386  }
//  387 #endif
// 
// 347 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
// 102 bytes in segment XDATA_Z
// 
// 359 bytes of CODE  memory
// 102 bytes of XDATA memory
//
//Errors: none
//Warnings: none
