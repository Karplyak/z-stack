###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                19/Aug/2013  22:10:47 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\Source\hal_sensor.c                         #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\Source\hal_sensor.c" -D NWK_AUTO_POLL -D    #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          xPOWER_SAVING -D End_Device -D HAL_KEYPAD -D M160  #
#                          -D xPA2591 -lC "D:\GitHub\z-stack\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\" -lA        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\"            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\Obj\" -e          #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint & Device\CC2530DB\"    #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MODU #
#                          LE\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\hal_sensor.l #
#                          st                                                 #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\Obj\hal_sensor.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
      1          #include <string.h>
      2          #include <stdio.h>
      3          #include "ZComDef.h"
      4          #include "OSAL.h"
      5          #include "AF.h"
      6          #include "ZDApp.h"
      7          #include "ZDObject.h"
      8          #include "ZDProfile.h"
      9          #include "mac_radio_defs.h"
     10          
     11          /* ZCL */
     12          #include "zcl.h"
     13          #include "zcl_general.h"
     14          #include "zcl_ha.h"
     15          #include "zcl_zigbee device.h"
     16          
     17          /* HAL */
     18          #include "onboard.h"
     19          #include "hal_lcd.h"
     20          #include "hal_led.h"
     21          #include "hal_key.h"
     22          #include "MT_UART.h"
     23          #include "hal_uart.h"
     24          #include "hal_timer.h"
     25          #include "hal_keypad.h"
     26          #include "hal_buzzer.h"
     27            
     28          /* HAL Sensor */
     29          #include "hal_sensor.h"
     30          
     31          #if defined(M110)
     32            #include "M110.h"
     33          #endif
     34          #if defined(M140)
     35            #include "M140.h"
     36          #endif
     37          #if defined(M160)
     38            #include "M160.h"
     39          #endif
     40          #if defined(M170)
     41            #include "M170.h"
     42          #endif
     43          #if defined(M190)
     44            #include "M190.h"
     45          #endif
     46          #if defined(M200)
     47            #include "M200.h"
     48          #endif
     49          #if defined(M270)
     50            #include "M270.h"
     51          #endif
     52          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     53          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     54           
     55          void M110_SensorFunction(void); // M140 Module function
     56          void M140_SensorFunction(void); // M140 Module function
     57          void M160_SensorFunction(void); // M160 Module function
     58          void M170_SensorFunction(void); // M170 Module function
     59          void M190_SensorFunction(void); // M190 Module function
     60          void M200_SensorFunction(void); // M200 Module function
     61          void M270_SensorFunction(void); // M270 Module function
     62          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     63          void sleep(uint16 sec)
   \                     sleep:
     64          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     65              uint16 i,j,k;
     66              
     67              k = sec * 1000;
   \   000000   EA           MOV     A,R2
   \   000001   75F0E8       MOV     B,#-0x18
   \   000004   A4           MUL     AB
   \   000005   CA           XCH     A,R2
   \   000006   ACF0         MOV     R4,B
   \   000008   75F003       MOV     B,#0x3
   \   00000B   A4           MUL     AB
   \   00000C   2C           ADD     A,R4
   \   00000D   FC           MOV     R4,A
   \   00000E   75F0E8       MOV     B,#-0x18
   \   000011   EB           MOV     A,R3
   \   000012   A4           MUL     AB
   \   000013   2C           ADD     A,R4
   \   000014   FB           MOV     R3,A
     68              
     69              for(i=0;i<1600;i++)
   \   000015   7C40         MOV     R4,#0x40
   \   000017   7D06         MOV     R5,#0x6
     70                for(j=0;j<k;j++)
   \                     ??sleep_0:
   \   000019   7800         MOV     R0,#0x0
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   8009         SJMP    ??sleep_1
     71                  asm("nop");
   \                     ??sleep_2:
   \   00001F   00           nop
   \   000020   E8           MOV     A,R0
   \   000021   2401         ADD     A,#0x1
   \   000023   08           INC     R0
   \   000024   E9           MOV     A,R1
   \   000025   3400         ADDC    A,#0x0
   \   000027   F9           MOV     R1,A
   \                     ??sleep_1:
   \   000028   C3           CLR     C
   \   000029   E8           MOV     A,R0
   \   00002A   9A           SUBB    A,R2
   \   00002B   E9           MOV     A,R1
   \   00002C   9B           SUBB    A,R3
   \   00002D   40F0         JC      ??sleep_2
   \   00002F   EC           MOV     A,R4
   \   000030   24FF         ADD     A,#-0x1
   \   000032   1C           DEC     R4
   \   000033   ED           MOV     A,R5
   \   000034   34FF         ADDC    A,#-0x1
   \   000036   FD           MOV     R5,A
   \   000037   EC           MOV     A,R4
   \   000038   7001         JNZ     ??sleep_3
   \   00003A   ED           MOV     A,R5
   \                     ??sleep_3:
   \   00003B   70DC         JNZ     ??sleep_0
     72          }
   \   00003D   02....       LJMP    ?BRET
     73          
     74          #if defined(M110)
     75          
     76          void M110_SensorFunction(void)
     77          {
     78              uint16 val;
     79                
     80              M110_Init();
     81              
     82              val = M110_GetValue();
     83              
     84              TransmitApp_Msg[0] = 3 + '0';   
     85              TransmitApp_Msg[1] = ',';
     86              TransmitApp_Msg[2] = 1 + '0';  
     87              TransmitApp_Msg[3] = 1 + '0';   
     88              TransmitApp_Msg[4] = 0 + '0';        
     89              TransmitApp_Msg[5] = ',';
     90              TransmitApp_Msg[6] = 'N';     
     91              TransmitApp_Msg[7] = ',';
     92              if(val > 3000)
     93              {    
     94                  TransmitApp_Msg[8] = 1 + '0';
     95              }
     96              else
     97              {
     98                  TransmitApp_Msg[8] = 0 + '0';  
     99              }    
    100          
    101              TransmitApp_Msg[9] = '$';     
    102              TransmitApp_Msg[10] = '\n';     
    103            
    104              sleep(1);
    105             
    106              uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    107                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
    108                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 11, 
    109                                           TransmitApp_Msg );
    110           }
    111          #endif
    112            
    113          #if defined(M140)
    114          
    115          void M140_SensorFunction(void)
    116          {
    117            uint16 val;
    118          
    119            M140_Init();
    120                
    121            val = M140_GetValue();  
    122            if((0x2000 & val) == 0x2000) // check sign bit for negative value
    123            {
    124              val = ((val - 16384) * 10) / 32;
    125            }
    126            else
    127            {
    128              val = (val * 10) / 32;
    129            }
    130          
    131            TransmitApp_Msg[0] = 3 + '0';   
    132            TransmitApp_Msg[1] = ',';
    133            TransmitApp_Msg[2] = 1 + '0';  
    134            TransmitApp_Msg[3] = 4 + '0';   
    135            TransmitApp_Msg[4] = 0 + '0';        
    136            TransmitApp_Msg[5] = ',';
    137            TransmitApp_Msg[6] = 'B';   
    138            TransmitApp_Msg[7] = ',';  
    139            TransmitApp_Msg[8] = (val / 100) + '0';
    140            TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
    141            TransmitApp_Msg[10] = '.';
    142            TransmitApp_Msg[11] = (val % 10) + '0';
    143            TransmitApp_Msg[12] = '$'; 
    144            TransmitApp_Msg[13] = '\n'; 
    145            
    146            sleep(1);
    147              
    148            uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    149                                          ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
    150                                          TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 14, 
    151                                          TransmitApp_Msg );   
    152           }
    153          #endif
    154          
    155          #if defined(M160)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          void M160_SensorFunction(void)
   \                     M160_SensorFunction:
    157          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    158            static uint8 duty = 50;
    159          
    160            M160_Init();
   \   000005                ; Setup parameters for call to function M160_Init
   \   000005   12....       LCALL   ??M160_Init?relay
    161            
    162            if (ch > 0)
   \   000008   90....       MOV     DPTR,#ch
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6028         JZ      ??M160_SensorFunction_0
    163            {           
    164              if (ch == 'U')
   \   00000E   6455         XRL     A,#0x55
   \   000010   700E         JNZ     ??M160_SensorFunction_1
    165              {
    166                if (duty < 100)
   \   000012   90....       MOV     DPTR,#??duty
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C3           CLR     C
   \   000017   9464         SUBB    A,#0x64
   \   000019   5013         JNC     ??M160_SensorFunction_2
    167                {
    168                  duty = duty + 5;
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   2405         ADD     A,#0x5
   \   00001E   800D         SJMP    ??M160_SensorFunction_3
    169                }
    170              }
    171              
    172              if (ch == 'N')
   \                     ??M160_SensorFunction_1:
   \   000020   E0           MOVX    A,@DPTR
   \   000021   644E         XRL     A,#0x4e
   \   000023   7009         JNZ     ??M160_SensorFunction_2
    173              {
    174                if (duty > 0)
   \   000025   90....       MOV     DPTR,#??duty
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6003         JZ      ??M160_SensorFunction_2
    175                {
    176                  duty = duty - 5;
   \   00002B   24FB         ADD     A,#-0x5
   \                     ??M160_SensorFunction_3:
   \   00002D   F0           MOVX    @DPTR,A
    177                }
    178              }
    179                
    180              M160_On(duty);
   \                     ??M160_SensorFunction_2:
   \   00002E                ; Setup parameters for call to function M160_On
   \   00002E   90....       MOV     DPTR,#??duty
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??M160_On?relay
    181            }
    182            
    183            TransmitApp_Msg[0] = 3 + '0';   
   \                     ??M160_SensorFunction_0:
   \   000036   7433         MOV     A,#0x33
   \   000038   90....       MOV     DPTR,#TransmitApp_Msg
   \   00003B   F0           MOVX    @DPTR,A
    184            TransmitApp_Msg[1] = ',';
   \   00003C   742C         MOV     A,#0x2c
   \   00003E   90....       MOV     DPTR,#(TransmitApp_Msg + 1)
   \   000041   F0           MOVX    @DPTR,A
    185            TransmitApp_Msg[2] = 2 + '0';  
   \   000042   7432         MOV     A,#0x32
   \   000044   90....       MOV     DPTR,#(TransmitApp_Msg + 2)
   \   000047   F0           MOVX    @DPTR,A
    186            TransmitApp_Msg[3] = 8 + '0';   
   \   000048   7438         MOV     A,#0x38
   \   00004A   90....       MOV     DPTR,#(TransmitApp_Msg + 3)
   \   00004D   F0           MOVX    @DPTR,A
    187            TransmitApp_Msg[4] = 0 + '0';        
   \   00004E   7430         MOV     A,#0x30
   \   000050   90....       MOV     DPTR,#(TransmitApp_Msg + 4)
   \   000053   F0           MOVX    @DPTR,A
    188            TransmitApp_Msg[5] = ',';
   \   000054   742C         MOV     A,#0x2c
   \   000056   90....       MOV     DPTR,#(TransmitApp_Msg + 5)
   \   000059   F0           MOVX    @DPTR,A
    189            TransmitApp_Msg[6] = 'A';   
   \   00005A   7441         MOV     A,#0x41
   \   00005C   90....       MOV     DPTR,#(TransmitApp_Msg + 6)
   \   00005F   F0           MOVX    @DPTR,A
    190            TransmitApp_Msg[7] = ',';  
   \   000060   742C         MOV     A,#0x2c
   \   000062   90....       MOV     DPTR,#(TransmitApp_Msg + 7)
   \   000065   F0           MOVX    @DPTR,A
    191            TransmitApp_Msg[8] = (duty / 100) + '0';
   \   000066   75F064       MOV     B,#0x64
   \   000069   90....       MOV     DPTR,#??duty
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   84           DIV     AB
   \   00006E   2430         ADD     A,#0x30
   \   000070   90....       MOV     DPTR,#(TransmitApp_Msg + 8)
   \   000073   F0           MOVX    @DPTR,A
    192            TransmitApp_Msg[9] = ((duty / 10) % 10) + '0';
   \   000074   75F00A       MOV     B,#0xa
   \   000077   90....       MOV     DPTR,#??duty
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   84           DIV     AB
   \   00007C   75F00A       MOV     B,#0xa
   \   00007F   84           DIV     AB
   \   000080   E5F0         MOV     A,B
   \   000082   2430         ADD     A,#0x30
   \   000084   90....       MOV     DPTR,#(TransmitApp_Msg + 9)
   \   000087   F0           MOVX    @DPTR,A
    193            TransmitApp_Msg[10] = (duty % 10) + '0';
   \   000088   90....       MOV     DPTR,#??duty
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   75F00A       MOV     B,#0xa
   \   00008F   84           DIV     AB
   \   000090   E5F0         MOV     A,B
   \   000092   2430         ADD     A,#0x30
   \   000094   90....       MOV     DPTR,#(TransmitApp_Msg + 10)
   \   000097   F0           MOVX    @DPTR,A
    194            TransmitApp_Msg[11] = '$'; 
   \   000098   7424         MOV     A,#0x24
   \   00009A   90....       MOV     DPTR,#(TransmitApp_Msg + 11)
   \   00009D   F0           MOVX    @DPTR,A
    195            TransmitApp_Msg[12] = '\n';
   \   00009E   740A         MOV     A,#0xa
   \   0000A0   90....       MOV     DPTR,#(TransmitApp_Msg + 12)
   \   0000A3   F0           MOVX    @DPTR,A
    196              
    197            uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    198                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
    199                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
    200                                           TransmitApp_Msg ); 
   \   0000A4                ; Setup parameters for call to function zcl_SendCommand
   \   0000A4   75....       MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
   \   0000A7   75....       MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
   \   0000AA   78..         MOV     R0,#?V0 + 0
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AF   75..0D       MOV     ?V0 + 0,#0xd
   \   0000B2   75..00       MOV     ?V0 + 1,#0x0
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   75..00       MOV     ?V0 + 0,#0x0
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   78..         MOV     R0,#?V0 + 0
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D1   75..01       MOV     ?V0 + 0,#0x1
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D9   75..00       MOV     ?V0 + 0,#0x0
   \   0000DC   78..         MOV     R0,#?V0 + 0
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E1   7C06         MOV     R4,#0x6
   \   0000E3   7D00         MOV     R5,#0x0
   \   0000E5   7A..         MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
   \   0000E7   7B..         MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
   \   0000E9   790C         MOV     R1,#0xc
   \   0000EB   12....       LCALL   ??zcl_SendCommand?relay
   \   0000EE   740B         MOV     A,#0xb
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
    201          }
   \   0000F3   7F02         MOV     R7,#0x2
   \   0000F5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??duty:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for duty>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for duty>`:
   \   000000   32           DB 50

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??M160_SensorFunction?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    M160_SensorFunction
    202          #endif 
    203          
    204          #if defined(M170)
    205          void M170_SensorFunction(void)
    206          {
    207              uint16 val;
    208               
    209              M170_Init();
    210            
    211              val = M170_GetValue();
    212              if (val > 2000)
    213              {
    214                  val -= 2000;
    215              }
    216              else
    217              {
    218                  val = 0;
    219              }
    220              val /= 120;
    221                      
    222              if (val > 100)
    223              {
    224                  val = 100;
    225              }
    226             
    227              TransmitApp_Msg[0] = 3 + '0';   
    228              TransmitApp_Msg[1] = ',';
    229              TransmitApp_Msg[2] = 1 + '0';  
    230              TransmitApp_Msg[3] = 7 + '0';   
    231              TransmitApp_Msg[4] = 0 + '0';        
    232              TransmitApp_Msg[5] = ',';
    233              TransmitApp_Msg[6] = 'A';   
    234              TransmitApp_Msg[7] = ',';  
    235              TransmitApp_Msg[8] = (val / 100) + '0';
    236              TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
    237              TransmitApp_Msg[10] = (val % 10) + '0';
    238              TransmitApp_Msg[11] = '$'; 
    239              TransmitApp_Msg[12] = '\n'; 
    240          
    241              sleep(1);
    242              uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    243                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
    244                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
    245                                           TransmitApp_Msg );
    246           }
    247          #endif
    248           
    249          #if defined(M190)
    250          void M190_SensorFunction(void)
    251          {
    252              uint16 val;
    253          
    254              M190_Init();
    255              val = M190_GetValue();  
    256          
    257              if (val > 2000)
    258              {
    259                  val -= 2000;
    260              }
    261              else
    262              {
    263                  val = 0;
    264              }
    265              val /= 120;
    266                      
    267              if (val > 100)
    268              {
    269                  val = 100;
    270              }
    271              
    272              TransmitApp_Msg[0] = 3 + '0';   
    273              TransmitApp_Msg[1] = ',';
    274              TransmitApp_Msg[2] = 1 + '0';  
    275              TransmitApp_Msg[3] = 9 + '0';   
    276              TransmitApp_Msg[4] = 0 + '0';        
    277              TransmitApp_Msg[5] = ',';
    278              TransmitApp_Msg[6] = 'A';   
    279              TransmitApp_Msg[7] = ',';  
    280              TransmitApp_Msg[8] = (val / 100) + '0';
    281              TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
    282              TransmitApp_Msg[10] = (val % 10) + '0';
    283              TransmitApp_Msg[11] = '$'; 
    284              TransmitApp_Msg[12] = '\n';
    285          
    286              sleep(1);    
    287              uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    288                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
    289                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
    290                                           TransmitApp_Msg );
    291           }
    292          #endif
    293           
    294          #if defined(M200)
    295          void M200_SensorFunction(void)
    296           {
    297              // M200 module variable
    298              uint16 temp, humi;
    299              uint8 hum_1,hum_2,hum_3,hum_4;
    300              uint8 temp_1,temp_2,temp_3,temp_4;
    301              uint8 len;
    302                
    303              // initilization the device
    304              M200_Init();
    305            
    306              M200_GetValue();
    307              temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
    308              humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
    309              if (humi > 999)
    310              {
    311                humi = 999;
    312              }
    313              if (temp > 999)
    314              {
    315                temp = 999;
    316              }
    317              hum_1 = (humi / 100) + '0';
    318              TransmitApp_Msg[0] = hum_1;
    319              hum_2 = ((humi / 10) % 10) + '0';
    320              TransmitApp_Msg[1] = hum_2;
    321              hum_3 = '.';
    322              TransmitApp_Msg[2] = hum_3;
    323              hum_4 = (humi % 10) + '0';
    324              TransmitApp_Msg[3] = hum_4;
    325              TransmitApp_Msg[4] = ' ';
    326              temp_1 = (temp / 100) + '0';
    327              TransmitApp_Msg[5] = temp_1;
    328              temp_2 = ((temp / 10) % 10) + '0';
    329              TransmitApp_Msg[6] = temp_2;
    330              temp_3 = '.';
    331              TransmitApp_Msg[7] = temp_3;
    332              temp_4 = (temp % 10) + '0';
    333              TransmitApp_Msg[8] = temp_4;
    334              
    335              #if defined ( LCD_SUPPORTED )
    336                HalLcdWriteString("Humidity=      %", HAL_LCD_LINE_1);
    337                HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
    338                // Humi
    339                HalLcdWriteChar(HAL_LCD_LINE_1, 10, hum_1);
    340                HalLcdWriteChar(HAL_LCD_LINE_1, 11, hum_2);
    341                HalLcdWriteChar(HAL_LCD_LINE_1, 12, hum_3);
    342                HalLcdWriteChar(HAL_LCD_LINE_1, 13, hum_4);
    343                // Temp
    344                HalLcdWriteChar(HAL_LCD_LINE_2, 9, temp_1);
    345                HalLcdWriteChar(HAL_LCD_LINE_2, 10, temp_2);
    346                HalLcdWriteChar(HAL_LCD_LINE_2, 11, temp_3);
    347                HalLcdWriteChar(HAL_LCD_LINE_2, 12, temp_4);
    348              #endif
    349          
    350              len = 9;
    351              uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, 
    352                                           ZCL_CLUSTER_ID_GEN_BASIC, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
    353           }
    354          #endif
    355           
    356          #if defined(M270)
    357          /*********************************************************************
    358           * @fn          M270_SensorFunction
    359           * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
    360           */
    361           void M270_SensorFunction(void)
    362           {
    363              static uint8 udo;
    364          
    365              M270_Init();
    366              
    367               if( ch == 'A' )
    368               {
    369                  udo = 1;
    370                  M270_SetDO(udo);
    371               }
    372               
    373               if( ch == 'D' )
    374               {
    375                  udo = 0;
    376                  M270_SetDO(udo);
    377               }
    378              
    379               #if defined ( LCD_SUPPORTED )
    380                  HalLcdWriteString("** M270 Test  **", HAL_LCD_LINE_1);
    381                  HalLcdWriteString("* RELAY DO=[0] *", HAL_LCD_LINE_2);
    382                  // Show the control value
    383                  HalLcdWriteChar(HAL_LCD_LINE_2, 12, udo + '0');
    384               #endif
    385           }
    386          #endif

   Maximum stack usage in bytes:

     Function             ISTACK PSTACK XSTACK
     --------             ------ ------ ------
     M160_SensorFunction      0      0     21
       -> M160_Init           0      0     20
       -> M160_On             0      0     20
       -> zcl_SendCommand     0      0     42
     sleep                    0      0      0


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     TransmitApp_Msg              102
     sleep                         64
     M160_SensorFunction          248
     duty                           1
     ?<Initializer for duty>        1
     ??sleep?relay                  6
     ??M160_SensorFunction?relay    6

 
 312 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
 102 bytes in segment XDATA_Z
 
 325 bytes of CODE  memory
 103 bytes of XDATA memory

Errors: none
Warnings: none
