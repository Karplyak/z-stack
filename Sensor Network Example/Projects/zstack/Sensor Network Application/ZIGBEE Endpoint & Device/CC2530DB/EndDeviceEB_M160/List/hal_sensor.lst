###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                20/Aug/2013  00:07:17 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\Source\hal_sensor.c                         #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\Source\hal_sensor.c" -D NWK_AUTO_POLL -D    #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D           #
#                          xPOWER_SAVING -D End_Device -D HAL_KEYPAD -D M190  #
#                          -D xPA2591 -lC "D:\GitHub\z-stack\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\" -lA        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\"            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\Obj\" -e          #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint & Device\CC2530DB\"    #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MODU #
#                          LE\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\hal_sensor.l #
#                          st                                                 #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\Obj\hal_sensor.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
      1          #include <string.h>
      2          #include <stdio.h>
      3          #include "ZComDef.h"
      4          #include "OSAL.h"
      5          #include "AF.h"
      6          #include "ZDApp.h"
      7          #include "ZDObject.h"
      8          #include "ZDProfile.h"
      9          #include "mac_radio_defs.h"
     10          
     11          /* ZCL */
     12          #include "zcl.h"
     13          #include "zcl_general.h"
     14          #include "zcl_ha.h"
     15          #include "zcl_zigbee device.h"
     16          
     17          /* HAL */
     18          #include "onboard.h"
     19          #include "hal_lcd.h"
     20          #include "hal_led.h"
     21          #include "hal_key.h"
     22          #include "MT_UART.h"
     23          #include "hal_uart.h"
     24          #include "hal_timer.h"
     25          #include "hal_keypad.h"
     26          #include "hal_buzzer.h"
     27            
     28          /* HAL Sensor */
     29          #include "hal_sensor.h"
     30          
     31          #if defined(M110)
     32            #include "M110.h"
     33          #endif
     34          #if defined(M140)
     35            #include "M140.h"
     36          #endif
     37          #if defined(M160)
     38            #include "M160.h"
     39          #endif
     40          #if defined(M170)
     41            #include "M170.h"
     42          #endif
     43          #if defined(M190)
     44            #include "M190.h"
     45          #endif
     46          #if defined(M200)
     47            #include "M200.h"
     48          #endif
     49          #if defined(M270)
     50            #include "M270.h"
     51          #endif
     52          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     53          byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
   \                     TransmitApp_Msg:
   \   000000                DS 102
   \   000066                REQUIRE __INIT_XDATA_Z
     54           
     55          void M110_SensorFunction(void); // M140 Module function
     56          void M140_SensorFunction(void); // M140 Module function
     57          void M160_SensorFunction(void); // M160 Module function
     58          void M170_SensorFunction(void); // M170 Module function
     59          void M190_SensorFunction(void); // M190 Module function
     60          void M200_SensorFunction(void); // M200 Module function
     61          void M270_SensorFunction(void); // M270 Module function
     62          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     63          void sleep(uint16 sec)
   \                     sleep:
     64          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     65              uint16 i,j,k;
     66              
     67              k = sec * 1000;
   \   000000   EA           MOV     A,R2
   \   000001   75F0E8       MOV     B,#-0x18
   \   000004   A4           MUL     AB
   \   000005   CA           XCH     A,R2
   \   000006   ACF0         MOV     R4,B
   \   000008   75F003       MOV     B,#0x3
   \   00000B   A4           MUL     AB
   \   00000C   2C           ADD     A,R4
   \   00000D   FC           MOV     R4,A
   \   00000E   75F0E8       MOV     B,#-0x18
   \   000011   EB           MOV     A,R3
   \   000012   A4           MUL     AB
   \   000013   2C           ADD     A,R4
   \   000014   FB           MOV     R3,A
     68              
     69              for(i=0;i<1600;i++)
   \   000015   7C40         MOV     R4,#0x40
   \   000017   7D06         MOV     R5,#0x6
     70                for(j=0;j<k;j++)
   \                     ??sleep_0:
   \   000019   7800         MOV     R0,#0x0
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   8009         SJMP    ??sleep_1
     71                  asm("nop");
   \                     ??sleep_2:
   \   00001F   00           nop
   \   000020   E8           MOV     A,R0
   \   000021   2401         ADD     A,#0x1
   \   000023   08           INC     R0
   \   000024   E9           MOV     A,R1
   \   000025   3400         ADDC    A,#0x0
   \   000027   F9           MOV     R1,A
   \                     ??sleep_1:
   \   000028   C3           CLR     C
   \   000029   E8           MOV     A,R0
   \   00002A   9A           SUBB    A,R2
   \   00002B   E9           MOV     A,R1
   \   00002C   9B           SUBB    A,R3
   \   00002D   40F0         JC      ??sleep_2
   \   00002F   EC           MOV     A,R4
   \   000030   24FF         ADD     A,#-0x1
   \   000032   1C           DEC     R4
   \   000033   ED           MOV     A,R5
   \   000034   34FF         ADDC    A,#-0x1
   \   000036   FD           MOV     R5,A
   \   000037   EC           MOV     A,R4
   \   000038   7001         JNZ     ??sleep_3
   \   00003A   ED           MOV     A,R5
   \                     ??sleep_3:
   \   00003B   70DC         JNZ     ??sleep_0
     72          }
   \   00003D   02....       LJMP    ?BRET
     73          
     74          #if defined(M110)
     75          
     76          void M110_SensorFunction(void)
     77          {
     78              uint16 val;
     79                
     80              M110_Init();
     81              
     82              val = M110_GetValue();
     83              
     84              TransmitApp_Msg[0] = 3 + '0';   
     85              TransmitApp_Msg[1] = ',';
     86              TransmitApp_Msg[2] = 1 + '0';  
     87              TransmitApp_Msg[3] = 1 + '0';   
     88              TransmitApp_Msg[4] = 0 + '0';        
     89              TransmitApp_Msg[5] = ',';
     90              TransmitApp_Msg[6] = 'N';     
     91              TransmitApp_Msg[7] = ',';
     92              if(val > 3000)
     93              {    
     94                  TransmitApp_Msg[8] = 1 + '0';
     95              }
     96              else
     97              {
     98                  TransmitApp_Msg[8] = 0 + '0';  
     99              }    
    100          
    101              TransmitApp_Msg[9] = '$';     
    102              TransmitApp_Msg[10] = '\n';     
    103            
    104              sleep(3);
    105             
    106              uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    107                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
    108                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 11, 
    109                                           TransmitApp_Msg );
    110           }
    111          #endif
    112            
    113          #if defined(M140)
    114          
    115          void M140_SensorFunction(void)
    116          {
    117            uint16 val;
    118          
    119            M140_Init();
    120                
    121            val = M140_GetValue();  
    122            if((0x2000 & val) == 0x2000) // check sign bit for negative value
    123            {
    124              val = ((val - 16384) * 10) / 32;
    125            }
    126            else
    127            {
    128              val = (val * 10) / 32;
    129            }
    130          
    131            TransmitApp_Msg[0] = 3 + '0';   
    132            TransmitApp_Msg[1] = ',';
    133            TransmitApp_Msg[2] = 1 + '0';  
    134            TransmitApp_Msg[3] = 4 + '0';   
    135            TransmitApp_Msg[4] = 0 + '0';        
    136            TransmitApp_Msg[5] = ',';
    137            TransmitApp_Msg[6] = 'A';   
    138            TransmitApp_Msg[7] = ',';  
    139            TransmitApp_Msg[8] = (val / 100) + '0';
    140            TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
    141            TransmitApp_Msg[10] = '.';
    142            TransmitApp_Msg[11] = (val % 10) + '0';
    143            TransmitApp_Msg[12] = '$'; 
    144            TransmitApp_Msg[13] = '\n'; 
    145            
    146            sleep(3);
    147              
    148            uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    149                                          ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
    150                                          TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 14, 
    151                                          TransmitApp_Msg );   
    152          }
    153          #endif
    154          
    155          #if defined(M160)
    156          void M160_SensorFunction(void)
    157          {
    158            static uint8 duty = 50;
    159          
    160            M160_Init();
    161            
    162            if (ch > 0)
    163            {           
    164              if (ch == 'U')
    165              {
    166                if (duty < 100)
    167                {
    168                  duty = duty + 5;
    169                }
    170              }
    171              
    172              if (ch == 'N')
    173              {
    174                if (duty > 0)
    175                {
    176                  duty = duty - 5;
    177                }
    178              }
    179                
    180              M160_On(duty);
    181            }
    182            
    183            TransmitApp_Msg[0] = 3 + '0';   
    184            TransmitApp_Msg[1] = ',';
    185            TransmitApp_Msg[2] = 2 + '0';  
    186            TransmitApp_Msg[3] = 8 + '0';   
    187            TransmitApp_Msg[4] = 0 + '0';        
    188            TransmitApp_Msg[5] = ',';
    189            TransmitApp_Msg[6] = 'A';   
    190            TransmitApp_Msg[7] = ',';  
    191            TransmitApp_Msg[8] = (duty / 100) + '0';
    192            TransmitApp_Msg[9] = ((duty / 10) % 10) + '0';
    193            TransmitApp_Msg[10] = (duty % 10) + '0';
    194            TransmitApp_Msg[11] = '$'; 
    195            TransmitApp_Msg[12] = '\n';
    196              
    197            sleep(3);  
    198            uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    199                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
    200                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
    201                                           TransmitApp_Msg ); 
    202          }
    203          #endif 
    204          
    205          #if defined(M170)
    206          void M170_SensorFunction(void)
    207          {
    208              uint16 val;
    209               
    210              M170_Init();
    211            
    212              val = M170_GetValue();  
    213              if (val > 2000)
    214              {
    215                  val -= 2000;
    216              }
    217              else
    218              {
    219                  val = 0;
    220              }
    221              val /= 120;
    222                      
    223              if (val > 100)
    224              {
    225                  val = 100;
    226              }
    227             
    228              TransmitApp_Msg[0] = 3 + '0';   
    229              TransmitApp_Msg[1] = ',';
    230              TransmitApp_Msg[2] = 1 + '0';  
    231              TransmitApp_Msg[3] = 7 + '0';   
    232              TransmitApp_Msg[4] = 0 + '0';        
    233              TransmitApp_Msg[5] = ',';
    234              TransmitApp_Msg[6] = 'A';   
    235              TransmitApp_Msg[7] = ',';  
    236              TransmitApp_Msg[8] = (val / 100) + '0';
    237              TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
    238              TransmitApp_Msg[10] = (val % 10) + '0';
    239              TransmitApp_Msg[11] = '$'; 
    240              TransmitApp_Msg[12] = '\n'; 
    241          
    242              sleep(1);
    243              uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    244                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
    245                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
    246                                           TransmitApp_Msg );
    247           }
    248          #endif
    249           
    250          #if defined(M190)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void M190_SensorFunction(void)
   \                     M190_SensorFunction:
    252          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    253              uint16 val;
    254               
    255              M190_Init();
   \   000005                ; Setup parameters for call to function M190_Init
   \   000005   12....       LCALL   ??M190_Init?relay
    256            
    257              val = M190_GetValue();  
   \   000008                ; Setup parameters for call to function M190_GetValue
   \   000008   12....       LCALL   ??M190_GetValue?relay
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   AC..         MOV     R4,?V0 + 0
   \   000011   AD..         MOV     R5,?V0 + 1
    258              if (val > 2000)
   \   000013   C3           CLR     C
   \   000014   EC           MOV     A,R4
   \   000015   94D1         SUBB    A,#-0x2f
   \   000017   ED           MOV     A,R5
   \   000018   9407         SUBB    A,#0x7
   \   00001A   400A         JC      ??M190_SensorFunction_0
    259              {
    260                  val -= 2000;
   \   00001C   EC           MOV     A,R4
   \   00001D   2430         ADD     A,#0x30
   \   00001F   FC           MOV     R4,A
   \   000020   ED           MOV     A,R5
   \   000021   34F8         ADDC    A,#-0x8
   \   000023   FD           MOV     R5,A
   \   000024   8004         SJMP    ??M190_SensorFunction_1
    261              }
    262              else
    263              {
    264                  val = 0;
   \                     ??M190_SensorFunction_0:
   \   000026   7C00         MOV     R4,#0x0
   \   000028   7D00         MOV     R5,#0x0
    265              }
    266              val /= 120;
   \                     ??M190_SensorFunction_1:
   \   00002A   EC           MOV     A,R4
   \   00002B   F8           MOV     R0,A
   \   00002C   ED           MOV     A,R5
   \   00002D   F9           MOV     R1,A
   \   00002E   7A78         MOV     R2,#0x78
   \   000030   7B00         MOV     R3,#0x0
   \   000032   12....       LCALL   ?US_DIV_MOD
   \   000035   88..         MOV     ?V0 + 0,R0
   \   000037   89..         MOV     ?V0 + 1,R1
   \   000039   AC..         MOV     R4,?V0 + 0
   \   00003B   AD..         MOV     R5,?V0 + 1
    267                      
    268              if (val > 100)
   \   00003D   EC           MOV     A,R4
   \   00003E   9465         SUBB    A,#0x65
   \   000040   ED           MOV     A,R5
   \   000041   9400         SUBB    A,#0x0
   \   000043   4004         JC      ??M190_SensorFunction_2
    269              {
    270                  val = 100;
   \   000045   7C64         MOV     R4,#0x64
   \   000047   7D00         MOV     R5,#0x0
    271              }
    272             
    273              TransmitApp_Msg[0] = 3 + '0';   
   \                     ??M190_SensorFunction_2:
   \   000049   7433         MOV     A,#0x33
   \   00004B   90....       MOV     DPTR,#TransmitApp_Msg
   \   00004E   F0           MOVX    @DPTR,A
    274              TransmitApp_Msg[1] = ',';
   \   00004F   742C         MOV     A,#0x2c
   \   000051   90....       MOV     DPTR,#(TransmitApp_Msg + 1)
   \   000054   F0           MOVX    @DPTR,A
    275              TransmitApp_Msg[2] = 1 + '0';  
   \   000055   7431         MOV     A,#0x31
   \   000057   90....       MOV     DPTR,#(TransmitApp_Msg + 2)
   \   00005A   F0           MOVX    @DPTR,A
    276              TransmitApp_Msg[3] = 7 + '0';   
   \   00005B   7437         MOV     A,#0x37
   \   00005D   90....       MOV     DPTR,#(TransmitApp_Msg + 3)
   \   000060   F0           MOVX    @DPTR,A
    277              TransmitApp_Msg[4] = 0 + '0';        
   \   000061   7430         MOV     A,#0x30
   \   000063   90....       MOV     DPTR,#(TransmitApp_Msg + 4)
   \   000066   F0           MOVX    @DPTR,A
    278              TransmitApp_Msg[5] = ',';
   \   000067   742C         MOV     A,#0x2c
   \   000069   90....       MOV     DPTR,#(TransmitApp_Msg + 5)
   \   00006C   F0           MOVX    @DPTR,A
    279              TransmitApp_Msg[6] = 'B';   
   \   00006D   7442         MOV     A,#0x42
   \   00006F   90....       MOV     DPTR,#(TransmitApp_Msg + 6)
   \   000072   F0           MOVX    @DPTR,A
    280              TransmitApp_Msg[7] = ',';  
   \   000073   742C         MOV     A,#0x2c
   \   000075   90....       MOV     DPTR,#(TransmitApp_Msg + 7)
   \   000078   F0           MOVX    @DPTR,A
    281              TransmitApp_Msg[8] = (val / 100) + '0';
   \   000079   EC           MOV     A,R4
   \   00007A   F8           MOV     R0,A
   \   00007B   ED           MOV     A,R5
   \   00007C   F9           MOV     R1,A
   \   00007D   7A64         MOV     R2,#0x64
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   12....       LCALL   ?US_DIV_MOD
   \   000084   E8           MOV     A,R0
   \   000085   2430         ADD     A,#0x30
   \   000087   90....       MOV     DPTR,#(TransmitApp_Msg + 8)
   \   00008A   12....       LCALL   ?Subroutine0 & 0xFFFF
    282              TransmitApp_Msg[9] = ((val / 10) % 10) + '0';
   \                     ??CrossCallReturnLabel_0:
   \   00008D   12....       LCALL   ?US_DIV_MOD
   \   000090   7A0A         MOV     R2,#0xa
   \   000092   7B00         MOV     R3,#0x0
   \   000094   12....       LCALL   ?US_DIV_MOD
   \   000097   EA           MOV     A,R2
   \   000098   2430         ADD     A,#0x30
   \   00009A   90....       MOV     DPTR,#(TransmitApp_Msg + 9)
   \   00009D   12....       LCALL   ?Subroutine0 & 0xFFFF
    283              TransmitApp_Msg[10] = (val % 10) + '0';
   \                     ??CrossCallReturnLabel_1:
   \   0000A0   12....       LCALL   ?US_DIV_MOD
   \   0000A3   EA           MOV     A,R2
   \   0000A4   2430         ADD     A,#0x30
   \   0000A6   90....       MOV     DPTR,#(TransmitApp_Msg + 10)
   \   0000A9   F0           MOVX    @DPTR,A
    284              TransmitApp_Msg[11] = '$'; 
   \   0000AA   7424         MOV     A,#0x24
   \   0000AC   90....       MOV     DPTR,#(TransmitApp_Msg + 11)
   \   0000AF   F0           MOVX    @DPTR,A
    285              TransmitApp_Msg[12] = '\n'; 
   \   0000B0   740A         MOV     A,#0xa
   \   0000B2   90....       MOV     DPTR,#(TransmitApp_Msg + 12)
   \   0000B5   F0           MOVX    @DPTR,A
    286          
    287              sleep(3);
   \   0000B6                ; Setup parameters for call to function sleep
   \   0000B6   7A03         MOV     R2,#0x3
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   12....       LCALL   ??sleep?relay
    288              uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
    289                                           ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
    290                                           TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 13, 
    291                                           TransmitApp_Msg );
   \   0000BD                ; Setup parameters for call to function zcl_SendCommand
   \   0000BD   75....       MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
   \   0000C0   75....       MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   75..0D       MOV     ?V0 + 0,#0xd
   \   0000CB   75..00       MOV     ?V0 + 1,#0x0
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D3   75..00       MOV     ?V0 + 0,#0x0
   \   0000D6   78..         MOV     R0,#?V0 + 0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E0   78..         MOV     R0,#?V0 + 0
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EA   75..01       MOV     ?V0 + 0,#0x1
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F2   75..00       MOV     ?V0 + 0,#0x0
   \   0000F5   78..         MOV     R0,#?V0 + 0
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   7C06         MOV     R4,#0x6
   \   0000FC   7D00         MOV     R5,#0x0
   \   0000FE   7A..         MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
   \   000100   7B..         MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
   \   000102   790C         MOV     R1,#0xc
   \   000104   12....       LCALL   ??zcl_SendCommand?relay
   \   000107   740B         MOV     A,#0xb
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
    292           }
   \   00010C   7F02         MOV     R7,#0x2
   \   00010E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   F8           MOV     R0,A
   \   000003   ED           MOV     A,R5
   \   000004   F9           MOV     R1,A
   \   000005   7A0A         MOV     R2,#0xa
   \   000007   7B00         MOV     R3,#0x0
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??M190_SensorFunction?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    M190_SensorFunction
    293          #endif
    294           
    295          #if defined(M200)
    296          void M200_SensorFunction(void)
    297           {
    298              // M200 module variable
    299              uint16 temp, humi;
    300              uint8 hum_1,hum_2,hum_3,hum_4;
    301              uint8 temp_1,temp_2,temp_3,temp_4;
    302              uint8 len;
    303                
    304              // initilization the device
    305              M200_Init();
    306            
    307              M200_GetValue();
    308              temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
    309              humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
    310              if (humi > 999)
    311              {
    312                humi = 999;
    313              }
    314              if (temp > 999)
    315              {
    316                temp = 999;
    317              }
    318              hum_1 = (humi / 100) + '0';
    319              TransmitApp_Msg[0] = hum_1;
    320              hum_2 = ((humi / 10) % 10) + '0';
    321              TransmitApp_Msg[1] = hum_2;
    322              hum_3 = '.';
    323              TransmitApp_Msg[2] = hum_3;
    324              hum_4 = (humi % 10) + '0';
    325              TransmitApp_Msg[3] = hum_4;
    326              TransmitApp_Msg[4] = ' ';
    327              temp_1 = (temp / 100) + '0';
    328              TransmitApp_Msg[5] = temp_1;
    329              temp_2 = ((temp / 10) % 10) + '0';
    330              TransmitApp_Msg[6] = temp_2;
    331              temp_3 = '.';
    332              TransmitApp_Msg[7] = temp_3;
    333              temp_4 = (temp % 10) + '0';
    334              TransmitApp_Msg[8] = temp_4;
    335              
    336              #if defined ( LCD_SUPPORTED )
    337                HalLcdWriteString("Humidity=      %", HAL_LCD_LINE_1);
    338                HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
    339                // Humi
    340                HalLcdWriteChar(HAL_LCD_LINE_1, 10, hum_1);
    341                HalLcdWriteChar(HAL_LCD_LINE_1, 11, hum_2);
    342                HalLcdWriteChar(HAL_LCD_LINE_1, 12, hum_3);
    343                HalLcdWriteChar(HAL_LCD_LINE_1, 13, hum_4);
    344                // Temp
    345                HalLcdWriteChar(HAL_LCD_LINE_2, 9, temp_1);
    346                HalLcdWriteChar(HAL_LCD_LINE_2, 10, temp_2);
    347                HalLcdWriteChar(HAL_LCD_LINE_2, 11, temp_3);
    348                HalLcdWriteChar(HAL_LCD_LINE_2, 12, temp_4);
    349              #endif
    350          
    351              len = 9;
    352              uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, 
    353                                           ZCL_CLUSTER_ID_GEN_BASIC, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
    354           }
    355          #endif
    356           
    357          #if defined(M270)
    358          /*********************************************************************
    359           * @fn          M270_SensorFunction
    360           * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
    361           */
    362           void M270_SensorFunction(void)
    363           {
    364              static uint8 udo;
    365          
    366              M270_Init();
    367              
    368               if( ch == 'A' )
    369               {
    370                  udo = 1;
    371                  M270_SetDO(udo);
    372               }
    373               
    374               if( ch == 'D' )
    375               {
    376                  udo = 0;
    377                  M270_SetDO(udo);
    378               }
    379              
    380               #if defined ( LCD_SUPPORTED )
    381                  HalLcdWriteString("** M270 Test  **", HAL_LCD_LINE_1);
    382                  HalLcdWriteString("* RELAY DO=[0] *", HAL_LCD_LINE_2);
    383                  // Show the control value
    384                  HalLcdWriteChar(HAL_LCD_LINE_2, 12, udo + '0');
    385               #endif
    386           }
    387          #endif

   Maximum stack usage in bytes:

     Function             ISTACK PSTACK XSTACK
     --------             ------ ------ ------
     M190_SensorFunction      0      0     21
       -> M190_Init           0      0     20
       -> M190_GetValue       0      0     20
       -> sleep               0      0     20
       -> zcl_SendCommand     0      0     42
     sleep                    0      0     10


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     TransmitApp_Msg              102
     sleep                         64
     M190_SensorFunction          273
     ?Subroutine0                  10
     ??sleep?relay                  6
     ??M190_SensorFunction?relay    6

 
 347 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 102 bytes in segment XDATA_Z
 
 359 bytes of CODE  memory
 102 bytes of XDATA memory

Errors: none
Warnings: none
