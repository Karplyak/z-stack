###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                05/Sep/2013  13:22:00 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Components\stack\zcl\zcl.c                 #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Components\stack\zcl\zcl.c" -D             #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       #
#                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D            #
#                          End_Device -D HAL_KEYPAD -D xPA2591 -D HAL_TIMER   #
#                          -D M190 -lC "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\" -lA        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\"            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\Obj\" -e          #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint & Device\CC2530DB\"    #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MODU #
#                          LE\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\List\zcl.lst      #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M160\Obj\zcl.r51       #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Components\stack\zcl\zcl.c
      1          #include "ZComDef.h"
      2          #include "OSAL.h"
      3          #include "OSAL_Tasks.h"
      4          #include "AF.h"
      5          #include "ZDConfig.h"
      6          #include "zcl.h"
      7          #include "zcl_general.h"
      8          #include <string.h>
      9          #include <stdio.h>
     10          
     11          #if defined ( INTER_PAN )
     12            #include "stub_aps.h"
     13          #endif
     14          
     15          #include "hal_uart.h"
     16          #include "hal_timer.h"
     17          #include "hal_led.h"
     18          #if defined (LCD_SUPPORTED)
     19            #include "hal_lcd.h"
     20          #endif
     21          
     22          #if defined(M160)
     23            #include "hal_sensor.h"
     24            #include "M160.h"
     25          #endif 
     26          
     27          /* MT */
     28          #include "MT_UART.h"
     29          #include "MT.h"
     30          
     31          /*** Frame Control ***/
     32          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     33          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     34          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     35          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     36          
     37          /*** Attribute Access Control ***/
     38          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     39          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     40          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     41          
     42          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     43          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     44          
     45          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     46                                                  (zclHdr).fc.manuSpecific == 0          && \
     47                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     48          
     49          // Commands that have corresponding responses
     50          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ            || \
     51                                                  (cmd) == ZCL_CMD_WRITE           || \
     52                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED || \
     53                                                  (cmd) == ZCL_CMD_CONFIG_REPORT   || \
     54                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG || \
     55                                                  (cmd) == ZCL_CMD_DISCOVER        || \
     56                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     57          
     58          typedef struct zclLibPlugin
     59          {
     60            struct zclLibPlugin *next;
     61            uint16              startClusterID;    // starting cluster ID
     62            uint16              endClusterID;      // ending cluster ID
     63            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
     64          } zclLibPlugin_t;
     65          
     66          // Attribute record list item
     67          typedef struct zclAttrRecsList
     68          {
     69            struct zclAttrRecsList *next;
     70            uint8                  endpoint;      // Used to link it into the endpoint descriptor
     71            uint8                  numAttributes; // Number of the following records
     72            CONST zclAttrRec_t     *attrs;        // attribute records
     73          } zclAttrRecsList;
     74          
     75          // Cluster option list item
     76          typedef struct zclClusterOptionList
     77          {
     78            struct zclClusterOptionList *next;
     79            uint8                       endpoint;   // Used to link it into the endpoint descriptor
     80            uint8                       numOptions; // Number of the following records
     81            zclOptionRec_t              *options;   // option records
     82          } zclClusterOptionList;
     83          
     84          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
     85          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
     86          
     87          typedef struct
     88          {
     89            zclParseInProfileCmd_t   pfnParseInProfile;
     90            zclProcessInProfileCmd_t pfnProcessInProfile;
     91          } zclCmdItems_t;
     92          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     94          
     95          // global entry

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          int stack = 0;
   \                     stack:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          int global_flag[9]={0};
   \                     global_flag:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          char global_entry[9][4];
   \                     global_entry:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          byte global_recv_data[9][30];
   \                     global_recv_data:
   \   000000                DS 270
   \   00010E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8 global_data_length[9];
   \                     global_data_length:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    101          
    102          // The task Id of the Application where the unprocessed Foundation
    103          // Command/Response messages will be sent to.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
   \                     zcl_RegisteredMsgTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    105          
    106          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          zclValidateAttrData_t zcl_ValidateAttrDataCB = NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    108          
    109          // ZCL Sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          uint8 zcl_SeqNum = 0x00;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    111          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          static zclLibPlugin_t *plugins;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          static zclAttrRecsList *attrList;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          static zclClusterOptionList *clusterOptionList;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          static uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    116          
    117          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt );  // Not static for ZNP build.
    118          void zclZigbeeReceiverMSG(afIncomingMSGPacket_t *msg);
    119          
    120          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    121          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    122          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    123          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    124          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    125          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    126          
    127          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    128          
    129          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)
    130            static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf );
    131          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
    132          
    133          #ifdef ZCL_READ
    134            static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    135            static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    136          #endif // ZCL_READ
    137          
    138          #ifdef ZCL_WRITE
    139            static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    140            static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    141            static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    142            static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    143          #endif // ZCL_WRITE
    144          
    145          #ifdef ZCL_REPORT
    146            static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    147            static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    148          #endif // ZCL_REPORT
    149          
    150          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    151          
    152          #ifdef ZCL_DISCOVER
    153            static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint16 *attrId, zclAttrRec_t *pAttr );
    154            static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd );
    155            static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    156          #endif // ZCL_DISCOVER
    157          
    158          static uint8 zclSendMsg( zclIncoming_t *pInMsg );
    159          

   \                                 In  segment CODE_C, align 1
   \   000000   ........     DW ??zclParseInReadCmd?relay, ??zclProcessInReadCmd?relay
   \   000004   ........     DW ??zclParseInReadRspCmd?relay, ??zclSendMsg?relay
   \   000008   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay
   \   00000C   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteUndividedCmd?relay
   \   000010   ........     DW ??zclParseInWriteRspCmd?relay, ??zclSendMsg?relay
   \   000014   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay, 0H, 0H, 0H
   \            00000000
   \            0000    
   \   00001E   00000000     DW 0H, 0H, 0H, 0H, 0H, 0H, 0H, ??zclParseInDefaultRspCmd?relay
   \            00000000
   \            00000000
   \            0000....
   \   00002E   ....0000     DW ??zclSendMsg?relay, 0H, 0H, 0H, 0H
   \            00000000
   \            0000    
    160          static CONST zclCmdItems_t zclCmdTable[] =
    161          {
    162          #ifdef ZCL_READ
    163            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    164            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zclSendMsg                      },
    165          #else
    166            /* ZCL_CMD_READ */                { NULL,                          NULL                            },
    167            /* ZCL_CMD_READ_RSP */            { NULL,                          NULL                            },
    168          #endif // ZCL_READ
    169          
    170          #ifdef ZCL_WRITE
    171            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    172            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    173            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zclSendMsg                      },
    174            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    175          #else
    176            /* ZCL_CMD_WRITE */               { NULL,                          NULL                            },
    177            /* ZCL_CMD_WRITE_UNDIVIDED */     { NULL,                          NULL                            },
    178            /* ZCL_CMD_WRITE_RSP */           { NULL,                          NULL                            },
    179            /* ZCL_CMD_WRITE_NO_RSP */        { NULL,                          NULL                            },
    180          #endif // ZCL_WRITE
    181          
    182          #ifdef ZCL_REPORT
    183            /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zclSendMsg                      },
    184            /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zclSendMsg                      },
    185            /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zclSendMsg                      },
    186            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zclSendMsg                      },
    187            /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zclSendMsg                      },
    188          #else
    189            /* ZCL_CMD_CONFIG_REPORT */       { NULL,                          NULL                            },
    190            /* ZCL_CMD_CONFIG_REPORT_RSP */   { NULL,                          NULL                            },
    191            /* ZCL_CMD_READ_REPORT_CFG */     { NULL,                          NULL                            },
    192            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { NULL,                          NULL                            },
    193            /* ZCL_CMD_REPORT */              { NULL,                          NULL                            },
    194          #endif // ZCL_REPORT
    195          
    196            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zclSendMsg                      },
    197            
    198          #ifdef ZCL_DISCOVER  
    199            /* ZCL_CMD_DISCOVER */            { zclParseInDiscCmd,             zclProcessInDiscCmd             },
    200            /* ZCL_CMD_DISCOVER_RSP */        { zclParseInDiscRspCmd,          zclSendMsg                      }
    201          #else
    202            /* ZCL_CMD_DISCOVER */            { NULL,                          NULL                            },
    203            /* ZCL_CMD_DISCOVER_RSP */        { NULL,                          NULL                            }
    204          #endif // ZCL_DISCOVER
    205          };
    206          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    207          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    208          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    209            zcl_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#zcl_TaskID
   \   000008   F0           MOVX    @DPTR,A
    210          
    211            plugins = (zclLibPlugin_t  *)NULL;
   \   000009   90....       MOV     DPTR,#plugins
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
    212            attrList = (zclAttrRecsList *)NULL;
   \   000010   90....       MOV     DPTR,#attrList
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    213            clusterOptionList = (zclClusterOptionList *)NULL;
   \   000016   90....       MOV     DPTR,#clusterOptionList
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    214          }
   \   00001C   02....       LJMP    ?Subroutine83 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    215          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    217          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    218            uint8 *msgPtr;
    219            (void)task_id;  // Intentionally unreferenced parameter
    220            
    221            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??zcl_event_loop_0
   \   000011   E9           MOV     A,R1
   \                     ??zcl_event_loop_0:
   \   000012   604B         JZ      ??zcl_event_loop_1
    222            {
    223              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000014                ; Setup parameters for call to function osal_msg_receive
   \   000014   800E         SJMP    ??zcl_event_loop_2
    224              while ( msgPtr != NULL )
    225              {
    226                uint8 dealloc = TRUE;
    227                
    228                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    229                {
    230                  zclProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_3:
   \   000016                ; Setup parameters for call to function zclProcessMessageMSG
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??zclProcessMessageMSG?relay
    231                }
    232                else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
    233                {
    234                  osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr ); // send it to another task to process.
    235                  dealloc = FALSE;
    236                }
    237                if ( dealloc ) // Release the memory
    238                {
    239                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_4:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    240                }
    241                msgPtr = osal_msg_receive( zcl_TaskID ); // Next
   \                     ??zcl_event_loop_2:
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \   000024   90....       MOV     DPTR,#zcl_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   \   000030   AE..         MOV     R6,?V0 + 2
   \   000032   AF..         MOV     R7,?V0 + 3
   \   000034   EE           MOV     A,R6
   \   000035   7001         JNZ     ??zcl_event_loop_5
   \   000037   EF           MOV     A,R7
   \                     ??zcl_event_loop_5:
   \   000038   601C         JZ      ??zcl_event_loop_6
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   641A         XRL     A,#0x1a
   \   000041   60D3         JZ      ??zcl_event_loop_3
   \   000043   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FF         XRL     A,#0xff
   \   000049   60D2         JZ      ??zcl_event_loop_4
   \   00004B                ; Setup parameters for call to function osal_msg_send
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_send?relay
   \   000054   80CE         SJMP    ??zcl_event_loop_2
    242              } 
    243              return (events ^ SYS_EVENT_MSG);// return unprocessed events
   \                     ??zcl_event_loop_6:
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   7480         MOV     A,#-0x80
   \   00005A   65..         XRL     A,?V0 + 1
   \   00005C   FB           MOV     R3,A
   \   00005D   8004         SJMP    ??zcl_event_loop_7
    244            }
    245            return 0; // Discard unknown events
   \                     ??zcl_event_loop_1:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??zcl_event_loop_7:
   \   000063   02....       LJMP    ?Subroutine84 & 0xFFFF
    246          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    247          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    249                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    250          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine35 & 0xFFFF
    251            zclLibPlugin_t *pNewItem;
    252            zclLibPlugin_t *pLoop;
    253          
    254            // Fill in the new profile list
    255            pNewItem = osal_mem_alloc( sizeof( zclLibPlugin_t ) );
   \                     ??CrossCallReturnLabel_46:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A08         MOV     R2,#0x8
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_mem_alloc?relay
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
   \   000020   A8..         MOV     R0,?V0 + 4
   \   000022   A9..         MOV     R1,?V0 + 5
    256            if ( pNewItem == NULL )
   \   000024   E8           MOV     A,R0
   \   000025   7001         JNZ     ??zcl_registerPlugin_0
   \   000027   E9           MOV     A,R1
   \                     ??zcl_registerPlugin_0:
   \   000028   7004         JNZ     ??zcl_registerPlugin_1
    257              return (ZMemError);
   \   00002A   7910         MOV     R1,#0x10
   \   00002C   8055         SJMP    ??CrossCallReturnLabel_14
    258          
    259            // Fill in the plugin record.
    260            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_1:
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine14 & 0xFFFF
    261            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_19:
   \   000038   A3           INC     DPTR
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   12....       LCALL   ?Subroutine14 & 0xFFFF
    262            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_20:
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0 + 3
   \   00004B   F0           MOVX    @DPTR,A
    263            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   EA           MOV     A,R2
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   EB           MOV     A,R3
   \   00005E   F0           MOVX    @DPTR,A
    264          
    265            if (  plugins == NULL ) // Find spot in list
   \   00005F   90....       MOV     DPTR,#plugins
   \   000062   E0           MOVX    A,@DPTR
   \   000063   7002         JNZ     ??zcl_registerPlugin_2
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \                     ??zcl_registerPlugin_2:
   \   000067   90....       MOV     DPTR,#plugins
   \   00006A   6014         JZ      ??zcl_registerPlugin_3
    266            {
    267              plugins = pNewItem;
    268            }
    269            else
    270            {
    271              // Look for end of list
    272              pLoop = plugins;
   \   00006C   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00006F   8003         SJMP    ??zcl_registerPlugin_4
    273              while ( pLoop->next != NULL )
    274                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_5:
   \   000071   EA           MOV     A,R2
   \   000072   FC           MOV     R4,A
   \   000073   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_4:
   \   000074   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000077   7001         JNZ     ??zcl_registerPlugin_6
   \   000079   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_6:
   \   00007A   70F5         JNZ     ??zcl_registerPlugin_5
    275          
    276              pLoop->next = pNewItem; // Put new item at end of list
   \   00007C   8C82         MOV     DPL,R4
   \   00007E   8D83         MOV     DPH,R5
    277            }
   \                     ??zcl_registerPlugin_3:
   \   000080   12....       LCALL   ?Subroutine11 & 0xFFFF
    278            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_14:
   \   000083                REQUIRE ?Subroutine85
   \   000083                ; // Fall through to label ?Subroutine85
    279          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine99_0
   \   000005                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    280          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    282          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine50 & 0xFFFF
    283            zclAttrRecsList *pNewItem;
    284            zclAttrRecsList *pLoop;
    285          
    286            pNewItem = osal_mem_alloc( sizeof( zclAttrRecsList ) ); // Fill in the new profile list
    287            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_63:
   \   000008   7001         JNZ     ??zcl_registerAttrList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerAttrList_0:
   \   00000B   7004         JNZ     ??zcl_registerAttrList_1
    288              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_15
    289          
    290            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    291            pNewItem->endpoint = endpoint;
    292            pNewItem->numAttributes = numAttr;
    293            pNewItem->attrs = newAttrList;
    294          
    295            if ( attrList == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_0:
   \   000014   90....       MOV     DPTR,#attrList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerAttrList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerAttrList_2:
   \   00001C   90....       MOV     DPTR,#attrList
   \   00001F   6014         JZ      ??zcl_registerAttrList_3
    296            {
    297              attrList = pNewItem;
    298            }
    299            else
    300            {
    301              pLoop = attrList; // Look for end of list
   \   000021   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000024   8003         SJMP    ??zcl_registerAttrList_4
    302              while ( pLoop->next != NULL )
    303                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_4:
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00002C   7001         JNZ     ??zcl_registerAttrList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_6:
   \   00002F   70F5         JNZ     ??zcl_registerAttrList_5
    304          
    305              pLoop->next = pNewItem; // Put new item at end of list
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    306            }
   \                     ??zcl_registerAttrList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    307            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_15:
   \   000038   02....       LJMP    ?Subroutine84 & 0xFFFF
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   89..         MOV     ?V0 + 0,R1
   \   000002   8A..         MOV     ?V0 + 1,R2
   \   000004   EC           MOV     A,R4
   \   000005   FE           MOV     R6,A
   \   000006   ED           MOV     A,R5
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A06         MOV     R2,#0x6
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 2,R2
   \   000011   8B..         MOV     ?V0 + 3,R3
   \   000013   A8..         MOV     R0,?V0 + 2
   \   000015   A9..         MOV     R1,?V0 + 3
   \   000017   E8           MOV     A,R0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00000A   A3           INC     DPTR
   \   00000B   E5..         MOV     A,?V0 + 0
   \   00000D   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000010   E5..         MOV     A,?V0 + 1
   \   000012   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000015   A3           INC     DPTR
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EF           MOV     A,R7
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    309          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    311          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine50 & 0xFFFF
    312            zclClusterOptionList *pNewItem;
    313            zclClusterOptionList *pLoop;
    314          
    315            // Fill in the new profile list
    316            pNewItem = osal_mem_alloc( sizeof( zclClusterOptionList ) );
    317            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_64:
   \   000008   7001         JNZ     ??zcl_registerClusterOptionList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerClusterOptionList_0:
   \   00000B   7004         JNZ     ??zcl_registerClusterOptionList_1
    318              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_16
    319          
    320            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    321            pNewItem->endpoint = endpoint;
    322            pNewItem->numOptions = numOption;
    323            pNewItem->options = optionList;
    324          
    325            // Find spot in list
    326            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_1:
   \   000014   90....       MOV     DPTR,#clusterOptionList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerClusterOptionList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerClusterOptionList_2:
   \   00001C   90....       MOV     DPTR,#clusterOptionList
   \   00001F   6014         JZ      ??zcl_registerClusterOptionList_3
    327            {
    328              clusterOptionList = pNewItem;
    329            }
    330            else
    331            {
    332              // Look for end of list
    333              pLoop = clusterOptionList;
   \   000021   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000024   8003         SJMP    ??zcl_registerClusterOptionList_4
    334              while ( pLoop->next != NULL )
    335                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_4:
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00002C   7001         JNZ     ??zcl_registerClusterOptionList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_6:
   \   00002F   70F5         JNZ     ??zcl_registerClusterOptionList_5
    336          
    337              // Put new item at end of list
    338              pLoop->next = pNewItem;
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    339            }
   \                     ??zcl_registerClusterOptionList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    340            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_16:
   \   000038   02....       LJMP    ?Subroutine84 & 0xFFFF
    341          }
    342          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    344          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    345            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000007   EA           MOV     A,R2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
    346            
    347            return ( ZSuccess );
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   80..         SJMP    ?Subroutine83
    348          }
    349          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    351          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    352            // Allow only the first task
    353            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000004   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64FF         XRL     A,#0xff
   \   00000A   7006         JNZ     ??zcl_registerForMsg_0
    354            {
    355              zcl_RegisteredMsgTaskID = taskId;  
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
    356              return ( true );
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8002         SJMP    ??zcl_registerForMsg_1
    357            }
    358            return ( false );
   \                     ??zcl_registerForMsg_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??zcl_registerForMsg_1:
   \   000014                REQUIRE ?Subroutine83
   \   000014                ; // Fall through to label ?Subroutine83
    359          }
    360          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, 
   \                     zcl_DeviceOperational:
    362                                              uint8 frameType, uint8 cmd, uint16 profileID )
    363          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    364            zclAttrRec_t attrRec;
    365            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
    366            (void)profileID;  // Intentionally unreferenced parameter
    367            
    368            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it 
    369            // cannot send or respond to application level commands, other than commands
    370            // to read or write attributes. Note that the Identify cluster cannot be 
    371            // disabled, and remains functional regardless of this setting.
    372            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000013   EC           MOV     A,R4
   \   000014   700A         JNZ     ??zcl_DeviceOperational_0
   \   000016   ED           MOV     A,R5
   \   000017   C3           CLR     C
   \   000018   9406         SUBB    A,#0x6
   \   00001A   5004         JNC     ??zcl_DeviceOperational_0
    373              return ( TRUE );
   \                     ??zcl_DeviceOperational_1:
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   804E         SJMP    ??zcl_DeviceOperational_2
    374            
    375            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV     A,#0x3
   \   000022   6A           XRL     A,R2
   \   000023   7001         JNZ     ??zcl_DeviceOperational_3
   \   000025   EB           MOV     A,R3
   \                     ??zcl_DeviceOperational_3:
   \   000026   60F4         JZ      ??zcl_DeviceOperational_1
    376              return ( TRUE );
    377            
    378            // Is device enabled?
    379            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC, ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000028                ; Setup parameters for call to function zclFindAttrRec
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   8582..       MOV     ?V0 + 0,DPL
   \   000030   8583..       MOV     ?V0 + 1,DPH
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C12         MOV     R4,#0x12
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??zclFindAttrRec?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6016         JZ      ??zcl_DeviceOperational_4
    380              zclReadAttrData( &deviceEnabled, &attrRec );
   \   00004B                ; Setup parameters for call to function zclReadAttrData
   \   00004B   7401         MOV     A,#0x1
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AC82         MOV     R4,DPL
   \   000052   AD83         MOV     R5,DPH
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??zclReadAttrData?relay
    381            
    382            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_4:
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   60B0         JZ      ??zcl_DeviceOperational_1
   \   00006C   7900         MOV     R1,#0x0
   \                     ??zcl_DeviceOperational_2:
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   02....       LJMP    ?Subroutine93 & 0xFFFF
    383          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    384          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
    386                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
    387                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
    388                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    389          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
   \   000010   742A         MOV     A,#0x2a
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   742B         MOV     A,#0x2b
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
   \   00001F   742C         MOV     A,#0x2c
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   742D         MOV     A,#0x2d
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
   \   00002F   742E         MOV     A,#0x2e
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 12,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 13,A
   \   00003B   7430         MOV     A,#0x30
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 7,A
   \   000043   7431         MOV     A,#0x31
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 14,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 15,A
    390            endPointDesc_t *epDesc;
    391            zclFrameHdr_t hdr;
    392            uint8 *msgBuf;
    393            uint16 msgLen;
    394            uint8 *pBuf;
    395            afAddrType_t dstAddr;
    396            uint8 options;
    397            ZStatus_t status;
    398          
    399            osal_memcpy( &dstAddr, destAddr, sizeof ( afAddrType_t ) );
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8A..         MOV     ?V0 + 4,R2
   \   000051   8B..         MOV     ?V0 + 5,R3
   \   000053   75..00       MOV     ?V0 + 6,#0x0
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C0C         MOV     R4,#0xc
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    400          
    401            epDesc = afFindEndPointDesc( srcEP );
   \   00006E                ; Setup parameters for call to function afFindEndPointDesc
   \   00006E   EF           MOV     A,R7
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??afFindEndPointDesc?relay
   \   000073   8A..         MOV     ?V0 + 10,R2
   \   000075   8B..         MOV     ?V0 + 11,R3
    402            if ( epDesc == NULL )
   \   000077   EA           MOV     A,R2
   \   000078   7001         JNZ     ??zcl_SendCommand_0
   \   00007A   EB           MOV     A,R3
   \                     ??zcl_SendCommand_0:
   \   00007B   7005         JNZ     ??zcl_SendCommand_1
    403              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_2:
   \   00007D   7902         MOV     R1,#0x2
   \   00007F   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    404          
    405            if ( clusterID == ZCL_INVALID_CLUSTER_ID )
   \                     ??zcl_SendCommand_1:
   \   000082   74FF         MOV     A,#-0x1
   \   000084   65..         XRL     A,?V0 + 0
   \   000086   7004         JNZ     ??zcl_SendCommand_4
   \   000088   74FF         MOV     A,#-0x1
   \   00008A   65..         XRL     A,?V0 + 1
   \                     ??zcl_SendCommand_4:
   \   00008C   60EF         JZ      ??zcl_SendCommand_2
    406              return ( ZInvalidParameter ); // EMBEDDED RETURN
    407          
    408          #if defined ( INTER_PAN )
    409            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
    410              options = AF_TX_OPTIONS_NONE;
    411            else
    412          #endif
    413              options = zclGetClusterOption( srcEP, clusterID );
   \   00008E                ; Setup parameters for call to function zclGetClusterOption
   \   00008E   AA..         MOV     R2,?V0 + 0
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   EF           MOV     A,R7
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??zclGetClusterOption?relay
   \   000097   E9           MOV     A,R1
   \   000098   F5..         MOV     ?V0 + 2,A
    414            
    415            osal_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \   00009A                ; Setup parameters for call to function osal_memset
   \   00009A   7C06         MOV     R4,#0x6
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??osal_memset?relay
    416          
    417            // Not Profile wide command (like READ, WRITE)
    418            if ( specific )
   \   0000AD   E5..         MOV     A,?V0 + 3
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   6015         JZ      ??zcl_SendCommand_5
    419              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   54FC         ANL     A,#0xfc
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   7401         MOV     A,#0x1
   \   0000C0   48           ORL     A,R0
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E9           MOV     A,R1
   \   0000CA   8006         SJMP    ??zcl_SendCommand_6
    420            else
    421              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_5:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   54FC         ANL     A,#0xfc
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \                     ??zcl_SendCommand_6:
   \   0000D2   F0           MOVX    @DPTR,A
    422          
    423            if ((epDesc->simpleDesc == NULL) ||
    424                (zcl_DeviceOperational(srcEP, clusterID, hdr.fc.type, cmd, epDesc->simpleDesc->AppProfId) == FALSE))
   \   0000D3   85..82       MOV     DPL,?V0 + 10
   \   0000D6   85..83       MOV     DPH,?V0 + 11
   \   0000D9   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000DC   8882         MOV     DPL,R0
   \   0000DE   8983         MOV     DPH,R1
   \   0000E0   E582         MOV     A,DPL
   \   0000E2   7002         JNZ     ??zcl_SendCommand_7
   \   0000E4   E583         MOV     A,DPH
   \                     ??zcl_SendCommand_7:
   \   0000E6   6020         JZ      ??zcl_SendCommand_8
   \   0000E8                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E8   A3           INC     DPTR
   \   0000E9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000EC   EE           MOV     A,R6
   \   0000ED   FD           MOV     R5,A
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   5403         ANL     A,#0x3
   \   0000F6   FC           MOV     R4,A
   \   0000F7   AA..         MOV     R2,?V0 + 0
   \   0000F9   AB..         MOV     R3,?V0 + 1
   \   0000FB   EF           MOV     A,R7
   \   0000FC   F9           MOV     R1,A
   \   0000FD   12....       LCALL   ??zcl_DeviceOperational?relay
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   E9           MOV     A,R1
   \   000106   7005         JNZ     ??zcl_SendCommand_9
    425              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_8:
   \   000108   7901         MOV     R1,#0x1
   \   00010A   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    426            
    427            if ( manuCode != 0 ) // Fill in the Maufacturer Code
   \                     ??zcl_SendCommand_9:
   \   00010D   E5..         MOV     A,?V0 + 12
   \   00010F   7002         JNZ     ??zcl_SendCommand_10
   \   000111   E5..         MOV     A,?V0 + 13
   \                     ??zcl_SendCommand_10:
   \   000113   6019         JZ      ??zcl_SendCommand_11
    428            {
    429              hdr.fc.manuSpecific = 1;
   \   000115   85..82       MOV     DPL,?XSP + 0
   \   000118   85..83       MOV     DPH,?XSP + 1
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   4404         ORL     A,#0x4
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F0           MOVX    @DPTR,A
    430              hdr.manuCode = manuCode;
   \   000122   7402         MOV     A,#0x2
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   E5..         MOV     A,?V0 + 12
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   E5..         MOV     A,?V0 + 13
   \   00012D   F0           MOVX    @DPTR,A
    431            }
    432            
    433            if ( direction ) // Set the Command Direction
   \                     ??zcl_SendCommand_11:
   \   00012E   E5..         MOV     A,?V0 + 9
   \   000130   85..82       MOV     DPL,?XSP + 0
   \   000133   85..83       MOV     DPH,?XSP + 1
   \   000136   6005         JZ      ??zcl_SendCommand_12
    434              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000138   E0           MOVX    A,@DPTR
   \   000139   4408         ORL     A,#0x8
   \   00013B   8003         SJMP    ??zcl_SendCommand_13
    435            else
    436              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_12:
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   54F7         ANL     A,#0xf7
   \                     ??zcl_SendCommand_13:
   \   000140   F0           MOVX    @DPTR,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F0           MOVX    @DPTR,A
    437          
    438            if ( disableDefaultRsp ) // Set the Disable Default Response field
   \   000144   E5..         MOV     A,?V0 + 8
   \   000146   85..82       MOV     DPL,?XSP + 0
   \   000149   85..83       MOV     DPH,?XSP + 1
   \   00014C   6005         JZ      ??zcl_SendCommand_14
    439              hdr.fc.disableDefaultRsp = 1;
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   4410         ORL     A,#0x10
   \   000151   8003         SJMP    ??zcl_SendCommand_15
    440            else
    441              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_14:
   \   000153   E0           MOVX    A,@DPTR
   \   000154   54EF         ANL     A,#0xef
   \                     ??zcl_SendCommand_15:
   \   000156   F0           MOVX    @DPTR,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F0           MOVX    @DPTR,A
    442                               
    443            hdr.transSeqNum = seqNum; // Fill in the Transaction Sequence Number
   \   00015A   7404         MOV     A,#0x4
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   E5..         MOV     A,?V0 + 7
   \   000161   F0           MOVX    @DPTR,A
    444            
    445            hdr.commandID = cmd; // Fill in the command
   \   000162   7405         MOV     A,#0x5
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   EE           MOV     A,R6
   \   000168   F0           MOVX    @DPTR,A
    446            
    447            msgLen = zclCalcHdrSize( &hdr ); // calculate the needed buffer size
   \   000169   75..03       MOV     ?V0 + 4,#0x3
   \   00016C   85..82       MOV     DPL,?XSP + 0
   \   00016F   85..83       MOV     DPH,?XSP + 1
   \   000172   E0           MOVX    A,@DPTR
   \   000173   5404         ANL     A,#0x4
   \   000175   6003         JZ      ??zcl_SendCommand_16
   \   000177   75..05       MOV     ?V0 + 4,#0x5
    448            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_16:
   \   00017A   E5..         MOV     A,?V0 + 14
   \   00017C   25..         ADD     A,?V0 + 4
   \   00017E   F5..         MOV     ?V0 + 12,A
   \   000180   E5..         MOV     A,?V0 + 15
   \   000182   3400         ADDC    A,#0x0
   \   000184   F5..         MOV     ?V0 + 13,A
    449          
    450            msgBuf = osal_mem_alloc( msgLen ); // Allocate the buffer needed
   \   000186                ; Setup parameters for call to function osal_mem_alloc
   \   000186   AA..         MOV     R2,?V0 + 12
   \   000188   FB           MOV     R3,A
   \   000189   12....       LCALL   ??osal_mem_alloc?relay
   \   00018C   8A..         MOV     ?V0 + 8,R2
   \   00018E   8B..         MOV     ?V0 + 9,R3
    451            if ( msgBuf != NULL )
   \   000190   EA           MOV     A,R2
   \   000191   7001         JNZ     ??zcl_SendCommand_17
   \   000193   EB           MOV     A,R3
   \                     ??zcl_SendCommand_17:
   \   000194   606B         JZ      ??zcl_SendCommand_18
    452            {
    453              pBuf = zclBuildHdr( &hdr, msgBuf ); // Fill in the ZCL Header
    454          
    455              osal_memcpy( pBuf, cmdFormat, cmdFormatLen ); // Fill in the command frame
   \   000196                ; Setup parameters for call to function osal_memcpy
   \   000196   7433         MOV     A,#0x33
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00019E   78..         MOV     R0,#?V0 + 4
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A3                ; Setup parameters for call to function zclBuildHdr
   \   0001A3   AC..         MOV     R4,?V0 + 8
   \   0001A5   AD..         MOV     R5,?V0 + 9
   \   0001A7   7403         MOV     A,#0x3
   \   0001A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AC   AA82         MOV     R2,DPL
   \   0001AE   AB83         MOV     R3,DPH
   \   0001B0   12....       LCALL   ??zclBuildHdr?relay
   \   0001B3   AC..         MOV     R4,?V0 + 14
   \   0001B5   AD..         MOV     R5,?V0 + 15
   \   0001B7   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001BA   12....       LCALL   ?DEALLOC_XSTACK8
    456          
    457              status = AF_DataRequest( &dstAddr, epDesc, clusterID, msgLen, msgBuf, 
    458                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );  
   \   0001BD                ; Setup parameters for call to function AF_DataRequest
   \   0001BD   75..1E       MOV     ?V0 + 3,#0x1e
   \   0001C0   78..         MOV     R0,#?V0 + 3
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C5   75....       MOV     ?V0 + 4,#(zcl_TransID & 0xff)
   \   0001C8   75....       MOV     ?V0 + 5,#((zcl_TransID >> 8) & 0xff)
   \   0001CB   78..         MOV     R0,#?V0 + 4
   \   0001CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D0   78..         MOV     R0,#?V0 + 8
   \   0001D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D5   78..         MOV     R0,#?V0 + 12
   \   0001D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DA   78..         MOV     R0,#?V0 + 0
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DF   A9..         MOV     R1,?V0 + 2
   \   0001E1   AC..         MOV     R4,?V0 + 10
   \   0001E3   AD..         MOV     R5,?V0 + 11
   \   0001E5   740F         MOV     A,#0xf
   \   0001E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EA   AA82         MOV     R2,DPL
   \   0001EC   AB83         MOV     R3,DPH
   \   0001EE   12....       LCALL   ??AF_DataRequest?relay
   \   0001F1   7409         MOV     A,#0x9
   \   0001F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F6   E9           MOV     A,R1
   \   0001F7   FE           MOV     R6,A
    459              osal_mem_free ( msgBuf );
   \   0001F8                ; Setup parameters for call to function osal_mem_free
   \   0001F8   AA..         MOV     R2,?V0 + 8
   \   0001FA   AB..         MOV     R3,?V0 + 9
   \   0001FC   12....       LCALL   ??osal_mem_free?relay
   \   0001FF   8002         SJMP    ??zcl_SendCommand_19
    460            }
    461            else
    462              status = ZMemError;
   \                     ??zcl_SendCommand_18:
   \   000201   7E10         MOV     R6,#0x10
    463          
    464            return ( status );
   \                     ??zcl_SendCommand_19:
   \   000203   EE           MOV     A,R6
   \   000204   F9           MOV     R1,A
   \                     ??zcl_SendCommand_3:
   \   000205                REQUIRE ?Subroutine98
   \   000205                ; // Fall through to label ?Subroutine98
    465          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   7412         MOV     A,#0x12
   \   000002   80..         SJMP    ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine122_0
   \   000002                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine123_0
   \   000001                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    466          
    467          #ifdef ZCL_READ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
    469                                  uint16 clusterID, zclReadCmd_t *readCmd,
    470                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
    471          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 8,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 9,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 12,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 13,A
    472            uint8 dataLen;
    473            uint8 *buf;
    474            uint8 *pBuf;
    475            ZStatus_t status;
    476          
    477            dataLen = readCmd->numAttr * 2; // Attribute ID
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   33           RLC     A
   \   000036   FA           MOV     R2,A
    478          
    479            buf = osal_mem_alloc( dataLen );
   \   000037   8A82         MOV     DPL,R2
   \   000039   8582..       MOV     ?V0 + 6,DPL
   \   00003C   75..00       MOV     ?V0 + 7,#0x0
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   12....       LCALL   ?Subroutine53 & 0xFFFF
    480            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_69:
   \   000042   7001         JNZ     ??zcl_SendRead_0
   \   000044   EB           MOV     A,R3
   \                     ??zcl_SendRead_0:
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??zcl_SendRead_1 & 0xFFFF
    481            {
    482              uint8 i;
    483          
    484              pBuf = buf; // Load the buffer - serially
   \   00004A   A8..         MOV     R0,?V0 + 2
   \   00004C   A9..         MOV     R1,?V0 + 3
    485              for (i = 0; i < readCmd->numAttr; i++)
   \   00004E   75..00       MOV     ?V0 + 10,#0x0
   \   000051   801F         SJMP    ??zcl_SendRead_2
    486              {
    487                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_3:
   \   000053   E5..         MOV     A,?V0 + 10
   \   000055   C3           CLR     C
   \   000056   33           RLC     A
   \   000057   FA           MOV     R2,A
   \   000058   E4           CLR     A
   \   000059   33           RLC     A
   \   00005A   FB           MOV     R3,A
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   2A           ADD     A,R2
   \   00005E   F582         MOV     DPL,A
   \   000060   E5..         MOV     A,?V0 + 5
   \   000062   3B           ADDC    A,R3
   \   000063   F583         MOV     DPH,A
   \   000065   A3           INC     DPTR
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ?Subroutine38 & 0xFFFF
    488                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   \                     ??CrossCallReturnLabel_128:
   \   00006D   12....       LCALL   ?Subroutine24 & 0xFFFF
    489              }
   \                     ??CrossCallReturnLabel_137:
   \   000070   05..         INC     ?V0 + 10
   \                     ??zcl_SendRead_2:
   \   000072   85..82       MOV     DPL,?V0 + 4
   \   000075   85..83       MOV     DPH,?V0 + 5
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FA           MOV     R2,A
   \   00007A   E5..         MOV     A,?V0 + 10
   \   00007C   C3           CLR     C
   \   00007D   9A           SUBB    A,R2
   \   00007E   40D3         JC      ??zcl_SendRead_3
    490              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
    491                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );  
   \   000080                ; Setup parameters for call to function zcl_SendCommand
   \   000080   78..         MOV     R0,#?V0 + 2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   78..         MOV     R0,#?V0 + 6
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   E5..         MOV     A,?V0 + 13
   \   00008C   F5..         MOV     ?V0 + 4,A
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..00       MOV     ?V0 + 4,#0x0
   \   000096   75..00       MOV     ?V0 + 5,#0x0
   \   000099   78..         MOV     R0,#?V0 + 4
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   E5..         MOV     A,?V0 + 12
   \   0000A0   F5..         MOV     ?V0 + 4,A
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   E5..         MOV     A,?V0 + 9
   \   0000A9   F5..         MOV     ?V0 + 4,A
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..00       MOV     ?V0 + 4,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   78..         MOV     R0,#?V0 + 4
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   AC..         MOV     R4,?V0 + 0
   \   0000BF   AD..         MOV     R5,?V0 + 1
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   A9..         MOV     R1,?V0 + 8
   \   0000C7   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
   \   0000CE   FE           MOV     R6,A
    492              osal_mem_free( buf );
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V0 + 2
   \   0000D1   AB..         MOV     R3,?V0 + 3
   \   0000D3   12....       LCALL   ??osal_mem_free?relay
   \   0000D6   8002         SJMP    ??zcl_SendRead_4
    493            }
    494            else
    495              status = ZMemError;
   \                     ??zcl_SendRead_1:
   \   0000D8   7E10         MOV     R6,#0x10
    496          
    497            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000DA                REQUIRE ?Subroutine95
   \   0000DA                ; // Fall through to label ?Subroutine95
    498          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine101_0
   \   000002                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine102_0
   \   000005                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   A882         MOV     R0,DPL
   \   000002   A983         MOV     R1,DPH
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_mem_alloc?relay
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   7418         MOV     A,#0x18
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   02....       LJMP    ?Subroutine90 & 0xFFFF
    499          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7404         MOV     A,#0x4
   \   000004                REQUIRE ??Subroutine100_0
   \   000004                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
    501                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
    502                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    503          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 10,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 9,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 8,A
    504            uint8 *buf;
    505            uint8 *pBuf;
    506            zclReadRspStatus_t *statusRec;
    507            uint8 len = 0;
   \   00002E   7E00         MOV     R6,#0x0
    508            uint8 i;
    509            ZStatus_t status;
    510            
    511            // calculate the size of the command
    512            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000030   8E..         MOV     ?V0 + 5,R6
   \   000032   8021         SJMP    ??zcl_SendReadRsp_0
    513            {
    514              statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_1:
   \   000034   E5..         MOV     A,?V0 + 5
   \   000036   75F006       MOV     B,#0x6
   \   000039   12....       LCALL   ?Subroutine60 & 0xFFFF
    515              
    516              len += 2 + 1; // Attribute ID + Status
   \                     ??CrossCallReturnLabel_77:
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   0E           INC     R6
    517          
    518              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   700F         JNZ     ??zcl_SendReadRsp_2
    519              {
    520                len++; // Attribute Data Type
    521                len += zclGetAttrDataLength( statusRec->dataType, statusRec->data); // Attribute Data
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine28 & 0xFFFF
    522              }
    523            }
   \                     ??CrossCallReturnLabel_140:
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000050   04           INC     A
   \   000051   2E           ADD     A,R6
   \   000052   FE           MOV     R6,A
   \                     ??zcl_SendReadRsp_2:
   \   000053   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_0:
   \   000055   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000058   40DA         JC      ??zcl_SendReadRsp_1
    524          
    525            buf = osal_mem_alloc( len );
   \   00005A   12....       LCALL   ?Subroutine54 & 0xFFFF
    526            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_71:
   \   00005D   7001         JNZ     ??zcl_SendReadRsp_3
   \   00005F   EB           MOV     A,R3
   \                     ??zcl_SendReadRsp_3:
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??zcl_SendReadRsp_4 & 0xFFFF
    527            {
    528              // Load the buffer - serially
    529              pBuf = buf;
   \   000065   AE..         MOV     R6,?V0 + 6
   \   000067   AF..         MOV     R7,?V0 + 7
    530              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000069   75..00       MOV     ?V0 + 5,#0x0
   \   00006C   8028         SJMP    ??zcl_SendReadRsp_5
    531              {
    532                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_6:
   \   00006E   E5..         MOV     A,?V0 + 5
   \   000070   75F006       MOV     B,#0x6
   \   000073   12....       LCALL   ?Subroutine1 & 0xFFFF
    533                
    534                *pBuf++ = LO_UINT16( statusRec->attrID );
    535                *pBuf++ = HI_UINT16( statusRec->attrID );
    536                *pBuf++ = statusRec->status;
   \                     ??CrossCallReturnLabel_2:
   \   000076   FA           MOV     R2,A
   \   000077   E9           MOV     A,R1
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FB           MOV     R3,A
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   12....       LCALL   ?Subroutine80 & 0xFFFF
    537          
    538                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_104:
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   700B         JNZ     ??CrossCallReturnLabel_124
    539                {
    540                  *pBuf++ = statusRec->dataType;
   \   000089   E8           MOV     A,R0
   \   00008A   2403         ADD     A,#0x3
   \   00008C   12....       LCALL   ?Subroutine39 & 0xFFFF
    541                  zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
    542                  
    543                  // move pass attribute data
    544                  pBuf += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
    545                }
    546              } // for loop
   \                     ??CrossCallReturnLabel_53:
   \   00008F   2404         ADD     A,#0x4
   \   000091   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000094   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_5:
   \   000096   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000099   40D3         JC      ??zcl_SendReadRsp_6
    547          
    548              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE, 
    549                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \   00009B                ; Setup parameters for call to function zcl_SendCommand
   \   00009B   78..         MOV     R0,#?V0 + 6
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   E5..         MOV     A,?V0 + 8
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   75..00       MOV     ?V0 + 0,#0x0
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   E5..         MOV     A,?V0 + 9
   \   0000B8   F5..         MOV     ?V0 + 0,A
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   E5..         MOV     A,?V0 + 10
   \   0000C1   F5..         MOV     ?V0 + 0,A
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   75..00       MOV     ?V0 + 0,#0x0
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   75..01       MOV     ?V0 + 0,#0x1
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   740B         MOV     A,#0xb
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000E0   740D         MOV     A,#0xd
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   \   0000EC   FE           MOV     R6,A
    550              osal_mem_free( buf );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV     R2,?V0 + 6
   \   0000EF   AB..         MOV     R3,?V0 + 7
   \   0000F1   12....       LCALL   ??osal_mem_free?relay
   \   0000F4   8002         SJMP    ??zcl_SendReadRsp_7
    551            }
    552            else
    553              status = ZMemError;
   \                     ??zcl_SendReadRsp_4:
   \   0000F6   7E10         MOV     R6,#0x10
    554          
    555            return ( status );
   \                     ??zcl_SendReadRsp_7:
   \   0000F8   02....       LJMP    ?Subroutine94 & 0xFFFF
    556          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine103_0
   \   000004                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FB           MOV     R3,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000005   E9           MOV     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000007                REQUIRE ?Subroutine90
   \   000007                ; // Fall through to label ?Subroutine90

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   75..00       MOV     ?V0 + 1,#0x0
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   AA..         MOV     R2,?V0 + 0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   EA           MOV     A,R2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   741E         MOV     A,#0x1e
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F5..         MOV     ?V0 + 12,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 13,A
   \   000007   85..82       MOV     DPL,?V0 + 12
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   A9..         MOV     R1,?V0 + 4
   \   000005   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   E5..         MOV     A,?V0 + 5
   \   00000A   C3           CLR     C
   \   00000B   9A           SUBB    A,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F5..         MOV     ?V0 + 14,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007   EE           MOV     A,R6
   \   000008   FC           MOV     R4,A
   \   000009   EF           MOV     A,R7
   \   00000A   FD           MOV     R5,A
   \   00000B   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000E   12....       LCALL   ??zclSerializeData?relay
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000014   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000017   E9           MOV     A,R1
   \   000018   F8           MOV     R0,A
   \   000019   EE           MOV     A,R6
   \   00001A   28           ADD     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C                REQUIRE ?Subroutine89
   \   00001C                ; // Fall through to label ?Subroutine89

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   85..82       MOV     DPL,?V0 + 12
   \   00000E   85..83       MOV     DPH,?V0 + 13
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   EC           MOV     A,R4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   ED           MOV     A,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   89..         MOV     ?V0 + 4,R1
   \   000012   741C         MOV     A,#0x1c
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   AE82         MOV     R6,DPL
   \   00000C   AF83         MOV     R7,DPH
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000016   2402         ADD     A,#0x2
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 3
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   FD           MOV     R5,A
   \   000004   22           RET
    557          #endif // ZCL_READ
    558          
    559          #ifdef ZCL_WRITE

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, 
   \                     zcl_SendWriteRequest:
    561                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction, 
    562                                          uint8 disableDefaultRsp, uint8 seqNum )
    563          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 10,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 9,A
   \   00002E   7421         MOV     A,#0x21
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 8,A
    564            uint8 *buf;
    565            uint8 *pBuf;
    566            zclWriteRec_t *statusRec;
    567            uint8 attrDataLen;
    568            uint8 dataLen = 0;
   \   000036   7E00         MOV     R6,#0x0
    569            uint8 i;
    570            ZStatus_t status;
    571            
    572            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000038   8E..         MOV     ?V0 + 5,R6
   \   00003A   8014         SJMP    ??zcl_SendWriteRequest_0
    573            {
    574              statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   00003C   E5..         MOV     A,?V0 + 5
   \   00003E   75F005       MOV     B,#0x5
   \   000041   12....       LCALL   ?Subroutine60 & 0xFFFF
    575              
    576              attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    577              dataLen += 2 + 1 + attrDataLen; // Attribute ID + Attribute Type + Attribute Data
   \                     ??CrossCallReturnLabel_78:
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   12....       LCALL   ?Subroutine28 & 0xFFFF
    578            }
   \                     ??CrossCallReturnLabel_141:
   \   000047   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00004A   2403         ADD     A,#0x3
   \   00004C   2E           ADD     A,R6
   \   00004D   FE           MOV     R6,A
   \   00004E   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_0:
   \   000050   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000053   40E7         JC      ??zcl_SendWriteRequest_1
    579          
    580            buf = osal_mem_alloc( dataLen );
   \   000055   12....       LCALL   ?Subroutine54 & 0xFFFF
    581            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_72:
   \   000058   7001         JNZ     ??zcl_SendWriteRequest_2
   \   00005A   EB           MOV     A,R3
   \                     ??zcl_SendWriteRequest_2:
   \   00005B   607C         JZ      ??zcl_SendWriteRequest_3
    582            {
    583              // Load the buffer - serially
    584              pBuf = buf;
   \   00005D   AE..         MOV     R6,?V0 + 6
   \   00005F   AF..         MOV     R7,?V0 + 7
    585              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000061   75..00       MOV     ?V0 + 5,#0x0
   \   000064   8012         SJMP    ??zcl_SendWriteRequest_4
    586              { 
    587                statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_5:
   \   000066   E5..         MOV     A,?V0 + 5
   \   000068   75F005       MOV     B,#0x5
   \   00006B   12....       LCALL   ?Subroutine1 & 0xFFFF
    588                
    589                *pBuf++ = LO_UINT16( statusRec->attrID );
    590                *pBuf++ = HI_UINT16( statusRec->attrID );
    591                *pBuf++ = statusRec->dataType;
    592                
    593                zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
    594                
    595                attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    596                pBuf += attrDataLen; // move pass attribute data
    597              }
   \                     ??CrossCallReturnLabel_3:
   \   00006E   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000071   2403         ADD     A,#0x3
   \   000073   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000076   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_4:
   \   000078   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00007B   40E9         JC      ??zcl_SendWriteRequest_5
    598          
    599              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE, 
    600                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007D                ; Setup parameters for call to function zcl_SendCommand
   \   00007D   78..         MOV     R0,#?V0 + 6
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   E5..         MOV     A,?V0 + 8
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   75..00       MOV     ?V0 + 0,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   E5..         MOV     A,?V0 + 9
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   E5..         MOV     A,?V0 + 10
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   75..00       MOV     ?V0 + 0,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   E5..         MOV     A,?V0 + 11
   \   0000B4   F5..         MOV     ?V0 + 0,A
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000C3   740D         MOV     A,#0xd
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   E9           MOV     A,R1
   \   0000CF   FE           MOV     R6,A
    601              osal_mem_free( buf );
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   AA..         MOV     R2,?V0 + 6
   \   0000D2   AB..         MOV     R3,?V0 + 7
   \   0000D4   12....       LCALL   ??osal_mem_free?relay
   \   0000D7   8002         SJMP    ??zcl_SendWriteRequest_6
    602            }
    603            else
    604              status = ZMemError;
   \                     ??zcl_SendWriteRequest_3:
   \   0000D9   7E10         MOV     R6,#0x10
    605          
    606            return ( status);
   \                     ??zcl_SendWriteRequest_6:
   \   0000DB   02....       LJMP    ?Subroutine94 & 0xFFFF
    607          }
    608          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    609          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
    610                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
    611                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    612          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 6,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 7,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 10,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 11,A
    613            uint8 dataLen;
    614            uint8 *buf;
    615            uint8 *pBuf;
    616            uint8 i;
    617            ZStatus_t status;
    618            
    619            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \   00002D   75F003       MOV     B,#0x3
   \   000030   85..82       MOV     DPL,?V0 + 4
   \   000033   85..83       MOV     DPH,?V0 + 5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   A4           MUL     AB
   \   000038   F5..         MOV     ?V0 + 12,A
    620          
    621            buf = osal_mem_alloc( dataLen );
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   FA           MOV     R2,A
   \   00003B   12....       LCALL   ?Subroutine53 & 0xFFFF
    622            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_70:
   \   00003E   7001         JNZ     ??zcl_SendWriteRsp_0
   \   000040   EB           MOV     A,R3
   \                     ??zcl_SendWriteRsp_0:
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??zcl_SendWriteRsp_1 & 0xFFFF
    623            {
    624              // Load the buffer - serially
    625              pBuf = buf;
   \   000046   A8..         MOV     R0,?V0 + 2
   \   000048   A9..         MOV     R1,?V0 + 3
    626              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   00004A   75..00       MOV     ?V0 + 8,#0x0
   \   00004D   802E         SJMP    ??zcl_SendWriteRsp_2
    627              { 
    628                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_3:
   \   00004F   E5..         MOV     A,?V0 + 8
   \   000051   75F003       MOV     B,#0x3
   \   000054   A4           MUL     AB
   \   000055   FA           MOV     R2,A
   \   000056   ABF0         MOV     R3,B
   \   000058   E5..         MOV     A,?V0 + 4
   \   00005A   2A           ADD     A,R2
   \   00005B   FA           MOV     R2,A
   \   00005C   E5..         MOV     A,?V0 + 5
   \   00005E   3B           ADDC    A,R3
   \   00005F   FB           MOV     R3,A
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine38 & 0xFFFF
    629                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_129:
   \   000068   EA           MOV     A,R2
   \   000069   2402         ADD     A,#0x2
   \   00006B   0A           INC     R2
   \   00006C   0A           INC     R2
   \   00006D   EB           MOV     A,R3
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   12....       LCALL   ??Subroutine102_0 & 0xFFFF
    630                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_136:
   \   000078   12....       LCALL   ?Subroutine24 & 0xFFFF
    631              }
   \                     ??CrossCallReturnLabel_138:
   \   00007B   05..         INC     ?V0 + 8
   \                     ??zcl_SendWriteRsp_2:
   \   00007D   85..82       MOV     DPL,?V0 + 4
   \   000080   85..83       MOV     DPH,?V0 + 5
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   E5..         MOV     A,?V0 + 8
   \   000087   C3           CLR     C
   \   000088   9A           SUBB    A,R2
   \   000089   40C4         JC      ??zcl_SendWriteRsp_3
    632              
    633              // If there's only a single status record and its status field is set to 
    634              // SUCCESS then omit the attribute ID field.
    635              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6401         XRL     A,#0x1
   \   00008E   7007         JNZ     ??zcl_SendWriteRsp_4
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   7003         JNZ     ??zcl_SendWriteRsp_4
    636                dataLen = 1;
   \   000094   75..01       MOV     ?V0 + 12,#0x1
    637                
    638              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
    639                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_4:
   \   000097                ; Setup parameters for call to function zcl_SendCommand
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   75..00       MOV     ?V0 + 13,#0x0
   \   00009F   78..         MOV     R0,#?V0 + 12
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   E5..         MOV     A,?V0 + 11
   \   0000A6   F5..         MOV     ?V0 + 4,A
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   75..00       MOV     ?V0 + 4,#0x0
   \   0000B0   75..00       MOV     ?V0 + 5,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   E5..         MOV     A,?V0 + 10
   \   0000BA   F5..         MOV     ?V0 + 4,A
   \   0000BC   78..         MOV     R0,#?V0 + 4
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   E5..         MOV     A,?V0 + 7
   \   0000C3   F5..         MOV     ?V0 + 4,A
   \   0000C5   78..         MOV     R0,#?V0 + 4
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   75..00       MOV     ?V0 + 4,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   75..04       MOV     ?V0 + 4,#0x4
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   AC..         MOV     R4,?V0 + 0
   \   0000DC   AD..         MOV     R5,?V0 + 1
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FB           MOV     R3,A
   \   0000E2   A9..         MOV     R1,?V0 + 6
   \   0000E4   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   FE           MOV     R6,A
    640              osal_mem_free( buf );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   AA..         MOV     R2,?V0 + 2
   \   0000EE   AB..         MOV     R3,?V0 + 3
   \   0000F0   12....       LCALL   ??osal_mem_free?relay
   \   0000F3   8002         SJMP    ??zcl_SendWriteRsp_5
    641            }
    642            else
    643              status = ZMemError;
   \                     ??zcl_SendWriteRsp_1:
   \   0000F5   7E10         MOV     R6,#0x10
    644          
    645            return ( status );
   \                     ??zcl_SendWriteRsp_5:
   \   0000F7   02....       LJMP    ?Subroutine95 & 0xFFFF
    646          }
    647          #endif // ZCL_WRITE
    648          
    649          #ifdef ZCL_REPORT
    650          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    651                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
    652                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    653          {
    654            uint8 *buf;
    655            uint8 *pBuf;
    656            uint8 dataLen = 0;
    657            zclCfgReportRec_t *reportRec;
    658            uint8 reportChangeLen; // length of Reportable Change field
    659            uint8 i;
    660            ZStatus_t status;
    661            
    662            // Find out the data length
    663            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    664            {
    665              reportRec = &(cfgReportCmd->attrList[i]);
    666              
    667              dataLen += 1 + 2; // Direction + Attribute ID
    668              reportChangeLen = 0;
    669              
    670              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    671              {
    672                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    673                
    674                // Find out the size of the Reportable Change field (for Analog data types)
    675                if ( zclAnalogDataType( reportRec->dataType ) )
    676                {
    677                  reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    678                  dataLen += reportChangeLen;
    679                }
    680              }
    681              else
    682              {
    683                dataLen += 2; // Timeout Period
    684              }
    685            }
    686            
    687            buf = osal_mem_alloc( dataLen );
    688            if ( buf != NULL )
    689            {
    690              // Load the buffer - serially
    691              pBuf = buf;
    692              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    693              {
    694                reportRec = &(cfgReportCmd->attrList[i]);
    695                
    696                *pBuf++ = reportRec->direction;
    697                *pBuf++ = LO_UINT16( reportRec->attrID );
    698                *pBuf++ = HI_UINT16( reportRec->attrID );
    699                
    700                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    701                {
    702                  *pBuf++ = reportRec->dataType;
    703                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
    704                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
    705                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
    706                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
    707          
    708                  if ( zclAnalogDataType( reportRec->dataType ) )
    709                  {
    710                    zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
    711                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    712                    pBuf += reportChangeLen;
    713                  }
    714                }
    715                else
    716                {
    717                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
    718                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
    719                } 
    720              } // for loop
    721              
    722              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE, 
    723                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    724              osal_mem_free( buf );
    725            }
    726            else
    727              status = ZMemError;
    728            
    729            return ( status );
    730          }
    731          
    732          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    733                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
    734                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    735          {
    736            uint8 dataLen;
    737            uint8 *buf;
    738            uint8 *pBuf;
    739            uint8 i;
    740            ZStatus_t status;
    741            
    742            // Atrribute list (Status, Direction and Attribute ID)
    743            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 ); 
    744            
    745            buf = osal_mem_alloc( dataLen );
    746            if ( buf != NULL )
    747            {
    748              // Load the buffer - serially
    749              pBuf = buf; 
    750              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
    751              {
    752                *pBuf++ = cfgReportRspCmd->attrList[i].status;
    753                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
    754                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
    755                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
    756              }
    757              
    758              // If there's only a single status record and its status field is set to 
    759              // SUCCESS then omit the attribute ID field.
    760              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
    761                dataLen = 1;
    762              
    763              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    764                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction, 
    765                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
    766              osal_mem_free( buf );
    767            }
    768            else
    769              status = ZMemError;
    770            
    771            return ( status );
    772          }
    773          
    774          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
    775                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
    776                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    777          {
    778            uint8 dataLen;
    779            uint8 *buf;
    780            uint8 *pBuf;
    781            uint8 i;
    782            ZStatus_t status;
    783           
    784            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
    785            
    786            buf = osal_mem_alloc( dataLen );
    787            if ( buf != NULL )
    788            {
    789              // Load the buffer - serially
    790              pBuf = buf;
    791              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
    792              {
    793                *pBuf++ = readReportCfgCmd->attrList[i].direction;
    794                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
    795                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
    796              }
    797              
    798              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE, 
    799                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    800              osal_mem_free( buf );
    801            }
    802            else
    803              status = ZMemError;
    804            
    805            return ( status );
    806          }
    807          
    808          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    809                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
    810                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    811          {
    812            uint8 *buf;
    813            uint8 *pBuf;
    814            uint8 dataLen = 0;
    815            zclReportCfgRspRec_t *reportRspRec;
    816            uint8 reportChangeLen;
    817            uint8 i;
    818            ZStatus_t status;
    819          
    820            // Find out the data length
    821            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
    822            {
    823              reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    824              
    825              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
    826              
    827              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
    828              {
    829                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
    830                {
    831                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    832                
    833                  if ( zclAnalogDataType( reportRspRec->dataType ) )
    834                  {
    835                    reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
    836                    dataLen += reportChangeLen; // Reportable Change field
    837                  }
    838                }
    839                else
    840                {
    841                  dataLen += 2; // Timeout Period
    842                }
    843              }
    844            }
    845            
    846            buf = osal_mem_alloc( dataLen );
    847            if ( buf != NULL )
    848            {
    849              // Load the buffer - serially
    850              pBuf = buf;
    851          
    852              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
    853              {
    854                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    855          
    856                *pBuf++ = reportRspRec->status;
    857                *pBuf++ = reportRspRec->direction;
    858                *pBuf++ = LO_UINT16( reportRspRec->attrID );
    859                *pBuf++ = HI_UINT16( reportRspRec->attrID );
    860               
    861                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
    862                {
    863                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
    864                  {
    865                    *pBuf++ = reportRspRec->dataType;
    866                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
    867                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
    868                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
    869                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
    870          
    871                    if ( zclAnalogDataType( reportRspRec->dataType ) )
    872                    {
    873                      zclSerializeData( reportRspRec->dataType, 
    874                                        reportRspRec->reportableChange, pBuf );
    875                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
    876                      pBuf += reportChangeLen;
    877                    }
    878                  }
    879                  else
    880                  {
    881                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
    882                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
    883                  }
    884                }
    885              }
    886             
    887              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    888                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
    889                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    890              osal_mem_free( buf );
    891            }
    892            else
    893              status = ZMemError;
    894            
    895            return ( status );
    896          }
    897          
    898          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    899                                       uint16 clusterID, zclReportCmd_t *reportCmd,
    900                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    901          {
    902            zclReport_t *reportRec;
    903            uint8 attrDataLen;
    904            uint8 dataLen = 0;
    905            uint8 *buf;
    906            uint8 *pBuf;
    907            uint8 i;
    908            ZStatus_t status;
    909            
    910            // calculate the size of the command
    911            for ( i = 0; i < reportCmd->numAttr; i++ )
    912            {
    913              reportRec = &(reportCmd->attrList[i]);
    914              
    915              dataLen += 2 + 1; // Attribute ID + data type
    916          
    917              attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
    918              dataLen += attrDataLen; // Attribute Data
    919            }
    920            
    921            buf = osal_mem_alloc( dataLen );
    922            if ( buf != NULL )
    923            {
    924              // Load the buffer - serially
    925              pBuf = buf;
    926              for ( i = 0; i < reportCmd->numAttr; i++ )
    927              {
    928                reportRec = &(reportCmd->attrList[i]);
    929                
    930                *pBuf++ = LO_UINT16( reportRec->attrID );
    931                *pBuf++ = HI_UINT16( reportRec->attrID );
    932                *pBuf++ = reportRec->dataType;
    933          
    934                zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
    935                attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
    936                pBuf += attrDataLen; // move pass attribute data
    937              }
    938           
    939              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE, 
    940                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    941              osal_mem_free( buf );
    942            }
    943            else
    944              status = ZMemError;
    945            
    946            return ( status );
    947          }
    948          #endif // ZCL_REPORT
    949          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
    951                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
    952                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
    953          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 3,A
   \   00002F   7416         MOV     A,#0x16
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
    954            uint8 buf[2]; // Command ID and Status;
    955          
    956            // Load the buffer - serially
    957            buf[0] = defaultRspCmd->commandID;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   12....       LCALL   ?Subroutine14 & 0xFFFF
    958            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_21:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
    959          
    960            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
    961                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) ); 
   \   000050                ; Setup parameters for call to function zcl_SendCommand
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   75..02       MOV     ?V0 + 0,#0x2
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   E5..         MOV     A,?V0 + 5
   \   00006E   F5..         MOV     ?V0 + 0,A
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   EF           MOV     A,R7
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV     ?V0 + 0,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..0B       MOV     ?V0 + 0,#0xb
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   02....       LJMP    ?Subroutine85 & 0xFFFF
    962          }
    963          
    964          #ifdef ZCL_DISCOVER
    965          ZStatus_t zcl_SendDiscoverCmd( uint8 srcEP, afAddrType_t *dstAddr,
    966                                      uint16 clusterID, zclDiscoverCmd_t *discoverCmd,
    967                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    968          {
    969            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
    970            uint8 *buf;
    971            uint8 *pBuf;
    972            ZStatus_t status;
    973            
    974            buf = osal_mem_alloc( dataLen );
    975            if ( buf != NULL )
    976            {
    977              // Load the buffer - serially
    978              pBuf = buf;
    979              *pBuf++ = LO_UINT16(discoverCmd->startAttr);
    980              *pBuf++ = HI_UINT16(discoverCmd->startAttr);
    981              *pBuf++ = discoverCmd->maxAttrIDs;
    982              
    983              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER, FALSE, 
    984                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    985              osal_mem_free( buf );
    986            }
    987            else
    988              status = ZMemError;
    989            
    990            return ( status );
    991          }
    992          
    993          ZStatus_t zcl_SendDiscoverRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    994                                uint16 clusterID, zclDiscoverRspCmd_t *discoverRspCmd,
    995                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    996          {
    997            uint8 dataLen = 1; // Discovery complete
    998            uint8 *buf;
    999            uint8 *pBuf;
   1000            uint8 i;
   1001            ZStatus_t status;
   1002            
   1003            // calculate the size of the command
   1004            dataLen += discoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   1005            
   1006            buf = osal_mem_alloc( dataLen );
   1007            if ( buf != NULL )
   1008            {
   1009              // Load the buffer - serially
   1010              pBuf = buf;
   1011              *pBuf++ = discoverRspCmd->discComplete;    
   1012              for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1013              {
   1014                *pBuf++ = LO_UINT16(discoverRspCmd->attrList[i].attrID);
   1015                *pBuf++ = HI_UINT16(discoverRspCmd->attrList[i].attrID);
   1016                *pBuf++ = discoverRspCmd->attrList[i].dataType;
   1017              }
   1018              
   1019              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_RSP, FALSE,
   1020                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1021              osal_mem_free( buf );
   1022            }
   1023            else
   1024              status = ZMemError;
   1025            
   1026            return ( status );
   1027          }
   1028          #endif // ZCL_DISCOVER
   1029          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1030          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zclProcessMessageMSG:
   1031          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1032          #if defined(Coor_receiver) // The coordinator receive data
   1033            byte recv_data[30];  
   1034          #endif
   1035            byte receive[20]; 
                        ^
Warning[Pe550]: variable "receive" was set but never used
   1036            uint16 len;
   1037            endPointDesc_t *epDesc;
   1038            zclIncoming_t inMsg;
   1039            zclLibPlugin_t *pInPlugin;
   1040            zclDefaultRspCmd_t defautlRspCmd;
   1041            uint8 options;
   1042            uint8 securityEnable;
   1043            uint8 interPanMsg;
   1044            ZStatus_t status = ZFailure;
   1045          
   1046            if ( pkt->cmd.DataLength == 0 ) return;   // Error, ignore the message
   \   000000   02....       LJMP    ?BRET
   1047          
   1048          #if defined(Coor_receiver)
   1049            if (pkt->cmd.DataLength > 0)
   1050            {
   1051              for(len = 0; len < pkt->cmd.DataLength; len++) // Send the recv_data to UART
   1052              {
   1053                  recv_data[len] = pkt->cmd.Data[len+3]; // the cmd.Data[0~2] is cluster ID.
   1054              }
   1055              
   1056              #define HI_UINT16(a) (((a) >> 8) & 0xFF)
   1057              #define LO_UINT16(a) ((a) & 0xFF)
   1058              
   1059              char entry[4];
   1060              uint8 hi = HI_UINT16( pkt->srcAddr.addr.shortAddr );
   1061              uint8 lo = LO_UINT16( pkt->srcAddr.addr.shortAddr );
   1062          
   1063              entry[0] = hi/16 + 48;  /* Little Endian for the radio RAM */
   1064              entry[1] = hi%16 + 48;
   1065              entry[2] = lo/16 + 48;
   1066              entry[3] = lo%16 + 48;
   1067              for (int k=0;k<4;k++)
   1068              {
   1069                if(entry[k]>57)
   1070                  entry[k]+=7;
   1071              }
   1072          
   1073              // search 0-9
   1074              for(int search_id=0; search_id<9; search_id++)
   1075              {
   1076                //strcmp entry, if they arenot equeal
   1077                if(strncmp(entry,global_entry[search_id], 4) == 0)
   1078                {
   1079                  strcpy(global_recv_data[search_id], recv_data);
   1080                  global_data_length[search_id] = pkt->cmd.DataLength-2;
   1081                  global_flag[search_id]=1;
   1082                  break;
   1083                }
   1084                
   1085                if(search_id==8)
   1086                {
   1087                  strcpy(global_entry[stack], entry);
   1088                  strcpy(global_recv_data[stack], recv_data);
   1089                  global_data_length[stack] = pkt->cmd.DataLength-2;
   1090                  global_flag[stack]=1;
   1091                  stack++;
   1092                }
   1093              }
   1094            }
   1095          #endif
   1096          
   1097          // The device receive the uart command with RF
   1098          #if defined(End_Device) || defined(Router_Device)
   1099            if(pkt->cmd.DataLength > 0)
   1100            {
   1101              for(len = 0; len < pkt->cmd.DataLength; len++)
   1102              {
   1103                receive[len] = pkt->cmd.Data[len+3];
   1104              }
   1105              // Write receive coordinator command to UART, chrischris
   1106              // HalUARTWrite(MT_UART_DEFAULT_PORT, receive, pkt->cmd.DataLength-2);
   1107              // a - k 97=>107
   1108              // This part is addressing the level of the pwn(M160),
   1109              // and there are 11 levels which is from 97(a) to 107
   1110              #if defined(M160)
   1111                if((int)receive[0] >= 97 && (int)receive[0] <= 107 )
   1112                {
   1113                  int var = (int)receive[0];
   1114                  var = var + 3 - 100;
   1115                  duty_M160 = var * 10;
   1116                  M160_On(duty_M160);
   1117                }
   1118              #endif  
   1119              return ;
   1120            }
   1121          #endif  
   1122            
   1123            // Initialize
   1124            inMsg.msg = pkt;
   1125            inMsg.attrCmd = NULL;
   1126            inMsg.pData = NULL;
   1127            inMsg.pDataLen = 0;
   1128          
   1129            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   1130            inMsg.pDataLen = pkt->cmd.DataLength;
   1131            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   1132          
   1133            // Find the wanted endpoint
   1134            epDesc = afFindEndPointDesc( pkt->endPoint );
   1135            if ( epDesc == NULL )
   1136              return;   // Error, ignore the message
   1137          
   1138            if ( pkt->clusterId == ZCL_INVALID_CLUSTER_ID )
   1139              return;   // Error, ignore the message
   1140            
   1141            if ((epDesc->simpleDesc == NULL) ||
   1142                (zcl_DeviceOperational(pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type, 
   1143                  inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId) == FALSE))
   1144            {
   1145              return; // Error, ignore the message
   1146            }
   1147          
   1148          #if defined ( INTER_PAN )
   1149            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   1150            {
   1151              // No foundation command is supported thru Inter-PAN communication
   1152              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   1153                return;
   1154          
   1155              interPanMsg = TRUE; 
   1156              options = AF_TX_OPTIONS_NONE;
   1157            }
   1158            else
   1159          #endif
   1160            {
   1161              interPanMsg = FALSE;
   1162              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   1163            }
   1164            
   1165            // Local and remote Security options must match except for Default Response command
   1166            if ( !zcl_DefaultRspCmd( inMsg.hdr ) )
   1167            {
   1168              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   1169              if ( pkt->SecurityUse != securityEnable )
   1170              {
   1171                if ( UNICAST_MSG( inMsg.msg ) )
   1172                {
   1173                  // Send a Default Response command back with no Application Link Key security
   1174                  if ( securityEnable )
   1175                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   1176                  
   1177                  defautlRspCmd.statusCode = status;
   1178                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   1179                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1180                                         inMsg.msg->clusterId, &defautlRspCmd, 
   1181                                         ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1182                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   1183                  if ( securityEnable )
   1184                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );       
   1185                }
   1186                return;   // Error, ignore the message
   1187              }
   1188            }
   1189            
   1190            // Is this a foundation type message
   1191            if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   1192            { 
   1193              if ( inMsg.hdr.fc.manuSpecific )
   1194              {
   1195                // We don't support any manufacturer specific command
   1196                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   1197              }
   1198              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) && 
   1199                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   1200              {
   1201                zclParseCmd_t parseCmd;
   1202                
   1203                parseCmd.endpoint = pkt->endPoint;
   1204                parseCmd.dataLen = inMsg.pDataLen;
   1205                parseCmd.pData = inMsg.pData;
   1206                
   1207                // Parse the command, remember that the return value is a pointer to allocated memory
   1208                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   1209                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   1210                { 
   1211                  // Process the command
   1212                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   1213                  {
   1214                    // Couldn't find attribute in the table.
   1215                  }
   1216                }
   1217                 
   1218                // Free the buffer
   1219                if ( inMsg.attrCmd )
   1220                  osal_mem_free( inMsg.attrCmd );
   1221                
   1222                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   1223                  return; // We're done
   1224                
   1225                status = ZSuccess;
   1226              }
   1227              else
   1228              {
   1229                // Unsupported message
   1230                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   1231              }
   1232            }
   1233            else  // Not a foundation type message, so it must be specific to the cluster ID.
   1234            {
   1235              if (epDesc->simpleDesc == NULL)
   1236              {
   1237                pInPlugin = NULL;
   1238              }
   1239              else
   1240              {
   1241                // Find the appropriate plugin
   1242                pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   1243              }
   1244              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   1245              { 
   1246                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   1247                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   1248                  return; // We're done      
   1249              }
   1250              
   1251              if ( status == ZFailure )
   1252              {
   1253                // Unsupported message
   1254                if ( inMsg.hdr.fc.manuSpecific )
   1255                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   1256                else
   1257                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   1258              }
   1259            }
   1260            
   1261            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   1262            {
   1263              // Send a Default Response command back
   1264              defautlRspCmd.statusCode = status;
   1265              defautlRspCmd.commandID = inMsg.hdr.commandID;
   1266              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1267                                     inMsg.msg->clusterId, &defautlRspCmd, 
   1268                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1269                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   1270            }
   1271          }
   1272          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1273          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   1274          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1275            // Clear the header
   1276            osal_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV     R4,#0x6
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??osal_memset?relay
   1277          
   1278            // Parse the Frame Control
   1279            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   54FC         ANL     A,#0xfc
   \   00001F   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7403         MOV     A,#0x3
   \   000026   5A           ANL     A,R2
   \   000027   48           ORL     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1280            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_209:
   \   000032   74FB         MOV     A,#-0x5
   \   000034   58           ANL     A,R0
   \   000035   FA           MOV     R2,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00003D   E4           CLR     A
   \   00003E   92E0         MOV     0xE0 /* A   */.0,C
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   75..00       MOV     ?V0 + 3,#0x0
   \   000045   7402         MOV     A,#0x2
   \   000047   78..         MOV     R0,#?V0 + 2
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   7404         MOV     A,#0x4
   \   00004E   55..         ANL     A,?V0 + 2
   \   000050   4A           ORL     A,R2
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   1281            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_17:
   \   00005A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00005C   85..82       MOV     DPL,?V0 + 0
   \   00005F   85..83       MOV     DPH,?V0 + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5004         JNC     ??zclParseHdr_0
   1282              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000065   4408         ORL     A,#0x8
   \   000067   8002         SJMP    ??zclParseHdr_1
   1283            else
   1284              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_0:
   \   000069   54F7         ANL     A,#0xf7
   \                     ??zclParseHdr_1:
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F0           MOVX    @DPTR,A
   1285            
   1286            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \   00006F   85..82       MOV     DPL,?V0 + 0
   \   000072   85..83       MOV     DPH,?V0 + 1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   54EF         ANL     A,#0xef
   \   000078   FA           MOV     R2,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FB           MOV     R3,A
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   A2E4         MOV     C,0xE0 /* A   */.4
   \   000083   E4           CLR     A
   \   000084   92E0         MOV     0xE0 /* A   */.0,C
   \   000086   F5..         MOV     ?V0 + 2,A
   \   000088   7404         MOV     A,#0x4
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?S_SHL
   \   00008F   7410         MOV     A,#0x10
   \   000091   55..         ANL     A,?V0 + 2
   \   000093   4A           ORL     A,R2
   \   000094   F8           MOV     R0,A
   \   000095   EB           MOV     A,R3
   \   000096   F9           MOV     R1,A
   \   000097   85..82       MOV     DPL,?V0 + 0
   \   00009A   85..83       MOV     DPH,?V0 + 1
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1287            pData++;  // move past the frame control field
   1288          
   1289            // parse the manfacturer code
   1290            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_162:
   \   0000A4   E8           MOV     A,R0
   \   0000A5   5404         ANL     A,#0x4
   \   0000A7   6014         JZ      ??CrossCallReturnLabel_10
   1291            {
   1292              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FA           MOV     R2,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   EA           MOV     A,R2
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E9           MOV     A,R1
   \   0000BA   12....       LCALL   ?Subroutine9 & 0xFFFF
   1293              pData += 2;
   1294            }
   1295          
   1296            // parse the Transaction Sequence Number
   1297            hdr->transSeqNum = *pData++;
   \                     ??CrossCallReturnLabel_10:
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   85..82       MOV     DPL,?V0 + 0
   \   0000C5   85..83       MOV     DPH,?V0 + 1
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ?Subroutine5 & 0xFFFF
   1298          
   1299            // parse the Cluster's command ID
   1300            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_8:
   \   0000CE   85..82       MOV     DPL,?V0 + 0
   \   0000D1   85..83       MOV     DPH,?V0 + 1
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1301          
   1302            // Should point to the frame payload
   1303            return ( pData );
   \                     ??CrossCallReturnLabel_168:
   \   0000DC   AA82         MOV     R2,DPL
   \   0000DE   AB83         MOV     R3,DPH
   \   0000E0                REQUIRE ?Subroutine84
   \   0000E0                ; // Fall through to label ?Subroutine84
   1304          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   02....       LJMP    ?Subroutine89 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   02....       LJMP    ?Subroutine92 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ?Subroutine92 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1305          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1306          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   1307          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1308            // Build the Frame Control byte
   1309            *pData = hdr->fc.type;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   5403         ANL     A,#0x3
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1310            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_144:
   \   000013   5404         ANL     A,#0x4
   \   000015   12....       LCALL   ?Subroutine16 & 0xFFFF
   1311            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_142:
   \   000018   5408         ANL     A,#0x8
   \   00001A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1312            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_143:
   \   00001D   5410         ANL     A,#0x10
   \   00001F   FE           MOV     R6,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   4E           ORL     A,R6
   \   000026   12....       LCALL   ?Subroutine8 & 0xFFFF
   1313            pData++;  // move past the frame control field
   1314          
   1315            // Add the manfacturer code
   1316            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_180:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5404         ANL     A,#0x4
   \   00002C   6017         JZ      ??CrossCallReturnLabel_56
   1317            {
   1318              *pData++ = LO_UINT16( hdr->manuCode );
   \   00002E   EA           MOV     A,R2
   \   00002F   2402         ADD     A,#0x2
   \   000031   F8           MOV     R0,A
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   F9           MOV     R1,A
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   12....       LCALL   ?Subroutine43 & 0xFFFF
   1319              *pData++ = HI_UINT16( hdr->manuCode );
   \                     ??CrossCallReturnLabel_55:
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?Subroutine43 & 0xFFFF
   1320            }
   1321          
   1322            // Add the Transaction Sequence Number
   1323            *pData++ = hdr->transSeqNum;
   \                     ??CrossCallReturnLabel_56:
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   8C82         MOV     DPL,R4
   \   000050   8D83         MOV     DPH,R5
   \   000052   12....       LCALL   ?Subroutine8 & 0xFFFF
   1324            
   1325            // Add the Cluster's command ID
   1326            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_181:
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   1327          
   1328            // Should point to the frame payload
   1329            return ( pData );
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
   1330          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0C           INC     R4
   \   000008   AD83         MOV     R5,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   FE           MOV     R6,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   E0           MOVX    A,@DPTR
   \   000006   4E           ORL     A,R6
   \   000007                REQUIRE ??Subroutine104_0
   \   000007                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AC82         MOV     R4,DPL
   \   000004   AD83         MOV     R5,DPH
   \   000006                REQUIRE ?Subroutine91
   \   000006                ; // Fall through to label ?Subroutine91

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   22           RET
   1331          
   1332          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   1333          {
   1334            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   1335          
   1336            // Add the manfacturer code
   1337            if ( hdr->fc.manuSpecific )
   1338              needed += 2;
   1339          
   1340            return ( needed );
   1341          }
   1342          
   1343          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   1344          {
   1345            zclLibPlugin_t *pLoop;
   1346            
   1347            (void)profileID;  // Intentionally unreferenced parameter
   1348          
   1349            if ( clusterID != ZCL_INVALID_CLUSTER_ID )
   1350            {
   1351              pLoop = plugins;
   1352              while ( pLoop != NULL )
   1353              {
   1354                if ( clusterID >= pLoop->startClusterID && clusterID <= pLoop->endClusterID )
   1355                  return ( pLoop );
   1356                pLoop = pLoop->next;
   1357              }
   1358            }
   1359            return ( (zclLibPlugin_t *)NULL );
   1360          }
   1361          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1362          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   1363          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine27 & 0xFFFF
   1364            uint8 x;
   1365            zclAttrRecsList *pLoop;
   1366          
   1367            pLoop = attrList;
   \                     ??CrossCallReturnLabel_32:
   \   000017   90....       MOV     DPTR,#attrList
   \   00001A   8004         SJMP    ??zclFindAttrRec_0
   1368          
   1369            while ( pLoop != NULL )
   1370            {
   1371              if ( pLoop->endpoint == endpoint )
   1372              {
   1373                for ( x = 0; x < pLoop->numAttributes; x++ )
   1374                {
   1375                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId == attrId )
   1376                  {
   1377                    *pAttr = pLoop->attrs[x];
   1378                    return ( TRUE ); // EMBEDDED RETURN
   1379                  }
   1380                }
   1381              }
   1382              pLoop = pLoop->next;
   \                     ??zclFindAttrRec_1:
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \                     ??zclFindAttrRec_0:
   \   000020   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000023   7001         JNZ     ??zclFindAttrRec_2
   \   000025   EB           MOV     A,R3
   \                     ??zclFindAttrRec_2:
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??zclFindAttrRec_3 & 0xFFFF
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   65..         XRL     A,?V0 + 2
   \   000034   70E6         JNZ     ??zclFindAttrRec_1
   \   000036   75..00       MOV     ?V0 + 3,#0x0
   \   000039   EA           MOV     A,R2
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V0 + 4,R0
   \   000043   89..         MOV     ?V0 + 5,R1
   \   000045   8002         SJMP    ??zclFindAttrRec_4
   \                     ??zclFindAttrRec_5:
   \   000047   05..         INC     ?V0 + 3
   \                     ??zclFindAttrRec_4:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   C3           CLR     C
   \   000055   98           SUBB    A,R0
   \   000056   50C4         JNC     ??zclFindAttrRec_1
   \   000058   85....       MOV     ?V0 + 8,?V0 + 3
   \   00005B   75..00       MOV     ?V0 + 9,#0x0
   \   00005E   7403         MOV     A,#0x3
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?S_SHL
   \   000065   85....       MOV     ?V0 + 6,?V0 + 8
   \   000068   85....       MOV     ?V0 + 7,?V0 + 9
   \   00006B   85..82       MOV     DPL,?V0 + 4
   \   00006E   85..83       MOV     DPH,?V0 + 5
   \   000071   E0           MOVX    A,@DPTR
   \   000072   25..         ADD     A,?V0 + 6
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   35..         ADDC    A,?V0 + 7
   \   000079   F9           MOV     R1,A
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   E4           CLR     A
   \   00007F   93           MOVC    A,@A+DPTR
   \   000080   F8           MOV     R0,A
   \   000081   7401         MOV     A,#0x1
   \   000083   93           MOVC    A,@A+DPTR
   \   000084   F9           MOV     R1,A
   \   000085   EE           MOV     A,R6
   \   000086   68           XRL     A,R0
   \   000087   7002         JNZ     ??zclFindAttrRec_6
   \   000089   EF           MOV     A,R7
   \   00008A   69           XRL     A,R1
   \                     ??zclFindAttrRec_6:
   \   00008B   70BA         JNZ     ??zclFindAttrRec_5
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E4           CLR     A
   \   000090   93           MOVC    A,@A+DPTR
   \   000091   F8           MOV     R0,A
   \   000092   7401         MOV     A,#0x1
   \   000094   93           MOVC    A,@A+DPTR
   \   000095   F9           MOV     R1,A
   \   000096   E5..         MOV     A,?V0 + 0
   \   000098   68           XRL     A,R0
   \   000099   7003         JNZ     ??zclFindAttrRec_7
   \   00009B   E5..         MOV     A,?V0 + 1
   \   00009D   69           XRL     A,R1
   \                     ??zclFindAttrRec_7:
   \   00009E   70A7         JNZ     ??zclFindAttrRec_5
   \   0000A0   85..82       MOV     DPL,?V0 + 4
   \   0000A3   85..83       MOV     DPH,?V0 + 5
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   25..         ADD     A,?V0 + 6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   35..         ADDC    A,?V0 + 7
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   7408         MOV     A,#0x8
   \   0000B4   12....       LCALL   ?MOVE_LONG8_XDATA_CODE
   \   0000B7   7901         MOV     R1,#0x1
   \   0000B9   8002         SJMP    ??zclFindAttrRec_8
   1383            }
   1384            return ( FALSE );
   \                     ??zclFindAttrRec_3:
   \   0000BB   7900         MOV     R1,#0x0
   \                     ??zclFindAttrRec_8:
   \   0000BD   7F0A         MOV     R7,#0xa
   \   0000BF   02....       LJMP    ?BANKED_LEAVE_XDATA
   1385          }
   1386          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1387          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   1388          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   1389            uint8 x;
   1390            zclClusterOptionList *pLoop;
   1391          
   1392            pLoop = clusterOptionList;
   \   000007   90....       MOV     DPTR,#clusterOptionList
   \   00000A   8004         SJMP    ??zclFindClusterOption_0
   1393          
   1394            while ( pLoop != NULL )
   1395            {
   1396              if ( pLoop->endpoint == endpoint )
   1397              {
   1398                for ( x = 0; x < pLoop->numOptions; x++ )
   1399                {
   1400                  if ( pLoop->options[x].clusterID == clusterID )
   1401                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   1402                }
   1403              }
   1404              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000010   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000013   E8           MOV     A,R0
   \   000014   7001         JNZ     ??zclFindClusterOption_2
   \   000016   E9           MOV     A,R1
   \                     ??zclFindClusterOption_2:
   \   000017   605F         JZ      ??zclFindClusterOption_3
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   65..         XRL     A,?V0 + 0
   \   000022   70E8         JNZ     ??zclFindClusterOption_1
   \   000024   75..00       MOV     ?V0 + 2,#0x0
   \   000027   E8           MOV     A,R0
   \   000028   2404         ADD     A,#0x4
   \   00002A   FC           MOV     R4,A
   \   00002B   E9           MOV     A,R1
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   FD           MOV     R5,A
   \   00002F   EC           MOV     A,R4
   \   000030   FE           MOV     R6,A
   \   000031   ED           MOV     A,R5
   \   000032   FF           MOV     R7,A
   \   000033   8002         SJMP    ??zclFindClusterOption_4
   \                     ??zclFindClusterOption_5:
   \   000035   05..         INC     ?V0 + 2
   \                     ??zclFindClusterOption_4:
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FC           MOV     R4,A
   \   000040   E5..         MOV     A,?V0 + 2
   \   000042   C3           CLR     C
   \   000043   9C           SUBB    A,R4
   \   000044   50C6         JNC     ??zclFindClusterOption_1
   \   000046   E5..         MOV     A,?V0 + 2
   \   000048   75F003       MOV     B,#0x3
   \   00004B   A4           MUL     AB
   \   00004C   FC           MOV     R4,A
   \   00004D   85F0..       MOV     ?V0 + 1,B
   \   000050   AD..         MOV     R5,?V0 + 1
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   E0           MOVX    A,@DPTR
   \   000057   2C           ADD     A,R4
   \   000058   F5..         MOV     ?V0 + 1,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   3D           ADDC    A,R5
   \   00005D   85..82       MOV     DPL,?V0 + 1
   \   000060   F583         MOV     DPH,A
   \   000062   E0           MOVX    A,@DPTR
   \   000063   6A           XRL     A,R2
   \   000064   7003         JNZ     ??zclFindClusterOption_6
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6B           XRL     A,R3
   \                     ??zclFindClusterOption_6:
   \   000069   70CA         JNZ     ??zclFindClusterOption_5
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   2C           ADD     A,R4
   \   000071   FA           MOV     R2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   3D           ADDC    A,R5
   \   000075   FB           MOV     R3,A
   \   000076   8004         SJMP    ??zclFindClusterOption_7
   1405            }
   1406            return ( NULL );
   \                     ??zclFindClusterOption_3:
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \                     ??zclFindClusterOption_7:
   \   00007C                REQUIRE ?Subroutine96
   \   00007C                ; // Fall through to label ?Subroutine96
   1407          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1408          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1409          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   1410          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1411            uint8 option;
   1412            zclOptionRec_t *pOption;
   1413          
   1414             pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL   ??zclFindClusterOption?relay
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   1415            if ( pOption != NULL )
   \   00000C   E582         MOV     A,DPL
   \   00000E   7002         JNZ     ??zclGetClusterOption_0
   \   000010   E583         MOV     A,DPH
   \                     ??zclGetClusterOption_0:
   \   000012   6008         JZ      ??zclGetClusterOption_1
   1416            {
   1417              option = pOption->option;
   1418              if ( !ZG_SECURE_ENABLED )
   1419                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   1420          
   1421              return ( option ); // EMBEDDED RETURN
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   54BF         ANL     A,#0xbf
   \   000019   F9           MOV     R1,A
   \   00001A   8002         SJMP    ??zclGetClusterOption_2
   1422            }
   1423          
   1424            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_1:
   \   00001C   7900         MOV     R1,#0x0
   \                     ??zclGetClusterOption_2:
   \   00001E   80..         SJMP    ?Subroutine93
   1425          }
   1426          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1427          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   1428          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   1429            zclOptionRec_t *pOption;
   1430          
   1431            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL   ??zclFindClusterOption?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
   1432            if ( pOption != NULL )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??zclSetSecurityOption_0
   \   000015   E9           MOV     A,R1
   \                     ??zclSetSecurityOption_0:
   \   000016   6016         JZ      ??zclSetSecurityOption_1
   1433            {
   1434              if ( enable )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   EE           MOV     A,R6
   \   000023   6005         JZ      ??zclSetSecurityOption_2
   1435                pOption->option |= AF_EN_SECURITY;
   \   000025   E0           MOVX    A,@DPTR
   \   000026   D2E6         SETB    0xE0 /* A   */.6
   \   000028   8003         SJMP    ??zclSetSecurityOption_3
   1436              else
   1437                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_2:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C2E6         CLR     0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_3:
   \   00002D   F0           MOVX    @DPTR,A
   1438            }
   1439          }
   \                     ??zclSetSecurityOption_1:
   \   00002E                REQUIRE ?Subroutine93
   \   00002E                ; // Fall through to label ?Subroutine93
   1440          
   1441          #ifdef ZCL_DISCOVER
   1442          
   1443          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID,
   1444                                           uint16 *attrId, zclAttrRec_t *pAttr )
   1445          {
   1446            uint16 x;
   1447            zclAttrRecsList *pLoop;
   1448          
   1449            pLoop = attrList;
   1450          
   1451            while ( pLoop != NULL )
   1452            {
   1453              if ( pLoop->endpoint == endpoint )
   1454              {
   1455                for ( x = 0; x < pLoop->numAttributes; x++ )
   1456                {
   1457                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId >= *attrId )
   1458                  {
   1459                    *pAttr = pLoop->attrs[x];
   1460                    
   1461                    // Update attribute ID
   1462                    *attrId = pAttr->attr.attrId; 
   1463                    return ( TRUE ); // EMBEDDED RETURN
   1464                  }
   1465                }
   1466              }
   1467              pLoop = pLoop->next;
   1468            }
   1469          
   1470            return ( FALSE );
   1471          }
   1472          #endif // ZCL_DISCOVER
   1473          
   1474          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1475          static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   1476          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   1477            uint8 *pStr;
   1478            uint8 len;
   1479          
   1480            switch ( dataType )
   \   00000D   8E..         MOV     ?V0 + 0,R6
   \   00000F   8F..         MOV     ?V0 + 1,R7
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000021   03           DB        3
   \   000022   41           DB        65
   \   000023   42           DB        66
   \   000024   ....         DW        ??zclSerializeData_0
   \   000026   E0           DB        224
   \   000027   E2           DB        226
   \   000028   ....         DW        ??zclSerializeData_1
   \   00002A   E8           DB        232
   \   00002B   E9           DB        233
   \   00002C   ....         DW        ??zclSerializeData_2
   \   00002E   19           DB        25
   \   00002F   08           DB        8
   \   000030   ....         DW        ??zclSerializeData_3
   \   000032   09           DB        9
   \   000033   ....         DW        ??zclSerializeData_2
   \   000035   0A           DB        10
   \   000036   ....         DW        ??zclSerializeData_4
   \   000038   0B           DB        11
   \   000039   ....         DW        ??zclSerializeData_1
   \   00003B   10           DB        16
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   18           DB        24
   \   00003F   ....         DW        ??zclSerializeData_3
   \   000041   19           DB        25
   \   000042   ....         DW        ??zclSerializeData_2
   \   000044   1A           DB        26
   \   000045   ....         DW        ??zclSerializeData_4
   \   000047   1B           DB        27
   \   000048   ....         DW        ??zclSerializeData_1
   \   00004A   20           DB        32
   \   00004B   ....         DW        ??zclSerializeData_3
   \   00004D   21           DB        33
   \   00004E   ....         DW        ??zclSerializeData_2
   \   000050   22           DB        34
   \   000051   ....         DW        ??zclSerializeData_4
   \   000053   23           DB        35
   \   000054   ....         DW        ??zclSerializeData_1
   \   000056   24           DB        36
   \   000057   ....         DW        ??zclSerializeData_5
   \   000059   25           DB        37
   \   00005A   ....         DW        ??zclSerializeData_6
   \   00005C   28           DB        40
   \   00005D   ....         DW        ??zclSerializeData_3
   \   00005F   29           DB        41
   \   000060   ....         DW        ??zclSerializeData_2
   \   000062   2A           DB        42
   \   000063   ....         DW        ??zclSerializeData_4
   \   000065   2B           DB        43
   \   000066   ....         DW        ??zclSerializeData_1
   \   000068   30           DB        48
   \   000069   ....         DW        ??zclSerializeData_3
   \   00006B   31           DB        49
   \   00006C   ....         DW        ??zclSerializeData_2
   \   00006E   38           DB        56
   \   00006F   ....         DW        ??zclSerializeData_2
   \   000071   39           DB        57
   \   000072   ....         DW        ??zclSerializeData_1
   \   000074   EA           DB        234
   \   000075   ....         DW        ??zclSerializeData_1
   \   000077   F0           DB        240
   \   000078   ....         DW        ??zclSerializeData_7
   \   00007A   ....         DW        ??zclSerializeData_8
   1481            {
   1482              case ZCL_DATATYPE_DATA8:
   1483              case ZCL_DATATYPE_BOOLEAN:
   1484              case ZCL_DATATYPE_BITMAP8:
   1485              case ZCL_DATATYPE_INT8:
   1486              case ZCL_DATATYPE_UINT8:
   1487              case ZCL_DATATYPE_ENUM8:
   1488                *buf = *((uint8 *)attrData);
   \                     ??zclSerializeData_3:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \                     ??zclSerializeData_9:
   \   000080   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   02....       LJMP    ??zclSerializeData_8 & 0xFFFF
   1489                 break;
   1490          
   1491              case ZCL_DATATYPE_DATA16:
   1492              case ZCL_DATATYPE_BITMAP16:
   1493              case ZCL_DATATYPE_UINT16:
   1494              case ZCL_DATATYPE_INT16: 
   1495              case ZCL_DATATYPE_ENUM16:
   1496              case ZCL_DATATYPE_SEMI_PREC:
   1497              case ZCL_DATATYPE_CLUSTER_ID:
   1498              case ZCL_DATATYPE_ATTR_ID:
   1499                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_2:
   \   000087   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00008A   12....       LCALL   ?Subroutine15 & 0xFFFF
   1500                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_175:
   \   00008D   A3           INC     DPTR
   \   00008E   80F0         SJMP    ??zclSerializeData_9
   1501                break;
   1502          
   1503              case ZCL_DATATYPE_DATA24:
   1504              case ZCL_DATATYPE_BITMAP24: 
   1505              case ZCL_DATATYPE_UINT24:
   1506              case ZCL_DATATYPE_INT24:
   1507                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_4:
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   12....       LCALL   ?Subroutine15 & 0xFFFF
   1508                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_176:
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   0A           INC     R2
   \   0000B0   AB83         MOV     R3,DPH
   1509                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?L_MOV_X
   \   0000BB   7410         MOV     A,#0x10
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?UL_SHR
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   E5..         MOV     A,?V0 + 0
   \   0000C8   80B9         SJMP    ??CrossCallReturnLabel_182
   1510                break;
   1511                
   1512              case ZCL_DATATYPE_DATA32:
   1513              case ZCL_DATATYPE_BITMAP32:
   1514              case ZCL_DATATYPE_UINT32:
   1515              case ZCL_DATATYPE_INT32:
   1516              case ZCL_DATATYPE_SINGLE_PREC:
   1517              case ZCL_DATATYPE_TOD:
   1518              case ZCL_DATATYPE_DATE:
   1519              case ZCL_DATATYPE_UTC:
   1520              case ZCL_DATATYPE_BAC_OID:
   1521                buf = osal_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_1:
   \   0000CA                ; Setup parameters for call to function osal_buffer_uint32
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D1   12....       LCALL   ??osal_buffer_uint32?relay
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   8043         SJMP    ??zclSerializeData_8
   1522                break;
   1523                
   1524              case ZCL_DATATYPE_UINT40:
   1525                pStr = (uint8*)attrData;
   1526                osal_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_5:
   \   0000DB                ; Setup parameters for call to function osal_memcpy
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E0   7C05         MOV     R4,#0x5
   \   0000E2   8032         SJMP    ??zclSerializeData_10
   1527                break;
   1528                
   1529              case ZCL_DATATYPE_UINT48:
   1530                pStr = (uint8*)attrData;
   1531                osal_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_6:
   \   0000E4                ; Setup parameters for call to function osal_memcpy
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E9   7C06         MOV     R4,#0x6
   \   0000EB   8029         SJMP    ??zclSerializeData_10
   1532                break;
   1533                
   1534              case ZCL_DATATYPE_IEEE_ADDR:
   1535                pStr = (uint8*)attrData;
   1536                osal_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_7:
   \   0000ED                ; Setup parameters for call to function osal_memcpy
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C08         MOV     R4,#0x8
   \   0000F4   8020         SJMP    ??zclSerializeData_10
   1537                break;
   1538                
   1539              case ZCL_DATATYPE_CHAR_STR:
   1540              case ZCL_DATATYPE_OCTET_STR:
   1541                pStr = (uint8*)attrData;
   1542                len = *pStr++;
   \                     ??zclSerializeData_0:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F5..         MOV     ?V0 + 3,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   AE82         MOV     R6,DPL
   \   000100   AF83         MOV     R7,DPH
   1543                *buf++ = len;
   \   000102   8A82         MOV     DPL,R2
   \   000104   8B83         MOV     DPH,R3
   \   000106   F0           MOVX    @DPTR,A
   \   000107   EC           MOV     A,R4
   \   000108   FA           MOV     R2,A
   \   000109   ED           MOV     A,R5
   \   00010A   FB           MOV     R3,A
   1544                osal_memcpy( buf, pStr, len );
   \   00010B                ; Setup parameters for call to function osal_memcpy
   \   00010B   8E..         MOV     ?V0 + 0,R6
   \   00010D   8F..         MOV     ?V0 + 1,R7
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000114   AC..         MOV     R4,?V0 + 3
   \                     ??zclSerializeData_10:
   \   000116   7D00         MOV     R5,#0x0
   1545                break;
   1546                
   1547              case ZCL_DATATYPE_NO_DATA:
   1548              case ZCL_DATATYPE_UNKNOWN:
   1549                // Fall through
   1550          
   1551              default:
   1552                break;
   1553            }
   \   000118   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   1554          }
   \                     ??zclSerializeData_8:
   \   00011E   02....       LJMP    ?Subroutine84 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   FA           MOV     R2,A
   \   000003   ED           MOV     A,R5
   \   000004   FB           MOV     R3,A
   \   000005                REQUIRE ?Subroutine92
   \   000005                ; // Fall through to label ?Subroutine92

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine114_0
   \   000004                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   02....       LJMP    ?Subroutine91 & 0xFFFF
   1555          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
   1556          
   1557          #ifdef ZCL_REPORT
   1558          uint8 zclAnalogDataType( uint8 dataType )
   1559          {
   1560            uint8 analog;
   1561            
   1562            switch ( dataType )
   1563            {
   1564              case ZCL_DATATYPE_UINT8:
   1565              case ZCL_DATATYPE_UINT16:
   1566              case ZCL_DATATYPE_UINT24:
   1567              case ZCL_DATATYPE_UINT32:
   1568              case ZCL_DATATYPE_UINT40:
   1569              case ZCL_DATATYPE_UINT48:
   1570              case ZCL_DATATYPE_INT8:
   1571              case ZCL_DATATYPE_INT16:
   1572              case ZCL_DATATYPE_INT24:
   1573              case ZCL_DATATYPE_INT32:
   1574              case ZCL_DATATYPE_SEMI_PREC:
   1575              case ZCL_DATATYPE_SINGLE_PREC:
   1576              case ZCL_DATATYPE_DOUBLE_PREC:
   1577              case ZCL_DATATYPE_TOD:
   1578              case ZCL_DATATYPE_DATE:
   1579              case ZCL_DATATYPE_UTC:
   1580                analog = TRUE;
   1581                break;
   1582                
   1583              default:
   1584                analog = FALSE;
   1585                break;
   1586            }
   1587            return ( analog );
   1588          }
   1589          
   1590          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf)
   1591          {
   1592            switch ( dataType )
   1593            {
   1594              case ZCL_DATATYPE_UINT8:
   1595              case ZCL_DATATYPE_INT8:
   1596                *pData = *pBuf;
   1597                break;
   1598          
   1599              case ZCL_DATATYPE_UINT16:
   1600              case ZCL_DATATYPE_INT16:
   1601              case ZCL_DATATYPE_SEMI_PREC:
   1602                *((uint16*)pData) = BUILD_UINT16( pBuf[0], pBuf[1] ); 
   1603                break;
   1604           
   1605              case ZCL_DATATYPE_UINT24:
   1606              case ZCL_DATATYPE_INT24:
   1607                *((uint32*)pData) = osal_build_uint32( pBuf, 3 );
   1608                break;
   1609                
   1610              case ZCL_DATATYPE_UINT32:
   1611              case ZCL_DATATYPE_INT32:
   1612              case ZCL_DATATYPE_SINGLE_PREC:
   1613              case ZCL_DATATYPE_TOD:
   1614              case ZCL_DATATYPE_DATE:
   1615              case ZCL_DATATYPE_UTC:
   1616                *((uint32*)pData) = osal_build_uint32( pBuf, 4 );
   1617                break;
   1618                
   1619              case ZCL_DATATYPE_DOUBLE_PREC:
   1620                *pData = 0;
   1621                break;
   1622           
   1623              default:
   1624                break;
   1625            }
   1626          }
   1627          #endif // ZCL_REPORT
   1628          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1629          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   1630          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1631            uint8 len;
   1632            
   1633            switch ( dataType )
   \   000004   E9           MOV     A,R1
   \   000005   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclGetDataTypeLength>_0`:
   \   000008   02           DB        2
   \   000009   E0           DB        224
   \   00000A   E2           DB        226
   \   00000B   ....         DW        ??zclGetDataTypeLength_0
   \   00000D   E8           DB        232
   \   00000E   E9           DB        233
   \   00000F   ....         DW        ??zclGetDataTypeLength_1
   \   000011   1A           DB        26
   \   000012   08           DB        8
   \   000013   ....         DW        ??zclGetDataTypeLength_2
   \   000015   09           DB        9
   \   000016   ....         DW        ??zclGetDataTypeLength_1
   \   000018   0A           DB        10
   \   000019   ....         DW        ??zclGetDataTypeLength_3
   \   00001B   0B           DB        11
   \   00001C   ....         DW        ??zclGetDataTypeLength_0
   \   00001E   10           DB        16
   \   00001F   ....         DW        ??zclGetDataTypeLength_2
   \   000021   18           DB        24
   \   000022   ....         DW        ??zclGetDataTypeLength_2
   \   000024   19           DB        25
   \   000025   ....         DW        ??zclGetDataTypeLength_1
   \   000027   1A           DB        26
   \   000028   ....         DW        ??zclGetDataTypeLength_3
   \   00002A   1B           DB        27
   \   00002B   ....         DW        ??zclGetDataTypeLength_0
   \   00002D   20           DB        32
   \   00002E   ....         DW        ??zclGetDataTypeLength_2
   \   000030   21           DB        33
   \   000031   ....         DW        ??zclGetDataTypeLength_1
   \   000033   22           DB        34
   \   000034   ....         DW        ??zclGetDataTypeLength_3
   \   000036   23           DB        35
   \   000037   ....         DW        ??zclGetDataTypeLength_0
   \   000039   24           DB        36
   \   00003A   ....         DW        ??zclGetDataTypeLength_4
   \   00003C   25           DB        37
   \   00003D   ....         DW        ??zclGetDataTypeLength_5
   \   00003F   28           DB        40
   \   000040   ....         DW        ??zclGetDataTypeLength_2
   \   000042   29           DB        41
   \   000043   ....         DW        ??zclGetDataTypeLength_1
   \   000045   2A           DB        42
   \   000046   ....         DW        ??zclGetDataTypeLength_3
   \   000048   2B           DB        43
   \   000049   ....         DW        ??zclGetDataTypeLength_0
   \   00004B   30           DB        48
   \   00004C   ....         DW        ??zclGetDataTypeLength_2
   \   00004E   31           DB        49
   \   00004F   ....         DW        ??zclGetDataTypeLength_1
   \   000051   38           DB        56
   \   000052   ....         DW        ??zclGetDataTypeLength_1
   \   000054   39           DB        57
   \   000055   ....         DW        ??zclGetDataTypeLength_0
   \   000057   3A           DB        58
   \   000058   ....         DW        ??zclGetDataTypeLength_6
   \   00005A   EA           DB        234
   \   00005B   ....         DW        ??zclGetDataTypeLength_0
   \   00005D   F0           DB        240
   \   00005E   ....         DW        ??zclGetDataTypeLength_6
   \   000060   ....         DW        ??zclGetDataTypeLength_7
   1634            {
   1635              case ZCL_DATATYPE_DATA8:
   1636              case ZCL_DATATYPE_BOOLEAN:
   1637              case ZCL_DATATYPE_BITMAP8:
   1638              case ZCL_DATATYPE_INT8:
   1639              case ZCL_DATATYPE_UINT8:
   1640              case ZCL_DATATYPE_ENUM8:
   1641                len = 1;
   \                     ??zclGetDataTypeLength_2:
   \   000062   7901         MOV     R1,#0x1
   \   000064   801A         SJMP    ??zclGetDataTypeLength_8
   1642                break;
   1643                
   1644              case ZCL_DATATYPE_DATA16:
   1645              case ZCL_DATATYPE_BITMAP16:
   1646              case ZCL_DATATYPE_UINT16:
   1647              case ZCL_DATATYPE_INT16: 
   1648              case ZCL_DATATYPE_ENUM16:
   1649              case ZCL_DATATYPE_SEMI_PREC:
   1650              case ZCL_DATATYPE_CLUSTER_ID:
   1651              case ZCL_DATATYPE_ATTR_ID:
   1652                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000066   7902         MOV     R1,#0x2
   \   000068   8016         SJMP    ??zclGetDataTypeLength_8
   1653                break;
   1654                
   1655              case ZCL_DATATYPE_DATA24:
   1656              case ZCL_DATATYPE_BITMAP24: 
   1657              case ZCL_DATATYPE_UINT24:
   1658              case ZCL_DATATYPE_INT24:
   1659                len = 3;
   \                     ??zclGetDataTypeLength_3:
   \   00006A   7903         MOV     R1,#0x3
   \   00006C   8012         SJMP    ??zclGetDataTypeLength_8
   1660                break;
   1661                
   1662              case ZCL_DATATYPE_DATA32:
   1663              case ZCL_DATATYPE_BITMAP32:
   1664              case ZCL_DATATYPE_UINT32:
   1665              case ZCL_DATATYPE_INT32:
   1666              case ZCL_DATATYPE_SINGLE_PREC:
   1667              case ZCL_DATATYPE_TOD:
   1668              case ZCL_DATATYPE_DATE:
   1669              case ZCL_DATATYPE_UTC:
   1670              case ZCL_DATATYPE_BAC_OID:
   1671                len = 4;
   \                     ??zclGetDataTypeLength_0:
   \   00006E   7904         MOV     R1,#0x4
   \   000070   800E         SJMP    ??zclGetDataTypeLength_8
   1672                break;                       
   1673                          
   1674             case ZCL_DATATYPE_UINT40:
   1675                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   000072   7905         MOV     R1,#0x5
   \   000074   800A         SJMP    ??zclGetDataTypeLength_8
   1676                 break;
   1677                 
   1678             case ZCL_DATATYPE_UINT48:
   1679                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000076   7906         MOV     R1,#0x6
   \   000078   8006         SJMP    ??zclGetDataTypeLength_8
   1680                 break;
   1681                 
   1682             case ZCL_DATATYPE_DOUBLE_PREC:
   1683             case ZCL_DATATYPE_IEEE_ADDR:
   1684               len = 8;
   \                     ??zclGetDataTypeLength_6:
   \   00007A   7908         MOV     R1,#0x8
   \   00007C   8002         SJMP    ??zclGetDataTypeLength_8
   1685               break;
   1686          
   1687              case ZCL_DATATYPE_NO_DATA:
   1688              case ZCL_DATATYPE_UNKNOWN:
   1689                // Fall through
   1690                
   1691              default:
   1692                len = 0;
   \                     ??zclGetDataTypeLength_7:
   \   00007E   7900         MOV     R1,#0x0
   1693                break;
   1694            }  
   1695            return ( len );
   \                     ??zclGetDataTypeLength_8:
   \   000080   02....       LJMP    ?Subroutine83 & 0xFFFF
   1696          }
   1697          
   1698          /*********************************************************************
   1699           * @fn      zclGetAttrDataLength
   1700           * @brief   Return the length of the attribute.
   1701           * @param   dataType - data type
   1702           *          pData - pointer to data
   1703           * @return  returns atrribute lentgh
   1704           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1705          uint8 zclGetAttrDataLength( uint8  dataType, uint8 *pData)
   \                     zclGetAttrDataLength:
   1706          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1707            uint8 dataLen = 0;
   1708            
   1709            if ( dataType  == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \   000004   7442         MOV     A,#0x42
   \   000006   69           XRL     A,R1
   \   000007   6005         JZ      ??zclGetAttrDataLength_0
   \   000009   7441         MOV     A,#0x41
   \   00000B   69           XRL     A,R1
   \   00000C   7009         JNZ     ??zclGetAttrDataLength_1
   1710            {
   1711              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   04           INC     A
   \   000014   F9           MOV     R1,A
   \   000015   8003         SJMP    ??zclGetAttrDataLength_2
   1712            }
   1713            else
   1714            {
   1715              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_1:
   \   000017                ; Setup parameters for call to function zclGetDataTypeLength
   \   000017   12....       LCALL   ??zclGetDataTypeLength?relay
   1716            }
   1717          
   1718            return ( dataLen );
   \                     ??zclGetAttrDataLength_2:
   \   00001A   02....       LJMP    ?Subroutine83 & 0xFFFF
   1719          }
   1720          
   1721          /*********************************************************************
   1722           * @fn      zclReadAttrData
   1723           * @brief   Read the attribute's current value into pAttrData.
   1724           * @param   pAttrData - where to put attribute data
   1725           *          pAttr - pointer to attribute
   1726           * @return Success
   1727           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1728          uint8 zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr )
   \                     zclReadAttrData:
   1729          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1730            uint8 dataLen;
   1731              
   1732            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \   000009   EC           MOV     A,R4
   \   00000A   2406         ADD     A,#0x6
   \   00000C   F8           MOV     R0,A
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015                ; Setup parameters for call to function zclGetAttrDataLength
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   12....       LCALL   ?Subroutine25 & 0xFFFF
   1733            osal_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \                     ??CrossCallReturnLabel_145:
   \   000023                ; Setup parameters for call to function osal_memcpy
   \   000023   85..82       MOV     DPL,?V0 + 0
   \   000026   85..83       MOV     DPH,?V0 + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 1,A
   \   000030   75..00       MOV     ?V0 + 2,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EA           MOV     A,R2
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   1734            return ( ZCL_STATUS_SUCCESS );
   \   000046   7900         MOV     R1,#0x0
   \   000048   02....       LJMP    ?Subroutine96 & 0xFFFF
   1735          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine105_0
   \   000002                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine106_0
   \   000002                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   FA           MOV     R2,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   22           RET
   1736          
   1737          #ifdef ZCL_WRITE
   1738          /*********************************************************************
   1739           * @fn      zclWriteAttrData
   1740           * @brief   Write the received data.
   1741           * @param   pAttr - where to write data to
   1742           *          pWriteRec - data to be written
   1743           * @return  Successful if data was written
   1744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1745          static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   \                     zclWriteAttrData:
   1746          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1747            uint8 len;
   1748          
   1749            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   5058         JNC     ??zclWriteAttrData_0
   1750            {
   1751              if ( zcl_ValidateAttrDataCB && !zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   00001B   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7002         JNZ     ??zclWriteAttrData_1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??zclWriteAttrData_1:
   \   000023   6010         JZ      ??zclWriteAttrData_2
   \   000025                ; Setup parameters for indirect call
   \   000025   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000028   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   E9           MOV     A,R1
   \   00002F   7004         JNZ     ??zclWriteAttrData_2
   1752                return ( ZCL_STATUS_INVALID_VALUE );
   \   000031   7987         MOV     R1,#-0x79
   \   000033   8040         SJMP    ??zclWriteAttrData_3
   1753              
   1754              len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000035   EE           MOV     A,R6
   \   000036   2403         ADD     A,#0x3
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   0E           INC     R6
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   FF           MOV     R7,A
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000046   85..82       MOV     DPL,?V0 + 0
   \   000049   85..83       MOV     DPH,?V0 + 1
   \   00004C   12....       LCALL   ?Subroutine25 & 0xFFFF
   1755              osal_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \                     ??CrossCallReturnLabel_146:
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   EA           MOV     A,R2
   \   00005A   FC           MOV     R4,A
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   1756              return ( ZCL_STATUS_SUCCESS );
   \   00006F   7900         MOV     R1,#0x0
   \   000071   8002         SJMP    ??zclWriteAttrData_3
   1757            }
   1758            return ( ZCL_STATUS_READ_ONLY );
   \                     ??zclWriteAttrData_0:
   \   000073   7988         MOV     R1,#-0x78
   \                     ??zclWriteAttrData_3:
   \   000075   7F07         MOV     R7,#0x7
   \   000077   02....       LJMP    ?BANKED_LEAVE_XDATA
   1759          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   75..00       MOV     ?V0 + 6,#0x0
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   02....       LJMP    ?Subroutine87 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   02....       LJMP    ?Subroutine88 & 0xFFFF
   1760          #endif // ZCL_WRITE
   1761          
   1762          #ifdef ZCL_READ
   1763          /*********************************************************************
   1764           * @fn      zclParseInReadCmd
   1765           * @brief   Parse the "Profile" Read Commands
   1766           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1767           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1768           * @param   pCmd - pointer to incoming data to parse
   1769           * @return  pointer to the parsed command structure
   1770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1771          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   1772          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1773            zclReadCmd_t *readCmd;
   1774            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00000C   E8           MOV     A,R0
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
   1775            
   1776            readCmd = (zclReadCmd_t *)osal_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \   000010   12....       LCALL   ?Subroutine29 & 0xFFFF
   1777            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_36:
   \   000013   7001         JNZ     ??zclParseInReadCmd_0
   \   000015   EB           MOV     A,R3
   \                     ??zclParseInReadCmd_0:
   \   000016   6049         JZ      ??zclParseInReadCmd_1
   1778            {
   1779              uint8 i;
   1780              
   1781              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   C3           CLR     C
   \   000023   13           RRC     A
   \   000024   E8           MOV     A,R0
   \   000025   13           RRC     A
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   F0           MOVX    @DPTR,A
   1782              for ( i = 0; i < readCmd->numAttr; i++ )
   \   00002B   75..00       MOV     ?V0 + 0,#0x0
   \   00002E   8025         SJMP    ??zclParseInReadCmd_2
   1783              {
   1784                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_3:
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   12....       LCALL   ?Subroutine70 & 0xFFFF
   1785                pBuf += 2;
   1786              }
   \                     ??CrossCallReturnLabel_205:
   \   000037   F9           MOV     R1,A
   \   000038   E4           CLR     A
   \   000039   2C           ADD     A,R4
   \   00003A   E9           MOV     A,R1
   \   00003B   FD           MOV     R5,A
   \   00003C   E5..         MOV     A,?V0 + 0
   \   00003E   33           RLC     A
   \   00003F   F8           MOV     R0,A
   \   000040   E4           CLR     A
   \   000041   33           RLC     A
   \   000042   F9           MOV     R1,A
   \   000043   EA           MOV     A,R2
   \   000044   28           ADD     A,R0
   \   000045   F582         MOV     DPL,A
   \   000047   EB           MOV     A,R3
   \   000048   39           ADDC    A,R1
   \   000049   F583         MOV     DPH,A
   \   00004B   A3           INC     DPTR
   \   00004C   EC           MOV     A,R4
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   ED           MOV     A,R5
   \   000050   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000053   05..         INC     ?V0 + 0
   \                     ??zclParseInReadCmd_2:
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FC           MOV     R4,A
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   C3           CLR     C
   \   00005E   9C           SUBB    A,R4
   \   00005F   40CF         JC      ??zclParseInReadCmd_3
   1787            }
   1788            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_1:
   \   000061   02....       LJMP    ?Subroutine84 & 0xFFFF
   1789          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   8582..       MOV     ?V0 + 0,DPL
   \   000008   8583..       MOV     ?V0 + 1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2401         ADD     A,#0x1
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??osal_mem_alloc?relay
   \   000017   EA           MOV     A,R2
   \   000018   22           RET
   1790          
   1791          /*********************************************************************
   1792           * @fn      zclParseInReadRspCmd
   1793           * @brief   Parse the "Profile" Read Response Commands
   1794           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1795           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1796           * @param   pCmd - pointer to incoming data to parse
   1797           * @return  pointer to the parsed command structure
   1798           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E9           MOV     A,R1
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   FC           MOV     R4,A
   \   000004   7D00         MOV     R5,#0x0
   \   000006   AA..         MOV     R2,?V0 + 2
   \   000008   AB..         MOV     R3,?V0 + 3
   \   00000A                REQUIRE ?Subroutine87
   \   00000A                ; // Fall through to label ?Subroutine87

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1799          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   1800          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine34 & 0xFFFF
   1801            zclReadRspCmd_t *readRspCmd;
   1802            zclReadRspStatus_t *statusRec;
   1803            uint8 *pBuf = pCmd->pData;
   1804            uint8 *dataPtr;
   1805            uint8 numAttr = 0;
   1806            uint8 hdrLen;
   1807            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_44:
   \   000008   801B         SJMP    ??zclParseInReadRspCmd_0
   1808            uint8 attrDataLen;
   1809            uint8 dataType;
   1810            uint8 status;
   1811            uint8 i;
   1812            
   1813            // find out the number of attributes and the length of attribute data
   1814            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   1815            {
   1816              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   00000A   12....       LCALL   ?Subroutine57 & 0xFFFF
   1817          
   1818              pBuf += 2; // move pass attribute id
   1819              
   1820              status = *pBuf++;  
   \                     ??CrossCallReturnLabel_110:
   \   00000D   A3           INC     DPTR
   \   00000E   AE82         MOV     R6,DPL
   \   000010   AF83         MOV     R7,DPH
   1821              if ( status == ZCL_STATUS_SUCCESS )
   \   000012   7011         JNZ     ??zclParseInReadRspCmd_0
   1822              {
   1823                dataType = *pBuf++;
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   A3           INC     DPTR
   \   000017   0E           INC     R6
   \   000018   12....       LCALL   ?Subroutine51 & 0xFFFF
   1824          
   1825                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   1826                pBuf += attrDataLen; // move pass attribute data
   1827                
   1828                if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_65:
   \   00001B   5002         JNC     ??zclParseInReadRspCmd_2
   1829                  attrDataLen++;
   \   00001D   05..         INC     ?V0 + 8
   1830                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   00001F   E5..         MOV     A,?V0 + 8
   \   000021   25..         ADD     A,?V0 + 6
   \   000023   F5..         MOV     ?V0 + 6,A
   1831              }
   1832            }
   \                     ??zclParseInReadRspCmd_0:
   \   000025   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000028   40E0         JC      ??zclParseInReadRspCmd_1
   1833           
   1834            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) ); // calculate the length of the response header
   \   00002A   75F006       MOV     B,#0x6
   \   00002D   12....       LCALL   ?Subroutine48 & 0xFFFF
   1835            
   1836            readRspCmd = (zclReadRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   1837            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_61:
   \   000030   7001         JNZ     ??zclParseInReadRspCmd_3
   \   000032   EB           MOV     A,R3
   \                     ??zclParseInReadRspCmd_3:
   \   000033   6049         JZ      ??zclParseInReadRspCmd_4
   1838            {
   1839              pBuf = pCmd->pData;
   \   000035   12....       LCALL   ?Subroutine22 & 0xFFFF
   1840              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   1841                  
   1842              readRspCmd->numAttr = numAttr;
   1843              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_26:
   \   000038   803D         SJMP    ??zclParseInReadRspCmd_5
   1844              {
   1845                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   00003A   E5..         MOV     A,?V0 + 9
   \   00003C   75F006       MOV     B,#0x6
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
   1846                
   1847                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   1848                pBuf += 2;
   1849                
   1850                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_108:
   \   000042   12....       LCALL   ?Subroutine6 & 0xFFFF
   1851                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_163:
   \   000045   702E         JNZ     ??CrossCallReturnLabel_67
   1852                {
   1853                  statusRec->dataType = *pBuf++;
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   85..82       MOV     DPL,?V0 + 10
   \   00004C   85..83       MOV     DPH,?V0 + 11
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000055   0E           INC     R6
   \   000056   AF83         MOV     R7,DPH
   1854          
   1855                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   000058                ; Setup parameters for call to function zclGetAttrDataLength
   \   000058   12....       LCALL   ?Subroutine59 & 0xFFFF
   1856                  osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_120:
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   1857                  statusRec->data = dataPtr;
   \   000064   85..82       MOV     DPL,?V0 + 10
   \   000067   85..83       MOV     DPH,?V0 + 11
   \   00006A   A3           INC     DPTR
   \   00006B   12....       LCALL   ?Subroutine4 & 0xFFFF
   1858                  
   1859                  pBuf += attrDataLen; // move pass attribute data
   1860                 
   1861                  if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_6:
   \   00006E   5002         JNC     ??zclParseInReadRspCmd_7
   1862                    attrDataLen++;
   \   000070   05..         INC     ?V0 + 8
   1863                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   000072   12....       LCALL   ?Subroutine52 & 0xFFFF
   1864                }
   1865              }
   \                     ??CrossCallReturnLabel_67:
   \   000075   05..         INC     ?V0 + 9
   \                     ??zclParseInReadRspCmd_5:
   \   000077   E5..         MOV     A,?V0 + 9
   \   000079   C3           CLR     C
   \   00007A   95..         SUBB    A,?V0 + 7
   \   00007C   40BC         JC      ??zclParseInReadRspCmd_6
   1866            }
   1867            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   00007E                REQUIRE ?Subroutine97
   \   00007E                ; // Fall through to label ?Subroutine97
   1868          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   7F0C         MOV     R7,#0xc
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine109_0
   \   000007                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?V0 + 2
   \   000008   85..83       MOV     DPH,?V0 + 3
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   28           ADD     A,R0
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   39           ADDC    A,R1
   \   000011   F9           MOV     R1,A
   \   000012   C3           CLR     C
   \   000013   EE           MOV     A,R6
   \   000014   98           SUBB    A,R0
   \   000015   EF           MOV     A,R7
   \   000016   99           SUBB    A,R1
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?V0 + 10
   \   000003   85..83       MOV     DPH,?V0 + 11
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine110_0
   \   000008                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000007   E9           MOV     A,R1
   \   000008   F5..         MOV     ?V0 + 8,A
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   8E..         MOV     ?V0 + 4,R6
   \   00000C   8F..         MOV     ?V0 + 5,R7
   \   00000E                REQUIRE ?Subroutine88
   \   00000E                ; // Fall through to label ?Subroutine88

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   05..         INC     ?V0 + 7
   \   000002   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000005                REQUIRE ?Subroutine86
   \   000005                ; // Fall through to label ?Subroutine86

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 8
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   25..         ADD     A,?V0 + 4
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   E5..         MOV     A,?V0 + 3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   AF83         MOV     R7,DPH
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000009   E9           MOV     A,R1
   \   00000A   F5..         MOV     ?V0 + 8,A
   \   00000C   F5..         MOV     ?V0 + 4,A
   \   00000E   EE           MOV     A,R6
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FE           MOV     R6,A
   \   000012   EF           MOV     A,R7
   \   000013   3400         ADDC    A,#0x0
   \   000015   FF           MOV     R7,A
   \   000016   E9           MOV     A,R1
   \   000017   A2E0         MOV     C,0xE0 /* A   */.0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E5..         MOV     A,?V0 + 7
   \   000002   A4           MUL     AB
   \   000003   04           INC     A
   \   000004   FA           MOV     R2,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8582..       MOV     ?V0 + 4,DPL
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   85....       MOV     ?V0 + 0,?V0 + 6
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3400         ADDC    A,#0x0
   \   000015   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   EA           MOV     A,R2
   \   000005   2403         ADD     A,#0x3
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FE           MOV     R6,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
   \   000012   75..00       MOV     ?V0 + 7,#0x0
   \   000015   75..00       MOV     ?V0 + 6,#0x0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   EA           MOV     A,R2
   \   00000C   25..         ADD     A,?V0 + 4
   \   00000E   F5..         MOV     ?V0 + 2,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F5..         MOV     ?V0 + 3,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   E5..         MOV     A,?V0 + 7
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   75..00       MOV     ?V0 + 9,#0x0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   25..         ADD     A,?V0 + 4
   \   00000D   FE           MOV     R6,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FF           MOV     R7,A
   \   000012   E5..         MOV     A,?V0 + 8
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 10,DPL
   \   000007   8583..       MOV     ?V0 + 11,DPH
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   EA           MOV     A,R2
   \   000014   85..82       MOV     DPL,?V0 + 10
   \   000017   85..83       MOV     DPH,?V0 + 11
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   E9           MOV     A,R1
   \   00001D   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000020   02....       LJMP    ?Subroutine86 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 0
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 1
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004                ; Setup parameters for call to function zclGetAttrDataLength
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine121_0
   \   000001                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET
   1869          #endif // ZCL_READ
   1870          
   1871          #ifdef ZCL_WRITE
   1872          /*********************************************************************
   1873           * @fn      zclParseInWriteCmd
   1874           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   1875           *          Response Commands
   1876           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1877           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1878           * @param   pCmd - pointer to incoming data to parse
   1879           * @return  pointer to the parsed command structure
   1880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1881          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   1882          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine34 & 0xFFFF
   1883            zclWriteCmd_t *writeCmd;
   1884            zclWriteRec_t *statusRec;
   1885            uint8 *pBuf = pCmd->pData;
   1886            uint8 attrDataLen;
   1887            uint8 *dataPtr;
   1888            uint8 numAttr = 0;
   1889            uint8 hdrLen;
   1890            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_45:
   \   000008   8014         SJMP    ??zclParseInWriteCmd_0
   1891            uint8 dataType;
   1892            uint8 i;
   1893          
   1894            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   1895            {
   1896              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   00000A   12....       LCALL   ?Subroutine57 & 0xFFFF
   1897          
   1898              pBuf += 2; // move pass attribute id
   1899          
   1900              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_111:
   \   00000D   F9           MOV     R1,A
   \   00000E   A3           INC     DPTR
   \   00000F   AE82         MOV     R6,DPL
   \   000011   12....       LCALL   ?Subroutine51 & 0xFFFF
   1901          
   1902              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   1903              pBuf += attrDataLen; // move pass attribute data
   1904              
   1905              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_66:
   \   000014   5002         JNC     ??zclParseInWriteCmd_2
   1906                attrDataLen++;
   \   000016   05..         INC     ?V0 + 8
   1907              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   000018   E5..         MOV     A,?V0 + 8
   \   00001A   25..         ADD     A,?V0 + 6
   \   00001C   F5..         MOV     ?V0 + 6,A
   1908            }
   \                     ??zclParseInWriteCmd_0:
   \   00001E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000021   40E7         JC      ??zclParseInWriteCmd_1
   1909            
   1910            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) ); // calculate the length of the response header
   \   000023   75F005       MOV     B,#0x5
   \   000026   12....       LCALL   ?Subroutine48 & 0xFFFF
   1911            
   1912            writeCmd = (zclWriteCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   1913            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_62:
   \   000029   7001         JNZ     ??zclParseInWriteCmd_3
   \   00002B   EB           MOV     A,R3
   \                     ??zclParseInWriteCmd_3:
   \   00002C   6036         JZ      ??zclParseInWriteCmd_4
   1914            {
   1915              pBuf = pCmd->pData;
   \   00002E   12....       LCALL   ?Subroutine22 & 0xFFFF
   1916              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   1917          
   1918              writeCmd->numAttr = numAttr;
   1919              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_27:
   \   000031   802A         SJMP    ??zclParseInWriteCmd_5
   1920              {
   1921                statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   000033   E5..         MOV     A,?V0 + 9
   \   000035   75F005       MOV     B,#0x5
   \   000038   12....       LCALL   ?Subroutine3 & 0xFFFF
   1922                
   1923                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   1924                pBuf += 2;
   1925                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_109:
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ?Subroutine6 & 0xFFFF
   1926          
   1927                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_164:
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   12....       LCALL   ?Subroutine59 & 0xFFFF
   1928                osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_121:
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000045   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1929                statusRec->attrData = dataPtr;
   \   00004B   85..82       MOV     DPL,?V0 + 10
   \   00004E   85..83       MOV     DPH,?V0 + 11
   \   000051   12....       LCALL   ?Subroutine4 & 0xFFFF
   1930                
   1931                pBuf += attrDataLen; // move pass attribute data
   1932          
   1933                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_7:
   \   000054   5002         JNC     ??zclParseInWriteCmd_7
   1934                  attrDataLen++;
   \   000056   05..         INC     ?V0 + 8
   1935                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   000058   12....       LCALL   ?Subroutine52 & 0xFFFF
   1936              }
   \                     ??CrossCallReturnLabel_68:
   \   00005B   05..         INC     ?V0 + 9
   \                     ??zclParseInWriteCmd_5:
   \   00005D   E5..         MOV     A,?V0 + 9
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V0 + 7
   \   000062   40CF         JC      ??zclParseInWriteCmd_6
   1937            }
   1938            
   1939            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   000064   02....       LJMP    ?Subroutine97 & 0xFFFF
   1940          }
   1941          
   1942          /*********************************************************************
   1943           * @fn      zclParseInWriteRspCmd
   1944           * @brief   Parse the "Profile" Write Response Commands
   1945           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1946           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1947           * @param   pCmd - pointer to incoming data to parse
   1948           * @return  pointer to the parsed command structure
   1949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1950          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   1951          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1952            zclWriteRspCmd_t *writeRspCmd;
   1953            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV     A,R2
   \   000006   2403         ADD     A,#0x3
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00000E   12....       LCALL   ?Subroutine35 & 0xFFFF
   1954            uint8 i = 0;
   \                     ??CrossCallReturnLabel_47:
   \   000011   75..00       MOV     ?V0 + 4,#0x0
   1955          
   1956            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000014   12....       LCALL   ?Subroutine29 & 0xFFFF
   1957            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_37:
   \   000017   7001         JNZ     ??zclParseInWriteRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInWriteRspCmd_0:
   \   00001A   605C         JZ      ??zclParseInWriteRspCmd_1
   1958            {
   1959              if ( pCmd->dataLen == 1 )
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7002         JNZ     ??zclParseInWriteRspCmd_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \                     ??zclParseInWriteRspCmd_2:
   \   000029   703B         JNZ     ??CrossCallReturnLabel_99
   1960              {
   1961                writeRspCmd->attrList[i++].status = *pBuf; // special case when all writes were successfull
   \   00002B   12....       LCALL   ?Subroutine40 & 0xFFFF
   1962              }
   \                     ??CrossCallReturnLabel_186:
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   75..01       MOV     ?V0 + 4,#0x1
   \   000033   803C         SJMP    ??zclParseInWriteRspCmd_3
   1963              else
   1964              {
   1965                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   1966                {
   1967                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000035   E5..         MOV     A,?V0 + 4
   \   000037   75F003       MOV     B,#0x3
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   EA           MOV     A,R2
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EB           MOV     A,R3
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ?Subroutine5 & 0xFFFF
   1968                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_9:
   \   000050   F5..         MOV     ?V0 + 6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FD           MOV     R5,A
   \   000055   E5..         MOV     A,?V0 + 6
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   ED           MOV     A,R5
   \   000060   F0           MOVX    @DPTR,A
   \   000061   05..         INC     ?V0 + 4
   1969                  pBuf += 2;
   \   000063   12....       LCALL   ?Subroutine77 & 0xFFFF
   1970                }
   \                     ??CrossCallReturnLabel_99:
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1971              }
   \                     ??CrossCallReturnLabel_159:
   \   00006F   40C4         JC      ??zclParseInWriteRspCmd_4
   1972              writeRspCmd->numAttr = i; 
   \                     ??zclParseInWriteRspCmd_3:
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   E5..         MOV     A,?V0 + 4
   \   000077   F0           MOVX    @DPTR,A
   1973            }
   1974            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_1:
   \   000078   7F08         MOV     R7,#0x8
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1975          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET
   1976          #endif // ZCL_WRITE
   1977          
   1978          #ifdef ZCL_REPORT
   1979          /*********************************************************************
   1980           * @fn      zclParseInConfigReportCmd
   1981           * @brief   Parse the "Profile" Configure Reporting Command
   1982           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   1983           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   1984           * @param   pCmd - pointer to incoming data to parse
   1985           * @return  pointer to the parsed command structure
   1986           */
   1987          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   1988          {
   1989            zclCfgReportCmd_t *cfgReportCmd;
   1990            zclCfgReportRec_t *reportRec;
   1991            uint8 *pBuf = pCmd->pData;
   1992            uint8 *dataPtr;
   1993            uint8 numAttr = 0;
   1994            uint8 direction;
   1995            uint8 dataType;
   1996            uint8 hdrLen;
   1997            uint8 dataLen = 0;
   1998            uint8 reportChangeLen; // length of Reportable Change field
   1999            uint8 i;
   2000           
   2001            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // Calculate the length of the Request command
   2002            {
   2003              numAttr++;
   2004              
   2005              direction = *pBuf++;
   2006              pBuf += 2; // move pass the attribute ID
   2007              
   2008              if ( direction == ZCL_SEND_ATTR_REPORTS ) // Is there a Reportable Change field?
   2009              {
   2010                dataType = *pBuf++;
   2011                pBuf += 4; // move pass the Min and Max Reporting Intervals
   2012           
   2013                if ( zclAnalogDataType( dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2014                {
   2015                  reportChangeLen = zclGetDataTypeLength( dataType );
   2016                  pBuf += reportChangeLen;
   2017                  
   2018                  if ( PADDING_NEEDED( reportChangeLen ) ) // add padding if needed
   2019                    reportChangeLen++;
   2020                  dataLen += reportChangeLen;
   2021                }
   2022              }
   2023              else
   2024              {
   2025                pBuf += 2; // move pass the Timeout Period
   2026              }
   2027            } // while loop
   2028          
   2029            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   2030            
   2031            cfgReportCmd = (zclCfgReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2032            if ( cfgReportCmd != NULL )
   2033            { 
   2034              pBuf = pCmd->pData;
   2035              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   2036              
   2037              cfgReportCmd->numAttr = numAttr;
   2038              for ( i = 0; i < numAttr; i++ )
   2039              {
   2040                reportRec = &(cfgReportCmd->attrList[i]);
   2041                
   2042                osal_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   2043                  
   2044                reportRec->direction = *pBuf++;
   2045                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2046                pBuf += 2;
   2047                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   2048                {
   2049                 
   2050                  reportRec->dataType = *pBuf++; // Attribute to be reported
   2051                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2052                  pBuf += 2;
   2053                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2054                  pBuf += 2;
   2055                 
   2056                  if ( zclAnalogDataType( reportRec->dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2057                  {
   2058                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   2059                    reportRec->reportableChange = dataPtr;
   2060                    
   2061                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   2062                    pBuf += reportChangeLen;
   2063                   
   2064                    if ( PADDING_NEEDED( reportChangeLen ) ) // advance attribute data pointer
   2065                      reportChangeLen++;
   2066                    dataPtr += reportChangeLen;
   2067                  }
   2068                }
   2069                else
   2070                {
   2071                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] ); // Attribute reports to be received
   2072                  pBuf += 2;
   2073                }
   2074              } // while loop
   2075            }
   2076            return ( (void *)cfgReportCmd );
   2077          }
   2078          
   2079          /*********************************************************************
   2080           * @fn      zclParseInConfigReportRspCmd
   2081           * @brief   Parse the "Profile" Configure Reporting Response Command
   2082           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2083           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2084           * @param   pCmd - pointer to incoming data to parse
   2085           * @return  pointer to the parsed command structure
   2086           */
   2087          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   2088          {
   2089            zclCfgReportRspCmd_t *cfgReportRspCmd;
   2090            uint8 *pBuf = pCmd->pData;
   2091            uint8 numAttr;
   2092            uint8 i; 
   2093            
   2094            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   2095            
   2096            cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof( zclCfgReportRspCmd_t ) 
   2097                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   2098            if ( cfgReportRspCmd != NULL )
   2099            {
   2100              cfgReportRspCmd->numAttr = numAttr;
   2101              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   2102              {
   2103                cfgReportRspCmd->attrList[i].status = *pBuf++;
   2104                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   2105                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2106                pBuf += 2;
   2107              }
   2108            }
   2109            return ( (void *)cfgReportRspCmd );  
   2110          }
   2111          
   2112          /*********************************************************************
   2113           * @fn      zclParseInReadReportCfgCmd
   2114           * @brief   Parse the "Profile" Read Reporting Configuration Command
   2115           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2116           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2117           * @param   pCmd - pointer to incoming data to parse
   2118           * @return  pointer to the parsed command structure
   2119           */
   2120          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   2121          {
   2122            zclReadReportCfgCmd_t *readReportCfgCmd;
   2123            uint8 *pBuf = pCmd->pData;
   2124            uint8 numAttr;
   2125            uint8 i;
   2126            
   2127            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   2128            
   2129            readReportCfgCmd = (zclReadReportCfgCmd_t *)osal_mem_alloc( sizeof( zclReadReportCfgCmd_t ) 
   2130                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   2131            if ( readReportCfgCmd != NULL )
   2132            {
   2133              readReportCfgCmd->numAttr = numAttr;
   2134              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   2135              {
   2136                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   2137                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2138                pBuf += 2;
   2139              }
   2140            }
   2141            return ( (void *)readReportCfgCmd );
   2142          }
   2143          
   2144          /*********************************************************************
   2145           * @fn      zclParseInReadReportCfgRspCmd
   2146           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   2147           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2148           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2149           * @param   pCmd - pointer to incoming data to parse
   2150           * @return  pointer to the parsed command structure
   2151           */
   2152          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   2153          {
   2154            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   2155            zclReportCfgRspRec_t *reportRspRec;
   2156            uint8 reportChangeLen;
   2157            uint8 *pBuf = pCmd->pData;
   2158            uint8 *dataPtr;
   2159            uint8 numAttr = 0;
   2160            uint8 hdrLen;
   2161            uint8 dataLen = 0;
   2162            uint8 status;
   2163            uint8 direction;
   2164            uint8 dataType;
   2165            uint8 i;
   2166            
   2167            // Calculate the length of the response command
   2168            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2169            { 
   2170              numAttr++;
   2171              
   2172              status = *pBuf++;
   2173              direction = *pBuf++; 
   2174              pBuf += 2; // move pass the attribute ID
   2175              
   2176              if ( status == ZCL_STATUS_SUCCESS )
   2177              {
   2178                if ( direction == ZCL_SEND_ATTR_REPORTS )
   2179                {
   2180                  dataType = *pBuf++;
   2181                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   2182           
   2183                  // For attributes of 'discrete' data types this field is omitted
   2184                  if ( zclAnalogDataType( dataType ) )
   2185                  {
   2186                    reportChangeLen = zclGetDataTypeLength( dataType );
   2187                    pBuf += reportChangeLen;
   2188                    
   2189                    // add padding if needed
   2190                    if ( PADDING_NEEDED( reportChangeLen ) )
   2191                      reportChangeLen++;
   2192                    dataLen += reportChangeLen;
   2193                  }
   2194                }
   2195                else
   2196                {
   2197                  pBuf += 2; // move pass the Timeout field
   2198                }
   2199              }
   2200            } // while loop
   2201            
   2202            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   2203            
   2204            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2205            if ( readReportCfgRspCmd != NULL )
   2206            {
   2207              pBuf = pCmd->pData;
   2208              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   2209              
   2210              readReportCfgRspCmd->numAttr = numAttr;
   2211              for ( i = 0; i < numAttr; i++ )
   2212              {
   2213                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   2214                
   2215                reportRspRec->status = *pBuf++;
   2216                reportRspRec->direction = *pBuf++;
   2217                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2218                pBuf += 2;
   2219           
   2220                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   2221                {
   2222                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   2223                  {
   2224                    reportRspRec->dataType = *pBuf++;
   2225                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2226                    pBuf += 2;
   2227                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2228                    pBuf += 2;
   2229          
   2230                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   2231                    {
   2232                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   2233                      reportRspRec->reportableChange = dataPtr;
   2234                      
   2235                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType ); 
   2236                      pBuf += reportChangeLen;
   2237                      
   2238                      // advance attribute data pointer
   2239                      if ( PADDING_NEEDED( reportChangeLen ) )
   2240                        reportChangeLen++;
   2241                      dataPtr += reportChangeLen;
   2242                    }
   2243                  }
   2244                  else
   2245                  {
   2246                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   2247                    pBuf += 2;
   2248                  }
   2249                }
   2250              } 
   2251            }
   2252            
   2253            return ( (void *)readReportCfgRspCmd );
   2254          }
   2255          
   2256          /*********************************************************************
   2257           * @fn      zclParseInReportCmd
   2258           * @brief   Parse the "Profile" Report Command
   2259           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2260           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2261           * @param   pCmd - pointer to incoming data to parse
   2262           * @return  pointer to the parsed command structure
   2263           */
   2264          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   2265          {
   2266            zclReportCmd_t *reportCmd;
   2267            zclReport_t *reportRec;
   2268            uint8 *pBuf = pCmd->pData;
   2269            uint8 attrDataLen;
   2270            uint8 *dataPtr;
   2271            uint8 numAttr = 0;
   2272            uint8 hdrLen;
   2273            uint8 dataLen = 0;
   2274            uint8 dataType;
   2275            uint8 i;
   2276          
   2277            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   2278            {
   2279              numAttr++;
   2280          
   2281              pBuf += 2; // move pass attribute id
   2282              dataType = *pBuf++;
   2283              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2284              pBuf += attrDataLen; // move pass attribute data
   2285                
   2286              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   2287                attrDataLen++;
   2288              dataLen += attrDataLen;
   2289            }
   2290            
   2291            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   2292            
   2293            reportCmd = (zclReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2294            if (reportCmd != NULL )
   2295            {
   2296              pBuf = pCmd->pData;
   2297              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   2298              
   2299              reportCmd->numAttr = numAttr;
   2300              for ( i = 0; i < numAttr; i++ )
   2301              {
   2302                reportRec = &(reportCmd->attrList[i]);
   2303                
   2304                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2305                pBuf += 2;
   2306                reportRec->dataType = *pBuf++;
   2307          
   2308                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );  
   2309                osal_memcpy( dataPtr, pBuf, attrDataLen );
   2310                reportRec->attrData = dataPtr;
   2311                
   2312                pBuf += attrDataLen; // move pass attribute data
   2313                
   2314                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   2315                  attrDataLen++;
   2316                dataPtr += attrDataLen;
   2317              }
   2318            }
   2319            return ( (void *)reportCmd );
   2320          }
   2321          #endif // ZCL_REPORT
   2322          
   2323          /*********************************************************************
   2324           * @fn      zclParseInDefaultRspCmd
   2325           * @brief   Parse the "Profile" Default Response Command
   2326           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2327           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2328           * @param   pCmd - pointer to incoming data to parse
   2329           * @return  pointer to the parsed command structure
   2330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2331          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   2332          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2333            zclDefaultRspCmd_t *defaultRspCmd;
   2334            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine35 & 0xFFFF
   2335          
   2336            defaultRspCmd = (zclDefaultRspCmd_t *)osal_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_48:
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A02         MOV     R2,#0x2
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_mem_alloc?relay
   2337            if ( defaultRspCmd != NULL )
   \   000016   EA           MOV     A,R2
   \   000017   7001         JNZ     ??zclParseInDefaultRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInDefaultRspCmd_0:
   \   00001A   600D         JZ      ??zclParseInDefaultRspCmd_1
   2338            {
   2339              defaultRspCmd->commandID = *pBuf++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   12....       LCALL   ?Subroutine7 & 0xFFFF
   2340              defaultRspCmd->statusCode = *pBuf;
   \                     ??CrossCallReturnLabel_170:
   \   000024   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   2341            }
   \                     ??CrossCallReturnLabel_183:
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   2342            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_1:
   \   000029   02....       LJMP    ?Subroutine93 & 0xFFFF
   2343          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine111_0
   \   000004                ; // Fall through to label ??Subroutine111_0
   2344          
   2345          #ifdef ZCL_DISCOVER
   2346          /*********************************************************************
   2347           * @fn      zclParseInDiscCmd
   2348           * @brief   Parse the "Profile" Discovery Commands
   2349           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2350           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2351           * @param   pCmd - pointer to incoming data to parse
   2352           * @return  pointer to the parsed command structure
   2353           */
   2354          void *zclParseInDiscCmd( zclParseCmd_t *pCmd )
   2355          {
   2356            zclDiscoverCmd_t *discoverCmd;
   2357            uint8 *pBuf = pCmd->pData;
   2358          
   2359            discoverCmd = (zclDiscoverCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverCmd_t ) );
   2360            if ( discoverCmd != NULL )
   2361            {
   2362              discoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2363              pBuf += 2;
   2364              discoverCmd->maxAttrIDs = *pBuf;
   2365            }
   2366            return ( (void *)discoverCmd );
   2367          }
   2368          
   2369          /*********************************************************************
   2370           * @fn      zclParseInDiscRspCmd
   2371           * @brief   Parse the "Profile" Discovery Response Commands
   2372           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2373           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2374           * @param   pCmd - pointer to incoming data to parse
   2375           * @return  pointer to the parsed command structure
   2376           */
   2377          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   2378          static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd )
   2379          {
   2380            zclDiscoverRspCmd_t *discoverRspCmd;
   2381            uint8 *pBuf = pCmd->pData;
   2382            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   2383            uint8 i;
   2384          
   2385            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverRspCmd_t ) 
   2386                                                           + ( numAttr * sizeof(zclDiscoverInfo_t) ) );
   2387            if ( discoverRspCmd != NULL )
   2388            {
   2389              discoverRspCmd->discComplete = *pBuf++;
   2390              discoverRspCmd->numAttr = numAttr;
   2391              
   2392              for ( i = 0; i < numAttr; i++ )
   2393              {
   2394                discoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2395                pBuf += 2;
   2396                discoverRspCmd->attrList[i].dataType = *pBuf++;;
   2397              }
   2398            }
   2399            return ( (void *)discoverRspCmd );
   2400          }
   2401          #endif // ZCL_DISCOVER
   2402          
   2403          #ifdef ZCL_READ
   2404          /*********************************************************************
   2405           * @fn      zclProcessInReadCmd
   2406           * @brief   Process the "Profile" Read Command
   2407           * @param   pInMsg - incoming message to process
   2408           * @return  TRUE if command processed. FALSE, otherwise.
   2409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2410          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   2411          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   2412            zclReadCmd_t *readCmd;
   2413            zclReadRspCmd_t *readRspCmd;
   2414            zclReadRspStatus_t *statusRec;
   2415            zclAttrRec_t attrRec;
   2416            uint8 len;
   2417            uint8 i;
   2418            
   2419            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
   2420            
   2421            // calculate the length of the response status record
   2422            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   2423            
   2424            readRspCmd = osal_mem_alloc( len );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   75F006       MOV     B,#0x6
   \   00001A   85..82       MOV     DPL,?V0 + 2
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   A4           MUL     AB
   \   000021   04           INC     A
   \   000022   FA           MOV     R2,A
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   2425            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_229:
   \   000028   7001         JNZ     ??zclProcessInReadCmd_0
   \   00002A   EB           MOV     A,R3
   \                     ??zclProcessInReadCmd_0:
   \   00002B   7005         JNZ     ??zclProcessInReadCmd_1
   2426              return FALSE; // EMBEDDED RETURN
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   02....       LJMP    ??zclProcessInReadCmd_2 & 0xFFFF
   2427          
   2428            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_1:
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00003B   F0           MOVX    @DPTR,A
   2429            for (i = 0; i < readCmd->numAttr; i++)
   \   00003C   75..00       MOV     ?V0 + 6,#0x0
   \   00003F   800B         SJMP    ??zclProcessInReadCmd_3
   2430            {
   2431              statusRec = &(readRspCmd->attrList[i]);
   2432              statusRec->attrID = readCmd->attrID[i];
   2433              
   2434              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec ) )
   2435              {
   2436                statusRec->data = attrRec.attr.dataPtr;
   2437                statusRec->status = ZCL_STATUS_SUCCESS;
   2438                statusRec->dataType = attrRec.attr.dataType;
   2439              }
   2440              else
   2441              {
   2442                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_4:
   \   000041   7486         MOV     A,#-0x7a
   \   000043   85..82       MOV     DPL,?V0 + 10
   \   000046   85..83       MOV     DPH,?V0 + 11
   \                     ??zclProcessInReadCmd_5:
   \   000049   F0           MOVX    @DPTR,A
   2443              }
   \   00004A   05..         INC     ?V0 + 6
   \                     ??zclProcessInReadCmd_3:
   \   00004C   85..82       MOV     DPL,?V0 + 2
   \   00004F   85..83       MOV     DPH,?V0 + 3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   E5..         MOV     A,?V0 + 6
   \   000056   C3           CLR     C
   \   000057   9A           SUBB    A,R2
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??zclProcessInReadCmd_6 & 0xFFFF
   \   00005D   85..82       MOV     DPL,?V0 + 6
   \   000060   A882         MOV     R0,DPL
   \   000062   E8           MOV     A,R0
   \   000063   75F006       MOV     B,#0x6
   \   000066   A4           MUL     AB
   \   000067   FA           MOV     R2,A
   \   000068   ABF0         MOV     R3,B
   \   00006A   E5..         MOV     A,?V0 + 0
   \   00006C   2A           ADD     A,R2
   \   00006D   F582         MOV     DPL,A
   \   00006F   E5..         MOV     A,?V0 + 1
   \   000071   3B           ADDC    A,R3
   \   000072   F583         MOV     DPH,A
   \   000074   A3           INC     DPTR
   \   000075   AE82         MOV     R6,DPL
   \   000077   AF83         MOV     R7,DPH
   \   000079   E8           MOV     A,R0
   \   00007A   C3           CLR     C
   \   00007B   33           RLC     A
   \   00007C   F8           MOV     R0,A
   \   00007D   E4           CLR     A
   \   00007E   33           RLC     A
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00008A   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00008D   EE           MOV     A,R6
   \   00008E   2402         ADD     A,#0x2
   \   000090   F5..         MOV     ?V0 + 10,A
   \   000092   EF           MOV     A,R7
   \   000093   3400         ADDC    A,#0x0
   \   000095   F5..         MOV     ?V0 + 11,A
   \   000097   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00009A                ; Setup parameters for call to function zclFindAttrRec
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   8582..       MOV     ?V0 + 12,DPL
   \   0000A3   8583..       MOV     ?V0 + 13,DPH
   \   0000A6   78..         MOV     R0,#?V0 + 12
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV     A,R1
   \   0000B6   6089         JZ      ??zclProcessInReadCmd_4
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000C7   E4           CLR     A
   \   0000C8   85..82       MOV     DPL,?V0 + 10
   \   0000CB   85..83       MOV     DPH,?V0 + 11
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   02....       LJMP    ??zclProcessInReadCmd_5 & 0xFFFF
   2444            }
   2445            
   2446            // Build and send Read Response command
   2447            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   2448                             readRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   2449                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   0000DF   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000E2                ; Setup parameters for call to function zcl_SendReadRsp
   \   0000E2   85..82       MOV     DPL,?V0 + 4
   \   0000E5   85..83       MOV     DPH,?V0 + 5
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V0 + 2,A
   \   0000F1   78..         MOV     R0,#?V0 + 2
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   75..01       MOV     ?V0 + 2,#0x1
   \   0000F9   78..         MOV     R0,#?V0 + 2
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   85..82       MOV     DPL,?V0 + 8
   \   00010B   85..83       MOV     DPH,?V0 + 9
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000115   E5..         MOV     A,?V0 + 8
   \   000117   2406         ADD     A,#0x6
   \   000119   FA           MOV     R2,A
   \   00011A   E5..         MOV     A,?V0 + 9
   \   00011C   3400         ADDC    A,#0x0
   \   00011E   FB           MOV     R3,A
   \   00011F   E5..         MOV     A,?V0 + 8
   \   000121   2414         ADD     A,#0x14
   \   000123   F582         MOV     DPL,A
   \   000125   E5..         MOV     A,?V0 + 9
   \   000127   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00012A   F9           MOV     R1,A
   \   00012B   12....       LCALL   ??zcl_SendReadRsp?relay
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   2450            osal_mem_free( readRspCmd );
   \   000133                ; Setup parameters for call to function osal_mem_free
   \   000133   AA..         MOV     R2,?V0 + 0
   \   000135   AB..         MOV     R3,?V0 + 1
   \   000137   12....       LCALL   ??osal_mem_free?relay
   2451              
   2452            return TRUE;
   \   00013A   7901         MOV     R1,#0x1
   \                     ??zclProcessInReadCmd_2:
   \   00013C   7408         MOV     A,#0x8
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000141   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   2453          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine112_0
   \   000006                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine113_0
   \   000001                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 8
   \   000007   85..83       MOV     DPH,?V0 + 9
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000011   E5..         MOV     A,?V0 + 8
   \   000013   2414         ADD     A,#0x14
   \   000015   F582         MOV     DPL,A
   \   000017   E5..         MOV     A,?V0 + 9
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??zclFindAttrRec?relay
   \   000022   7402         MOV     A,#0x2
   \   000024   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine118_0
   \   000001                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine119_0
   \   000006                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
   2454          #endif // ZCL_READ
   2455          
   2456          #ifdef ZCL_WRITE
   2457          /*********************************************************************
   2458           * @fn      processInWriteCmd
   2459           * @brief   Process the "Profile" Write and Write No Response Commands
   2460           * @param   pInMsg - incoming message to process
   2461           * @return  TRUE if command processed. FALSE, otherwise.
   2462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2463          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   2464          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   2465            zclWriteCmd_t *writeCmd;
   2466            zclWriteRec_t *statusRec;
   2467            zclWriteRspCmd_t *writeRspCmd;
   2468            zclAttrRec_t attrRec;
   2469            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2470            uint8 status;
   2471            uint8 i, j = 0;
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   2472          
   2473            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000014   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2474            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_214:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6402         XRL     A,#0x2
   \   00002B   7013         JNZ     ??zclProcessInWriteCmd_0
   2475            {
   2476              // We need to send a response back - allocate space for it
   2477              writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) 
   2478                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000030   12....       LCALL   ?Subroutine23 & 0xFFFF
   2479              if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_28:
   \   000033   7001         JNZ     ??zclProcessInWriteCmd_1
   \   000035   EB           MOV     A,R3
   \                     ??zclProcessInWriteCmd_1:
   \   000036   7005         JNZ     ??zclProcessInWriteCmd_2
   2480                return FALSE; // EMBEDDED RETURN
   \   000038   7900         MOV     R1,#0x0
   \   00003A   02....       LJMP    ??zclProcessInWriteCmd_3 & 0xFFFF
   2481              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_2:
   \   00003D   75..01       MOV     ?V0 + 4,#0x1
   2482            }
   2483            
   2484            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteCmd_0:
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   801F         SJMP    ??zclProcessInWriteCmd_4
   2485            {
   2486              statusRec = &(writeCmd->attrList[i]);
   2487              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2488              {
   2489                if ( statusRec->dataType == attrRec.attr.dataType )
   2490                {
   2491                  status = zclWriteAttrData( &attrRec, statusRec );
   2492          
   2493                  if ( sendRsp && status != ZCL_STATUS_SUCCESS ) // If successful, a write attribute status record shall NOT be generated
   2494                  {
   2495                    writeRspCmd->attrList[j].status = status; // Attribute is read only - move on to the next write attribute record
   2496                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2497                  }
   2498                }
   2499                else
   2500                {
   2501                  if ( sendRsp ) // Attribute data type is incorrect - move on to the next write attribute record
   2502                  {
   2503                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2504                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2505                  }
   2506                }
   2507              }
   2508              else
   2509              {
   2510                if ( sendRsp ) // Attribute is not supported - move on to the next write attribute record
   \                     ??zclProcessInWriteCmd_5:
   \   000045   E5..         MOV     A,?V0 + 4
   \   000047   6019         JZ      ??zclProcessInWriteCmd_6
   2511                {
   2512                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000049   7486         MOV     A,#-0x7a
   \                     ??zclProcessInWriteCmd_7:
   \   00004B   85..82       MOV     DPL,?V0 + 14
   \   00004E   85..83       MOV     DPH,?V0 + 15
   2513                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2514                }
   2515              }
   \   000051   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000054   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000057   85..82       MOV     DPL,?V0 + 12
   \   00005A   85..83       MOV     DPH,?V0 + 13
   \   00005D   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000060   05..         INC     ?V0 + 2
   \                     ??zclProcessInWriteCmd_6:
   \   000062   05..         INC     ?V0 + 3
   \                     ??zclProcessInWriteCmd_4:
   \   000064   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   C3           CLR     C
   \   00006C   9A           SUBB    A,R2
   \   00006D   4003         JC      $+5
   \   00006F   02....       LJMP    ??zclProcessInWriteCmd_8 & 0xFFFF
   \   000072   E5..         MOV     A,?V0 + 3
   \   000074   75F005       MOV     B,#0x5
   \   000077   A4           MUL     AB
   \   000078   F8           MOV     R0,A
   \   000079   A9F0         MOV     R1,B
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   28           ADD     A,R0
   \   000083   FA           MOV     R2,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   39           ADDC    A,R1
   \   000087   8A82         MOV     DPL,R2
   \   000089   F583         MOV     DPH,A
   \   00008B   A3           INC     DPTR
   \   00008C   AE82         MOV     R6,DPL
   \   00008E   AF83         MOV     R7,DPH
   \   000090   E5..         MOV     A,?V0 + 2
   \   000092   75F003       MOV     B,#0x3
   \   000095   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000098   E582         MOV     A,DPL
   \   00009A   2402         ADD     A,#0x2
   \   00009C   F5..         MOV     ?V0 + 12,A
   \   00009E   E583         MOV     A,DPH
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F5..         MOV     ?V0 + 13,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   8582..       MOV     ?V0 + 14,DPL
   \   0000A8   8583..       MOV     ?V0 + 15,DPH
   \   0000AB   85..82       MOV     DPL,?V0 + 6
   \   0000AE   85..83       MOV     DPH,?V0 + 7
   \   0000B1   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   8582..       MOV     ?V0 + 10,DPL
   \   0000BA   8583..       MOV     ?V0 + 11,DPH
   \   0000BD   78..         MOV     R0,#?V0 + 10
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV     A,R1
   \   0000CD   7003         JNZ     $+5
   \   0000CF   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FA           MOV     R2,A
   \   0000DA   7406         MOV     A,#0x6
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6A           XRL     A,R2
   \   0000E1   7022         JNZ     ??zclProcessInWriteCmd_9
   \   0000E3                ; Setup parameters for call to function zclWriteAttrData
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FC           MOV     R4,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   FD           MOV     R5,A
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   AA82         MOV     R2,DPL
   \   0000EE   AB83         MOV     R3,DPH
   \   0000F0   12....       LCALL   ??zclWriteAttrData?relay
   \   0000F3   E9           MOV     A,R1
   \   0000F4   FA           MOV     R2,A
   \   0000F5   E5..         MOV     A,?V0 + 4
   \   0000F7   7003         JNZ     $+5
   \   0000F9   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   0000FC   EA           MOV     A,R2
   \   0000FD   7003         JNZ     $+5
   \   0000FF   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   000102   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   \                     ??zclProcessInWriteCmd_9:
   \   000105   E5..         MOV     A,?V0 + 4
   \   000107   7003         JNZ     $+5
   \   000109   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   00010C   748D         MOV     A,#-0x73
   \   00010E   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   2516            } // for loop
   2517          
   2518            if ( sendRsp )
   \                     ??zclProcessInWriteCmd_8:
   \   000111   E5..         MOV     A,?V0 + 4
   \   000113   604A         JZ      ??zclProcessInWriteCmd_10
   2519            {
   2520              writeRspCmd->numAttr = j;
   \   000115   85..82       MOV     DPL,?V0 + 0
   \   000118   85..83       MOV     DPH,?V0 + 1
   \   00011B   E5..         MOV     A,?V0 + 2
   \   00011D   F0           MOVX    @DPTR,A
   2521              if ( writeRspCmd->numAttr == 0 )
   \   00011E   7003         JNZ     ??CrossCallReturnLabel_12
   2522              {
   2523                // Since all records were written successful, include a single status record in the resonse command 
   2524                // with the status field set to SUCCESS and the attribute ID field omitted.
   2525                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000120   12....       LCALL   ?Subroutine10 & 0xFFFF
   2526                writeRspCmd->numAttr = 1;
   2527              }
   2528              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2529                                pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2530                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_12:
   \   000123   85..82       MOV     DPL,?V0 + 6
   \   000126   85..83       MOV     DPH,?V0 + 7
   \   000129   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00012C                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00012C   85..82       MOV     DPL,?V0 + 6
   \   00012F   85..83       MOV     DPH,?V0 + 7
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   F5..         MOV     ?V0 + 2,A
   \   00013B   78..         MOV     R0,#?V0 + 2
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   75..01       MOV     ?V0 + 2,#0x1
   \   000143   78..         MOV     R0,#?V0 + 2
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   78..         MOV     R0,#?V0 + 2
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014D   78..         MOV     R0,#?V0 + 0
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000155   12....       LCALL   ?DEALLOC_XSTACK8
   2531              osal_mem_free( writeRspCmd );
   \   000158                ; Setup parameters for call to function osal_mem_free
   \   000158   AA..         MOV     R2,?V0 + 0
   \   00015A   AB..         MOV     R3,?V0 + 1
   \   00015C   12....       LCALL   ??osal_mem_free?relay
   2532            }
   2533            return TRUE; 
   \                     ??zclProcessInWriteCmd_10:
   \   00015F   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteCmd_3:
   \   000161   740A         MOV     A,#0xa
   \   000163   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   2534          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine115_0
   \   000006                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F9           MOV     R1,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine117_0
   \   000007                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   7401         MOV     A,#0x1
   \   00000A   28           ADD     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00000B   FD           MOV     R5,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2406         ADD     A,#0x6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   EE           MOV     A,R6
   \   000015   2414         ADD     A,#0x14
   \   000017   F582         MOV     DPL,A
   \   000019   EF           MOV     A,R7
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??zcl_SendWriteRsp?relay
   \   000023   7405         MOV     A,#0x5
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR     A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7401         MOV     A,#0x1
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
   2535          
   2536          /*********************************************************************
   2537           * @fn      zclRevertWriteUndividedCmd
   2538           * @brief   Revert the "Profile" Write Undevided Command
   2539           * @param   pInMsg - incoming message to process
   2540           *          curWriteRec - old data
   2541           *          numAttr - number of attributes to be reverted
   2542           */
   2543          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg, zclWriteRec_t *curWriteRec, uint16 numAttr )
   2544          {
   2545            zclWriteRec_t *statusRec;
   2546            zclAttrRec_t attrRec;
   2547            uint8 dataLen;
   2548            uint8 i;
   2549          
   2550            statusRec = curWriteRec;
   2551            for (i = 0; i < numAttr; i++)
   2552            {
   2553              statusRec = &(curWriteRec[i]);
   2554              
   2555              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2556                break; // should never happen
   2557           
   2558              // Just copy the old data back - no need to validate the data
   2559              dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   2560              osal_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   2561            } // for loop
   2562          }
   2563          
   2564          /*********************************************************************
   2565           * @fn      zclProcessInWriteUndividedCmd
   2566           * @brief   Process the "Profile" Write Undivided Command
   2567           * @param   pInMsg - incoming message to process
   2568           * @return  TRUE if command processed. FALSE, otherwise.
   2569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine107_0
   \   000006                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine116_0
   \   000006                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2570          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   2571          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   2572            zclWriteCmd_t *writeCmd;
   2573            zclWriteRec_t *statusRec;
   2574            zclWriteRec_t *curWriteRec;
   2575            zclWriteRec_t *curStatusRec;
   2576            zclWriteRspCmd_t *writeRspCmd;
   2577            zclAttrRec_t attrRec;
   2578            uint8 *curDataPtr;
   2579            uint8 hdrLen;
   2580            uint8 dataLen;
   2581            uint8 curLen = 0;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2582            uint8 status;
   2583            uint8 i, j = 0;
   \   000011   7F00         MOV     R7,#0x0
   2584          
   2585            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000013   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000016   F5..         MOV     ?V0 + 6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 7,A
   2586            
   2587            // Allocate space for Write Response Command
   2588            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   85..82       MOV     DPL,?V0 + 6
   \   00001F   F583         MOV     DPH,A
   \   000021   12....       LCALL   ?Subroutine23 & 0xFFFF
   2589            
   2590            if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_29:
   \   000024   7001         JNZ     ??zclProcessInWriteUndividedCmd_0
   \   000026   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000027   7005         JNZ     ??zclProcessInWriteUndividedCmd_1
   2591              return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000029   7900         MOV     R1,#0x0
   \   00002B   02....       LJMP    ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   2592            
   2593            // If any attribute cannot be written, no attribute values are changed. Hence,
   2594            // make sure all the attributes are supported and writable
   2595            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00002E   7E00         MOV     R6,#0x0
   \   000030   8013         SJMP    ??zclProcessInWriteUndividedCmd_4
   2596            {
   2597              statusRec = &(writeCmd->attrList[i]);
   2598              
   2599              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2600              {
   2601                // Attribute is not supported - stop here
   2602                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   2603                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2604                break;
   2605              }
   2606              
   2607              if ( statusRec->dataType != attrRec.attr.dataType )
   2608              {
   2609                // Attribute data type is incorrect - stope here
   2610                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2611                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2612                break;
   2613              }
   2614              
   2615              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   2616              {
   2617                // Attribute is not writable - stop here
   2618                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   2619                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2620                break;
   2621              }  
   2622              dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000032                ; Setup parameters for call to function zclGetAttrDataLength
   \   000032   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000035   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000038   E9           MOV     A,R1
   \   000039   FA           MOV     R2,A
   2623              
   2624              // add padding if needed
   2625              if ( PADDING_NEEDED( dataLen ) )
   \   00003A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003C   5001         JNC     ??zclProcessInWriteUndividedCmd_6
   2626                dataLen++;
   \   00003E   0A           INC     R2
   2627              curLen += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   00003F   EA           MOV     A,R2
   \   000040   25..         ADD     A,?V0 + 4
   \   000042   F5..         MOV     ?V0 + 4,A
   \   000044   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   000045   85..82       MOV     DPL,?V0 + 6
   \   000048   85..83       MOV     DPH,?V0 + 7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   EE           MOV     A,R6
   \   00004E   C3           CLR     C
   \   00004F   9A           SUBB    A,R2
   \   000050   505D         JNC     ??zclProcessInWriteUndividedCmd_7
   \   000052   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000055   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   8582..       MOV     ?V0 + 10,DPL
   \   00005E   8583..       MOV     ?V0 + 11,DPH
   \   000061   78..         MOV     R0,#?V0 + 10
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
   \   00006D   7004         JNZ     ??zclProcessInWriteUndividedCmd_8
   \   00006F   7486         MOV     A,#-0x7a
   \   000071   8023         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000073   85..82       MOV     DPL,?V0 + 2
   \   000076   85..83       MOV     DPH,?V0 + 3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   7406         MOV     A,#0x6
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   69           XRL     A,R1
   \   000084   6004         JZ      ??zclProcessInWriteUndividedCmd_10
   \   000086   748D         MOV     A,#-0x73
   \   000088   800C         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   00008A   7407         MOV     A,#0x7
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   A2E1         MOV     C,0xE0 /* A   */.1
   \   000092   409E         JC      ??zclProcessInWriteUndividedCmd_5
   \   000094   7488         MOV     A,#-0x78
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   000096   85..82       MOV     DPL,?V0 + 0
   \   000099   85..83       MOV     DPH,?V0 + 1
   \   00009C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   85..82       MOV     DPL,?V0 + 0
   \   0000A6   85..83       MOV     DPH,?V0 + 1
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000AE   0F           INC     R7
   2628            } // for loop
   2629            
   2630            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0000AF   EF           MOV     A,R7
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   F0           MOVX    @DPTR,A
   2631            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000B7   6003         JZ      $+5
   \   0000B9   02....       LJMP    ??zclProcessInWriteUndividedCmd_11 & 0xFFFF
   2632            {
   2633              // calculate the length of the current data header
   2634              hdrLen = j * sizeof( zclWriteRec_t );
   \   0000BC   75F005       MOV     B,#0x5
   \   0000BF   A4           MUL     AB
   \   0000C0   FA           MOV     R2,A
   2635            
   2636              // Allocate space to keep a copy of the current data
   2637              curWriteRec = (zclWriteRec_t *) osal_mem_alloc( hdrLen + curLen ); 
   \   0000C1   8A82         MOV     DPL,R2
   \   0000C3   8582..       MOV     ?V0 + 2,DPL
   \   0000C6                ; Setup parameters for call to function osal_mem_alloc
   \   0000C6   E5..         MOV     A,?V0 + 4
   \   0000C8   25..         ADD     A,?V0 + 2
   \   0000CA   FA           MOV     R2,A
   \   0000CB   E4           CLR     A
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   ??osal_mem_alloc?relay
   \   0000D2   8A..         MOV     ?V0 + 12,R2
   \   0000D4   8B..         MOV     ?V0 + 13,R3
   2638              if ( curWriteRec == NULL )
   \   0000D6   EA           MOV     A,R2
   \   0000D7   7001         JNZ     ??zclProcessInWriteUndividedCmd_12
   \   0000D9   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   0000DA   700A         JNZ     ??zclProcessInWriteUndividedCmd_13
   2639              {
   2640                osal_mem_free(writeRspCmd );
   \   0000DC                ; Setup parameters for call to function osal_mem_free
   \   0000DC   AA..         MOV     R2,?V0 + 0
   \   0000DE   AB..         MOV     R3,?V0 + 1
   \   0000E0   12....       LCALL   ??osal_mem_free?relay
   2641                return FALSE; // EMBEDDED RETURN
   \   0000E3   02....       LJMP    ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   2642              }
   2643          
   2644              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0000E6   EA           MOV     A,R2
   \   0000E7   25..         ADD     A,?V0 + 2
   \   0000E9   F5..         MOV     ?V0 + 4,A
   \   0000EB   EB           MOV     A,R3
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F5..         MOV     ?V0 + 5,A
   2645              
   2646              // Write the new data over
   2647              for (i = 0; i < writeCmd->numAttr; i++)
   \   0000F0   7E00         MOV     R6,#0x0
   \   0000F2   8020         SJMP    ??zclProcessInWriteUndividedCmd_14
   2648              {
   2649                statusRec = &(writeCmd->attrList[i]);
   2650                curStatusRec = &(curWriteRec[i]);
   2651              
   2652                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2653                  break; // should never happen
   2654          
   2655                // Keep a copy of the current data before before writing the new data over
   2656                curStatusRec->attrID = statusRec->attrID;
   2657                zclReadAttrData( curDataPtr, &attrRec );
   2658                curStatusRec->attrData = curDataPtr;
   2659                
   2660                status = zclWriteAttrData( &attrRec, statusRec );
   2661                   
   2662                // If successful, a write attribute status record shall NOT be generated
   2663                if ( status != ZCL_STATUS_SUCCESS )
   2664                {
   2665                  writeRspCmd->attrList[j].status = status;
   2666                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2667                    
   2668                  // Since this write failed, we need to revert all the pervious writes
   2669                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   2670                  break;
   2671                }
   2672                
   2673                dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0000F4                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000F4   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000F7   85..82       MOV     DPL,?V0 + 2
   \   0000FA   85..83       MOV     DPH,?V0 + 3
   \   0000FD   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   2674                
   2675                // add padding if needed
   2676                if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_147:
   \   000100   A2E0         MOV     C,0xE0 /* A   */.0
   \   000102   5001         JNC     ??zclProcessInWriteUndividedCmd_16
   2677                  dataLen++;
   \   000104   0A           INC     R2
   2678                curDataPtr += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000105   8A..         MOV     ?V0 + 2,R2
   \   000107   E5..         MOV     A,?V0 + 4
   \   000109   25..         ADD     A,?V0 + 2
   \   00010B   F5..         MOV     ?V0 + 4,A
   \   00010D   E5..         MOV     A,?V0 + 5
   \   00010F   3400         ADDC    A,#0x0
   \   000111   F5..         MOV     ?V0 + 5,A
   \   000113   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000114   85..82       MOV     DPL,?V0 + 6
   \   000117   85..83       MOV     DPH,?V0 + 7
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   EE           MOV     A,R6
   \   00011D   C3           CLR     C
   \   00011E   9A           SUBB    A,R2
   \   00011F   4003         JC      $+5
   \   000121   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   000124   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000127   E5..         MOV     A,?V0 + 12
   \   000129   28           ADD     A,R0
   \   00012A   F8           MOV     R0,A
   \   00012B   E5..         MOV     A,?V0 + 13
   \   00012D   39           ADDC    A,R1
   \   00012E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000131   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   8582..       MOV     ?V0 + 10,DPL
   \   00013A   8583..       MOV     ?V0 + 11,DPH
   \   00013D   78..         MOV     R0,#?V0 + 10
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   \   000148   E9           MOV     A,R1
   \   000149   7003         JNZ     $+5
   \   00014B   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   00014E   85..82       MOV     DPL,?V0 + 2
   \   000151   85..83       MOV     DPH,?V0 + 3
   \   000154   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000157   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   00015A   EA           MOV     A,R2
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   A3           INC     DPTR
   \   00015D   EB           MOV     A,R3
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F                ; Setup parameters for call to function zclReadAttrData
   \   00015F   7402         MOV     A,#0x2
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   AC82         MOV     R4,DPL
   \   000166   AD83         MOV     R5,DPH
   \   000168   AA..         MOV     R2,?V0 + 4
   \   00016A   AB..         MOV     R3,?V0 + 5
   \   00016C   12....       LCALL   ??zclReadAttrData?relay
   \   00016F   85..82       MOV     DPL,?XSP + 0
   \   000172   85..83       MOV     DPH,?XSP + 1
   \   000175   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000178   E5..         MOV     A,?V0 + 4
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   A3           INC     DPTR
   \   00017C   E5..         MOV     A,?V0 + 5
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F                ; Setup parameters for call to function zclWriteAttrData
   \   00017F   AC..         MOV     R4,?V0 + 2
   \   000181   AD..         MOV     R5,?V0 + 3
   \   000183   7402         MOV     A,#0x2
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   AA82         MOV     R2,DPL
   \   00018A   AB83         MOV     R3,DPH
   \   00018C   12....       LCALL   ??zclWriteAttrData?relay
   \   00018F   E9           MOV     A,R1
   \   000190   FB           MOV     R3,A
   \   000191   7003         JNZ     $+5
   \   000193   02....       LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   000196   EF           MOV     A,R7
   \   000197   75F003       MOV     B,#0x3
   \   00019A   A4           MUL     AB
   \   00019B   F8           MOV     R0,A
   \   00019C   A9F0         MOV     R1,B
   \   00019E   E5..         MOV     A,?V0 + 0
   \   0001A0   28           ADD     A,R0
   \   0001A1   F8           MOV     R0,A
   \   0001A2   E5..         MOV     A,?V0 + 1
   \   0001A4   39           ADDC    A,R1
   \   0001A5   F9           MOV     R1,A
   \   0001A6   EB           MOV     A,R3
   \   0001A7   8882         MOV     DPL,R0
   \   0001A9   8983         MOV     DPH,R1
   \   0001AB   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001AE   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0001B1   EA           MOV     A,R2
   \   0001B2   F0           MOVX    @DPTR,A
   \   0001B3   A3           INC     DPTR
   \   0001B4   EB           MOV     A,R3
   \   0001B5   F0           MOVX    @DPTR,A
   \   0001B6   0F           INC     R7
   \   0001B7   8E82         MOV     DPL,R6
   \   0001B9   8582..       MOV     ?V0 + 8,DPL
   \   0001BC   7E00         MOV     R6,#0x0
   \   0001BE   8032         SJMP    ??zclProcessInWriteUndividedCmd_18
   2679              } // for loop
   \                     ??zclProcessInWriteUndividedCmd_19:
   \   0001C0   E5..         MOV     A,?V0 + 2
   \   0001C2   2403         ADD     A,#0x3
   \   0001C4   F5..         MOV     ?V0 + 2,A
   \   0001C6   E5..         MOV     A,?V0 + 3
   \   0001C8   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001CB   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0001CE   740E         MOV     A,#0xe
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0001D6                ; Setup parameters for call to function osal_memcpy
   \   0001D6   85..82       MOV     DPL,?V0 + 2
   \   0001D9   85..83       MOV     DPH,?V0 + 3
   \   0001DC   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E2   EA           MOV     A,R2
   \   0001E3   FC           MOV     R4,A
   \   0001E4   7D00         MOV     R5,#0x0
   \   0001E6   7413         MOV     A,#0x13
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0001EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F1   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   0001F2   8E..         MOV     ?V0 + 2,R6
   \   0001F4   C3           CLR     C
   \   0001F5   E5..         MOV     A,?V0 + 2
   \   0001F7   95..         SUBB    A,?V0 + 8
   \   0001F9   E4           CLR     A
   \   0001FA   9400         SUBB    A,#0x0
   \   0001FC   5058         JNC     ??zclProcessInWriteUndividedCmd_17
   \   0001FE   EE           MOV     A,R6
   \   0001FF   75F005       MOV     B,#0x5
   \   000202   A4           MUL     AB
   \   000203   F8           MOV     R0,A
   \   000204   A9F0         MOV     R1,B
   \   000206   E5..         MOV     A,?V0 + 12
   \   000208   28           ADD     A,R0
   \   000209   F5..         MOV     ?V0 + 2,A
   \   00020B   E5..         MOV     A,?V0 + 13
   \   00020D   39           ADDC    A,R1
   \   00020E   F5..         MOV     ?V0 + 3,A
   \   000210   85..82       MOV     DPL,?V0 + 14
   \   000213   85..83       MOV     DPH,?V0 + 15
   \   000216   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000219                ; Setup parameters for call to function zclFindAttrRec
   \   000219   740A         MOV     A,#0xa
   \   00021B   12....       LCALL   ?XSTACK_DISP0_8
   \   00021E   8582..       MOV     ?V0 + 6,DPL
   \   000221   8583..       MOV     ?V0 + 7,DPH
   \   000224   78..         MOV     R0,#?V0 + 6
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000229   85..82       MOV     DPL,?V0 + 2
   \   00022C   85..83       MOV     DPH,?V0 + 3
   \   00022F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000232   85..82       MOV     DPL,?V0 + 4
   \   000235   85..83       MOV     DPH,?V0 + 5
   \   000238   A3           INC     DPTR
   \   000239   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00023C   E5..         MOV     A,?V0 + 4
   \   00023E   2414         ADD     A,#0x14
   \   000240   F582         MOV     DPL,A
   \   000242   E5..         MOV     A,?V0 + 5
   \   000244   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000247   F9           MOV     R1,A
   \   000248   12....       LCALL   ??zclFindAttrRec?relay
   \   00024B   7402         MOV     A,#0x2
   \   00024D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000250   E9           MOV     A,R1
   \   000251   6003         JZ      $+5
   \   000253   02....       LJMP    ??zclProcessInWriteUndividedCmd_19 & 0xFFFF
   2680            
   2681              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000256   EF           MOV     A,R7
   \   000257   85..82       MOV     DPL,?V0 + 0
   \   00025A   85..83       MOV     DPH,?V0 + 1
   \   00025D   F0           MOVX    @DPTR,A
   2682              if ( writeRspCmd->numAttr  == 0 )
   \   00025E   7003         JNZ     ??CrossCallReturnLabel_13
   2683              {
   2684                // Since all records were written successful, include a single status record in the resonse command
   2685                // with the status field set to SUCCESS and the attribute ID field omitted.
   2686                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000260   12....       LCALL   ?Subroutine10 & 0xFFFF
   2687                writeRspCmd->numAttr = 1;
   2688              }
   2689          
   2690              osal_mem_free( curWriteRec );
   \                     ??CrossCallReturnLabel_13:
   \   000263                ; Setup parameters for call to function osal_mem_free
   \   000263   AA..         MOV     R2,?V0 + 12
   \   000265   AB..         MOV     R3,?V0 + 13
   \   000267   12....       LCALL   ??osal_mem_free?relay
   2691            }
   2692            
   2693            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2694                              pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2695                              true, pInMsg->hdr.transSeqNum );  
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   00026A   85..82       MOV     DPL,?V0 + 14
   \   00026D   85..83       MOV     DPH,?V0 + 15
   \   000270   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000273                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000273   85..82       MOV     DPL,?V0 + 14
   \   000276   85..83       MOV     DPH,?V0 + 15
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   F5..         MOV     ?V0 + 2,A
   \   000282   78..         MOV     R0,#?V0 + 2
   \   000284   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000287   75..01       MOV     ?V0 + 2,#0x1
   \   00028A   78..         MOV     R0,#?V0 + 2
   \   00028C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028F   78..         MOV     R0,#?V0 + 2
   \   000291   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000294   78..         MOV     R0,#?V0 + 0
   \   000296   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000299   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00029C   12....       LCALL   ?DEALLOC_XSTACK8
   2696            osal_mem_free( writeRspCmd );
   \   00029F                ; Setup parameters for call to function osal_mem_free
   \   00029F   AA..         MOV     R2,?V0 + 0
   \   0002A1   AB..         MOV     R3,?V0 + 1
   \   0002A3   12....       LCALL   ??osal_mem_free?relay
   2697           
   2698            return TRUE; 
   \   0002A6   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   0002A8   02....       LJMP    ?Subroutine98 & 0xFFFF
   2699          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EE           MOV     A,R6
   \   000001   75F005       MOV     B,#0x5
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V0 + 7
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   8582..       MOV     ?V0 + 2,DPL
   \   000016   8583..       MOV     ?V0 + 3,DPH
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006                REQUIRE ??Subroutine120_0
   \   000006                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   85..82       MOV     DPL,?V0 + 2
   \   000005   85..83       MOV     DPH,?V0 + 3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2700          #endif // ZCL_WRITE
   2701          
   2702          #ifdef ZCL_DISCOVER
   2703          /*********************************************************************
   2704           * @fn      zclProcessInDiscCmd
   2705           * @brief   Process the "Profile" Discover Command
   2706           * @param   pInMsg - incoming message to process
   2707           * @return  TRUE if command processed. FALSE, otherwise.
   2708           */
   2709          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   2710          {
   2711            zclDiscoverCmd_t *discoverCmd;
   2712            zclDiscoverRspCmd_t *discoverRspCmd;
   2713            uint8 discComplete = TRUE;
   2714            zclAttrRec_t attrRec;
   2715            uint16 attrID;
   2716            uint8 i;
   2717            
   2718            discoverCmd = (zclDiscoverCmd_t *)pInMsg->attrCmd;
   2719            
   2720            // Find out the number of attributes supported within the specified range
   2721            for ( i = 0, attrID = discoverCmd->startAttr; i < discoverCmd->maxAttrIDs; i++, attrID++ )
   2722            {
   2723              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2724                break;
   2725            }
   2726            
   2727            // Allocate space for the response command
   2728            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof (zclDiscoverRspCmd_t) 
   2729                                                                   + sizeof ( zclDiscoverInfo_t ) * i );
   2730            if ( discoverRspCmd == NULL )
   2731              return FALSE; // EMEDDED RETURN
   2732            
   2733            discoverRspCmd->numAttr = i;
   2734            if ( discoverRspCmd->numAttr != 0 )
   2735            {
   2736              for ( i = 0, attrID = discoverCmd->startAttr; i < discoverRspCmd->numAttr; i++, attrID++ )
   2737              {
   2738                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2739                  break; // Attribute not supported
   2740                
   2741                discoverRspCmd->attrList[i].attrID = attrRec.attr.attrId;
   2742                discoverRspCmd->attrList[i].dataType = attrRec.attr.dataType;
   2743              }
   2744              
   2745              // Are there more attributes to be discovered?
   2746              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   2747                discComplete = FALSE;
   2748            }
   2749            
   2750            discoverRspCmd->discComplete = discComplete;
   2751            zcl_SendDiscoverRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr, 
   2752                                    pInMsg->msg->clusterId, discoverRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2753                                    true, pInMsg->hdr.transSeqNum );
   2754            osal_mem_free( discoverRspCmd );
   2755            
   2756            return TRUE;
   2757          }
   2758          #endif // ZCL_DISCOVER
   2759          
   2760          /*********************************************************************
   2761           * @fn      zclSendMsg
   2762           * @brief   Send an incoming message to the Application
   2763           * @param   pInMsg - incoming message to process
   2764           * @return  TRUE
   2765           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2766          static uint8 zclSendMsg( zclIncoming_t *pInMsg )
   \                     zclSendMsg:
   2767          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2768            zclIncomingMsg_t *pCmd;
   2769              
   2770            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000009   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   7005         JNZ     ??zclSendMsg_0
   2771              return ( TRUE );
   \                     ??zclSendMsg_1:
   \   000011   7901         MOV     R1,#0x1
   \   000013   02....       LJMP    ?Subroutine93 & 0xFFFF
   2772            
   2773            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \                     ??zclSendMsg_0:
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A18         MOV     R2,#0x18
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_msg_allocate?relay
   2774            if ( pCmd != NULL )
   \   00001D   EA           MOV     A,R2
   \   00001E   7001         JNZ     ??zclSendMsg_2
   \   000020   EB           MOV     A,R3
   \                     ??zclSendMsg_2:
   \   000021   60EE         JZ      ??zclSendMsg_1
   2775            {
   2776              // fill in the message
   2777              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000023   7434         MOV     A,#0x34
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
   2778              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_167:
   \   000028   A3           INC     DPTR
   \   000029   EA           MOV     A,R2
   \   00002A   2402         ADD     A,#0x2
   \   00002C   FC           MOV     R4,A
   \   00002D   EB           MOV     A,R3
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FD           MOV     R5,A
   \   000031   7406         MOV     A,#0x6
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2779              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00003D   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E8           MOV     A,R0
   \   00004D   12....       LCALL   ?Subroutine12 & 0xFFFF
   2780              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_18:
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F583         MOV     DPH,A
   \   000055   8882         MOV     DPL,R0
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   EA           MOV     A,R2
   \   00005E   240A         ADD     A,#0xa
   \   000060   FC           MOV     R4,A
   \   000061   EB           MOV     A,R3
   \   000062   3400         ADDC    A,#0x0
   \   000064   FD           MOV     R5,A
   \   000065   740C         MOV     A,#0xc
   \   000067   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2781              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00006A   EE           MOV     A,R6
   \   00006B   240C         ADD     A,#0xc
   \   00006D   F8           MOV     R0,A
   \   00006E   EF           MOV     A,R7
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F9           MOV     R1,A
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000079   EA           MOV     A,R2
   \   00007A   2416         ADD     A,#0x16
   \   00007C   F582         MOV     DPL,A
   \   00007E   EB           MOV     A,R3
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F583         MOV     DPH,A
   \   000083   EC           MOV     A,R4
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   ED           MOV     A,R5
   \   000087   F0           MOVX    @DPTR,A
   2782              
   2783              // Application will free the attrCmd buffer
   2784              pInMsg->attrCmd = NULL;
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   E4           CLR     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   2785              
   2786              /* send message through task message */
   2787              osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
   \   000090                ; Setup parameters for call to function osal_msg_send
   \   000090   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   12....       LCALL   ??osal_msg_send?relay
   \   000098   02....       LJMP    ??zclSendMsg_1 & 0xFFFF
   2788            }
   2789            return ( TRUE );
   2790          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_RegisteredMsgTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerPlugin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerAttrList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerClusterOptionList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerValidateAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerForMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_DeviceOperational?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessMessageMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclBuildHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindAttrRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSetSecurityOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSerializeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetDataTypeLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclWriteAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteUndividedCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSendMsg
   2791          
   2792          /*********************************************************************
   2793          *********************************************************************/

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     zclBuildHdr                       1      0     54
     zclFindAttrRec                    1      0     62
     zclFindClusterOption              1      0     21
     zclGetAttrDataLength              2      0     42
       -> zclGetDataTypeLength         4      0      0
     zclGetClusterOption               0      0     52
       -> zclFindClusterOption         0      0     20
     zclGetDataTypeLength              2      0      0
     zclParseHdr                       1      0     12
       -> osal_memset                  0      0     24
     zclParseInDefaultRspCmd           1      0     10
       -> osal_mem_alloc               0      0     20
     zclParseInReadCmd                 1      0     12
       -> osal_mem_alloc               0      0     24
     zclParseInReadRspCmd              1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteCmd                1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteRspCmd             1      0     16
       -> osal_mem_alloc               0      0     32
     zclProcessInReadCmd               1      0     35
       -> osal_mem_alloc               0      0     60
       -> zclFindAttrRec               0      0     64
       -> zcl_SendReadRsp              0      0     70
       -> osal_mem_free                0      0     60
     zclProcessInWriteCmd              1      0     39
       -> osal_mem_alloc               0      0     68
       -> zclFindAttrRec               0      0     72
       -> zclWriteAttrData             0      0     68
       -> zcl_SendWriteRsp             0      0     78
       -> osal_mem_free                0      0     68
     zclProcessInWriteUndividedCmd     1      0     47
       -> osal_mem_alloc               0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> osal_mem_alloc               0      0     84
       -> osal_mem_free                0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> zclReadAttrData              0      0     84
       -> zclWriteAttrData             0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> osal_memcpy                  0      0     90
       -> zclFindAttrRec               0      0     88
       -> osal_mem_free                0      0     84
       -> zcl_SendWriteRsp             0      0     94
       -> osal_mem_free                0      0     84
     zclProcessMessageMSG              0      0     12
     zclReadAttrData                   0      0     56
       -> zclGetAttrDataLength         0      0     22
       -> osal_memcpy                  0      0     28
     zclSendMsg                        1      0     10
       -> osal_msg_allocate            0      0     20
       -> osal_msg_send                0      0     20
     zclSerializeData                  1      0     44
       -> osal_buffer_uint32           0      0     32
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
     zclSetSecurityOption              0      0     10
       -> zclFindClusterOption         0      0     20
     zclWriteAttrData                  0      0     60
       -> zclGetAttrDataLength         0      0     30
       -> osal_memcpy                  0      0     36
     zcl_DeviceOperational             1      0     65
       -> zclFindAttrRec               0      0     42
       -> zclReadAttrData              0      0     38
     zcl_Init                          2      0      0
     zcl_SendCommand                   1      0     90
       -> osal_memcpy                  0      0     90
       -> afFindEndPointDesc           0      0     84
       -> zclGetClusterOption          0      0     84
       -> osal_memset                  0      0     84
       -> zcl_DeviceOperational        0      0     88
       -> osal_mem_alloc               0      0     84
       -> zclBuildHdr                  0      0     90
       -> osal_memcpy                  0      0     90
       -> AF_DataRequest               0      0    102
       -> osal_mem_free                0      0     84
     zcl_SendDefaultRspCmd             1      0     34
       -> zcl_SendCommand              0      0     54
     zcl_SendRead                      1      0     38
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_SendReadRsp                   1      0     74
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRequest              1      0     45
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRsp                  1      0     80
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_event_loop                    0      0     12
       -> osal_msg_receive             0      0     24
       -> zclProcessMessageMSG         0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> osal_msg_send                0      0     24
     zcl_registerAttrList              1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerClusterOptionList     1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerForMsg                2      0      0
     zcl_registerPlugin                0      0     16
       -> osal_mem_alloc               0      0     28
     zcl_registerValidateAttrData      2      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     zcl_TaskID                                    1
     stack                                         2
     global_flag                                  18
     global_entry                                 36
     global_recv_data                            270
     global_data_length                            9
     zcl_RegisteredMsgTaskID                       1
     zcl_ValidateAttrDataCB                        2
     zcl_SeqNum                                    1
     plugins                                       2
     attrList                                      2
     clusterOptionList                             2
     zcl_TransID                                   1
     zclCmdTable                                  56
     zcl_Init                                     31
     ?Subroutine83                                 7
     zcl_event_loop                              102
     ?Subroutine84                                 5
     zcl_registerPlugin                          131
     ?Subroutine85                                 5
     ?Subroutine30                                 5
     ??Subroutine99_0                              5
     ?Subroutine11                                 8
     ?Subroutine14                                 4
     ?Subroutine78                                 7
     ?Subroutine66                                 6
     ?Subroutine70                                 5
     ?Subroutine35                                 6
     zcl_registerAttrList                         59
     ?Subroutine50                                25
     ?Subroutine0                                 28
     ?Subroutine63                                 6
     zcl_registerClusterOptionList                59
     zcl_registerValidateAttrData                 16
     zcl_registerForMsg                           20
     zcl_DeviceOperational                       118
     ?Subroutine93                                 5
     zcl_SendCommand                             517
     ?Subroutine98                                 4
     ??Subroutine100_0                             8
     ?Subroutine87                                 6
     ?Subroutine64                                 8
     ?Subroutine45                                 2
     ??Subroutine122_0                             1
     ??Subroutine123_0                             6
     zcl_SendRead                                218
     ?Subroutine95                                 2
     ??Subroutine101_0                             5
     ?Subroutine24                                 5
     ??Subroutine102_0                            11
     ?Subroutine90                                 5
     ?Subroutine74                                 6
     ?Subroutine53                                11
     ?Subroutine46                                 6
     ?Subroutine38                                10
     ?Subroutine94                                 4
     zcl_SendReadRsp                             251
     ?Subroutine28                                 4
     ??Subroutine103_0                            11
     ?Subroutine69                                 7
     ?Subroutine60                                 4
     ?Subroutine75                                 7
     ?Subroutine54                                21
     ?Subroutine47                                10
     ?Subroutine39                                16
     ?Subroutine68                                 5
     ?Subroutine80                                11
     ?Subroutine33                                 9
     ?Subroutine32                                13
     ?Subroutine19                                28
     ?Subroutine89                                 5
     ?Subroutine65                                20
     ?Subroutine2                                 21
     ?Subroutine1                                 25
     ?Subroutine81                                12
     ?Subroutine27                                 5
     zcl_SendWriteRequest                        222
     zcl_SendWriteRsp                            250
     zcl_SendDefaultRspCmd                       171
     zclProcessMessageMSG                          3
     zclParseHdr                                 224
     ?Subroutine92                                 5
     ?Subroutine9                                  4
     ?Subroutine61                                 5
     ??Subroutine110_0                             4
     ?Subroutine62                                 9
     ?Subroutine82                                 8
     ?Subroutine5                                  6
     ??Subroutine111_0                             5
     ??Subroutine113_0                             7
     ?Subroutine79                                 4
     ??Subroutine118_0                             5
     ?Subroutine12                                 8
     zclBuildHdr                                 106
     ?Subroutine43                                11
     ?Subroutine16                                 7
     ??Subroutine104_0                             7
     ?Subroutine8                                  6
     ?Subroutine91                                 5
     zclFindAttrRec                              194
     zclFindClusterOption                        124
     ?Subroutine96                                 5
     zclGetClusterOption                          32
     zclSetSecurityOption                         46
     zclSerializeData                            289
     ?Subroutine15                                 5
     ?Subroutine40                                 4
     ??Subroutine114_0                             4
     zclGetDataTypeLength                        131
     zclGetAttrDataLength                         29
     zclReadAttrData                              75
     ?Subroutine25                                 2
     ??Subroutine105_0                             2
     ??Subroutine106_0                             5
     ??Subroutine108_0                             4
     zclWriteAttrData                            122
     ?Subroutine88                                 6
     ??Subroutine115_0                             4
     ?Subroutine71                                 9
     ?Subroutine41                                 6
     ?Subroutine31                                 6
     zclParseInReadCmd                           100
     ?Subroutine29                                25
     ?Subroutine49                                10
     zclParseInReadRspCmd                        126
     ?Subroutine97                                 9
     ?Subroutine20                                 7
     ??Subroutine109_0                            24
     ?Subroutine6                                  8
     ?Subroutine59                                14
     ?Subroutine57                                 5
     ?Subroutine86                                 6
     ?Subroutine52                                16
     ?Subroutine51                                26
     ?Subroutine48                                25
     ?Subroutine34                                25
     ?Subroutine22                                32
     ?Subroutine4                                 23
     ?Subroutine3                                 35
     ?Subroutine77                                 4
     ?Subroutine76                                15
     ?Subroutine73                                10
     ?Subroutine72                                 1
     ??Subroutine121_0                             9
     zclParseInWriteCmd                          103
     zclParseInWriteRspCmd                       125
     ?Subroutine56                                 4
     zclParseInDefaultRspCmd                      44
     ?Subroutine7                                  4
     zclProcessInReadCmd                         324
     ?Subroutine67                                 6
     ??Subroutine112_0                             8
     ?Subroutine44                                 1
     ??Subroutine116_0                            37
     ??Subroutine117_0                             1
     ?Subroutine55                                 6
     ??Subroutine119_0                             6
     zclProcessInWriteCmd                        358
     ?Subroutine37                                 6
     ?Subroutine13                                 7
     ??Subroutine120_0                             6
     ?Subroutine23                                18
     ?Subroutine21                                38
     ?Subroutine10                                13
     ?Subroutine42                                 6
     ??Subroutine107_0                             3
     ?Subroutine18                                 6
     zclProcessInWriteUndividedCmd               683
     ?Subroutine58                                26
     ?Subroutine26                                 6
     ?Subroutine17                                10
     ?Subroutine36                                 7
     zclSendMsg                                  155
     ?<Initializer for zcl_RegisteredMsgTaskID>    1
     ??zcl_Init?relay                              6
     ??zcl_event_loop?relay                        6
     ??zcl_registerPlugin?relay                    6
     ??zcl_registerAttrList?relay                  6
     ??zcl_registerClusterOptionList?relay         6
     ??zcl_registerValidateAttrData?relay          6
     ??zcl_registerForMsg?relay                    6
     ??zcl_DeviceOperational?relay                 6
     ??zcl_SendCommand?relay                       6
     ??zcl_SendRead?relay                          6
     ??zcl_SendReadRsp?relay                       6
     ??zcl_SendWriteRequest?relay                  6
     ??zcl_SendWriteRsp?relay                      6
     ??zcl_SendDefaultRspCmd?relay                 6
     ??zclProcessMessageMSG?relay                  6
     ??zclParseHdr?relay                           6
     ??zclBuildHdr?relay                           6
     ??zclFindAttrRec?relay                        6
     ??zclFindClusterOption?relay                  6
     ??zclGetClusterOption?relay                   6
     ??zclSetSecurityOption?relay                  6
     ??zclSerializeData?relay                      6
     ??zclGetDataTypeLength?relay                  6
     ??zclGetAttrDataLength?relay                  6
     ??zclReadAttrData?relay                       6
     ??zclWriteAttrData?relay                      6
     ??zclParseInReadCmd?relay                     6
     ??zclParseInReadRspCmd?relay                  6
     ??zclParseInWriteCmd?relay                    6
     ??zclParseInWriteRspCmd?relay                 6
     ??zclParseInDefaultRspCmd?relay               6
     ??zclProcessInReadCmd?relay                   6
     ??zclProcessInWriteCmd?relay                  6
     ??zclProcessInWriteUndividedCmd?relay         6
     ??zclSendMsg?relay                            6

 
 6 741 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    56 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   346 bytes in segment XDATA_Z
 
 7 008 bytes of CODE  memory
   347 bytes of XDATA memory

Errors: none
Warnings: 1
