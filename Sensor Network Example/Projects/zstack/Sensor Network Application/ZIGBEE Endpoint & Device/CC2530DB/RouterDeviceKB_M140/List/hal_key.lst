###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                30/Nov/2010  15:38:13 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fina #
#                          l Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4.0 #
#                          \Sensor Network Example\Components\hal\target\CC25 #
#                          30KB\hal_key.c                                     #
#    Command line       =  -f "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_ #
#                          Final Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1 #
#                          .4.0\Sensor Network Example\Projects\zstack\Sensor #
#                           Network Application\ZIGBEE Endpoint &             #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter. #
#                          cfg" (-DCPU32MHZ -DROOT=__near_func                #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³ #
#                          f¥úºÐ(CC2530)_Final Version\ZIGBEE                 #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_ #
#                          Final Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1 #
#                          .4.0\Sensor Network Example\Projects\zstack\Sensor #
#                           Network Application\ZIGBEE Endpoint &             #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fin #
#                          al Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4. #
#                          0\Sensor Network Example\Components\hal\target\CC2 #
#                          530KB\hal_key.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D   #
#                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D              #
#                          xPOWER_SAVING -D Router_Device -D M140 -D xPA2591  #
#                          -lC "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530) #
#                          _Final Version\ZIGBEE Example\CC2530_ZStack-2.3.0- #
#                          1.4.0\Sensor Network Example\Projects\zstack\Senso #
#                          r Network Application\ZIGBEE Endpoint &            #
#                          Device\CC2530DB\RouterDeviceKB_M140\List\" -lA     #
#                          "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fin #
#                          al Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4. #
#                          0\Sensor Network Example\Projects\zstack\Sensor    #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\RouterDeviceKB_M140\List\"         #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fin #
#                          al Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4. #
#                          0\Sensor Network Example\Projects\zstack\Sensor    #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\RouterDeviceKB_M140\Obj\" -e       #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\ #
#                          ¤½¥q¥X³f¥úºÐ(CC2530)_Final Version\ZIGBEE          #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint & Device\CC2530DB\"    #
#                          -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_ #
#                          Final Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1 #
#                          .4.0\Sensor Network Example\Projects\zstack\Sensor #
#                           Network Application\ZIGBEE Endpoint &             #
#                          Device\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fin #
#                          al Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4. #
#                          0\Sensor Network Example\Projects\zstack\Sensor    #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fin #
#                          al Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4. #
#                          0\Sensor Network Example\Projects\zstack\Sensor    #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fin #
#                          al Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4. #
#                          0\Sensor Network Example\Projects\zstack\Sensor    #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fin #
#                          al Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4. #
#                          0\Sensor Network Example\Projects\zstack\Sensor    #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC #
#                          2530)_Final Version\ZIGBEE                         #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MODU #
#                          LE\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2 #
#                          530)_Final Version\ZIGBEE                          #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530KB\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³ #
#                          f¥úºÐ(CC2530)_Final Version\ZIGBEE                 #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ #
#                          (CC2530)_Final Version\ZIGBEE                      #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(C #
#                          C2530)_Final Version\ZIGBEE                        #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC253 #
#                          0)_Final Version\ZIGBEE Example\CC2530_ZStack-2.3. #
#                          0-1.4.0\Sensor Network Example\Projects\zstack\Sen #
#                          sor Network Application\ZIGBEE Endpoint &          #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC25 #
#                          30)_Final Version\ZIGBEE                           #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC25 #
#                          30)_Final Version\ZIGBEE                           #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2 #
#                          530)_Final Version\ZIGBEE                          #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC25 #
#                          30)_Final Version\ZIGBEE                           #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC25 #
#                          30)_Final Version\ZIGBEE                           #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC25 #
#                          30)_Final Version\ZIGBEE                           #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC253 #
#                          0)_Final Version\ZIGBEE Example\CC2530_ZStack-2.3. #
#                          0-1.4.0\Sensor Network Example\Projects\zstack\Sen #
#                          sor Network Application\ZIGBEE Endpoint &          #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_ #
#                          Final Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1 #
#                          .4.0\Sensor Network Example\Projects\zstack\Sensor #
#                           Network Application\ZIGBEE Endpoint &             #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ #
#                          (CC2530)_Final Version\ZIGBEE                      #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ #
#                          (CC2530)_Final Version\ZIGBEE                      #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC #
#                          2530)_Final Version\ZIGBEE                         #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ #
#                          (CC2530)_Final Version\ZIGBEE                      #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³ #
#                          f¥úºÐ(CC2530)_Final Version\ZIGBEE                 #
#                          Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR               #
#                          Systems\Embedded Workbench for MCS-51              #
#                          V7.51\8051\INC\" -I "C:\IAR Systems\Embedded       #
#                          Workbench for MCS-51 V7.51\8051\INC\CLIB\" -Ohz    #
#    List file          =  D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fina #
#                          l Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4.0 #
#                          \Sensor Network Example\Projects\zstack\Sensor     #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\RouterDeviceKB_M140\List\hal_key.l #
#                          st                                                 #
#    Object file        =  D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Fina #
#                          l Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4.0 #
#                          \Sensor Network Example\Projects\zstack\Sensor     #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\RouterDeviceKB_M140\Obj\hal_key.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\¤½¥q¤W¯Z¸ê®Æ\±Ð¾Ç¼Ò²Õ\¤½¥q¥X³f¥úºÐ(CC2530)_Final Version\ZIGBEE Example\CC2530_ZStack-2.3.0-1.4.0\Sensor Network Example\Components\hal\target\CC2530KB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
      4            Revision:       $Revision: 21351 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          #include "hal_lcd.h"
     92          
     93          #include "mac_radio_defs.h"
     94          
     95          #include "hal_buzzer.h"
     96          #include "hal_keypad.h"
     97          
     98          #if defined (M140) || (M170) || (M200) // SensorApp example include header file
     99          //  #include "SensorApp.h"
    100            #include "M140.h"
    101            #include "M170.h"
    102            #include "M200.h"
    103          #endif
    104          
    105          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    106          /**************************************************************************************************
    107           *                                              MACROS
    108           **************************************************************************************************/
    109          
    110          /**************************************************************************************************
    111           *                                            CONSTANTS
    112           **************************************************************************************************/
    113          #define HAL_KEY_RISING_EDGE   0
    114          #define HAL_KEY_FALLING_EDGE  1
    115          
    116          #define HAL_KEY_DEBOUNCE_VALUE  25
    117          #define HAL_KEY_POLLING_VALUE   100
    118          
    119          /* CPU port interrupt */
    120          #define HAL_KEY_CPU_PORT_0_IF P0IF
    121          #define HAL_KEY_CPU_PORT_2_IF P2IF
    122          
    123          /* SW_6 is at P0.1 */
    124          #define HAL_KEY_SW_6_PORT   P0
    125          #define HAL_KEY_SW_6_BIT    BV(1)
    126          #define HAL_KEY_SW_6_SEL    P0SEL
    127          #define HAL_KEY_SW_6_DIR    P0DIR
    128          
    129          /* edge interrupt */
    130          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    131          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    132          
    133          /* SW_6 interrupts */
    134          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    135          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    136          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    137          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    138          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    139          
    140          /**************************************************************************************************
    141           *                                            TYPEDEFS
    142           **************************************************************************************************/
    143          /**************************************************************************************************
    144           *                                        GLOBAL VARIABLES
    145           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150          
    151          /**************************************************************************************************
    152           *                                        FUNCTIONS - Local
    153           **************************************************************************************************/
    154          void halProcessKeyInterrupt(void);
    155          
    156          /**************************************************************************************************
    157           *                                        FUNCTIONS - API
    158           **************************************************************************************************/
    159          
    160          /**************************************************************************************************
    161           * @fn      HalKeyInit
    162           *
    163           * @brief   Initilize Key Service
    164           *
    165           * @param   none
    166           *
    167           * @return  None
    168           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          void HalKeyInit( void )
   \                     HalKeyInit:
    170          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    171            /* Initialize previous key to 0 */
    172            halKeySavedKeys = 0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#halKeySavedKeys
   \   000008   F0           MOVX    @DPTR,A
    173          
    174            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000009   53F3FD       ANL     0xf3,#0xfd
    175            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000C   53FDFD       ANL     0xfd,#0xfd
    176            
    177            /* Initialize callback function */
    178            pHalKeyProcessFunction  = NULL;
   \   00000F   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   F0           MOVX    @DPTR,A
    179          
    180            /* Start with key is not configured */
    181            HalKeyConfigured = FALSE;
   \   000015   90....       MOV     DPTR,#HalKeyConfigured
   \   000018   F0           MOVX    @DPTR,A
    182          }
   \   000019   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00001C                REQUIRE P0SEL
   \   00001C                REQUIRE P0DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    183          
    184          
    185          /*******************************************************************************
    186           * @fn      HalKeyConfig
    187           *
    188           * @brief   Configure the Key serivce
    189           *
    190           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    191           *          cback - pointer to the CallBack function
    192           *
    193           * @return  None
    194           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    196          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    197            /* Enable/Disable Interrupt or */
    198            Hal_KeyIntEnable = interruptEnable;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000008   F0           MOVX    @DPTR,A
    199          
    200            /* Register the callback fucntion */
    201            pHalKeyProcessFunction = cback;
   \   000009   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000C   EA           MOV     A,R2
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   EB           MOV     A,R3
   \   000010   F0           MOVX    @DPTR,A
    202          
    203            /* Determine if interrupt is enable or not */
    204            if (Hal_KeyIntEnable)
   \   000011   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6024         JZ      ??HalKeyConfig_0
    205            {
    206              /* Rising/Falling edge configuratinn */
    207          
    208              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   000017   538CFE       ANL     0x8c,#0xfe
    209              /* For falling edge, the bit must be set. */
    210            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    211              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   00001A   438C01       ORL     0x8c,#0x1
    212            #endif
    213          
    214              /* Interrupt configuration:
    215               * - Enable interrupt generation at the port
    216               * - Enable CPU interrupt
    217               * - Clear any pending interrupt */
    218              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   00001D   43AB02       ORL     0xab,#0x2
    219              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000020   D2BD         SETB    0xb8.5
    220              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   000022   7589FD       MOV     0x89,#-0x3
    221          
    222              /* Rising/Falling edge configuratinn */
    223          
    224              /* For falling edge, the bit must be set. */
    225            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    226              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
    227            #endif
    228          
    229              /* Interrupt configuration:
    230               * - Enable interrupt generation at the port
    231               * - Enable CPU interrupt
    232               * - Clear any pending interrupt */
    233          
    234              /* Do this only after the hal_key is configured - to work with sleep stuff */
    235              if (HalKeyConfigured == TRUE)
   \   000025   90....       MOV     DPTR,#HalKeyConfigured
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   7023         JNZ     ??HalKeyConfig_1
    236              {
    237                osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   00002D                ; Setup parameters for call to function osal_stop_timerEx
   \   00002D   7A01         MOV     R2,#0x1
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#Hal_TaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??osal_stop_timerEx?relay
   \   000039   8015         SJMP    ??HalKeyConfig_1
    238              }
    239            }
    240            else    /* Interrupts NOT enabled */
    241            {
    242              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   00003B   53ABFD       ANL     0xab,#0xfd
    243              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   00003E   C2BD         CLR     0xb8.5
    244          
    245              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
   \   000040                ; Setup parameters for call to function osal_start_timerEx
   \   000040   7C64         MOV     R4,#0x64
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#Hal_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   ??osal_start_timerEx?relay
    246            }
    247            /* Key now is configured */
    248            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000050   7401         MOV     A,#0x1
   \   000052   90....       MOV     DPTR,#HalKeyConfigured
   \   000055   F0           MOVX    @DPTR,A
    249            
    250            //Switch Buttons
    251              SWITCH1_INPUT();
   \   000056   53F5F7       ANL     0xf5,#0xf7
   \   000059   53FFF7       ANL     0xff,#0xf7
    252              SWITCH2_INPUT();
   \   00005C   53F5EF       ANL     0xf5,#0xef
   \   00005F   53FFEF       ANL     0xff,#0xef
    253          }
   \   000062   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000065                REQUIRE P0IFG
   \   000065                REQUIRE PICTL
   \   000065                REQUIRE P0IEN
   \   000065                REQUIRE _A_IEN1
   \   000065                REQUIRE P2SEL
   \   000065                REQUIRE P2DIR
    254          
    255          
    256          /*******************************************************************************
    257           * @fn      HalKeyRead
    258           *
    259           * @brief   Read the current value of a key
    260           *
    261           * @param   None
    262           *
    263           * @return  keys - current keys status
    264           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    266          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    267            uint8 keys = 0;
   \   000000   7900         MOV     R1,#0x0
    268            
    269            if (HAL_SW_1_PUSH())
   \   000002   A2A3         MOV     C,0xa0.3
   \   000004   4010         JC      ??HalKeyRead_0
    270            {
    271              HAL_debounce(!HAL_SW_1_PUSH());
   \   000006   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_1:
   \   000008   A2A3         MOV     C,0xa0.3
   \   00000A   4002         JC      ??HalKeyRead_2
   \   00000C   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_2:
   \   00000E   0A           INC     R2
   \   00000F   EA           MOV     A,R2
   \   000010   C3           CLR     C
   \   000011   9432         SUBB    A,#0x32
   \   000013   40F3         JC      ??HalKeyRead_1
    272              keys |= HAL_KEY_SW1; 
   \   000015   09           INC     R1
    273            }
    274            if (HAL_SW_2_PUSH())
   \                     ??HalKeyRead_0:
   \   000016   A2A4         MOV     C,0xa0.4
   \   000018   4013         JC      ??HalKeyRead_3
    275            {
    276              HAL_debounce(!HAL_SW_2_PUSH());
   \   00001A   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_4:
   \   00001C   A2A4         MOV     C,0xa0.4
   \   00001E   4002         JC      ??HalKeyRead_5
   \   000020   7A00         MOV     R2,#0x0
   \                     ??HalKeyRead_5:
   \   000022   0A           INC     R2
   \   000023   EA           MOV     A,R2
   \   000024   C3           CLR     C
   \   000025   9432         SUBB    A,#0x32
   \   000027   40F3         JC      ??HalKeyRead_4
    277              keys |= HAL_KEY_SW2;
   \   000029   E9           MOV     A,R1
   \   00002A   D2E3         SETB    0xE0 /* A   */.3
   \   00002C   F9           MOV     R1,A
    278            }
    279            return keys;
   \                     ??HalKeyRead_3:
   \   00002D   02....       LJMP    ?BRET
   \   000030                REQUIRE _A_P2
    280          }
    281          
    282          
    283          /*******************************************************************************
    284           * @fn      HalKeyPoll
    285           *
    286           * @brief   Called by hal_driver to poll the keys
    287           *
    288           * @param   None
    289           *
    290           * @return  None
    291           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          void HalKeyPoll (void)
   \                     HalKeyPoll:
    293          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    294            uint8 keys = 0;
   \   000004   7900         MOV     R1,#0x0
    295            
    296            if (HAL_SW_1_PUSH())
   \   000006   A2A3         MOV     C,0xa0.3
   \   000008   4010         JC      ??HalKeyPoll_0
    297            {
    298              HAL_debounce(!HAL_SW_1_PUSH());
   \   00000A   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_1:
   \   00000C   A2A3         MOV     C,0xa0.3
   \   00000E   4002         JC      ??HalKeyPoll_2
   \   000010   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_2:
   \   000012   0A           INC     R2
   \   000013   EA           MOV     A,R2
   \   000014   C3           CLR     C
   \   000015   9432         SUBB    A,#0x32
   \   000017   40F3         JC      ??HalKeyPoll_1
    299              keys |= HAL_KEY_SW1; 
   \   000019   09           INC     R1
    300            }
    301            if (HAL_SW_2_PUSH())
   \                     ??HalKeyPoll_0:
   \   00001A   A2A4         MOV     C,0xa0.4
   \   00001C   4013         JC      ??HalKeyPoll_3
    302            {
    303              HAL_debounce(!HAL_SW_2_PUSH());
   \   00001E   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_4:
   \   000020   A2A4         MOV     C,0xa0.4
   \   000022   4002         JC      ??HalKeyPoll_5
   \   000024   7A00         MOV     R2,#0x0
   \                     ??HalKeyPoll_5:
   \   000026   0A           INC     R2
   \   000027   EA           MOV     A,R2
   \   000028   C3           CLR     C
   \   000029   9432         SUBB    A,#0x32
   \   00002B   40F3         JC      ??HalKeyPoll_4
    304              keys |= HAL_KEY_SW2;  
   \   00002D   E9           MOV     A,R1
   \   00002E   D2E3         SETB    0xE0 /* A   */.3
   \   000030   F9           MOV     R1,A
    305            }
    306            
    307            /* If interrupts are not enabled, previous key status and current key status
    308             * are compared to find out if a key has changed status.
    309             */
    310            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_3:
   \   000031   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000034   E0           MOVX    A,@DPTR
   \   000035   7009         JNZ     ??HalKeyPoll_6
    311            {
    312              if (keys == halKeySavedKeys)
   \   000037   90....       MOV     DPTR,#halKeySavedKeys
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \   00003C   601F         JZ      ??HalKeyPoll_7
    313              {
    314                /* Exit - since no keys have changed */
    315                return;
    316              }
    317              /* Store the current keys for comparation next time */
    318              halKeySavedKeys = keys;
   \   00003E   E9           MOV     A,R1
   \   00003F   F0           MOVX    @DPTR,A
    319            }
    320            else
    321            {
    322              /* Key interrupt handled here */
    323            }
    324          
    325            /* Invoke Callback if new keys were depressed */
    326            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_6:
   \   000040   E9           MOV     A,R1
   \   000041   601A         JZ      ??HalKeyPoll_7
   \   000043   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000046   E0           MOVX    A,@DPTR
   \   000047   7002         JNZ     ??HalKeyPoll_8
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \                     ??HalKeyPoll_8:
   \   00004B   6010         JZ      ??HalKeyPoll_7
    327            {
    328              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F583         MOV     DPH,A
   \   000058   8882         MOV     DPL,R0
   \   00005A   12....       LCALL   ?CALL_IND
    329            }
   \                     ??HalKeyPoll_7:
   \   00005D                REQUIRE ?Subroutine0
   \   00005D                REQUIRE _A_P2
   \   00005D                ; // Fall through to label ?Subroutine0
    330          }
    331          
    332          /**************************************************************************************************
    333           * @fn      halProcessKeyInterrupt
    334           *
    335           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    336           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    337           *
    338           * @param
    339           *
    340           * @return
    341           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    343          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    344            bool valid=FALSE;
    345          
    346            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000004   E589         MOV     A,0x89
   \   000006   A2E1         MOV     C,0xE0 /* A   */.1
   \   000008   5013         JNC     ??halProcessKeyInterrupt_0
    347            {
    348              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000A   7589FD       MOV     0x89,#-0x3
    349              valid = TRUE;
    350            }
    351          
    352            if (valid)
    353            {
    354              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   7C19         MOV     R4,#0x19
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#Hal_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??osal_start_timerEx?relay
    355            }
    356          }
   \                     ??halProcessKeyInterrupt_0:
   \   00001D   80..         SJMP    ?Subroutine0
   \   00001F                REQUIRE P0IFG
    357          
    358          /**************************************************************************************************
    359           * @fn      HalKeyEnterSleep
    360           *
    361           * @brief  - Get called to enter sleep mode
    362           *
    363           * @param
    364           *
    365           * @return
    366           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    367          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    368          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    369          }
   \   000000   02....       LJMP    ?BRET
    370          
    371          /**************************************************************************************************
    372           * @fn      HalKeyExitSleep
    373           *
    374           * @brief   - Get called when sleep is over
    375           *
    376           * @param
    377           *
    378           * @return  - return saved keys
    379           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    380          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    381          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    382            /* Wake up and read keys */
    383            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   80..         SJMP    ?Subroutine0
    384          }
    385          
    386          /***************************************************************************************************
    387           *                                    INTERRUPT SERVICE ROUTINE (¤¤Â_ªA°Èµ{§Ç)
    388           ***************************************************************************************************/
    389          
    390          /**************************************************************************************************
    391           * @fn      halKeyPort0Isr
    392           *
    393           * @brief   Port0 ISR
    394           *
    395           * @param
    396           *
    397           * @return
    398           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    399          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    400          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    401            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   000007   E589         MOV     A,0x89
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5003         JNC     ??halKeyPort0Isr_0
    402            {
    403              halProcessKeyInterrupt();
   \   00000D                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00000D   12....       LCALL   ??halProcessKeyInterrupt?relay
    404            }
    405          
    406            /*
    407              Clear the CPU interrupt flag for Port_0 PxIFG has to be cleared before PxIF
    408            */
    409            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000010   758900       MOV     0x89,#0x0
    410            HAL_KEY_CPU_PORT_0_IF = 0;
   \   000013   C2C5         CLR     0xc0.5
    411          }
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?INTERRUPT_LEAVE_XSP
   \   00001A                REQUIRE P0IFG
   \   00001A                REQUIRE _A_IRCON
    412          
    413          
    414          /**************************************************************************************************
    415           * @fn      halKeyPort2Isr
    416           *
    417           * @brief   Port2 ISR
    418           *
    419           * @param
    420           *
    421           * @return
    422           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    423          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    424          {
   \   000000                ; Saved register size: 1
   \   000000                ; Auto size: 0
    425            /*
    426              Clear the CPU interrupt flag for Port_2 PxIFG has to be cleared before PxIF
    427              Notes: P2_1 and P2_2 are debug lines.
    428            */
    429            HAL_KEY_CPU_PORT_2_IF = 0;
   \   000000   C2E8         CLR     0xe8.0
    430          }
   \   000002   32           RETI
   \   000003                REQUIRE _A_IRCON2

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyConfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyPoll?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??halProcessKeyInterrupt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalKeyExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    431          
    432          #else
    433          
    434          
    435          void HalKeyInit(void){}
    436          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    437          uint8 HalKeyRead(void){ return 0;}
    438          void HalKeyPoll(void){}
    439          
    440          #endif /* HAL_KEY */
    441          
    442          
    443          
    444          
    445          
    446          /**************************************************************************************************
    447          **************************************************************************************************/
    448          
    449          
    450          

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     HalKeyConfig                    2      0      0
       -> osal_stop_timerEx          4      0      0
       -> osal_start_timerEx         4      0      0
     HalKeyEnterSleep                0      0      0
     HalKeyExitSleep                 2      0      0
       -> HalKeyRead                 4      0      0
     HalKeyInit                      2      0      0
     HalKeyPoll                      2      0      0
     HalKeyRead                      0      0      0
     halKeyPort0Isr                 15      0      0
       -> halProcessKeyInterrupt    30      0      0
     halKeyPort2Isr                  1      0      0
     halProcessKeyInterrupt          2      0      0
       -> osal_start_timerEx         4      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     P0IFG                             1
     PICTL                             1
     _A_P2                             1
     P0IEN                             1
     _A_IEN1                           1
     _A_IRCON                          1
     _A_IRCON2                         1
     P0SEL                             1
     P2SEL                             1
     P0DIR                             1
     P2DIR                             1
     halKeySavedKeys                   1
     pHalKeyProcessFunction            2
     HalKeyConfigured                  1
     Hal_KeyIntEnable                  1
     HalKeyInit                       28
     ?Subroutine0                      7
     HalKeyConfig                    101
     HalKeyRead                       48
     HalKeyPoll                       93
     halProcessKeyInterrupt           31
     HalKeyEnterSleep                  3
     HalKeyExitSleep                   9
     halKeyPort0Isr                   26
     halKeyPort2Isr                    3
     ??halKeyPort2Isr??INTVEC 51       3
     ??halKeyPort0Isr??INTVEC 107      3
     ??HalKeyInit?relay                6
     ??HalKeyConfig?relay              6
     ??HalKeyRead?relay                6
     ??HalKeyPoll?relay                6
     ??halProcessKeyInterrupt?relay    6
     ??HalKeyEnterSleep?relay          6
     ??HalKeyExitSleep?relay           6

 
 320 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  29 bytes in segment NEAR_CODE
  11 bytes in segment SFR_AN
   5 bytes in segment XDATA_Z
 
 391 bytes of CODE  memory (+  6 bytes shared)
   0 bytes of DATA  memory (+ 11 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: none
