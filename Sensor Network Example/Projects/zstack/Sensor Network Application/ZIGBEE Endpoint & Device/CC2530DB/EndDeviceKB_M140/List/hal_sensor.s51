///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               21/Aug/2013  18:10:26 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c                        /
//    Command line       =  -f "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\GitHub\z-stack\Sensor        /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c" -D NWK_AUTO_POLL -D   /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D           /
//                          End_Device -D M140 -D xPA2591 -lC                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\List\" -lA       /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint & Device\CC2530DB\"   /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\List\hal_sensor. /
//                          s51                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_sensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??M140_SensorFunction?relay
        FUNCTION ??M140_SensorFunction?relay,0203H
        PUBLIC ??sleep?relay
        FUNCTION ??sleep?relay,0203H
        PUBLIC M140_SensorFunction
        FUNCTION M140_SensorFunction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC TransmitApp_Msg
        PUBLIC sleep
        FUNCTION sleep,080203H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
M140_Init           SYMBOL "M140_Init"
M140_GetValue       SYMBOL "M140_GetValue"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??M140_GetValue?relay SYMBOL "?relay", M140_GetValue
??M140_Init?relay   SYMBOL "?relay", M140_Init
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
M140_SensorFunction SYMBOL "M140_SensorFunction"
??M140_SensorFunction?relay SYMBOL "?relay", M140_SensorFunction
sleep               SYMBOL "sleep"
??sleep?relay       SYMBOL "?relay", sleep

        EXTERN M140_Init
        FUNCTION M140_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M140_GetValue
        FUNCTION M140_GetValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??M140_GetValue?relay
        FUNCTION ??M140_GetValue?relay,00H
        EXTERN ??M140_Init?relay
        FUNCTION ??M140_Init?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN zclZigbeeDevice_DstAddr

// D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
//    1 #include "ZComDef.h"
//    2 #include "OSAL.h"
//    3 #include "AF.h"
//    4 #include "ZDApp.h"
//    5 #include "ZDObject.h"
//    6 #include "ZDProfile.h"
//    7 #include "mac_radio_defs.h"
//    8 
//    9 #include "zcl.h"
//   10 #include "zcl_general.h"
//   11 #include "zcl_ha.h"
//   12 #include "zcl_zigbee device.h"
//   13 
//   14 #include "onboard.h"
//   15 #include "hal_lcd.h"
//   16 #include "hal_led.h"
//   17 #include "hal_key.h"
//   18 #include "MT_UART.h"
//   19 #include "hal_uart.h"
//   20 #include "hal_timer.h"
//   21 #include "hal_keypad.h"
//   22 #include "hal_buzzer.h"
//   23   
//   24 /* HAL Sensor */
//   25 #include "hal_sensor.h"
//   26 
//   27 #if defined(M110)
//   28   #include "M110.h"
//   29 #endif
//   30 #if defined(M140)
//   31   #include "M140.h"
//   32 #endif
//   33 #if defined(M160)
//   34   #include "M160.h"
//   35 #endif
//   36 #if defined(M170)
//   37   #include "M170.h"
//   38 #endif
//   39 #if defined(M190)
//   40   #include "M190.h"
//   41 #endif
//   42 #if defined(M200)
//   43   #include "M200.h"
//   44 #endif
//   45 #if defined(M270)
//   46   #include "M270.h"
//   47 #endif
//   48 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   49 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   50  
//   51 void M110_SensorFunction(void); // M140 Module function
//   52 void M140_SensorFunction(void); // M140 Module function
//   53 void M160_SensorFunction(void); // M160 Module function
//   54 void M170_SensorFunction(void); // M170 Module function
//   55 void M190_SensorFunction(void); // M190 Module function
//   56 void M200_SensorFunction(void); // M200 Module function
//   57 void M270_SensorFunction(void); // M270 Module function
//   58 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   59 void sleep(uint16 sec)
sleep:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function sleep
//   60 {
        ; Saved register size: 0
        ; Auto size: 0
//   61     uint16 i,j,k;
//   62     
//   63     k = sec * 1000;
        MOV     A,R2
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,#-0x18
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
//   64     
//   65     for(i=0;i<1600;i++)
        MOV     R4,#0x40
        MOV     R5,#0x6
//   66       for(j=0;j<k;j++)
??sleep_0:
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??sleep_1
//   67         asm("nop");
??sleep_2:
        nop
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??sleep_1:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??sleep_2
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R4
        JNZ     ??sleep_3
        MOV     A,R5
??sleep_3:
        JNZ     ??sleep_0
//   68 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   69 
//   70 #if defined(M110)
//   71 void M110_SensorFunction(void)
//   72 {
//   73     uint16 val;
//   74       
//   75     M110_Init();
//   76     
//   77     val = M110_GetValue();
//   78     
//   79     TransmitApp_Msg[0] = 1 + '0';  
//   80     TransmitApp_Msg[1] = 1 + '0';   
//   81     TransmitApp_Msg[2] = 0 + '0';        
//   82     TransmitApp_Msg[3] = ',';
//   83     TransmitApp_Msg[4] = 'N';     
//   84     TransmitApp_Msg[5] = ',';
//   85     if(val > 3000)
//   86     {    
//   87         TransmitApp_Msg[6] = 1 + '0';
//   88     }
//   89     else
//   90     {
//   91         TransmitApp_Msg[6] = 0 + '0';  
//   92     }       
//   93 
//   94     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//   95                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//   96                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 7, 
//   97                                  TransmitApp_Msg );
//   98  }
//   99 #endif
//  100   
//  101 #if defined(M140)
//  102 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  103 void M140_SensorFunction(void)
M140_SensorFunction:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function M140_SensorFunction
//  104 {
        FUNCALL M140_SensorFunction, M140_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, M140_GetValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  105   uint16 val;
//  106 
//  107   M140_Init();
        ; Setup parameters for call to function M140_Init
        LCALL   ??M140_Init?relay
//  108       
//  109   val = M140_GetValue();  
        ; Setup parameters for call to function M140_GetValue
        LCALL   ??M140_GetValue?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  110   if((0x2000 & val) == 0x2000) // check sign bit for negative value
        MOV     A,#0x20
        ANL     A,R5
        MOV     R1,A
        CLR     A
        JNZ     ??M140_SensorFunction_0
        MOV     A,R1
??M140_SensorFunction_0:
        JZ      ??M140_SensorFunction_1
//  111   {
//  112     val = ((val - 16384) * 10) / 32;
        CLR     A
        ADD     A,R4
        MOV     A,#-0x40
        ADDC    A,R5
        MOV     ?V0 + 1,A
        MOV     A,R2
        MOV     B,#0xa
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     ?V0 + 1,A
        SJMP    ??M140_SensorFunction_2
//  113   }
//  114   else
//  115   {
//  116     val = (val * 10) / 32;
??M140_SensorFunction_1:
        MOV     A,R4
        MOV     B,#0xa
        MUL     AB
        MOV     R4,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,R5
        MUL     AB
        ADD     A,R2
        MOV     R5,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
??M140_SensorFunction_2:
        MOV     A,#0x5
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  117   }
//  118 
//  119   TransmitApp_Msg[0] = 1 + '0';  
        MOV     A,#0x31
        MOV     DPTR,#TransmitApp_Msg
        MOVX    @DPTR,A
//  120   TransmitApp_Msg[1] = 4 + '0';   
        MOV     A,#0x34
        MOV     DPTR,#(TransmitApp_Msg + 1)
        MOVX    @DPTR,A
//  121   TransmitApp_Msg[2] = 0 + '0';        
        MOV     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 2)
        MOVX    @DPTR,A
//  122   TransmitApp_Msg[3] = ',';
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 3)
        MOVX    @DPTR,A
//  123   TransmitApp_Msg[4] = 'A';   
        MOV     A,#0x41
        MOV     DPTR,#(TransmitApp_Msg + 4)
        MOVX    @DPTR,A
//  124   TransmitApp_Msg[5] = ',';  
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 5)
        MOVX    @DPTR,A
//  125   TransmitApp_Msg[6] = (val / 100) + '0';
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 6)
        LCALL   ?Subroutine0 & 0xFFFF
//  126   TransmitApp_Msg[7] = ((val / 10) % 10) + '0';
??CrossCallReturnLabel_0:
        LCALL   ?US_DIV_MOD
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 7)
        MOVX    @DPTR,A
//  127   TransmitApp_Msg[8] = '.';
        MOV     A,#0x2e
        MOV     DPTR,#(TransmitApp_Msg + 8)
        LCALL   ?Subroutine0 & 0xFFFF
//  128   TransmitApp_Msg[9] = (val % 10) + '0';
??CrossCallReturnLabel_1:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 9)
        MOVX    @DPTR,A
//  129      
//  130   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  131                                 ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
//  132                                 TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 10, 
//  133                                 TransmitApp_Msg );   
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
        MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
        MOV     R1,#0xc
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  134 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M140_SensorFunction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M140_SensorFunction

        END
//  135 #endif
//  136 
//  137 #if defined(M160)
//  138 void M160_SensorFunction(void)
//  139 {
//  140   uint8 duty_M160 = 50;
//  141 
//  142   M160_Init();
//  143   M160_On(duty_M160);
//  144   /*
//  145   if (ch > 0)
//  146   {           
//  147     if (ch == 'U')
//  148     {
//  149       if (duty_M160 < 100)
//  150       {
//  151         duty_M160 = duty_M160 + 5;
//  152       }
//  153     }
//  154     
//  155     if (ch == 'N')
//  156     {
//  157       if (duty_M160 > 0)
//  158       {
//  159         duty_M160 = duty_M160 - 5;
//  160       }
//  161     }
//  162       
//  163     M160_On(duty_M160);
//  164   }
//  165   */
//  166   TransmitApp_Msg[0] = 1 + '0';  
//  167   TransmitApp_Msg[1] = 6 + '0';   
//  168   TransmitApp_Msg[2] = 0 + '0';        
//  169   TransmitApp_Msg[3] = ',';
//  170   TransmitApp_Msg[4] = 'A';   
//  171   TransmitApp_Msg[5] = ',';  
//  172   TransmitApp_Msg[6] = (duty / 100) + '0';
//  173   TransmitApp_Msg[7] = ((duty / 10) % 10) + '0';
//  174   TransmitApp_Msg[8] = (duty % 10) + '0';
//  175  
//  176   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  177                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC, 
//  178                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 9, 
//  179                                  TransmitApp_Msg ); 
//  180 }
//  181 #endif 
//  182 
//  183 #if defined(M170)
//  184 void M170_SensorFunction(void)
//  185 {
//  186     uint16 val;
//  187      
//  188     M170_Init();
//  189   
//  190     val = M170_GetValue();  
//  191     if (val > 2000)
//  192     {
//  193         val -= 2000;
//  194     }
//  195     else
//  196     {
//  197         val = 0;
//  198     }
//  199     val /= 120;
//  200             
//  201     if (val > 100)
//  202     {
//  203         val = 100;
//  204     }
//  205    
//  206     TransmitApp_Msg[0] = 1 + '0';  
//  207     TransmitApp_Msg[1] = 7 + '0';   
//  208     TransmitApp_Msg[2] = 0 + '0';        
//  209     TransmitApp_Msg[3] = ',';
//  210     TransmitApp_Msg[4] = 'A';   
//  211     TransmitApp_Msg[5] = ',';  
//  212     TransmitApp_Msg[6] = (val / 100) + '0';
//  213     TransmitApp_Msg[7] = ((val / 10) % 10) + '0';
//  214     TransmitApp_Msg[8] = (val % 10) + '0';
//  215 
//  216     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  217                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  218                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 9, 
//  219                                  TransmitApp_Msg );
//  220  }
//  221 #endif
//  222  
//  223 #if defined(M190)
//  224 void M190_SensorFunction(void)
//  225 {
//  226     uint16 val;
//  227 
//  228     M190_Init();
//  229     val = M190_GetValue();  
//  230 
//  231     if (val > 2000)
//  232     {
//  233         val -= 2000;
//  234     }
//  235     else
//  236     {
//  237         val = 0;
//  238     }
//  239     val /= 120;
//  240             
//  241     if (val > 100)
//  242     {
//  243         val = 100;
//  244     }
//  245     
//  246     TransmitApp_Msg[0] = 1 + '0';  
//  247     TransmitApp_Msg[1] = 9 + '0';   
//  248     TransmitApp_Msg[2] = 0 + '0';        
//  249     TransmitApp_Msg[3] = ',';
//  250     TransmitApp_Msg[4] = 'A';   
//  251     TransmitApp_Msg[5] = ',';  
//  252     TransmitApp_Msg[6] = (val / 100) + '0';
//  253     TransmitApp_Msg[7] = ((val / 10) % 10) + '0';
//  254     TransmitApp_Msg[8] = (val % 10) + '0';
//  255    
//  256     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, 
//  257                                  ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  258                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 9, 
//  259                                  TransmitApp_Msg );
//  260 }
//  261 #endif
//  262  
//  263 #if defined(M200)
//  264 void M200_SensorFunction(void)
//  265  {
//  266     // M200 module variable
//  267     uint16 temp, humi;
//  268       
//  269     // initilization the device
//  270     M200_Init();
//  271   
//  272     M200_GetValue();
//  273     temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
//  274     humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
//  275     if (humi > 999)
//  276     {
//  277       humi = 999;
//  278     }
//  279     if (temp > 999)
//  280     {
//  281       temp = 999;
//  282     }
//  283     
//  284     TransmitApp_Msg[0] = (humi / 100) + '0';
//  285     TransmitApp_Msg[1] = ((humi / 10) % 10) + '0';
//  286     TransmitApp_Msg[2] = '.';
//  287     TransmitApp_Msg[3] = (humi % 10) + '0';
//  288     TransmitApp_Msg[4] = ' ';
//  289     TransmitApp_Msg[5] = (temp / 100) + '0';
//  290     TransmitApp_Msg[6] = ((temp / 10) % 10) + '0';
//  291     TransmitApp_Msg[7] = '.';
//  292     TransmitApp_Msg[8] = (temp % 10) + '0';
//  293     
//  294     uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, 
//  295                                  ZCL_CLUSTER_ID_GEN_BASIC, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, 9, TransmitApp_Msg );
//  296  }
//  297 #endif
//  298  
//  299 #if defined(M270)
//  300 
//  301 void M270_SensorFunction(void)
//  302 {
//  303     static uint8 udo;
//  304 
//  305     M270_Init();
//  306     
//  307     if( ch == 'A' )
//  308     {
//  309         udo = 1;
//  310         M270_SetDO(udo);
//  311     }
//  312      
//  313     if( ch == 'D' )
//  314     {
//  315         udo = 0;
//  316         M270_SetDO(udo);
//  317     }
//  318 }
//  319 #endif
// 
// 335 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
// 102 bytes in segment XDATA_Z
// 
// 347 bytes of CODE  memory
// 102 bytes of XDATA memory
//
//Errors: none
//Warnings: none
