///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               19/Aug/2013  23:46:31 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Components\stack\zdo\ZDSecMgr.c           /
//    Command line       =  -f "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\GitHub\z-stack\Sensor        /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Components\stack\zdo\ZDSecMgr.c" -D       /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D      /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D           /
//                          End_Device -D M140 -D xPA2591 -lC                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\List\" -lA       /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint & Device\CC2530DB\"   /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530KB\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M140\List\ZDSecMgr.s5 /
//                          1                                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??APSME_IsDefaultTCLK?relay
        EXTERN ??APSME_LinkKeySet?relay
        EXTERN ??ZDSecMgrAddrMgrUpdate?relay
        EXTERN ??ZDSecMgrAddrStore?relay
        EXTERN ??ZDSecMgrAppKeyReq?relay
        EXTERN ??ZDSecMgrAssocDeviceAuth?relay
        EXTERN ??ZDSecMgrAuthNwkKey?relay
        EXTERN ??ZDSecMgrCtrlAdd?relay
        EXTERN ??ZDSecMgrCtrlLookup?relay
        EXTERN ??ZDSecMgrCtrlSet?relay
        EXTERN ??ZDSecMgrDeviceCtrlHandler?relay
        EXTERN ??ZDSecMgrDeviceEntryAdd?relay
        EXTERN ??ZDSecMgrDeviceJoin?relay
        EXTERN ??ZDSecMgrDeviceJoinFwd?relay
        EXTERN ??ZDSecMgrDeviceNew?relay
        EXTERN ??ZDSecMgrDeviceRemove?relay
        EXTERN ??ZDSecMgrDeviceValidate?relay
        EXTERN ??ZDSecMgrDeviceValidateRM?relay
        EXTERN ??ZDSecMgrDeviceValidateSKKE?relay
        EXTERN ??ZDSecMgrEntryLookup?relay
        EXTERN ??ZDSecMgrEntryLookupAMI?relay
        EXTERN ??ZDSecMgrEntryLookupExt?relay
        EXTERN ??ZDSecMgrEntryNew?relay
        EXTERN ??ZDSecMgrEstablishKey?relay
        EXTERN ??ZDSecMgrExtAddrLookup?relay
        EXTERN ??ZDSecMgrMasterKeyLoad?relay
        EXTERN ??ZDSecMgrMasterKeyLookup?relay
        EXTERN ??ZDSecMgrMasterKeyStore?relay
        EXTERN ??ZDSecMgrSendMasterKey?relay
        EXTERN ??ZDSecMgrSendNwkKey?relay
        EXTERN ??ZDSecMgrTCDataLoad?relay
        EXTERN ??ZDSecMgrTCExtAddrCheck?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UL_GT_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??APSME_IsDefaultTCLK?relay
        FUNCTION ??APSME_IsDefaultTCLK?relay,0203H
        PUBLIC ??APSME_KeyFwdToChild?relay
        FUNCTION ??APSME_KeyFwdToChild?relay,0203H
        PUBLIC ??APSME_LinkKeyDataGet?relay
        FUNCTION ??APSME_LinkKeyDataGet?relay,0203H
        PUBLIC ??APSME_LinkKeySet?relay
        FUNCTION ??APSME_LinkKeySet?relay,0203H
        PUBLIC ??APSME_MasterKeyGet?relay
        FUNCTION ??APSME_MasterKeyGet?relay,0203H
        PUBLIC ??APSME_SKA_TimerExpired?relay
        FUNCTION ??APSME_SKA_TimerExpired?relay,0203H
        PUBLIC ??APSME_TCLinkKeyInit?relay
        FUNCTION ??APSME_TCLinkKeyInit?relay,0203H
        PUBLIC ??APSME_TCLinkKeyLoad?relay
        FUNCTION ??APSME_TCLinkKeyLoad?relay,0203H
        PUBLIC ??APSME_TCLinkKeySync?relay
        FUNCTION ??APSME_TCLinkKeySync?relay,0203H
        PUBLIC ??ZDSecMgrAPSRemove?relay
        FUNCTION ??ZDSecMgrAPSRemove?relay,0203H
        PUBLIC ??ZDSecMgrAddLinkKey?relay
        FUNCTION ??ZDSecMgrAddLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrAddrMgrUpdate?relay
        FUNCTION ??ZDSecMgrAddrMgrUpdate?relay,0203H
        PUBLIC ??ZDSecMgrAddrStore?relay
        FUNCTION ??ZDSecMgrAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyGet?relay
        FUNCTION ??ZDSecMgrAppKeyGet?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyReq?relay
        FUNCTION ??ZDSecMgrAppKeyReq?relay,0203H
        PUBLIC ??ZDSecMgrAssocDeviceAuth?relay
        FUNCTION ??ZDSecMgrAssocDeviceAuth?relay,0203H
        PUBLIC ??ZDSecMgrAuthInitiate?relay
        FUNCTION ??ZDSecMgrAuthInitiate?relay,0203H
        PUBLIC ??ZDSecMgrAuthNwkKey?relay
        FUNCTION ??ZDSecMgrAuthNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateCfm?relay
        FUNCTION ??ZDSecMgrAuthenticateCfm?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateInd?relay
        FUNCTION ??ZDSecMgrAuthenticateInd?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationCheck?relay
        FUNCTION ??ZDSecMgrAuthenticationCheck?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationSet?relay
        FUNCTION ??ZDSecMgrAuthenticationSet?relay,0203H
        PUBLIC ??ZDSecMgrConfig?relay
        FUNCTION ??ZDSecMgrConfig?relay,0203H
        PUBLIC ??ZDSecMgrCtrlAdd?relay
        FUNCTION ??ZDSecMgrCtrlAdd?relay,0203H
        PUBLIC ??ZDSecMgrCtrlInit?relay
        FUNCTION ??ZDSecMgrCtrlInit?relay,0203H
        PUBLIC ??ZDSecMgrCtrlLookup?relay
        FUNCTION ??ZDSecMgrCtrlLookup?relay,0203H
        PUBLIC ??ZDSecMgrCtrlRelease?relay
        FUNCTION ??ZDSecMgrCtrlRelease?relay,0203H
        PUBLIC ??ZDSecMgrCtrlReset?relay
        FUNCTION ??ZDSecMgrCtrlReset?relay,0203H
        PUBLIC ??ZDSecMgrCtrlSet?relay
        FUNCTION ??ZDSecMgrCtrlSet?relay,0203H
        PUBLIC ??ZDSecMgrCtrlTerm?relay
        FUNCTION ??ZDSecMgrCtrlTerm?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlHandler?relay
        FUNCTION ??ZDSecMgrDeviceCtrlHandler?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlSetup?relay
        FUNCTION ??ZDSecMgrDeviceCtrlSetup?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlUpdate?relay
        FUNCTION ??ZDSecMgrDeviceCtrlUpdate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryAdd?relay
        FUNCTION ??ZDSecMgrDeviceEntryAdd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryRemove?relay
        FUNCTION ??ZDSecMgrDeviceEntryRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoin?relay
        FUNCTION ??ZDSecMgrDeviceJoin?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinDirect?relay
        FUNCTION ??ZDSecMgrDeviceJoinDirect?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinFwd?relay
        FUNCTION ??ZDSecMgrDeviceJoinFwd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceNew?relay
        FUNCTION ??ZDSecMgrDeviceNew?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemove?relay
        FUNCTION ??ZDSecMgrDeviceRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemoveByExtAddr?relay
        FUNCTION ??ZDSecMgrDeviceRemoveByExtAddr?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidate?relay
        FUNCTION ??ZDSecMgrDeviceValidate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateCM?relay
        FUNCTION ??ZDSecMgrDeviceValidateCM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateRM?relay
        FUNCTION ??ZDSecMgrDeviceValidateRM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateSKKE?relay
        FUNCTION ??ZDSecMgrDeviceValidateSKKE?relay,0203H
        PUBLIC ??ZDSecMgrEntryFree?relay
        FUNCTION ??ZDSecMgrEntryFree?relay,0203H
        PUBLIC ??ZDSecMgrEntryInit?relay
        FUNCTION ??ZDSecMgrEntryInit?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookup?relay
        FUNCTION ??ZDSecMgrEntryLookup?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupAMI?relay
        FUNCTION ??ZDSecMgrEntryLookupAMI?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupExt?relay
        FUNCTION ??ZDSecMgrEntryLookupExt?relay,0203H
        PUBLIC ??ZDSecMgrEntryNew?relay
        FUNCTION ??ZDSecMgrEntryNew?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKey?relay
        FUNCTION ??ZDSecMgrEstablishKey?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyCfm?relay
        FUNCTION ??ZDSecMgrEstablishKeyCfm?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyInd?relay
        FUNCTION ??ZDSecMgrEstablishKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrEvent?relay
        FUNCTION ??ZDSecMgrEvent?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrLookup?relay
        FUNCTION ??ZDSecMgrExtAddrLookup?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrStore?relay
        FUNCTION ??ZDSecMgrExtAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyInit?relay
        FUNCTION ??ZDSecMgrMasterKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLoad?relay
        FUNCTION ??ZDSecMgrMasterKeyLoad?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLookup?relay
        FUNCTION ??ZDSecMgrMasterKeyLookup?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyStore?relay
        FUNCTION ??ZDSecMgrMasterKeyStore?relay,0203H
        PUBLIC ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoining?relay
        FUNCTION ??ZDSecMgrPermitJoining?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoiningTimeout?relay
        FUNCTION ??ZDSecMgrPermitJoiningTimeout?relay,0203H
        PUBLIC ??ZDSecMgrRemoveDeviceInd?relay
        FUNCTION ??ZDSecMgrRemoveDeviceInd?relay,0203H
        PUBLIC ??ZDSecMgrRequestAppKey?relay
        FUNCTION ??ZDSecMgrRequestAppKey?relay,0203H
        PUBLIC ??ZDSecMgrRequestKeyInd?relay
        FUNCTION ??ZDSecMgrRequestKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrSendMasterKey?relay
        FUNCTION ??ZDSecMgrSendMasterKey?relay,0203H
        PUBLIC ??ZDSecMgrSendNwkKey?relay
        FUNCTION ??ZDSecMgrSendNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrSetupPartner?relay
        FUNCTION ??ZDSecMgrSetupPartner?relay,0203H
        PUBLIC ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrTCDataLoad?relay
        FUNCTION ??ZDSecMgrTCDataLoad?relay,0203H
        PUBLIC ??ZDSecMgrTCExtAddrCheck?relay
        FUNCTION ??ZDSecMgrTCExtAddrCheck?relay,0203H
        PUBLIC ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,0203H
        PUBLIC APSME_IsDefaultTCLK
        FUNCTION APSME_IsDefaultTCLK,0203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC APSME_LinkKeyDataGet
        FUNCTION APSME_LinkKeyDataGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBLIC APSME_MasterKeyGet
        FUNCTION APSME_MasterKeyGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_SKA_TimerExpired
        FUNCTION APSME_SKA_TimerExpired,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC APSME_TCLinkKeyInit
        FUNCTION APSME_TCLinkKeyInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC APSME_TCLinkKeyLoad
        FUNCTION APSME_TCLinkKeyLoad,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 65, STACK
        PUBLIC APSME_TCLinkKeySync
        FUNCTION APSME_TCLinkKeySync,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrAddrMgrUpdate
        FUNCTION ZDSecMgrAddrMgrUpdate,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthInitiate
        FUNCTION ZDSecMgrAuthInitiate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateCfm
        FUNCTION ZDSecMgrAuthenticateCfm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateInd
        FUNCTION ZDSecMgrAuthenticateInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrCtrlAdd
        FUNCTION ZDSecMgrCtrlAdd,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlData
        PUBLIC ZDSecMgrCtrlInit
        FUNCTION ZDSecMgrCtrlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlLookup
        FUNCTION ZDSecMgrCtrlLookup,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrCtrlRelease
        FUNCTION ZDSecMgrCtrlRelease,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlReset
        FUNCTION ZDSecMgrCtrlReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlSet
        FUNCTION ZDSecMgrCtrlSet,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrCtrlTerm
        FUNCTION ZDSecMgrCtrlTerm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceCtrlHandler
        FUNCTION ZDSecMgrDeviceCtrlHandler,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceCtrlSetup
        FUNCTION ZDSecMgrDeviceCtrlSetup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceCtrlUpdate
        FUNCTION ZDSecMgrDeviceCtrlUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryAdd
        FUNCTION ZDSecMgrDeviceEntryAdd,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryRemove
        FUNCTION ZDSecMgrDeviceEntryRemove,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceValidateCM
        FUNCTION ZDSecMgrDeviceValidateCM,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateSKKE
        FUNCTION ZDSecMgrDeviceValidateSKKE,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEstablishKey
        FUNCTION ZDSecMgrEstablishKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrEstablishKeyCfm
        FUNCTION ZDSecMgrEstablishKeyCfm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrEstablishKeyInd
        FUNCTION ZDSecMgrEstablishKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDSecMgrEvent
        FUNCTION ZDSecMgrEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrMasterKeyData
        PUBLIC ZDSecMgrMasterKeyInit
        FUNCTION ZDSecMgrMasterKeyInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrMasterKeyLoad
        FUNCTION ZDSecMgrMasterKeyLoad,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrMasterKeyLookup
        FUNCTION ZDSecMgrMasterKeyLookup,0203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrMasterKeyStore
        FUNCTION ZDSecMgrMasterKeyStore,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSendMasterKey
        FUNCTION ZDSecMgrSendMasterKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDSecMgrSetupPartner
        FUNCTION ZDSecMgrSetupPartner,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrTCDataLoaded
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTCMasterKey
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
osal_memcpy         SYMBOL "osal_memcpy"
osal_memset         SYMBOL "osal_memset"
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
APSME_EstablishKeyReq SYMBOL "APSME_EstablishKeyReq"
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AssocGetWithExt     SYMBOL "AssocGetWithExt"
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
AssocGetWithShort   SYMBOL "AssocGetWithShort"
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
APSME_AuthenticateReq SYMBOL "APSME_AuthenticateReq"
osal_set_event      SYMBOL "osal_set_event"
APSME_SecurityNM    SYMBOL "APSME_SecurityNM"
AssocMatchDeviceStatus SYMBOL "AssocMatchDeviceStatus"
AssocRemove         SYMBOL "AssocRemove"
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
AddrMgrExtAddrEqual SYMBOL "AddrMgrExtAddrEqual"
APSME_EstablishKeyRsp SYMBOL "APSME_EstablishKeyRsp"
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
osal_nv_write       SYMBOL "osal_nv_write"
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
??APSME_AuthenticateReq?relay SYMBOL "?relay", APSME_AuthenticateReq
??APSME_EstablishKeyReq?relay SYMBOL "?relay", APSME_EstablishKeyReq
??APSME_EstablishKeyRsp?relay SYMBOL "?relay", APSME_EstablishKeyRsp
??APSME_LookupExtAddr?relay SYMBOL "?relay", APSME_LookupExtAddr
??APSME_LookupNwkAddr?relay SYMBOL "?relay", APSME_LookupNwkAddr
??APSME_RemoveDeviceReq?relay SYMBOL "?relay", APSME_RemoveDeviceReq
??APSME_RequestKeyReq?relay SYMBOL "?relay", APSME_RequestKeyReq
??APSME_SecurityNM?relay SYMBOL "?relay", APSME_SecurityNM
??APSME_TransportKeyReq?relay SYMBOL "?relay", APSME_TransportKeyReq
??APSME_UpdateDeviceReq?relay SYMBOL "?relay", APSME_UpdateDeviceReq
??AddrMgrEntryGet?relay SYMBOL "?relay", AddrMgrEntryGet
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
??AddrMgrEntryRelease?relay SYMBOL "?relay", AddrMgrEntryRelease
??AddrMgrEntryUpdate?relay SYMBOL "?relay", AddrMgrEntryUpdate
??AddrMgrExtAddrEqual?relay SYMBOL "?relay", AddrMgrExtAddrEqual
??AddrMgrExtAddrLookup?relay SYMBOL "?relay", AddrMgrExtAddrLookup
??AddrMgrExtAddrSet?relay SYMBOL "?relay", AddrMgrExtAddrSet
??AddrMgrExtAddrValid?relay SYMBOL "?relay", AddrMgrExtAddrValid
??AssocGetWithExt?relay SYMBOL "?relay", AssocGetWithExt
??AssocGetWithShort?relay SYMBOL "?relay", AssocGetWithShort
??AssocMatchDeviceStatus?relay SYMBOL "?relay", AssocMatchDeviceStatus
??AssocRemove?relay SYMBOL "?relay", AssocRemove
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_LeaveReq?relay SYMBOL "?relay", NLME_LeaveReq
??SSP_GetTrueRand?relay SYMBOL "?relay", SSP_GetTrueRand
??SSP_SwitchNwkKey?relay SYMBOL "?relay", SSP_SwitchNwkKey
??SSP_UpdateNwkKey?relay SYMBOL "?relay", SSP_UpdateNwkKey
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
APSME_IsDefaultTCLK SYMBOL "APSME_IsDefaultTCLK"
??APSME_IsDefaultTCLK?relay SYMBOL "?relay", APSME_IsDefaultTCLK
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
??APSME_KeyFwdToChild?relay SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyDataGet SYMBOL "APSME_LinkKeyDataGet"
??APSME_LinkKeyDataGet?relay SYMBOL "?relay", APSME_LinkKeyDataGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
??APSME_LinkKeySet?relay SYMBOL "?relay", APSME_LinkKeySet
APSME_MasterKeyGet  SYMBOL "APSME_MasterKeyGet"
??APSME_MasterKeyGet?relay SYMBOL "?relay", APSME_MasterKeyGet
APSME_SKA_TimerExpired SYMBOL "APSME_SKA_TimerExpired"
??APSME_SKA_TimerExpired?relay SYMBOL "?relay", APSME_SKA_TimerExpired
APSME_TCLinkKeyInit SYMBOL "APSME_TCLinkKeyInit"
??APSME_TCLinkKeyInit?relay SYMBOL "?relay", APSME_TCLinkKeyInit
APSME_TCLinkKeyLoad SYMBOL "APSME_TCLinkKeyLoad"
??APSME_TCLinkKeyLoad?relay SYMBOL "?relay", APSME_TCLinkKeyLoad
APSME_TCLinkKeySync SYMBOL "APSME_TCLinkKeySync"
??APSME_TCLinkKeySync?relay SYMBOL "?relay", APSME_TCLinkKeySync
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
??ZDSecMgrAPSRemove?relay SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
??ZDSecMgrAddLinkKey?relay SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrMgrUpdate SYMBOL "ZDSecMgrAddrMgrUpdate"
??ZDSecMgrAddrMgrUpdate?relay SYMBOL "?relay", ZDSecMgrAddrMgrUpdate
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
??ZDSecMgrAddrStore?relay SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
??ZDSecMgrAppKeyGet?relay SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
??ZDSecMgrAppKeyReq?relay SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
??ZDSecMgrAssocDeviceAuth?relay SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthInitiate SYMBOL "ZDSecMgrAuthInitiate"
??ZDSecMgrAuthInitiate?relay SYMBOL "?relay", ZDSecMgrAuthInitiate
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
??ZDSecMgrAuthNwkKey?relay SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticateCfm SYMBOL "ZDSecMgrAuthenticateCfm"
??ZDSecMgrAuthenticateCfm?relay SYMBOL "?relay", ZDSecMgrAuthenticateCfm
ZDSecMgrAuthenticateInd SYMBOL "ZDSecMgrAuthenticateInd"
??ZDSecMgrAuthenticateInd?relay SYMBOL "?relay", ZDSecMgrAuthenticateInd
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
??ZDSecMgrAuthenticationCheck?relay SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
??ZDSecMgrAuthenticationSet?relay SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
??ZDSecMgrConfig?relay SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrCtrlAdd     SYMBOL "ZDSecMgrCtrlAdd"
??ZDSecMgrCtrlAdd?relay SYMBOL "?relay", ZDSecMgrCtrlAdd
ZDSecMgrCtrlInit    SYMBOL "ZDSecMgrCtrlInit"
??ZDSecMgrCtrlInit?relay SYMBOL "?relay", ZDSecMgrCtrlInit
ZDSecMgrCtrlLookup  SYMBOL "ZDSecMgrCtrlLookup"
??ZDSecMgrCtrlLookup?relay SYMBOL "?relay", ZDSecMgrCtrlLookup
ZDSecMgrCtrlRelease SYMBOL "ZDSecMgrCtrlRelease"
??ZDSecMgrCtrlRelease?relay SYMBOL "?relay", ZDSecMgrCtrlRelease
ZDSecMgrCtrlReset   SYMBOL "ZDSecMgrCtrlReset"
??ZDSecMgrCtrlReset?relay SYMBOL "?relay", ZDSecMgrCtrlReset
ZDSecMgrCtrlSet     SYMBOL "ZDSecMgrCtrlSet"
??ZDSecMgrCtrlSet?relay SYMBOL "?relay", ZDSecMgrCtrlSet
ZDSecMgrCtrlTerm    SYMBOL "ZDSecMgrCtrlTerm"
??ZDSecMgrCtrlTerm?relay SYMBOL "?relay", ZDSecMgrCtrlTerm
ZDSecMgrDeviceCtrlHandler SYMBOL "ZDSecMgrDeviceCtrlHandler"
??ZDSecMgrDeviceCtrlHandler?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlHandler
ZDSecMgrDeviceCtrlSetup SYMBOL "ZDSecMgrDeviceCtrlSetup"
??ZDSecMgrDeviceCtrlSetup?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlSetup
ZDSecMgrDeviceCtrlUpdate SYMBOL "ZDSecMgrDeviceCtrlUpdate"
??ZDSecMgrDeviceCtrlUpdate?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlUpdate
ZDSecMgrDeviceEntryAdd SYMBOL "ZDSecMgrDeviceEntryAdd"
??ZDSecMgrDeviceEntryAdd?relay SYMBOL "?relay", ZDSecMgrDeviceEntryAdd
ZDSecMgrDeviceEntryRemove SYMBOL "ZDSecMgrDeviceEntryRemove"
??ZDSecMgrDeviceEntryRemove?relay SYMBOL "?relay", ZDSecMgrDeviceEntryRemove
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
??ZDSecMgrDeviceJoin?relay SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
??ZDSecMgrDeviceJoinDirect?relay SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
??ZDSecMgrDeviceJoinFwd?relay SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
??ZDSecMgrDeviceNew?relay SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
??ZDSecMgrDeviceRemove?relay SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
??ZDSecMgrDeviceRemoveByExtAddr?relay SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
??ZDSecMgrDeviceValidate?relay SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateCM SYMBOL "ZDSecMgrDeviceValidateCM"
??ZDSecMgrDeviceValidateCM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateCM
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
??ZDSecMgrDeviceValidateRM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrDeviceValidateSKKE SYMBOL "ZDSecMgrDeviceValidateSKKE"
??ZDSecMgrDeviceValidateSKKE?relay SYMBOL "?relay", ZDSecMgrDeviceValidateSKKE
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
??ZDSecMgrEntryFree?relay SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
??ZDSecMgrEntryInit?relay SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
??ZDSecMgrEntryLookup?relay SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
??ZDSecMgrEntryLookupAMI?relay SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
??ZDSecMgrEntryLookupExt?relay SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
??ZDSecMgrEntryNew?relay SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrEstablishKey SYMBOL "ZDSecMgrEstablishKey"
??ZDSecMgrEstablishKey?relay SYMBOL "?relay", ZDSecMgrEstablishKey
ZDSecMgrEstablishKeyCfm SYMBOL "ZDSecMgrEstablishKeyCfm"
??ZDSecMgrEstablishKeyCfm?relay SYMBOL "?relay", ZDSecMgrEstablishKeyCfm
ZDSecMgrEstablishKeyInd SYMBOL "ZDSecMgrEstablishKeyInd"
??ZDSecMgrEstablishKeyInd?relay SYMBOL "?relay", ZDSecMgrEstablishKeyInd
ZDSecMgrEvent       SYMBOL "ZDSecMgrEvent"
??ZDSecMgrEvent?relay SYMBOL "?relay", ZDSecMgrEvent
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
??ZDSecMgrExtAddrLookup?relay SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
??ZDSecMgrExtAddrStore?relay SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrMasterKeyInit SYMBOL "ZDSecMgrMasterKeyInit"
??ZDSecMgrMasterKeyInit?relay SYMBOL "?relay", ZDSecMgrMasterKeyInit
ZDSecMgrMasterKeyLoad SYMBOL "ZDSecMgrMasterKeyLoad"
??ZDSecMgrMasterKeyLoad?relay SYMBOL "?relay", ZDSecMgrMasterKeyLoad
ZDSecMgrMasterKeyLookup SYMBOL "ZDSecMgrMasterKeyLookup"
??ZDSecMgrMasterKeyLookup?relay SYMBOL "?relay", ZDSecMgrMasterKeyLookup
ZDSecMgrMasterKeyStore SYMBOL "ZDSecMgrMasterKeyStore"
??ZDSecMgrMasterKeyStore?relay SYMBOL "?relay", ZDSecMgrMasterKeyStore
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
??ZDSecMgrPermitJoining?relay SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
??ZDSecMgrPermitJoiningTimeout?relay SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
??ZDSecMgrRemoveDeviceInd?relay SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
??ZDSecMgrRequestAppKey?relay SYMBOL "?relay", ZDSecMgrRequestAppKey
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
??ZDSecMgrRequestKeyInd?relay SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSendMasterKey SYMBOL "ZDSecMgrSendMasterKey"
??ZDSecMgrSendMasterKey?relay SYMBOL "?relay", ZDSecMgrSendMasterKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
??ZDSecMgrSendNwkKey?relay SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetupPartner SYMBOL "ZDSecMgrSetupPartner"
??ZDSecMgrSetupPartner?relay SYMBOL "?relay", ZDSecMgrSetupPartner
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
??ZDSecMgrTCDataLoad?relay SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
??ZDSecMgrTCExtAddrCheck?relay SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyReq
        FUNCTION APSME_EstablishKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_AuthenticateReq
        FUNCTION APSME_AuthenticateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityNM
        FUNCTION APSME_SecurityNM,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMatchDeviceStatus
        FUNCTION AssocMatchDeviceStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrEqual
        FUNCTION AddrMgrExtAddrEqual,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyRsp
        FUNCTION APSME_EstablishKeyRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSME_AuthenticateReq?relay
        FUNCTION ??APSME_AuthenticateReq?relay,00H
        EXTERN ??APSME_EstablishKeyReq?relay
        FUNCTION ??APSME_EstablishKeyReq?relay,00H
        EXTERN ??APSME_EstablishKeyRsp?relay
        FUNCTION ??APSME_EstablishKeyRsp?relay,00H
        EXTERN ??APSME_LookupExtAddr?relay
        FUNCTION ??APSME_LookupExtAddr?relay,00H
        EXTERN ??APSME_LookupNwkAddr?relay
        FUNCTION ??APSME_LookupNwkAddr?relay,00H
        EXTERN ??APSME_RemoveDeviceReq?relay
        FUNCTION ??APSME_RemoveDeviceReq?relay,00H
        EXTERN ??APSME_RequestKeyReq?relay
        FUNCTION ??APSME_RequestKeyReq?relay,00H
        EXTERN ??APSME_SecurityNM?relay
        FUNCTION ??APSME_SecurityNM?relay,00H
        EXTERN ??APSME_TransportKeyReq?relay
        FUNCTION ??APSME_TransportKeyReq?relay,00H
        EXTERN ??APSME_UpdateDeviceReq?relay
        FUNCTION ??APSME_UpdateDeviceReq?relay,00H
        EXTERN ??AddrMgrEntryGet?relay
        FUNCTION ??AddrMgrEntryGet?relay,00H
        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrEntryRelease?relay
        FUNCTION ??AddrMgrEntryRelease?relay,00H
        EXTERN ??AddrMgrEntryUpdate?relay
        FUNCTION ??AddrMgrEntryUpdate?relay,00H
        EXTERN ??AddrMgrExtAddrEqual?relay
        FUNCTION ??AddrMgrExtAddrEqual?relay,00H
        EXTERN ??AddrMgrExtAddrLookup?relay
        FUNCTION ??AddrMgrExtAddrLookup?relay,00H
        EXTERN ??AddrMgrExtAddrSet?relay
        FUNCTION ??AddrMgrExtAddrSet?relay,00H
        EXTERN ??AddrMgrExtAddrValid?relay
        FUNCTION ??AddrMgrExtAddrValid?relay,00H
        EXTERN ??AssocGetWithExt?relay
        FUNCTION ??AssocGetWithExt?relay,00H
        EXTERN ??AssocGetWithShort?relay
        FUNCTION ??AssocGetWithShort?relay,00H
        EXTERN ??AssocMatchDeviceStatus?relay
        FUNCTION ??AssocMatchDeviceStatus?relay,00H
        EXTERN ??AssocRemove?relay
        FUNCTION ??AssocRemove?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_LeaveReq?relay
        FUNCTION ??NLME_LeaveReq?relay,00H
        EXTERN ??SSP_GetTrueRand?relay
        FUNCTION ??SSP_GetTrueRand?relay,00H
        EXTERN ??SSP_SwitchNwkKey?relay
        FUNCTION ??SSP_SwitchNwkKey?relay,00H
        EXTERN ??SSP_UpdateNwkKey?relay
        FUNCTION ??SSP_UpdateNwkKey?relay,00H
        EXTERN ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ZDAppTaskID
        EXTERN _NIB
        EXTERN defaultTCLinkKey
        EXTERN devState
        EXTERN zgPreConfigKey
        EXTERN zgPreConfigKeys
        EXTERN zgSecurePermitJoin
        EXTERN zgUseDefaultTCLK

// D:\GitHub\z-stack\Sensor Network Example\Components\stack\zdo\ZDSecMgr.c
//    1 #ifdef __cplusplus
//    2 extern "C"
//    3 {
//    4 #endif
//    5 
//    6 #include "ZComdef.h"
//    7 #include "OSAL.h"
//    8 #include "OSAL_NV.h"
//    9 #include "ZGlobals.h"
//   10 #include "ssp.h"
//   11 #include "nwk_globals.h"
//   12 #include "nwk.h"
//   13 #include "NLMEDE.h"
//   14 #include "AddrMgr.h"
//   15 #include "AssocList.h"
//   16 #include "APSMEDE.h"
//   17 #include "AF.h"
//   18 #include "ZDConfig.h"
//   19 #include "ZDApp.h"
//   20 #include "ZDSecMgr.h"
//   21 
//   22 // maximum number of devices managed by this Security Manager
//   23 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   24   #define ZDSECMGR_DEVICE_MAX 3
//   25 #endif
//   26 
//   27 // total number of preconfigured devices (EXT address, MASTER key)
//   28 //devtag.pro.security
//   29 //#define ZDSECMGR_PRECONFIG_MAX ZDSECMGR_DEVICE_MAX
//   30 #define ZDSECMGR_PRECONFIG_MAX 0
//   31 
//   32 // maximum number of MASTER keys this device may hold
//   33 #define ZDSECMGR_MASTERKEY_MAX ZDSECMGR_DEVICE_MAX
//   34 
//   35 // maximum number of LINK keys this device may store
//   36 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   37 
//   38 // total number of devices under control - authentication, SKKE, etc.
//   39 #define ZDSECMGR_CTRL_MAX ZDSECMGR_DEVICE_MAX
//   40 
//   41 // total number of stored devices
//   42 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   43   #define ZDSECMGR_STORED_DEVICES 3
//   44 #endif
//   45   
//   46 // Total number of preconfigured trust center link key
//   47 #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
//   48   #define ZDSECMGR_TC_DEVICE_MAX 1
//   49 #endif
//   50   
//   51 #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
//   52   #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
//   53 #endif
//   54   
//   55 #define ZDSECMGR_CTRL_NONE       0
//   56 #define ZDSECMGR_CTRL_INIT       1
//   57 #define ZDSECMGR_CTRL_TK_MASTER  2
//   58 #define ZDSECMGR_CTRL_SKKE_INIT  3
//   59 #define ZDSECMGR_CTRL_SKKE_WAIT  4
//   60 #define ZDSECMGR_CTRL_SKKE_DONE  5
//   61 #define ZDSECMGR_CTRL_SKKE_FAIL  6
//   62 #define ZDSECMGR_CTRL_TK_NWK     7
//   63 
//   64 #define ZDSECMGR_CTRL_BASE_CNTR      1
//   65 #define ZDSECMGR_CTRL_SKKE_INIT_CNTR 1
//   66 #define ZDSECMGR_CTRL_TK_NWK_CNTR    1
//   67 
//   68 // set SKA slot maximum
//   69 #define ZDSECMGR_SKA_SLOT_MAX 1
//   70 
//   71 // APSME Stub Implementations
//   72 #define ZDSecMgrMasterKeyGet   APSME_MasterKeyGet
//   73 #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
//   74 #define ZDSecMgrLinkKeyDataGet APSME_LinkKeyDataGet
//   75 #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
//   76 
//   77 #if !defined( MAX_APS_FRAMECOUNTER_CHANGES )
//   78   // The number of times the frame counter can change before
//   79   // saving to NV
//   80   #define MAX_APS_FRAMECOUNTER_CHANGES    10
//   81 #endif
//   82 
//   83 /******************************************************************************
//   84  * TYPEDEFS
//   85  */
//   86 typedef struct
//   87 {
//   88   uint8 extAddr[Z_EXTADDR_LEN];
//   89   uint8 key[SEC_KEY_LEN];
//   90 } ZDSecMgrPreConfigData_t;
//   91 
//   92 typedef struct
//   93 {
//   94   uint16 ami;
//   95   uint8  key[SEC_KEY_LEN];
//   96 } ZDSecMgrMasterKeyData_t;
//   97 
//   98 //should match APSME_LinkKeyData_t;
//   99 typedef struct
//  100 {
//  101   uint8               key[SEC_KEY_LEN];
//  102   APSME_LinkKeyData_t apsmelkd;
//  103 } ZDSecMgrLinkKeyData_t;
//  104 
//  105 typedef struct
//  106 {
//  107   uint16                ami;
//  108   ZDSecMgrLinkKeyData_t lkd;
//  109   ZDSecMgr_Authentication_Option authenticateOption;
//  110 } ZDSecMgrEntry_t;
//  111 
//  112 typedef struct
//  113 {
//  114   ZDSecMgrEntry_t* entry;
//  115   uint16           parentAddr;
//  116   uint8            secure;
//  117   uint8            state;
//  118   uint8            cntr;
//  119   //uint8          next;
//  120 } ZDSecMgrCtrl_t;
//  121 
//  122 typedef struct
//  123 {
//  124   uint16          nwkAddr;
//  125   uint8*          extAddr;
//  126   uint16          parentAddr;
//  127   uint8           secure;
//  128   uint8           devStatus;
//  129   ZDSecMgrCtrl_t* ctrl;
//  130 } ZDSecMgrDevice_t;
//  131 
//  132 /******************************************************************************
//  133  * LOCAL VARIABLES
//  134  */
//  135 #if 0 // Taken out because the following functionality is only used for test
//  136       // purpose. A more efficient (above) way is used. It can be put
//  137       // back in if customers request for a white/black list feature.
//  138 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  139 {
//  140   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  141   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  142   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  143 };
//  144 #endif
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  146 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  147   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  148 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  149 uint8 ZDSecMgrTCMasterKey[SEC_KEY_LEN] =
ZDSecMgrTCMasterKey:
        DS 16
        REQUIRE `?<Initializer for ZDSecMgrTCMasterKey>`
        REQUIRE __INIT_XDATA_I
//  150   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  151    0x89,0x67,0x45,0x23,0x01,0xEF,0xCD,0xAB};
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  153 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  154 uint8 ZDSecMgrTCDataLoaded    = FALSE;
ZDSecMgrTCDataLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  155 
//  156 //devtag.pro.security - remove this
//  157 #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  158 const ZDSecMgrPreConfigData_t ZDSecMgrPreConfigData[ZDSECMGR_PRECONFIG_MAX] =
//  159 {
//  160   //---------------------------------------------------------------------------
//  161   // DEVICE A
//  162   //---------------------------------------------------------------------------
//  163   {
//  164     // extAddr
//  165     {0x7C,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  166 
//  167     // key
//  168     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  169      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  170   },
//  171   //---------------------------------------------------------------------------
//  172   // DEVICE B
//  173   //---------------------------------------------------------------------------
//  174   {
//  175     // extAddr
//  176     {0x84,0x03,0x00,0x00,0x00,0x4B,0x12,0x00},
//  177 
//  178     // key
//  179     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  180      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  181   },
//  182   //---------------------------------------------------------------------------
//  183   // DEVICE C
//  184   //---------------------------------------------------------------------------
//  185   {
//  186     // extAddr
//  187     {0x3E,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  188 
//  189     // key
//  190     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  191      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  192   },
//  193 };
//  194 #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  195 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  196 ZDSecMgrMasterKeyData_t* ZDSecMgrMasterKeyData = NULL;
ZDSecMgrMasterKeyData:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  197 ZDSecMgrEntry_t*         ZDSecMgrEntries       = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  198 ZDSecMgrCtrl_t*          ZDSecMgrCtrlData      = NULL;
ZDSecMgrCtrlData:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  199 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr );
//  200 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  201 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  202 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  203 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  204 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  205 APSME_TCLinkKey_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 32
        REQUIRE __INIT_XDATA_Z
//  206 
//  207 /******************************************************************************
//  208  * PRIVATE FUNCTIONS
//  209  *
//  210  *   ZDSecMgrMasterKeyInit
//  211  *   ZDSecMgrAddrStore
//  212  *   ZDSecMgrExtAddrStore
//  213  *   ZDSecMgrExtAddrLookup
//  214  *   ZDSecMgrMasterKeyLookup
//  215  *   ZDSecMgrMasterKeyStore
//  216  *   ZDSecMgrEntryInit
//  217  *   ZDSecMgrEntryLookup
//  218  *   ZDSecMgrEntryLookupAMI
//  219  *   ZDSecMgrEntryLookupExt
//  220  *   ZDSecMgrEntryFree
//  221  *   ZDSecMgrEntryNew
//  222  *   ZDSecMgrCtrlInit
//  223  *   ZDSecMgrCtrlRelease
//  224  *   ZDSecMgrCtrlLookup
//  225  *   ZDSecMgrCtrlSet
//  226  *   ZDSecMgrCtrlAdd
//  227  *   ZDSecMgrCtrlTerm
//  228  *   ZDSecMgrCtrlReset
//  229  *   ZDSecMgrMasterKeyLoad
//  230  *   ZDSecMgrAppKeyGet
//  231  *   ZDSecMgrAppKeyReq
//  232  *   ZDSecMgrEstablishKey
//  233  *   ZDSecMgrSendMasterKey
//  234  *   ZDSecMgrSendNwkKey
//  235  *   ZDSecMgrDeviceEntryRemove
//  236  *   ZDSecMgrDeviceEntryAdd
//  237  *   ZDSecMgrDeviceCtrlHandler
//  238  *   ZDSecMgrDeviceCtrlSetup
//  239  *   ZDSecMgrDeviceCtrlUpdate
//  240  *   ZDSecMgrDeviceRemove
//  241  *   ZDSecMgrDeviceValidateSKKE
//  242  *   ZDSecMgrDeviceValidateRM
//  243  *   ZDSecMgrDeviceValidateCM
//  244  *   ZDSecMgrDeviceValidate
//  245  *   ZDSecMgrDeviceJoin
//  246  *   ZDSecMgrDeviceJoinDirect
//  247  *   ZDSecMgrDeviceJoinFwd
//  248  *   ZDSecMgrDeviceNew
//  249  *   ZDSecMgrAssocDeviceAuth
//  250  *   ZDSecMgrAuthInitiate
//  251  *   ZDSecMgrAuthNwkKey
//  252  *   APSME_TCLinkKeyInit
//  253  *   APSME_IsDefaultTCLK
//  254  */
//  255 //-----------------------------------------------------------------------------
//  256 // master key data
//  257 //-----------------------------------------------------------------------------
//  258 void ZDSecMgrMasterKeyInit( void );
//  259 
//  260 //-----------------------------------------------------------------------------
//  261 // address management
//  262 //-----------------------------------------------------------------------------
//  263 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  264 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  265 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  266 
//  267 //-----------------------------------------------------------------------------
//  268 // MASTER key data
//  269 //-----------------------------------------------------------------------------
//  270 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key );
//  271 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key );
//  272 
//  273 //-----------------------------------------------------------------------------
//  274 // entry data
//  275 //-----------------------------------------------------------------------------
//  276 void ZDSecMgrEntryInit(uint8 state);
//  277 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  278 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  279 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  280 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  281 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  282 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  283 
//  284 //-----------------------------------------------------------------------------
//  285 // control data
//  286 //-----------------------------------------------------------------------------
//  287 void ZDSecMgrCtrlInit( void );
//  288 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl );
//  289 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl );
//  290 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
//  291                       ZDSecMgrEntry_t*  entry,
//  292                       ZDSecMgrCtrl_t*   ctrl );
//  293 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry );
//  294 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry );
//  295 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device,
//  296                              ZDSecMgrEntry_t*  entry );
//  297 
//  298 //-----------------------------------------------------------------------------
//  299 // key support
//  300 //-----------------------------------------------------------------------------
//  301 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key );
//  302 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  303                              uint8*  initExtAddr,
//  304                              uint16  partNwkAddr,
//  305                              uint8*  partExtAddr,
//  306                              uint8** key,
//  307                              uint8*  keyType );
//  308 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  309 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device );
//  310 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device );
//  311 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  312 
//  313 //-----------------------------------------------------------------------------
//  314 // device entry
//  315 //-----------------------------------------------------------------------------
//  316 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry );
//  317 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami );
//  318 #if defined NV_RESTORE
//  319 static void ZDSecMgrWriteNV(void);
//  320 static void ZDSecMgrRestoreFromNV(void);
//  321 #endif
//  322 
//  323 //-----------------------------------------------------------------------------
//  324 // device control
//  325 //-----------------------------------------------------------------------------
//  326 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device );
//  327 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device );
//  328 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state );
//  329 
//  330 //-----------------------------------------------------------------------------
//  331 // device management
//  332 //-----------------------------------------------------------------------------
//  333 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  334 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device );
//  335 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  336 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device );
//  337 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  338 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  339 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  340 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  341 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  342 
//  343 //-----------------------------------------------------------------------------
//  344 // association management
//  345 //-----------------------------------------------------------------------------
//  346 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  347 
//  348 //-----------------------------------------------------------------------------
//  349 // authentication management
//  350 //-----------------------------------------------------------------------------
//  351 void ZDSecMgrAuthInitiate( uint8* responder );
//  352 void ZDSecMgrAuthNwkKey( void );
//  353 
//  354 //-----------------------------------------------------------------------------
//  355 // APSME function
//  356 //-----------------------------------------------------------------------------
//  357 void APSME_TCLinkKeyInit( void );
//  358 uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
//  359 
//  360 /******************************************************************************
//  361  * @fn          ZDSecMgrMasterKeyInit                     ]
//  362  *
//  363  * @brief       Initialize master key data.
//  364  *
//  365  * @param       none
//  366  *
//  367  * @return      none
//  368  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  369 void ZDSecMgrMasterKeyInit( void )
ZDSecMgrMasterKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyInit
//  370 {
        FUNCALL ZDSecMgrMasterKeyInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  371   uint16 index;
//  372   uint16 size;
//  373 
//  374   // allocate MASTER key data
//  375   size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
//  376 
//  377   ZDSecMgrMasterKeyData = osal_mem_alloc( size );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x36
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine13 & 0xFFFF
//  378 
//  379   // initialize MASTER key data
//  380   if ( ZDSecMgrMasterKeyData != NULL )
??CrossCallReturnLabel_19:
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyInit_0:
        JZ      ??ZDSecMgrMasterKeyInit_1
//  381   {
//  382     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  383     {
//  384       ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrMasterKeyInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x12
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x12
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine2 & 0xFFFF
//  385     }
//  386   }
??CrossCallReturnLabel_105:
        JC      ??ZDSecMgrMasterKeyInit_2
//  387 }
??ZDSecMgrMasterKeyInit_1:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_105
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_93:
        LCALL   ??Subroutine109_0 & 0xFFFF
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
??CrossCallReturnLabel_213:
        REQUIRE ??Subroutine85_0
        ; // Fall through to label ??Subroutine85_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine85_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_107
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_108:
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  388 //devtag.pro.security
//  389 #if 0
//  390 void ZDSecMgrMasterKeyInit( void )
//  391 {
//  392   uint16         index;
//  393   uint16         size;
//  394   AddrMgrEntry_t entry;
//  395 
//  396 
//  397   // allocate MASTER key data
//  398   size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
//  399 
//  400   ZDSecMgrMasterKeyData = osal_mem_alloc( size );
//  401 
//  402   // initialize MASTER key data
//  403   if ( ZDSecMgrMasterKeyData != NULL )
//  404   {
//  405     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
//  406     {
//  407       ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
//  408     }
//  409 
//  410     // check if preconfigured keys are enabled
//  411     //-------------------------------------------------------------------------
//  412     #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  413     //-------------------------------------------------------------------------
//  414     if ( zgPreConfigKeys == TRUE )
//  415     {
//  416       // sync configured data
//  417       entry.user = ADDRMGR_USER_SECURITY;
//  418 
//  419       for ( index = 0; index < ZDSECMGR_PRECONFIG_MAX; index++ )
//  420       {
//  421         // check for Address Manager entry
//  422         AddrMgrExtAddrSet( entry.extAddr,
//  423                            (uint8*)ZDSecMgrPreConfigData[index].extAddr );
//  424 
//  425         if ( AddrMgrEntryLookupExt( &entry ) != TRUE )
//  426         {
//  427           // update Address Manager
//  428           AddrMgrEntryUpdate( &entry );
//  429         }
//  430 
//  431         if ( entry.index != INVALID_NODE_ADDR )
//  432         {
//  433           // sync MASTER keys with Address Manager index
//  434           ZDSecMgrMasterKeyData[index].ami = entry.index;
//  435 
//  436           osal_memcpy( ZDSecMgrMasterKeyData[index].key,
//  437                    (void*)ZDSecMgrPreConfigData[index].key, SEC_KEY_LEN );
//  438         }
//  439       }
//  440     }
//  441     //-------------------------------------------------------------------------
//  442     #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  443     //-------------------------------------------------------------------------
//  444   }
//  445 }
//  446 #endif
//  447 
//  448 /******************************************************************************
//  449  * @fn          ZDSecMgrAddrStore
//  450  *
//  451  * @brief       Store device addresses.
//  452  *
//  453  * @param       nwkAddr - [in] NWK address
//  454  * @param       extAddr - [in] EXT address
//  455  * @param       ami     - [out] Address Manager index
//  456  *
//  457  * @return      ZStatus_t
//  458  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  459 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDSecMgrAddrStore
//  460 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  461   ZStatus_t      status;
//  462   AddrMgrEntry_t entry;
//  463 
//  464 
//  465   // add entry
//  466   entry.user    = ADDRMGR_USER_SECURITY;
//  467   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_33:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  468   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_16:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine50 & 0xFFFF
//  469 
//  470   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_84:
        JNZ     ??ZDSecMgrAddrStore_0
//  471   {
//  472     // return successful results
//  473     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  474     status = ZSuccess;
//  475   }
??CrossCallReturnLabel_110:
        SJMP    ??CrossCallReturnLabel_28
//  476   else
//  477   {
//  478     // return failed results
//  479     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  480     status = ZNwkUnknownDevice;
//  481   }
//  482 
//  483   return status;
??CrossCallReturnLabel_28:
        LJMP    ?Subroutine81 & 0xFFFF
        CFI EndBlock cfiBlock8
//  484 }
//  485 
//  486 /******************************************************************************
//  487  * @fn          ZDSecMgrExtAddrStore
//  488  *
//  489  * @brief       Store EXT address.
//  490  *
//  491  * @param       extAddr - [in] EXT address
//  492  * @param       ami     - [out] Address Manager index
//  493  *
//  494  * @return      ZStatus_t
//  495  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  496 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrStore
//  497 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  498   ZStatus_t      status;
//  499   AddrMgrEntry_t entry;
//  500 
//  501 
//  502   // add entry
//  503   entry.user    = ADDRMGR_USER_SECURITY;
//  504   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_34:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  505   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_17:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine50 & 0xFFFF
//  506 
//  507   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_85:
        JNZ     ??ZDSecMgrExtAddrStore_0
//  508   {
//  509     // return successful results
//  510     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  511     status = ZSuccess;
//  512   }
??CrossCallReturnLabel_111:
        SJMP    ??CrossCallReturnLabel_29
//  513   else
//  514   {
//  515     // return failed results
//  516     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
//  517     status = ZNwkUnknownDevice;
//  518   }
//  519 
//  520   return status;
??CrossCallReturnLabel_29:
        LJMP    ?Subroutine81 & 0xFFFF
        CFI EndBlock cfiBlock9
//  521 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_157:
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_189:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_204:
        MOV     R1,#-0x38
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ?Subroutine55 & 0xFFFF
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
??CrossCallReturnLabel_94:
        REQUIRE ??Subroutine86_0
        ; // Fall through to label ??Subroutine86_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine86_0:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_113
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_205:
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_29
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_30
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_110
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_111
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_112
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
//  522 
//  523 /******************************************************************************
//  524  * @fn          ZDSecMgrExtAddrLookup
//  525  *
//  526  * @brief       Lookup index for specified EXT address.
//  527  *
//  528  * @param       extAddr - [in] EXT address
//  529  * @param       ami     - [out] Address Manager index
//  530  *
//  531  * @return      ZStatus_t
//  532  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  533 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrLookup
//  534 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  535   ZStatus_t      status;
//  536   AddrMgrEntry_t entry;
//  537 
//  538 
//  539   // lookup entry
//  540   entry.user = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  541   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine65 & 0xFFFF
//  542 
//  543   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
??CrossCallReturnLabel_158:
        LCALL   ??AddrMgrEntryLookupExt?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrLookup_0
//  544   {
//  545     // return successful results
//  546     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  547     status = ZSuccess;
//  548   }
??CrossCallReturnLabel_112:
        SJMP    ??CrossCallReturnLabel_30
//  549   else
//  550   {
//  551     // return failed results
//  552     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
        CFI EndBlock cfiBlock41
//  553     status = ZNwkUnknownDevice;
//  554   }
//  555 
//  556   return status;
??CrossCallReturnLabel_30:
        REQUIRE ?Subroutine81
        ; // Fall through to label ?Subroutine81
//  557 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine81:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        LJMP    ??Subroutine95_0 & 0xFFFF
        CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_85
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_86
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
        REQUIRE ?Subroutine73
        ; // Fall through to label ?Subroutine73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_85
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_86
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_139
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_140
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_141
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_142
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_143
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_144
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_145
        CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond58) CFA_SP SP+-5
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_146
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_147
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_148
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_149
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_0
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_1
        CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond64) CFA_SP SP+-5
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_2
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_3
        CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond66) CFA_SP SP+-5
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_4
        CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond67) CFA_SP SP+-5
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68
//  558 
//  559 /******************************************************************************
//  560  * @fn          ZDSecMgrMasterKeyLookup
//  561  *
//  562  * @brief       Lookup MASTER key for specified address index.
//  563  *
//  564  * @param       ami - [in] Address Manager index
//  565  * @param       key - [out] valid MASTER key
//  566  *
//  567  * @return      ZStatus_t
//  568  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  569 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key )
ZDSecMgrMasterKeyLookup:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLookup
//  570 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  571   ZStatus_t status;
//  572   uint16    index;
//  573 
//  574 
//  575   // initialize results
//  576   *key   = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  577   status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
//  578 
//  579   // verify data is available
//  580   if ( ZDSecMgrMasterKeyData != NULL )
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyLookup_0:
        JZ      ??ZDSecMgrMasterKeyLookup_1
//  581   {
//  582     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
//  583     {
//  584       if ( ZDSecMgrMasterKeyData[index].ami == ami )
??ZDSecMgrMasterKeyLookup_2:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,?V0 + 0
        MOV     B,#0x12
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R0,B
        MOV     B,#0x12
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_37:
        JNZ     ??ZDSecMgrMasterKeyLookup_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrMasterKeyLookup_3:
        JNZ     ??ZDSecMgrMasterKeyLookup_4
//  585       {
//  586         // return successful results
//  587         *key   = ZDSecMgrMasterKeyData[index].key;
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine86_0 & 0xFFFF
//  588         status = ZSuccess;
//  589 
//  590         // break from loop
//  591         index  = ZDSECMGR_MASTERKEY_MAX;
??CrossCallReturnLabel_113:
        MOV     R6,#0x3
        MOV     R7,#0x0
//  592       }
//  593     }
??ZDSecMgrMasterKeyLookup_4:
        LCALL   ?Subroutine43 & 0xFFFF
//  594   }
??CrossCallReturnLabel_72:
        JC      ??ZDSecMgrMasterKeyLookup_2
//  595 
//  596   return status;
??ZDSecMgrMasterKeyLookup_1:
        SJMP    ??Subroutine87_0
        CFI EndBlock cfiBlock69
//  597 }
//  598 
//  599 /******************************************************************************
//  600  * @fn          ZDSecMgrMasterKeyStore
//  601  *
//  602  * @brief       Store MASTER key for specified address index.
//  603  *
//  604  * @param       ami - [in] Address Manager index
//  605  * @param       key - [in] valid key to store
//  606  *
//  607  * @return      ZStatus_t
//  608  */
//  609 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key )
//  610 {
//  611   ZStatus_t status;
//  612   uint16    index;
//  613   uint8*    entry;
//  614 
//  615 
//  616   // initialize results
//  617   status = ZNwkUnknownDevice;
//  618 
//  619   // verify data is available
//  620   if ( ZDSecMgrMasterKeyData != NULL )
//  621   {
//  622     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
//  623     {
//  624       if ( ZDSecMgrMasterKeyData[index].ami == INVALID_NODE_ADDR )
//  625       {
//  626         // store EXT address index
//  627         ZDSecMgrMasterKeyData[index].ami = ami;
//  628 
//  629         entry = ZDSecMgrMasterKeyData[index].key;
//  630 
//  631         if ( key != NULL )
//  632         {
//  633           osal_memcpy( entry, key,  SEC_KEY_LEN );
//  634         }
//  635         else
//  636         {
//  637           osal_memset( entry, 0, SEC_KEY_LEN );
//  638         }
//  639 
//  640         // return successful results
//  641         status = ZSuccess;
//  642 
//  643         // break from loop
//  644         index  = ZDSECMGR_MASTERKEY_MAX;
//  645       }
//  646     }
//  647   }
//  648 
//  649   return status;
//  650 }
//  651 
//  652 /******************************************************************************
//  653  * @fn          ZDSecMgrEntryInit
//  654  *
//  655  * @brief       Initialize entry sub module
//  656  *
//  657  * @param       state - device initialization state
//  658  *
//  659  * @return      none
//  660  */
//  661 void ZDSecMgrEntryInit(uint8 state)
//  662 {
//  663   if (ZDSecMgrEntries == NULL)
//  664   {
//  665     uint16 index;
//  666 
//  667     if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
//  668     {
//  669       return;
//  670     }
//  671 
//  672     for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
//  673     {
//  674       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
//  675     }
//  676   }
//  677 
//  678 #if defined NV_RESTORE
//  679   if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
//  680   {
//  681     ZDSecMgrRestoreFromNV();
//  682   }
//  683 #else
//  684   (void)state;
//  685 #endif
//  686 }
//  687 
//  688 /******************************************************************************
//  689  * @fn          ZDSecMgrEntryLookup
//  690  *
//  691  * @brief       Lookup entry index using specified NWK address.
//  692  *
//  693  * @param       nwkAddr - [in] NWK address
//  694  * @param       entry   - [out] valid entry
//  695  *
//  696  * @return      ZStatus_t
//  697  */
//  698 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
//  699 {
//  700   ZStatus_t      status;
//  701   uint16         index;
//  702   AddrMgrEntry_t addrMgrEntry;
//  703 
//  704 
//  705   // initialize results
//  706   *entry = NULL;
//  707   status = ZNwkUnknownDevice;
//  708 
//  709   // verify data is available
//  710   if ( ZDSecMgrEntries != NULL )
//  711   {
//  712     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
//  713     addrMgrEntry.nwkAddr = nwkAddr;
//  714 
//  715     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
//  716     {
//  717       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
//  718       {
//  719         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
//  720         {
//  721           // return successful results
//  722           *entry = &ZDSecMgrEntries[index];
//  723           status = ZSuccess;
//  724 
//  725           // break from loop
//  726           index = ZDSECMGR_ENTRY_MAX;
//  727         }
//  728       }
//  729     }
//  730   }
//  731 
//  732   return status;
//  733 }
//  734 
//  735 /******************************************************************************
//  736  * @fn          ZDSecMgrEntryLookupAMI
//  737  *
//  738  * @brief       Lookup entry using specified address index
//  739  *
//  740  * @param       ami   - [in] Address Manager index
//  741  * @param       entry - [out] valid entry
//  742  *
//  743  * @return      ZStatus_t
//  744  */
//  745 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
//  746 {
//  747   ZStatus_t status;
//  748   uint16    index;
//  749 
//  750 
//  751   // initialize results
//  752   *entry = NULL;
//  753   status = ZNwkUnknownDevice;
//  754 
//  755   // verify data is available
//  756   if ( ZDSecMgrEntries != NULL )
//  757   {
//  758     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
//  759     {
//  760       if ( ZDSecMgrEntries[index].ami == ami )
//  761       {
//  762         // return successful results
//  763         *entry = &ZDSecMgrEntries[index];
//  764         status = ZSuccess;
//  765 
//  766         // break from loop
//  767         index = ZDSECMGR_ENTRY_MAX;
//  768       }
//  769     }
//  770   }
//  771 
//  772   return status;
//  773 }
//  774 
//  775 /******************************************************************************
//  776  * @fn          ZDSecMgrEntryLookupExt
//  777  *
//  778  * @brief       Lookup entry index using specified EXT address.
//  779  *
//  780  * @param       extAddr - [in] EXT address
//  781  * @param       entry   - [out] valid entry
//  782  *
//  783  * @return      ZStatus_t
//  784  */
//  785 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
//  786 {
//  787   ZStatus_t status;
//  788   uint16    ami;
//  789 
//  790 
//  791   // initialize results
//  792   *entry = NULL;
//  793   status = ZNwkUnknownDevice;
//  794 
//  795   // lookup address index
//  796   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
//  797   {
//  798     status = ZDSecMgrEntryLookupAMI( ami, entry );
//  799   }
//  800 
//  801   return status;
//  802 }
//  803 
//  804 /******************************************************************************
//  805  * @fn          ZDSecMgrEntryFree
//  806  *
//  807  * @brief       Free entry.
//  808  *
//  809  * @param       entry - [in] valid entry
//  810  *
//  811  * @return      ZStatus_t
//  812  */
//  813 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
//  814 {
//  815   entry->ami = INVALID_NODE_ADDR;
//  816 }
//  817 
//  818 /******************************************************************************
//  819  * @fn          ZDSecMgrEntryNew
//  820  *
//  821  * @brief       Get a new entry.
//  822  *
//  823  * @param       entry - [out] valid entry
//  824  *
//  825  * @return      ZStatus_t
//  826  */
//  827 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
//  828 {
//  829   ZStatus_t status;
//  830   uint16    index;
//  831 
//  832 
//  833   // initialize results
//  834   *entry = NULL;
//  835   status = ZNwkUnknownDevice;
//  836 
//  837   // verify data is available
//  838   if ( ZDSecMgrEntries != NULL )
//  839   {
//  840     // find available entry
//  841     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
//  842     {
//  843       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
//  844       {
//  845         // return successful result
//  846         *entry = &ZDSecMgrEntries[index];
//  847         status = ZSuccess;
//  848 
//  849         // Set the authentication option to default
//  850         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
//  851 
//  852         // break from loop
//  853         index = ZDSECMGR_ENTRY_MAX;
//  854       }
//  855     }
//  856   }
//  857 
//  858   return status;
//  859 }
//  860 
//  861 /******************************************************************************
//  862  * @fn          ZDSecMgrCtrlInit
//  863  *
//  864  * @brief       Initialize control sub module
//  865  *
//  866  * @param       none
//  867  *
//  868  * @return      none
//  869  */
//  870 void ZDSecMgrCtrlInit( void )
//  871 {
//  872   uint16 size;
//  873   uint16 index;
//  874 
//  875   // allocate entry data
//  876   size = (short)( sizeof(ZDSecMgrCtrl_t) * ZDSECMGR_CTRL_MAX );
//  877 
//  878   ZDSecMgrCtrlData = osal_mem_alloc( size );
//  879 
//  880   // initialize data
//  881   if ( ZDSecMgrCtrlData != NULL )
//  882   {
//  883     for( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
//  884     {
//  885       ZDSecMgrCtrlData[index].state = ZDSECMGR_CTRL_NONE;
//  886     }
//  887   }
//  888 }
//  889 
//  890 /******************************************************************************
//  891  * @fn          ZDSecMgrCtrlRelease
//  892  *
//  893  * @brief       Release control data.
//  894  *
//  895  * @param       ctrl - [in] valid control data
//  896  *
//  897  * @return      none
//  898  */
//  899 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl )
//  900 {
//  901   // should always be enough entry control data
//  902   ctrl->state = ZDSECMGR_CTRL_NONE;
//  903 }
//  904 
//  905 /******************************************************************************
//  906  * @fn          ZDSecMgrCtrlLookup
//  907  *
//  908  * @brief       Lookup control data.
//  909  *
//  910  * @param       entry - [in] valid entry data
//  911  * @param       ctrl  - [out] control data - NULL if not found
//  912  *
//  913  * @return      none
//  914  */
//  915 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl )
//  916 {
//  917   uint16 index;
//  918 
//  919 
//  920   // initialize search results
//  921   *ctrl = NULL;
//  922 
//  923   // verify data is available
//  924   if ( ZDSecMgrCtrlData != NULL )
//  925   {
//  926     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
//  927     {
//  928       // make sure control data is in use
//  929       if ( ZDSecMgrCtrlData[index].state != ZDSECMGR_CTRL_NONE )
//  930       {
//  931         // check for entry match
//  932         if ( ZDSecMgrCtrlData[index].entry == entry )
//  933         {
//  934           // return this control data
//  935           *ctrl = &ZDSecMgrCtrlData[index];
//  936 
//  937           // break from loop
//  938           index = ZDSECMGR_CTRL_MAX;
//  939         }
//  940       }
//  941     }
//  942   }
//  943 }
//  944 
//  945 /******************************************************************************
//  946  * @fn          ZDSecMgrCtrlSet
//  947  *
//  948  * @brief       Set control data.
//  949  *
//  950  * @param       device - [in] valid device data
//  951  * @param       entry  - [in] valid entry data
//  952  * @param       ctrl   - [in] valid control data
//  953  *
//  954  * @return      none
//  955  */
//  956 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
//  957                       ZDSecMgrEntry_t*  entry,
//  958                       ZDSecMgrCtrl_t*   ctrl )
//  959 {
//  960   // set control date
//  961   ctrl->parentAddr = device->parentAddr;
//  962   ctrl->secure     = device->secure;
//  963   ctrl->entry      = entry;
//  964   ctrl->state      = ZDSECMGR_CTRL_INIT;
//  965   ctrl->cntr       = 0;
//  966 
//  967   // set device pointer
//  968   device->ctrl = ctrl;
//  969 }
//  970 
//  971 /******************************************************************************
//  972  * @fn          ZDSecMgrCtrlAdd
//  973  *
//  974  * @brief       Add control data.
//  975  *
//  976  * @param       device - [in] valid device data
//  977  * @param       entry  - [in] valid entry data
//  978  *
//  979  * @return      ZStatus_t
//  980  */
//  981 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry )
//  982 {
//  983   ZStatus_t status;
//  984   uint16    index;
//  985 
//  986 
//  987   // initialize results
//  988   status = ZNwkUnknownDevice;
//  989 
//  990   // verify data is available
//  991   if ( ZDSecMgrCtrlData != NULL )
//  992   {
//  993     // look for an empty slot
//  994     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
//  995     {
//  996       if ( ZDSecMgrCtrlData[index].state == ZDSECMGR_CTRL_NONE )
//  997       {
//  998         // return successful results
//  999         ZDSecMgrCtrlSet( device, entry, &ZDSecMgrCtrlData[index] );
// 1000 
// 1001         status = ZSuccess;
// 1002 
// 1003         // break from loop
// 1004         index = ZDSECMGR_CTRL_MAX;
// 1005       }
// 1006     }
// 1007   }
// 1008 
// 1009   return status;
// 1010 }
// 1011 
// 1012 /******************************************************************************
// 1013  * @fn          ZDSecMgrCtrlTerm
// 1014  *
// 1015  * @brief       Terminate device control.
// 1016  *
// 1017  * @param       entry - [in] valid entry data
// 1018  *
// 1019  * @return      none
// 1020  */
// 1021 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry )
// 1022 {
// 1023   ZDSecMgrCtrl_t* ctrl;
// 1024 
// 1025   // remove device from control data
// 1026   ZDSecMgrCtrlLookup ( entry, &ctrl );
// 1027 
// 1028   if ( ctrl != NULL )
// 1029   {
// 1030     ZDSecMgrCtrlRelease ( ctrl );
// 1031   }
// 1032 }
// 1033 
// 1034 /******************************************************************************
// 1035  * @fn          ZDSecMgrCtrlReset
// 1036  *
// 1037  * @brief       Reset control data.
// 1038  *
// 1039  * @param       device - [in] valid device data
// 1040  * @param       entry  - [in] valid entry data
// 1041  *
// 1042  * @return      ZStatus_t
// 1043  */
// 1044 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t* entry )
// 1045 {
// 1046   ZStatus_t       status;
// 1047   ZDSecMgrCtrl_t* ctrl;
// 1048 
// 1049 
// 1050   // initialize results
// 1051   status = ZNwkUnknownDevice;
// 1052 
// 1053   // look for a match for the entry
// 1054   ZDSecMgrCtrlLookup( entry, &ctrl );
// 1055 
// 1056   if ( ctrl != NULL )
// 1057   {
// 1058     ZDSecMgrCtrlSet( device, entry, ctrl );
// 1059 
// 1060     status = ZSuccess;
// 1061   }
// 1062   else
// 1063   {
// 1064     status = ZDSecMgrCtrlAdd( device, entry );
// 1065   }
// 1066 
// 1067   return status;
// 1068 }
// 1069 
// 1070 /******************************************************************************
// 1071  * @fn          ZDSecMgrMasterKeyLoad
// 1072  *
// 1073  * @brief       Load the MASTER key for device with specified EXT
// 1074  *              address.
// 1075  *
// 1076  * @param       extAddr - [in] EXT address of device
// 1077  * @param       key     - [in] MASTER key shared with device
// 1078  *
// 1079  * @return      ZStatus_t
// 1080  */
// 1081 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key )
// 1082 {
// 1083   ZStatus_t status;
// 1084   uint8*    loaded;
// 1085   uint16    ami;
// 1086 
// 1087 
// 1088   // set status based on policy
// 1089   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
// 1090 
// 1091   if ( status == ZSuccess )
// 1092   {
// 1093     // get the address index
// 1094     if ( ZDSecMgrMasterKeyLookup( ami, &loaded ) == ZSuccess )
// 1095     {
// 1096       // overwrite old key
// 1097       osal_memcpy( loaded, key, SEC_KEY_LEN );
// 1098     }
// 1099     else
// 1100     {
// 1101       // store new key -- NULL will zero key
// 1102       status = ZDSecMgrMasterKeyStore( ami, key );
// 1103     }
// 1104   }
// 1105 
// 1106   return status;
// 1107 }
// 1108 
// 1109 /******************************************************************************
// 1110  * @fn          ZDSecMgrAppKeyGet
// 1111  *
// 1112  * @brief       get an APP key - option APP(MASTER or LINK) key
// 1113  *
// 1114  * @param       initNwkAddr - [in] NWK address of initiator device
// 1115  * @param       initExtAddr - [in] EXT address of initiator device
// 1116  * @param       partNwkAddr - [in] NWK address of partner device
// 1117  * @param       partExtAddr - [in] EXT address of partner device
// 1118  * @param       key         - [out] APP(MASTER or LINK) key
// 1119  * @param       keyType     - [out] APP(MASTER or LINK) key type
// 1120  *
// 1121  * @return      ZStatus_t
// 1122  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
// 1123 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
ZDSecMgrAppKeyType:
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I
// 1124                                                  // to KEY_TYPE_APP_LINK since
// 1125                                                  // only specific requirement
// 1126                                                  // right now comes from SE profile
// 1127 
// 1128 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
// 1129                              uint8*  initExtAddr,
// 1130                              uint16  partNwkAddr,
// 1131                              uint8*  partExtAddr,
// 1132                              uint8** key,
// 1133                              uint8*  keyType )
// 1134 {
// 1135   // Intentionally unreferenced parameters
// 1136   (void)initNwkAddr;
// 1137   (void)initExtAddr;
// 1138   (void)partNwkAddr;
// 1139   (void)partExtAddr;
// 1140   
// 1141   //---------------------------------------------------------------------------
// 1142   // note:
// 1143   // should use a robust mechanism to generate keys, for example
// 1144   // combine EXT addresses and call a hash function
// 1145   //---------------------------------------------------------------------------
// 1146   SSP_GetTrueRand( SEC_KEY_LEN, *key );
// 1147 
// 1148   *keyType = ZDSecMgrAppKeyType;
// 1149 
// 1150   return ZSuccess;
// 1151 }
// 1152 
// 1153 /******************************************************************************
// 1154  * @fn          ZDSecMgrAppKeyReq
// 1155  *
// 1156  * @brief       Process request for APP key between two devices.
// 1157  *
// 1158  * @param       device - [in] ZDO_RequestKeyInd_t, request info
// 1159  *
// 1160  * @return      none
// 1161  */
// 1162 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
// 1163 {
// 1164   APSME_TransportKeyReq_t req;
// 1165   uint8                   initExtAddr[Z_EXTADDR_LEN];
// 1166   uint16                  partNwkAddr;
// 1167   uint8                   key[SEC_KEY_LEN];
// 1168 
// 1169 
// 1170   // validate initiator and partner
// 1171   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
// 1172        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
// 1173   {
// 1174     // point the key to some memory
// 1175     req.key = key;
// 1176 
// 1177     // get an APP key - option APP (MASTER or LINK) key
// 1178     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
// 1179                             initExtAddr,
// 1180                             partNwkAddr,
// 1181                             ind->partExtAddr,
// 1182                             &req.key,
// 1183                             &req.keyType ) == ZSuccess )
// 1184     {
// 1185       // always secure
// 1186       req.nwkSecure = TRUE;
// 1187       req.apsSecure = TRUE;
// 1188       req.tunnel    = NULL;
// 1189 
// 1190       // send key to initiator device
// 1191       req.dstAddr   = ind->srcAddr;
// 1192       req.extAddr   = ind->partExtAddr;
// 1193       req.initiator = TRUE;
// 1194       APSME_TransportKeyReq( &req );
// 1195 
// 1196       // send key to partner device
// 1197       req.dstAddr   = partNwkAddr;
// 1198       req.extAddr   = initExtAddr;
// 1199       req.initiator = FALSE;
// 1200 
// 1201       APSME_TransportKeyReq( &req );
// 1202     }
// 1203   }
// 1204 }
// 1205 
// 1206 /******************************************************************************
// 1207  * @fn          ZDSecMgrEstablishKey
// 1208  *
// 1209  * @brief       Start SKKE with device joining network.
// 1210  *
// 1211  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1212  *
// 1213  * @return      ZStatus_t
// 1214  */
// 1215 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device )
// 1216 {
// 1217   ZStatus_t               status;
// 1218   APSME_EstablishKeyReq_t req;
// 1219 
// 1220 
// 1221   req.respExtAddr = device->extAddr;
// 1222   req.method      = APSME_SKKE_METHOD;
// 1223 
// 1224   if ( device->parentAddr == NLME_GetShortAddr() )
// 1225   {
// 1226     req.dstAddr   = device->nwkAddr;
// 1227     //devtag.0604.todo - remove obsolete
// 1228     req.apsSecure = FALSE;
// 1229     req.nwkSecure = FALSE;
// 1230   }
// 1231   else
// 1232   {
// 1233     req.dstAddr   = device->parentAddr;
// 1234     //devtag.0604.todo - remove obsolete
// 1235     req.apsSecure = TRUE;
// 1236     req.nwkSecure = TRUE;
// 1237   }
// 1238 
// 1239   status = APSME_EstablishKeyReq( &req );
// 1240 
// 1241   return status;
// 1242 }
// 1243 
// 1244 /******************************************************************************
// 1245  * @fn          ZDSecMgrSendMasterKey
// 1246  *
// 1247  * @brief       Send MASTER key to device joining network.
// 1248  *
// 1249  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1250  *
// 1251  * @return      ZStatus_t
// 1252  */
// 1253 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device )
// 1254 {
// 1255   ZStatus_t               status;
// 1256   APSME_TransportKeyReq_t req;
// 1257 
// 1258 
// 1259   req.keyType = KEY_TYPE_TC_MASTER;
// 1260   req.extAddr = device->extAddr;
// 1261   req.tunnel  = NULL;
// 1262 
// 1263   ZDSecMgrMasterKeyLookup( device->ctrl->entry->ami, &req.key );
// 1264 
// 1265   //check if using secure hop to to parent
// 1266   if ( device->parentAddr != NLME_GetShortAddr() )
// 1267   {
// 1268     //send to parent with security
// 1269     req.dstAddr   = device->parentAddr;
// 1270     req.nwkSecure = TRUE;
// 1271     req.apsSecure = TRUE;
// 1272   }
// 1273   else
// 1274   {
// 1275     //direct with no security
// 1276     req.dstAddr   = device->nwkAddr;
// 1277     req.nwkSecure = FALSE;
// 1278     req.apsSecure = FALSE;
// 1279   }
// 1280 
// 1281   status = APSME_TransportKeyReq( &req );
// 1282 
// 1283   return status;
// 1284 }
// 1285 
// 1286 /******************************************************************************
// 1287  * @fn          ZDSecMgrSendNwkKey
// 1288  *
// 1289  * @brief       Send NWK key to device joining network.
// 1290  *
// 1291  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1292  *
// 1293  * @return      ZStatus_t
// 1294  */
// 1295 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
// 1296 {
// 1297   ZStatus_t               status;
// 1298   APSME_TransportKeyReq_t req;
// 1299   APSDE_FrameTunnel_t     tunnel;
// 1300 
// 1301   req.dstAddr   = device->nwkAddr;
// 1302   req.extAddr   = device->extAddr;
// 1303 
// 1304   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1305     req.keyType   = KEY_TYPE_NWK_HIGH;
// 1306   else
// 1307     req.keyType   = KEY_TYPE_NWK;
// 1308 
// 1309   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 1310       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 1311   {
// 1312     // set values
// 1313     req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
// 1314     req.key       = _NIB.nwkActiveKey.key;
// 1315     //devtag.pro.security.todo - make sure that if there is no link key the NWK
// 1316     //key isn't used to secure the frame at the APS layer -- since the receiving
// 1317     //device may not have a NWK key yet
// 1318     req.apsSecure = TRUE;
// 1319 
// 1320     // check if using secure hop to to parent
// 1321     if ( device->parentAddr == NLME_GetShortAddr() )
// 1322     {
// 1323       req.nwkSecure = FALSE;
// 1324       req.tunnel    = NULL;
// 1325     }
// 1326     else
// 1327     {
// 1328       req.nwkSecure   = TRUE;
// 1329       req.tunnel      = &tunnel;
// 1330       req.tunnel->tna = device->parentAddr;
// 1331       req.tunnel->dea = device->extAddr;
// 1332     }
// 1333   }
// 1334   else
// 1335   {
// 1336     // default values
// 1337     //devtag.0604.verify
// 1338     req.nwkSecure = TRUE;
// 1339     req.apsSecure = FALSE;
// 1340     req.tunnel    = NULL;
// 1341 
// 1342     if ( device->parentAddr != NLME_GetShortAddr() )
// 1343     {
// 1344       req.dstAddr = device->parentAddr;
// 1345     }
// 1346 
// 1347     // special cases
// 1348     //devtag.0604.todo - modify to preconfig flag
// 1349     if ( device->secure == FALSE )
// 1350     {
// 1351       req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
// 1352       req.key       = _NIB.nwkActiveKey.key;
// 1353 
// 1354       // check if using secure hop to to parent
// 1355       if ( device->parentAddr == NLME_GetShortAddr() )
// 1356       {
// 1357         req.nwkSecure = FALSE;
// 1358       }
// 1359     }
// 1360     else
// 1361     {
// 1362       req.key       = NULL;
// 1363       req.keySeqNum = 0;
// 1364     }
// 1365   }
// 1366 
// 1367   status = APSME_TransportKeyReq( &req );
// 1368 
// 1369   return status;
// 1370 }
// 1371 
// 1372 /******************************************************************************
// 1373  * @fn          ZDSecMgrDeviceEntryRemove
// 1374  *
// 1375  * @brief       Remove device entry.
// 1376  *
// 1377  * @param       entry - [in] valid entry
// 1378  *
// 1379  * @return      none
// 1380  */
// 1381 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry )
// 1382 {
// 1383   // terminate device control
// 1384   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1385   {
// 1386     ZDSecMgrCtrlTerm( entry );
// 1387   }
// 1388 
// 1389   // remove device from entry data
// 1390   ZDSecMgrEntryFree( entry );
// 1391 
// 1392   // remove EXT address
// 1393   //ZDSecMgrExtAddrRelease( aiOld );
// 1394 }
// 1395 
// 1396 /******************************************************************************
// 1397  * @fn          ZDSecMgrDeviceRemoveByExtAddr
// 1398  *
// 1399  * @brief       Remove device entry by its ext address.
// 1400  *
// 1401  * @param       pAddr - pointer to the extended address
// 1402  *
// 1403  * @return      ZStatus_t
// 1404  */
// 1405 ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
// 1406 {
// 1407   ZDSecMgrEntry_t *pEntry;
// 1408   uint8           retValue;
// 1409   
// 1410   retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
// 1411   
// 1412   if( retValue == ZSuccess )
// 1413   {
// 1414     ZDSecMgrDeviceEntryRemove( pEntry );
// 1415   }
// 1416   
// 1417   return retValue;
// 1418 }
// 1419 
// 1420 /******************************************************************************
// 1421  * @fn          ZDSecMgrDeviceEntryAdd
// 1422  *
// 1423  * @brief       Add entry.
// 1424  *
// 1425  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1426  * @param       ami    - [in] Address Manager index
// 1427  *
// 1428  * @return      ZStatus_t
// 1429  */
// 1430 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr )
// 1431 {
// 1432   AddrMgrEntry_t entry;
// 1433 
// 1434   // get the ami data
// 1435   entry.user  = ADDRMGR_USER_SECURITY;
// 1436   entry.index = ami;
// 1437 
// 1438   AddrMgrEntryGet( &entry );
// 1439 
// 1440   // check if NWK address is same
// 1441   if ( entry.nwkAddr != nwkAddr )
// 1442   {
// 1443     // update NWK address
// 1444     entry.nwkAddr = nwkAddr;
// 1445 
// 1446     AddrMgrEntryUpdate( &entry );
// 1447   }
// 1448 }
// 1449 

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiBlock70 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock70
        REQUIRE ??Subroutine87_0
        ; // Fall through to label ??Subroutine87_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine87_0:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock71

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrMasterKeyStore:
        CFI Block cfiBlock72 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyStore
        FUNCALL ZDSecMgrMasterKeyStore, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     R1,#-0x38
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyStore_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyStore_0:
        JZ      ??ZDSecMgrMasterKeyStore_1
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDSecMgrMasterKeyStore_2:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x12
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x12
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrMasterKeyStore_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrMasterKeyStore_3:
        JNZ     ??ZDSecMgrMasterKeyStore_4
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_224:
        MOV     A,R4
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R6
        JNZ     ??ZDSecMgrMasterKeyStore_5
        MOV     A,R7
??ZDSecMgrMasterKeyStore_5:
        JZ      ??ZDSecMgrMasterKeyStore_6
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x10
        MOV     R5,#0x0
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_243:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        SJMP    ??ZDSecMgrMasterKeyStore_7
??ZDSecMgrMasterKeyStore_6:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
??ZDSecMgrMasterKeyStore_7:
        MOV     R1,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
??ZDSecMgrMasterKeyStore_4:
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_78:
        JC      ??ZDSecMgrMasterKeyStore_2
??ZDSecMgrMasterKeyStore_1:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryInit:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function ZDSecMgrEntryInit
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryInit_0:
        JNZ     ??ZDSecMgrEntryInit_1
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x57
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryInit_2
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryInit_2:
        JZ      ??ZDSecMgrEntryInit_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrEntryInit_3:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x1d
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_106:
        JC      ??ZDSecMgrEntryInit_3
??ZDSecMgrEntryInit_1:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryLookup:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookup
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 0,#-0x38
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookup_0:
        JZ      ??ZDSecMgrEntryLookup_1
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_139:
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrEntryLookup_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrEntryLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x1d
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookup_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookup_3:
        JNZ     ??ZDSecMgrEntryLookup_4
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_168:
        MOV     ?V0 + 0,#0x0
        MOV     R0,#0x3
        MOV     R1,#0x0
??ZDSecMgrEntryLookup_4:
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_80:
        JC      ??ZDSecMgrEntryLookup_2
??ZDSecMgrEntryLookup_1:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine76 & 0xFFFF
        CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryLookupAMI:
        CFI Block cfiBlock75 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupAMI
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        JNZ     ??ZDSecMgrEntryLookupAMI_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookupAMI_0:
        JZ      ??ZDSecMgrEntryLookupAMI_1
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEntryLookupAMI_2:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,?V0 + 0
        MOV     B,#0x1d
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R0,B
        MOV     B,#0x1d
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_38:
        JNZ     ??ZDSecMgrEntryLookupAMI_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMI_3:
        JNZ     ??ZDSecMgrEntryLookupAMI_4
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_225:
        MOV     R1,#0x0
        MOV     R6,#0x3
        MOV     R7,#0x0
??ZDSecMgrEntryLookupAMI_4:
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_73:
        JC      ??ZDSecMgrEntryLookupAMI_2
??ZDSecMgrEntryLookupAMI_1:
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryLookupExt:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupExt
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 0,#-0x38
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExt_0
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,R1
        MOV     ?V0 + 0,A
??ZDSecMgrEntryLookupExt_0:
        LJMP    ?Subroutine74 & 0xFFFF
        CFI EndBlock cfiBlock79

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryFree:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function ZDSecMgrEntryFree
        LJMP    ?Subroutine70 & 0xFFFF
        CFI EndBlock cfiBlock80

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryNew:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function ZDSecMgrEntryNew
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ     ??ZDSecMgrEntryNew_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryNew_0:
        JZ      ??ZDSecMgrEntryNew_1
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEntryNew_2:
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x1d
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x1d
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryNew_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrEntryNew_3:
        JNZ     ??ZDSecMgrEntryNew_4
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_221:
        MOV     R1,#0x0
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R5,A
        MOV     A,#0x1c
        ADD     A,R4
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        MOV     R6,#0x3
        MOV     R7,A
??ZDSecMgrEntryNew_4:
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_74:
        JC      ??ZDSecMgrEntryNew_2
??ZDSecMgrEntryNew_1:
        LJMP    ??Subroutine87_0 & 0xFFFF
        CFI EndBlock cfiBlock81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     R1,#-0x38
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlInit:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function ZDSecMgrCtrlInit
        FUNCALL ZDSecMgrCtrlInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x15
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlInit_0:
        JZ      ??ZDSecMgrCtrlInit_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrCtrlInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_92:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        LCALL   ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_107:
        JC      ??ZDSecMgrCtrlInit_2
??ZDSecMgrCtrlInit_1:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_105
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_106
        CFI (cfiCond92) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond92) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond92) CFA_SP SP+-5
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond93) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond93) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond93) CFA_SP SP+-5
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,R4
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlRelease:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI Function ZDSecMgrCtrlRelease
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LJMP    ??Subroutine99_0 & 0xFFFF
        CFI EndBlock cfiBlock95

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlLookup:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function ZDSecMgrCtrlLookup
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlLookup_0:
        JZ      ??ZDSecMgrCtrlLookup_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrCtrlLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrCtrlLookup_3
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,R6
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrCtrlLookup_4
        MOV     A,R7
        XRL     A,?V0 + 1
??ZDSecMgrCtrlLookup_4:
        JNZ     ??ZDSecMgrCtrlLookup_3
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_169:
        MOV     R0,#0x3
        MOV     R1,#0x0
??ZDSecMgrCtrlLookup_3:
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_81:
        JC      ??ZDSecMgrCtrlLookup_2
??ZDSecMgrCtrlLookup_1:
        LJMP    ??Subroutine92_0 & 0xFFFF
        CFI EndBlock cfiBlock96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_109:
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_105
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_106
        CFI (cfiCond101) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond101) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond101) CFA_SP SP+-5
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_107
        CFI (cfiCond102) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond102) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond102) CFA_SP SP+-5
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_80
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_81
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlSet:
        CFI Block cfiBlock106 Using cfiCommon0
        CFI Function ZDSecMgrCtrlSet
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_159:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_100:
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        CLR     A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_101:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_170:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109
        REQUIRE ?Subroutine72
        ; // Fall through to label ?Subroutine72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_48
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_49
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_44
        CFI (cfiCond114) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond114) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond114) CFA_SP SP+-5
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_45
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_39
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_40
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlAdd:
        CFI Block cfiBlock119 Using cfiCommon0
        CFI Function ZDSecMgrCtrlAdd
        FUNCALL ZDSecMgrCtrlAdd, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R1,#-0x38
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlAdd_0:
        JZ      ??ZDSecMgrCtrlAdd_1
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDSecMgrCtrlAdd_2:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x7
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x7
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_3
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
??ZDSecMgrCtrlAdd_3:
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_79:
        JC      ??ZDSecMgrCtrlAdd_2
??ZDSecMgrCtrlAdd_1:
        LJMP    ??Subroutine103_0 & 0xFFFF
        CFI EndBlock cfiBlock119

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond120 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x3
        MOV     A,R3
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlTerm:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI Function ZDSecMgrCtrlTerm
        FUNCALL ZDSecMgrCtrlTerm, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_87:
        JNZ     ??ZDSecMgrCtrlTerm_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlTerm_0:
        JZ      ??CrossCallReturnLabel_44
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_44:
        LJMP    ?Subroutine80 & 0xFFFF
        CFI EndBlock cfiBlock123

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlReset:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI Function ZDSecMgrCtrlReset
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_88:
        JNZ     ??ZDSecMgrCtrlReset_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlReset_0:
        JZ      ??ZDSecMgrCtrlReset_1
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrCtrlReset_2
??ZDSecMgrCtrlReset_1:
        ; Setup parameters for call to function ZDSecMgrCtrlAdd
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlAdd?relay
        CFI EndBlock cfiBlock124
??ZDSecMgrCtrlReset_2:
        REQUIRE ?Subroutine83
        ; // Fall through to label ?Subroutine83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine83:
        CFI Block cfiBlock125 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond126 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker129 Using cfiCommon1
        CFI (cfiPicker129) NoFunction
        CFI (cfiPicker129) Picker
        LCALL   ??ZDSecMgrCtrlLookup?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiPicker129

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrMasterKeyLoad:
        CFI Block cfiBlock130 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLoad
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     ?V0 + 3,A
        JNZ     ??ZDSecMgrMasterKeyLoad_0
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_41:
        JNZ     ??ZDSecMgrMasterKeyLoad_1
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_236:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??ZDSecMgrMasterKeyLoad_0
??ZDSecMgrMasterKeyLoad_1:
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     A,R1
        MOV     ?V0 + 3,A
??ZDSecMgrMasterKeyLoad_0:
        MOV     R1,?V0 + 3
        LJMP    ?Subroutine77 & 0xFFFF
        CFI EndBlock cfiBlock130

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyGet:
        CFI Block cfiBlock131 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyGet
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function SSP_GetTrueRand
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     R1,#0x0
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock131

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyReq:
        CFI Block cfiBlock132 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyReq
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ADD     A,#0x5
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_76:
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine90_0 & 0xFFFF
??CrossCallReturnLabel_120:
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_126:
        LCALL   ??APSME_LookupExtAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_171:
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_172:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_173:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_199:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
??ZDSecMgrAppKeyReq_0:
        MOV     A,#0x27
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock132

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKey:
        CFI Block cfiBlock133 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKey
        FUNCALL ZDSecMgrEstablishKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKey, APSME_EstablishKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_174:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_114:
        JNZ     ??ZDSecMgrEstablishKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrEstablishKey_0:
        JNZ     ??ZDSecMgrEstablishKey_1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_160:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrEstablishKey_2
??ZDSecMgrEstablishKey_1:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrEstablishKey_2:
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_141:
        LCALL   ??APSME_EstablishKeyReq?relay
        MOV     A,#0x7
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_114
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136
        REQUIRE ??Subroutine88_0
        ; // Fall through to label ??Subroutine88_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine88_0:
        CFI Block cfiCond137 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_116
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_195:
        MOV     A,R2
        XRL     A,R0
        RET
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond143) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond143) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond143) CFA_SP SP+-5
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker144 Using cfiCommon1
        CFI (cfiPicker144) NoFunction
        CFI (cfiPicker144) Picker
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_190:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond145 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_117
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147
        REQUIRE ??Subroutine89_0
        ; // Fall through to label ??Subroutine89_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine89_0:
        CFI Block cfiCond148 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_119
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_206:
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        RET
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendMasterKey:
        CFI Block cfiBlock152 Using cfiCommon0
        CFI Function ZDSecMgrSendMasterKey
        FUNCALL ZDSecMgrSendMasterKey, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_175:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_66:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_115:
        JNZ     ??ZDSecMgrSendMasterKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrSendMasterKey_0:
        JZ      ??ZDSecMgrSendMasterKey_1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_197:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrSendMasterKey_2
??ZDSecMgrSendMasterKey_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_161:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_198:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrSendMasterKey_2:
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_142:
        LCALL   ??APSME_TransportKeyReq?relay
        LJMP    ?Subroutine76 & 0xFFFF
        CFI EndBlock cfiBlock152

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendNwkKey:
        CFI Block cfiBlock153 Using cfiCommon0
        CFI Function ZDSecMgrSendNwkKey
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_153:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine93_0 & 0xFFFF
??CrossCallReturnLabel_125:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R6
        ADD     A,#0x4
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_121:
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ??Subroutine88_0 & 0xFFFF
??CrossCallReturnLabel_116:
        JNZ     ??ZDSecMgrSendNwkKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrSendNwkKey_0:
        JZ      ??CrossCallReturnLabel_182
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_182:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrSendNwkKey_1
        MOV     DPTR,#(_NIB + 62)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#((_NIB + 63) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((_NIB + 63) >> 8) & 0xff)
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrSendNwkKey_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_2:
        JNZ     ??ZDSecMgrSendNwkKey_3
        MOV     A,#0xa
        SJMP    ??ZDSecMgrSendNwkKey_4
??ZDSecMgrSendNwkKey_1:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x3
??ZDSecMgrSendNwkKey_4:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
??ZDSecMgrSendNwkKey_3:
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,#0xd
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock153

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond154 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_121
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker156 Using cfiCommon1
        CFI (cfiPicker156) NoFunction
        CFI (cfiPicker156) Picker
        MOV     R0,A
        MOV     A,R7
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiPicker156
        REQUIRE ??Subroutine90_0
        ; // Fall through to label ??Subroutine90_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine90_0:
        CFI Block cfiCond157 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_120
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker160 Using cfiCommon1
        CFI (cfiPicker160) NoFunction
        CFI (cfiPicker160) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        RET
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiPicker160

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond161 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker163 Using cfiCommon1
        CFI (cfiPicker163) NoFunction
        CFI (cfiPicker163) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_194:
        MOV     A,#0x6
        RET
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiPicker163

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceEntryRemove:
        CFI Block cfiBlock164 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryRemove
        LJMP    ?Subroutine70 & 0xFFFF
        CFI EndBlock cfiBlock164

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceRemoveByExtAddr:
        CFI Block cfiBlock165 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemoveByExtAddr
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_228:
        LCALL   ??Subroutine109_0 & 0xFFFF
??CrossCallReturnLabel_210:
        MOVX    @DPTR,A
??ZDSecMgrDeviceRemoveByExtAddr_0:
        LJMP    ?Subroutine80 & 0xFFFF
        CFI EndBlock cfiBlock165

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAddrMgrUpdate:
        CFI Block cfiBlock166 Using cfiCommon0
        CFI Function ZDSecMgrAddrMgrUpdate
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_140:
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrAddrMgrUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrAddrMgrUpdate_0:
        JZ      ??ZDSecMgrAddrMgrUpdate_1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_143:
        LCALL   ??AddrMgrEntryUpdate?relay
??ZDSecMgrAddrMgrUpdate_1:
        LJMP    ?Subroutine81 & 0xFFFF
        CFI EndBlock cfiBlock166

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1450 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami )
ZDSecMgrDeviceEntryAdd:
        CFI Block cfiBlock167 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryAdd
// 1451 {
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1452   ZStatus_t        status;
// 1453   ZDSecMgrEntry_t* entry;
// 1454 
// 1455 
// 1456   // initialize as unknown until completion
// 1457   status = ZNwkUnknownDevice;
        MOV     ?V0 + 2,#-0x38
// 1458 
// 1459   device->ctrl = NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
// 1460 
// 1461   // make sure not already registered
// 1462   if ( ZDSecMgrEntryLookup( device->nwkAddr, &entry ) == ZSuccess )
??CrossCallReturnLabel_14:
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL   ??ZDSecMgrEntryLookup?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrDeviceEntryAdd_0
// 1463   {
// 1464     // verify that address index is same
// 1465     if ( entry->ami != ami )
        LCALL   ??Subroutine113_0 & 0xFFFF
??CrossCallReturnLabel_226:
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceEntryAdd_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrDeviceEntryAdd_1:
        JZ      ??ZDSecMgrDeviceEntryAdd_2
// 1466     {
// 1467       // remove conflicting entry
// 1468       ZDSecMgrDeviceEntryRemove( entry );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ??Subroutine109_0 & 0xFFFF
??CrossCallReturnLabel_211:
        LCALL   ?Subroutine11 & 0xFFFF
// 1469 
// 1470       if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
??CrossCallReturnLabel_15:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_2
// 1471       {
// 1472         // update NWK address
// 1473         ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
??ZDSecMgrDeviceEntryAdd_3:
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        LCALL   ?Subroutine33 & 0xFFFF
// 1474       }
// 1475     }
// 1476   }
??CrossCallReturnLabel_55:
        SJMP    ??ZDSecMgrDeviceEntryAdd_2
// 1477   else if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
??ZDSecMgrDeviceEntryAdd_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceEntryAdd_3
// 1478   {
// 1479     // update NWK address
// 1480     ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1481   }
// 1482 
// 1483   // check if a new entry needs to be created
// 1484   if ( entry == NULL )
??ZDSecMgrDeviceEntryAdd_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceEntryAdd_4
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceEntryAdd_4:
        JNZ     ??CrossCallReturnLabel_56
// 1485   {
// 1486     // get new entry
// 1487     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_5
// 1488     {
// 1489       // reset entry lkd
// 1490 
// 1491       // finish setting up entry
// 1492       entry->ami = ami;
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_229:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine6 & 0xFFFF
// 1493 
// 1494       // update NWK address
// 1495       ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine33 & 0xFFFF
// 1496 
// 1497       // enter new device into device control
// 1498       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1499       {
// 1500         status = ZDSecMgrCtrlAdd( device, entry );
// 1501       }
// 1502       else
// 1503       {
// 1504         status = ZSuccess;
// 1505       }
// 1506     }
// 1507   }
// 1508   else
// 1509   {
// 1510     // reset entry lkd
// 1511 
// 1512     // reset entry in entry control
// 1513     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1514     {
// 1515       status = ZDSecMgrCtrlReset( device, entry );
// 1516     }
// 1517     else
// 1518     {
// 1519       status = ZSuccess;
??CrossCallReturnLabel_56:
        MOV     ?V0 + 2,#0x0
// 1520     }
// 1521   }
// 1522 
// 1523   return status;
??ZDSecMgrDeviceEntryAdd_5:
        MOV     R1,?V0 + 2
        MOV     A,#0x2
        LJMP    ?Subroutine75 & 0xFFFF
        CFI EndBlock cfiBlock167
// 1524 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond168 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker170 Using cfiCommon1
        CFI (cfiPicker170) NoFunction
        CFI (cfiPicker170) Picker
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrAddrMgrUpdate?relay
        RET
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond171 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker173 Using cfiCommon1
        CFI (cfiPicker173) NoFunction
        CFI (cfiPicker173) Picker
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_150:
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond174 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker177 Using cfiCommon1
        CFI (cfiPicker177) NoFunction
        CFI (cfiPicker177) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiPicker177
// 1525 
// 1526 /******************************************************************************
// 1527  * @fn          ZDSecMgrDeviceCtrlHandler
// 1528  *
// 1529  * @brief       Device control handler.
// 1530  *
// 1531  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1532  *
// 1533  * @return      none
// 1534  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1535 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceCtrlHandler:
        CFI Block cfiBlock178 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlHandler
// 1536 {
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendMasterKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrEstablishKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1537   uint8 state;
// 1538   uint8 cntr;
// 1539 
// 1540 
// 1541   state = device->ctrl->state;
        MOV     A,R2
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_48:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
// 1542   cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1543 
// 1544   switch ( state )
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for ZDSecMgrDeviceCtrlHandler>_0`:
        DATA
        DB        2
        DB        5
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_1
        DW        ??ZDSecMgrDeviceCtrlHandler_2
        DW        ??ZDSecMgrDeviceCtrlHandler_3
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_4
        CODE
// 1545   {
// 1546     case ZDSECMGR_CTRL_TK_MASTER:
// 1547       if ( ZDSecMgrSendMasterKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_1:
        ; Setup parameters for call to function ZDSecMgrSendMasterKey
        LCALL   ??ZDSecMgrSendMasterKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
// 1548       {
// 1549         state = ZDSECMGR_CTRL_SKKE_INIT;
        MOV     ?V0 + 0,#0x3
// 1550         cntr  = ZDSECMGR_CTRL_SKKE_INIT_CNTR;
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
// 1551       }
// 1552       break;
// 1553 
// 1554     case ZDSECMGR_CTRL_SKKE_INIT:
// 1555       if ( ZDSecMgrEstablishKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_2:
        ; Setup parameters for call to function ZDSecMgrEstablishKey
        LCALL   ??ZDSecMgrEstablishKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
// 1556       {
// 1557         state = ZDSECMGR_CTRL_SKKE_WAIT;
        MOV     ?V0 + 0,#0x4
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
// 1558       }
// 1559       break;
// 1560 
// 1561     case ZDSECMGR_CTRL_SKKE_WAIT:
// 1562       // continue to wait for SKA control timeout
// 1563       break;
// 1564 
// 1565     case ZDSECMGR_CTRL_TK_NWK:
// 1566       if ( ZDSecMgrSendNwkKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_4:
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceCtrlHandler_0
// 1567       {
// 1568         state = ZDSECMGR_CTRL_NONE;
// 1569       }
// 1570       break;
// 1571 
// 1572     default:
// 1573       state = ZDSECMGR_CTRL_NONE;
// 1574       break;
// 1575   }
// 1576 
// 1577   if ( state != ZDSECMGR_CTRL_NONE )
??ZDSecMgrDeviceCtrlHandler_3:
        MOV     A,?V0 + 0
        JZ      ??ZDSecMgrDeviceCtrlHandler_0
// 1578   {
// 1579     device->ctrl->state = state;
??ZDSecMgrDeviceCtrlHandler_5:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1580     device->ctrl->cntr  = cntr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine23 & 0xFFFF
// 1581 
// 1582     osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );         
??CrossCallReturnLabel_39:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??CrossCallReturnLabel_45
// 1583   }
// 1584   else
// 1585   {
// 1586     ZDSecMgrCtrlRelease( device->ctrl );
??ZDSecMgrDeviceCtrlHandler_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine25 & 0xFFFF
// 1587   }
// 1588 }
??CrossCallReturnLabel_45:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond179 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker181 Using cfiCommon1
        CFI (cfiPicker181) NoFunction
        CFI (cfiPicker181) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_104:
        RET
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiPicker181

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond182 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_49
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_44
        CFI (cfiCond184) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond184) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond184) CFA_SP SP+-5
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_45
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_39
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_40
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker188 Using cfiCommon1
        CFI (cfiPicker188) NoFunction
        CFI (cfiPicker188) Picker
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_232:
        LJMP    ?Subroutine72 & 0xFFFF
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond189 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_103:
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191
// 1589 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1590 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceCtrlSetup:
        CFI Block cfiBlock192 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlSetup
// 1591 {
        FUNCALL ZDSecMgrDeviceCtrlSetup, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1592   if ( device->ctrl != NULL )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_63:
        JNZ     ??ZDSecMgrDeviceCtrlSetup_0
        MOV     A,R1
??ZDSecMgrDeviceCtrlSetup_0:
        JZ      ??ZDSecMgrDeviceCtrlSetup_1
// 1593   {
// 1594     if ( device->secure == FALSE )
        MOV     A,R0
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlSetup_2
// 1595     {
// 1596       // send the master key data to the joining device
// 1597       device->ctrl->state = ZDSECMGR_CTRL_TK_MASTER;
        MOV     A,#0x2
        SJMP    ??ZDSecMgrDeviceCtrlSetup_3
// 1598     }
// 1599     else
// 1600     {
// 1601       // start SKKE
// 1602       device->ctrl->state = ZDSECMGR_CTRL_SKKE_INIT;
??ZDSecMgrDeviceCtrlSetup_2:
        MOV     A,#0x3
??ZDSecMgrDeviceCtrlSetup_3:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
// 1603     }
// 1604 
// 1605     ZDSecMgrDeviceCtrlHandler( device );
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
// 1606   }
// 1607 }
??ZDSecMgrDeviceCtrlSetup_1:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock192

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond193 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond195) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond195) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond195) CFA_SP SP+-5
        CFI Block cfiPicker196 Using cfiCommon1
        CFI (cfiPicker196) NoFunction
        CFI (cfiPicker196) Picker
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_192:
        MOV     A,R0
        RET
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiPicker196
// 1608 
// 1609 /******************************************************************************
// 1610  * @fn          ZDSecMgrDeviceCtrlUpdate
// 1611  *
// 1612  * @brief       Update control data.
// 1613  *
// 1614  * @param       extAddr - [in] EXT address
// 1615  * @param       state   - [in] new control state
// 1616  *
// 1617  * @return      none
// 1618  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1619 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state )
ZDSecMgrDeviceCtrlUpdate:
        CFI Block cfiBlock197 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlUpdate
// 1620 {
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R6,A
// 1621   ZDSecMgrEntry_t* entry;
// 1622   ZDSecMgrCtrl_t*  ctrl;
// 1623 
// 1624 
// 1625   // lookup device entry data
// 1626   ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
// 1627 
// 1628   if ( entry != NULL )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_0:
        JZ      ??CrossCallReturnLabel_40
// 1629   {
// 1630     // lookup device control data
// 1631     ZDSecMgrCtrlLookup( entry, &ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_127:
        LCALL   ?Subroutine51 & 0xFFFF
// 1632 
// 1633     // make sure control data is valid
// 1634     if ( ctrl != NULL )
??CrossCallReturnLabel_89:
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_1:
        JZ      ??CrossCallReturnLabel_40
// 1635     {
// 1636       // possible state transitions
// 1637       if ( ctrl->state == ZDSECMGR_CTRL_SKKE_WAIT )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x5
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_98:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??CrossCallReturnLabel_40
// 1638       {
// 1639         if ( state == ZDSECMGR_CTRL_SKKE_DONE )
        MOV     A,#0x5
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_2
// 1640         {
// 1641           // send the network key
// 1642           ctrl->state = ZDSECMGR_CTRL_TK_NWK;
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceCtrlUpdate_3
// 1643           ctrl->cntr  = ZDSECMGR_CTRL_TK_NWK_CNTR;
// 1644         }
// 1645         else if ( state == ZDSECMGR_CTRL_SKKE_FAIL )
??ZDSecMgrDeviceCtrlUpdate_2:
        MOV     A,#0x6
        XRL     A,R6
        JNZ     ??CrossCallReturnLabel_40
// 1646         {
// 1647           // force default timeout in order to cleanup control logic
// 1648           ctrl->state = ZDSECMGR_CTRL_SKKE_FAIL;
        MOV     A,#0x6
// 1649           ctrl->cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1650         }
// 1651       }
// 1652       // timer should be active
// 1653     }
// 1654   }
??ZDSecMgrDeviceCtrlUpdate_3:
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_151:
        LCALL   ?Subroutine23 & 0xFFFF
        CFI EndBlock cfiBlock197
// 1655 }
??CrossCallReturnLabel_40:
        REQUIRE ?Subroutine82
        ; // Fall through to label ?Subroutine82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine82:
        CFI Block cfiBlock198 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LJMP    ??Subroutine95_0 & 0xFFFF
        CFI EndBlock cfiBlock198

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond199 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_15
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_139
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_140
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_141
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_142
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_143
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_144
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_145
        CFI (cfiCond208) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond208) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond208) CFA_SP SP+-5
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_146
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_147
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_148
        CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond211) CFA_SP SP+0
        CFI (cfiCond211) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_149
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_0
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_1
        CFI (cfiCond214) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond214) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond214) CFA_SP SP+-5
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_2
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_3
        CFI (cfiCond216) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond216) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond216) CFA_SP SP+-5
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_4
        CFI (cfiCond217) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond217) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond217) CFA_SP SP+-5
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker218 Using cfiCommon1
        CFI (cfiPicker218) NoFunction
        CFI (cfiPicker218) Picker
        MOVX    @DPTR,A
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiPicker218
        ; Setup parameters for call to function ZDSecMgrEntryLookup
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function APSME_EstablishKeyReq
        ; Setup parameters for call to function APSME_TransportKeyReq
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function NLME_LeaveReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function APSME_EstablishKeyRsp
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function APSME_RequestKeyReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        REQUIRE ?Subroutine71
        ; // Fall through to label ?Subroutine71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond219 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_15
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_139
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_140
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_141
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_142
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_143
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_144
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_145
        CFI (cfiCond228) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond228) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond228) CFA_SP SP+-5
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_146
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_147
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_148
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_149
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_0
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_1
        CFI (cfiCond234) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond234) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond234) CFA_SP SP+-5
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_2
        CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond235) CFA_SP SP+0
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_3
        CFI (cfiCond236) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond236) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond236) CFA_SP SP+-5
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_4
        CFI (cfiCond237) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond237) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond237) CFA_SP SP+-5
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker240 Using cfiCommon1
        CFI (cfiPicker240) NoFunction
        CFI (cfiPicker240) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiPicker240

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond241 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker243 Using cfiCommon1
        CFI (cfiPicker243) NoFunction
        CFI (cfiPicker243) Picker
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_102:
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiPicker243
// 1656 
// 1657 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr );

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1658 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr )
APSME_SKA_TimerExpired:
        CFI Block cfiBlock244 Using cfiCommon0
        CFI Function APSME_SKA_TimerExpired
// 1659 {
        ; Saved register size: 0
        ; Auto size: 0
// 1660   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1661   {
// 1662     if ( initiator == TRUE )
// 1663     {
// 1664       ZDSecMgrDeviceCtrlUpdate( partExtAddr, ZDSECMGR_CTRL_SKKE_FAIL );
// 1665     }
// 1666   }
// 1667 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock244
// 1668 
// 1669 /******************************************************************************
// 1670  * @fn          ZDSecMgrDeviceRemove
// 1671  *
// 1672  * @brief       Remove device from network.
// 1673  *
// 1674  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1675  *
// 1676  * @return      none
// 1677  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1678 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceRemove:
        CFI Block cfiBlock245 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemove
// 1679 {
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1680   APSME_RemoveDeviceReq_t remDevReq;
// 1681   NLME_LeaveReq_t         leaveReq;
// 1682   associated_devices_t*   assoc;
// 1683 
// 1684 
// 1685   // check if parent, remove the device
// 1686   if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_162:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,?V0 + 0
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceRemove_0
        MOV     A,?V0 + 1
        XRL     A,R7
??ZDSecMgrDeviceRemove_0:
        JNZ     ??ZDSecMgrDeviceRemove_1
// 1687   {
// 1688     // this is the parent of the device
// 1689     leaveReq.extAddr        = device->extAddr;
        LCALL   ?Subroutine17 & 0xFFFF
// 1690     leaveReq.removeChildren = FALSE;
??CrossCallReturnLabel_123:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1691     leaveReq.rejoin         = FALSE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1692 
// 1693     // find child association
// 1694     assoc = AssocGetWithExt( device->extAddr );
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1695 
// 1696     if ( ( assoc != NULL                            ) &&
// 1697          ( assoc->nodeRelation >= CHILD_RFD         ) &&
// 1698          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
        MOV     A,R0
        JNZ     ??ZDSecMgrDeviceRemove_2
        MOV     A,R1
??ZDSecMgrDeviceRemove_2:
        JZ      ??ZDSecMgrDeviceRemove_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrDeviceRemove_3
        CLR     C
        SUBB    A,#0x5
        JNC     ??ZDSecMgrDeviceRemove_3
// 1699     {
// 1700       // check if associated device is authenticated
// 1701       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_4
// 1702       {
// 1703         leaveReq.silent = FALSE;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceRemove_5
// 1704       }
// 1705       else
// 1706       {
// 1707         leaveReq.silent = TRUE;
??ZDSecMgrDeviceRemove_4:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
// 1708       }
// 1709 
// 1710       NLME_LeaveReq( &leaveReq );
// 1711     }
// 1712   }
??ZDSecMgrDeviceRemove_5:
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_144:
        LCALL   ??NLME_LeaveReq?relay
        SJMP    ??ZDSecMgrDeviceRemove_3
// 1713   else
// 1714   {
// 1715     // this is not the parent of the device
// 1716     remDevReq.parentAddr   = device->parentAddr;
??ZDSecMgrDeviceRemove_1:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1717     remDevReq.childExtAddr = device->extAddr;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine89_0 & 0xFFFF
// 1718 
// 1719     APSME_RemoveDeviceReq( &remDevReq );
// 1720   }
??CrossCallReturnLabel_119:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_RemoveDeviceReq?relay
// 1721 }
??ZDSecMgrDeviceRemove_3:
        MOV     A,#0x9
        SJMP    ??Subroutine91_0
        CFI EndBlock cfiBlock245

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiBlock246 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        CFI EndBlock cfiBlock246
        REQUIRE ??Subroutine91_0
        ; // Fall through to label ??Subroutine91_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine91_0:
        CFI Block cfiBlock247 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock247
        REQUIRE ??Subroutine92_0
        ; // Fall through to label ??Subroutine92_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine92_0:
        CFI Block cfiBlock248 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock248

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond249 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_123
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker251 Using cfiCommon1
        CFI (cfiPicker251) NoFunction
        CFI (cfiPicker251) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiPicker251
        REQUIRE ??Subroutine93_0
        ; // Fall through to label ??Subroutine93_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine93_0:
        CFI Block cfiCond252 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_125
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker255 Using cfiCommon1
        CFI (cfiPicker255) NoFunction
        CFI (cfiPicker255) Picker
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_207:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiPicker255
// 1722 
// 1723 /******************************************************************************
// 1724  * @fn          ZDSecMgrDeviceValidateSKKE
// 1725  *
// 1726  * @brief       Decide whether device is allowed for SKKE.
// 1727  *
// 1728  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1729  *
// 1730  * @return      ZStatus_t
// 1731  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1732 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateSKKE:
        CFI Block cfiBlock256 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateSKKE
// 1733 {
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1734   ZStatus_t status;
// 1735   uint16    ami;
// 1736   uint8*    key;
// 1737 
// 1738 
// 1739   // get EXT address
// 1740   status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
// 1741 
// 1742   if ( status == ZSuccess )
        JNZ     ??CrossCallReturnLabel_46
// 1743   {
// 1744     // get MASTER key
// 1745     status = ZDSecMgrMasterKeyLookup( ami, &key );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
// 1746 
// 1747     if ( status == ZSuccess )
??CrossCallReturnLabel_42:
        JNZ     ??CrossCallReturnLabel_46
// 1748     {
// 1749     //  // check if initiator is Trust Center
// 1750     //  if ( device->nwkAddr == APSME_TRUSTCENTER_NWKADDR )
// 1751     //  {
// 1752     //    // verify NWK key not sent
// 1753     //    // devtag.todo
// 1754     //    // temporary - add device to internal data
// 1755     //    status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1756     //  }
// 1757     //  else
// 1758     //  {
// 1759     //    // initiator not Trust Center - End to End SKKE - set policy
// 1760     //    // for accepting an SKKE initiation
// 1761     //    // temporary - add device to internal data
// 1762     //    status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1763     //  }
// 1764         status = ZDSecMgrDeviceEntryAdd( device, ami );
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine26 & 0xFFFF
// 1765     }
// 1766   }
// 1767 
// 1768   return status;
??CrossCallReturnLabel_46:
        LJMP    ?Subroutine82 & 0xFFFF
        CFI EndBlock cfiBlock256
// 1769 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiBlock257 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        CFI EndBlock cfiBlock257
        REQUIRE ??Subroutine94_0
        ; // Fall through to label ??Subroutine94_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine94_0:
        CFI Block cfiBlock258 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock258
        REQUIRE ??Subroutine95_0
        ; // Fall through to label ??Subroutine95_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine95_0:
        CFI Block cfiBlock259 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock259
        REQUIRE ??Subroutine96_0
        ; // Fall through to label ??Subroutine96_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine96_0:
        CFI Block cfiBlock260 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock260

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond261 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond262) CFA_SP SP+0
        CFI (cfiCond262) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker264 Using cfiCommon1
        CFI (cfiPicker264) NoFunction
        CFI (cfiPicker264) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     A,R1
        RET
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiPicker264
// 1770 
// 1771 /******************************************************************************
// 1772  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1773  *
// 1774  * @brief       Decide whether device is allowed.
// 1775  *
// 1776  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1777  *
// 1778  * @return      ZStatus_t
// 1779  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1780 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateRM:
        CFI Block cfiBlock265 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateRM
// 1781 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1782 
// 1783   ZStatus_t status;
// 1784   status = ZSuccess;
        MOV     R1,#0x0
// 1785 
// 1786   (void)device;  // Intentionally unreferenced parameter
// 1787   
// 1788   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1789   // the trust center to reject any newly joining devices by sending
// 1790   // Remove-device to the parents.
// 1791   if ( zgSecurePermitJoin == false )
        MOV     DPTR,#zgSecurePermitJoin
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceValidateRM_0
// 1792   {
// 1793     status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
// 1794   }
// 1795 
// 1796 
// 1797 
// 1798 #if 0  // Taken out because the following functionality is only used for test
// 1799        // purpose. A more efficient (above) way is used. It can be put
// 1800        // back in if customers request for a white/black list feature.
// 1801        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1802 
// 1803   // The following code processes the device black list (stored device list)
// 1804   // If the joining device is not part of the forbidden device list
// 1805   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1806   // will send Remove-device and ban the device from joining.
// 1807 
// 1808   uint8     index;
// 1809   uint8*    restricted;
// 1810 
// 1811   // Look through the stored device list - used for restricted devices
// 1812   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1813   {
// 1814     restricted = ZDSecMgrStoredDeviceList[index];
// 1815 
// 1816     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1817     {
// 1818       // return as unknown device in regards to validation
// 1819       status = ZNwkUnknownDevice;
// 1820 
// 1821       // break from loop
// 1822       index = ZDSECMGR_STORED_DEVICES;
// 1823     }
// 1824   }
// 1825 
// 1826 #endif
// 1827 
// 1828   return status;
??ZDSecMgrDeviceValidateRM_0:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock265
// 1829 }
// 1830 
// 1831 /******************************************************************************
// 1832  * @fn          ZDSecMgrDeviceValidateCM (COMMERCIAL MODE)
// 1833  *
// 1834  * @brief       Decide whether device is allowed.
// 1835  *
// 1836  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1837  *
// 1838  * @return      ZStatus_t
// 1839  */
// 1840 //devtag.pro.security

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1841 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateCM:
        CFI Block cfiBlock266 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateCM
// 1842 {
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrMasterKeyLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1843   ZStatus_t status;
// 1844   uint16    ami;
// 1845   uint8*    key;
// 1846 
// 1847 
// 1848 //  // check for pre configured setting
// 1849 //  if ( device->secure == TRUE )
// 1850 //  {
// 1851 //    // get EXT address and MASTER key
// 1852 //    status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1853 //
// 1854 //    if ( status == ZSuccess )
// 1855 //    {
// 1856 //      status = ZDSecMgrMasterKeyLookup( ami, &key );
// 1857 //    }
// 1858 //  }
// 1859 //  else
// 1860 //  {
// 1861     // implement EXT address and MASTER key policy here -- the total number of
// 1862     // Security Manager entries should never exceed the number of EXT addresses
// 1863     // and MASTER keys available
// 1864 
// 1865     // set status based on policy
// 1866     //status = ZNwkUnknownDevice;
// 1867 
// 1868     // set status based on policy
// 1869     status = ZSuccess; // ZNwkUnknownDevice;
// 1870 
// 1871     // get key based on policy
// 1872     key = ZDSecMgrTCMasterKey;
// 1873 
// 1874     // if policy, store new EXT address
// 1875     status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
        MOV     A,R6
        ADD     A,#0x2
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_122:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPL,?V0 + 0
        MOV     DPH,R1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        MOV     ?V0 + 2,A
// 1876 
// 1877     // set the key
// 1878     ZDSecMgrMasterKeyLoad( device->extAddr, key );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLoad
        MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL   ??ZDSecMgrMasterKeyLoad?relay
// 1879 //  }
// 1880 
// 1881   // if EXT address and MASTER key available -- add device
// 1882   if ( status == ZSuccess )
        MOV     A,?V0 + 2
        JNZ     ??ZDSecMgrDeviceValidateCM_0
// 1883   {
// 1884     // add device to internal data - with control
// 1885     status = ZDSecMgrDeviceEntryAdd( device, ami );
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine26 & 0xFFFF
// 1886   }
??CrossCallReturnLabel_47:
        MOV     A,R1
        MOV     ?V0 + 2,A
// 1887 
// 1888   return status;
??ZDSecMgrDeviceValidateCM_0:
        MOV     R1,?V0 + 2
        MOV     A,#0x2
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock266
// 1889 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond267 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker269 Using cfiCommon1
        CFI (cfiPicker269) NoFunction
        CFI (cfiPicker269) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceEntryAdd?relay
        RET
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiPicker269
// 1890 //devtag.pro.security
// 1891 #if 0
// 1892 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
// 1893 {
// 1894   ZStatus_t status;
// 1895   uint16    ami;
// 1896   uint8*    key;
// 1897 
// 1898 
// 1899   // check for pre configured setting
// 1900   if ( device->secure == TRUE )
// 1901   {
// 1902     // get EXT address and MASTER key
// 1903     status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1904 
// 1905     if ( status == ZSuccess )
// 1906     {
// 1907       status = ZDSecMgrMasterKeyLookup( ami, &key );
// 1908     }
// 1909   }
// 1910   else
// 1911   {
// 1912     // implement EXT address and MASTER key policy here -- the total number of
// 1913     // Security Manager entries should never exceed the number of EXT addresses
// 1914     // and MASTER keys available
// 1915 
// 1916     // set status based on policy
// 1917     status = ZSuccess; // ZNwkUnknownDevice;
// 1918 
// 1919     // get the address index
// 1920     if ( ZDSecMgrExtAddrLookup( device->extAddr, &ami ) != ZSuccess )
// 1921     {
// 1922       // if policy, store new EXT address
// 1923       status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
// 1924     }
// 1925 
// 1926     // get the address index
// 1927     if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
// 1928     {
// 1929       // if policy, store new key -- NULL will zero key
// 1930       status = ZDSecMgrMasterKeyStore( ami, NULL );
// 1931     }
// 1932   }
// 1933 
// 1934   // if EXT address and MASTER key available -- add device
// 1935   if ( status == ZSuccess )
// 1936   {
// 1937     // add device to internal data - with control
// 1938     status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1939   }
// 1940 
// 1941   return status;
// 1942 }
// 1943 #endif
// 1944 
// 1945 /******************************************************************************
// 1946  * @fn          ZDSecMgrDeviceValidate
// 1947  *
// 1948  * @brief       Decide whether device is allowed.
// 1949  *
// 1950  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1951  *
// 1952  * @return      ZStatus_t
// 1953  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1954 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidate:
        CFI Block cfiBlock270 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidate
// 1955 {
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1956   ZStatus_t status;
// 1957 
// 1958 
// 1959   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_0
// 1960   {
// 1961     // device may be joining with a secure flag but it is ultimately the Trust
// 1962     // Center that decides -- check if expected pre configured device --
// 1963     // override settings
// 1964     if ( zgPreConfigKeys == TRUE )
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_1
// 1965     {
// 1966       device->secure = TRUE;
        MOV     A,#0x1
        SJMP    ??ZDSecMgrDeviceValidate_2
// 1967     }
// 1968     else
// 1969     {
// 1970       device->secure = FALSE;
??ZDSecMgrDeviceValidate_1:
        CLR     A
??ZDSecMgrDeviceValidate_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
// 1971     }
// 1972 
// 1973     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1974     {
// 1975       status = ZDSecMgrDeviceValidateCM( device );
// 1976     }
// 1977     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1978     {
// 1979       status = ZDSecMgrDeviceValidateRM( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL   ??ZDSecMgrDeviceValidateRM?relay
        SJMP    ??ZDSecMgrDeviceValidate_3
// 1980     }
// 1981   }
// 1982   else
// 1983   {
// 1984     status = ZNwkUnknownDevice;
??ZDSecMgrDeviceValidate_0:
        MOV     R1,#-0x38
// 1985   }
// 1986 
// 1987   return status;
??ZDSecMgrDeviceValidate_3:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock270
// 1988 }
// 1989 
// 1990 /******************************************************************************
// 1991  * @fn          ZDSecMgrDeviceJoin
// 1992  *
// 1993  * @brief       Try to join this device.
// 1994  *
// 1995  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1996  *
// 1997  * @return      ZStatus_t
// 1998  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1999 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoin:
        CFI Block cfiBlock271 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoin
// 2000 {
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2001   ZStatus_t status;
// 2002   uint16    ami;
// 2003 
// 2004   // attempt to validate device
// 2005   status = ZDSecMgrDeviceValidate( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL   ??ZDSecMgrDeviceValidate?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 2006 
// 2007   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoin_0
// 2008   {
// 2009     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2010     {
// 2011       ZDSecMgrDeviceCtrlSetup( device );
// 2012     }
// 2013     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2014     {
// 2015       // Add the device to the address manager
// 2016       ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 2017       //send the nwk key data to the joining device
// 2018       status = ZDSecMgrSendNwkKey( device );
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        SJMP    ??ZDSecMgrDeviceJoin_1
// 2019     }
// 2020   }
// 2021   else
// 2022   {
// 2023     // not allowed, remove the device
// 2024     ZDSecMgrDeviceRemove( device );
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceRemove?relay
// 2025   }
// 2026 
// 2027   return status;
??ZDSecMgrDeviceJoin_1:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine83 & 0xFFFF
        CFI EndBlock cfiBlock271
// 2028 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond272 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond273) CFA_SP SP+0
        CFI (cfiCond273) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker274 Using cfiCommon1
        CFI (cfiPicker274) NoFunction
        CFI (cfiPicker274) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_237:
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiPicker274
// 2029 
// 2030 /******************************************************************************
// 2031  * @fn          ZDSecMgrDeviceJoinDirect
// 2032  *
// 2033  * @brief       Try to join this device as a direct child.
// 2034  *
// 2035  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2036  *
// 2037  * @return      ZStatus_t
// 2038  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2039 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinDirect:
        CFI Block cfiBlock275 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinDirect
// 2040 {
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2041   ZStatus_t status;
// 2042 
// 2043   status = ZDSecMgrDeviceJoin( device );
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        LCALL   ??ZDSecMgrDeviceJoin?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 2044 
// 2045   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoinDirect_0
// 2046   {
// 2047     // set association status to authenticated
// 2048     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine97_0 & 0xFFFF
// 2049   }
??CrossCallReturnLabel_130:
        LCALL   ??AssocGetWithShort?relay
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 2050 
// 2051   return status;
??ZDSecMgrDeviceJoinDirect_0:
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock275
// 2052 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond276 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_132
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker278 Using cfiCommon1
        CFI (cfiPicker278) NoFunction
        CFI (cfiPicker278) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiPicker278
        REQUIRE ??Subroutine97_0
        ; // Fall through to label ??Subroutine97_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine97_0:
        CFI Block cfiCond279 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_126
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond280 Using cfiCommon0
        CFI (cfiCond280) NoFunction
        CFI (cfiCond280) Conditional ??CrossCallReturnLabel_127
        CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond280) CFA_SP SP+0
        CFI (cfiCond280) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond282 Using cfiCommon0
        CFI (cfiCond282) NoFunction
        CFI (cfiCond282) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond282) CFA_SP SP+0
        CFI (cfiCond282) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond283 Using cfiCommon0
        CFI (cfiCond283) NoFunction
        CFI (cfiCond283) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond283) CFA_SP SP+0
        CFI (cfiCond283) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond284) CFA_SP SP+0
        CFI (cfiCond284) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond285 Using cfiCommon0
        CFI (cfiCond285) NoFunction
        CFI (cfiCond285) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond285) CFA_SP SP+0
        CFI (cfiCond285) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker287 Using cfiCommon1
        CFI (cfiPicker287) NoFunction
        CFI (cfiPicker287) Picker
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_241:
        RET
        CFI EndBlock cfiCond279
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiCond282
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiPicker287

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond288 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_36
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+0
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_132
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond291 Using cfiCommon0
        CFI (cfiCond291) NoFunction
        CFI (cfiCond291) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_133
        CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond291) CFA_SP SP+0
        CFI (cfiCond291) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_126
        CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond292) CFA_SP SP+0
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_127
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_128
        CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond294) CFA_SP SP+0
        CFI (cfiCond294) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_129
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_130
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_131
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_64
        CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond298) CFA_SP SP+0
        CFI (cfiCond298) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond299 Using cfiCommon0
        CFI (cfiCond299) NoFunction
        CFI (cfiCond299) Conditional ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_65
        CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond299) CFA_SP SP+0
        CFI (cfiCond299) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_68
        CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond300) CFA_SP SP+0
        CFI (cfiCond300) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_69
        CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond301) CFA_SP SP+0
        CFI (cfiCond301) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_59
        CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond302) CFA_SP SP+0
        CFI (cfiCond302) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_60
        CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond303) CFA_SP SP+0
        CFI (cfiCond303) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond304 Using cfiCommon0
        CFI (cfiCond304) NoFunction
        CFI (cfiCond304) Conditional ??CrossCallReturnLabel_242, ??CrossCallReturnLabel_234
        CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond304) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond304) CFA_SP SP+0
        CFI (cfiCond304) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_242, ??CrossCallReturnLabel_235
        CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond305) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond305) CFA_SP SP+0
        CFI (cfiCond305) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiCond306 Using cfiCommon0
        CFI (cfiCond306) NoFunction
        CFI (cfiCond306) Conditional ??CrossCallReturnLabel_242, ??CrossCallReturnLabel_236
        CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond306) CFA_SP SP+0
        CFI (cfiCond306) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker307 Using cfiCommon1
        CFI (cfiPicker307) NoFunction
        CFI (cfiPicker307) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiCond306
        CFI EndBlock cfiPicker307
// 2053 
// 2054 /******************************************************************************
// 2055  * @fn          ZDSecMgrDeviceJoinFwd
// 2056  *
// 2057  * @brief       Forward join to Trust Center.
// 2058  *
// 2059  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2060  *
// 2061  * @return      ZStatus_t
// 2062  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2063 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinFwd:
        CFI Block cfiBlock308 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinFwd
// 2064 {
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 8)
// 2065   ZStatus_t               status;
// 2066   APSME_UpdateDeviceReq_t req;
// 2067 
// 2068 
// 2069   // forward any joining device to the Trust Center -- the Trust Center will
// 2070   // decide if the device is allowed to join
// 2071   status = ZSuccess;
// 2072 
// 2073   // forward authorization to the Trust Center
// 2074   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2075   req.devAddr    = device->nwkAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
// 2076   req.devExtAddr = device->extAddr;
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
// 2077 
// 2078   // set security status, option for router to reject if policy set
// 2079   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
??CrossCallReturnLabel_176:
        MOV     A,R2
        ADD     A,#0x7
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDSecMgrDeviceJoinFwd_0
// 2080   {
// 2081     if ( device->devStatus & DEV_REJOIN_STATUS )
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_1
// 2082     {
// 2083       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_2
// 2084         req.status = APSME_UD_HIGH_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2085       else
// 2086         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2087     }
// 2088     else
// 2089       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2090   }
// 2091   else
// 2092   {
// 2093     if ( device->devStatus & DEV_REJOIN_STATUS )
??ZDSecMgrDeviceJoinFwd_0:
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_4
// 2094     {
// 2095       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_5
// 2096         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2097       else
// 2098         req.status = APSME_UD_STANDARD_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_5:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2099     }
// 2100     else
// 2101       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrDeviceJoinFwd_3:
        MOVX    @DPTR,A
// 2102   }
// 2103 
// 2104   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2105     req.apsSecure = TRUE;
// 2106   else
// 2107     req.apsSecure = FALSE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine101_0 & 0xFFFF
// 2108 
// 2109   // send and APSME_UPDATE_DEVICE request to the trust center
// 2110   status = APSME_UpdateDeviceReq( &req );
// 2111 
// 2112   return status;
??CrossCallReturnLabel_145:
        LCALL   ??APSME_UpdateDeviceReq?relay
        MOV     A,#0x8
        LJMP    ??Subroutine110_0 & 0xFFFF
        CFI EndBlock cfiBlock308
// 2113 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond309 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_136
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond311 Using cfiCommon0
        CFI (cfiCond311) NoFunction
        CFI (cfiCond311) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond311) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond311) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond311) CFA_SP SP+-5
        CFI Block cfiPicker312 Using cfiCommon1
        CFI (cfiPicker312) NoFunction
        CFI (cfiPicker312) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiCond311
        CFI EndBlock cfiPicker312
        REQUIRE ??Subroutine98_0
        ; // Fall through to label ??Subroutine98_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine98_0:
        CFI Block cfiCond313 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_134
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond314 Using cfiCommon0
        CFI (cfiCond314) NoFunction
        CFI (cfiCond314) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond314) CFA_SP SP+0
        CFI (cfiCond314) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond315 Using cfiCommon0
        CFI (cfiCond315) NoFunction
        CFI (cfiCond315) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond315) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond315) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond315) CFA_SP SP+-5
        CFI (cfiCond315) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond316 Using cfiCommon0
        CFI (cfiCond316) NoFunction
        CFI (cfiCond316) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond316) CFA_SP SP+0
        CFI (cfiCond316) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond317 Using cfiCommon0
        CFI (cfiCond317) NoFunction
        CFI (cfiCond317) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond317) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond317) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond317) CFA_SP SP+-5
        CFI Block cfiPicker318 Using cfiCommon1
        CFI (cfiPicker318) NoFunction
        CFI (cfiPicker318) Picker
        LCALL   ??Subroutine111_0 & 0xFFFF
??CrossCallReturnLabel_220:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond313
        CFI EndBlock cfiCond314
        CFI EndBlock cfiCond315
        CFI EndBlock cfiCond316
        CFI EndBlock cfiCond317
        CFI EndBlock cfiPicker318
// 2114 
// 2115 /******************************************************************************
// 2116  * @fn          ZDSecMgrDeviceNew
// 2117  *
// 2118  * @brief       Process a new device.
// 2119  *
// 2120  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2121  *
// 2122  * @return      ZStatus_t
// 2123  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2124 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
ZDSecMgrDeviceNew:
        CFI Block cfiBlock319 Using cfiCommon0
        CFI Function ZDSecMgrDeviceNew
// 2125 {
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinFwd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2126   ZStatus_t status;
// 2127 
// 2128   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2129   {
// 2130     // try to join this device
// 2131     status = ZDSecMgrDeviceJoinDirect( joiner );
// 2132   }
// 2133   else
// 2134   {
// 2135     status = ZDSecMgrDeviceJoinFwd( joiner );
// 2136   }
// 2137 
// 2138   return status;
        ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
        LCALL   ??ZDSecMgrDeviceJoinFwd?relay
        SJMP    ??Subroutine100_0
        CFI EndBlock cfiBlock319
// 2139 }
// 2140 
// 2141 /******************************************************************************
// 2142  * @fn          ZDSecMgrAssocDeviceAuth
// 2143  *
// 2144  * @brief       Set associated device status to authenticated
// 2145  *
// 2146  * @param       assoc - [in, out] associated_devices_t
// 2147  *
// 2148  * @return      none
// 2149  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2150 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
ZDSecMgrAssocDeviceAuth:
        CFI Block cfiBlock320 Using cfiCommon0
        CFI Function ZDSecMgrAssocDeviceAuth
// 2151 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2152   if ( assoc != NULL )
        MOV     A,R2
        JNZ     ??ZDSecMgrAssocDeviceAuth_0
        MOV     A,R3
??ZDSecMgrAssocDeviceAuth_0:
        JZ      ??ZDSecMgrAssocDeviceAuth_1
// 2153   {
// 2154     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        MOVX    @DPTR,A
// 2155   }
// 2156 }
??ZDSecMgrAssocDeviceAuth_1:
        SJMP    ??Subroutine100_0
        CFI EndBlock cfiBlock320

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiBlock321 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine63 & 0xFFFF
        CFI EndBlock cfiBlock321
??CrossCallReturnLabel_214:
        REQUIRE ??Subroutine99_0
        ; // Fall through to label ??Subroutine99_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine99_0:
        CFI Block cfiBlock322 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock322
        REQUIRE ??Subroutine100_0
        ; // Fall through to label ??Subroutine100_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine100_0:
        CFI Block cfiBlock323 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock323
// 2157 
// 2158 /******************************************************************************
// 2159  * @fn          ZDSecMgrAuthInitiate
// 2160  *
// 2161  * @brief       Initiate entity authentication
// 2162  *
// 2163  * @param       responder - [in] responder EXT address
// 2164  *
// 2165  * @return      none
// 2166  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2167 void ZDSecMgrAuthInitiate( uint8* responder )
ZDSecMgrAuthInitiate:
        CFI Block cfiBlock324 Using cfiCommon0
        CFI Function ZDSecMgrAuthInitiate
// 2168 {
        FUNCALL ZDSecMgrAuthInitiate, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthInitiate, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2169   APSME_AuthenticateReq_t req;
// 2170 
// 2171 
// 2172   // make sure NWK address is available
// 2173   if ( APSME_LookupNwkAddr( responder, &req.nwkAddr ) )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        JZ      ??ZDSecMgrAuthInitiate_0
// 2174   {
// 2175     // set request fields
// 2176     req.extAddr   = responder;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2177     req.action    = APSME_EA_INITIATE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2178     req.challenge = NULL;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine101_0 & 0xFFFF
// 2179 
// 2180     // start EA processing
// 2181     APSME_AuthenticateReq( &req );
// 2182   }
??CrossCallReturnLabel_146:
        LCALL   ??APSME_AuthenticateReq?relay
// 2183 }
??ZDSecMgrAuthInitiate_0:
        MOV     A,#0x7
        LJMP    ??Subroutine95_0 & 0xFFFF
        CFI EndBlock cfiBlock324

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond325 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond326) CFA_SP SP+0
        CFI (cfiCond326) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker327 Using cfiCommon1
        CFI (cfiPicker327) NoFunction
        CFI (cfiPicker327) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiPicker327
        REQUIRE ??Subroutine101_0
        ; // Fall through to label ??Subroutine101_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine101_0:
        CFI Block cfiCond328 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_141
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond329 Using cfiCommon0
        CFI (cfiCond329) NoFunction
        CFI (cfiCond329) Conditional ??CrossCallReturnLabel_142
        CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond329) CFA_SP SP+0
        CFI (cfiCond329) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond330 Using cfiCommon0
        CFI (cfiCond330) NoFunction
        CFI (cfiCond330) Conditional ??CrossCallReturnLabel_143
        CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond330) CFA_SP SP+0
        CFI (cfiCond330) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond331 Using cfiCommon0
        CFI (cfiCond331) NoFunction
        CFI (cfiCond331) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond331) CFA_SP SP+0
        CFI (cfiCond331) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond332 Using cfiCommon0
        CFI (cfiCond332) NoFunction
        CFI (cfiCond332) Conditional ??CrossCallReturnLabel_145
        CFI (cfiCond332) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond332) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond332) CFA_SP SP+-5
        CFI (cfiCond332) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond333 Using cfiCommon0
        CFI (cfiCond333) NoFunction
        CFI (cfiCond333) Conditional ??CrossCallReturnLabel_146
        CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond333) CFA_SP SP+0
        CFI (cfiCond333) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond334 Using cfiCommon0
        CFI (cfiCond334) NoFunction
        CFI (cfiCond334) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond334) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond334) CFA_SP SP+0
        CFI (cfiCond334) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond335) CFA_SP SP+0
        CFI (cfiCond335) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond336 Using cfiCommon0
        CFI (cfiCond336) NoFunction
        CFI (cfiCond336) Conditional ??CrossCallReturnLabel_149
        CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond336) CFA_SP SP+0
        CFI (cfiCond336) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond337 Using cfiCommon0
        CFI (cfiCond337) NoFunction
        CFI (cfiCond337) Conditional ??CrossCallReturnLabel_139
        CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond337) CFA_SP SP+0
        CFI (cfiCond337) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond338 Using cfiCommon0
        CFI (cfiCond338) NoFunction
        CFI (cfiCond338) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond338) CFA_SP SP+0
        CFI (cfiCond338) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker339 Using cfiCommon1
        CFI (cfiPicker339) NoFunction
        CFI (cfiPicker339) Picker
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_155:
        RET
        CFI EndBlock cfiCond328
        CFI EndBlock cfiCond329
        CFI EndBlock cfiCond330
        CFI EndBlock cfiCond331
        CFI EndBlock cfiCond332
        CFI EndBlock cfiCond333
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiCond336
        CFI EndBlock cfiCond337
        CFI EndBlock cfiCond338
        CFI EndBlock cfiPicker339
// 2184 
// 2185 /******************************************************************************
// 2186  * @fn          ZDSecMgrAuthNwkKey
// 2187  *
// 2188  * @brief       Handle next step in authentication process
// 2189  *
// 2190  * @param       none
// 2191  *
// 2192  * @return      none
// 2193  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2194 void ZDSecMgrAuthNwkKey()
ZDSecMgrAuthNwkKey:
        CFI Block cfiBlock340 Using cfiCommon0
        CFI Function ZDSecMgrAuthNwkKey
// 2195 {
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2196   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthNwkKey_0
// 2197   {
// 2198     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2199     {
// 2200       uint8 parent[Z_EXTADDR_LEN];
// 2201 
// 2202       // get parent's EXT address
// 2203       NLME_GetCoordExtAddr( parent );
// 2204 
// 2205       // begin entity authentication with parent
// 2206       ZDSecMgrAuthInitiate( parent );
// 2207     }
// 2208     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2209     {
// 2210       // inform ZDO that device has been authenticated
// 2211       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
// 2212     }
// 2213   }
// 2214 }
??ZDSecMgrAuthNwkKey_0:
        SJMP    ??Subroutine100_0
        CFI EndBlock cfiBlock340
// 2215 
// 2216 /******************************************************************************
// 2217  * PUBLIC FUNCTIONS
// 2218  */
// 2219 /******************************************************************************
// 2220  * @fn          ZDSecMgrInit
// 2221  *
// 2222  * @brief       Initialize ZigBee Device Security Manager.
// 2223  *
// 2224  * @param       state - device initialization state
// 2225  *
// 2226  * @return      none
// 2227  */
// 2228 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2229 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 2230 void ZDSecMgrAddrMgrCB( uint8           update,
// 2231                         AddrMgrEntry_t* newEntry,
// 2232                         AddrMgrEntry_t* oldEntry )
// 2233 {
// 2234   (void)update;
// 2235   (void)newEntry;
// 2236   (void)oldEntry;
// 2237 }
// 2238 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2239 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2240 void ZDSecMgrInit(uint8 state)
ZDSecMgrInit:
        FUNCALL ZDSecMgrInit, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?Subroutine79
        ; // Fall through to label ?Subroutine79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine79:
        CFI Block cfiBlock341 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        LCALL   ??APSME_SecurityNM?relay
        SJMP    ??Subroutine100_0
        CFI EndBlock cfiBlock341
// 2241 {
// 2242   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2243       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2244   {
// 2245     // initialize sub modules
// 2246     ZDSecMgrMasterKeyInit();
// 2247     ZDSecMgrEntryInit(state);
// 2248 
// 2249     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2250     {
// 2251       ZDSecMgrCtrlInit();
// 2252     }
// 2253 
// 2254     // register with Address Manager
// 2255     #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2256     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 2257     #endif
// 2258   }
// 2259 
// 2260   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2261   {
// 2262     // configure SKA slot data
// 2263     APSME_SKA_SlotInit( ZDSECMGR_SKA_SLOT_MAX );
// 2264   }
// 2265   else if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2266   {
// 2267     APSME_TCLinkKeyInit();  
// 2268     APSME_TCAddrSetup( zgTrustCenterAddr );    
// 2269   
// 2270   }
// 2271 
// 2272   if ( ZG_SECURE_ENABLED )
// 2273   {
// 2274     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2275     {
// 2276       // setup joining permissions
// 2277       ZDSecMgrPermitJoiningEnabled = TRUE;
// 2278       ZDSecMgrPermitJoiningTimed   = FALSE;
// 2279     }
// 2280   }
// 2281 
// 2282   // configure security based on security mode and type of device
// 2283   ZDSecMgrConfig();
// 2284 }
// 2285 
// 2286 /******************************************************************************
// 2287  * @fn          ZDSecMgrConfig
// 2288  *
// 2289  * @brief       Configure ZigBee Device Security Manager.
// 2290  *
// 2291  * @param       none
// 2292  *
// 2293  * @return      none
// 2294  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2295 void ZDSecMgrConfig( void )
ZDSecMgrConfig:
        CFI Block cfiBlock342 Using cfiCommon0
        CFI Function ZDSecMgrConfig
        FUNCALL ZDSecMgrConfig, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine79
        CFI EndBlock cfiBlock342
// 2296 {
// 2297   if ( ZG_SECURE_ENABLED )
// 2298   {
// 2299     SSP_Init();
// 2300 
// 2301     if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2302         || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2303     {
// 2304       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2305       {
// 2306         // COMMERCIAL MODE - COORDINATOR DEVICE
// 2307         APSME_SecurityCM_CD();
// 2308       }
// 2309       else if ( ZSTACK_ROUTER_BUILD )
// 2310       {
// 2311         // COMMERCIAL MODE - ROUTER DEVICE
// 2312         APSME_SecurityCM_RD();
// 2313       }
// 2314       else
// 2315       {
// 2316         // COMMERCIAL MODE - END DEVICE
// 2317         APSME_SecurityCM_ED();
// 2318       }
// 2319     }
// 2320     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2321     {
// 2322       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2323       {
// 2324         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 2325         APSME_SecurityRM_CD();
// 2326       }
// 2327       else if ( ZSTACK_ROUTER_BUILD )
// 2328       {
// 2329         // RESIDENTIAL MODE - ROUTER DEVICE
// 2330         APSME_SecurityRM_RD();
// 2331       }
// 2332       else
// 2333       {
// 2334         // RESIDENTIAL MODE - END DEVICE
// 2335         APSME_SecurityRM_ED();
// 2336       }
// 2337     }
// 2338   }
// 2339   else
// 2340   {
// 2341     // NO SECURITY
// 2342     APSME_SecurityNM();
// 2343   }
// 2344 }
// 2345 
// 2346 /******************************************************************************
// 2347  * @fn          ZDSecMgrPermitJoining
// 2348  *
// 2349  * @brief       Process request to change joining permissions.
// 2350  *
// 2351  * @param       duration - [in] timed duration for join in seconds
// 2352  *                         - 0x00 not allowed
// 2353  *                         - 0xFF allowed without timeout
// 2354  *
// 2355  * @return      uint8 - success(TRUE:FALSE)
// 2356  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2357 uint8 ZDSecMgrPermitJoining( uint8 duration )
ZDSecMgrPermitJoining:
        CFI Block cfiBlock343 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoining
// 2358 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2359   uint8 accept;
// 2360 
// 2361 
// 2362   ZDSecMgrPermitJoiningTimed = FALSE;
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
// 2363 
// 2364   if ( duration > 0 )
        MOV     A,R1
        JZ      ??ZDSecMgrPermitJoining_0
// 2365   {
// 2366     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
// 2367 
// 2368     if ( duration != 0xFF )
        MOV     A,#-0x1
        XRL     A,R1
        JZ      ??ZDSecMgrPermitJoining_1
// 2369     {
// 2370       ZDSecMgrPermitJoiningTimed = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        SJMP    ??ZDSecMgrPermitJoining_2
// 2371     }
// 2372   }
// 2373   else
// 2374   {
// 2375     ZDSecMgrPermitJoiningEnabled = FALSE;
??ZDSecMgrPermitJoining_0:
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
??ZDSecMgrPermitJoining_2:
        MOVX    @DPTR,A
// 2376   }
// 2377 
// 2378   accept = TRUE;
// 2379 
// 2380   return accept;
??ZDSecMgrPermitJoining_1:
        MOV     R1,#0x1
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock343
// 2381 }
// 2382 
// 2383 /******************************************************************************
// 2384  * @fn          ZDSecMgrPermitJoiningTimeout
// 2385  *
// 2386  * @brief       Process permit joining timeout
// 2387  *
// 2388  * @param       none
// 2389  *
// 2390  * @return      none
// 2391  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2392 void ZDSecMgrPermitJoiningTimeout( void )
ZDSecMgrPermitJoiningTimeout:
        CFI Block cfiBlock344 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoiningTimeout
// 2393 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2394   if ( ZDSecMgrPermitJoiningTimed == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrPermitJoiningTimeout_0
// 2395   {
// 2396     ZDSecMgrPermitJoiningEnabled = FALSE;
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
// 2397     ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
// 2398   }
// 2399 }
??ZDSecMgrPermitJoiningTimeout_0:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock344
// 2400 
// 2401 /******************************************************************************
// 2402  * @fn          ZDSecMgrNewDeviceEvent
// 2403  *
// 2404  * @brief       Process a the new device event, if found reset new device
// 2405  *              event/timer.
// 2406  *
// 2407  * @param       none
// 2408  *
// 2409  * @return      uint8 - found(TRUE:FALSE)
// 2410  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2411 uint8 ZDSecMgrNewDeviceEvent( void )
ZDSecMgrNewDeviceEvent:
        CFI Block cfiBlock345 Using cfiCommon0
        CFI Function ZDSecMgrNewDeviceEvent
// 2412 {
        FUNCALL ZDSecMgrNewDeviceEvent, AssocMatchDeviceStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 2413   uint8                 found;
// 2414   ZDSecMgrDevice_t      device;
// 2415   AddrMgrEntry_t        addrEntry;
// 2416   associated_devices_t* assoc;
// 2417   ZStatus_t             status;
// 2418 
// 2419   // initialize return results
// 2420   found = FALSE;
        MOV     ?V0 + 0,#0x0
// 2421 
// 2422   // look for device in the security init state
// 2423   assoc = AssocMatchDeviceStatus( DEV_SEC_INIT_STATUS );
        ; Setup parameters for call to function AssocMatchDeviceStatus
        MOV     R1,#0x4
        LCALL   ??AssocMatchDeviceStatus?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
// 2424 
// 2425   if ( assoc != NULL )
        MOV     A,R6
        JNZ     ??ZDSecMgrNewDeviceEvent_0
        MOV     A,R7
??ZDSecMgrNewDeviceEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrNewDeviceEvent_1 & 0xFFFF
// 2426   {
// 2427     // device found
// 2428     found = TRUE;
        MOV     ?V0 + 0,#0x1
// 2429 
// 2430     // check for preconfigured security
// 2431     if ( zgPreConfigKeys == TRUE )
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrNewDeviceEvent_2
// 2432     {
// 2433       // set association status to authenticated
// 2434       ZDSecMgrAssocDeviceAuth( assoc );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 2435     }
// 2436 
// 2437     // set up device info
// 2438     addrEntry.user  = ADDRMGR_USER_DEFAULT;
??ZDSecMgrNewDeviceEvent_2:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2439     addrEntry.index = assoc->addrIdx;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_163:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine108_0 & 0xFFFF
// 2440     AddrMgrEntryGet( &addrEntry );
??CrossCallReturnLabel_200:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
// 2441 
// 2442     device.nwkAddr    = assoc->shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine18 & 0xFFFF
// 2443     device.extAddr    = addrEntry.extAddr;
??CrossCallReturnLabel_184:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
// 2444     device.parentAddr = NLME_GetShortAddr();
??CrossCallReturnLabel_177:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 2445     device.secure     = FALSE;
??CrossCallReturnLabel_22:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2446     device.devStatus  = assoc->devStatus;
        MOV     A,R6
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine101_0 & 0xFFFF
// 2447 
// 2448     // process new device
// 2449     status = ZDSecMgrDeviceNew( &device );
??CrossCallReturnLabel_147:
        LCALL   ??ZDSecMgrDeviceNew?relay
        MOV     A,R1
        MOV     R2,A
// 2450 
// 2451     if ( status == ZSuccess )
        JNZ     ??ZDSecMgrNewDeviceEvent_3
// 2452     {
// 2453       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        MOVX    @DPTR,A
        SJMP    ??ZDSecMgrNewDeviceEvent_1
// 2454     }
// 2455     else if ( status == ZNwkUnknownDevice )
??ZDSecMgrNewDeviceEvent_3:
        MOV     A,#-0x38
        XRL     A,R2
        JNZ     ??ZDSecMgrNewDeviceEvent_1
// 2456     {
// 2457       AssocRemove( addrEntry.extAddr );
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AssocRemove?relay
// 2458     }
// 2459   }
// 2460 
// 2461   return found;
??ZDSecMgrNewDeviceEvent_1:
        MOV     R1,?V0 + 0
        MOV     A,#0x17
        SJMP    ??Subroutine102_0
        CFI EndBlock cfiBlock345
// 2462 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine77:
        CFI Block cfiBlock346 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock346
        REQUIRE ??Subroutine102_0
        ; // Fall through to label ??Subroutine102_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine102_0:
        CFI Block cfiBlock347 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock347
        REQUIRE ??Subroutine103_0
        ; // Fall through to label ??Subroutine103_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine103_0:
        CFI Block cfiBlock348 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock348
// 2463 
// 2464 /******************************************************************************
// 2465  * @fn          ZDSecMgrEvent
// 2466  *
// 2467  * @brief       Handle ZDO Security Manager event/timer(ZDO_SECMGR_EVENT).
// 2468  *
// 2469  * @param       none
// 2470  *
// 2471  * @return      none
// 2472  */
// 2473 void ZDSecMgrEvent( void )
// 2474 {
// 2475   uint8            action;
// 2476   uint8            restart;
// 2477   uint16           index;
// 2478   AddrMgrEntry_t   entry;
// 2479   ZDSecMgrDevice_t device;
// 2480 
// 2481 
// 2482   // verify data is available
// 2483   if ( ZDSecMgrCtrlData != NULL )
// 2484   {
// 2485     action  = FALSE;
// 2486     restart = FALSE;
// 2487 
// 2488     // update all the counters
// 2489     for ( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
// 2490     {
// 2491       if ( ZDSecMgrCtrlData[index].state !=  ZDSECMGR_CTRL_NONE )
// 2492       {
// 2493         if ( ZDSecMgrCtrlData[index].cntr != 0 )
// 2494         {
// 2495           ZDSecMgrCtrlData[index].cntr--;
// 2496         }
// 2497 
// 2498         if ( ( action == FALSE ) && ( ZDSecMgrCtrlData[index].cntr == 0 ) )
// 2499         {
// 2500           action = TRUE;
// 2501 
// 2502           // update from control data
// 2503           device.parentAddr = ZDSecMgrCtrlData[index].parentAddr;
// 2504           device.secure     = ZDSecMgrCtrlData[index].secure;
// 2505           device.ctrl       = &ZDSecMgrCtrlData[index];
// 2506 
// 2507           // set the user and address index
// 2508           entry.user  = ADDRMGR_USER_SECURITY;
// 2509           entry.index = ZDSecMgrCtrlData[index].entry->ami;
// 2510 
// 2511           // get the address data
// 2512           AddrMgrEntryGet( &entry );
// 2513 
// 2514           // set device address data
// 2515           device.nwkAddr = entry.nwkAddr;
// 2516           device.extAddr = entry.extAddr;
// 2517 
// 2518           // update from entry data
// 2519           ZDSecMgrDeviceCtrlHandler( &device );
// 2520         }
// 2521         else
// 2522         {
// 2523           restart = TRUE;
// 2524         }
// 2525       }
// 2526     }
// 2527 
// 2528     // check for timer restart
// 2529     if ( restart == TRUE )
// 2530     {
// 2531       osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );      
// 2532     }
// 2533   }
// 2534 }
// 2535 
// 2536 /******************************************************************************
// 2537  * @fn          ZDSecMgrEstablishKeyCfm
// 2538  *
// 2539  * @brief       Process the ZDO_EstablishKeyCfm_t message.
// 2540  *
// 2541  * @param       cfm - [in] ZDO_EstablishKeyCfm_t confirmation
// 2542  *
// 2543  * @return      none
// 2544  */
// 2545 void ZDSecMgrEstablishKeyCfm( ZDO_EstablishKeyCfm_t* cfm )
// 2546 {
// 2547   // send the NWK key
// 2548   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2549   {
// 2550     // update control for specified EXT address
// 2551     ZDSecMgrDeviceCtrlUpdate( cfm->partExtAddr, ZDSECMGR_CTRL_SKKE_DONE );
// 2552   }
// 2553   else
// 2554   {
// 2555     // this should be done when receiving the NWK key
// 2556     // if devState ==
// 2557     //if ( devState == DEV_END_DEVICE_UNAUTH )
// 2558         //osal_set_event( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 2559 
// 2560     // if not in joining state -- this should trigger an event for an
// 2561     // end point that requested SKKE
// 2562     // if ( devState == DEV_END_DEVICE )
// 2563    //       devState == DEV_ROUTER;
// 2564 
// 2565   }
// 2566 }
// 2567 
// 2568 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
// 2569 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
// 2570 {
// 2571   uint8  match;
// 2572   uint8  lookup[Z_EXTADDR_LEN];
// 2573 
// 2574   match = FALSE;
// 2575 
// 2576   if ( AddrMgrExtAddrLookup( APSME_TRUSTCENTER_NWKADDR, lookup ) )
// 2577   {
// 2578     match = AddrMgrExtAddrEqual( lookup, extAddr );
// 2579   }
// 2580 
// 2581   return match;
// 2582 }
// 2583 
// 2584 void ZDSecMgrTCDataLoad( uint8* extAddr );
// 2585 void ZDSecMgrTCDataLoad( uint8* extAddr )
// 2586 {
// 2587   uint16 ami;
// 2588   uint8* key;
// 2589 
// 2590   if ( !ZDSecMgrTCDataLoaded )
// 2591   {
// 2592     if ( ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami ) == ZSuccess )
// 2593     {
// 2594       // if preconfigured load key
// 2595       if ( zgPreConfigKeys == TRUE )
// 2596       {
// 2597         if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
// 2598         {
// 2599           ZDSecMgrMasterKeyStore( ami, ZDSecMgrTCMasterKey );
// 2600         }
// 2601       }
// 2602     }
// 2603 
// 2604     ZDSecMgrTCDataLoaded = TRUE;
// 2605   }
// 2606 }
// 2607 
// 2608 /******************************************************************************
// 2609  * @fn          ZDSecMgrEstablishKeyInd
// 2610  *
// 2611  * @brief       Process the ZDO_EstablishKeyInd_t message.
// 2612  *
// 2613  * @param       ind - [in] ZDO_EstablishKeyInd_t indication
// 2614  *
// 2615  * @return      none
// 2616  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond349 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_166
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker351 Using cfiCommon1
        CFI (cfiPicker351) NoFunction
        CFI (cfiPicker351) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiPicker351
        REQUIRE ??Subroutine104_0
        ; // Fall through to label ??Subroutine104_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine104_0:
        CFI Block cfiCond352 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_159
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_160
        CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond353) CFA_SP SP+0
        CFI (cfiCond353) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond354) CFA_SP SP+0
        CFI (cfiCond354) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond355 Using cfiCommon0
        CFI (cfiCond355) NoFunction
        CFI (cfiCond355) Conditional ??CrossCallReturnLabel_162
        CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond355) CFA_SP SP+0
        CFI (cfiCond355) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond357 Using cfiCommon0
        CFI (cfiCond357) NoFunction
        CFI (cfiCond357) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond357) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond357) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond357) CFA_SP SP+0
        CFI (cfiCond357) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond358 Using cfiCommon0
        CFI (cfiCond358) NoFunction
        CFI (cfiCond358) Conditional ??CrossCallReturnLabel_165
        CFI (cfiCond358) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond358) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond358) CFA_SP SP+-5
        CFI (cfiCond358) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond359 Using cfiCommon0
        CFI (cfiCond359) NoFunction
        CFI (cfiCond359) Conditional ??CrossCallReturnLabel_166
        CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond359) CFA_SP SP+0
        CFI (cfiCond359) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond360 Using cfiCommon0
        CFI (cfiCond360) NoFunction
        CFI (cfiCond360) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond360) CFA_SP SP+0
        CFI (cfiCond360) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker361 Using cfiCommon1
        CFI (cfiPicker361) NoFunction
        CFI (cfiPicker361) Picker
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_196:
        RET
        CFI EndBlock cfiCond352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiCond357
        CFI EndBlock cfiCond358
        CFI EndBlock cfiCond359
        CFI EndBlock cfiCond360
        CFI EndBlock cfiPicker361

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond362 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_184
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond363 Using cfiCommon0
        CFI (cfiCond363) NoFunction
        CFI (cfiCond363) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond363) CFA_SP SP+0
        CFI (cfiCond363) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond364 Using cfiCommon0
        CFI (cfiCond364) NoFunction
        CFI (cfiCond364) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond364) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond364) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond364) CFA_SP SP+-5
        CFI (cfiCond364) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker365 Using cfiCommon1
        CFI (cfiPicker365) NoFunction
        CFI (cfiPicker365) Picker
        LCALL   ??Subroutine107_0 & 0xFFFF
        CFI EndBlock cfiCond362
        CFI EndBlock cfiCond363
        CFI EndBlock cfiCond364
        CFI EndBlock cfiPicker365
??CrossCallReturnLabel_188:
        REQUIRE ??Subroutine105_0
        ; // Fall through to label ??Subroutine105_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine105_0:
        CFI Block cfiCond366 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_182
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond367 Using cfiCommon0
        CFI (cfiCond367) NoFunction
        CFI (cfiCond367) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond367) CFA_SP SP+0
        CFI (cfiCond367) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond368 Using cfiCommon0
        CFI (cfiCond368) NoFunction
        CFI (cfiCond368) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond368) CFA_SP SP+0
        CFI (cfiCond368) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond369 Using cfiCommon0
        CFI (cfiCond369) NoFunction
        CFI (cfiCond369) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond369) CFA_SP SP+0
        CFI (cfiCond369) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond370 Using cfiCommon0
        CFI (cfiCond370) NoFunction
        CFI (cfiCond370) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond370) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond370) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond370) CFA_SP SP+-5
        CFI (cfiCond370) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker371 Using cfiCommon1
        CFI (cfiPicker371) NoFunction
        CFI (cfiPicker371) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond366
        CFI EndBlock cfiCond367
        CFI EndBlock cfiCond368
        CFI EndBlock cfiCond369
        CFI EndBlock cfiCond370
        CFI EndBlock cfiPicker371
        REQUIRE ??Subroutine106_0
        ; // Fall through to label ??Subroutine106_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine106_0:
        CFI Block cfiCond372 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_168
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond373 Using cfiCommon0
        CFI (cfiCond373) NoFunction
        CFI (cfiCond373) Conditional ??CrossCallReturnLabel_169
        CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond373) CFA_SP SP+0
        CFI (cfiCond373) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond374 Using cfiCommon0
        CFI (cfiCond374) NoFunction
        CFI (cfiCond374) Conditional ??CrossCallReturnLabel_170
        CFI (cfiCond374) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond374) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond374) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond374) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond374) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond374) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond374) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond374) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond374) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond374) CFA_SP SP+0
        CFI (cfiCond374) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond375 Using cfiCommon0
        CFI (cfiCond375) NoFunction
        CFI (cfiCond375) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond375) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond375) CFA_SP SP+0
        CFI (cfiCond375) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_172
        CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond376) CFA_SP SP+0
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond377 Using cfiCommon0
        CFI (cfiCond377) NoFunction
        CFI (cfiCond377) Conditional ??CrossCallReturnLabel_173
        CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond377) CFA_SP SP+0
        CFI (cfiCond377) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond378 Using cfiCommon0
        CFI (cfiCond378) NoFunction
        CFI (cfiCond378) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond378) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond378) CFA_SP SP+0
        CFI (cfiCond378) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond380) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond380) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond380) CFA_SP SP+-5
        CFI (cfiCond380) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond381 Using cfiCommon0
        CFI (cfiCond381) NoFunction
        CFI (cfiCond381) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond381) CFA_SP SP+0
        CFI (cfiCond381) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond382 Using cfiCommon0
        CFI (cfiCond382) NoFunction
        CFI (cfiCond382) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond382) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond382) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond382) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond382) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond382) CFA_SP SP+0
        CFI (cfiCond382) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond383 Using cfiCommon0
        CFI (cfiCond383) NoFunction
        CFI (cfiCond383) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond383) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond383) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond383) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond383) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond383) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond383) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond383) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond383) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond383) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond383) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond383) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond383) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond383) CFA_SP SP+0
        CFI (cfiCond383) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond384 Using cfiCommon0
        CFI (cfiCond384) NoFunction
        CFI (cfiCond384) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond384) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond384) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond384) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond384) CFA_SP SP+0
        CFI (cfiCond384) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond385 Using cfiCommon0
        CFI (cfiCond385) NoFunction
        CFI (cfiCond385) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond385) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond385) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond385) CFA_SP SP+0
        CFI (cfiCond385) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond386 Using cfiCommon0
        CFI (cfiCond386) NoFunction
        CFI (cfiCond386) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond386) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond386) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond386) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond386) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond386) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond386) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond386) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond386) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond386) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond386) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond386) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond386) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond386) CFA_SP SP+0
        CFI (cfiCond386) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond387 Using cfiCommon0
        CFI (cfiCond387) NoFunction
        CFI (cfiCond387) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond387) CFA_SP SP+0
        CFI (cfiCond387) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond388 Using cfiCommon0
        CFI (cfiCond388) NoFunction
        CFI (cfiCond388) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond388) CFA_SP SP+0
        CFI (cfiCond388) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond389 Using cfiCommon0
        CFI (cfiCond389) NoFunction
        CFI (cfiCond389) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond389) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond389) CFA_SP SP+0
        CFI (cfiCond389) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond390 Using cfiCommon0
        CFI (cfiCond390) NoFunction
        CFI (cfiCond390) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond390) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond390) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond390) CFA_SP SP+-5
        CFI (cfiCond390) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker391 Using cfiCommon1
        CFI (cfiPicker391) NoFunction
        CFI (cfiPicker391) Picker
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_208:
        RET
        CFI EndBlock cfiCond372
        CFI EndBlock cfiCond373
        CFI EndBlock cfiCond374
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiCond377
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiCond381
        CFI EndBlock cfiCond382
        CFI EndBlock cfiCond383
        CFI EndBlock cfiCond384
        CFI EndBlock cfiCond385
        CFI EndBlock cfiCond386
        CFI EndBlock cfiCond387
        CFI EndBlock cfiCond388
        CFI EndBlock cfiCond389
        CFI EndBlock cfiCond390
        CFI EndBlock cfiPicker391

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond392 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond393 Using cfiCommon0
        CFI (cfiCond393) NoFunction
        CFI (cfiCond393) Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_29
        CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond393) CFA_SP SP+0
        CFI (cfiCond393) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond394 Using cfiCommon0
        CFI (cfiCond394) NoFunction
        CFI (cfiCond394) Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_30
        CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond394) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond394) CFA_SP SP+0
        CFI (cfiCond394) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond395 Using cfiCommon0
        CFI (cfiCond395) NoFunction
        CFI (cfiCond395) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_110
        CFI (cfiCond395) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond395) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond395) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond395) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond395) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond395) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond395) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond395) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond395) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond395) CFA_SP SP+0
        CFI (cfiCond395) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond396 Using cfiCommon0
        CFI (cfiCond396) NoFunction
        CFI (cfiCond396) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_111
        CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond396) CFA_SP SP+0
        CFI (cfiCond396) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond397 Using cfiCommon0
        CFI (cfiCond397) NoFunction
        CFI (cfiCond397) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_112
        CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond397) CFA_SP SP+0
        CFI (cfiCond397) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond398 Using cfiCommon0
        CFI (cfiCond398) NoFunction
        CFI (cfiCond398) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_113
        CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond398) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond398) CFA_SP SP+0
        CFI (cfiCond398) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond399 Using cfiCommon0
        CFI (cfiCond399) NoFunction
        CFI (cfiCond399) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_117
        CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond399) CFA_SP SP+0
        CFI (cfiCond399) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond400 Using cfiCommon0
        CFI (cfiCond400) NoFunction
        CFI (cfiCond400) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_118
        CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond400) CFA_SP SP+0
        CFI (cfiCond400) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond401 Using cfiCommon0
        CFI (cfiCond401) NoFunction
        CFI (cfiCond401) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_119
        CFI (cfiCond401) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond401) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond401) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond401) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond401) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond401) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond401) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond401) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond401) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond401) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond401) CFA_SP SP+0
        CFI (cfiCond401) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond402 Using cfiCommon0
        CFI (cfiCond402) NoFunction
        CFI (cfiCond402) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_123
        CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond402) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond402) CFA_SP SP+0
        CFI (cfiCond402) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond403 Using cfiCommon0
        CFI (cfiCond403) NoFunction
        CFI (cfiCond403) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_124
        CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond403) CFA_SP SP+0
        CFI (cfiCond403) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond404 Using cfiCommon0
        CFI (cfiCond404) NoFunction
        CFI (cfiCond404) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_125
        CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond404) CFA_SP SP+0
        CFI (cfiCond404) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond405 Using cfiCommon0
        CFI (cfiCond405) NoFunction
        CFI (cfiCond405) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_184
        CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond405) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond405) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond405) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond405) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond405) CFA_SP SP+0
        CFI (cfiCond405) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond406 Using cfiCommon0
        CFI (cfiCond406) NoFunction
        CFI (cfiCond406) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_185
        CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond406) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond406) CFA_SP SP+0
        CFI (cfiCond406) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond407 Using cfiCommon0
        CFI (cfiCond407) NoFunction
        CFI (cfiCond407) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_186
        CFI (cfiCond407) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond407) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond407) CFA_SP SP+-5
        CFI (cfiCond407) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond408 Using cfiCommon0
        CFI (cfiCond408) NoFunction
        CFI (cfiCond408) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_182
        CFI (cfiCond408) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond408) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond408) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond408) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond408) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond408) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond408) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond408) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond408) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond408) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond408) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond408) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond408) CFA_SP SP+0
        CFI (cfiCond408) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond409 Using cfiCommon0
        CFI (cfiCond409) NoFunction
        CFI (cfiCond409) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_183
        CFI (cfiCond409) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond409) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond409) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond409) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond409) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond409) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond409) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond409) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond409) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond409) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond409) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond409) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond409) CFA_SP SP+0
        CFI (cfiCond409) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond410 Using cfiCommon0
        CFI (cfiCond410) NoFunction
        CFI (cfiCond410) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_168
        CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond410) CFA_SP SP+0
        CFI (cfiCond410) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond411 Using cfiCommon0
        CFI (cfiCond411) NoFunction
        CFI (cfiCond411) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_169
        CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond411) CFA_SP SP+0
        CFI (cfiCond411) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond412 Using cfiCommon0
        CFI (cfiCond412) NoFunction
        CFI (cfiCond412) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_170
        CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond412) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond412) CFA_SP SP+0
        CFI (cfiCond412) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond413 Using cfiCommon0
        CFI (cfiCond413) NoFunction
        CFI (cfiCond413) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_171
        CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond413) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond413) CFA_SP SP+0
        CFI (cfiCond413) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond414 Using cfiCommon0
        CFI (cfiCond414) NoFunction
        CFI (cfiCond414) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_172
        CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond414) CFA_SP SP+0
        CFI (cfiCond414) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond415 Using cfiCommon0
        CFI (cfiCond415) NoFunction
        CFI (cfiCond415) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_173
        CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond415) CFA_SP SP+0
        CFI (cfiCond415) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond416 Using cfiCommon0
        CFI (cfiCond416) NoFunction
        CFI (cfiCond416) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_174
        CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond416) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond416) CFA_SP SP+0
        CFI (cfiCond416) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond417 Using cfiCommon0
        CFI (cfiCond417) NoFunction
        CFI (cfiCond417) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_175
        CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond417) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond417) CFA_SP SP+0
        CFI (cfiCond417) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond418 Using cfiCommon0
        CFI (cfiCond418) NoFunction
        CFI (cfiCond418) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_176
        CFI (cfiCond418) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond418) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond418) CFA_SP SP+-5
        CFI (cfiCond418) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond419 Using cfiCommon0
        CFI (cfiCond419) NoFunction
        CFI (cfiCond419) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_177
        CFI (cfiCond419) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond419) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond419) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond419) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond419) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond419) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond419) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond419) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond419) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond419) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond419) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond419) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond419) CFA_SP SP+0
        CFI (cfiCond419) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond420 Using cfiCommon0
        CFI (cfiCond420) NoFunction
        CFI (cfiCond420) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_178
        CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond420) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond420) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond420) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond420) CFA_SP SP+0
        CFI (cfiCond420) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond421 Using cfiCommon0
        CFI (cfiCond421) NoFunction
        CFI (cfiCond421) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_179
        CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond421) CFA_SP SP+0
        CFI (cfiCond421) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond422 Using cfiCommon0
        CFI (cfiCond422) NoFunction
        CFI (cfiCond422) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_180
        CFI (cfiCond422) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond422) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond422) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond422) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond422) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond422) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond422) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond422) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond422) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond422) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond422) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond422) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond422) CFA_SP SP+0
        CFI (cfiCond422) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond423 Using cfiCommon0
        CFI (cfiCond423) NoFunction
        CFI (cfiCond423) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_181
        CFI (cfiCond423) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond423) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond423) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond423) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond423) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond423) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond423) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond423) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond423) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond423) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond423) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond423) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond423) CFA_SP SP+0
        CFI (cfiCond423) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond424 Using cfiCommon0
        CFI (cfiCond424) NoFunction
        CFI (cfiCond424) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_197
        CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond424) CFA_SP SP+0
        CFI (cfiCond424) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_198
        CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond425) CFA_SP SP+0
        CFI (cfiCond425) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond426 Using cfiCommon0
        CFI (cfiCond426) NoFunction
        CFI (cfiCond426) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_199
        CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond426) CFA_SP SP+0
        CFI (cfiCond426) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond427 Using cfiCommon0
        CFI (cfiCond427) NoFunction
        CFI (cfiCond427) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_200
        CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond427) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond427) CFA_SP SP+0
        CFI (cfiCond427) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond428 Using cfiCommon0
        CFI (cfiCond428) NoFunction
        CFI (cfiCond428) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_201
        CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond428) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond428) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond428) CFA_SP SP+0
        CFI (cfiCond428) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond429 Using cfiCommon0
        CFI (cfiCond429) NoFunction
        CFI (cfiCond429) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_202
        CFI (cfiCond429) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond429) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond429) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond429) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond429) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond429) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond429) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond429) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond429) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond429) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond429) CFA_SP SP+0
        CFI (cfiCond429) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond430 Using cfiCommon0
        CFI (cfiCond430) NoFunction
        CFI (cfiCond430) Conditional ??CrossCallReturnLabel_203, ??CrossCallReturnLabel_5
        CFI (cfiCond430) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond430) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond430) CFA_SP SP+-5
        CFI (cfiCond430) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond431 Using cfiCommon0
        CFI (cfiCond431) NoFunction
        CFI (cfiCond431) Conditional ??CrossCallReturnLabel_203, ??CrossCallReturnLabel_6
        CFI (cfiCond431) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond431) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond431) CFA_SP SP+-5
        CFI (cfiCond431) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker432 Using cfiCommon1
        CFI (cfiPicker432) NoFunction
        CFI (cfiPicker432) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond392
        CFI EndBlock cfiCond393
        CFI EndBlock cfiCond394
        CFI EndBlock cfiCond395
        CFI EndBlock cfiCond396
        CFI EndBlock cfiCond397
        CFI EndBlock cfiCond398
        CFI EndBlock cfiCond399
        CFI EndBlock cfiCond400
        CFI EndBlock cfiCond401
        CFI EndBlock cfiCond402
        CFI EndBlock cfiCond403
        CFI EndBlock cfiCond404
        CFI EndBlock cfiCond405
        CFI EndBlock cfiCond406
        CFI EndBlock cfiCond407
        CFI EndBlock cfiCond408
        CFI EndBlock cfiCond409
        CFI EndBlock cfiCond410
        CFI EndBlock cfiCond411
        CFI EndBlock cfiCond412
        CFI EndBlock cfiCond413
        CFI EndBlock cfiCond414
        CFI EndBlock cfiCond415
        CFI EndBlock cfiCond416
        CFI EndBlock cfiCond417
        CFI EndBlock cfiCond418
        CFI EndBlock cfiCond419
        CFI EndBlock cfiCond420
        CFI EndBlock cfiCond421
        CFI EndBlock cfiCond422
        CFI EndBlock cfiCond423
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiCond426
        CFI EndBlock cfiCond427
        CFI EndBlock cfiCond428
        CFI EndBlock cfiCond429
        CFI EndBlock cfiCond430
        CFI EndBlock cfiCond431
        CFI EndBlock cfiPicker432

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond433 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond434 Using cfiCommon0
        CFI (cfiCond434) NoFunction
        CFI (cfiCond434) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_8
        CFI (cfiCond434) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond434) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond434) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond434) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond434) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond434) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond434) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond434) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond434) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond434) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond434) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond434) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond434) CFA_SP SP+0
        CFI (cfiCond434) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond435 Using cfiCommon0
        CFI (cfiCond435) NoFunction
        CFI (cfiCond435) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_5
        CFI (cfiCond435) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond435) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond435) CFA_SP SP+-5
        CFI (cfiCond435) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond436 Using cfiCommon0
        CFI (cfiCond436) NoFunction
        CFI (cfiCond436) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_6
        CFI (cfiCond436) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond436) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond436) CFA_SP SP+-5
        CFI (cfiCond436) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker437 Using cfiCommon1
        CFI (cfiPicker437) NoFunction
        CFI (cfiPicker437) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond433
        CFI EndBlock cfiCond434
        CFI EndBlock cfiCond435
        CFI EndBlock cfiCond436
        CFI EndBlock cfiPicker437
        REQUIRE ??Subroutine107_0
        ; // Fall through to label ??Subroutine107_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine107_0:
        CFI Block cfiCond438 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_34
        CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond439) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond439) CFA_SP SP+0
        CFI (cfiCond439) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond440 Using cfiCommon0
        CFI (cfiCond440) NoFunction
        CFI (cfiCond440) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_114
        CFI (cfiCond440) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond440) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond440) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond440) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond440) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond440) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond440) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond440) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond440) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond440) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond440) CFA_SP SP+0
        CFI (cfiCond440) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond441 Using cfiCommon0
        CFI (cfiCond441) NoFunction
        CFI (cfiCond441) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_115
        CFI (cfiCond441) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond441) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond441) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond441) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond441) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond441) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond441) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond441) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond441) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond441) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond441) CFA_SP SP+0
        CFI (cfiCond441) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond442 Using cfiCommon0
        CFI (cfiCond442) NoFunction
        CFI (cfiCond442) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_116
        CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond442) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond442) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond442) CFA_SP SP+0
        CFI (cfiCond442) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond443 Using cfiCommon0
        CFI (cfiCond443) NoFunction
        CFI (cfiCond443) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_52
        CFI (cfiCond443) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond443) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond443) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond443) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond443) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond443) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond443) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond443) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond443) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond443) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond443) CFA_SP SP+0
        CFI (cfiCond443) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond444 Using cfiCommon0
        CFI (cfiCond444) NoFunction
        CFI (cfiCond444) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_53
        CFI (cfiCond444) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond444) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond444) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond444) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond444) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond444) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond444) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond444) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond444) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond444) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond444) CFA_SP SP+0
        CFI (cfiCond444) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond445 Using cfiCommon0
        CFI (cfiCond445) NoFunction
        CFI (cfiCond445) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_54
        CFI (cfiCond445) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond445) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond445) CFA_SP SP+-5
        CFI (cfiCond445) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond446 Using cfiCommon0
        CFI (cfiCond446) NoFunction
        CFI (cfiCond446) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_61
        CFI (cfiCond446) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond446) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond446) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond446) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond446) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond446) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond446) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond446) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond446) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond446) CFA_SP SP+0
        CFI (cfiCond446) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond447 Using cfiCommon0
        CFI (cfiCond447) NoFunction
        CFI (cfiCond447) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_62
        CFI (cfiCond447) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond447) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond447) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond447) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond447) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond447) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond447) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond447) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond447) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond447) CFA_SP SP+0
        CFI (cfiCond447) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond448 Using cfiCommon0
        CFI (cfiCond448) NoFunction
        CFI (cfiCond448) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_63
        CFI (cfiCond448) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond448) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond448) CFA_SP SP+-5
        CFI Block cfiCond449 Using cfiCommon0
        CFI (cfiCond449) NoFunction
        CFI (cfiCond449) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_166
        CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond449) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond449) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond449) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond449) CFA_SP SP+0
        CFI (cfiCond449) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond450 Using cfiCommon0
        CFI (cfiCond450) NoFunction
        CFI (cfiCond450) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_167
        CFI (cfiCond450) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond450) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond450) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond450) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond450) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond450) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond450) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond450) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond450) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond450) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond450) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond450) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond450) CFA_SP SP+0
        CFI (cfiCond450) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond451 Using cfiCommon0
        CFI (cfiCond451) NoFunction
        CFI (cfiCond451) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_159
        CFI (cfiCond451) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond451) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond451) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond451) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond451) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond451) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond451) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond451) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond451) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond451) CFA_SP SP+0
        CFI (cfiCond451) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond452 Using cfiCommon0
        CFI (cfiCond452) NoFunction
        CFI (cfiCond452) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_160
        CFI (cfiCond452) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond452) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond452) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond452) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond452) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond452) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond452) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond452) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond452) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond452) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond452) CFA_SP SP+0
        CFI (cfiCond452) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond453 Using cfiCommon0
        CFI (cfiCond453) NoFunction
        CFI (cfiCond453) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_161
        CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond453) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond453) CFA_SP SP+0
        CFI (cfiCond453) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond454 Using cfiCommon0
        CFI (cfiCond454) NoFunction
        CFI (cfiCond454) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_162
        CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond454) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond454) CFA_SP SP+0
        CFI (cfiCond454) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond455 Using cfiCommon0
        CFI (cfiCond455) NoFunction
        CFI (cfiCond455) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_163
        CFI (cfiCond455) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond455) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond455) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond455) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond455) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond455) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond455) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond455) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond455) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond455) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond455) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond455) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond455) CFA_SP SP+0
        CFI (cfiCond455) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond456 Using cfiCommon0
        CFI (cfiCond456) NoFunction
        CFI (cfiCond456) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_164
        CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond456) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond456) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond456) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond456) CFA_SP SP+0
        CFI (cfiCond456) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond457 Using cfiCommon0
        CFI (cfiCond457) NoFunction
        CFI (cfiCond457) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_165
        CFI (cfiCond457) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond457) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond457) CFA_SP SP+-5
        CFI (cfiCond457) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond458 Using cfiCommon0
        CFI (cfiCond458) NoFunction
        CFI (cfiCond458) Conditional ??CrossCallReturnLabel_188, ??CrossCallReturnLabel_184
        CFI (cfiCond458) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond458) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond458) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond458) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond458) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond458) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond458) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond458) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond458) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond458) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond458) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond458) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond458) CFA_SP SP+0
        CFI (cfiCond458) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond459 Using cfiCommon0
        CFI (cfiCond459) NoFunction
        CFI (cfiCond459) Conditional ??CrossCallReturnLabel_188, ??CrossCallReturnLabel_185
        CFI (cfiCond459) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond459) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond459) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond459) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond459) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond459) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond459) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond459) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond459) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond459) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond459) CFA_SP SP+0
        CFI (cfiCond459) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond460 Using cfiCommon0
        CFI (cfiCond460) NoFunction
        CFI (cfiCond460) Conditional ??CrossCallReturnLabel_188, ??CrossCallReturnLabel_186
        CFI (cfiCond460) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond460) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond460) CFA_SP SP+-5
        CFI (cfiCond460) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond461 Using cfiCommon0
        CFI (cfiCond461) NoFunction
        CFI (cfiCond461) Conditional ??CrossCallReturnLabel_187, ??CrossCallReturnLabel_12
        CFI (cfiCond461) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond461) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond461) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond461) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond461) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond461) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond461) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond461) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond461) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond461) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond461) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond461) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond461) CFA_SP SP+0
        CFI (cfiCond461) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond462 Using cfiCommon0
        CFI (cfiCond462) NoFunction
        CFI (cfiCond462) Conditional ??CrossCallReturnLabel_187, ??CrossCallReturnLabel_13
        CFI (cfiCond462) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond462) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond462) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond462) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond462) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond462) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond462) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond462) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond462) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond462) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond462) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond462) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond462) CFA_SP SP+0
        CFI (cfiCond462) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond463 Using cfiCommon0
        CFI (cfiCond463) NoFunction
        CFI (cfiCond463) Conditional ??CrossCallReturnLabel_191, ??CrossCallReturnLabel_153
        CFI (cfiCond463) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond463) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond463) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond463) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond463) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond463) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond463) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond463) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond463) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond463) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond463) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond463) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond463) CFA_SP SP+0
        CFI (cfiCond463) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond464 Using cfiCommon0
        CFI (cfiCond464) NoFunction
        CFI (cfiCond464) Conditional ??CrossCallReturnLabel_191, ??CrossCallReturnLabel_154
        CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond464) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond464) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond464) CFA_SP SP+0
        CFI (cfiCond464) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond465 Using cfiCommon0
        CFI (cfiCond465) NoFunction
        CFI (cfiCond465) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_7
        CFI (cfiCond465) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond465) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond465) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond465) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond465) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond465) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond465) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond465) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond465) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond465) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond465) CFA_SP SP+0
        CFI (cfiCond465) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond466 Using cfiCommon0
        CFI (cfiCond466) NoFunction
        CFI (cfiCond466) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_8
        CFI (cfiCond466) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond466) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond466) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond466) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond466) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond466) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond466) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond466) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond466) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond466) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond466) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond466) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond466) CFA_SP SP+0
        CFI (cfiCond466) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond467 Using cfiCommon0
        CFI (cfiCond467) NoFunction
        CFI (cfiCond467) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_5
        CFI (cfiCond467) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond467) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond467) CFA_SP SP+-5
        CFI (cfiCond467) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond468 Using cfiCommon0
        CFI (cfiCond468) NoFunction
        CFI (cfiCond468) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_6
        CFI (cfiCond468) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond468) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond468) CFA_SP SP+-5
        CFI (cfiCond468) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker469 Using cfiCommon1
        CFI (cfiPicker469) NoFunction
        CFI (cfiPicker469) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiCond440
        CFI EndBlock cfiCond441
        CFI EndBlock cfiCond442
        CFI EndBlock cfiCond443
        CFI EndBlock cfiCond444
        CFI EndBlock cfiCond445
        CFI EndBlock cfiCond446
        CFI EndBlock cfiCond447
        CFI EndBlock cfiCond448
        CFI EndBlock cfiCond449
        CFI EndBlock cfiCond450
        CFI EndBlock cfiCond451
        CFI EndBlock cfiCond452
        CFI EndBlock cfiCond453
        CFI EndBlock cfiCond454
        CFI EndBlock cfiCond455
        CFI EndBlock cfiCond456
        CFI EndBlock cfiCond457
        CFI EndBlock cfiCond458
        CFI EndBlock cfiCond459
        CFI EndBlock cfiCond460
        CFI EndBlock cfiCond461
        CFI EndBlock cfiCond462
        CFI EndBlock cfiCond463
        CFI EndBlock cfiCond464
        CFI EndBlock cfiCond465
        CFI EndBlock cfiCond466
        CFI EndBlock cfiCond467
        CFI EndBlock cfiCond468
        CFI EndBlock cfiPicker469

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEvent:
        CFI Block cfiBlock470 Using cfiCommon0
        CFI Function ZDSecMgrEvent
        FUNCALL ZDSecMgrEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_1 & 0xFFFF
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 0,#0x0
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEvent_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_3 & 0xFFFF
        MOV     A,R2
        ADD     A,#0x6
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_137:
        JZ      ??ZDSecMgrEvent_4
        DEC     A
        MOVX    @DPTR,A
??ZDSecMgrEvent_4:
        MOV     A,?V0 + 1
        JZ      $+5
        LJMP    ??ZDSecMgrEvent_5 & 0xFFFF
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_5
        MOV     ?V0 + 1,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_201:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     R1,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_202:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_185:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
        SJMP    ??ZDSecMgrEvent_3
??ZDSecMgrEvent_5:
        MOV     ?V0 + 0,#0x1
??ZDSecMgrEvent_3:
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_75:
        JNC     $+5
        LJMP    ??ZDSecMgrEvent_2 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrEvent_1
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
??ZDSecMgrEvent_1:
        MOV     A,#0x17
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock470

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond471 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond472 Using cfiCommon0
        CFI (cfiCond472) NoFunction
        CFI (cfiCond472) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond472) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond472) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond472) CFA_SP SP+0
        CFI (cfiCond472) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker473 Using cfiCommon1
        CFI (cfiPicker473) NoFunction
        CFI (cfiPicker473) Picker
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_230:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond471
        CFI EndBlock cfiCond472
        CFI EndBlock cfiPicker473

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond474 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond475 Using cfiCommon0
        CFI (cfiCond475) NoFunction
        CFI (cfiCond475) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond475) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond475) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond475) CFA_SP SP+-5
        CFI Block cfiCond476 Using cfiCommon0
        CFI (cfiCond476) NoFunction
        CFI (cfiCond476) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond476) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond476) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond476) CFA_SP SP+-5
        CFI Block cfiCond477 Using cfiCommon0
        CFI (cfiCond477) NoFunction
        CFI (cfiCond477) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond477) CFA_SP SP+0
        CFI (cfiCond477) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond478 Using cfiCommon0
        CFI (cfiCond478) NoFunction
        CFI (cfiCond478) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond478) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond478) CFA_SP SP+0
        CFI (cfiCond478) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond479 Using cfiCommon0
        CFI (cfiCond479) NoFunction
        CFI (cfiCond479) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond479) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond479) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond479) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond479) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond479) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond479) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond479) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond479) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond479) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond479) CFA_SP SP+0
        CFI (cfiCond479) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond480 Using cfiCommon0
        CFI (cfiCond480) NoFunction
        CFI (cfiCond480) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond480) CFA_SP SP+0
        CFI (cfiCond480) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond481 Using cfiCommon0
        CFI (cfiCond481) NoFunction
        CFI (cfiCond481) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond481) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond481) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond481) CFA_SP SP+-5
        CFI (cfiCond481) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond482 Using cfiCommon0
        CFI (cfiCond482) NoFunction
        CFI (cfiCond482) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond482) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond482) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond482) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond482) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond482) CFA_SP SP+0
        CFI (cfiCond482) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker483 Using cfiCommon1
        CFI (cfiPicker483) NoFunction
        CFI (cfiPicker483) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond474
        CFI EndBlock cfiCond475
        CFI EndBlock cfiCond476
        CFI EndBlock cfiCond477
        CFI EndBlock cfiCond478
        CFI EndBlock cfiCond479
        CFI EndBlock cfiCond480
        CFI EndBlock cfiCond481
        CFI EndBlock cfiCond482
        CFI EndBlock cfiPicker483

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond484 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_197
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond485 Using cfiCommon0
        CFI (cfiCond485) NoFunction
        CFI (cfiCond485) Conditional ??CrossCallReturnLabel_198
        CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond485) CFA_SP SP+0
        CFI (cfiCond485) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker486 Using cfiCommon1
        CFI (cfiPicker486) NoFunction
        CFI (cfiPicker486) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond484
        CFI EndBlock cfiCond485
        CFI EndBlock cfiPicker486
        REQUIRE ??Subroutine108_0
        ; // Fall through to label ??Subroutine108_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine108_0:
        CFI Block cfiCond487 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_199
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond488 Using cfiCommon0
        CFI (cfiCond488) NoFunction
        CFI (cfiCond488) Conditional ??CrossCallReturnLabel_200
        CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond488) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond488) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond488) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond488) CFA_SP SP+0
        CFI (cfiCond488) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond489 Using cfiCommon0
        CFI (cfiCond489) NoFunction
        CFI (cfiCond489) Conditional ??CrossCallReturnLabel_201
        CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond489) CFA_SP SP+0
        CFI (cfiCond489) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond490 Using cfiCommon0
        CFI (cfiCond490) NoFunction
        CFI (cfiCond490) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond490) CFA_SP SP+0
        CFI (cfiCond490) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond491 Using cfiCommon0
        CFI (cfiCond491) NoFunction
        CFI (cfiCond491) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond491) CFA_SP SP+0
        CFI (cfiCond491) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond492 Using cfiCommon0
        CFI (cfiCond492) NoFunction
        CFI (cfiCond492) Conditional ??CrossCallReturnLabel_198
        CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond492) CFA_SP SP+0
        CFI (cfiCond492) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker493 Using cfiCommon1
        CFI (cfiPicker493) NoFunction
        CFI (cfiPicker493) Picker
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_209:
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond487
        CFI EndBlock cfiCond488
        CFI EndBlock cfiCond489
        CFI EndBlock cfiCond490
        CFI EndBlock cfiCond491
        CFI EndBlock cfiCond492
        CFI EndBlock cfiPicker493

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKeyCfm:
        CFI Block cfiBlock494 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyCfm
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock494

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCExtAddrCheck:
        CFI Block cfiBlock495 Using cfiCommon0
        CFI Function ZDSecMgrTCExtAddrCheck
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,#0x0
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrTCExtAddrCheck_0
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
??ZDSecMgrTCExtAddrCheck_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x8
        LJMP    ??Subroutine95_0 & 0xFFFF
        CFI EndBlock cfiBlock495

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCDataLoad:
        CFI Block cfiBlock496 Using cfiCommon0
        CFI Function ZDSecMgrTCDataLoad
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTCDataLoad_0
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_65
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_65
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_43:
        JZ      ??CrossCallReturnLabel_65
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    @DPTR,A
??ZDSecMgrTCDataLoad_0:
        MOV     A,#0x4
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock496

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond497 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond498 Using cfiCommon0
        CFI (cfiCond498) NoFunction
        CFI (cfiCond498) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond498) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond498) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond498) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond498) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond498) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond498) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond498) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond498) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond498) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond498) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond498) CFA_SP SP+0
        CFI (cfiCond498) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker499 Using cfiCommon1
        CFI (cfiPicker499) NoFunction
        CFI (cfiPicker499) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_239:
        LCALL   ??ZDSecMgrMasterKeyStore?relay
        RET
        CFI EndBlock cfiCond497
        CFI EndBlock cfiCond498
        CFI EndBlock cfiPicker499

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2617 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
ZDSecMgrEstablishKeyInd:
        CFI Block cfiBlock500 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyInd
// 2618 {
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCExtAddrCheck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrDeviceValidateSKKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, APSME_EstablishKeyRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2619   ZDSecMgrDevice_t        device;
// 2620   APSME_EstablishKeyRsp_t rsp;
// 2621 
// 2622 
// 2623   // load Trust Center data if needed
// 2624   ZDSecMgrTCDataLoad( ind->initExtAddr );
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_90:
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
// 2625 
// 2626   if ( ZDSecMgrTCExtAddrCheck( ind->initExtAddr ) )
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        ; Setup parameters for call to function ZDSecMgrTCExtAddrCheck
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrTCExtAddrCheck?relay
        MOV     A,R1
        JZ      ??ZDSecMgrEstablishKeyInd_0
// 2627   {
// 2628     //IF (ind->srcAddr == APSME_TRUSTCENTER_NWKADDR)
// 2629     //OR
// 2630     //!ZDSecMgrTCAuthenticated
// 2631     //devtag.0604.critical
// 2632         //how is the parentAddr used here
// 2633 
// 2634     // initial SKKE from Trust Center via parent
// 2635     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
// 2636     device.parentAddr = ind->srcAddr;
// 2637   }
??CrossCallReturnLabel_12:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??CrossCallReturnLabel_212
// 2638   else
// 2639   {
// 2640     // Trust Center direct or E2E SKKE
// 2641     device.nwkAddr    = ind->srcAddr;
??ZDSecMgrEstablishKeyInd_0:
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_166:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
// 2642     device.parentAddr = INVALID_NODE_ADDR;
??CrossCallReturnLabel_178:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine109_0 & 0xFFFF
// 2643   }
??CrossCallReturnLabel_212:
        MOVX    @DPTR,A
// 2644 
// 2645   device.extAddr = ind->initExtAddr;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine112_0 & 0xFFFF
// 2646   //devtag.pro.security.0724.todo - verify usage
// 2647   device.secure  = ind->nwkSecure;
??CrossCallReturnLabel_222:
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_82:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2648 
// 2649   // validate device for SKKE
// 2650   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrDeviceValidateSKKE
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrDeviceValidateSKKE?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEstablishKeyInd_1
// 2651   {
// 2652     rsp.accept = TRUE;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrEstablishKeyInd_2
// 2653   }
// 2654   else
// 2655   {
// 2656     rsp.accept = FALSE;
??ZDSecMgrEstablishKeyInd_1:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
// 2657   }
??ZDSecMgrEstablishKeyInd_2:
        LCALL   ?Subroutine8 & 0xFFFF
// 2658 
// 2659   rsp.dstAddr     = ind->srcAddr;
??CrossCallReturnLabel_13:
        LCALL   ??Subroutine105_0 & 0xFFFF
// 2660   rsp.initExtAddr = &ind->initExtAddr[0];
??CrossCallReturnLabel_183:
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
// 2661   //devtag.0604.todo - remove obsolete
// 2662   rsp.apsSecure   = ind->apsSecure;
??CrossCallReturnLabel_179:
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_134:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
// 2663   rsp.nwkSecure   = ind->nwkSecure;
??CrossCallReturnLabel_11:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine101_0 & 0xFFFF
// 2664 
// 2665   APSME_EstablishKeyRsp( &rsp );
??CrossCallReturnLabel_148:
        LCALL   ??APSME_EstablishKeyRsp?relay
// 2666 }
        MOV     A,#0x11
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock500

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond501 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_214
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond502 Using cfiCommon0
        CFI (cfiCond502) NoFunction
        CFI (cfiCond502) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond502) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond502) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond502) CFA_SP SP+-5
        CFI Block cfiPicker503 Using cfiCommon1
        CFI (cfiPicker503) NoFunction
        CFI (cfiPicker503) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond501
        CFI EndBlock cfiCond502
        CFI EndBlock cfiPicker503
        REQUIRE ??Subroutine109_0
        ; // Fall through to label ??Subroutine109_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine109_0:
        CFI Block cfiCond504 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_213, ??CrossCallReturnLabel_105
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond505 Using cfiCommon0
        CFI (cfiCond505) NoFunction
        CFI (cfiCond505) Conditional ??CrossCallReturnLabel_213, ??CrossCallReturnLabel_106
        CFI (cfiCond505) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond505) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond505) CFA_SP SP+-5
        CFI Block cfiCond506 Using cfiCommon0
        CFI (cfiCond506) NoFunction
        CFI (cfiCond506) Conditional ??CrossCallReturnLabel_210
        CFI (cfiCond506) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond506) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond506) CFA_SP SP+-5
        CFI (cfiCond506) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond507 Using cfiCommon0
        CFI (cfiCond507) NoFunction
        CFI (cfiCond507) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond507) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond507) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond507) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond507) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond507) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond507) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond507) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond507) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond507) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond507) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond507) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond507) CFA_SP SP+0
        CFI (cfiCond507) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond508 Using cfiCommon0
        CFI (cfiCond508) NoFunction
        CFI (cfiCond508) Conditional ??CrossCallReturnLabel_212
        CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond508) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond508) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond508) CFA_SP SP+0
        CFI (cfiCond508) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond509 Using cfiCommon0
        CFI (cfiCond509) NoFunction
        CFI (cfiCond509) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond509) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond509) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond509) CFA_SP SP+-5
        CFI Block cfiCond510 Using cfiCommon0
        CFI (cfiCond510) NoFunction
        CFI (cfiCond510) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond510) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond510) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond510) CFA_SP SP+-5
        CFI Block cfiPicker511 Using cfiCommon1
        CFI (cfiPicker511) NoFunction
        CFI (cfiPicker511) Picker
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        RET
        CFI EndBlock cfiCond504
        CFI EndBlock cfiCond505
        CFI EndBlock cfiCond506
        CFI EndBlock cfiCond507
        CFI EndBlock cfiCond508
        CFI EndBlock cfiCond509
        CFI EndBlock cfiCond510
        CFI EndBlock cfiPicker511

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond512 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond513 Using cfiCommon0
        CFI (cfiCond513) NoFunction
        CFI (cfiCond513) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond513) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond513) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond513) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond513) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond513) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond513) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond513) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond513) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond513) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond513) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond513) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond513) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond513) CFA_SP SP+0
        CFI (cfiCond513) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker514 Using cfiCommon1
        CFI (cfiPicker514) NoFunction
        CFI (cfiPicker514) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_187:
        RET
        CFI EndBlock cfiCond512
        CFI EndBlock cfiCond513
        CFI EndBlock cfiPicker514
// 2667 //devtag.pro.security
// 2668 #if 0
// 2669 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
// 2670 {
// 2671   ZDSecMgrDevice_t        device;
// 2672   APSME_EstablishKeyRsp_t rsp;
// 2673 
// 2674 
// 2675   device.extAddr = ind->initExtAddr;
// 2676   device.secure  = ind->secure;
// 2677 
// 2678   if ( ind->secure == FALSE )
// 2679   {
// 2680     // SKKE from Trust Center is not secured between child and parent
// 2681     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2682     device.parentAddr = ind->srcAddr;
// 2683   }
// 2684   else
// 2685   {
// 2686     // SKKE from initiator should be secured
// 2687     device.nwkAddr    = ind->srcAddr;
// 2688     device.parentAddr = INVALID_NODE_ADDR;
// 2689   }
// 2690 
// 2691   rsp.dstAddr     = ind->srcAddr;
// 2692   rsp.initExtAddr = &ind->initExtAddr[0];
// 2693   rsp.secure      = ind->secure;
// 2694 
// 2695   // validate device for SKKE
// 2696   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
// 2697   {
// 2698     rsp.accept = TRUE;
// 2699   }
// 2700   else
// 2701   {
// 2702     rsp.accept = FALSE;
// 2703   }
// 2704 
// 2705   APSME_EstablishKeyRsp( &rsp );
// 2706 }
// 2707 #endif
// 2708 
// 2709 /******************************************************************************
// 2710  * @fn          ZDSecMgrTransportKeyInd
// 2711  *
// 2712  * @brief       Process the ZDO_TransportKeyInd_t message.
// 2713  *
// 2714  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 2715  *
// 2716  * @return      none
// 2717  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2718 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
ZDSecMgrTransportKeyInd:
        CFI Block cfiBlock515 Using cfiCommon0
        CFI Function ZDSecMgrTransportKeyInd
// 2719 {
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2720   uint8 index;
// 2721 
// 2722   // load Trust Center data if needed
// 2723   ZDSecMgrTCDataLoad( ind->srcExtAddr );
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     A,R6
        ADD     A,#0x16
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
// 2724 
// 2725   if ( ind->keyType == KEY_TYPE_TC_MASTER )
        MOV     A,R6
        ADD     A,#0x4
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_135:
        JZ      ??ZDSecMgrTransportKeyInd_0
// 2726   {
// 2727     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2728     //ZDSecMgrTCMasterKey( ind );
// 2729     {
// 2730       if ( zgPreConfigKeys != TRUE )
// 2731       {
// 2732         // devtag.pro.security.todo - check if Trust Center address is configured and correct
// 2733         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2734       }
// 2735       else
// 2736       {
// 2737         // error condition - reject key
// 2738       }
// 2739     }
// 2740   }
// 2741   else if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 2742             ( ind->keyType == 6                 ) ||
// 2743             ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
        XRL     A,#0x1
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrTransportKeyInd_0
// 2744   {
// 2745     // check for dummy NWK key (all zeros)
// 2746     for ( index = 0;
??ZDSecMgrTransportKeyInd_1:
        MOV     R2,#0x0
??ZDSecMgrTransportKeyInd_2:
        MOV     ?V0 + 0,R2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine111_0 & 0xFFFF
??CrossCallReturnLabel_215:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_3
// 2747           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 2748           index++ );
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??ZDSecMgrTransportKeyInd_2
// 2749 
// 2750     if ( index == SEC_KEY_LEN )
??ZDSecMgrTransportKeyInd_3:
        MOV     A,#0x10
        XRL     A,R2
        JNZ     ??ZDSecMgrTransportKeyInd_4
// 2751     {
// 2752       // load preconfigured key - once!!
// 2753       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 2754       {
// 2755         SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     R2,#(zgPreConfigKey & 0xff)
        MOV     R3,#((zgPreConfigKey >> 8) & 0xff)
        LCALL   ??SSP_UpdateNwkKey?relay
// 2756         SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrTransportKeyInd_6
// 2757       }
// 2758     }
// 2759     else
// 2760     {
// 2761       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
??ZDSecMgrTransportKeyInd_4:
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??SSP_UpdateNwkKey?relay
// 2762       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 2763       {
// 2764         SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
??ZDSecMgrTransportKeyInd_6:
        LCALL   ??SSP_SwitchNwkKey?relay
// 2765       }
// 2766     }
// 2767 
// 2768     // handle next step in authentication process
// 2769     ZDSecMgrAuthNwkKey();
??ZDSecMgrTransportKeyInd_5:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL   ??ZDSecMgrAuthNwkKey?relay
// 2770   }
// 2771   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2772   {
// 2773     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2774     {
// 2775       //ZDSecMgrTCLinkKey( ind );
// 2776     }
// 2777   }
// 2778   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 2779   {
// 2780     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2781     {
// 2782       uint16           ami;
// 2783       AddrMgrEntry_t   entry;
// 2784       ZDSecMgrEntry_t* entryZD;
// 2785 
// 2786       ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami );
// 2787 
// 2788       if ( ind->initiator == TRUE )
// 2789       {
// 2790         // get the ami data
// 2791         entry.user  = ADDRMGR_USER_SECURITY;
// 2792         entry.index = ami;
// 2793         AddrMgrEntryGet( &entry );
// 2794 
// 2795         if ( entry.nwkAddr != INVALID_NODE_ADDR )
// 2796         {
// 2797           APSME_EstablishKeyReq_t req;
// 2798           ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2799 
// 2800           ZDSecMgrEntryLookupAMI( ami, &entryZD );
// 2801 
// 2802           if ( entryZD == NULL )
// 2803           {
// 2804             // get new entry
// 2805             if ( ZDSecMgrEntryNew( &entryZD ) == ZSuccess )
// 2806             {
// 2807               // finish setting up entry
// 2808               entryZD->ami = ami;
// 2809             }
// 2810           }
// 2811 
// 2812           req.respExtAddr = ind->srcExtAddr;
// 2813           req.method      = APSME_SKKE_METHOD;
// 2814           req.dstAddr     = entry.nwkAddr;
// 2815           //devtag.0604.todo - remove obsolete
// 2816           req.apsSecure   = FALSE;
// 2817           req.nwkSecure   = TRUE;
// 2818           APSME_EstablishKeyReq( &req );
// 2819         }
// 2820       }
// 2821       else
// 2822       {
// 2823         if ( ami == INVALID_NODE_ADDR )
// 2824         {
// 2825           // store new EXT address
// 2826           ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2827         }
// 2828 
// 2829         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2830       }
// 2831 
// 2832       //if ( entry.nwkAddr == INVALID_NODE_ADDR )
// 2833       //{
// 2834       //  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2835       //}
// 2836     }
// 2837   }
// 2838   else if ( ind->keyType == KEY_TYPE_APP_LINK )
// 2839   {
// 2840     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2841     {
// 2842       uint16           ami;
// 2843       ZDSecMgrEntry_t* entry;
// 2844 
// 2845       // get the address index
// 2846       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
// 2847       {
// 2848         // store new EXT address
// 2849         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2850         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2851       }
// 2852 
// 2853       ZDSecMgrEntryLookupAMI( ami, &entry );
// 2854 
// 2855       if ( entry == NULL )
// 2856       {
// 2857         // get new entry
// 2858         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 2859         {
// 2860           // finish setting up entry
// 2861           entry->ami = ami;
// 2862         }
// 2863       }
// 2864 
// 2865       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
// 2866     }
// 2867   }
// 2868 }
??ZDSecMgrTransportKeyInd_0:
        LJMP    ??Subroutine92_0 & 0xFFFF
        CFI EndBlock cfiBlock515

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond516 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond517 Using cfiCommon0
        CFI (cfiCond517) NoFunction
        CFI (cfiCond517) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond517) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond517) CFA_SP SP+0
        CFI (cfiCond517) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker518 Using cfiCommon1
        CFI (cfiPicker518) NoFunction
        CFI (cfiPicker518) Picker
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond516
        CFI EndBlock cfiCond517
        CFI EndBlock cfiPicker518
// 2869 
// 2870 /******************************************************************************
// 2871  * @fn          ZDSecMgrUpdateDeviceInd
// 2872  *
// 2873  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 2874  *
// 2875  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 2876  *
// 2877  * @return      none
// 2878  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2879 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
ZDSecMgrUpdateDeviceInd:
        CFI Block cfiBlock519 Using cfiCommon0
        CFI Function ZDSecMgrUpdateDeviceInd
// 2880 {
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2881   ZDSecMgrDevice_t device;
// 2882 
// 2883 
// 2884   device.nwkAddr    = ind->devAddr;
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine111_0 & 0xFFFF
??CrossCallReturnLabel_216:
        LCALL   ?Subroutine18 & 0xFFFF
// 2885   device.extAddr    = ind->devExtAddr;
??CrossCallReturnLabel_186:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
// 2886   device.parentAddr = ind->srcAddr;
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
// 2887 
// 2888   //if ( ( ind->status == APSME_UD_SECURED_JOIN   ) ||
// 2889   //     ( ind->status == APSME_UD_UNSECURED_JOIN )   )
// 2890   //{
// 2891   //  if ( ind->status == APSME_UD_SECURED_JOIN )
// 2892   //  {
// 2893   //    device.secure = TRUE;
// 2894   //  }
// 2895   //  else
// 2896   //  {
// 2897   //    device.secure = FALSE;
// 2898   //  }
// 2899 
// 2900     // try to join this device
// 2901     ZDSecMgrDeviceJoin( &device );
??CrossCallReturnLabel_1:
        LCALL   ??ZDSecMgrDeviceJoin?relay
        CFI EndBlock cfiBlock519
// 2902   //}
// 2903 }
        REQUIRE ?Subroutine84
        ; // Fall through to label ?Subroutine84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine84:
        CFI Block cfiBlock520 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 10)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xa
        SJMP    ??Subroutine110_0
        CFI EndBlock cfiBlock520

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine80:
        CFI Block cfiBlock521 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0x2
        CFI EndBlock cfiBlock521
        REQUIRE ??Subroutine110_0
        ; // Fall through to label ??Subroutine110_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine110_0:
        CFI Block cfiBlock522 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        CFI Valid
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock522
// 2904 
// 2905 /******************************************************************************
// 2906  * @fn          ZDSecMgrRemoveDeviceInd
// 2907  *
// 2908  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 2909  *
// 2910  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 2911  *
// 2912  * @return      none
// 2913  */
// 2914 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
// 2915 {
// 2916   ZDSecMgrDevice_t device;
// 2917 
// 2918 
// 2919   // only accept from Trust Center
// 2920   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
// 2921   {
// 2922     // look up NWK address
// 2923     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
// 2924     {
// 2925       device.parentAddr = NLME_GetShortAddr();
// 2926       device.extAddr    = ind->childExtAddr;
// 2927 
// 2928       // remove device
// 2929       ZDSecMgrDeviceRemove( &device );
// 2930     }
// 2931   }
// 2932 }
// 2933 
// 2934 /******************************************************************************
// 2935  * @fn          ZDSecMgrRequestKeyInd
// 2936  *
// 2937  * @brief       Process the ZDO_RequestKeyInd_t message.
// 2938  *
// 2939  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 2940  *
// 2941  * @return      none
// 2942  */
// 2943 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
// 2944 {
// 2945   if ( ind->keyType == KEY_TYPE_NWK )
// 2946   {
// 2947   }
// 2948   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 2949   {
// 2950     ZDSecMgrAppKeyReq( ind );
// 2951   }
// 2952   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2953   {
// 2954   }
// 2955   //else ignore
// 2956 }
// 2957 
// 2958 /******************************************************************************
// 2959  * @fn          ZDSecMgrSwitchKeyInd
// 2960  *
// 2961  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 2962  *
// 2963  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 2964  *
// 2965  * @return      none
// 2966  */
// 2967 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
// 2968 {
// 2969   SSP_SwitchNwkKey( ind->keySeqNum );
// 2970 
// 2971   // Save if nv
// 2972   ZDApp_NVUpdate();
// 2973 }
// 2974 
// 2975 /******************************************************************************
// 2976  * @fn          ZDSecMgrAuthenticateInd
// 2977  *
// 2978  * @brief       Process the ZDO_AuthenticateInd_t message.
// 2979  *
// 2980  * @param       ind - [in] ZDO_AuthenticateInd_t indication
// 2981  *
// 2982  * @return      none
// 2983  */
// 2984 void ZDSecMgrAuthenticateInd( ZDO_AuthenticateInd_t* ind )
// 2985 {
// 2986   APSME_AuthenticateReq_t req;
// 2987   AddrMgrEntry_t          entry;
// 2988 
// 2989 
// 2990   // update the address manager
// 2991   //---------------------------------------------------------------------------
// 2992   // note:
// 2993   // required for EA processing, but ultimately EA logic could also use the
// 2994   // neighbor table to look up addresses -- also(IF using EA) the neighbor
// 2995   // table is supposed to have authentication states for neighbors
// 2996   //---------------------------------------------------------------------------
// 2997   entry.user    = ADDRMGR_USER_SECURITY;
// 2998   entry.nwkAddr = ind->aps.initNwkAddr;
// 2999   AddrMgrExtAddrSet( entry.extAddr, ind->aps.initExtAddr );
// 3000 
// 3001   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 3002   {
// 3003     // set request fields
// 3004     req.nwkAddr   = ind->aps.initNwkAddr;
// 3005     req.extAddr   = ind->aps.initExtAddr;
// 3006     req.action    = APSME_EA_ACCEPT;
// 3007     req.challenge = ind->aps.challenge;
// 3008 
// 3009     // start EA processing
// 3010     APSME_AuthenticateReq( &req );
// 3011   }
// 3012 }
// 3013 
// 3014 /******************************************************************************
// 3015  * @fn          ZDSecMgrAuthenticateCfm
// 3016  *
// 3017  * @brief       Process the ZDO_AuthenticateCfm_t message.
// 3018  *
// 3019  * @param       cfm - [in] ZDO_AuthenticateCfm_t confirmation
// 3020  *
// 3021  * @return      none
// 3022  */
// 3023 void ZDSecMgrAuthenticateCfm( ZDO_AuthenticateCfm_t* cfm )
// 3024 {
// 3025   if ( cfm->aps.status == ZSuccess )
// 3026   {
// 3027     if ( ( cfm->aps.initiator == TRUE ) && ( devState == DEV_END_DEVICE_UNAUTH ) )
// 3028     {
// 3029       // inform ZDO that device has been authenticated
// 3030       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 3031     }
// 3032   }
// 3033 }
// 3034 
// 3035 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3036 /******************************************************************************
// 3037  * @fn          ZDSecMgrUpdateNwkKey
// 3038  *
// 3039  * @brief       Load a new NWK key and trigger a network wide update.
// 3040  *
// 3041  * @param       key       - [in] new NWK key
// 3042  * @param       keySeqNum - [in] new NWK key sequence number
// 3043  *
// 3044  * @return      ZStatus_t
// 3045  */
// 3046 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
// 3047 {
// 3048   ZStatus_t               status;
// 3049   APSME_TransportKeyReq_t req;
// 3050 
// 3051   // initialize common elements of local variables
// 3052   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3053     req.keyType   = KEY_TYPE_NWK_HIGH;
// 3054   else
// 3055     req.keyType   = KEY_TYPE_NWK;
// 3056 
// 3057   req.dstAddr   = dstAddr;
// 3058   req.keySeqNum = keySeqNum;
// 3059   req.key       = key;
// 3060   req.extAddr   = NULL;
// 3061   req.nwkSecure = TRUE;
// 3062   req.apsSecure = TRUE;
// 3063   req.tunnel    = NULL;
// 3064 
// 3065   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3066   {
// 3067     ZDSecMgrEntry_t*        entry;
// 3068     uint16                  index;
// 3069     AddrMgrEntry_t          addrEntry;
// 3070 
// 3071     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3072 
// 3073     status = ZFailure;
// 3074 
// 3075     // verify data is available
// 3076     if ( ZDSecMgrEntries != NULL )
// 3077     {
// 3078       // find available entry
// 3079       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3080       {
// 3081         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3082         {
// 3083           // return successful result
// 3084           entry = &ZDSecMgrEntries[index];
// 3085 
// 3086           // get NWK address
// 3087           addrEntry.index = entry->ami;
// 3088           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3089           {
// 3090             req.dstAddr = addrEntry.nwkAddr;
// 3091             req.extAddr = addrEntry.extAddr;
// 3092             status = APSME_TransportKeyReq( &req );
// 3093           }
// 3094         }
// 3095       }
// 3096     }
// 3097   }
// 3098   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3099   {
// 3100     status = APSME_TransportKeyReq( &req );
// 3101   }
// 3102 
// 3103   SSP_UpdateNwkKey( key, keySeqNum );
// 3104 
// 3105   // Save if nv
// 3106   ZDApp_NVUpdate();
// 3107 
// 3108   return status;
// 3109 }
// 3110 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3111 
// 3112 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3113 /******************************************************************************
// 3114  * @fn          ZDSecMgrSwitchNwkKey
// 3115  *
// 3116  * @brief       Causes the NWK key to switch via a network wide command.
// 3117  *
// 3118  * @param       keySeqNum - [in] new NWK key sequence number
// 3119  *
// 3120  * @return      ZStatus_t
// 3121  */
// 3122 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
// 3123 {
// 3124   ZStatus_t            status;
// 3125   APSME_SwitchKeyReq_t req;
// 3126 
// 3127   // initialize common elements of local variables
// 3128   req.dstAddr = dstAddr;
// 3129   req.keySeqNum = keySeqNum;
// 3130 
// 3131   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3132   {
// 3133     ZDSecMgrEntry_t*     entry;
// 3134     uint16               index;
// 3135     AddrMgrEntry_t       addrEntry;
// 3136 
// 3137     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3138 
// 3139     status = ZFailure;
// 3140 
// 3141     // verify data is available
// 3142     if ( ZDSecMgrEntries != NULL )
// 3143     {
// 3144       // find available entry
// 3145       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3146       {
// 3147         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3148         {
// 3149           // return successful result
// 3150           entry = &ZDSecMgrEntries[index];
// 3151 
// 3152           // get NWK address
// 3153           addrEntry.index = entry->ami;
// 3154 
// 3155           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3156           {
// 3157             req.dstAddr = addrEntry.nwkAddr;
// 3158             status = APSME_SwitchKeyReq( &req );
// 3159           }
// 3160         }
// 3161       }
// 3162     }
// 3163   }
// 3164   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3165   {
// 3166     status = APSME_SwitchKeyReq( &req );
// 3167   }
// 3168 
// 3169   SSP_SwitchNwkKey( keySeqNum );
// 3170 
// 3171   // Save if nv
// 3172   ZDApp_NVUpdate();
// 3173 
// 3174   return status;
// 3175 }
// 3176 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3177 
// 3178 #if ( ZG_BUILD_JOINING_TYPE )
// 3179 /******************************************************************************
// 3180  * @fn          ZDSecMgrRequestAppKey
// 3181  *
// 3182  * @brief       Request an application key with partner.
// 3183  *
// 3184  * @param       partNwkAddr - [in] partner network address
// 3185  *
// 3186  * @return      ZStatus_t
// 3187  */
// 3188 ZStatus_t ZDSecMgrRequestAppKey( uint16 partNwkAddr )
// 3189 {
// 3190   ZStatus_t             status;
// 3191   APSME_RequestKeyReq_t req;
// 3192   uint8                 partExtAddr[Z_EXTADDR_LEN];
// 3193 
// 3194 
// 3195   if ( AddrMgrExtAddrLookup( partNwkAddr, partExtAddr ) )
// 3196   {
// 3197     req.dstAddr = 0;
// 3198     req.keyType = KEY_TYPE_APP_MASTER;
// 3199     req.partExtAddr = partExtAddr;
// 3200     status = APSME_RequestKeyReq( &req );
// 3201   }
// 3202   else
// 3203   {
// 3204     status = ZFailure;
// 3205   }
// 3206 
// 3207   return status;
// 3208 }
// 3209 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3210 
// 3211 #if ( ZG_BUILD_JOINING_TYPE )
// 3212 /******************************************************************************
// 3213  * @fn          ZDSecMgrSetupPartner
// 3214  *
// 3215  * @brief       Setup for application key partner.
// 3216  *
// 3217  * @param       partNwkAddr - [in] partner network address
// 3218  *
// 3219  * @return      ZStatus_t
// 3220  */
// 3221 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
// 3222 {
// 3223   AddrMgrEntry_t entry;
// 3224   ZStatus_t      status;
// 3225 
// 3226   status = ZFailure;
// 3227 
// 3228   // update the address manager
// 3229   entry.user    = ADDRMGR_USER_SECURITY;
// 3230   entry.nwkAddr = partNwkAddr;
// 3231   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
// 3232 
// 3233   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 3234   {
// 3235     status = ZSuccess;
// 3236 
// 3237     // check for address discovery
// 3238     if ( partNwkAddr == INVALID_NODE_ADDR )
// 3239     {
// 3240       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3241     }
// 3242     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
// 3243     {
// 3244       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3245     }
// 3246   }
// 3247 
// 3248   return status;
// 3249 }
// 3250 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3251 
// 3252 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3253 /******************************************************************************
// 3254  * @fn          ZDSecMgrAppKeyTypeSet
// 3255  *
// 3256  * @brief       Set application key type.
// 3257  *
// 3258  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 3259  *                                                   KEY_TYPE_APP_LINK@3
// 3260  *
// 3261  * @return      ZStatus_t
// 3262  */
// 3263 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
// 3264 {
// 3265   if ( keyType == KEY_TYPE_APP_LINK )
// 3266   {
// 3267     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
// 3268   }
// 3269   else
// 3270   {
// 3271     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
// 3272   }
// 3273 
// 3274   return ZSuccess;
// 3275 }
// 3276 #endif
// 3277 
// 3278 /******************************************************************************
// 3279  * ZigBee Device Security Manager - Stub Implementations
// 3280  */
// 3281 /******************************************************************************
// 3282  * @fn          ZDSecMgrMasterKeyGet (stubs APSME_MasterKeyGet)
// 3283  *
// 3284  * @brief       Get MASTER key for specified EXT address.
// 3285  *
// 3286  * @param       extAddr - [in] EXT address
// 3287  * @param       key     - [out] MASTER key
// 3288  *
// 3289  * @return      ZStatus_t
// 3290  */
// 3291 ZStatus_t ZDSecMgrMasterKeyGet( uint8* extAddr, uint8** key )
// 3292 {
// 3293   ZStatus_t status;
// 3294   uint16    ami;
// 3295 
// 3296 
// 3297   // lookup entry for specified EXT address
// 3298   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
// 3299   //status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3300 
// 3301   if ( status == ZSuccess )
// 3302   {
// 3303     ZDSecMgrMasterKeyLookup( ami, key );
// 3304   }
// 3305   else
// 3306   {
// 3307     *key = NULL;
// 3308   }
// 3309 
// 3310   return status;
// 3311 }
// 3312 
// 3313 /******************************************************************************
// 3314  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 3315  *
// 3316  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 3317  *
// 3318  * @param       extAddr - [in] EXT address
// 3319  * @param       data    - [in] APSME_LinkKeyData_t
// 3320  *
// 3321  * @return      ZStatus_t
// 3322  */
// 3323 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
// 3324 {
// 3325   ZStatus_t        status;
// 3326   ZDSecMgrEntry_t* entry;
// 3327 
// 3328 
// 3329   // lookup entry index for specified EXT address
// 3330   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3331 
// 3332   if ( status == ZSuccess )
// 3333   {
// 3334     // setup the link key data reference
// 3335     osal_memcpy( entry->lkd.key, key, SEC_KEY_LEN );
// 3336 
// 3337     entry->lkd.apsmelkd.rxFrmCntr = 0;
// 3338     entry->lkd.apsmelkd.txFrmCntr = 0;
// 3339   }
// 3340 
// 3341   return status;
// 3342 }
// 3343 
// 3344 /******************************************************************************
// 3345  * @fn          ZDSecMgrAuthenticationSet
// 3346  *
// 3347  * @brief       Mark the specific device as authenticated or not
// 3348  *
// 3349  * @param       extAddr - [in] EXT address
// 3350  * @param       option  - [in] authenticated or not
// 3351  *
// 3352  * @return      ZStatus_t
// 3353  */
// 3354 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
// 3355 {
// 3356   ZStatus_t        status;
// 3357   ZDSecMgrEntry_t* entry;
// 3358 
// 3359 
// 3360   // lookup entry index for specified EXT address
// 3361   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3362 
// 3363   if ( status == ZSuccess )
// 3364   {
// 3365     entry->authenticateOption = option;
// 3366   }
// 3367 
// 3368   return status;
// 3369 }
// 3370 
// 3371 /******************************************************************************
// 3372  * @fn          ZDSecMgrAuthenticationCheck
// 3373  *
// 3374  * @brief       Check if the specific device has been authenticated or not
// 3375  *              For non-trust center device, always return true
// 3376  *
// 3377  * @param       shortAddr - [in] short address
// 3378  *
// 3379  * @return      TRUE @ authenticated with CBKE
// 3380  *              FALSE @ not authenticated
// 3381  */
// 3382 
// 3383 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
// 3384 {
// 3385 #if defined (TC_LINKKEY_JOIN)
// 3386 
// 3387   ZDSecMgrEntry_t* entry;
// 3388   uint8 extAddr[Z_EXTADDR_LEN];
// 3389 
// 3390   // If the local device is not the trust center, always return TRUE
// 3391   if ( NLME_GetShortAddr() != TCshortAddr )
// 3392   {
// 3393     return TRUE;
// 3394   }
// 3395   // Otherwise, check the authentication option
// 3396   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
// 3397   {
// 3398     // lookup entry index for specified EXT address
// 3399     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
// 3400     {
// 3401       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
// 3402       {
// 3403         return TRUE;
// 3404       }
// 3405       else
// 3406       {
// 3407         return FALSE;
// 3408       }
// 3409     }
// 3410   }
// 3411   return FALSE;
// 3412 
// 3413 #else
// 3414   (void)shortAddr;  // Intentionally unreferenced parameter
// 3415   
// 3416   // For non AMI/SE Profile, perform no check and always return true.
// 3417   return TRUE;
// 3418 
// 3419 #endif // TC_LINKKEY_JOIN
// 3420 }
// 3421 
// 3422 
// 3423 /******************************************************************************
// 3424  * @fn          ZDSecMgrLinkKeyDataGet (stubs APSME_LinkKeyDataGet)
// 3425  *
// 3426  * @brief       Get <APSME_LinkKeyData_t> for specified NWK address.
// 3427  *
// 3428  * @param       extAddr - [in] EXT address
// 3429  * @param       data    - [out] APSME_LinkKeyData_t
// 3430  *
// 3431  * @return      ZStatus_t
// 3432  */
// 3433 ZStatus_t ZDSecMgrLinkKeyDataGet(uint8* extAddr, APSME_LinkKeyData_t** data)
// 3434 {
// 3435   ZStatus_t        status;
// 3436   ZDSecMgrEntry_t* entry;
// 3437 
// 3438 
// 3439   // lookup entry index for specified NWK address
// 3440   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3441 
// 3442   if ( status == ZSuccess )
// 3443   {
// 3444     // setup the link key data reference
// 3445     (*data) = &entry->lkd.apsmelkd;
// 3446     (*data)->key = entry->lkd.key;
// 3447   }
// 3448   else
// 3449   {
// 3450     *data = NULL;
// 3451   }
// 3452 
// 3453   return status;
// 3454 }
// 3455 
// 3456 /******************************************************************************
// 3457  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 3458  *
// 3459  * @brief       Verify and process key transportation to child.
// 3460  *
// 3461  * @param       ind - [in] APSME_TransportKeyInd_t
// 3462  *
// 3463  * @return      uint8 - success(TRUE:FALSE)
// 3464  */
// 3465 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
// 3466 {
// 3467   uint8 success;
// 3468 
// 3469   success = FALSE;
// 3470 
// 3471   // verify from Trust Center
// 3472   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
// 3473   {
// 3474     success = TRUE;
// 3475 
// 3476     // check for initial NWK key
// 3477     if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 3478          ( ind->keyType == 6                 ) ||
// 3479          ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
// 3480     {
// 3481       // set association status to authenticated
// 3482       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
// 3483     }
// 3484   }
// 3485 
// 3486   return success;
// 3487 }
// 3488 
// 3489 /******************************************************************************
// 3490  * @fn          ZDSecMgrAddLinkKey
// 3491  *
// 3492  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 3493  *              as authenticated in the authenticateOption. Note that this function
// 3494  *              is hardwared to CBKE right now.
// 3495  *
// 3496  * @param       shortAddr - short address of the partner device
// 3497  * @param       extAddr - extended address of the partner device
// 3498  * @param       key - link key
// 3499  *
// 3500  * @return      ZStatus_t
// 3501  */
// 3502 ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
// 3503 {
// 3504   uint16           ami;
// 3505   ZDSecMgrEntry_t* entry;
// 3506 
// 3507   /* Store the device address in the addr manager */
// 3508   if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
// 3509   {
// 3510     /* Adding to Addr Manager fails */
// 3511     return ZFailure;
// 3512   }
// 3513 
// 3514   /* Lookup entry using specified address index */
// 3515   ZDSecMgrEntryLookupAMI( ami, &entry );
// 3516 
// 3517   // If no existing entry, create one
// 3518   if ( entry == NULL )
// 3519   {
// 3520     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 3521     {
// 3522       entry->ami = ami;
// 3523     }
// 3524     else
// 3525     {
// 3526       /* Security Manager full */
// 3527       return ZBufferFull;
// 3528     }
// 3529   }
// 3530   // Write the link key
// 3531   APSME_LinkKeySet( extAddr, key );
// 3532 
// 3533 #if defined (TC_LINKKEY_JOIN)
// 3534   // Mark the device as authenticated.
// 3535   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
// 3536 #endif
// 3537 
// 3538 #if defined NV_RESTORE
// 3539   ZDSecMgrWriteNV();  // Write the new established link key to NV.
// 3540 #endif
// 3541   
// 3542   return ZSuccess;
// 3543 }
// 3544 
// 3545 #if defined ( NV_RESTORE )
// 3546 /******************************************************************************
// 3547  * @fn          ZDSecMgrInitNV
// 3548  *
// 3549  * @brief       Initialize the SecMgr entry data in NV.
// 3550  *
// 3551  * @param       none
// 3552  *
// 3553  * @return      uint8 - <osal_nv_item_init> return codes
// 3554  */
// 3555 uint8 ZDSecMgrInitNV(void)
// 3556 {
// 3557   uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE, 
// 3558                 (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
// 3559   if (rtrn != ZSUCCESS)  // If the item does not already exist.
// 3560   {
// 3561     nvDeviceListHdr_t hdr;
// 3562     hdr.numRecs = 0;
// 3563     osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
// 3564   }
// 3565 
// 3566   return rtrn;
// 3567 }
// 3568 #endif // NV_RESTORE
// 3569 
// 3570 #if defined ( NV_RESTORE )
// 3571 /*********************************************************************
// 3572  * @fn      ZDSecMgrWriteNV()
// 3573  *
// 3574  * @brief   Save off the link key list to NV
// 3575  *
// 3576  * @param   none
// 3577  *
// 3578  * @return  none
// 3579  */
// 3580 static void ZDSecMgrWriteNV( void )
// 3581 {
// 3582   uint16 i;
// 3583   nvDeviceListHdr_t hdr;
// 3584 
// 3585   hdr.numRecs = 0;
// 3586 
// 3587   if (ZDSecMgrEntries != NULL)
// 3588   {
// 3589     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
// 3590     {
// 3591       if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
// 3592       {
// 3593         // Save off the record
// 3594         osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3595                 (uint16)((sizeof(nvDeviceListHdr_t)) + (hdr.numRecs * sizeof(ZDSecMgrEntry_t))),
// 3596                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
// 3597         hdr.numRecs++;
// 3598       }
// 3599     }
// 3600   }
// 3601 
// 3602   // Save off the header
// 3603   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 3604 }
// 3605 #endif // NV_RESTORE
// 3606 
// 3607 #if defined ( NV_RESTORE )
// 3608 /******************************************************************************
// 3609  * @fn          ZDSecMgrRestoreFromNV
// 3610  *
// 3611  * @brief       Restore the SecMgr entry data from NV.
// 3612  *
// 3613  * @param       none
// 3614  *
// 3615  * @return      None.
// 3616  */
// 3617 static void ZDSecMgrRestoreFromNV( void )
// 3618 {
// 3619   nvDeviceListHdr_t hdr;
// 3620 
// 3621   if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
// 3622       (hdr.numRecs <= ZDSECMGR_ENTRY_MAX))
// 3623   {
// 3624     uint8 x;
// 3625 
// 3626     for (x = 0; x < hdr.numRecs; x++)
// 3627     {
// 3628       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 3629                 (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 3630                       sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == ZSUCCESS )
// 3631       {
// 3632         ZDSecMgrEntries[x].lkd.apsmelkd.txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
// 3633       }
// 3634     }
// 3635   }
// 3636 }
// 3637 #endif // NV_RESTORE
// 3638 
// 3639 /******************************************************************************
// 3640  * @fn          ZDSecMgrAPSRemove
// 3641  *
// 3642  * @brief       Remove device from network.
// 3643  *
// 3644  * @param       nwkAddr - device's NWK address
// 3645  * @param       extAddr - device's Extended address
// 3646  * @param       parentAddr - parent's NWK address
// 3647  *
// 3648  * @return      ZStatus_t
// 3649  */
// 3650 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
// 3651 {
// 3652   ZDSecMgrDevice_t device;
// 3653 
// 3654   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 3655        ( extAddr == NULL )              ||
// 3656        ( parentAddr == INVALID_NODE_ADDR ) )
// 3657   {
// 3658     return ( ZFailure );
// 3659   }
// 3660 
// 3661   device.nwkAddr = nwkAddr;
// 3662   device.extAddr = extAddr;
// 3663   device.parentAddr = parentAddr;
// 3664 
// 3665   // remove device
// 3666   ZDSecMgrDeviceRemove( &device );
// 3667 
// 3668   return ( ZSuccess );
// 3669 }
// 3670 
// 3671 /******************************************************************************
// 3672  * @fn          APSME_TCLinkKeyInit
// 3673  *
// 3674  * @brief       Initialize the NV table for preconfigured TC link key
// 3675  *               
// 3676  *              When zgUseDefaultTCL is set to TRUE, the default preconfig
// 3677  *              Trust Center Link Key is written to NV. A single tclk is used   
// 3678  *              by all devices joining the network.
// 3679  *              
// 3680  * @param       none
// 3681  *
// 3682  * @return      none
// 3683  */
// 3684 void APSME_TCLinkKeyInit(void)
// 3685 {
// 3686   uint8             i;
// 3687   APSME_TCLinkKey_t tcLinkKey;
// 3688   
// 3689   // Initialize all NV items for preconfigured tclk with 
// 3690   // extended address all zero, if not exist already.
// 3691   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
// 3692   for( i = 1; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3693   {
// 3694     osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i), 
// 3695                        sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 3696   }
// 3697   
// 3698   // Initialize the default tclk
// 3699   if( zgUseDefaultTCLK == TRUE )
// 3700   {
// 3701     osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
// 3702     osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
// 3703     
// 3704     // If the item doesn't exist in NV memory, create and initialize
// 3705     // it with the default value passed in.
// 3706     osal_nv_item_init( ZCD_NV_TCLK_TABLE_START, sizeof(APSME_TCLinkKey_t), &tcLinkKey );
// 3707   }
// 3708   else
// 3709   {
// 3710     osal_nv_item_init( ZCD_NV_TCLK_TABLE_START, sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 3711   }
// 3712 }
// 3713 
// 3714 /******************************************************************************
// 3715  * @fn          APSME_TCLinkKeySync
// 3716  *
// 3717  * @brief       Sync Trust Center LINK key data.
// 3718  *
// 3719  * @param       srcAddr - [in] srcAddr
// 3720  * @param       si      - [in, out] SSP_Info_t
// 3721  *
// 3722  * @return      ZStatus_t
// 3723  */
// 3724 ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
// 3725 {
// 3726   ZStatus_t          status = ZSecNoKey;
// 3727   uint8              i;
// 3728   APSME_TCLinkKey_t  tcLinkKey;       
// 3729   
// 3730   // Look up the IEEE address of the trust center if it's available
// 3731   if ( AddrMgrExtAddrValid( si->extAddr ) == false )
// 3732   {
// 3733     APSME_LookupExtAddr( srcAddr, si->extAddr );
// 3734   }
// 3735   
// 3736   // Look up the TC link key associated with the device
// 3737   // or the default TC link key (extAddr is all FFs), whichever is found
// 3738   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3739   {
// 3740     // Read entry i of the TC link key table from NV
// 3741     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3742                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
// 3743     
// 3744     if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
// 3745         APSME_IsDefaultTCLK(tcLinkKey.extAddr))
// 3746     {
// 3747       // verify that the incoming frame counter is valid
// 3748       if ( si->frmCntr >= tcLinkKey.rxFrmCntr )
// 3749       {
// 3750         // set the key to use
// 3751         osal_memcpy( si->key, tcLinkKey.key, SEC_KEY_LEN );
// 3752         
// 3753         // update the rx frame counter
// 3754         tcLinkKey.rxFrmCntr = si->frmCntr + 1;
// 3755         
// 3756         // Write the tc link key back to the NV
// 3757         osal_nv_write( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3758                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
// 3759         
// 3760         status = ZSuccess;
// 3761         
// 3762       }
// 3763       else
// 3764       {
// 3765         status = ZSecOldFrmCount;
// 3766       }
// 3767       
// 3768       return status;
// 3769     }
// 3770   }
// 3771   
// 3772   
// 3773   return status;
// 3774 }
// 3775 
// 3776 /******************************************************************************
// 3777  * @fn          APSME_TCLinkKeyLoad
// 3778  *
// 3779  * @brief       Load Trust Center LINK key data.
// 3780  *
// 3781  * @param       dstAddr - [in] dstAddr
// 3782  * @param       si      - [in, out] SSP_Info_t
// 3783  *
// 3784  * @return      ZStatus_t
// 3785  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond523 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_218
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond524 Using cfiCommon0
        CFI (cfiCond524) NoFunction
        CFI (cfiCond524) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond524) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond524) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond524) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond524) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond524) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond524) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond524) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond524) CFA_SP SP+0
        CFI (cfiCond524) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker525 Using cfiCommon1
        CFI (cfiPicker525) NoFunction
        CFI (cfiPicker525) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond523
        CFI EndBlock cfiCond524
        CFI EndBlock cfiPicker525
        REQUIRE ??Subroutine111_0
        ; // Fall through to label ??Subroutine111_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine111_0:
        CFI Block cfiCond526 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_136
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond527 Using cfiCommon0
        CFI (cfiCond527) NoFunction
        CFI (cfiCond527) Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_137
        CFI (cfiCond527) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond527) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond527) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond527) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond527) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond527) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond527) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond527) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond527) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond527) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond527) CFA_SP SP+0
        CFI (cfiCond527) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond528 Using cfiCommon0
        CFI (cfiCond528) NoFunction
        CFI (cfiCond528) Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_138
        CFI (cfiCond528) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond528) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond528) CFA_SP SP+-5
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_134
        CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond529) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond529) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond529) CFA_SP SP+0
        CFI (cfiCond529) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond530 Using cfiCommon0
        CFI (cfiCond530) NoFunction
        CFI (cfiCond530) Conditional ??CrossCallReturnLabel_220, ??CrossCallReturnLabel_135
        CFI (cfiCond530) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond530) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond530) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond530) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond530) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond530) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond530) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond530) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond530) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond530) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond530) CFA_SP SP+0
        CFI (cfiCond530) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond531 Using cfiCommon0
        CFI (cfiCond531) NoFunction
        CFI (cfiCond531) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond531) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond531) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond531) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond531) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond531) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond531) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond531) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond531) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond531) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond531) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond531) CFA_SP SP+0
        CFI (cfiCond531) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond532 Using cfiCommon0
        CFI (cfiCond532) NoFunction
        CFI (cfiCond532) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond532) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond532) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond532) CFA_SP SP+-5
        CFI (cfiCond532) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond533 Using cfiCommon0
        CFI (cfiCond533) NoFunction
        CFI (cfiCond533) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_234
        CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond533) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond533) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond533) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond533) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond533) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond533) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond533) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond533) CFA_SP SP+0
        CFI (cfiCond533) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond534 Using cfiCommon0
        CFI (cfiCond534) NoFunction
        CFI (cfiCond534) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_235
        CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond534) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond534) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond534) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond534) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond534) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond534) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond534) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond534) CFA_SP SP+0
        CFI (cfiCond534) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiCond535 Using cfiCommon0
        CFI (cfiCond535) NoFunction
        CFI (cfiCond535) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond535) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond535) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond535) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond535) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond535) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond535) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond535) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond535) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond535) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond535) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond535) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond535) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond535) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond535) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond535) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond535) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond535) CFA_SP SP+0
        CFI (cfiCond535) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond536 Using cfiCommon0
        CFI (cfiCond536) NoFunction
        CFI (cfiCond536) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond536) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond536) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond536) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond536) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond536) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond536) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond536) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond536) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond536) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond536) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond536) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond536) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond536) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond536) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond536) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond536) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond536) CFA_SP SP+0
        CFI (cfiCond536) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker537 Using cfiCommon1
        CFI (cfiPicker537) NoFunction
        CFI (cfiPicker537) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond526
        CFI EndBlock cfiCond527
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiCond530
        CFI EndBlock cfiCond531
        CFI EndBlock cfiCond532
        CFI EndBlock cfiCond533
        CFI EndBlock cfiCond534
        CFI EndBlock cfiCond535
        CFI EndBlock cfiCond536
        CFI EndBlock cfiPicker537

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond538 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond539 Using cfiCommon0
        CFI (cfiCond539) NoFunction
        CFI (cfiCond539) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond539) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond539) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond539) CFA_SP SP+-5
        CFI (cfiCond539) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker540 Using cfiCommon1
        CFI (cfiPicker540) NoFunction
        CFI (cfiPicker540) Picker
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_203:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_193:
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond538
        CFI EndBlock cfiCond539
        CFI EndBlock cfiPicker540

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRemoveDeviceInd:
        CFI Block cfiBlock541 Using cfiCommon0
        CFI Function ZDSecMgrRemoveDeviceInd
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrRemoveDeviceInd_0:
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
        MOV     A,R2
        ADD     A,#0x4
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_77:
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_149:
        LCALL   ??ZDSecMgrDeviceRemove?relay
??ZDSecMgrRemoveDeviceInd_1:
        MOV     A,#0xa
        LJMP    ??Subroutine95_0 & 0xFFFF
        CFI EndBlock cfiBlock541

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond542 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond543 Using cfiCommon0
        CFI (cfiCond543) NoFunction
        CFI (cfiCond543) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond543) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond543) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond543) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond543) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond543) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond543) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond543) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond543) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond543) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond543) CFA_SP SP+0
        CFI (cfiCond543) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker544 Using cfiCommon1
        CFI (cfiPicker544) NoFunction
        CFI (cfiPicker544) Picker
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond542
        CFI EndBlock cfiCond543
        CFI EndBlock cfiPicker544

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRequestKeyInd:
        CFI Block cfiBlock545 Using cfiCommon0
        CFI Function ZDSecMgrRequestKeyInd
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        XRL     A,R4
        JZ      ??ZDSecMgrRequestKeyInd_0
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??ZDSecMgrRequestKeyInd_0
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL   ??ZDSecMgrAppKeyReq?relay
??ZDSecMgrRequestKeyInd_0:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock545

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSwitchKeyInd:
        CFI Block cfiBlock546 Using cfiCommon0
        CFI Function ZDSecMgrSwitchKeyInd
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   ??ZDApp_NVUpdate?relay
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock546

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticateInd:
        CFI Block cfiBlock547 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateInd
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_164:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_180:
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_91:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     R4,?V0 + 0
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateInd_0
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_167:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_124:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine112_0 & 0xFFFF
??CrossCallReturnLabel_223:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ??APSME_AuthenticateReq?relay
??ZDSecMgrAuthenticateInd_0:
        MOV     A,#0x14
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock547

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond548 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond549 Using cfiCommon0
        CFI (cfiCond549) NoFunction
        CFI (cfiCond549) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond549) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond549) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond549) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond549) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond549) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond549) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond549) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond549) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond549) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond549) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond549) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond549) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond549) CFA_SP SP+0
        CFI (cfiCond549) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker550 Using cfiCommon1
        CFI (cfiPicker550) NoFunction
        CFI (cfiPicker550) Picker
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond548
        CFI EndBlock cfiCond549
        CFI EndBlock cfiPicker550

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond551 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_224
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond552 Using cfiCommon0
        CFI (cfiCond552) NoFunction
        CFI (cfiCond552) Conditional ??CrossCallReturnLabel_225
        CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond552) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond552) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond552) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond552) CFA_SP SP+0
        CFI (cfiCond552) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker553 Using cfiCommon1
        CFI (cfiPicker553) NoFunction
        CFI (cfiPicker553) Picker
        MOV     DPL,R4
        MOV     DPH,R5
        CFI EndBlock cfiCond551
        CFI EndBlock cfiCond552
        CFI EndBlock cfiPicker553
        REQUIRE ??Subroutine112_0
        ; // Fall through to label ??Subroutine112_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine112_0:
        CFI Block cfiCond554 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_221
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond555 Using cfiCommon0
        CFI (cfiCond555) NoFunction
        CFI (cfiCond555) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond555) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond555) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond555) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond555) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond555) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond555) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond555) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond555) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond555) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond555) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond555) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond555) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond555) CFA_SP SP+0
        CFI (cfiCond555) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond556 Using cfiCommon0
        CFI (cfiCond556) NoFunction
        CFI (cfiCond556) Conditional ??CrossCallReturnLabel_223
        CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond556) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond556) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond556) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond556) CFA_SP SP+0
        CFI (cfiCond556) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond557 Using cfiCommon0
        CFI (cfiCond557) NoFunction
        CFI (cfiCond557) Conditional ??CrossCallReturnLabel_224
        CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond557) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond557) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond557) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond557) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond557) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond557) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond557) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond557) CFA_SP SP+0
        CFI (cfiCond557) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond558 Using cfiCommon0
        CFI (cfiCond558) NoFunction
        CFI (cfiCond558) Conditional ??CrossCallReturnLabel_225
        CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond558) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond558) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond558) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond558) CFA_SP SP+0
        CFI (cfiCond558) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker559 Using cfiCommon1
        CFI (cfiPicker559) NoFunction
        CFI (cfiPicker559) Picker
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond554
        CFI EndBlock cfiCond555
        CFI EndBlock cfiCond556
        CFI EndBlock cfiCond557
        CFI EndBlock cfiCond558
        CFI EndBlock cfiPicker559

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond560 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond561 Using cfiCommon0
        CFI (cfiCond561) NoFunction
        CFI (cfiCond561) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond561) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond561) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond561) CFA_SP SP+-5
        CFI (cfiCond561) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond562 Using cfiCommon0
        CFI (cfiCond562) NoFunction
        CFI (cfiCond562) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond562) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond562) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond562) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond562) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond562) CFA_SP SP+0
        CFI (cfiCond562) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond563 Using cfiCommon0
        CFI (cfiCond563) NoFunction
        CFI (cfiCond563) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond563) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond563) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond563) CFA_SP SP+-5
        CFI (cfiCond563) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond564) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond564) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond564) CFA_SP SP+-5
        CFI (cfiCond564) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker565 Using cfiCommon1
        CFI (cfiPicker565) NoFunction
        CFI (cfiPicker565) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_156:
        RET
        CFI EndBlock cfiCond560
        CFI EndBlock cfiCond561
        CFI EndBlock cfiCond562
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiPicker565

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond566 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond567 Using cfiCommon0
        CFI (cfiCond567) NoFunction
        CFI (cfiCond567) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_140
        CFI (cfiCond567) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond567) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond567) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond567) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond567) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond567) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond567) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond567) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond567) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond567) CFA_SP SP+0
        CFI (cfiCond567) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond568 Using cfiCommon0
        CFI (cfiCond568) NoFunction
        CFI (cfiCond568) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_141
        CFI (cfiCond568) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond568) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond568) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond568) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond568) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond568) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond568) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond568) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond568) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond568) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond568) CFA_SP SP+0
        CFI (cfiCond568) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond569 Using cfiCommon0
        CFI (cfiCond569) NoFunction
        CFI (cfiCond569) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_142
        CFI (cfiCond569) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond569) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond569) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond569) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond569) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond569) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond569) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond569) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond569) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond569) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond569) CFA_SP SP+0
        CFI (cfiCond569) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond570 Using cfiCommon0
        CFI (cfiCond570) NoFunction
        CFI (cfiCond570) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_143
        CFI (cfiCond570) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond570) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond570) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond570) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond570) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond570) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond570) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond570) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond570) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond570) CFA_SP SP+0
        CFI (cfiCond570) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond571 Using cfiCommon0
        CFI (cfiCond571) NoFunction
        CFI (cfiCond571) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_144
        CFI (cfiCond571) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond571) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond571) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond571) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond571) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond571) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond571) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond571) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond571) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond571) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond571) CFA_SP SP+0
        CFI (cfiCond571) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond572 Using cfiCommon0
        CFI (cfiCond572) NoFunction
        CFI (cfiCond572) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_145
        CFI (cfiCond572) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond572) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond572) CFA_SP SP+-5
        CFI (cfiCond572) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond573 Using cfiCommon0
        CFI (cfiCond573) NoFunction
        CFI (cfiCond573) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_146
        CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond573) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond573) CFA_SP SP+0
        CFI (cfiCond573) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond574 Using cfiCommon0
        CFI (cfiCond574) NoFunction
        CFI (cfiCond574) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_147
        CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond574) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond574) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond574) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond574) CFA_SP SP+0
        CFI (cfiCond574) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond575 Using cfiCommon0
        CFI (cfiCond575) NoFunction
        CFI (cfiCond575) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_148
        CFI (cfiCond575) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond575) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond575) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond575) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond575) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond575) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond575) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond575) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond575) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond575) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond575) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond575) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond575) CFA_SP SP+0
        CFI (cfiCond575) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond576 Using cfiCommon0
        CFI (cfiCond576) NoFunction
        CFI (cfiCond576) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_149
        CFI (cfiCond576) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond576) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond576) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond576) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond576) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond576) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond576) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond576) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond576) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond576) CFA_SP SP+0
        CFI (cfiCond576) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond577 Using cfiCommon0
        CFI (cfiCond577) NoFunction
        CFI (cfiCond577) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_0
        CFI (cfiCond577) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond577) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond577) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond577) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond577) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond577) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond577) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond577) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond577) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond577) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond577) CFA_SP SP+0
        CFI (cfiCond577) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond578 Using cfiCommon0
        CFI (cfiCond578) NoFunction
        CFI (cfiCond578) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_1
        CFI (cfiCond578) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond578) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond578) CFA_SP SP+-5
        CFI (cfiCond578) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond579 Using cfiCommon0
        CFI (cfiCond579) NoFunction
        CFI (cfiCond579) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_2
        CFI (cfiCond579) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond579) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond579) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond579) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond579) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond579) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond579) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond579) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond579) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond579) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond579) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond579) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond579) CFA_SP SP+0
        CFI (cfiCond579) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond580 Using cfiCommon0
        CFI (cfiCond580) NoFunction
        CFI (cfiCond580) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_3
        CFI (cfiCond580) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond580) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond580) CFA_SP SP+-5
        CFI (cfiCond580) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond581 Using cfiCommon0
        CFI (cfiCond581) NoFunction
        CFI (cfiCond581) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_4
        CFI (cfiCond581) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond581) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond581) CFA_SP SP+-5
        CFI (cfiCond581) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker582 Using cfiCommon1
        CFI (cfiPicker582) NoFunction
        CFI (cfiPicker582) Picker
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_152:
        LJMP    ?Subroutine73 & 0xFFFF
        CFI EndBlock cfiCond566
        CFI EndBlock cfiCond567
        CFI EndBlock cfiCond568
        CFI EndBlock cfiCond569
        CFI EndBlock cfiCond570
        CFI EndBlock cfiCond571
        CFI EndBlock cfiCond572
        CFI EndBlock cfiCond573
        CFI EndBlock cfiCond574
        CFI EndBlock cfiCond575
        CFI EndBlock cfiCond576
        CFI EndBlock cfiCond577
        CFI EndBlock cfiCond578
        CFI EndBlock cfiCond579
        CFI EndBlock cfiCond580
        CFI EndBlock cfiCond581
        CFI EndBlock cfiPicker582

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticateCfm:
        CFI Block cfiBlock583 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateCfm
        FUNCALL ZDSecMgrAuthenticateCfm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        ADD     A,#0xb
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_138:
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
??ZDSecMgrAuthenticateCfm_0:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock583

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRequestAppKey:
        CFI Block cfiBlock584 Using cfiCommon0
        CFI Function ZDSecMgrRequestAppKey
        FUNCALL ZDSecMgrRequestAppKey, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRequestAppKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrRequestAppKey_0
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ??APSME_RequestKeyReq?relay
        SJMP    ??ZDSecMgrRequestAppKey_1
??ZDSecMgrRequestAppKey_0:
        MOV     R1,#0x1
??ZDSecMgrRequestAppKey_1:
        MOV     A,#0xc
        LJMP    ??Subroutine110_0 & 0xFFFF
        CFI EndBlock cfiBlock584

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSetupPartner:
        CFI Block cfiBlock585 Using cfiCommon0
        CFI Function ZDSecMgrSetupPartner
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 2,#0x1
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_86:
        JNZ     ??ZDSecMgrSetupPartner_0
        MOV     ?V0 + 2,#0x0
        MOV     A,#-0x2
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrSetupPartner_1
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??ZDSecMgrSetupPartner_1:
        JNZ     ??ZDSecMgrSetupPartner_2
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDP_NwkAddrReq?relay
        SJMP    ??ZDSecMgrSetupPartner_3
??ZDSecMgrSetupPartner_2:
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrSetupPartner_0
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDP_IEEEAddrReq?relay
??ZDSecMgrSetupPartner_3:
        MOV     A,R1
        MOV     ?V0 + 2,A
??ZDSecMgrSetupPartner_0:
        MOV     R1,?V0 + 2
        MOV     A,#0xd
        LJMP    ?Subroutine75 & 0xFFFF
        CFI EndBlock cfiBlock585

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_MasterKeyGet:
        CFI Block cfiBlock586 Using cfiCommon0
        CFI Function APSME_MasterKeyGet
        FUNCALL APSME_MasterKeyGet, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_MasterKeyGet, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??APSME_MasterKeyGet_0
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_67:
        SJMP    ??APSME_MasterKeyGet_1
??APSME_MasterKeyGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??APSME_MasterKeyGet_1:
        LJMP    ?Subroutine74 & 0xFFFF
        CFI EndBlock cfiBlock586

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond587 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond588 Using cfiCommon0
        CFI (cfiCond588) NoFunction
        CFI (cfiCond588) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond588) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond588) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond588) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond588) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond588) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond588) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond588) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond588) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond588) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond588) CFA_SP SP+0
        CFI (cfiCond588) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker589 Using cfiCommon1
        CFI (cfiPicker589) NoFunction
        CFI (cfiPicker589) Picker
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_97:
        RET
        CFI EndBlock cfiCond587
        CFI EndBlock cfiCond588
        CFI EndBlock cfiPicker589

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond590 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond591 Using cfiCommon0
        CFI (cfiCond591) NoFunction
        CFI (cfiCond591) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_42
        CFI (cfiCond591) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond591) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond591) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond591) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond591) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond591) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond591) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond591) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond591) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond591) CFA_SP SP+0
        CFI (cfiCond591) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond592 Using cfiCommon0
        CFI (cfiCond592) NoFunction
        CFI (cfiCond592) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_43
        CFI (cfiCond592) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond592) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond592) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond592) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond592) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond592) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond592) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond592) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond592) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond592) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond592) CFA_SP SP+0
        CFI (cfiCond592) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond593 Using cfiCommon0
        CFI (cfiCond593) NoFunction
        CFI (cfiCond593) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_66
        CFI (cfiCond593) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond593) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond593) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond593) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond593) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond593) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond593) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond593) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond593) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond593) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond593) CFA_SP SP+0
        CFI (cfiCond593) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond594 Using cfiCommon0
        CFI (cfiCond594) NoFunction
        CFI (cfiCond594) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_67
        CFI (cfiCond594) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond594) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond594) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond594) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond594) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond594) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond594) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond594) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond594) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond594) CFA_SP SP+0
        CFI (cfiCond594) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker595 Using cfiCommon1
        CFI (cfiPicker595) NoFunction
        CFI (cfiPicker595) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDSecMgrMasterKeyLookup?relay
        RET
        CFI EndBlock cfiCond590
        CFI EndBlock cfiCond591
        CFI EndBlock cfiCond592
        CFI EndBlock cfiCond593
        CFI EndBlock cfiCond594
        CFI EndBlock cfiPicker595

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_LinkKeySet:
        CFI Block cfiBlock596 Using cfiCommon0
        CFI Function APSME_LinkKeySet
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        MOV     ?V0 + 3,A
        JNZ     ??APSME_LinkKeySet_0
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_244:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ?L_MOV_TO_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ?L_MOV_TO_X
??APSME_LinkKeySet_0:
        MOV     R1,?V0 + 3
        MOV     A,#0x2
        CFI EndBlock cfiBlock596
        REQUIRE ?Subroutine78
        ; // Fall through to label ?Subroutine78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine78:
        CFI Block cfiBlock597 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock597

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond598 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond599 Using cfiCommon0
        CFI (cfiCond599) NoFunction
        CFI (cfiCond599) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond599) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond599) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond599) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond599) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond599) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond599) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond599) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond599) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond599) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond599) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond599) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond599) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond599) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond599) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond599) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond599) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond599) CFA_SP SP+0
        CFI (cfiCond599) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker600 Using cfiCommon1
        CFI (cfiPicker600) NoFunction
        CFI (cfiPicker600) Picker
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond598
        CFI EndBlock cfiCond599
        CFI EndBlock cfiPicker600

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond601 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond602 Using cfiCommon0
        CFI (cfiCond602) NoFunction
        CFI (cfiCond602) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_57
        CFI (cfiCond602) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond602) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond602) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond602) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond602) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond602) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond602) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond602) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond602) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond602) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond602) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond602) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond602) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond602) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond602) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond602) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond602) CFA_SP SP+0
        CFI (cfiCond602) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond603 Using cfiCommon0
        CFI (cfiCond603) NoFunction
        CFI (cfiCond603) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_58
        CFI (cfiCond603) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond603) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond603) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond603) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond603) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond603) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond603) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond603) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond603) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond603) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond603) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond603) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond603) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond603) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond603) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond603) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond603) CFA_SP SP+0
        CFI (cfiCond603) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker604 Using cfiCommon1
        CFI (cfiPicker604) NoFunction
        CFI (cfiPicker604) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond601
        CFI EndBlock cfiCond602
        CFI EndBlock cfiCond603
        CFI EndBlock cfiPicker604

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticationSet:
        CFI Block cfiBlock605 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationSet
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrAuthenticationSet_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1c
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R6
        MOVX    @DPTR,A
??ZDSecMgrAuthenticationSet_0:
        LJMP    ??Subroutine94_0 & 0xFFFF
        CFI EndBlock cfiBlock605

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticationCheck:
        CFI Block cfiBlock606 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationCheck
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R1,#0x1
        LJMP    ?BRET
        CFI EndBlock cfiBlock606

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_LinkKeyDataGet:
        CFI Block cfiBlock607 Using cfiCommon0
        CFI Function APSME_LinkKeyDataGet
        FUNCALL APSME_LinkKeyDataGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??APSME_LinkKeyDataGet_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x12
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine113_0 & 0xFFFF
??CrossCallReturnLabel_227:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??APSME_LinkKeyDataGet_1
??APSME_LinkKeyDataGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??APSME_LinkKeyDataGet_1:
        MOVX    @DPTR,A
        LJMP    ??Subroutine94_0 & 0xFFFF
        CFI EndBlock cfiBlock607

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond608 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond609 Using cfiCommon0
        CFI (cfiCond609) NoFunction
        CFI (cfiCond609) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond609) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond609) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond609) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond609) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond609) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond609) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond609) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond609) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond609) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond609) CFA_SP SP+0
        CFI (cfiCond609) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker610 Using cfiCommon1
        CFI (cfiPicker610) NoFunction
        CFI (cfiPicker610) Picker
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond608
        CFI EndBlock cfiCond609
        CFI EndBlock cfiPicker610

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond611 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_228
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond612 Using cfiCommon0
        CFI (cfiCond612) NoFunction
        CFI (cfiCond612) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond612) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond612) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond612) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond612) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond612) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond612) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond612) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond612) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond612) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond612) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond612) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond612) CFA_SP SP+0
        CFI (cfiCond612) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker613 Using cfiCommon1
        CFI (cfiPicker613) NoFunction
        CFI (cfiPicker613) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond611
        CFI EndBlock cfiCond612
        CFI EndBlock cfiPicker613
        REQUIRE ??Subroutine113_0
        ; // Fall through to label ??Subroutine113_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine113_0:
        CFI Block cfiCond614 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_226
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond615 Using cfiCommon0
        CFI (cfiCond615) NoFunction
        CFI (cfiCond615) Conditional ??CrossCallReturnLabel_227
        CFI (cfiCond615) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond615) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond615) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond615) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond615) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond615) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond615) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond615) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond615) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond615) CFA_SP SP+0
        CFI (cfiCond615) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond616 Using cfiCommon0
        CFI (cfiCond616) NoFunction
        CFI (cfiCond616) Conditional ??CrossCallReturnLabel_228
        CFI (cfiCond616) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond616) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond616) CFA_SP SP+-5
        CFI (cfiCond616) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond617 Using cfiCommon0
        CFI (cfiCond617) NoFunction
        CFI (cfiCond617) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond617) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond617) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond617) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond617) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond617) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond617) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond617) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond617) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond617) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond617) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond617) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond617) CFA_SP SP+0
        CFI (cfiCond617) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker618 Using cfiCommon1
        CFI (cfiPicker618) NoFunction
        CFI (cfiPicker618) Picker
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_231:
        RET
        CFI EndBlock cfiCond614
        CFI EndBlock cfiCond615
        CFI EndBlock cfiCond616
        CFI EndBlock cfiCond617
        CFI EndBlock cfiPicker618

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond619 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond620 Using cfiCommon0
        CFI (cfiCond620) NoFunction
        CFI (cfiCond620) Conditional ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_51
        CFI (cfiCond620) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond620) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond620) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond620) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond620) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond620) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond620) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond620) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond620) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond620) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond620) CFA_SP SP+0
        CFI (cfiCond620) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond621 Using cfiCommon0
        CFI (cfiCond621) NoFunction
        CFI (cfiCond621) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_228
        CFI (cfiCond621) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond621) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond621) CFA_SP SP+-5
        CFI (cfiCond621) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond622 Using cfiCommon0
        CFI (cfiCond622) NoFunction
        CFI (cfiCond622) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_229
        CFI (cfiCond622) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond622) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond622) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond622) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond622) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond622) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond622) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond622) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond622) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond622) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond622) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond622) CFA_SP SP+0
        CFI (cfiCond622) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond623 Using cfiCommon0
        CFI (cfiCond623) NoFunction
        CFI (cfiCond623) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_226
        CFI (cfiCond623) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond623) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond623) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond623) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond623) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond623) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond623) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond623) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond623) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond623) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond623) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond623) CFA_SP SP+0
        CFI (cfiCond623) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond624 Using cfiCommon0
        CFI (cfiCond624) NoFunction
        CFI (cfiCond624) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_227
        CFI (cfiCond624) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond624) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond624) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond624) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond624) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond624) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond624) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond624) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond624) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond624) CFA_SP SP+0
        CFI (cfiCond624) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker625 Using cfiCommon1
        CFI (cfiPicker625) NoFunction
        CFI (cfiPicker625) Picker
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_233:
        RET
        CFI EndBlock cfiCond619
        CFI EndBlock cfiCond620
        CFI EndBlock cfiCond621
        CFI EndBlock cfiCond622
        CFI EndBlock cfiCond623
        CFI EndBlock cfiCond624
        CFI EndBlock cfiPicker625

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond626 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond627 Using cfiCommon0
        CFI (cfiCond627) NoFunction
        CFI (cfiCond627) Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_49
        CFI (cfiCond627) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond627) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond627) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond627) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond627) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond627) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond627) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond627) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond627) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond627) CFA_SP SP+0
        CFI (cfiCond627) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond628 Using cfiCommon0
        CFI (cfiCond628) NoFunction
        CFI (cfiCond628) Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_44
        CFI (cfiCond628) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond628) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond628) CFA_SP SP+-5
        CFI (cfiCond628) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond629 Using cfiCommon0
        CFI (cfiCond629) NoFunction
        CFI (cfiCond629) Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_45
        CFI (cfiCond629) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond629) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond629) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond629) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond629) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond629) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond629) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond629) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond629) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond629) CFA_SP SP+0
        CFI (cfiCond629) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond630 Using cfiCommon0
        CFI (cfiCond630) NoFunction
        CFI (cfiCond630) Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_39
        CFI (cfiCond630) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond630) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond630) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond630) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond630) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond630) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond630) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond630) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond630) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond630) CFA_SP SP+0
        CFI (cfiCond630) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond631 Using cfiCommon0
        CFI (cfiCond631) NoFunction
        CFI (cfiCond631) Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_40
        CFI (cfiCond631) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond631) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond631) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond631) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond631) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond631) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond631) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond631) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond631) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond631) CFA_SP SP+0
        CFI (cfiCond631) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond632 Using cfiCommon0
        CFI (cfiCond632) NoFunction
        CFI (cfiCond632) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_50
        CFI (cfiCond632) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond632) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond632) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond632) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond632) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond632) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond632) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond632) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond632) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond632) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond632) CFA_SP SP+0
        CFI (cfiCond632) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond633 Using cfiCommon0
        CFI (cfiCond633) NoFunction
        CFI (cfiCond633) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_51
        CFI (cfiCond633) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond633) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond633) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond633) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond633) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond633) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond633) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond633) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond633) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond633) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond633) CFA_SP SP+0
        CFI (cfiCond633) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond634 Using cfiCommon0
        CFI (cfiCond634) NoFunction
        CFI (cfiCond634) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_228
        CFI (cfiCond634) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond634) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond634) CFA_SP SP+-5
        CFI (cfiCond634) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond635 Using cfiCommon0
        CFI (cfiCond635) NoFunction
        CFI (cfiCond635) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_229
        CFI (cfiCond635) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond635) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond635) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond635) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond635) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond635) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond635) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond635) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond635) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond635) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond635) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond635) CFA_SP SP+0
        CFI (cfiCond635) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond636 Using cfiCommon0
        CFI (cfiCond636) NoFunction
        CFI (cfiCond636) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_226
        CFI (cfiCond636) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond636) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond636) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond636) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond636) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond636) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond636) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond636) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond636) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond636) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond636) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond636) CFA_SP SP+0
        CFI (cfiCond636) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond637 Using cfiCommon0
        CFI (cfiCond637) NoFunction
        CFI (cfiCond637) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_227
        CFI (cfiCond637) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond637) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond637) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond637) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond637) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond637) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond637) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond637) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond637) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond637) CFA_SP SP+0
        CFI (cfiCond637) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker638 Using cfiCommon1
        CFI (cfiPicker638) NoFunction
        CFI (cfiPicker638) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond626
        CFI EndBlock cfiCond627
        CFI EndBlock cfiCond628
        CFI EndBlock cfiCond629
        CFI EndBlock cfiCond630
        CFI EndBlock cfiCond631
        CFI EndBlock cfiCond632
        CFI EndBlock cfiCond633
        CFI EndBlock cfiCond634
        CFI EndBlock cfiCond635
        CFI EndBlock cfiCond636
        CFI EndBlock cfiCond637
        CFI EndBlock cfiPicker638

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_KeyFwdToChild:
        CFI Block cfiBlock639 Using cfiCommon0
        CFI Function APSME_KeyFwdToChild
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     R6,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??APSME_KeyFwdToChild_0
        INC     DPTR
        MOVX    A,@DPTR
??APSME_KeyFwdToChild_0:
        JNZ     ??APSME_KeyFwdToChild_1
        INC     R6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x5
        XRL     A,R4
        JNZ     ??APSME_KeyFwdToChild_1
??APSME_KeyFwdToChild_2:
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
??APSME_KeyFwdToChild_1:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock639

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond640 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond641 Using cfiCommon0
        CFI (cfiCond641) NoFunction
        CFI (cfiCond641) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond641) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond641) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond641) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond641) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond641) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond641) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond641) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond641) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond641) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond641) CFA_SP SP+0
        CFI (cfiCond641) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker642 Using cfiCommon1
        CFI (cfiPicker642) NoFunction
        CFI (cfiPicker642) Picker
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_240:
        LCALL   ??AssocGetWithExt?relay
        RET
        CFI EndBlock cfiCond640
        CFI EndBlock cfiCond641
        CFI EndBlock cfiPicker642

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAddLinkKey:
        CFI Block cfiBlock643 Using cfiCommon0
        CFI Function ZDSecMgrAddLinkKey
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JZ      ??ZDSecMgrAddLinkKey_0
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAddLinkKey_1
??ZDSecMgrAddLinkKey_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrAddLinkKey_2
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrAddLinkKey_2:
        JNZ     ??CrossCallReturnLabel_181
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrAddLinkKey_3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_154:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        LCALL   ??Subroutine106_0 & 0xFFFF
??CrossCallReturnLabel_181:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LinkKeySet?relay
        MOV     R1,#0x0
??ZDSecMgrAddLinkKey_1:
        LJMP    ?Subroutine77 & 0xFFFF
??ZDSecMgrAddLinkKey_3:
        MOV     R1,#0x11
        SJMP    ??ZDSecMgrAddLinkKey_1
        CFI EndBlock cfiBlock643

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond644 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond645 Using cfiCommon0
        CFI (cfiCond645) NoFunction
        CFI (cfiCond645) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond645) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond645) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond645) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond645) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond645) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond645) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond645) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond645) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond645) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond645) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond645) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond645) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond645) CFA_SP SP+0
        CFI (cfiCond645) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker646 Using cfiCommon1
        CFI (cfiPicker646) NoFunction
        CFI (cfiPicker646) Picker
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_238:
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        RET
        CFI EndBlock cfiCond644
        CFI EndBlock cfiCond645
        CFI EndBlock cfiPicker646

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond647 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_153
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond648 Using cfiCommon0
        CFI (cfiCond648) NoFunction
        CFI (cfiCond648) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond648) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond648) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond648) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond648) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond648) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond648) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond648) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond648) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond648) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond648) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond648) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond648) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond648) CFA_SP SP+0
        CFI (cfiCond648) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker649 Using cfiCommon1
        CFI (cfiPicker649) NoFunction
        CFI (cfiPicker649) Picker
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_191:
        LJMP    ?Subroutine71 & 0xFFFF
        CFI EndBlock cfiCond647
        CFI EndBlock cfiCond648
        CFI EndBlock cfiPicker649

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAPSRemove:
        CFI Block cfiBlock650 Using cfiCommon0
        CFI Function ZDSecMgrAPSRemove
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_165:
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??ZDSecMgrAPSRemove_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrAPSRemove_0:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,R4
        JNZ     ??ZDSecMgrAPSRemove_2
        MOV     A,R5
??ZDSecMgrAPSRemove_2:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrAPSRemove_3
        MOV     A,#-0x1
        XRL     A,R1
??ZDSecMgrAPSRemove_3:
        JNZ     ??ZDSecMgrAPSRemove_4
??ZDSecMgrAPSRemove_1:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAPSRemove_5
??ZDSecMgrAPSRemove_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ??ZDSecMgrDeviceRemove?relay
        MOV     R1,#0x0
??ZDSecMgrAPSRemove_5:
        LJMP    ?Subroutine84 & 0xFFFF
        CFI EndBlock cfiBlock650

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_TCLinkKeyInit:
        CFI Block cfiBlock651 Using cfiCommon0
        CFI Function APSME_TCLinkKeyInit
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyInit_0
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(defaultTCLinkKey & 0xff)
        MOV     ?V0 + 1,#((defaultTCLinkKey >> 8) & 0xff)
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_245:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        ; Setup parameters for call to function osal_nv_item_init
??APSME_TCLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x20
        LJMP    ?Subroutine75 & 0xFFFF
        CFI EndBlock cfiBlock651

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_TCLinkKeySync:
        CFI Block cfiBlock652 Using cfiCommon0
        CFI Function APSME_TCLinkKeySync
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_0
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??APSME_LookupExtAddr?relay
??APSME_TCLinkKeySync_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_1
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JNZ     $+5
        LJMP    ??APSME_TCLinkKeySync_2 & 0xFFFF
??APSME_TCLinkKeySync_1:
        MOV     A,R6
        ADD     A,#0x12
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GT_X
        JC      ??APSME_TCLinkKeySync_3
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R7
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_234:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R1,#0x0
        SJMP    ??APSME_TCLinkKeySync_4
??APSME_TCLinkKeySync_3:
        MOV     R1,#-0x5e
        SJMP    ??APSME_TCLinkKeySync_4
??APSME_TCLinkKeySync_2:
        MOV     R1,#-0x5f
??APSME_TCLinkKeySync_4:
        MOV     A,#0x20
        LJMP    ?Subroutine78 & 0xFFFF
        CFI EndBlock cfiBlock652

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond653 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_234
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond654 Using cfiCommon0
        CFI (cfiCond654) NoFunction
        CFI (cfiCond654) Conditional ??CrossCallReturnLabel_235
        CFI (cfiCond654) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond654) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond654) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond654) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond654) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond654) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond654) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond654) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond654) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond654) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond654) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond654) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond654) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond654) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond654) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond654) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond654) CFA_SP SP+0
        CFI (cfiCond654) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiPicker655 Using cfiCommon1
        CFI (cfiPicker655) NoFunction
        CFI (cfiPicker655) Picker
        LCALL   ??Subroutine111_0 & 0xFFFF
        CFI EndBlock cfiCond653
        CFI EndBlock cfiCond654
        CFI EndBlock cfiPicker655
??CrossCallReturnLabel_217:
        REQUIRE ??Subroutine114_0
        ; // Fall through to label ??Subroutine114_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine114_0:
        CFI Block cfiCond656 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_236
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond657 Using cfiCommon0
        CFI (cfiCond657) NoFunction
        CFI (cfiCond657) Conditional ??CrossCallReturnLabel_234
        CFI (cfiCond657) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond657) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond657) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond657) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond657) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond657) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond657) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond657) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond657) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond657) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond657) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond657) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond657) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond657) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond657) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond657) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond657) CFA_SP SP+0
        CFI (cfiCond657) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond658 Using cfiCommon0
        CFI (cfiCond658) NoFunction
        CFI (cfiCond658) Conditional ??CrossCallReturnLabel_235
        CFI (cfiCond658) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond658) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond658) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond658) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond658) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond658) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond658) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond658) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond658) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond658) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond658) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond658) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond658) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond658) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond658) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond658) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond658) CFA_SP SP+0
        CFI (cfiCond658) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiPicker659 Using cfiCommon1
        CFI (cfiPicker659) NoFunction
        CFI (cfiPicker659) Picker
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_242:
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_246:
        RET
        CFI EndBlock cfiCond656
        CFI EndBlock cfiCond657
        CFI EndBlock cfiCond658
        CFI EndBlock cfiPicker659

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond660 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_243
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond661 Using cfiCommon0
        CFI (cfiCond661) NoFunction
        CFI (cfiCond661) Conditional ??CrossCallReturnLabel_244
        CFI (cfiCond661) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond661) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond661) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond661) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond661) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond661) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond661) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond661) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond661) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond661) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond661) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond661) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond661) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond661) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond661) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond661) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond661) CFA_SP SP+0
        CFI (cfiCond661) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond662 Using cfiCommon0
        CFI (cfiCond662) NoFunction
        CFI (cfiCond662) Conditional ??CrossCallReturnLabel_245
        CFI (cfiCond662) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond662) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond662) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond662) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond662) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond662) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond662) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond662) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond662) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond662) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond662) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond662) CFA_SP SP+0
        CFI (cfiCond662) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond663 Using cfiCommon0
        CFI (cfiCond663) NoFunction
        CFI (cfiCond663) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_234
        CFI (cfiCond663) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond663) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond663) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond663) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond663) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond663) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond663) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond663) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond663) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond663) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond663) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond663) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond663) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond663) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond663) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond663) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond663) CFA_SP SP+0
        CFI (cfiCond663) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond664 Using cfiCommon0
        CFI (cfiCond664) NoFunction
        CFI (cfiCond664) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_235
        CFI (cfiCond664) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond664) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond664) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond664) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond664) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond664) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond664) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond664) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond664) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond664) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond664) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond664) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond664) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond664) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond664) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond664) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond664) CFA_SP SP+0
        CFI (cfiCond664) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiCond665 Using cfiCommon0
        CFI (cfiCond665) NoFunction
        CFI (cfiCond665) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_236
        CFI (cfiCond665) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond665) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond665) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond665) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond665) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond665) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond665) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond665) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond665) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond665) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond665) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond665) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond665) CFA_SP SP+0
        CFI (cfiCond665) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker666 Using cfiCommon1
        CFI (cfiPicker666) NoFunction
        CFI (cfiPicker666) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond660
        CFI EndBlock cfiCond661
        CFI EndBlock cfiCond662
        CFI EndBlock cfiCond663
        CFI EndBlock cfiCond664
        CFI EndBlock cfiCond665
        CFI EndBlock cfiPicker666

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3786 ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
APSME_TCLinkKeyLoad:
        CFI Block cfiBlock667 Using cfiCommon0
        CFI Function APSME_TCLinkKeyLoad
// 3787 {
        FUNCALL APSME_TCLinkKeyLoad, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 3788   uint8              i;
// 3789   APSME_TCLinkKey_t  tcLinkKey;
// 3790   AddrMgrEntry_t     addrEntry;  
// 3791   
// 3792   // Look up the ami of the srcAddr if available
// 3793   addrEntry.user    = ADDRMGR_USER_DEFAULT;
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 3794   addrEntry.nwkAddr = dstAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 3795 
// 3796   APSME_LookupExtAddr( dstAddr, si->extAddr );
??CrossCallReturnLabel_27:
        MOV     A,R4
        ADD     A,#0x6
        MOV     R6,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??APSME_LookupExtAddr?relay
// 3797 
// 3798   if ( AddrMgrExtAddrValid( si->extAddr ) == TRUE )
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??APSME_TCLinkKeyLoad_0 & 0xFFFF
// 3799   {
// 3800     // Look up the TC link key associated with the device
// 3801     // or the master TC link key (ami = 0xFFFF), whichever is found
// 3802     for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3803     {
// 3804       // Read entry i of the TC link key table from NV
// 3805       osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3806                    sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 65)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 3807       
// 3808       if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
// 3809          APSME_IsDefaultTCLK(tcLinkKey.extAddr))
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeyLoad_1
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JNZ     $+5
        LJMP    ??APSME_TCLinkKeyLoad_0 & 0xFFFF
// 3810       {
// 3811         // set the key to use
// 3812         osal_memcpy( si->key, tcLinkKey.key, SEC_KEY_LEN);  
??APSME_TCLinkKeyLoad_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_235:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 3813         
// 3814         // update link key related fields
// 3815         si->keyID   = SEC_KEYID_LINK;
        MOV     A,?V0 + 0
        ADD     A,#0xe
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_218:
        CLR     A
        MOVX    @DPTR,A
// 3816         si->frmCntr = tcLinkKey.txFrmCntr;
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ADD     A,#0x12
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_219:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 3817       
// 3818         // update outgoing frame counter
// 3819         tcLinkKey.txFrmCntr++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 3820         
// 3821         // Write the tc link key back to the NV
// 3822         osal_nv_write( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3823                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 65)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 3824         
// 3825         return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??APSME_TCLinkKeyLoad_2
// 3826       }
// 3827     }
// 3828   }
// 3829     
// 3830   // If no TC link key found, remove the device from the address manager
// 3831   if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
??APSME_TCLinkKeyLoad_0:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyLoad_3
// 3832   {
// 3833     AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryRelease?relay
// 3834   }
// 3835 
// 3836   return ZSecNoKey;
??APSME_TCLinkKeyLoad_3:
        MOV     R1,#-0x5f
??APSME_TCLinkKeyLoad_2:
        MOV     A,#0x2d
        LJMP    ?Subroutine78 & 0xFFFF
        CFI EndBlock cfiBlock667
// 3837 }
// 3838 
// 3839 /******************************************************************************
// 3840  * @fn          APSME_IsDefaultTCLK
// 3841  *
// 3842  * @brief       Return true or false based on the extended address.  If the 
// 3843  *              input ext address is all FFs, it means the trust center link
// 3844  *              assoiciated with the address is the default trust center link key
// 3845  *
// 3846  * @param       extAddr - [in] extended address
// 3847  *
// 3848  * @return      uint8 TRUE/FALSE
// 3849  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3850 uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
APSME_IsDefaultTCLK:
        CFI Block cfiBlock668 Using cfiCommon0
        CFI Function APSME_IsDefaultTCLK
// 3851 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3852   uint8 i = 0;
        MOV     R4,#0x0
// 3853   
// 3854   if( extAddr == NULL )
        MOV     A,R2
        JNZ     ??APSME_IsDefaultTCLK_0
        MOV     A,R3
??APSME_IsDefaultTCLK_0:
        JNZ     ??APSME_IsDefaultTCLK_1
// 3855   {
// 3856     return FALSE;
??APSME_IsDefaultTCLK_2:
        MOV     R1,#0x0
        SJMP    ??APSME_IsDefaultTCLK_3
// 3857   }
// 3858   
// 3859   while( i++ < Z_EXTADDR_LEN )
// 3860   {
// 3861     if( *extAddr++ != 0xFF )
??APSME_IsDefaultTCLK_4:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??APSME_IsDefaultTCLK_2
// 3862     {
// 3863       return FALSE;
// 3864     }
// 3865   }
??APSME_IsDefaultTCLK_1:
        MOV     A,R4
        INC     R4
        CLR     C
        SUBB    A,#0x8
        JC      ??APSME_IsDefaultTCLK_4
// 3866   
// 3867   return TRUE;
        MOV     R1,#0x1
??APSME_IsDefaultTCLK_3:
        LJMP    ??Subroutine100_0 & 0xFFFF
        CFI EndBlock cfiBlock668
// 3868 }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDSecMgrTCMasterKey>`:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 137, 103, 69, 35, 1, 239, 205, 171

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDSecMgrAppKeyType>`:
        DB 3

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1:
        DD 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupAMI?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupExt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryFree?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlRelease?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlRelease

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlTerm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlTerm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendMasterKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendMasterKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemoveByExtAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemoveByExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrMgrUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrMgrUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlHandler?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlSetup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlSetup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_SKA_TimerExpired?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_SKA_TimerExpired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateSKKE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateSKKE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateRM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateCM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateCM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinDirect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinFwd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAssocDeviceAuth?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthInitiate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthInitiate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoining?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoiningTimeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrNewDeviceEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCExtAddrCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCDataLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTransportKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrUpdateDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRemoveDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSwitchKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestAppKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestAppKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSetupPartner?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSetupPartner

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_MasterKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_MasterKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeySet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeyDataGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeyDataGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_KeyFwdToChild?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAPSRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAPSRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeySync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeySync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_IsDefaultTCLK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_IsDefaultTCLK

        END
// 3869 
// 3870 
// 3871 /******************************************************************************
// 3872 ******************************************************************************/
// 3873 
// 
// 7 314 bytes in segment BANKED_CODE
//   456 bytes in segment BANK_RELAYS
//    17 bytes in segment XDATA_I
//    17 bytes in segment XDATA_ID
//     8 bytes in segment XDATA_ROM_C
//    50 bytes in segment XDATA_Z
// 
// 7 787 bytes of CODE  memory
//     0 bytes of CONST memory (+ 8 bytes shared)
//    67 bytes of XDATA memory
//
//Errors: none
//Warnings: none
