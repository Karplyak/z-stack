///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               24/Sep/2010  10:07:09 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter\ /
//                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Sensor Network Application\ZIGBEE       /
//                          Endpoint & Device\Source\hal_sensor.c             /
//    Command line       =  -f "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRou /
//                          ter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Sensor Network Application\ZIGBEE   /
//                          Endpoint & Device\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func    /
//                          -DBLINK_LEDS) -f "D:\Z-Stack整理Code\南開科大_Z-S /
//                          tack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530- /
//                          2.3.0-1.4.0\Projects\zstack\Sensor Network        /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE             /
//                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF           /
//                          -DZCL_KEY_ESTABLISH -DZCL_LOAD_CONTROL            /
//                          -DZCL_SIMPLE_METERING -DZCL_PRICING)              /
//                          -DZCL_MESSAGE "D:\Z-Stack整理Code\南開科大_Z-Stac /
//                          k_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Sensor Network           /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c" -D NWK_AUTO_POLL -D   /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D           /
//                          End_Device -D xPA2591 -D M200 -lC                 /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\EndDeviceKB_M200\List\ /
//                          " -lA "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigbee /
//                          Router\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0 /
//                          \Projects\zstack\Sensor Network                   /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceKB_M200\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\EndDeviceKB_M200\Obj\" /
//                           -e --require_prototypes --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\" -I                   /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\SOURCE\" -I         /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\SOURCE\" -I      /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\ZMAIN\TI2530D /
//                          B\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigbe /
//                          eRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Sensor Network                  /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRou /
//                          ter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Sensor Network Application\ZIGBEE   /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\HAL\INCLUDE\" -I "D:\Z-Stack整理Code\南開科大 /
//                          _Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zig /
//                          beeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Sensor Network                /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530KB\" -I "D:\Z-Stack整理Code\南開科大_Z- /
//                          Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Sensor Network       /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack /
//                          _ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Z /
//                          igbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Sensor Network              /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigbe /
//                          eRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Sensor Network                  /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zig /
//                          beeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Sensor Network                /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigbe /
//                          eRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Sensor Network                  /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRou /
//                          ter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Sensor Network Application\ZIGBEE   /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\SERVICES\SADDR\" -I                           /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\SERVICES\SDATA\" -I                           /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\INCLUDE\" -I "D:\Z-Stack整理Code\南開科大 /
//                          _Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack /
//                          _ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\Z-Stack整理Code\南開科大_Z- /
//                          Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Sensor Network       /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR             /
//                          Systems\Embedded Workbench for MCS-51             /
//                          V7.51\8051\INC\" -I "C:\IAR Systems\Embedded      /
//                          Workbench for MCS-51 V7.51\8051\INC\CLIB\" -Ohz   /
//    List file          =  D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter\ /
//                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Sensor Network Application\ZIGBEE       /
//                          Endpoint & Device\CC2530DB\EndDeviceKB_M200\List\ /
//                          hal_sensor.s51                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_sensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??M200_SensorFunction?relay
        FUNCTION ??M200_SensorFunction?relay,0203H
        PUBLIC M200_SensorFunction
        FUNCTION M200_SensorFunction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC TransmitApp_Msg
        PUBWEAK __Constant_363be7a2
        PUBWEAK __Constant_3c23d70a
        PUBWEAK __Constant_3d25e354
        PUBWEAK __Constant_41200000
        PUBWEAK __Constant_c0800000
        PUBWEAK __Constant_c2200000
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
M200_Init           SYMBOL "M200_Init"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
M200_GetValue       SYMBOL "M200_GetValue"
HalLcdWriteChar     SYMBOL "HalLcdWriteChar"
halMcuWaitMs        SYMBOL "halMcuWaitMs"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??HalLcdWriteChar?relay SYMBOL "?relay", HalLcdWriteChar
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??M200_GetValue?relay SYMBOL "?relay", M200_GetValue
??M200_Init?relay   SYMBOL "?relay", M200_Init
??halMcuWaitMs?relay SYMBOL "?relay", halMcuWaitMs
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
M200_SensorFunction SYMBOL "M200_SensorFunction"
??M200_SensorFunction?relay SYMBOL "?relay", M200_SensorFunction

        EXTERN M200_Init
        FUNCTION M200_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M200_GetValue
        FUNCTION M200_GetValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteChar
        FUNCTION HalLcdWriteChar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halMcuWaitMs
        FUNCTION halMcuWaitMs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLcdWriteChar?relay
        FUNCTION ??HalLcdWriteChar?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??M200_GetValue?relay
        FUNCTION ??M200_GetValue?relay,00H
        EXTERN ??M200_Init?relay
        FUNCTION ??M200_Init?relay,00H
        EXTERN ??halMcuWaitMs?relay
        FUNCTION ??halMcuWaitMs?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN M200_Humi
        EXTERN M200_Temp
        EXTERN zclZigbeeDevice_DstAddr

// D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_sensor.c
//    3   Revised:        $Date: 2010-07-14 (Wed, 14 July 2010) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    HAL Sensor - the device receive the sensor data application.
//    7 
//    8   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   Should you have any questions regarding your right to use this Software,
//   11   contact Texas Instruments Incorporated at www.TI.com.
//   12 **************************************************************************************************/
//   13 /*********************************************************************
//   14  * INCLUDES
//   15  */  
//   16 #include "ZComDef.h"
//   17 #include "OSAL.h"
//   18 #include "AF.h"
//   19 #include "ZDApp.h"
//   20 #include "ZDObject.h"
//   21 #include "ZDProfile.h"
//   22 
//   23 #include "mac_radio_defs.h"
//   24 
//   25 /* ZCL */
//   26 #include "zcl.h"
//   27 #include "zcl_general.h"
//   28 #include "zcl_ha.h"
//   29 #include "zcl_zigbee device.h"
//   30 
//   31 /* HAL */
//   32 #include "onboard.h"
//   33 #include "hal_lcd.h"
//   34 #include "hal_led.h"
//   35 #include "hal_key.h"
//   36 #include "MT_UART.h"
//   37 #include "hal_uart.h"
//   38 #include "hal_timer.h"
//   39 #include "hal_keypad.h"
//   40 #include "hal_buzzer.h"
//   41   
//   42 /* HAL Sensor */
//   43 #include "hal_sensor.h"
//   44 #if defined(M140)
//   45   #include "M140.h"
//   46 #endif
//   47 #if defined(M170)
//   48   #include "M170.h"
//   49 #endif
//   50 #if defined(M200)
//   51   #include "M200.h"
//   52 #endif
//   53 
//   54 /*********************************************************************
//   55  * GLOBAL VARIABLES
//   56  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   57  byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   58  
//   59 /*********************************************************************
//   60  * LOCAL VARIABLES
//   61  */
//   62 /*********************************************************************
//   63  * LOCAL FUNCTIONS
//   64  */
//   65  void M140_SensorFunction(void); // M140 Module function
//   66  void M170_SensorFunction(void); // M170 Module function
//   67  void M200_SensorFunction(void); // M200 Module function
//   68  
//   69 #if defined(M140)
//   70 /*********************************************************************
//   71  * @fn          M140_SensorFunction
//   72  * @brief       The ZIGBEE Device to receive the M140 tempture data.
//   73  */
//   74  void M140_SensorFunction(void)
//   75  {
//   76   // M140 sensor variable
//   77   uint16 val;
//   78   uint8 tmp1, tmp2, tmp3, tmp4;
//   79   // ZCL transmit variable
//   80   uint8 len;
//   81   
//   82   // initilization the device
//   83   M140_Init();
//   84           
//   85 #if defined ( LCD_SUPPORTED )
//   86 //  HalLcd_HW_Clear();
//   87   HalLcdWriteString("* Z-Stack M140 *", HAL_LCD_LINE_1);
//   88   HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
//   89   HalLcdWriteChar(HAL_LCD_LINE_2, 14, 0xDF);
//   90 #endif
//   91       
//   92     val = M140_GetValue();  
//   93     if((0x2000 & val) == 0x2000) // check sign bit for negative value
//   94     {
//   95       val = ((val - 16384) * 10) / 32;
//   96     }
//   97     else
//   98     {
//   99       val = (val * 10) / 32;
//  100     }
//  101     tmp1 = (val / 100) + '0';
//  102     TransmitApp_Msg[0] = tmp1;
//  103     
//  104     tmp2 = ((val / 10) % 10) + '0';
//  105     TransmitApp_Msg[1] = tmp2;
//  106     
//  107     tmp3 = '.';
//  108     TransmitApp_Msg[2] = tmp3;
//  109     
//  110     tmp4 = (val % 10) + '0';
//  111     TransmitApp_Msg[3] = tmp4;
//  112     len = 4;
//  113     
//  114 #if defined ( LCD_SUPPORTED )
//  115         HalLcdWriteChar(HAL_LCD_LINE_2, 9, tmp1);
//  116         HalLcdWriteChar(HAL_LCD_LINE_2, 10, tmp2);
//  117         HalLcdWriteChar(HAL_LCD_LINE_2, 11, tmp3);
//  118         HalLcdWriteChar(HAL_LCD_LINE_2, 12, tmp4);
//  119 #endif 
//  120         
//  121     HalUARTWrite(MT_UART_DEFAULT_PORT, TransmitApp_Msg, len);
//  122     halMcuWaitMs(30);
//  123     
//  124     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  125                                   &zclZigbeeDevice_DstAddr,
//  126                                   ZCL_CLUSTER_ID_GEN_ON_OFF,
//  127                                   ZCL_CLUSTER_ID_GEN_BASIC,
//  128                                   TRUE,
//  129                                   ZCL_FRAME_CLIENT_SERVER_DIR,
//  130                                   false,
//  131                                   0,
//  132                                   0,
//  133                                   len,
//  134                                   TransmitApp_Msg );
//  135     
//  136     halMcuWaitMs(300);    
//  137  }
//  138 #endif
//  139  
//  140 #if defined(M170)
//  141 /*********************************************************************
//  142  * @fn          M170_SensorFunction
//  143  * @brief       The ZIGBEE Device to receive the M170 optical data.
//  144  */
//  145  void M170_SensorFunction(void)
//  146  {
//  147     // M170 sensor variable
//  148     uint16 val;
//  149     uint8 tmp1, tmp2, tmp3;
//  150     // ZCL transmit variable
//  151     uint8 len;
//  152       
//  153     // initilization the device
//  154     M170_Init();
//  155     
//  156 #if defined ( LCD_SUPPORTED )
//  157 //  HalLcd_HW_Clear();
//  158   HalLcdWriteString("* Z-Stack M170 *", HAL_LCD_LINE_1);
//  159   HalLcdWriteString(" Bright =     % ", HAL_LCD_LINE_2);
//  160 #endif
//  161   
//  162    val = M170_GetValue();
//  163    if (val > 2000)
//  164    {
//  165       val -= 2000;
//  166    }
//  167    else
//  168     {
//  169       val = 0;
//  170     }val /= 120;
//  171             
//  172    if (val > 100)
//  173    {
//  174       val = 100;
//  175    }
//  176    
//  177    tmp1 = (val / 100) + '0';
//  178    TransmitApp_Msg[0] = tmp1;
//  179    
//  180    tmp2 = ((val / 10) % 10) + '0';
//  181    TransmitApp_Msg[1] = tmp2;
//  182    
//  183    tmp3 = (val % 10) + '0';
//  184    TransmitApp_Msg[2] = tmp3;
//  185    
//  186 #if defined ( LCD_SUPPORTED )
//  187    HalLcdWriteChar(HAL_LCD_LINE_2, 10, tmp1);
//  188    HalLcdWriteChar(HAL_LCD_LINE_2, 11, tmp2);
//  189    HalLcdWriteChar(HAL_LCD_LINE_2, 12, tmp3);
//  190 #endif
//  191    halMcuWaitMs(300); 
//  192    
//  193    len = 3;
//  194    
//  195    uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  196                                  &zclZigbeeDevice_DstAddr,
//  197                                  ZCL_CLUSTER_ID_GEN_ON_OFF,
//  198                                  ZCL_CLUSTER_ID_GEN_BASIC,
//  199                                  TRUE,
//  200                                  ZCL_FRAME_CLIENT_SERVER_DIR,
//  201                                  false,
//  202                                  0,
//  203                                  0,
//  204                                  len,
//  205                                  TransmitApp_Msg );
//  206  }
//  207 #endif
//  208  
//  209 #if defined(M200)
//  210 /*********************************************************************
//  211  * @fn          M200_SensorFunction
//  212  * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
//  213  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214  void M200_SensorFunction(void)
M200_SensorFunction:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function M200_SensorFunction
//  215  {
        FUNCALL M200_SensorFunction, M200_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, M200_GetValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, halMcuWaitMs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M200_SensorFunction, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
//  216     // M200 module variable
//  217     uint16 temp, humi;
//  218     uint8 hum_1,hum_2,hum_3,hum_4;
//  219     uint8 temp_1,temp_2,temp_3,temp_4;
//  220     uint8 len;
//  221       
//  222     // initilization the device
//  223     M200_Init();
        ; Setup parameters for call to function M200_Init
        LCALL   ??M200_Init?relay
//  224     
//  225 #if defined ( LCD_SUPPORTED )
//  226 //    HalLcd_HW_Clear();
//  227     HalLcdWriteString("Humidity=      %", HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#(`?<Constant "Humidity=      %">` & 0xff)
        MOV     R3,#((`?<Constant "Humidity=      %">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  228     HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant " Temp. =       C">` & 0xff)
        MOV     R3,#((`?<Constant " Temp. =       C">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  229 #endif
//  230   
//  231     M200_GetValue();
        ; Setup parameters for call to function M200_GetValue
        LCALL   ??M200_GetValue?relay
//  232     temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
        MOV     DPTR,#M200_Temp
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_3c23d70a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_c2200000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  233     humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
        MOV     DPTR,#M200_Humi
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?UL_TO_FLT
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        MOV     ?V0 + 10,?V0 + 2
        MOV     ?V0 + 11,?V0 + 3
        MOV     DPTR,#__Constant_3d25e354
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_363be7a2
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     DPTR,#__Constant_c0800000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        LCALL   ?FLT_TO_L
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
//  234     if (humi > 999)
        CLR     C
        MOV     A,R6
        SUBB    A,#-0x18
        MOV     A,R7
        SUBB    A,#0x3
        JC      ??M200_SensorFunction_0
//  235     {
//  236       humi = 999;
        MOV     R6,#-0x19
        MOV     R7,#0x3
//  237     }
//  238     if (temp > 999)
??M200_SensorFunction_0:
        CLR     C
        MOV     A,R4
        SUBB    A,#-0x18
        MOV     A,R5
        SUBB    A,#0x3
        JC      ??M200_SensorFunction_1
//  239     {
//  240       temp = 999;
        MOV     R4,#-0x19
        MOV     R5,#0x3
//  241     }
//  242     hum_1 = (humi / 100) + '0';
??M200_SensorFunction_1:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     ?V0 + 0,A
//  243     TransmitApp_Msg[0] = hum_1;
        MOV     DPTR,#TransmitApp_Msg
        LCALL   ?Subroutine1 & 0xFFFF
//  244     
//  245     hum_2 = ((humi / 10) % 10) + '0';
??CrossCallReturnLabel_2:
        LCALL   ?US_DIV_MOD
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     ?V0 + 1,A
//  246     TransmitApp_Msg[1] = hum_2;
        MOV     DPTR,#(TransmitApp_Msg + 1)
        MOVX    @DPTR,A
//  247     
//  248     hum_3 = '.';
//  249     TransmitApp_Msg[2] = hum_3;
        MOV     A,#0x2e
        MOV     DPTR,#(TransmitApp_Msg + 2)
        LCALL   ?Subroutine1 & 0xFFFF
//  250     
//  251     hum_4 = (humi % 10) + '0';
??CrossCallReturnLabel_3:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     R6,A
//  252     TransmitApp_Msg[3] = hum_4;
        MOV     DPTR,#(TransmitApp_Msg + 3)
        MOVX    @DPTR,A
//  253     
//  254     TransmitApp_Msg[4] = ' ';
        MOV     A,#0x20
        MOV     DPTR,#(TransmitApp_Msg + 4)
        MOVX    @DPTR,A
//  255     
//  256     temp_1 = (temp / 100) + '0';
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     R7,A
//  257     TransmitApp_Msg[5] = temp_1;
        MOV     DPTR,#(TransmitApp_Msg + 5)
        LCALL   ?Subroutine2 & 0xFFFF
//  258     
//  259     temp_2 = ((temp / 10) % 10) + '0';
??CrossCallReturnLabel_4:
        LCALL   ?US_DIV_MOD
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     ?V0 + 2,A
//  260     TransmitApp_Msg[6] = temp_2;
        MOV     DPTR,#(TransmitApp_Msg + 6)
        MOVX    @DPTR,A
//  261     
//  262     temp_3 = '.';
//  263     TransmitApp_Msg[7] = temp_3;
        MOV     A,#0x2e
        MOV     DPTR,#(TransmitApp_Msg + 7)
        LCALL   ?Subroutine2 & 0xFFFF
//  264     
//  265     temp_4 = (temp % 10) + '0';
??CrossCallReturnLabel_5:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     ?V0 + 3,A
//  266     TransmitApp_Msg[8] = temp_4;
        MOV     DPTR,#(TransmitApp_Msg + 8)
        MOVX    @DPTR,A
//  267     
//  268     len = 9;
//  269     
//  270 #if defined ( LCD_SUPPORTED )
//  271     // Humi
//  272     HalLcdWriteChar(HAL_LCD_LINE_1, 10, hum_1);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,?V0 + 0
        MOV     R2,#0xa
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteChar?relay
//  273     HalLcdWriteChar(HAL_LCD_LINE_1, 11, hum_2);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,?V0 + 1
        MOV     R2,#0xb
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteChar?relay
//  274     HalLcdWriteChar(HAL_LCD_LINE_1, 12, hum_3);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,#0x2e
        MOV     R2,#0xc
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteChar?relay
//  275     HalLcdWriteChar(HAL_LCD_LINE_1, 13, hum_4);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     A,R6
        MOV     R3,A
        MOV     R2,#0xd
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteChar?relay
//  276     // Temp
//  277     HalLcdWriteChar(HAL_LCD_LINE_2, 9, temp_1);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     A,R7
        MOV     R3,A
        MOV     R2,#0x9
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  278     HalLcdWriteChar(HAL_LCD_LINE_2, 10, temp_2);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,?V0 + 2
        MOV     R2,#0xa
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  279     HalLcdWriteChar(HAL_LCD_LINE_2, 11, temp_3);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,#0x2e
        MOV     R2,#0xb
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  280     HalLcdWriteChar(HAL_LCD_LINE_2, 12, temp_4);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,?V0 + 3
        MOV     R2,#0xc
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  281 #endif
//  282     halMcuWaitMs(300);
        ; Setup parameters for call to function halMcuWaitMs
        MOV     R2,#0x2c
        MOV     R3,#0x1
        LCALL   ??halMcuWaitMs?relay
//  283   
//  284     uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  285                                  &zclZigbeeDevice_DstAddr,
//  286                                  ZCL_CLUSTER_ID_GEN_ON_OFF,
//  287                                  ZCL_CLUSTER_ID_GEN_BASIC,
//  288                                  TRUE,
//  289                                  ZCL_FRAME_CLIENT_SERVER_DIR,
//  290                                  false,
//  291                                  0,
//  292                                  0,
//  293                                  len,
//  294                                  TransmitApp_Msg );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
        MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#0x9
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
        MOV     R1,#0xc
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  295  }
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        SJMP    ?Subroutine3
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M200_SensorFunction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M200_SensorFunction

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "Humidity=      %">`:
        DB "Humidity=      %"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant " Temp. =       C">`:
        DB " Temp. =       C"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_3c23d70a:
        DD 3C23D70AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_c2200000:
        DD 0C2200000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_41200000:
        DD 41200000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_3d25e354:
        DD 3D25E354H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_363be7a2:
        DD 363BE7A2H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_c0800000:
        DD 0C0800000H

        END
//  296 #endif
// 
// 555 bytes in segment BANKED_CODE
//   6 bytes in segment BANK_RELAYS
//  58 bytes in segment XDATA_ROM_C
// 102 bytes in segment XDATA_Z
// 
// 561 bytes of CODE  memory
//  34 bytes of CONST memory (+ 24 bytes shared)
// 102 bytes of XDATA memory
//
//Errors: none
//Warnings: none
