///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               27/Aug/2010  11:44:40 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter\ /
//                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Compon /
//                          ents\hal\target\CC2530NB\hal_key.c                /
//    Command line       =  -f "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRou /
//                          ter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Sensor Network Application\ZIGBEE   /
//                          Endpoint & Device\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func    /
//                          -DBLINK_LEDS) -f "D:\Z-Stack整理Code\南開科大_Z-S /
//                          tack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530- /
//                          2.3.0-1.4.0\Projects\zstack\Sensor Network        /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE             /
//                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF           /
//                          -DZCL_KEY_ESTABLISH -DZCL_LOAD_CONTROL            /
//                          -DZCL_SIMPLE_METERING -DZCL_PRICING)              /
//                          -DZCL_MESSAGE D:\Z-Stack整理Code\南開科大_Z-Stack /
//                          _ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3. /
//                          0-1.4.0\Components\hal\target\CC2530NB\hal_key.c  /
//                          -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_APP_FUNC -D    /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_TASK -D          /
//                          xPOWER_SAVING -D xNV_RESTORE -D End_Device -D     /
//                          PA2591 -lC "D:\Z-Stack整理Code\南開科大_Z-Stack_Z /
//                          igbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Sensor Network              /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceNB_RS232\List\" -lA      /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\EndDeviceNB_RS232\List /
//                          \" --diag_suppress Pe001,Pa010 -o                 /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\EndDeviceNB_RS232\Obj\ /
//                          " -e --require_prototypes --debug --core=plain    /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\" -I                   /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\SOURCE\" -I         /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\SOURCE\" -I      /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\ZMAIN\TI2530D /
//                          B\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigbe /
//                          eRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Sensor Network                  /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRou /
//                          ter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Sensor Network Application\ZIGBEE   /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\HAL\INCLUDE\" -I "D:\Z-Stack整理Code\南開科大 /
//                          _Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zig /
//                          beeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Sensor Network                /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530NB\" -I "D:\Z-Stack整理Code\南開科大_Z- /
//                          Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Sensor Network       /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack /
//                          _ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Z /
//                          igbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Sensor Network              /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigbe /
//                          eRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Sensor Network                  /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zig /
//                          beeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Sensor Network                /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigb /
//                          eeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Sensor Network                 /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack_Zigbe /
//                          eRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Sensor Network                  /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRou /
//                          ter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Sensor Network Application\ZIGBEE   /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\SERVICES\SADDR\" -I                           /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\SERVICES\SDATA\" -I                           /
//                          "D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter /
//                          \XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Sensor Network Application\ZIGBEE      /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\INCLUDE\" -I "D:\Z-Stack整理Code\南開科大 /
//                          _Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\Z-Stack整理Code\南開科大_Z-Stack /
//                          _ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\Z-Stack整理Code\南開科大_Z- /
//                          Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530 /
//                          -2.3.0-1.4.0\Projects\zstack\Sensor Network       /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR             /
//                          Systems\Embedded Workbench MCS 51\8051\INC\" -I   /
//                          "C:\IAR Systems\Embedded Workbench MCS            /
//                          51\8051\INC\CLIB\" -Ohz                           /
//    List file          =  D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter\ /
//                          XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Sensor Network Application\ZIGBEE       /
//                          Endpoint & Device\CC2530DB\EndDeviceNB_RS232\List /
//                          \hal_key.s51                                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_key

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??HalKeyRead?relay
        EXTERN ??halProcessKeyInterrupt?relay
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalKeyConfig?relay
        FUNCTION ??HalKeyConfig?relay,0203H
        PUBLIC ??HalKeyEnterSleep?relay
        FUNCTION ??HalKeyEnterSleep?relay,0203H
        PUBLIC ??HalKeyExitSleep?relay
        FUNCTION ??HalKeyExitSleep?relay,0203H
        PUBLIC ??HalKeyInit?relay
        FUNCTION ??HalKeyInit?relay,0203H
        PUBLIC ??HalKeyPoll?relay
        FUNCTION ??HalKeyPoll?relay,0203H
        PUBLIC ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,0203H
        PUBWEAK `??halKeyPort0Isr??INTVEC 107`
        PUBWEAK `??halKeyPort2Isr??INTVEC 51`
        PUBLIC ??halProcessKeyInterrupt?relay
        FUNCTION ??halProcessKeyInterrupt?relay,0203H
        PUBLIC HalKeyConfig
        FUNCTION HalKeyConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyEnterSleep
        FUNCTION HalKeyEnterSleep,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyExitSleep
        FUNCTION HalKeyExitSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyInit
        FUNCTION HalKeyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyPoll
        FUNCTION HalKeyPoll,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyRead
        FUNCTION HalKeyRead,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Hal_KeyIntEnable
        PUBWEAK P0IFG
        PUBWEAK P2DIR
        PUBWEAK P2SEL
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P2
        PUBLIC halKeyPort0Isr
        FUNCTION halKeyPort0Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halKeyPort2Isr
        FUNCTION halKeyPort2Isr,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        PUBLIC halProcessKeyInterrupt
        FUNCTION halProcessKeyInterrupt,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
HalKeyConfig        SYMBOL "HalKeyConfig"
??HalKeyConfig?relay SYMBOL "?relay", HalKeyConfig
HalKeyEnterSleep    SYMBOL "HalKeyEnterSleep"
??HalKeyEnterSleep?relay SYMBOL "?relay", HalKeyEnterSleep
HalKeyExitSleep     SYMBOL "HalKeyExitSleep"
??HalKeyExitSleep?relay SYMBOL "?relay", HalKeyExitSleep
HalKeyInit          SYMBOL "HalKeyInit"
??HalKeyInit?relay  SYMBOL "?relay", HalKeyInit
HalKeyPoll          SYMBOL "HalKeyPoll"
??HalKeyPoll?relay  SYMBOL "?relay", HalKeyPoll
HalKeyRead          SYMBOL "HalKeyRead"
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead
halKeyPort0Isr      SYMBOL "halKeyPort0Isr"
`??halKeyPort0Isr??INTVEC 107` SYMBOL "??INTVEC 107", halKeyPort0Isr
halKeyPort2Isr      SYMBOL "halKeyPort2Isr"
`??halKeyPort2Isr??INTVEC 51` SYMBOL "??INTVEC 51", halKeyPort2Isr
halProcessKeyInterrupt SYMBOL "halProcessKeyInterrupt"
??halProcessKeyInterrupt?relay SYMBOL "?relay", halProcessKeyInterrupt

        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN Hal_TaskID

// D:\Z-Stack整理Code\南開科大_Z-Stack_ZigbeeRouter\XT200_PA_Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Components\hal\target\CC2530NB\hal_key.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_key.c
//    3   Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
//    4   Revision:       $Revision: 21351 $
//    5 
//    6   Description:    This file contains the interface to the HAL KEY Service.
//    7 
//    8   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   Should you have any questions regarding your right to use this Software,
//   11   contact Texas Instruments Incorporated at www.TI.com.
//   12 **************************************************************************************************/
//   13 /*********************************************************************
//   14  NOTE: If polling is used, the hal_driver task schedules the KeyRead()
//   15        to occur every 100ms.  This should be long enough to naturally
//   16        debounce the keys.  The KeyRead() function remembers the key
//   17        state of the previous poll and will only return a non-zero
//   18        value if the key state changes.
//   19 
//   20  NOTE: If interrupts are used, the KeyRead() function is scheduled
//   21        25ms after the interrupt occurs by the ISR.  This delay is used
//   22        for key debouncing.  The ISR disables any further Key interrupt
//   23        until KeyRead() is executed.  KeyRead() will re-enable Key
//   24        interrupts after executing.  Unlike polling, when interrupts
//   25        are enabled, the previous key state is not remembered.  This
//   26        means that KeyRead() will return the current state of the keys
//   27        (not a change in state of the keys).
//   28 
//   29  NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
//   30        the ISR.  Therefore, the joystick movements will only be detected
//   31        during a pushbutton interrupt caused by S1 or the center joystick
//   32        pushbutton.
//   33 
//   34  NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
//   35        high state to a low state.  This transition is typically clean.  The
//   36        duration of the low state is around 200ms.  When the signal returns
//   37        to the high state, there is a high likelihood of signal bounce, which
//   38        causes a unwanted interrupts.  Normally, we would set the interrupt
//   39        edge to falling edge to generate an interrupt when S1 is pushed, but
//   40        because of the signal bounce, it is better to set the edge to rising
//   41        edge to generate an interrupt when S1 is released.  The debounce logic
//   42        can then filter out the signal bounce.  The result is that we typically
//   43        get only 1 interrupt per button push.  This mechanism is not totally
//   44        foolproof because occasionally, signal bound occurs during the falling
//   45        edge as well.  A similar mechanism is used to handle the joystick
//   46        pushbutton on the DB.  For the EB, we do not have independent control
//   47        of the interrupt edge for the S1 and center joystick pushbutton.  As
//   48        a result, only one or the other pushbuttons work reasonably well with
//   49        interrupts.  The default is the make the S1 switch on the EB work more
//   50        reliably.
//   51 
//   52 *********************************************************************/
//   53 
//   54 /**************************************************************************************************
//   55  *                                            INCLUDES
//   56  **************************************************************************************************/
//   57 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DS 1
//   58 #include "hal_defs.h"
//   59 #include "hal_types.h"
//   60 #include "hal_board.h"
//   61 #include "hal_drivers.h"
//   62 #include "hal_adc.h"
//   63 #include "hal_key.h"
//   64 #include "osal.h"
//   65 #include "hal_lcd.h"
//   66 
//   67 #include "mac_radio_defs.h"
//   68 #include "mac_low_level.h"
//   69 #include "hal_keypad.h"
//   70 
//   71 //#if (defined HAL_KEY) && (HAL_KEY == TRUE)
//   72 /**************************************************************************************************
//   73  *                                              MACROS
//   74  **************************************************************************************************/
//   75 
//   76 /**************************************************************************************************
//   77  *                                            CONSTANTS
//   78  **************************************************************************************************/
//   79 #define HAL_KEY_RISING_EDGE   0
//   80 #define HAL_KEY_FALLING_EDGE  1
//   81 
//   82 #define HAL_KEY_DEBOUNCE_VALUE  25
//   83 #define HAL_KEY_POLLING_VALUE   100
//   84 
//   85 /* CPU port interrupt */
//   86 #define HAL_KEY_CPU_PORT_0_IF P0IF
//   87 #define HAL_KEY_CPU_PORT_2_IF P2IF
//   88 
//   89 /* SW_6 is at P0.1 */
//   90 #define HAL_KEY_SW_6_PORT   P0
//   91 #define HAL_KEY_SW_6_BIT    BV(1)
//   92 #define HAL_KEY_SW_6_SEL    P0SEL
//   93 #define HAL_KEY_SW_6_DIR    P0DIR
//   94 
//   95 /* edge interrupt */
//   96 #define HAL_KEY_SW_6_EDGEBIT  BV(0)
//   97 #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
//   98 
//   99 /* SW_6 interrupts */
//  100 #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
//  101 #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  102 #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
//  103 #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
//  104 #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
//  105 
//  106 /**************************************************************************************************
//  107  *                                            TYPEDEFS
//  108  **************************************************************************************************/
//  109 /**************************************************************************************************
//  110  *                                        GLOBAL VARIABLES
//  111  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  112 static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
halKeySavedKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  113 static halKeyCBack_t pHalKeyProcessFunction;
pHalKeyProcessFunction:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  114 static uint8 HalKeyConfigured;
HalKeyConfigured:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  115 bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
Hal_KeyIntEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  116 
//  117 /**************************************************************************************************
//  118  *                                        FUNCTIONS - Local
//  119  **************************************************************************************************/
//  120 void halProcessKeyInterrupt(void);
//  121 
//  122 /**************************************************************************************************
//  123  *                                        FUNCTIONS - API
//  124  **************************************************************************************************/
//  125 
//  126 /**************************************************************************************************
//  127  * @fn      HalKeyInit
//  128  * @brief   Initilize Key Service
//  129  * @param   none
//  130  * @return  None
//  131  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  132 void HalKeyInit( void )
HalKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalKeyInit
//  133 { 
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  134 #if (HAL_KEY == TRUE)
//  135   /* Initialize previous key to 0 */
//  136   halKeySavedKeys = 0;
        CLR     A
        MOV     DPTR,#halKeySavedKeys
        MOVX    @DPTR,A
//  137   
//  138   /* Initialize callback function */
//  139   pHalKeyProcessFunction  = NULL;
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  140 
//  141   /* Start with key is not configured */
//  142   HalKeyConfigured = FALSE;
        MOV     DPTR,#HalKeyConfigured
        MOVX    @DPTR,A
//  143 #endif /* HAL_KEY */
//  144 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  145 
//  146 /*******************************************************************************
//  147  * @fn      HalKeyConfig
//  148  * @brief   Configure the Key serivce
//  149  * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
//  150  *          cback - pointer to the CallBack function
//  151  * @return  None
//  152  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  153 void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
HalKeyConfig:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function HalKeyConfig
//  154 {
        FUNCALL HalKeyConfig, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalKeyConfig, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  155 #if (HAL_KEY == TRUE) 
//  156   /* Enable/Disable Interrupt or */
//  157   Hal_KeyIntEnable = interruptEnable;
        MOV     A,R1
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    @DPTR,A
//  158 
//  159   /* Register the callback fucntion */
//  160   pHalKeyProcessFunction = cback;
        MOV     DPTR,#pHalKeyProcessFunction
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  161 
//  162   /* Determine if interrupt is enable or not */
//  163   if (Hal_KeyIntEnable)
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    A,@DPTR
        JZ      ??HalKeyConfig_0
//  164   {
//  165     /* Do this only after the hal_key is configured - to work with sleep stuff */
//  166     if (HalKeyConfigured == TRUE)
        MOV     DPTR,#HalKeyConfigured
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??HalKeyConfig_1
//  167     {
//  168       osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??HalKeyConfig_1
//  169     }
//  170   }
//  171   else    /* Interrupts NOT enabled */
//  172   {
//  173     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
??HalKeyConfig_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  174   }
//  175   /* Key now is configured */
//  176   HalKeyConfigured = TRUE;
??HalKeyConfig_1:
        MOV     A,#0x1
        MOV     DPTR,#HalKeyConfigured
        MOVX    @DPTR,A
//  177   
//  178   //Switch Buttons
//  179     SWITCH1_INPUT();
        ANL     0xf5,#0xf7
        ANL     0xff,#0xf7
//  180     SWITCH2_INPUT();
        ANL     0xf5,#0xef
        ANL     0xff,#0xef
//  181 
//  182 #endif /* HAL_KEY */
//  183 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE P2SEL
        REQUIRE P2DIR
//  184 
//  185 
//  186 /*******************************************************************************
//  187  * @fn      HalKeyRead
//  188  * @brief   Read the current value of a key
//  189  * @param   None
//  190  * @return  keys - current keys status
//  191  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 uint8 HalKeyRead ( void )
HalKeyRead:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalKeyRead
//  193 {
        ; Saved register size: 0
        ; Auto size: 0
//  194   uint8 keys=0;
        MOV     R1,#0x0
//  195     
//  196   if (HAL_SW_1_PUSH())
        MOV     C,0xa0.3
        JC      ??HalKeyRead_0
//  197   {
//  198     HAL_debounce(!HAL_SW_1_PUSH());
        MOV     R2,#0x0
??HalKeyRead_1:
        MOV     C,0xa0.3
        JC      ??HalKeyRead_2
        MOV     R2,#0x0
??HalKeyRead_2:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x32
        JC      ??HalKeyRead_1
//  199     keys |= HAL_KEY_SW1;
        INC     R1
//  200   }
//  201   if (HAL_SW_2_PUSH())
??HalKeyRead_0:
        MOV     C,0xa0.4
        JC      ??HalKeyRead_3
//  202   {
//  203     HAL_debounce(!HAL_SW_2_PUSH());
        MOV     R2,#0x0
??HalKeyRead_4:
        MOV     C,0xa0.4
        JC      ??HalKeyRead_5
        MOV     R2,#0x0
??HalKeyRead_5:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x32
        JC      ??HalKeyRead_4
//  204     keys |= HAL_KEY_SW2;
        MOV     A,R1
        SETB    0xE0 /* A   */.3
        MOV     R1,A
//  205   }
//  206   return keys;
??HalKeyRead_3:
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE _A_P2
//  207 }
//  208 
//  209 
//  210 /*******************************************************************************
//  211  * @fn      HalKeyPoll
//  212  * @brief   Called by hal_driver to poll the keys
//  213  * @param   None
//  214  * @return  None
//  215  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  216 void HalKeyPoll (void)
HalKeyPoll:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function HalKeyPoll
//  217 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  218   uint8 keys = 0;
        MOV     R1,#0x0
//  219   
//  220   if (HAL_SW_1_PUSH())
        MOV     C,0xa0.3
        JC      ??HalKeyPoll_0
//  221   {
//  222     HAL_debounce(!HAL_SW_1_PUSH());
        MOV     R2,#0x0
??HalKeyPoll_1:
        MOV     C,0xa0.3
        JC      ??HalKeyPoll_2
        MOV     R2,#0x0
??HalKeyPoll_2:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x32
        JC      ??HalKeyPoll_1
//  223     keys |= HAL_KEY_SW1;
        INC     R1
//  224   }
//  225       
//  226   if (HAL_SW_2_PUSH())
??HalKeyPoll_0:
        MOV     C,0xa0.4
        JC      ??HalKeyPoll_3
//  227   {
//  228     HAL_debounce(!HAL_SW_2_PUSH());
        MOV     R2,#0x0
??HalKeyPoll_4:
        MOV     C,0xa0.4
        JC      ??HalKeyPoll_5
        MOV     R2,#0x0
??HalKeyPoll_5:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x32
        JC      ??HalKeyPoll_4
//  229     keys |= HAL_KEY_SW2;
        MOV     A,R1
        SETB    0xE0 /* A   */.3
        MOV     R1,A
//  230   }
//  231   
//  232   /* If interrupts are not enabled, previous key status and current key status
//  233    * are compared to find out if a key has changed status.
//  234    */
//  235   if (!Hal_KeyIntEnable)
??HalKeyPoll_3:
        MOV     DPTR,#Hal_KeyIntEnable
        MOVX    A,@DPTR
        JNZ     ??HalKeyPoll_6
//  236   {
//  237     if (keys == halKeySavedKeys)
        MOV     DPTR,#halKeySavedKeys
        MOVX    A,@DPTR
        XRL     A,R1
        JZ      ??HalKeyPoll_7
//  238     {
//  239       /* Exit - since no keys have changed */
//  240       return;
//  241     }
//  242     /* Store the current keys for comparation next time */
//  243     halKeySavedKeys = keys;
        MOV     A,R1
        MOVX    @DPTR,A
//  244   }
//  245   else
//  246   {
//  247     /* Key interrupt handled here */
//  248   }
//  249 
//  250   /* Invoke Callback if new keys were depressed */
//  251   if (keys && (pHalKeyProcessFunction))
??HalKeyPoll_6:
        MOV     A,R1
        JZ      ??HalKeyPoll_7
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    A,@DPTR
        JNZ     ??HalKeyPoll_8
        INC     DPTR
        MOVX    A,@DPTR
??HalKeyPoll_8:
        JZ      ??HalKeyPoll_7
//  252   {
//  253     (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
        ; Setup parameters for indirect call
        MOV     R2,#0x0
        MOV     DPTR,#pHalKeyProcessFunction
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        CFI EndBlock cfiBlock3
//  254   }
??HalKeyPoll_7:
        REQUIRE ?Subroutine0
        REQUIRE _A_P2
        ; // Fall through to label ?Subroutine0
//  255 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//  256 
//  257 /**************************************************************************************************
//  258  * @fn      halProcessKeyInterrupt
//  259  * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
//  260  *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
//  261  * @param
//  262  * @return
//  263  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  264 void halProcessKeyInterrupt (void)
halProcessKeyInterrupt:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function halProcessKeyInterrupt
//  265 {
        FUNCALL halProcessKeyInterrupt, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  266 #if (HAL_KEY == TRUE)
//  267   
//  268   bool valid=FALSE;
//  269 
//  270   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.1
        JNC     ??halProcessKeyInterrupt_0
//  271   {
//  272     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
        MOV     0x89,#-0x3
//  273     valid = TRUE;
//  274   }
//  275 
//  276   if (valid)
//  277   {
//  278     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x19
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  279   }
//  280 #endif /* HAL_KEY */
//  281 }
??halProcessKeyInterrupt_0:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock5
        REQUIRE P0IFG
//  282 
//  283 /**************************************************************************************************
//  284  * @fn      HalKeyEnterSleep
//  285  * @brief  - Get called to enter sleep mode
//  286  * @param
//  287  * @return
//  288  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  289 void HalKeyEnterSleep ( void )
HalKeyEnterSleep:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function HalKeyEnterSleep
//  290 {
        ; Saved register size: 0
        ; Auto size: 0
//  291 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  292 
//  293 /**************************************************************************************************
//  294  * @fn      HalKeyExitSleep
//  295  * @brief   - Get called when sleep is over
//  296  * @param
//  297  * @return  - return saved keys
//  298  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  299 uint8 HalKeyExitSleep ( void )
HalKeyExitSleep:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function HalKeyExitSleep
//  300 {
        FUNCALL HalKeyExitSleep, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  301   /* Wake up and read keys */
//  302   return ( HalKeyRead () );
        ; Setup parameters for call to function HalKeyRead
        LCALL   ??HalKeyRead?relay
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock7
//  303 }
//  304 
//  305 /***************************************************************************************************
//  306  *                                    INTERRUPT SERVICE ROUTINE
//  307  ***************************************************************************************************/
//  308 
//  309 /**************************************************************************************************
//  310  * @fn      halKeyPort0Isr
//  311  * @brief   Port0 ISR
//  312  * @param
//  313  * @return
//  314  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  315 HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
halKeyPort0Isr:
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function halKeyPort0Isr
//  316 {
        FUNCALL halKeyPort0Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  317   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.1
        JNC     ??halKeyPort0Isr_0
//  318   {
//  319     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL   ??halProcessKeyInterrupt?relay
//  320   }
//  321 
//  322   /*
//  323     Clear the CPU interrupt flag for Port_0
//  324     PxIFG has to be cleared before PxIF
//  325   */
//  326   HAL_KEY_SW_6_PXIFG = 0;
??halKeyPort0Isr_0:
        MOV     0x89,#0x0
//  327   HAL_KEY_CPU_PORT_0_IF = 0;
        CLR     0xc0.5
//  328 }
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock8
        REQUIRE P0IFG
        REQUIRE _A_IRCON
//  329 
//  330 
//  331 /**************************************************************************************************
//  332  * @fn      halKeyPort2Isr
//  333  * @brief   Port2 ISR
//  334  * @param
//  335  * @return
//  336  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  337 HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
halKeyPort2Isr:
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function halKeyPort2Isr
//  338 {
        ; Saved register size: 1
        ; Auto size: 0
//  339 //  if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
//  340 //  {
//  341 //    halProcessKeyInterrupt();
//  342 //  }
//  343 
//  344   /*
//  345     Clear the CPU interrupt flag for Port_2
//  346     PxIFG has to be cleared before PxIF
//  347     Notes: P2_1 and P2_2 are debug lines.
//  348   */
//  349   //HAL_KEY_JOY_MOVE_PXIFG = 0;
//  350   HAL_KEY_CPU_PORT_2_IF = 0;
        CLR     0xe8.0
//  351 }
        RETI
        CFI EndBlock cfiBlock9
        REQUIRE _A_IRCON2

        COMMON INTVEC:CODE:ROOT(0)
        ORG 51
`??halKeyPort2Isr??INTVEC 51`:
        LJMP       (halKeyPort2Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??halKeyPort0Isr??INTVEC 107`:
        LJMP       (halKeyPort0Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyPoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyPoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessKeyInterrupt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessKeyInterrupt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyEnterSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyEnterSleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyExitSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyExitSleep

        END
//  352 
//  353 //#else
//  354 //
//  355 //
//  356 //void HalKeyInit(void){}
//  357 //void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
//  358 //uint8 HalKeyRead(void){ return 0;}
//  359 //void HalKeyPoll(void){}
//  360 
//  361 //#endif /* HAL_KEY */
//  362 
//  363 
//  364 
//  365 
//  366 
//  367 /**************************************************************************************************
//  368 **************************************************************************************************/
//  369 
//  370 
//  371 
// 
// 295 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   6 bytes in segment INTVEC
//  29 bytes in segment NEAR_CODE
//   6 bytes in segment SFR_AN
//   5 bytes in segment XDATA_Z
// 
// 366 bytes of CODE  memory (+ 6 bytes shared)
//   0 bytes of DATA  memory (+ 6 bytes shared)
//   5 bytes of XDATA memory
//
//Errors: none
//Warnings: none
