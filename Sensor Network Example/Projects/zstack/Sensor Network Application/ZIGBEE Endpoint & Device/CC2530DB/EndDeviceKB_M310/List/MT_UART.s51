///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               22/Jul/2010  11:13:21 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE           /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Components\mt\M /
//                          T_UART.c                                          /
//    Command line       =  -f "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE       /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\公司產品\XT-200\ZIGBEE       /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wConfig.cfg" (-DSECURE=0                      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Components\mt\M /
//                          T_UART.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D         /
//                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D          /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -D M310 -lC                         /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\List\" -lA       /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\" -I "D:\公司產品\XT-200\ZIGBEE   /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\SOURCE\" -I         /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE       /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\公司產品\XT-200\ZIGBEE              /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\HAL\MODULE\" -I "D:\公司產品\XT-200\ZIGBEE    /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\HAL\TARGET\CC2530EB\" -I                      /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\公司產品\XT-200\ZIGBEE           /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\OSAL\INCLUDE\" -I "D:\公司產品\XT-200\ZIGBEE  /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\AF\" -I "D:\公司產品\XT-200\ZIGBEE      /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\NWK\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\SEC\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\SAPI\" -I "D:\公司產品\XT-200\ZIGBEE    /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\SYS\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\ZCL\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\ZDO\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\ZMAC\F8W\" -I "D:\公司產品\XT-200\ZIGBEE      /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\ZMAC\" -I "D:\公司產品\XT-200\ZIGBEE          /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\SERVICES\SADDR\" -I                           /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\公司產品\XT-200\ZIGBEE           /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\INCLUDE\" -I "D:\公司產品\XT-200\ZIGBEE   /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\HIGH_LEVEL\" -I                           /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\公司產品\XT-200\ZIGBEE      /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR  /
//                          Systems\Embedded Workbench 5.3\8051\INC\" -I      /
//                          "C:\IAR Systems\Embedded Workbench                /
//                          5.3\8051\INC\CLIB\" -Ohz                          /
//    List file          =  D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE           /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\List\MT_UART.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_UART

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??MT_UartCalcFCS?relay
        EXTERN ??MT_UartProcessZToolData?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MT_UartCalcFCS?relay
        FUNCTION ??MT_UartCalcFCS?relay,0203H
        PUBLIC ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,0203H
        PUBLIC ??MT_UartProcessZToolData?relay
        FUNCTION ??MT_UartProcessZToolData?relay,0203H
        PUBLIC ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,0203H
        PUBLIC App_TaskID
        PUBLIC CMD_Token
        PUBLIC FSC_Token
        PUBLIC LEN_Token
        PUBLIC MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_UartInit
        FUNCTION MT_UartInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC MT_UartProcessZToolData
        FUNCTION MT_UartProcessZToolData,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC pMsg
        PUBLIC state
        PUBLIC tempDataLen
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTRead         SYMBOL "HalUARTRead"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
??MT_UartCalcFCS?relay SYMBOL "?relay", MT_UartCalcFCS
MT_UartInit         SYMBOL "MT_UartInit"
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
MT_UartProcessZToolData SYMBOL "MT_UartProcessZToolData"
??MT_UartProcessZToolData?relay SYMBOL "?relay", MT_UartProcessZToolData
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID

        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H

// D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_UART.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_UART.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:  This module handles anything dealing with the serial port.
//    7 
//    8   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   Should you have any questions regarding your right to use this Software,
//   11   contact Texas Instruments Incorporated at www.TI.com.
//   12 
//   13 ***************************************************************************************************/
//   14 
//   15 /***************************************************************************************************
//   16  * INCLUDES
//   17  ***************************************************************************************************/
//   18 #include "ZComDef.h"
//   19 
//   20 /* HAL */
//   21 #include "hal_uart.h"
//   22 
//   23 /* MT */
//   24 #include "MT.h"
//   25 #include "MT_UART.h"
//   26 
//   27 /* OSAL */
//   28 #include "OSAL.h"
//   29 #include "OSAL_Memory.h"
//   30 
//   31 /* APP */
//   32 #if defined(Coor_receiver)
//   33   #include "zcl_zigbee receiver.h"
//   34 #endif
//   35 
//   36 /***************************************************************************************************
//   37  * MACROS
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * CONSTANTS
//   42  ***************************************************************************************************/
//   43 /* State values for ZTool protocal */
//   44 #define SOP_STATE      0x00
//   45 #define CMD_STATE1     0x01
//   46 #define CMD_STATE2     0x02
//   47 #define LEN_STATE      0x03
//   48 #define DATA_STATE     0x04
//   49 #define FCS_STATE      0x05
//   50 
//   51 /***************************************************************************************************
//   52  *                                         GLOBAL VARIABLES
//   53  ***************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   54 byte App_TaskID; // Used to indentify the application ID for osal task
App_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   55 
//   56 /* ZTool protocal parameters */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   57 uint8 state;
state:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   58 uint8  CMD_Token[2];
CMD_Token:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   59 uint8  LEN_Token;
LEN_Token:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   60 uint8  FSC_Token;
FSC_Token:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   61 mtOSALSerialData_t  *pMsg;
pMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   62 uint8  tempDataLen;
tempDataLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   63 
//   64 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//   65 uint16  MT_UartMaxZAppBufLen;
//   66 bool    MT_UartZAppRxStatus;
//   67 #endif
//   68 
//   69 
//   70 /***************************************************************************************************
//   71  *                                          LOCAL FUNCTIONS
//   72  ***************************************************************************************************/
//   73 
//   74 /***************************************************************************************************
//   75  * @fn      MT_UartInit
//   76  * @brief   Initialize MT with UART support
//   77 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   78 void MT_UartInit ()
MT_UartInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_UartInit
//   79 {
        FUNCALL MT_UartInit, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//   80   halUARTCfg_t uartConfig;
//   81 
//   82   App_TaskID = 0; // Initialize APP ID
        CLR     A
        MOV     DPTR,#App_TaskID
        MOVX    @DPTR,A
//   83 
//   84   /* UART Configuration */
//   85   uartConfig.configured           = TRUE;
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//   86   uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//   87   uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   88   uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   89   uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   90   uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   91   uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//   92   uartConfig.intEnable            = TRUE;
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   93 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//   94   uartConfig.callBackFunc         = MT_UartProcessZToolData;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#(??MT_UartProcessZToolData?relay & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((??MT_UartProcessZToolData?relay >> 8) & 0xff)
        MOVX    @DPTR,A
//   95   #if defined(Coor_receiver)
//   96     uartConfig.callBackFunc         = zclUARTMsg_CallBack;
//   97   #endif
//   98 #elif defined (ZAPP_P1) || defined (ZAPP_P2)
//   99   uartConfig.callBackFunc         = MT_UartProcessZAppData;
//  100 #else
//  101   uartConfig.callBackFunc         = NULL;
//  102 #endif
//  103 
//  104   /* Start UART */
//  105 #if defined (MT_UART_DEFAULT_PORT)
//  106   HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  107 #else
//  108   /* Silence IAR compiler warning */
//  109   (void)uartConfig;
//  110 #endif
//  111 
//  112   /* Initialize for ZApp */
//  113 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  114   /* Default max bytes that ZAPP can take */
//  115   MT_UartMaxZAppBufLen  = 1;
//  116   MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
//  117 #endif
//  118 
//  119 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  120 
//  121 /***************************************************************************************************
//  122  * @fn      MT_SerialRegisterTaskID
//  123  * @brief   This function registers the taskID of the application so it knows
//  124  *          where to send the messages whent they come in.
//  125  * @param   void
//  126  * @return  void
//  127  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  128 void MT_UartRegisterTaskID( byte taskID )
MT_UartRegisterTaskID:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MT_UartRegisterTaskID
//  129 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  130   App_TaskID = taskID;
        MOV     A,R1
        MOV     DPTR,#App_TaskID
        MOVX    @DPTR,A
//  131 }
        SJMP    ?Subroutine6
        CFI EndBlock cfiBlock2
//  132 
//  133 /***************************************************************************************************
//  134  * @fn      SPIMgr_CalcFCS
//  135  * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
//  136  *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
//  137  * @param   byte *msg_ptr - message pointer
//  138  *          byte len - length (in bytes) of message
//  139  * @return  result byte
//  140  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  141 byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
MT_UartCalcFCS:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MT_UartCalcFCS
//  142 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  143   byte x;
//  144   byte xorResult;
//  145 
//  146   xorResult = 0;
        MOV     R1,#0x0
//  147 
//  148   for ( x = 0; x < len; x++, msg_ptr++ )
        MOV     R5,#0x0
        SJMP    ??MT_UartCalcFCS_0
//  149     xorResult = xorResult ^ *msg_ptr;
??MT_UartCalcFCS_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R5
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
??MT_UartCalcFCS_0:
        MOV     A,R5
        CLR     C
        SUBB    A,R4
        JC      ??MT_UartCalcFCS_1
//  150 
//  151   return ( xorResult );
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  152 }
//  153 
//  154 /***************************************************************************************************
//  155  * @fn      MT_UartProcessZToolData
//  156  * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
//  157  *          |  1  |     1        |    2    |  0-Len   |   1   |
//  158  *          Parses the data and determine either is SPI or just simply serial data
//  159  *          then send the data to correct place (MT or APP)
//  160  * @param   port     - UART port
//  161  *          event    - Event that causes the callback
//  162  *
//  163  *
//  164  * @return  None
//  165  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  166 void MT_UartProcessZToolData ( uint8 port, uint8 event )
MT_UartProcessZToolData:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function MT_UartProcessZToolData
//  167 {
        FUNCALL MT_UartProcessZToolData, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UartProcessZToolData, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
//  168   uint8  ch;
//  169   uint8  bytesInRxBuffer;
//  170   
//  171   (void)event;  // Intentionally unreferenced parameter
        SJMP    ??MT_UartProcessZToolData_0
//  172 
//  173   while (Hal_UART_RxBufLen(port))
//  174   {
//  175     HalUARTRead (port, &ch, 1);
//  176 
//  177     switch (state)
//  178     {
//  179       case SOP_STATE:
//  180         if (ch == MT_UART_SOF)
//  181           state = LEN_STATE;
//  182         break;
//  183 
//  184       case LEN_STATE:
//  185         LEN_Token = ch;
//  186         tempDataLen = 0;
//  187 
//  188         /* Allocate memory for the data */
//  189         pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) + MT_RPC_FRAME_HDR_SZ + LEN_Token );
//  190 
//  191         if (pMsg)
//  192         {
//  193           /* Fill up what we can */
//  194           pMsg->hdr.event = CMD_SERIAL_MSG;
??MT_UartProcessZToolData_1:
        MOV     DPTR,#pMsg
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  195           pMsg->msg = (uint8*)(pMsg+1);
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine4 & 0xFFFF
//  196           pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
??CrossCallReturnLabel_9:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#pMsg
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  197           state = CMD_STATE1;
        MOV     A,#0x1
??MT_UartProcessZToolData_2:
        MOV     DPTR,#state
        MOVX    @DPTR,A
//  198         }
??MT_UartProcessZToolData_0:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        JNZ     ??MT_UartProcessZToolData_3
        MOV     A,R3
??MT_UartProcessZToolData_3:
        JNZ     $+5
        LJMP    ??MT_UartProcessZToolData_4 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalUARTRead?relay
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPTR,#state
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for MT_UartProcessZToolData>_0`:
        DATA
        DB        0
        DB        5
        DW        ??MT_UartProcessZToolData_0
        DW        ??MT_UartProcessZToolData_5
        DW        ??MT_UartProcessZToolData_6
        DW        ??MT_UartProcessZToolData_7
        DW        ??MT_UartProcessZToolData_8
        DW        ??MT_UartProcessZToolData_9
        DW        ??MT_UartProcessZToolData_10
        CODE
??MT_UartProcessZToolData_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??MT_UartProcessZToolData_0
        MOV     A,#0x3
        SJMP    ??MT_UartProcessZToolData_2
??MT_UartProcessZToolData_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#LEN_Token
        MOVX    @DPTR,A
        CLR     A
        MOV     DPTR,#tempDataLen
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R0,A
        MOV     A,#0x7
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_msg_allocate?relay
        MOV     DPTR,#pMsg
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        JNZ     ??MT_UartProcessZToolData_11
        INC     DPTR
        MOVX    A,@DPTR
??MT_UartProcessZToolData_11:
        JZ      $+5
        LJMP    ??MT_UartProcessZToolData_1 & 0xFFFF
//  199         else
//  200         {
//  201           state = SOP_STATE;
        CLR     A
        MOV     DPTR,#state
        MOVX    @DPTR,A
//  202           return;
??MT_UartProcessZToolData_4:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 11)
//  203         }
//  204         break;
//  205 
//  206       case CMD_STATE1:
//  207         pMsg->msg[MT_RPC_POS_CMD0] = ch;
??MT_UartProcessZToolData_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  208         state = CMD_STATE2;
        MOV     A,#0x2
        LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
//  209         break;
//  210 
//  211       case CMD_STATE2:
//  212         pMsg->msg[MT_RPC_POS_CMD1] = ch;
??MT_UartProcessZToolData_7:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  213         if (LEN_Token) // If there is no data, skip to FCS state
??CrossCallReturnLabel_11:
        JZ      ??MT_UartProcessZToolData_12
//  214         {
//  215           state = DATA_STATE;
        MOV     A,#0x4
        LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
//  216         }
//  217         else
//  218         {
//  219           state = FCS_STATE;
//  220         }
//  221         break;
//  222 
//  223       case DATA_STATE:
//  224         pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch; // Fill in the buffer the first byte of the data
??MT_UartProcessZToolData_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#tempDataLen
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#tempDataLen
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  225        
//  226         bytesInRxBuffer = Hal_UART_RxBufLen(port); // Check number of bytes left in the Rx buffer
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     R7,A
//  227 
//  228         /* If the remain of the data is there, read them all, otherwise, just read enough */
//  229         if (bytesInRxBuffer <= LEN_Token - tempDataLen)
        MOV     DPTR,#tempDataLen
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#LEN_Token
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R4,A
        CLR     A
        SUBB    A,#0x0
        MOV     R5,A
        MOV     ?V0 + 0,R7
        CLR     C
        MOV     A,R4
        SUBB    A,?V0 + 0
        MOV     A,R5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??MT_UartProcessZToolData_13
//  230         {
//  231           HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalUARTRead?relay
//  232           tempDataLen += bytesInRxBuffer;
        MOV     DPTR,#tempDataLen
        MOVX    A,@DPTR
        ADD     A,R7
        SJMP    ??MT_UartProcessZToolData_14
//  233         }
//  234         else
//  235         {
//  236           HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
??MT_UartProcessZToolData_13:
        ; Setup parameters for call to function HalUARTRead
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalUARTRead?relay
//  237           tempDataLen += (LEN_Token - tempDataLen);
        MOV     DPTR,#LEN_Token
        MOVX    A,@DPTR
        MOV     DPTR,#tempDataLen
??MT_UartProcessZToolData_14:
        MOVX    @DPTR,A
//  238         }
//  239 
//  240         /* If number of bytes read is equal to data length, time to move on to FCS */
//  241         if ( tempDataLen == LEN_Token )
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#LEN_Token
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      $+5
        LJMP    ??MT_UartProcessZToolData_0 & 0xFFFF
??MT_UartProcessZToolData_12:
        MOV     A,#0x5
        LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
//  242             state = FCS_STATE;
//  243 
//  244         break;
//  245 
//  246       case FCS_STATE:
//  247 
//  248         FSC_Token = ch;
??MT_UartProcessZToolData_10:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPTR,#FSC_Token
        LCALL   ?Subroutine4 & 0xFFFF
//  249         if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token)) // Make sure it's correct
??CrossCallReturnLabel_12:
        ADD     A,#0x3
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??MT_UartCalcFCS?relay
        MOV     A,R1
        MOV     R2,A
        MOV     DPTR,#FSC_Token
        MOVX    A,@DPTR
        XRL     A,R2
        MOV     DPTR,#pMsg
        JNZ     ??MT_UartProcessZToolData_15
//  250         {
//  251           osal_msg_send( App_TaskID, (byte *)pMsg );
        ; Setup parameters for call to function osal_msg_send
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#App_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
        SJMP    ??MT_UartProcessZToolData_16
//  252         }
//  253         else
//  254         {
//  255           osal_msg_deallocate ( (uint8 *)pMsg ); // deallocate the msg
??MT_UartProcessZToolData_15:
        ; Setup parameters for call to function osal_msg_deallocate
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  256         }
//  257         state = SOP_STATE; // Reset the state, send or discard the buffers at this point
??MT_UartProcessZToolData_16:
        CLR     A
        LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
        CFI EndBlock cfiBlock4
//  258         break;
//  259 
//  260       default:
//  261        break;
//  262     }
//  263   }
//  264 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_msg_allocate
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     DPTR,#LEN_Token
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     DPTR,#pMsg
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+-1
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+-1
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_5
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+-1
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_6
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+-1
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_2
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+-1
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_3
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+-1
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+-1
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartRegisterTaskID?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartRegisterTaskID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartCalcFCS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartCalcFCS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UartProcessZToolData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_UartProcessZToolData

        END
//  265 
//  266 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  267 /***************************************************************************************************
//  268  * @fn      MT_UartProcessZAppData
//  269  *
//  270  * @brief   | SOP | CMD  |   Data Length   | FSC  |
//  271  *          |  1  |  2   |       1         |  1   |
//  272  *
//  273  *          Parses the data and determine either is SPI or just simply serial data
//  274  *          then send the data to correct place (MT or APP)
//  275  *
//  276  * @param   port    - UART port
//  277  *          event   - Event that causes the callback
//  278  *
//  279  *
//  280  * @return  None
//  281  ***************************************************************************************************/
//  282 void MT_UartProcessZAppData ( uint8 port, uint8 event )
//  283 {
//  284 
//  285   osal_event_hdr_t  *msg_ptr;
//  286   uint16 length = 0;
//  287   uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
//  288 
//  289   /*
//  290      If maxZAppBufferLength is 0 or larger than current length
//  291      the entire length of the current buffer is returned.
//  292   */
//  293   if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
//  294   {
//  295     length = MT_UartMaxZAppBufLen;
//  296   }
//  297   else
//  298   {
//  299     length = rxBufLen;
//  300   }
//  301 
//  302   /* Verify events */
//  303   if (event == HAL_UART_TX_FULL)
//  304   {
//  305     // Do something when TX if full
//  306     return;
//  307   }
//  308 
//  309   if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
//  310   {
//  311     if ( App_TaskID )
//  312     {
//  313       /*
//  314          If Application is ready to receive and there is something
//  315          in the Rx buffer then send it up
//  316       */
//  317       if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
//  318       {
//  319         /* Disable App flow control until it processes the current data */
//  320          MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
//  321 
//  322         /* 2 more bytes are added, 1 for CMD type, other for length */
//  323         msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
//  324         if ( msg_ptr )
//  325         {
//  326           msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
//  327           msg_ptr->status = length;
//  328 
//  329           /* Read the data of Rx buffer */
//  330           HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
//  331 
//  332           /* Send the raw data to application...or where ever */
//  333           osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
//  334         }
//  335       }
//  336     }
//  337   }
//  338 }
//  339 
//  340 /***************************************************************************************************
//  341  * @fn      SPIMgr_ZAppBufferLengthRegister
//  342  *
//  343  * @brief
//  344  *
//  345  * @param   maxLen - Max Length that the application wants at a time
//  346  *
//  347  * @return  None
//  348  *
//  349  ***************************************************************************************************/
//  350 void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
//  351 {
//  352   /* If the maxLen is larger than the RX buff, something is not right */
//  353   if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
//  354     MT_UartMaxZAppBufLen = maxLen;
//  355   else
//  356     MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
//  357 }
//  358 
//  359 /***************************************************************************************************
//  360  * @fn      SPIMgr_AppFlowControl
//  361  *
//  362  * @brief
//  363  *
//  364  * @param   status - ready to send or not
//  365  *
//  366  * @return  None
//  367  *
//  368  ***************************************************************************************************/
//  369 void MT_UartAppFlowControl ( bool status )
//  370 {
//  371 
//  372   /* Make sure only update if needed */
//  373   if (status != MT_UartZAppRxStatus )
//  374   {
//  375     MT_UartZAppRxStatus = status;
//  376   }
//  377 
//  378   /* App is ready to read again, ProcessZAppData have to be triggered too */
//  379   if (status == MT_UART_ZAPP_RX_READY)
//  380   {
//  381     MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
//  382   }
//  383 }
//  384 
//  385 #endif //ZAPP
//  386 
//  387 /***************************************************************************************************
//  388 ***************************************************************************************************/
// 
// 690 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   9 bytes in segment XDATA_Z
// 
// 714 bytes of CODE  memory
//   9 bytes of XDATA memory
//
//Errors: none
//Warnings: none
