///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               22/Jul/2010  09:34:40 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE           /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\Source\hal_sensor.c                        /
//    Command line       =  -f "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE       /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\公司產品\XT-200\ZIGBEE       /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wConfig.cfg" (-DSECURE=0                      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\Source\hal_sensor.c" -D NWK_AUTO_POLL -D   /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D M310 -lC  /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\List\" -lA       /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\" -I "D:\公司產品\XT-200\ZIGBEE   /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\SOURCE\" -I         /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE       /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\公司產品\XT-200\ZIGBEE              /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\HAL\MODULE\" -I "D:\公司產品\XT-200\ZIGBEE    /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\HAL\TARGET\CC2530EB\" -I                      /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\公司產品\XT-200\ZIGBEE           /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\OSAL\INCLUDE\" -I "D:\公司產品\XT-200\ZIGBEE  /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\AF\" -I "D:\公司產品\XT-200\ZIGBEE      /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\NWK\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\SEC\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\SAPI\" -I "D:\公司產品\XT-200\ZIGBEE    /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\SYS\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\ZCL\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\STACK\ZDO\" -I "D:\公司產品\XT-200\ZIGBEE     /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\ZMAC\F8W\" -I "D:\公司產品\XT-200\ZIGBEE      /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\ZMAC\" -I "D:\公司產品\XT-200\ZIGBEE          /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\SERVICES\SADDR\" -I                           /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\公司產品\XT-200\ZIGBEE           /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\INCLUDE\" -I "D:\公司產品\XT-200\ZIGBEE   /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\HIGH_LEVEL\" -I                           /
//                          "D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE          /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\公司產品\XT-200\ZIGBEE      /
//                          CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Sensor Network Application\ZIGBEE  /
//                          Endpoint & Device\CC2530DB\..\..\..\..\..\COMPONE /
//                          NTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR  /
//                          Systems\Embedded Workbench 5.3\8051\INC\" -I      /
//                          "C:\IAR Systems\Embedded Workbench                /
//                          5.3\8051\INC\CLIB\" -Ohz                          /
//    List file          =  D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE           /
//                          Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Sensor Network Application\ZIGBEE Endpoint &     /
//                          Device\CC2530DB\EndDeviceKB_M310\List\hal_sensor. /
//                          s51                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_sensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??M310_SensorFunction?relay
        FUNCTION ??M310_SensorFunction?relay,0203H
        PUBLIC M310_SensorFunction
        FUNCTION M310_SensorFunction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC TransmitApp_Msg
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
halMcuWaitMs        SYMBOL "halMcuWaitMs"
halBuzzerOn         SYMBOL "halBuzzerOn"
halBuzzerInit       SYMBOL "halBuzzerInit"
halKeypadInit       SYMBOL "halKeypadInit"
M310_Init           SYMBOL "M310_Init"
M310_GetSensor      SYMBOL "M310_GetSensor"
HalLcd_HW_Clear     SYMBOL "HalLcd_HW_Clear"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
HalLcdWriteChar     SYMBOL "HalLcdWriteChar"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??HalLcdWriteChar?relay SYMBOL "?relay", HalLcdWriteChar
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLcd_HW_Clear?relay SYMBOL "?relay", HalLcd_HW_Clear
??M310_GetSensor?relay SYMBOL "?relay", M310_GetSensor
??M310_Init?relay   SYMBOL "?relay", M310_Init
??halBuzzerInit?relay SYMBOL "?relay", halBuzzerInit
??halBuzzerOn?relay SYMBOL "?relay", halBuzzerOn
??halKeypadInit?relay SYMBOL "?relay", halKeypadInit
??halMcuWaitMs?relay SYMBOL "?relay", halMcuWaitMs
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
M310_SensorFunction SYMBOL "M310_SensorFunction"
??M310_SensorFunction?relay SYMBOL "?relay", M310_SensorFunction

        EXTERN halMcuWaitMs
        FUNCTION halMcuWaitMs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halBuzzerOn
        FUNCTION halBuzzerOn,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halBuzzerInit
        FUNCTION halBuzzerInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halKeypadInit
        FUNCTION halKeypadInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M310_Init
        FUNCTION M310_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M310_GetSensor
        FUNCTION M310_GetSensor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcd_HW_Clear
        FUNCTION HalLcd_HW_Clear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteChar
        FUNCTION HalLcdWriteChar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLcdWriteChar?relay
        FUNCTION ??HalLcdWriteChar?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLcd_HW_Clear?relay
        FUNCTION ??HalLcd_HW_Clear?relay,00H
        EXTERN ??M310_GetSensor?relay
        FUNCTION ??M310_GetSensor?relay,00H
        EXTERN ??M310_Init?relay
        FUNCTION ??M310_Init?relay,00H
        EXTERN ??halBuzzerInit?relay
        FUNCTION ??halBuzzerInit?relay,00H
        EXTERN ??halBuzzerOn?relay
        FUNCTION ??halBuzzerOn?relay,00H
        EXTERN ??halKeypadInit?relay
        FUNCTION ??halKeypadInit?relay,00H
        EXTERN ??halMcuWaitMs?relay
        FUNCTION ??halMcuWaitMs?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN udi

// D:\公司產品\XT-200\ZIGBEE CC2530\ZIGBEE Z-STACK\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_sensor.c
//    3   Revised:        $Date: 2010-07-14 (Wed, 14 July 2010) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    HAL Sensor - the device receive the sensor data application.
//    7 
//    8   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   Should you have any questions regarding your right to use this Software,
//   11   contact Texas Instruments Incorporated at www.TI.com.
//   12 **************************************************************************************************/
//   13 /*********************************************************************
//   14  * INCLUDES
//   15  */  
//   16 #include "ZComDef.h"
//   17 #include "OSAL.h"
//   18 #include "AF.h"
//   19 #include "ZDApp.h"
//   20 #include "ZDObject.h"
//   21 #include "ZDProfile.h"
//   22 
//   23 /* ZCL */
//   24 #include "zcl.h"
//   25 #include "zcl_general.h"
//   26 #include "zcl_ha.h"
//   27 #include "zcl_zigbee device.h"
//   28 
//   29 /* HAL */
//   30 #include "onboard.h"
//   31 #include "hal_lcd.h"
//   32 #include "hal_led.h"
//   33 #include "hal_key.h"
//   34 #include "hal_keypad.h"
//   35 #include "hal_buzzer.h"
//   36   
//   37 /* HAL Sensor */
//   38 #include "hal_sensor.h"
//   39 #if defined(M140)
//   40   #include "M140.h"
//   41 #endif
//   42 #if defined(M170)
//   43   #include "M170.h"
//   44 #endif
//   45 #if defined(M200)
//   46   #include "M200.h"
//   47 #endif
//   48 #if defined(M220)
//   49   #include "M220.h"
//   50 #endif
//   51 #if defined(M310)
//   52   #include "M310.h"
//   53 #endif 
//   54 
//   55 /*********************************************************************
//   56  * GLOBAL VARIABLES
//   57  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   58  byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   59  static afAddrType_t zclZigbeeDevice_DstAddr;
zclZigbeeDevice_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   60  
//   61 /*********************************************************************
//   62  * LOCAL VARIABLES
//   63  */
//   64 /*********************************************************************
//   65  * LOCAL FUNCTIONS
//   66  */
//   67  void M140_SensorFunction(void); // M140 Module function
//   68  void M170_SensorFunction(void); // M170 Module function
//   69  void M200_SensorFunction(void); // M200 Module function
//   70  void M220_SensorFunction(void); // M220 Module function
//   71  void M310_SensorFunction(void); // M310 Module function
//   72  
//   73 #if defined(M140)
//   74 /*********************************************************************
//   75  * @fn          M140_SensorFunction
//   76  * @brief       The ZIGBEE Device to receive the M140 tempture data.
//   77  */
//   78  void M140_SensorFunction(void)
//   79  {
//   80   // M140 sensor variable
//   81   uint16 val;
//   82   uint8 tmp1, tmp2, tmp3, tmp4;
//   83   // ZCL transmit variable
//   84   uint8 len = 0;
//   85   
//   86   halMcuWaitMs(100);
//   87   halBuzzerOn(200);
//   88       
//   89   // initilization the device
//   90   halBuzzerInit(); 
//   91   halKeypadInit();
//   92   M140_Init();
//   93           
//   94 #if defined ( LCD_SUPPORTED )
//   95   HalLcd_HW_Clear();
//   96   HalLcdWriteString("* Z-Stack M140 *", HAL_LCD_LINE_1);
//   97   HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
//   98   HalLcdWriteChar(HAL_LCD_LINE_2, 14, 0xDF);
//   99 #endif
//  100       
//  101   val = M140_GetValue();  
//  102   if((0x2000 & val) == 0x2000) // check sign bit for negative value
//  103   {
//  104     val = ((val - 16384) * 10) / 32;
//  105   }
//  106   else
//  107     {
//  108       val = (val * 10) / 32;
//  109     }
//  110     tmp1 = (val / 100) + '0';
//  111     TransmitApp_Msg[len++] = tmp1;
//  112     tmp2 = ((val / 10) % 10) + '0';
//  113     TransmitApp_Msg[len++] = tmp2;
//  114     tmp3 = '.';
//  115     TransmitApp_Msg[len++] = tmp3;
//  116     tmp4 = (val % 10) + '0';
//  117     TransmitApp_Msg[len++] = tmp4;
//  118 #if defined ( LCD_SUPPORTED )
//  119         HalLcdWriteChar(HAL_LCD_LINE_2, 9, tmp1);
//  120         HalLcdWriteChar(HAL_LCD_LINE_2, 10, tmp2);
//  121         HalLcdWriteChar(HAL_LCD_LINE_2, 11, tmp3);
//  122         HalLcdWriteChar(HAL_LCD_LINE_2, 12, tmp4);
//  123 #endif 
//  124     halMcuWaitMs(100);
//  125     
//  126     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  127                                   &zclZigbeeDevice_DstAddr,
//  128                                   ZCL_CLUSTER_ID_GEN_ON_OFF,
//  129                                   0x31,
//  130                                   TRUE,
//  131                                   ZCL_FRAME_CLIENT_SERVER_DIR,
//  132                                   false,
//  133                                   0,
//  134                                   0,
//  135                                   len,
//  136                                   TransmitApp_Msg );
//  137  }
//  138 #endif
//  139  
//  140 #if defined(M170)
//  141 /*********************************************************************
//  142  * @fn          M170_SensorFunction
//  143  * @brief       The ZIGBEE Device to receive the M170 optical data.
//  144  */
//  145  void M170_SensorFunction(void)
//  146  {
//  147     // M170 sensor variable
//  148     uint16 val;
//  149     uint8 tmp1, tmp2, tmp3;
//  150     // ZCL transmit variable
//  151     uint8 len=0;
//  152   
//  153     halMcuWaitMs(100);
//  154     halBuzzerOn(200);
//  155       
//  156     // initilization the device
//  157     halBuzzerInit(); 
//  158     halKeypadInit();
//  159     M170_Init();
//  160     
//  161 #if defined ( LCD_SUPPORTED )
//  162   HalLcd_HW_Clear();
//  163   HalLcdWriteString("* Z-Stack M170 *", HAL_LCD_LINE_1);
//  164   HalLcdWriteString(" Bright =     % ", HAL_LCD_LINE_2);
//  165 #endif
//  166   
//  167    val = M170_GetValue();
//  168    if (val > 2000)
//  169    {
//  170       val -= 2000;
//  171    }
//  172    else
//  173     {
//  174       val = 0;
//  175     }val /= 120;
//  176             
//  177    if (val > 100)
//  178    {
//  179       val = 100;
//  180    }
//  181    tmp1 = (val / 100) + '0';
//  182    TransmitApp_Msg[len++] = tmp1;
//  183    tmp2 = ((val / 10) % 10) + '0';
//  184    TransmitApp_Msg[len++] = tmp2;
//  185    tmp3 = (val % 10) + '0';
//  186    TransmitApp_Msg[len++] = tmp3;   
//  187 #if defined ( LCD_SUPPORTED )
//  188    HalLcdWriteChar(HAL_LCD_LINE_2, 10, tmp1);
//  189    HalLcdWriteChar(HAL_LCD_LINE_2, 11, tmp2);
//  190    HalLcdWriteChar(HAL_LCD_LINE_2, 12, tmp3);
//  191 #endif
//  192    halMcuWaitMs(100); 
//  193    
//  194    uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  195                                  &zclZigbeeDevice_DstAddr,
//  196                                  ZCL_CLUSTER_ID_GEN_ON_OFF,
//  197                                  0x31,
//  198                                  TRUE,
//  199                                  ZCL_FRAME_CLIENT_SERVER_DIR,
//  200                                  false,
//  201                                  0,
//  202                                  0,
//  203                                  len,
//  204                                  TransmitApp_Msg );
//  205  }
//  206 #endif
//  207  
//  208 #if defined(M200)
//  209 /*********************************************************************
//  210  * @fn          M200_SensorFunction
//  211  * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
//  212  */
//  213  void M200_SensorFunction(void)
//  214  {
//  215     // M200 module variable
//  216     uint16 temp, humi;
//  217     uint8 hum_1,hum_2,hum_3,hum_4;
//  218     uint8 temp_1,temp_2,temp_3,temp_4;
//  219     // ZCL transmit variable
//  220     uint8 len=0;
//  221   
//  222     halMcuWaitMs(100);
//  223     halBuzzerOn(200);
//  224       
//  225     // initilization the device
//  226     halBuzzerInit(); 
//  227     halKeypadInit();
//  228     M200_Init();
//  229     
//  230 #if defined ( LCD_SUPPORTED )
//  231     HalLcd_HW_Clear();
//  232     HalLcdWriteString("Humidity=      %", HAL_LCD_LINE_1);
//  233     HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
//  234 #endif
//  235   
//  236     M200_GetValue();
//  237     temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
//  238     humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
//  239     if (humi > 999)
//  240     {
//  241       humi = 999;
//  242     }
//  243     if (temp > 999)
//  244     {
//  245       temp = 999;
//  246     }
//  247     hum_1 = (humi / 100) + '0';
//  248     TransmitApp_Msg[len++] = hum_1;
//  249     hum_2 = ((humi / 10) % 10) + '0';
//  250     TransmitApp_Msg[len++] = hum_2;
//  251     hum_3 = '.';
//  252     TransmitApp_Msg[len++] = hum_3;
//  253     hum_4 = (humi % 10) + '0';
//  254     TransmitApp_Msg[len++] = hum_4;
//  255     TransmitApp_Msg[len++] = ' ';
//  256     temp_1 = (temp / 100) + '0';
//  257     TransmitApp_Msg[len++] = temp_1;
//  258     temp_2 = ((temp / 10) % 10) + '0';
//  259     TransmitApp_Msg[len++] = temp_2;
//  260     temp_3 = '.';
//  261     TransmitApp_Msg[len++] = temp_3;
//  262     temp_4 = (temp % 10) + '0';
//  263     TransmitApp_Msg[len++] = temp_4;
//  264 #if defined ( LCD_SUPPORTED )
//  265     // Humi
//  266     HalLcdWriteChar(HAL_LCD_LINE_1, 10, hum_1);
//  267     HalLcdWriteChar(HAL_LCD_LINE_1, 11, hum_2);
//  268     HalLcdWriteChar(HAL_LCD_LINE_1, 12, hum_3);
//  269     HalLcdWriteChar(HAL_LCD_LINE_1, 13, hum_4);
//  270     // Temp
//  271     HalLcdWriteChar(HAL_LCD_LINE_2, 9, temp_1);
//  272     HalLcdWriteChar(HAL_LCD_LINE_2, 10, temp_2);
//  273     HalLcdWriteChar(HAL_LCD_LINE_2, 11, temp_3);
//  274     HalLcdWriteChar(HAL_LCD_LINE_2, 12, temp_4);
//  275 #endif
//  276     halMcuWaitMs(100);
//  277   
//  278     uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  279                                  &zclZigbeeDevice_DstAddr,
//  280                                  ZCL_CLUSTER_ID_GEN_ON_OFF,
//  281                                  0x31,
//  282                                  TRUE,
//  283                                  ZCL_FRAME_CLIENT_SERVER_DIR,
//  284                                  false,
//  285                                  0,
//  286                                  0,
//  287                                  len,
//  288                                  TransmitApp_Msg );
//  289  }
//  290 #endif
//  291  
//  292 #if defined(M220)
//  293 /*********************************************************************
//  294  * @fn          M220_SensorFunction
//  295  * @brief       The ZIGBEE Device to receive the M220 three-Axis data.
//  296  */
//  297  void M220_SensorFunction(void)
//  298  {
//  299     // M200 module variable
//  300     uint8 len = 0;
//  301     
//  302     halMcuWaitMs(100);
//  303     halBuzzerOn(200);
//  304       
//  305     // initilization the device
//  306     halBuzzerInit(); 
//  307     halKeypadInit();
//  308     M220_Init();
//  309     
//  310 #if defined ( LCD_SUPPORTED )
//  311     HalLcd_HW_Clear(); 
//  312     HalLcdWriteString("** M220 Test  **", HAL_LCD_LINE_1);
//  313 #endif
//  314     M220_Pooling();
//  315     
//  316     // X-Axis value
//  317     if ((M220_X_AXIS_Value &0x8000) == 0x8000)
//  318     {
//  319       M220_X_AXIS_Value = 65535-M220_X_AXIS_Value;
//  320 
//  321 #if defined ( LCD_SUPPORTED )
//  322       HalLcdWriteChar(HAL_LCD_LINE_2, 0, '-');
//  323 #endif
//  324       TransmitApp_Msg[len++] = '-';
//  325     }
//  326     else
//  327       {
//  328 #if defined ( LCD_SUPPORTED )
//  329         HalLcdWriteChar(HAL_LCD_LINE_2, 0, '+');
//  330 #endif
//  331         TransmitApp_Msg[len++] = '+';
//  332       }
//  333       TransmitApp_Msg[len++] = (M220_X_AXIS_Value/100) + '0';
//  334       TransmitApp_Msg[len++] = ((M220_X_AXIS_Value/10)%10) + '0';
//  335       TransmitApp_Msg[len++] = (M220_X_AXIS_Value%10) + '0';
//  336       TransmitApp_Msg[len++] = ' ';
//  337       TransmitApp_Msg[len++] = ' ';
//  338   
//  339       // Y-Axis value
//  340       if ((M220_Y_AXIS_Value &0x8000) == 0x8000)
//  341       {
//  342         M220_Y_AXIS_Value = 65535-M220_Y_AXIS_Value;
//  343 #if defined ( LCD_SUPPORTED )      
//  344         HalLcdWriteChar(HAL_LCD_LINE_2, 6, '-');
//  345 #endif
//  346         TransmitApp_Msg[len++] = '-';
//  347       }
//  348       else
//  349         {
//  350 #if defined ( LCD_SUPPORTED )
//  351           HalLcdWriteChar(HAL_LCD_LINE_2, 6, '+');
//  352 #endif
//  353           TransmitApp_Msg[len++] = '+';
//  354         }
//  355         TransmitApp_Msg[len++] = (M220_Y_AXIS_Value/100) + '0';
//  356         TransmitApp_Msg[len++] = ((M220_Y_AXIS_Value/10)%10) + '0';
//  357         TransmitApp_Msg[len++] = (M220_Y_AXIS_Value%10) + '0';
//  358         TransmitApp_Msg[len++] = ' ';
//  359         TransmitApp_Msg[len++] = ' ';
//  360   
//  361         // Z-Axis value
//  362         if ((M220_Z_AXIS_Value &0x8000) == 0x8000)
//  363         {
//  364           M220_Z_AXIS_Value = 65535-M220_Z_AXIS_Value;
//  365 #if defined ( LCD_SUPPORTED )
//  366           HalLcdWriteChar(HAL_LCD_LINE_2, 12, '-');
//  367 #endif
//  368           TransmitApp_Msg[len++] = '-';
//  369         }
//  370         else
//  371           {
//  372 #if defined ( LCD_SUPPORTED )
//  373             HalLcdWriteChar(HAL_LCD_LINE_2, 12, '+');
//  374 #endif
//  375             TransmitApp_Msg[len++] = '+';
//  376           } 
//  377           TransmitApp_Msg[len++] = (M220_Z_AXIS_Value/100) + '0';
//  378           TransmitApp_Msg[len++] = ((M220_Z_AXIS_Value/10)%10) + '0';
//  379           TransmitApp_Msg[len++] = (M220_Z_AXIS_Value%10) + '0';
//  380 #if defined ( LCD_SUPPORTED )
//  381           halLcdDisplayUint16(HAL_LCD_LINE_2, 1, HAL_LCD_RADIX_DEC, M220_X_AXIS_Value); 
//  382           halLcdDisplayUint16(HAL_LCD_LINE_2, 7, HAL_LCD_RADIX_DEC, M220_Y_AXIS_Value);
//  383           halLcdDisplayUint16(HAL_LCD_LINE_2, 13, HAL_LCD_RADIX_DEC, M220_Z_AXIS_Value);
//  384 #endif
//  385   halMcuWaitMs(100);
//  386   
//  387   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  388                                 &zclZigbeeDevice_DstAddr,
//  389                                 ZCL_CLUSTER_ID_GEN_ON_OFF,
//  390                                 0x31,
//  391                                 TRUE,
//  392                                 ZCL_FRAME_CLIENT_SERVER_DIR,
//  393                                 false,
//  394                                 0,
//  395                                 0,
//  396                                 len,
//  397                                 TransmitApp_Msg );
//  398  }
//  399 #endif
//  400  
//  401 #if defined(M310)
//  402 /*********************************************************************
//  403  * @fn          M310_SensorFunction
//  404  * @brief       The ZIGBEE Device to receive the M310 Photo interrupt data.
//  405  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  406  void M310_SensorFunction(void)
M310_SensorFunction:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function M310_SensorFunction
//  407  {
        FUNCALL M310_SensorFunction, halMcuWaitMs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, halBuzzerOn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, halBuzzerInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, halKeypadInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, M310_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, M310_GetSensor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, HalLcd_HW_Clear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, halMcuWaitMs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M310_SensorFunction, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  408     // ZCL transmit variable
//  409     uint8 len = 0;
//  410     
//  411     halMcuWaitMs(100);
        ; Setup parameters for call to function halMcuWaitMs
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??halMcuWaitMs?relay
//  412     halBuzzerOn(200);
        ; Setup parameters for call to function halBuzzerOn
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??halBuzzerOn?relay
//  413       
//  414     // initilization the device
//  415     halBuzzerInit(); 
        ; Setup parameters for call to function halBuzzerInit
        LCALL   ??halBuzzerInit?relay
//  416     halKeypadInit();
        ; Setup parameters for call to function halKeypadInit
        LCALL   ??halKeypadInit?relay
//  417     M310_Init();
        ; Setup parameters for call to function M310_Init
        LCALL   ??M310_Init?relay
//  418   
//  419     udi = M310_GetSensor();
        ; Setup parameters for call to function M310_GetSensor
        LCALL   ??M310_GetSensor?relay
        MOV     A,R1
        MOV     DPTR,#udi
        MOVX    @DPTR,A
//  420     
//  421 #if defined ( LCD_SUPPORTED )
//  422     HalLcd_HW_Clear(); 
        ; Setup parameters for call to function HalLcd_HW_Clear
        LCALL   ??HalLcd_HW_Clear?relay
//  423     HalLcdWriteString("** M310 Test  **", HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#(`?<Constant "** M310 Test  **">` & 0xff)
        MOV     R3,#((`?<Constant "** M310 Test  **">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  424     HalLcdWriteString("SENSOR = [_][_] ", HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant "SENSOR = [_][_] ">` & 0xff)
        MOV     R3,#((`?<Constant "SENSOR = [_][_] ">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  425     HalLcdWriteChar(HAL_LCD_LINE_2, 10, (udi &0x01) + '0');
        ; Setup parameters for call to function HalLcdWriteChar
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     R3,A
        MOV     R2,#0xa
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  426     HalLcdWriteChar(HAL_LCD_LINE_2, 13, ((udi >> 1) &0x01) + '0');
        ; Setup parameters for call to function HalLcdWriteChar
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R3,A
        MOV     R2,#0xd
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  427 #endif
//  428   
//  429     // detect first sen
//  430     TransmitApp_Msg[len++] = '[';
        MOV     A,#0x5b
        MOV     DPTR,#TransmitApp_Msg
        MOVX    @DPTR,A
//  431     TransmitApp_Msg[len++] = (udi &0x01) + '0';
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     DPTR,#(TransmitApp_Msg + 1)
        MOVX    @DPTR,A
//  432     TransmitApp_Msg[len++] = ']'; 
        MOV     A,#0x5d
        MOV     DPTR,#(TransmitApp_Msg + 2)
        MOVX    @DPTR,A
//  433   
//  434     // detect second sen
//  435     TransmitApp_Msg[len++] = '[';
        MOV     A,#0x5b
        MOV     DPTR,#(TransmitApp_Msg + 3)
        MOVX    @DPTR,A
//  436     TransmitApp_Msg[len++] = ((udi >> 1) &0x01) + '0';
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     DPTR,#(TransmitApp_Msg + 4)
        MOVX    @DPTR,A
//  437     TransmitApp_Msg[len++] = ']';
        MOV     A,#0x5d
        MOV     DPTR,#(TransmitApp_Msg + 5)
        MOVX    @DPTR,A
//  438     halMcuWaitMs(100);
        ; Setup parameters for call to function halMcuWaitMs
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??halMcuWaitMs?relay
//  439   
//  440     uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT,
//  441                                   &zclZigbeeDevice_DstAddr,
//  442                                   ZCL_CLUSTER_ID_GEN_ON_OFF,
//  443                                   0x31,
//  444                                   TRUE,
//  445                                   ZCL_FRAME_CLIENT_SERVER_DIR,
//  446                                   false,
//  447                                   0,
//  448                                   0,
//  449                                   len,
//  450                                   TransmitApp_Msg );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
        MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x31
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
        MOV     R1,#0xc
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  451  }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     DPTR,#udi
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        CLR     A
        MOV     0xE0 /* A   */.0,C
        ADD     A,#0x30
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     DPTR,#udi
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        SJMP    ?Subroutine2
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M310_SensorFunction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M310_SensorFunction

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "** M310 Test  **">`:
        DB "** M310 Test  **"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SENSOR = [_][_] ">`:
        DB "SENSOR = [_][_] "

        END
//  452 #endif
// 
// 228 bytes in segment BANKED_CODE
//   6 bytes in segment BANK_RELAYS
//  34 bytes in segment XDATA_ROM_C
// 114 bytes in segment XDATA_Z
// 
// 234 bytes of CODE  memory
//  34 bytes of CONST memory
// 114 bytes of XDATA memory
//
//Errors: none
//Warnings: none
