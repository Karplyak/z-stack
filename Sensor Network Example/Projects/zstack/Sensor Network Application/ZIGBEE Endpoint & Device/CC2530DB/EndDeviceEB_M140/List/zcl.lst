###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                19/Aug/2013  17:39:02 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Components\stack\zcl\zcl.c                 #
#    Command line       =  -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Components\stack\zcl\zcl.c" -D             #
#                          LCD_SUPPORTED=DEBUG -D NWK_AUTO_POLL -D ZTOOL_P1   #
#                          -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D    #
#                          MT_TASK -D xPOWER_SAVING -D xNV_RESTORE -D         #
#                          End_Device -D M140 -D HAL_KEYPAD -D xPA2591 -lC    #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\List\" -lA        #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\List\"            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\Obj\" -e          #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\GitHub\z-stack\Sensor  #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint & Device\CC2530DB\"    #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\GitHub\z-stack\Sensor Network                  #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MODU #
#                          LE\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\GitHub\z-stack\Sensor Network          #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\GitHub\z-stack\Sensor Network           #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\GitHub\z-stack\Sensor Network            #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\GitHub\z-stack\Sensor Network               #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\GitHub\z-stack\Sensor Network         #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\GitHub\z-stack\Sensor Network      #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\List\zcl.lst      #
#    Object file        =  D:\GitHub\z-stack\Sensor Network                   #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\Obj\zcl.r51       #
#                                                                             #
#                                                                             #
###############################################################################

D:\GitHub\z-stack\Sensor Network Example\Components\stack\zcl\zcl.c
      1          #include "ZComDef.h"
      2          #include "OSAL.h"
      3          #include "OSAL_Tasks.h"
      4          #include "AF.h"
      5          #include "ZDConfig.h"
      6          
      7          /* ZCL */
      8          #include "zcl.h"
      9          #include "zcl_general.h"
     10          
     11          #if defined ( INTER_PAN )
     12            #include "stub_aps.h"
     13          #endif
     14          
     15          /* HAL */
     16          #include "hal_uart.h"
     17          #include "hal_timer.h"
     18          #include "hal_led.h"
     19          #if defined (LCD_SUPPORTED)
     20            #include "hal_lcd.h"
     21          #endif
     22          
     23          /* MT */
     24          #include "MT_UART.h"
     25          #include "MT.h"
     26          
     27          /*********************************************************************
     28           * MACROS
     29           */
     30          /*** Frame Control ***/
     31          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     32          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     33          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     34          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     35          
     36          /*** Attribute Access Control ***/
     37          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     38          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     39          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     40          
     41          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     42          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     43          
     44          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     45                                                  (zclHdr).fc.manuSpecific == 0          && \
     46                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     47          
     48          // Commands that have corresponding responses
     49          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ            || \
     50                                                  (cmd) == ZCL_CMD_WRITE           || \
     51                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED || \
     52                                                  (cmd) == ZCL_CMD_CONFIG_REPORT   || \
     53                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG || \
     54                                                  (cmd) == ZCL_CMD_DISCOVER        || \
     55                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          typedef struct zclLibPlugin
     65          {
     66            struct zclLibPlugin *next;
     67            uint16              startClusterID;    // starting cluster ID
     68            uint16              endClusterID;      // ending cluster ID
     69            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
     70          } zclLibPlugin_t;
     71          
     72          // Attribute record list item
     73          typedef struct zclAttrRecsList
     74          {
     75            struct zclAttrRecsList *next;
     76            uint8                  endpoint;      // Used to link it into the endpoint descriptor
     77            uint8                  numAttributes; // Number of the following records
     78            CONST zclAttrRec_t     *attrs;        // attribute records
     79          } zclAttrRecsList;
     80          
     81          // Cluster option list item
     82          typedef struct zclClusterOptionList
     83          {
     84            struct zclClusterOptionList *next;
     85            uint8                       endpoint;   // Used to link it into the endpoint descriptor
     86            uint8                       numOptions; // Number of the following records
     87            zclOptionRec_t              *options;   // option records
     88          } zclClusterOptionList;
     89          
     90          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
     91          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
     92          
     93          typedef struct
     94          {
     95            zclParseInProfileCmd_t   pfnParseInProfile;
     96            zclProcessInProfileCmd_t pfnProcessInProfile;
     97          } zclCmdItems_t;
     98          
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          // The task Id of the Application where the unprocessed Foundation
    106          // Command/Response messages will be sent to.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
   \                     zcl_RegisteredMsgTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          
    109          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          zclValidateAttrData_t zcl_ValidateAttrDataCB = NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    111          
    112          // ZCL Sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint8 zcl_SeqNum = 0x00;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    114             
    115          /*********************************************************************
    116           * EXTERNAL VARIABLES
    117           */
    118          
    119          /*********************************************************************
    120           * EXTERNAL FUNCTIONS
    121           */
    122          
    123          /*********************************************************************
    124           * LOCAL VARIABLES
    125           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          static zclLibPlugin_t *plugins;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          static zclAttrRecsList *attrList;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          static zclClusterOptionList *clusterOptionList;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          static uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    130          
    131          /*********************************************************************
    132           * LOCAL FUNCTIONS
    133           */
    134          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt );  // Not static for ZNP build.
    135          
    136          void zclZigbeeReceiverMSG(afIncomingMSGPacket_t *msg);
    137          
    138          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    139          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    140          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    141          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    142          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    143          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    144          
    145          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    146          
    147          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)
    148            static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf );
    149          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
    150          
    151          #ifdef ZCL_READ
    152            static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    153            static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    154          #endif // ZCL_READ
    155          
    156          #ifdef ZCL_WRITE
    157            static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    158            static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    159            static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    160            static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    161          #endif // ZCL_WRITE
    162          
    163          #ifdef ZCL_REPORT
    164            static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    165            static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    166          #endif // ZCL_REPORT
    167          
    168          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    169          
    170          #ifdef ZCL_DISCOVER
    171            static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint16 *attrId, zclAttrRec_t *pAttr );
    172            static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd );
    173            static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    174          #endif // ZCL_DISCOVER
    175          
    176          static uint8 zclSendMsg( zclIncoming_t *pInMsg );
    177          
    178          /*********************************************************************
    179           * Parse Profile Command Function Table
    180           */

   \                                 In  segment CODE_C, align 1
   \   000000   ........     DW ??zclParseInReadCmd?relay, ??zclProcessInReadCmd?relay
   \   000004   ........     DW ??zclParseInReadRspCmd?relay, ??zclSendMsg?relay
   \   000008   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay
   \   00000C   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteUndividedCmd?relay
   \   000010   ........     DW ??zclParseInWriteRspCmd?relay, ??zclSendMsg?relay
   \   000014   ........     DW ??zclParseInWriteCmd?relay, ??zclProcessInWriteCmd?relay, 0H, 0H, 0H
   \            00000000
   \            0000    
   \   00001E   00000000     DW 0H, 0H, 0H, 0H, 0H, 0H, 0H, ??zclParseInDefaultRspCmd?relay
   \            00000000
   \            00000000
   \            0000....
   \   00002E   ....0000     DW ??zclSendMsg?relay, 0H, 0H, 0H, 0H
   \            00000000
   \            0000    
    181          static CONST zclCmdItems_t zclCmdTable[] =
    182          {
    183          #ifdef ZCL_READ
    184            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    185            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zclSendMsg                      },
    186          #else
    187            /* ZCL_CMD_READ */                { NULL,                          NULL                            },
    188            /* ZCL_CMD_READ_RSP */            { NULL,                          NULL                            },
    189          #endif // ZCL_READ
    190          
    191          #ifdef ZCL_WRITE
    192            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    193            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    194            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zclSendMsg                      },
    195            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    196          #else
    197            /* ZCL_CMD_WRITE */               { NULL,                          NULL                            },
    198            /* ZCL_CMD_WRITE_UNDIVIDED */     { NULL,                          NULL                            },
    199            /* ZCL_CMD_WRITE_RSP */           { NULL,                          NULL                            },
    200            /* ZCL_CMD_WRITE_NO_RSP */        { NULL,                          NULL                            },
    201          #endif // ZCL_WRITE
    202          
    203          #ifdef ZCL_REPORT
    204            /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zclSendMsg                      },
    205            /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zclSendMsg                      },
    206            /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zclSendMsg                      },
    207            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zclSendMsg                      },
    208            /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zclSendMsg                      },
    209          #else
    210            /* ZCL_CMD_CONFIG_REPORT */       { NULL,                          NULL                            },
    211            /* ZCL_CMD_CONFIG_REPORT_RSP */   { NULL,                          NULL                            },
    212            /* ZCL_CMD_READ_REPORT_CFG */     { NULL,                          NULL                            },
    213            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { NULL,                          NULL                            },
    214            /* ZCL_CMD_REPORT */              { NULL,                          NULL                            },
    215          #endif // ZCL_REPORT
    216          
    217            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zclSendMsg                      },
    218            
    219          #ifdef ZCL_DISCOVER  
    220            /* ZCL_CMD_DISCOVER */            { zclParseInDiscCmd,             zclProcessInDiscCmd             },
    221            /* ZCL_CMD_DISCOVER_RSP */        { zclParseInDiscRspCmd,          zclSendMsg                      }
    222          #else
    223            /* ZCL_CMD_DISCOVER */            { NULL,                          NULL                            },
    224            /* ZCL_CMD_DISCOVER_RSP */        { NULL,                          NULL                            }
    225          #endif // ZCL_DISCOVER
    226          };
    227          
    228          /*********************************************************************
    229           * PUBLIC FUNCTIONS
    230           *********************************************************************/
    231          
    232          /*********************************************************************
    233           * @fn          zcl_Init
    234           * @brief       Initialization function for the zcl layer.
    235           * @param       task_id - ZCL task id
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    238          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    239            zcl_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#zcl_TaskID
   \   000008   F0           MOVX    @DPTR,A
    240          
    241            plugins = (zclLibPlugin_t  *)NULL;
   \   000009   90....       MOV     DPTR,#plugins
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
    242            attrList = (zclAttrRecsList *)NULL;
   \   000010   90....       MOV     DPTR,#attrList
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    243            clusterOptionList = (zclClusterOptionList *)NULL;
   \   000016   90....       MOV     DPTR,#clusterOptionList
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    244          }
   \   00001C   02....       LJMP    ?Subroutine83 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    245          
    246          /*********************************************************************
    247           * @fn          zcl_event_loop
    248           * @brief       Event Loop Processor for zcl.
    249           * @param       task_id - task id
    250           *              events - event bitmap
    251           * @return      unprocessed events
    252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    254          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    255            uint8 *msgPtr;
    256            (void)task_id;  // Intentionally unreferenced parameter
    257            
    258            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   55..         ANL     A,?V0 + 1
   \   00000D   F9           MOV     R1,A
   \   00000E   E4           CLR     A
   \   00000F   7001         JNZ     ??zcl_event_loop_0
   \   000011   E9           MOV     A,R1
   \                     ??zcl_event_loop_0:
   \   000012   604B         JZ      ??zcl_event_loop_1
    259            {
    260              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000014                ; Setup parameters for call to function osal_msg_receive
   \   000014   800E         SJMP    ??zcl_event_loop_2
    261              while ( msgPtr != NULL )
    262              {
    263                uint8 dealloc = TRUE;
    264                
    265                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    266                {
    267                  zclProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_3:
   \   000016                ; Setup parameters for call to function zclProcessMessageMSG
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??zclProcessMessageMSG?relay
    268                }
    269                else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
    270                {
    271                  osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr ); // send it to another task to process.
    272                  dealloc = FALSE;
    273                }
    274                if ( dealloc ) // Release the memory
    275                {
    276                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_4:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    277                }
    278                msgPtr = osal_msg_receive( zcl_TaskID ); // Next
   \                     ??zcl_event_loop_2:
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \   000024   90....       MOV     DPTR,#zcl_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   \   000030   AE..         MOV     R6,?V0 + 2
   \   000032   AF..         MOV     R7,?V0 + 3
   \   000034   EE           MOV     A,R6
   \   000035   7001         JNZ     ??zcl_event_loop_5
   \   000037   EF           MOV     A,R7
   \                     ??zcl_event_loop_5:
   \   000038   601C         JZ      ??zcl_event_loop_6
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   641A         XRL     A,#0x1a
   \   000041   60D3         JZ      ??zcl_event_loop_3
   \   000043   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FF         XRL     A,#0xff
   \   000049   60D2         JZ      ??zcl_event_loop_4
   \   00004B                ; Setup parameters for call to function osal_msg_send
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??osal_msg_send?relay
   \   000054   80CE         SJMP    ??zcl_event_loop_2
    279              } 
    280              return (events ^ SYS_EVENT_MSG);// return unprocessed events
   \                     ??zcl_event_loop_6:
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   7480         MOV     A,#-0x80
   \   00005A   65..         XRL     A,?V0 + 1
   \   00005C   FB           MOV     R3,A
   \   00005D   8004         SJMP    ??zcl_event_loop_7
    281            }
    282            return 0; // Discard unknown events
   \                     ??zcl_event_loop_1:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??zcl_event_loop_7:
   \   000063   02....       LJMP    ?Subroutine84 & 0xFFFF
    283          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    284          
    285          /*********************************************************************
    286           * @fn          zcl_registerPlugin
    287           * @brief       Add a Cluster Library handler
    288           * @param       startClusterID - starting cluster ID
    289           *              endClusterID - ending cluster ID
    290           *              pfnHdlr - function pointer to incoming message handler
    291           * @return      ZSuccess if OK
    292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    294                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    295          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine35 & 0xFFFF
    296            zclLibPlugin_t *pNewItem;
    297            zclLibPlugin_t *pLoop;
    298          
    299            // Fill in the new profile list
    300            pNewItem = osal_mem_alloc( sizeof( zclLibPlugin_t ) );
   \                     ??CrossCallReturnLabel_46:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A08         MOV     R2,#0x8
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_mem_alloc?relay
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
   \   000020   A8..         MOV     R0,?V0 + 4
   \   000022   A9..         MOV     R1,?V0 + 5
    301            if ( pNewItem == NULL )
   \   000024   E8           MOV     A,R0
   \   000025   7001         JNZ     ??zcl_registerPlugin_0
   \   000027   E9           MOV     A,R1
   \                     ??zcl_registerPlugin_0:
   \   000028   7004         JNZ     ??zcl_registerPlugin_1
    302              return (ZMemError);
   \   00002A   7910         MOV     R1,#0x10
   \   00002C   8055         SJMP    ??CrossCallReturnLabel_14
    303          
    304            // Fill in the plugin record.
    305            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_1:
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine14 & 0xFFFF
    306            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_19:
   \   000038   A3           INC     DPTR
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   12....       LCALL   ?Subroutine14 & 0xFFFF
    307            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_20:
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E5..         MOV     A,?V0 + 2
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0 + 3
   \   00004B   F0           MOVX    @DPTR,A
    308            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   EA           MOV     A,R2
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   EB           MOV     A,R3
   \   00005E   F0           MOVX    @DPTR,A
    309          
    310            if (  plugins == NULL ) // Find spot in list
   \   00005F   90....       MOV     DPTR,#plugins
   \   000062   E0           MOVX    A,@DPTR
   \   000063   7002         JNZ     ??zcl_registerPlugin_2
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \                     ??zcl_registerPlugin_2:
   \   000067   90....       MOV     DPTR,#plugins
   \   00006A   6014         JZ      ??zcl_registerPlugin_3
    311            {
    312              plugins = pNewItem;
    313            }
    314            else
    315            {
    316              // Look for end of list
    317              pLoop = plugins;
   \   00006C   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00006F   8003         SJMP    ??zcl_registerPlugin_4
    318              while ( pLoop->next != NULL )
    319                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_5:
   \   000071   EA           MOV     A,R2
   \   000072   FC           MOV     R4,A
   \   000073   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_4:
   \   000074   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000077   7001         JNZ     ??zcl_registerPlugin_6
   \   000079   EB           MOV     A,R3
   \                     ??zcl_registerPlugin_6:
   \   00007A   70F5         JNZ     ??zcl_registerPlugin_5
    320          
    321              pLoop->next = pNewItem; // Put new item at end of list
   \   00007C   8C82         MOV     DPL,R4
   \   00007E   8D83         MOV     DPH,R5
    322            }
   \                     ??zcl_registerPlugin_3:
   \   000080   12....       LCALL   ?Subroutine11 & 0xFFFF
    323            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_14:
   \   000083                REQUIRE ?Subroutine85
   \   000083                ; // Fall through to label ?Subroutine85
    324          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine99_0
   \   000005                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    325          
    326          /*********************************************************************
    327           * @fn          zcl_registerAttrList
    328           * @brief       Register an Attribute List with ZCL Foundation
    329           * @param       endpoint - endpoint the attribute list belongs to
    330           *              numAttr - number of attributes in list
    331           *              newAttrList - array of Attribute records.
    332           *
    333           *              NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN ASCENDING ORDER.
    334           *                    OTHERWISE, THE DISCOVERY RESPONSE COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    335           * @return      ZSuccess if OK
    336           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    337          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    338          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine50 & 0xFFFF
    339            zclAttrRecsList *pNewItem;
    340            zclAttrRecsList *pLoop;
    341          
    342            pNewItem = osal_mem_alloc( sizeof( zclAttrRecsList ) ); // Fill in the new profile list
    343            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_63:
   \   000008   7001         JNZ     ??zcl_registerAttrList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerAttrList_0:
   \   00000B   7004         JNZ     ??zcl_registerAttrList_1
    344              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_15
    345          
    346            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    347            pNewItem->endpoint = endpoint;
    348            pNewItem->numAttributes = numAttr;
    349            pNewItem->attrs = newAttrList;
    350          
    351            if ( attrList == NULL ) // Find spot in list
   \                     ??CrossCallReturnLabel_0:
   \   000014   90....       MOV     DPTR,#attrList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerAttrList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerAttrList_2:
   \   00001C   90....       MOV     DPTR,#attrList
   \   00001F   6014         JZ      ??zcl_registerAttrList_3
    352            {
    353              attrList = pNewItem;
    354            }
    355            else
    356            {
    357              pLoop = attrList; // Look for end of list
   \   000021   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000024   8003         SJMP    ??zcl_registerAttrList_4
    358              while ( pLoop->next != NULL )
    359                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_4:
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00002C   7001         JNZ     ??zcl_registerAttrList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerAttrList_6:
   \   00002F   70F5         JNZ     ??zcl_registerAttrList_5
    360          
    361              pLoop->next = pNewItem; // Put new item at end of list
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    362            }
   \                     ??zcl_registerAttrList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    363            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_15:
   \   000038   02....       LJMP    ?Subroutine84 & 0xFFFF
    364          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   89..         MOV     ?V0 + 0,R1
   \   000002   8A..         MOV     ?V0 + 1,R2
   \   000004   EC           MOV     A,R4
   \   000005   FE           MOV     R6,A
   \   000006   ED           MOV     A,R5
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A06         MOV     R2,#0x6
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 2,R2
   \   000011   8B..         MOV     ?V0 + 3,R3
   \   000013   A8..         MOV     R0,?V0 + 2
   \   000015   A9..         MOV     R1,?V0 + 3
   \   000017   E8           MOV     A,R0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00000A   A3           INC     DPTR
   \   00000B   E5..         MOV     A,?V0 + 0
   \   00000D   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000010   E5..         MOV     A,?V0 + 1
   \   000012   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000015   A3           INC     DPTR
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EF           MOV     A,R7
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    365          
    366          /*********************************************************************
    367           * @fn          zcl_registerClusterOptionList
    368           * @brief       Register a Cluster Option List with ZCL Foundation
    369           * @param       endpoint - endpoint the option list belongs to
    370           *              numOption - number of options in list
    371           *              optionList - array of cluster option records.
    372           *                           
    373           *              NOTE: This API should be called to enable 'Application Link Key' security and/or
    374           *                    'APS ACK' for a specific Cluster. The 'Application Link Key' is discarded 
    375           *                    if security isn't enabled on the device. The default behavior is 'Network Key'
    376           *                    when security is enabled and no 'APS ACK' for the ZCL messages.
    377           * @return      ZSuccess if OK
    378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    380          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine50 & 0xFFFF
    381            zclClusterOptionList *pNewItem;
    382            zclClusterOptionList *pLoop;
    383          
    384            // Fill in the new profile list
    385            pNewItem = osal_mem_alloc( sizeof( zclClusterOptionList ) );
    386            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_64:
   \   000008   7001         JNZ     ??zcl_registerClusterOptionList_0
   \   00000A   E9           MOV     A,R1
   \                     ??zcl_registerClusterOptionList_0:
   \   00000B   7004         JNZ     ??zcl_registerClusterOptionList_1
    387              return (ZMemError);
   \   00000D   7910         MOV     R1,#0x10
   \   00000F   8027         SJMP    ??CrossCallReturnLabel_16
    388          
    389            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_1:
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
    390            pNewItem->endpoint = endpoint;
    391            pNewItem->numOptions = numOption;
    392            pNewItem->options = optionList;
    393          
    394            // Find spot in list
    395            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_1:
   \   000014   90....       MOV     DPTR,#clusterOptionList
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7002         JNZ     ??zcl_registerClusterOptionList_2
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \                     ??zcl_registerClusterOptionList_2:
   \   00001C   90....       MOV     DPTR,#clusterOptionList
   \   00001F   6014         JZ      ??zcl_registerClusterOptionList_3
    396            {
    397              clusterOptionList = pNewItem;
    398            }
    399            else
    400            {
    401              // Look for end of list
    402              pLoop = clusterOptionList;
   \   000021   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000024   8003         SJMP    ??zcl_registerClusterOptionList_4
    403              while ( pLoop->next != NULL )
    404                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_5:
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_4:
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00002C   7001         JNZ     ??zcl_registerClusterOptionList_6
   \   00002E   EB           MOV     A,R3
   \                     ??zcl_registerClusterOptionList_6:
   \   00002F   70F5         JNZ     ??zcl_registerClusterOptionList_5
    405          
    406              // Put new item at end of list
    407              pLoop->next = pNewItem;
   \   000031   8C82         MOV     DPL,R4
   \   000033   8D83         MOV     DPH,R5
    408            }
   \                     ??zcl_registerClusterOptionList_3:
   \   000035   12....       LCALL   ?Subroutine11 & 0xFFFF
    409          
    410            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_16:
   \   000038   02....       LJMP    ?Subroutine84 & 0xFFFF
    411          }
    412          
    413          /*********************************************************************
    414           * @fn          zcl_registerValidateAttrData
    415           * @brief       Add a validation function for attribute data
    416           * @param       pfnValidateAttrData - function pointer to validate routine
    417           * @return      ZSuccess if OK
    418           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    420          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    421            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000007   EA           MOV     A,R2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
    422            
    423            return ( ZSuccess );
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   80..         SJMP    ?Subroutine83
    424          }
    425          
    426          /*********************************************************************
    427           * @fn      zcl_registerForMsg
    428           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    429           *          messages that aren't processed to one task (if a task is
    430           *          registered).
    431           * @param   taskId - task Id of the Application where commands will be sent to
    432           * @return  TRUE if task registeration successful, FALSE otherwise
    433           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    435          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    436            // Allow only the first task
    437            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000004   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64FF         XRL     A,#0xff
   \   00000A   7006         JNZ     ??zcl_registerForMsg_0
    438            {
    439              zcl_RegisteredMsgTaskID = taskId;  
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
    440              return ( true );
   \   00000E   7901         MOV     R1,#0x1
   \   000010   8002         SJMP    ??zcl_registerForMsg_1
    441            }
    442            return ( false );
   \                     ??zcl_registerForMsg_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??zcl_registerForMsg_1:
   \   000014                REQUIRE ?Subroutine83
   \   000014                ; // Fall through to label ?Subroutine83
    443          }
    444          
    445          /*********************************************************************
    446           * @fn      zcl_DeviceOperational
    447           * @brief   Used to see whether or not the device can send or respond 
    448           *          to application level commands.
    449           * @param   srcEP - source endpoint
    450           *          clusterID - cluster ID
    451           *          frameType - command type
    452           *          cmd - command ID
    453           * @return  TRUE if device is operational, FALSE otherwise
    454           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    455          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, 
   \                     zcl_DeviceOperational:
    456                                              uint8 frameType, uint8 cmd, uint16 profileID )
    457          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    458            zclAttrRec_t attrRec;
    459            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000A   7401         MOV     A,#0x1
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   F0           MOVX    @DPTR,A
    460            
    461            (void)profileID;  // Intentionally unreferenced parameter
    462            
    463            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it 
    464            // cannot send or respond to application level commands, other than commands
    465            // to read or write attributes. Note that the Identify cluster cannot be 
    466            // disabled, and remains functional regardless of this setting.
    467            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000013   EC           MOV     A,R4
   \   000014   700A         JNZ     ??zcl_DeviceOperational_0
   \   000016   ED           MOV     A,R5
   \   000017   C3           CLR     C
   \   000018   9406         SUBB    A,#0x6
   \   00001A   5004         JNC     ??zcl_DeviceOperational_0
    468              return ( TRUE );
   \                     ??zcl_DeviceOperational_1:
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   804E         SJMP    ??zcl_DeviceOperational_2
    469            
    470            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV     A,#0x3
   \   000022   6A           XRL     A,R2
   \   000023   7001         JNZ     ??zcl_DeviceOperational_3
   \   000025   EB           MOV     A,R3
   \                     ??zcl_DeviceOperational_3:
   \   000026   60F4         JZ      ??zcl_DeviceOperational_1
    471              return ( TRUE );
    472            
    473            // Is device enabled?
    474            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC, ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000028                ; Setup parameters for call to function zclFindAttrRec
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   8582..       MOV     ?V0 + 0,DPL
   \   000030   8583..       MOV     ?V0 + 1,DPH
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C12         MOV     R4,#0x12
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??zclFindAttrRec?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6016         JZ      ??zcl_DeviceOperational_4
    475              zclReadAttrData( &deviceEnabled, &attrRec );
   \   00004B                ; Setup parameters for call to function zclReadAttrData
   \   00004B   7401         MOV     A,#0x1
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AC82         MOV     R4,DPL
   \   000052   AD83         MOV     R5,DPH
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??zclReadAttrData?relay
    476            
    477            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_4:
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   60B0         JZ      ??zcl_DeviceOperational_1
   \   00006C   7900         MOV     R1,#0x0
   \                     ??zcl_DeviceOperational_2:
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   02....       LJMP    ?Subroutine93 & 0xFFFF
    478          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    479          
    480          /*********************************************************************
    481           * @fn      zcl_SendCommand
    482           * @brief   Used to send Profile and Cluster Specific Command messages.
    483           *          NOTE: The calling application is responsible for incrementing the Sequence Number.                
    484           * @param   srcEp - source endpoint
    485           *          destAddr - destination address 
    486           *          clusterID - cluster ID
    487           *          cmd - command ID
    488           *          specific - whether the command is Cluster Specific
    489           *          direction - client/server direction of the command
    490           *          disableDefaultRsp - disable Default Response command
    491           *          manuCode - manufacturer code for proprietary extensions to a profile
    492           *          seqNumber - identification number for the transaction
    493           *          cmdFormatLen - length of the command to be sent
    494           *          cmdFormat - command to be sent
    495           * @return  ZSuccess if OK
    496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
    498                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
    499                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
    500                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    501          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
   \   000010   742A         MOV     A,#0x2a
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   742B         MOV     A,#0x2b
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
   \   00001F   742C         MOV     A,#0x2c
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   742D         MOV     A,#0x2d
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
   \   00002F   742E         MOV     A,#0x2e
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 12,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 13,A
   \   00003B   7430         MOV     A,#0x30
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 7,A
   \   000043   7431         MOV     A,#0x31
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 14,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 15,A
    502            endPointDesc_t *epDesc;
    503            zclFrameHdr_t hdr;
    504            uint8 *msgBuf;
    505            uint16 msgLen;
    506            uint8 *pBuf;
    507            afAddrType_t dstAddr;
    508            uint8 options;
    509            ZStatus_t status;
    510          
    511            osal_memcpy( &dstAddr, destAddr, sizeof ( afAddrType_t ) );
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8A..         MOV     ?V0 + 4,R2
   \   000051   8B..         MOV     ?V0 + 5,R3
   \   000053   75..00       MOV     ?V0 + 6,#0x0
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C0C         MOV     R4,#0xc
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    512          
    513            epDesc = afFindEndPointDesc( srcEP );
   \   00006E                ; Setup parameters for call to function afFindEndPointDesc
   \   00006E   EF           MOV     A,R7
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??afFindEndPointDesc?relay
   \   000073   8A..         MOV     ?V0 + 10,R2
   \   000075   8B..         MOV     ?V0 + 11,R3
    514            if ( epDesc == NULL )
   \   000077   EA           MOV     A,R2
   \   000078   7001         JNZ     ??zcl_SendCommand_0
   \   00007A   EB           MOV     A,R3
   \                     ??zcl_SendCommand_0:
   \   00007B   7005         JNZ     ??zcl_SendCommand_1
    515              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_2:
   \   00007D   7902         MOV     R1,#0x2
   \   00007F   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    516          
    517            if ( clusterID == ZCL_INVALID_CLUSTER_ID )
   \                     ??zcl_SendCommand_1:
   \   000082   74FF         MOV     A,#-0x1
   \   000084   65..         XRL     A,?V0 + 0
   \   000086   7004         JNZ     ??zcl_SendCommand_4
   \   000088   74FF         MOV     A,#-0x1
   \   00008A   65..         XRL     A,?V0 + 1
   \                     ??zcl_SendCommand_4:
   \   00008C   60EF         JZ      ??zcl_SendCommand_2
    518              return ( ZInvalidParameter ); // EMBEDDED RETURN
    519          
    520          #if defined ( INTER_PAN )
    521            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
    522              options = AF_TX_OPTIONS_NONE;
    523            else
    524          #endif
    525              options = zclGetClusterOption( srcEP, clusterID );
   \   00008E                ; Setup parameters for call to function zclGetClusterOption
   \   00008E   AA..         MOV     R2,?V0 + 0
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   EF           MOV     A,R7
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??zclGetClusterOption?relay
   \   000097   E9           MOV     A,R1
   \   000098   F5..         MOV     ?V0 + 2,A
    526            
    527            osal_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \   00009A                ; Setup parameters for call to function osal_memset
   \   00009A   7C06         MOV     R4,#0x6
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??osal_memset?relay
    528          
    529            // Not Profile wide command (like READ, WRITE)
    530            if ( specific )
   \   0000AD   E5..         MOV     A,?V0 + 3
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   6015         JZ      ??zcl_SendCommand_5
    531              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   54FC         ANL     A,#0xfc
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   7401         MOV     A,#0x1
   \   0000C0   48           ORL     A,R0
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E9           MOV     A,R1
   \   0000CA   8006         SJMP    ??zcl_SendCommand_6
    532            else
    533              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_5:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   54FC         ANL     A,#0xfc
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \                     ??zcl_SendCommand_6:
   \   0000D2   F0           MOVX    @DPTR,A
    534          
    535            if ((epDesc->simpleDesc == NULL) ||
    536                (zcl_DeviceOperational(srcEP, clusterID, hdr.fc.type, cmd, epDesc->simpleDesc->AppProfId) == FALSE))
   \   0000D3   85..82       MOV     DPL,?V0 + 10
   \   0000D6   85..83       MOV     DPH,?V0 + 11
   \   0000D9   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0000DC   8882         MOV     DPL,R0
   \   0000DE   8983         MOV     DPH,R1
   \   0000E0   E582         MOV     A,DPL
   \   0000E2   7002         JNZ     ??zcl_SendCommand_7
   \   0000E4   E583         MOV     A,DPH
   \                     ??zcl_SendCommand_7:
   \   0000E6   6020         JZ      ??zcl_SendCommand_8
   \   0000E8                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E8   A3           INC     DPTR
   \   0000E9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000EC   EE           MOV     A,R6
   \   0000ED   FD           MOV     R5,A
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   5403         ANL     A,#0x3
   \   0000F6   FC           MOV     R4,A
   \   0000F7   AA..         MOV     R2,?V0 + 0
   \   0000F9   AB..         MOV     R3,?V0 + 1
   \   0000FB   EF           MOV     A,R7
   \   0000FC   F9           MOV     R1,A
   \   0000FD   12....       LCALL   ??zcl_DeviceOperational?relay
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   E9           MOV     A,R1
   \   000106   7005         JNZ     ??zcl_SendCommand_9
    537              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_8:
   \   000108   7901         MOV     R1,#0x1
   \   00010A   02....       LJMP    ??zcl_SendCommand_3 & 0xFFFF
    538            
    539            if ( manuCode != 0 ) // Fill in the Maufacturer Code
   \                     ??zcl_SendCommand_9:
   \   00010D   E5..         MOV     A,?V0 + 12
   \   00010F   7002         JNZ     ??zcl_SendCommand_10
   \   000111   E5..         MOV     A,?V0 + 13
   \                     ??zcl_SendCommand_10:
   \   000113   6019         JZ      ??zcl_SendCommand_11
    540            {
    541              hdr.fc.manuSpecific = 1;
   \   000115   85..82       MOV     DPL,?XSP + 0
   \   000118   85..83       MOV     DPH,?XSP + 1
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   4404         ORL     A,#0x4
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F0           MOVX    @DPTR,A
    542              hdr.manuCode = manuCode;
   \   000122   7402         MOV     A,#0x2
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   E5..         MOV     A,?V0 + 12
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   E5..         MOV     A,?V0 + 13
   \   00012D   F0           MOVX    @DPTR,A
    543            }
    544            
    545            if ( direction ) // Set the Command Direction
   \                     ??zcl_SendCommand_11:
   \   00012E   E5..         MOV     A,?V0 + 9
   \   000130   85..82       MOV     DPL,?XSP + 0
   \   000133   85..83       MOV     DPH,?XSP + 1
   \   000136   6005         JZ      ??zcl_SendCommand_12
    546              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000138   E0           MOVX    A,@DPTR
   \   000139   4408         ORL     A,#0x8
   \   00013B   8003         SJMP    ??zcl_SendCommand_13
    547            else
    548              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_12:
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   54F7         ANL     A,#0xf7
   \                     ??zcl_SendCommand_13:
   \   000140   F0           MOVX    @DPTR,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F0           MOVX    @DPTR,A
    549          
    550            if ( disableDefaultRsp ) // Set the Disable Default Response field
   \   000144   E5..         MOV     A,?V0 + 8
   \   000146   85..82       MOV     DPL,?XSP + 0
   \   000149   85..83       MOV     DPH,?XSP + 1
   \   00014C   6005         JZ      ??zcl_SendCommand_14
    551              hdr.fc.disableDefaultRsp = 1;
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   4410         ORL     A,#0x10
   \   000151   8003         SJMP    ??zcl_SendCommand_15
    552            else
    553              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_14:
   \   000153   E0           MOVX    A,@DPTR
   \   000154   54EF         ANL     A,#0xef
   \                     ??zcl_SendCommand_15:
   \   000156   F0           MOVX    @DPTR,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F0           MOVX    @DPTR,A
    554                               
    555            hdr.transSeqNum = seqNum; // Fill in the Transaction Sequence Number
   \   00015A   7404         MOV     A,#0x4
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   E5..         MOV     A,?V0 + 7
   \   000161   F0           MOVX    @DPTR,A
    556            
    557            hdr.commandID = cmd; // Fill in the command
   \   000162   7405         MOV     A,#0x5
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   EE           MOV     A,R6
   \   000168   F0           MOVX    @DPTR,A
    558            
    559            msgLen = zclCalcHdrSize( &hdr ); // calculate the needed buffer size
   \   000169   75..03       MOV     ?V0 + 4,#0x3
   \   00016C   85..82       MOV     DPL,?XSP + 0
   \   00016F   85..83       MOV     DPH,?XSP + 1
   \   000172   E0           MOVX    A,@DPTR
   \   000173   5404         ANL     A,#0x4
   \   000175   6003         JZ      ??zcl_SendCommand_16
   \   000177   75..05       MOV     ?V0 + 4,#0x5
    560            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_16:
   \   00017A   E5..         MOV     A,?V0 + 14
   \   00017C   25..         ADD     A,?V0 + 4
   \   00017E   F5..         MOV     ?V0 + 12,A
   \   000180   E5..         MOV     A,?V0 + 15
   \   000182   3400         ADDC    A,#0x0
   \   000184   F5..         MOV     ?V0 + 13,A
    561          
    562            msgBuf = osal_mem_alloc( msgLen ); // Allocate the buffer needed
   \   000186                ; Setup parameters for call to function osal_mem_alloc
   \   000186   AA..         MOV     R2,?V0 + 12
   \   000188   FB           MOV     R3,A
   \   000189   12....       LCALL   ??osal_mem_alloc?relay
   \   00018C   8A..         MOV     ?V0 + 8,R2
   \   00018E   8B..         MOV     ?V0 + 9,R3
    563            if ( msgBuf != NULL )
   \   000190   EA           MOV     A,R2
   \   000191   7001         JNZ     ??zcl_SendCommand_17
   \   000193   EB           MOV     A,R3
   \                     ??zcl_SendCommand_17:
   \   000194   606B         JZ      ??zcl_SendCommand_18
    564            {
    565              pBuf = zclBuildHdr( &hdr, msgBuf ); // Fill in the ZCL Header
    566          
    567              osal_memcpy( pBuf, cmdFormat, cmdFormatLen ); // Fill in the command frame
   \   000196                ; Setup parameters for call to function osal_memcpy
   \   000196   7433         MOV     A,#0x33
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00019E   78..         MOV     R0,#?V0 + 4
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A3                ; Setup parameters for call to function zclBuildHdr
   \   0001A3   AC..         MOV     R4,?V0 + 8
   \   0001A5   AD..         MOV     R5,?V0 + 9
   \   0001A7   7403         MOV     A,#0x3
   \   0001A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AC   AA82         MOV     R2,DPL
   \   0001AE   AB83         MOV     R3,DPH
   \   0001B0   12....       LCALL   ??zclBuildHdr?relay
   \   0001B3   AC..         MOV     R4,?V0 + 14
   \   0001B5   AD..         MOV     R5,?V0 + 15
   \   0001B7   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001BA   12....       LCALL   ?DEALLOC_XSTACK8
    568          
    569              status = AF_DataRequest( &dstAddr, epDesc, clusterID, msgLen, msgBuf, 
    570                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );  
   \   0001BD                ; Setup parameters for call to function AF_DataRequest
   \   0001BD   75..1E       MOV     ?V0 + 3,#0x1e
   \   0001C0   78..         MOV     R0,#?V0 + 3
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C5   75....       MOV     ?V0 + 4,#(zcl_TransID & 0xff)
   \   0001C8   75....       MOV     ?V0 + 5,#((zcl_TransID >> 8) & 0xff)
   \   0001CB   78..         MOV     R0,#?V0 + 4
   \   0001CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D0   78..         MOV     R0,#?V0 + 8
   \   0001D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D5   78..         MOV     R0,#?V0 + 12
   \   0001D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DA   78..         MOV     R0,#?V0 + 0
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DF   A9..         MOV     R1,?V0 + 2
   \   0001E1   AC..         MOV     R4,?V0 + 10
   \   0001E3   AD..         MOV     R5,?V0 + 11
   \   0001E5   740F         MOV     A,#0xf
   \   0001E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EA   AA82         MOV     R2,DPL
   \   0001EC   AB83         MOV     R3,DPH
   \   0001EE   12....       LCALL   ??AF_DataRequest?relay
   \   0001F1   7409         MOV     A,#0x9
   \   0001F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F6   E9           MOV     A,R1
   \   0001F7   FE           MOV     R6,A
    571              osal_mem_free ( msgBuf );
   \   0001F8                ; Setup parameters for call to function osal_mem_free
   \   0001F8   AA..         MOV     R2,?V0 + 8
   \   0001FA   AB..         MOV     R3,?V0 + 9
   \   0001FC   12....       LCALL   ??osal_mem_free?relay
   \   0001FF   8002         SJMP    ??zcl_SendCommand_19
    572            }
    573            else
    574              status = ZMemError;
   \                     ??zcl_SendCommand_18:
   \   000201   7E10         MOV     R6,#0x10
    575          
    576            return ( status );
   \                     ??zcl_SendCommand_19:
   \   000203   EE           MOV     A,R6
   \   000204   F9           MOV     R1,A
   \                     ??zcl_SendCommand_3:
   \   000205                REQUIRE ?Subroutine98
   \   000205                ; // Fall through to label ?Subroutine98
    577          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   7412         MOV     A,#0x12
   \   000002   80..         SJMP    ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine115_0
   \   000002                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine116_0
   \   000001                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET
    578          
    579          #ifdef ZCL_READ
    580          /*********************************************************************
    581           * @fn      zcl_SendRead
    582           * @brief   Send a Read command
    583           * @param   srcEP - Application's endpoint
    584           *          dstAddr - destination address
    585           *          clusterID - cluster ID
    586           *          readCmd - read command to be sent
    587           *          direction - direction of the command
    588           *          seqNum - transaction sequence number
    589           * @return  ZSuccess if OK
    590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
    592                                  uint16 clusterID, zclReadCmd_t *readCmd,
    593                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
    594          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 8,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 9,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 12,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 13,A
    595            uint8 dataLen;
    596            uint8 *buf;
    597            uint8 *pBuf;
    598            ZStatus_t status;
    599          
    600            dataLen = readCmd->numAttr * 2; // Attribute ID
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   33           RLC     A
   \   000036   FA           MOV     R2,A
    601          
    602            buf = osal_mem_alloc( dataLen );
   \   000037   8A82         MOV     DPL,R2
   \   000039   8582..       MOV     ?V0 + 6,DPL
   \   00003C   75..00       MOV     ?V0 + 7,#0x0
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   12....       LCALL   ?Subroutine53 & 0xFFFF
    603            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_69:
   \   000042   7001         JNZ     ??zcl_SendRead_0
   \   000044   EB           MOV     A,R3
   \                     ??zcl_SendRead_0:
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??zcl_SendRead_1 & 0xFFFF
    604            {
    605              uint8 i;
    606          
    607              pBuf = buf; // Load the buffer - serially
   \   00004A   A8..         MOV     R0,?V0 + 2
   \   00004C   A9..         MOV     R1,?V0 + 3
    608              for (i = 0; i < readCmd->numAttr; i++)
   \   00004E   75..00       MOV     ?V0 + 10,#0x0
   \   000051   801F         SJMP    ??zcl_SendRead_2
    609              {
    610                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_3:
   \   000053   E5..         MOV     A,?V0 + 10
   \   000055   C3           CLR     C
   \   000056   33           RLC     A
   \   000057   FA           MOV     R2,A
   \   000058   E4           CLR     A
   \   000059   33           RLC     A
   \   00005A   FB           MOV     R3,A
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   2A           ADD     A,R2
   \   00005E   F582         MOV     DPL,A
   \   000060   E5..         MOV     A,?V0 + 5
   \   000062   3B           ADDC    A,R3
   \   000063   F583         MOV     DPH,A
   \   000065   A3           INC     DPTR
   \   000066   AA82         MOV     R2,DPL
   \   000068   AB83         MOV     R3,DPH
   \   00006A   12....       LCALL   ?Subroutine38 & 0xFFFF
    611                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   \                     ??CrossCallReturnLabel_128:
   \   00006D   12....       LCALL   ?Subroutine24 & 0xFFFF
    612              }
   \                     ??CrossCallReturnLabel_137:
   \   000070   05..         INC     ?V0 + 10
   \                     ??zcl_SendRead_2:
   \   000072   85..82       MOV     DPL,?V0 + 4
   \   000075   85..83       MOV     DPH,?V0 + 5
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FA           MOV     R2,A
   \   00007A   E5..         MOV     A,?V0 + 10
   \   00007C   C3           CLR     C
   \   00007D   9A           SUBB    A,R2
   \   00007E   40D3         JC      ??zcl_SendRead_3
    613              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
    614                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );  
   \   000080                ; Setup parameters for call to function zcl_SendCommand
   \   000080   78..         MOV     R0,#?V0 + 2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   78..         MOV     R0,#?V0 + 6
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   E5..         MOV     A,?V0 + 13
   \   00008C   F5..         MOV     ?V0 + 4,A
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..00       MOV     ?V0 + 4,#0x0
   \   000096   75..00       MOV     ?V0 + 5,#0x0
   \   000099   78..         MOV     R0,#?V0 + 4
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   E5..         MOV     A,?V0 + 12
   \   0000A0   F5..         MOV     ?V0 + 4,A
   \   0000A2   78..         MOV     R0,#?V0 + 4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   E5..         MOV     A,?V0 + 9
   \   0000A9   F5..         MOV     ?V0 + 4,A
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..00       MOV     ?V0 + 4,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   78..         MOV     R0,#?V0 + 4
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   AC..         MOV     R4,?V0 + 0
   \   0000BF   AD..         MOV     R5,?V0 + 1
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   A9..         MOV     R1,?V0 + 8
   \   0000C7   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
   \   0000CE   FE           MOV     R6,A
    615              osal_mem_free( buf );
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V0 + 2
   \   0000D1   AB..         MOV     R3,?V0 + 3
   \   0000D3   12....       LCALL   ??osal_mem_free?relay
   \   0000D6   8002         SJMP    ??zcl_SendRead_4
    616            }
    617            else
    618              status = ZMemError;
   \                     ??zcl_SendRead_1:
   \   0000D8   7E10         MOV     R6,#0x10
    619          
    620            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000DA                REQUIRE ?Subroutine95
   \   0000DA                ; // Fall through to label ?Subroutine95
    621          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine101_0
   \   000002                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine102_0
   \   000005                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   A882         MOV     R0,DPL
   \   000002   A983         MOV     R1,DPH
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_mem_alloc?relay
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   7418         MOV     A,#0x18
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   02....       LJMP    ?Subroutine90 & 0xFFFF
    622          
    623          /*********************************************************************
    624           * @fn      zcl_SendReadRsp
    625           * @brief   Send a Read Response command.
    626           * @param   srcEP - Application's endpoint
    627           *          dstAddr - destination address
    628           *          clusterID - cluster ID
    629           *          readRspCmd - read response command to be sent
    630           *          direction - direction of the command
    631           *          seqNum - transaction sequence number
    632           * @return  ZSuccess if OK
    633           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7404         MOV     A,#0x4
   \   000004                REQUIRE ??Subroutine100_0
   \   000004                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
    635                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
    636                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    637          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 10,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 9,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 8,A
    638            uint8 *buf;
    639            uint8 *pBuf;
    640            zclReadRspStatus_t *statusRec;
    641            uint8 len = 0;
   \   00002E   7E00         MOV     R6,#0x0
    642            uint8 i;
    643            ZStatus_t status;
    644            
    645            // calculate the size of the command
    646            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000030   8E..         MOV     ?V0 + 5,R6
   \   000032   8021         SJMP    ??zcl_SendReadRsp_0
    647            {
    648              statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_1:
   \   000034   E5..         MOV     A,?V0 + 5
   \   000036   75F006       MOV     B,#0x6
   \   000039   12....       LCALL   ?Subroutine60 & 0xFFFF
    649              
    650              len += 2 + 1; // Attribute ID + Status
   \                     ??CrossCallReturnLabel_77:
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   0E           INC     R6
    651          
    652              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   700F         JNZ     ??zcl_SendReadRsp_2
    653              {
    654                len++; // Attribute Data Type
    655                len += zclGetAttrDataLength( statusRec->dataType, statusRec->data); // Attribute Data
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine28 & 0xFFFF
    656              }
    657            }
   \                     ??CrossCallReturnLabel_140:
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000050   04           INC     A
   \   000051   2E           ADD     A,R6
   \   000052   FE           MOV     R6,A
   \                     ??zcl_SendReadRsp_2:
   \   000053   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_0:
   \   000055   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000058   40DA         JC      ??zcl_SendReadRsp_1
    658          
    659            buf = osal_mem_alloc( len );
   \   00005A   12....       LCALL   ?Subroutine54 & 0xFFFF
    660            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_71:
   \   00005D   7001         JNZ     ??zcl_SendReadRsp_3
   \   00005F   EB           MOV     A,R3
   \                     ??zcl_SendReadRsp_3:
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??zcl_SendReadRsp_4 & 0xFFFF
    661            {
    662              // Load the buffer - serially
    663              pBuf = buf;
   \   000065   AE..         MOV     R6,?V0 + 6
   \   000067   AF..         MOV     R7,?V0 + 7
    664              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000069   75..00       MOV     ?V0 + 5,#0x0
   \   00006C   8028         SJMP    ??zcl_SendReadRsp_5
    665              {
    666                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zcl_SendReadRsp_6:
   \   00006E   E5..         MOV     A,?V0 + 5
   \   000070   75F006       MOV     B,#0x6
   \   000073   12....       LCALL   ?Subroutine1 & 0xFFFF
    667                
    668                *pBuf++ = LO_UINT16( statusRec->attrID );
    669                *pBuf++ = HI_UINT16( statusRec->attrID );
    670                *pBuf++ = statusRec->status;
   \                     ??CrossCallReturnLabel_2:
   \   000076   FA           MOV     R2,A
   \   000077   E9           MOV     A,R1
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FB           MOV     R3,A
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   12....       LCALL   ?Subroutine80 & 0xFFFF
    671          
    672                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_104:
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   700B         JNZ     ??CrossCallReturnLabel_124
    673                {
    674                  *pBuf++ = statusRec->dataType;
   \   000089   E8           MOV     A,R0
   \   00008A   2403         ADD     A,#0x3
   \   00008C   12....       LCALL   ?Subroutine39 & 0xFFFF
    675                  zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
    676                  
    677                  // move pass attribute data
    678                  pBuf += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
    679                }
    680              } // for loop
   \                     ??CrossCallReturnLabel_53:
   \   00008F   2404         ADD     A,#0x4
   \   000091   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000094   05..         INC     ?V0 + 5
   \                     ??zcl_SendReadRsp_5:
   \   000096   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000099   40D3         JC      ??zcl_SendReadRsp_6
    681          
    682              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE, 
    683                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \   00009B                ; Setup parameters for call to function zcl_SendCommand
   \   00009B   78..         MOV     R0,#?V0 + 6
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   E5..         MOV     A,?V0 + 8
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   75..00       MOV     ?V0 + 0,#0x0
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   E5..         MOV     A,?V0 + 9
   \   0000B8   F5..         MOV     ?V0 + 0,A
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   E5..         MOV     A,?V0 + 10
   \   0000C1   F5..         MOV     ?V0 + 0,A
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   75..00       MOV     ?V0 + 0,#0x0
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   75..01       MOV     ?V0 + 0,#0x1
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   740B         MOV     A,#0xb
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000E0   740D         MOV     A,#0xd
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   \   0000EC   FE           MOV     R6,A
    684              osal_mem_free( buf );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV     R2,?V0 + 6
   \   0000EF   AB..         MOV     R3,?V0 + 7
   \   0000F1   12....       LCALL   ??osal_mem_free?relay
   \   0000F4   8002         SJMP    ??zcl_SendReadRsp_7
    685            }
    686            else
    687              status = ZMemError;
   \                     ??zcl_SendReadRsp_4:
   \   0000F6   7E10         MOV     R6,#0x10
    688          
    689            return ( status );
   \                     ??zcl_SendReadRsp_7:
   \   0000F8   02....       LJMP    ?Subroutine94 & 0xFFFF
    690          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine103_0
   \   000004                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FB           MOV     R3,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000005   E9           MOV     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000007                REQUIRE ?Subroutine90
   \   000007                ; // Fall through to label ?Subroutine90

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   75..00       MOV     ?V0 + 1,#0x0
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   AA..         MOV     R2,?V0 + 0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   EA           MOV     A,R2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   741E         MOV     A,#0x1e
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F5..         MOV     ?V0 + 12,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 13,A
   \   000007   85..82       MOV     DPL,?V0 + 12
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   A9..         MOV     R1,?V0 + 4
   \   000005   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   E5..         MOV     A,?V0 + 5
   \   00000A   C3           CLR     C
   \   00000B   9A           SUBB    A,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F5..         MOV     ?V0 + 14,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007                ; Setup parameters for call to function zclSerializeData
   \   000007   EE           MOV     A,R6
   \   000008   FC           MOV     R4,A
   \   000009   EF           MOV     A,R7
   \   00000A   FD           MOV     R5,A
   \   00000B   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000E   12....       LCALL   ??zclSerializeData?relay
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011                ; Setup parameters for call to function zclGetAttrDataLength
   \   000011   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000014   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000017   E9           MOV     A,R1
   \   000018   F8           MOV     R0,A
   \   000019   EE           MOV     A,R6
   \   00001A   28           ADD     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C                REQUIRE ?Subroutine89
   \   00001C                ; // Fall through to label ?Subroutine89

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   85..82       MOV     DPL,?V0 + 12
   \   00000E   85..83       MOV     DPH,?V0 + 13
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   EC           MOV     A,R4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   ED           MOV     A,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   89..         MOV     ?V0 + 4,R1
   \   000012   741C         MOV     A,#0x1c
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   AE82         MOV     R6,DPL
   \   00000C   AF83         MOV     R7,DPH
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000016   2402         ADD     A,#0x2
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 3
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   FD           MOV     R5,A
   \   000004   22           RET
    691          #endif // ZCL_READ
    692          
    693          #ifdef ZCL_WRITE
    694          /*********************************************************************
    695           * @fn      sendWriteRequest
    696           * @brief   Send a Write command
    697           * @param   dstAddr - destination address
    698           *          clusterID - cluster ID
    699           *          writeCmd - write command to be sent
    700           *          cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
    701           *          direction - direction of the command
    702           *          seqNum - transaction sequence number
    703           * @return  ZSuccess if OK
    704           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    705          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, 
   \                     zcl_SendWriteRequest:
    706                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction, 
    707                                          uint8 disableDefaultRsp, uint8 seqNum )
    708          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   \   00001E   741F         MOV     A,#0x1f
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 10,A
   \   000026   7420         MOV     A,#0x20
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 9,A
   \   00002E   7421         MOV     A,#0x21
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 8,A
    709            uint8 *buf;
    710            uint8 *pBuf;
    711            zclWriteRec_t *statusRec;
    712            uint8 attrDataLen;
    713            uint8 dataLen = 0;
   \   000036   7E00         MOV     R6,#0x0
    714            uint8 i;
    715            ZStatus_t status;
    716            
    717            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000038   8E..         MOV     ?V0 + 5,R6
   \   00003A   8014         SJMP    ??zcl_SendWriteRequest_0
    718            {
    719              statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   00003C   E5..         MOV     A,?V0 + 5
   \   00003E   75F005       MOV     B,#0x5
   \   000041   12....       LCALL   ?Subroutine60 & 0xFFFF
    720              
    721              attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    722              dataLen += 2 + 1 + attrDataLen; // Attribute ID + Attribute Type + Attribute Data
   \                     ??CrossCallReturnLabel_78:
   \   000044                ; Setup parameters for call to function zclGetAttrDataLength
   \   000044   12....       LCALL   ?Subroutine28 & 0xFFFF
    723            }
   \                     ??CrossCallReturnLabel_141:
   \   000047   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00004A   2403         ADD     A,#0x3
   \   00004C   2E           ADD     A,R6
   \   00004D   FE           MOV     R6,A
   \   00004E   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_0:
   \   000050   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000053   40E7         JC      ??zcl_SendWriteRequest_1
    724          
    725            buf = osal_mem_alloc( dataLen );
   \   000055   12....       LCALL   ?Subroutine54 & 0xFFFF
    726            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_72:
   \   000058   7001         JNZ     ??zcl_SendWriteRequest_2
   \   00005A   EB           MOV     A,R3
   \                     ??zcl_SendWriteRequest_2:
   \   00005B   607C         JZ      ??zcl_SendWriteRequest_3
    727            {
    728              // Load the buffer - serially
    729              pBuf = buf;
   \   00005D   AE..         MOV     R6,?V0 + 6
   \   00005F   AF..         MOV     R7,?V0 + 7
    730              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000061   75..00       MOV     ?V0 + 5,#0x0
   \   000064   8012         SJMP    ??zcl_SendWriteRequest_4
    731              { 
    732                statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_5:
   \   000066   E5..         MOV     A,?V0 + 5
   \   000068   75F005       MOV     B,#0x5
   \   00006B   12....       LCALL   ?Subroutine1 & 0xFFFF
    733                
    734                *pBuf++ = LO_UINT16( statusRec->attrID );
    735                *pBuf++ = HI_UINT16( statusRec->attrID );
    736                *pBuf++ = statusRec->dataType;
    737                
    738                zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
    739                
    740                attrDataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    741                pBuf += attrDataLen; // move pass attribute data
    742              }
   \                     ??CrossCallReturnLabel_3:
   \   00006E   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000071   2403         ADD     A,#0x3
   \   000073   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000076   05..         INC     ?V0 + 5
   \                     ??zcl_SendWriteRequest_4:
   \   000078   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00007B   40E9         JC      ??zcl_SendWriteRequest_5
    743          
    744              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE, 
    745                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007D                ; Setup parameters for call to function zcl_SendCommand
   \   00007D   78..         MOV     R0,#?V0 + 6
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   E5..         MOV     A,?V0 + 8
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   75..00       MOV     ?V0 + 0,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   E5..         MOV     A,?V0 + 9
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   E5..         MOV     A,?V0 + 10
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   75..00       MOV     ?V0 + 0,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   E5..         MOV     A,?V0 + 11
   \   0000B4   F5..         MOV     ?V0 + 0,A
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000C3   740D         MOV     A,#0xd
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   E9           MOV     A,R1
   \   0000CF   FE           MOV     R6,A
    746              osal_mem_free( buf );
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   AA..         MOV     R2,?V0 + 6
   \   0000D2   AB..         MOV     R3,?V0 + 7
   \   0000D4   12....       LCALL   ??osal_mem_free?relay
   \   0000D7   8002         SJMP    ??zcl_SendWriteRequest_6
    747            }
    748            else
    749              status = ZMemError;
   \                     ??zcl_SendWriteRequest_3:
   \   0000D9   7E10         MOV     R6,#0x10
    750          
    751            return ( status);
   \                     ??zcl_SendWriteRequest_6:
   \   0000DB   02....       LJMP    ?Subroutine94 & 0xFFFF
    752          }
    753          
    754          /*********************************************************************
    755           * @fn      zcl_SendWriteRsp
    756           * @brief   Send a Write Response command
    757           * @param   dstAddr - destination address
    758           *          clusterID - cluster ID
    759           *          wrtieRspCmd - write response command to be sent
    760           *          direction - direction of the command
    761           *          seqNum - transaction sequence number
    762           * @return  ZSuccess if OK
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
    765                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
    766                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    767          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 6,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 7,A
   \   00001D   7419         MOV     A,#0x19
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 10,A
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 11,A
    768            uint8 dataLen;
    769            uint8 *buf;
    770            uint8 *pBuf;
    771            uint8 i;
    772            ZStatus_t status;
    773            
    774            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \   00002D   75F003       MOV     B,#0x3
   \   000030   85..82       MOV     DPL,?V0 + 4
   \   000033   85..83       MOV     DPH,?V0 + 5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   A4           MUL     AB
   \   000038   F5..         MOV     ?V0 + 12,A
    775          
    776            buf = osal_mem_alloc( dataLen );
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   FA           MOV     R2,A
   \   00003B   12....       LCALL   ?Subroutine53 & 0xFFFF
    777            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_70:
   \   00003E   7001         JNZ     ??zcl_SendWriteRsp_0
   \   000040   EB           MOV     A,R3
   \                     ??zcl_SendWriteRsp_0:
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??zcl_SendWriteRsp_1 & 0xFFFF
    778            {
    779              // Load the buffer - serially
    780              pBuf = buf;
   \   000046   A8..         MOV     R0,?V0 + 2
   \   000048   A9..         MOV     R1,?V0 + 3
    781              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   00004A   75..00       MOV     ?V0 + 8,#0x0
   \   00004D   802E         SJMP    ??zcl_SendWriteRsp_2
    782              { 
    783                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_3:
   \   00004F   E5..         MOV     A,?V0 + 8
   \   000051   75F003       MOV     B,#0x3
   \   000054   A4           MUL     AB
   \   000055   FA           MOV     R2,A
   \   000056   ABF0         MOV     R3,B
   \   000058   E5..         MOV     A,?V0 + 4
   \   00005A   2A           ADD     A,R2
   \   00005B   FA           MOV     R2,A
   \   00005C   E5..         MOV     A,?V0 + 5
   \   00005E   3B           ADDC    A,R3
   \   00005F   FB           MOV     R3,A
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine38 & 0xFFFF
    784                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_129:
   \   000068   EA           MOV     A,R2
   \   000069   2402         ADD     A,#0x2
   \   00006B   0A           INC     R2
   \   00006C   0A           INC     R2
   \   00006D   EB           MOV     A,R3
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FB           MOV     R3,A
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   12....       LCALL   ??Subroutine102_0 & 0xFFFF
    785                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_136:
   \   000078   12....       LCALL   ?Subroutine24 & 0xFFFF
    786              }
   \                     ??CrossCallReturnLabel_138:
   \   00007B   05..         INC     ?V0 + 8
   \                     ??zcl_SendWriteRsp_2:
   \   00007D   85..82       MOV     DPL,?V0 + 4
   \   000080   85..83       MOV     DPH,?V0 + 5
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   E5..         MOV     A,?V0 + 8
   \   000087   C3           CLR     C
   \   000088   9A           SUBB    A,R2
   \   000089   40C4         JC      ??zcl_SendWriteRsp_3
    787              
    788              // If there's only a single status record and its status field is set to 
    789              // SUCCESS then omit the attribute ID field.
    790              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6401         XRL     A,#0x1
   \   00008E   7007         JNZ     ??zcl_SendWriteRsp_4
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   7003         JNZ     ??zcl_SendWriteRsp_4
    791                dataLen = 1;
   \   000094   75..01       MOV     ?V0 + 12,#0x1
    792                
    793              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
    794                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_4:
   \   000097                ; Setup parameters for call to function zcl_SendCommand
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   75..00       MOV     ?V0 + 13,#0x0
   \   00009F   78..         MOV     R0,#?V0 + 12
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   E5..         MOV     A,?V0 + 11
   \   0000A6   F5..         MOV     ?V0 + 4,A
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   75..00       MOV     ?V0 + 4,#0x0
   \   0000B0   75..00       MOV     ?V0 + 5,#0x0
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   E5..         MOV     A,?V0 + 10
   \   0000BA   F5..         MOV     ?V0 + 4,A
   \   0000BC   78..         MOV     R0,#?V0 + 4
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   E5..         MOV     A,?V0 + 7
   \   0000C3   F5..         MOV     ?V0 + 4,A
   \   0000C5   78..         MOV     R0,#?V0 + 4
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   75..00       MOV     ?V0 + 4,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   75..04       MOV     ?V0 + 4,#0x4
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   AC..         MOV     R4,?V0 + 0
   \   0000DC   AD..         MOV     R5,?V0 + 1
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FB           MOV     R3,A
   \   0000E2   A9..         MOV     R1,?V0 + 6
   \   0000E4   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   FE           MOV     R6,A
    795              osal_mem_free( buf );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   AA..         MOV     R2,?V0 + 2
   \   0000EE   AB..         MOV     R3,?V0 + 3
   \   0000F0   12....       LCALL   ??osal_mem_free?relay
   \   0000F3   8002         SJMP    ??zcl_SendWriteRsp_5
    796            }
    797            else
    798              status = ZMemError;
   \                     ??zcl_SendWriteRsp_1:
   \   0000F5   7E10         MOV     R6,#0x10
    799          
    800            return ( status );
   \                     ??zcl_SendWriteRsp_5:
   \   0000F7   02....       LJMP    ?Subroutine95 & 0xFFFF
    801          }
    802          #endif // ZCL_WRITE
    803          
    804          #ifdef ZCL_REPORT
    805          /*********************************************************************
    806           * @fn      zcl_SendConfigReportCmd
    807           * @brief   Send a Configure Reporting command
    808           * @param   dstAddr - destination address
    809           *          clusterID - cluster ID
    810           *          cfgReportCmd - configure reporting command to be sent
    811           *          direction - direction of the command
    812           *          seqNum - transaction sequence number
    813           * @return  ZSuccess if OK
    814           */
    815          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
    816                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
    817                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    818          {
    819            uint8 *buf;
    820            uint8 *pBuf;
    821            uint8 dataLen = 0;
    822            zclCfgReportRec_t *reportRec;
    823            uint8 reportChangeLen; // length of Reportable Change field
    824            uint8 i;
    825            ZStatus_t status;
    826            
    827            // Find out the data length
    828            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    829            {
    830              reportRec = &(cfgReportCmd->attrList[i]);
    831              
    832              dataLen += 1 + 2; // Direction + Attribute ID
    833              reportChangeLen = 0;
    834              
    835              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    836              {
    837                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
    838                
    839                // Find out the size of the Reportable Change field (for Analog data types)
    840                if ( zclAnalogDataType( reportRec->dataType ) )
    841                {
    842                  reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    843                  dataLen += reportChangeLen;
    844                }
    845              }
    846              else
    847              {
    848                dataLen += 2; // Timeout Period
    849              }
    850            }
    851            
    852            buf = osal_mem_alloc( dataLen );
    853            if ( buf != NULL )
    854            {
    855              // Load the buffer - serially
    856              pBuf = buf;
    857              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
    858              {
    859                reportRec = &(cfgReportCmd->attrList[i]);
    860                
    861                *pBuf++ = reportRec->direction;
    862                *pBuf++ = LO_UINT16( reportRec->attrID );
    863                *pBuf++ = HI_UINT16( reportRec->attrID );
    864                
    865                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
    866                {
    867                  *pBuf++ = reportRec->dataType;
    868                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
    869                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
    870                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
    871                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
    872          
    873                  if ( zclAnalogDataType( reportRec->dataType ) )
    874                  {
    875                    zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
    876                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
    877                    pBuf += reportChangeLen;
    878                  }
    879                }
    880                else
    881                {
    882                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
    883                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
    884                } 
    885              } // for loop
    886              
    887              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE, 
    888                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    889              osal_mem_free( buf );
    890            }
    891            else
    892              status = ZMemError;
    893            
    894            return ( status );
    895          }
    896          
    897          /*********************************************************************
    898           * @fn      zcl_SendConfigReportRspCmd
    899           * @brief   Send a Configure Reporting Response command
    900           * @param   dstAddr - destination address
    901           *          clusterID - cluster ID
    902           *          cfgReportRspCmd - configure reporting response command to be sent
    903           *          direction - direction of the command
    904           *          seqNum - transaction sequence number
    905           * @return  ZSuccess if OK
    906           */
    907          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
    908                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
    909                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    910          {
    911            uint8 dataLen;
    912            uint8 *buf;
    913            uint8 *pBuf;
    914            uint8 i;
    915            ZStatus_t status;
    916            
    917            // Atrribute list (Status, Direction and Attribute ID)
    918            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 ); 
    919            
    920            buf = osal_mem_alloc( dataLen );
    921            if ( buf != NULL )
    922            {
    923              // Load the buffer - serially
    924              pBuf = buf; 
    925              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
    926              {
    927                *pBuf++ = cfgReportRspCmd->attrList[i].status;
    928                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
    929                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
    930                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
    931              }
    932              
    933              // If there's only a single status record and its status field is set to 
    934              // SUCCESS then omit the attribute ID field.
    935              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
    936                dataLen = 1;
    937              
    938              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
    939                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction, 
    940                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
    941              osal_mem_free( buf );
    942            }
    943            else
    944              status = ZMemError;
    945            
    946            return ( status );
    947          }
    948          
    949          /*********************************************************************
    950           * @fn      zcl_SendReadReportCfgCmd
    951           * @brief   Send a Read Reporting Configuration command
    952           * @param   dstAddr - destination address
    953           *          clusterID - cluster ID
    954           *          readReportCfgCmd - read reporting configuration command to be sent
    955           *          direction - direction of the command
    956           *          seqNum - transaction sequence number
    957           * @return  ZSuccess if OK
    958           */
    959          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
    960                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
    961                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    962          {
    963            uint8 dataLen;
    964            uint8 *buf;
    965            uint8 *pBuf;
    966            uint8 i;
    967            ZStatus_t status;
    968           
    969            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
    970            
    971            buf = osal_mem_alloc( dataLen );
    972            if ( buf != NULL )
    973            {
    974              // Load the buffer - serially
    975              pBuf = buf;
    976              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
    977              {
    978                *pBuf++ = readReportCfgCmd->attrList[i].direction;
    979                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
    980                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
    981              }
    982              
    983              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE, 
    984                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
    985              osal_mem_free( buf );
    986            }
    987            else
    988              status = ZMemError;
    989            
    990            return ( status );
    991          }
    992          
    993          /*********************************************************************
    994           * @fn      zcl_SendReadReportCfgRspCmd
    995           * @brief   Send a Read Reporting Configuration Response command
    996           * @param   dstAddr - destination address
    997           *          clusterID - cluster ID
    998           *          readReportCfgRspCmd - read reporting configuration response command to be sent
    999           *          direction - direction of the command
   1000           *          seqNum - transaction sequence number
   1001           * @return  ZSuccess if OK
   1002           */
   1003          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1004                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1005                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1006          {
   1007            uint8 *buf;
   1008            uint8 *pBuf;
   1009            uint8 dataLen = 0;
   1010            zclReportCfgRspRec_t *reportRspRec;
   1011            uint8 reportChangeLen;
   1012            uint8 i;
   1013            ZStatus_t status;
   1014          
   1015            // Find out the data length
   1016            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1017            {
   1018              reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1019              
   1020              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1021              
   1022              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1023              {
   1024                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1025                {
   1026                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1027                
   1028                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1029                  {
   1030                    reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   1031                    dataLen += reportChangeLen; // Reportable Change field
   1032                  }
   1033                }
   1034                else
   1035                {
   1036                  dataLen += 2; // Timeout Period
   1037                }
   1038              }
   1039            }
   1040            
   1041            buf = osal_mem_alloc( dataLen );
   1042            if ( buf != NULL )
   1043            {
   1044              // Load the buffer - serially
   1045              pBuf = buf;
   1046          
   1047              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1048              {
   1049                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1050          
   1051                *pBuf++ = reportRspRec->status;
   1052                *pBuf++ = reportRspRec->direction;
   1053                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1054                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1055               
   1056                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1057                {
   1058                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1059                  {
   1060                    *pBuf++ = reportRspRec->dataType;
   1061                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1062                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1063                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1064                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1065          
   1066                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1067                    {
   1068                      zclSerializeData( reportRspRec->dataType, 
   1069                                        reportRspRec->reportableChange, pBuf );
   1070                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   1071                      pBuf += reportChangeLen;
   1072                    }
   1073                  }
   1074                  else
   1075                  {
   1076                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1077                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1078                  }
   1079                }
   1080              }
   1081             
   1082              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1083                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1084                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1085              osal_mem_free( buf );
   1086            }
   1087            else
   1088              status = ZMemError;
   1089            
   1090            return ( status );
   1091          }
   1092          
   1093          /*********************************************************************
   1094           * @fn      zcl_SendReportCmd
   1095           * @brief   Send a Report command
   1096           * @param   dstAddr - destination address
   1097           *          clusterID - cluster ID
   1098           *          reportCmd - report command to be sent
   1099           *          direction - direction of the command
   1100           *          seqNum - transaction sequence number
   1101           * @return  ZSuccess if OK
   1102           */
   1103          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1104                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1105                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1106          {
   1107            zclReport_t *reportRec;
   1108            uint8 attrDataLen;
   1109            uint8 dataLen = 0;
   1110            uint8 *buf;
   1111            uint8 *pBuf;
   1112            uint8 i;
   1113            ZStatus_t status;
   1114            
   1115            // calculate the size of the command
   1116            for ( i = 0; i < reportCmd->numAttr; i++ )
   1117            {
   1118              reportRec = &(reportCmd->attrList[i]);
   1119              
   1120              dataLen += 2 + 1; // Attribute ID + data type
   1121          
   1122              attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1123              dataLen += attrDataLen; // Attribute Data
   1124            }
   1125            
   1126            buf = osal_mem_alloc( dataLen );
   1127            if ( buf != NULL )
   1128            {
   1129              // Load the buffer - serially
   1130              pBuf = buf;
   1131              for ( i = 0; i < reportCmd->numAttr; i++ )
   1132              {
   1133                reportRec = &(reportCmd->attrList[i]);
   1134                
   1135                *pBuf++ = LO_UINT16( reportRec->attrID );
   1136                *pBuf++ = HI_UINT16( reportRec->attrID );
   1137                *pBuf++ = reportRec->dataType;
   1138          
   1139                zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1140                attrDataLen = zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1141                pBuf += attrDataLen; // move pass attribute data
   1142              }
   1143           
   1144              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE, 
   1145                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1146              osal_mem_free( buf );
   1147            }
   1148            else
   1149              status = ZMemError;
   1150            
   1151            return ( status );
   1152          }
   1153          #endif // ZCL_REPORT
   1154                 
   1155          /*********************************************************************
   1156           * @fn      zcl_SendDefaultRspCmd
   1157           * @brief   Send a Default Response command
   1158           *
   1159           *          Note: The manufacturer code field should be set if this command is being sent
   1160           *           in response to a manufacturer specific command.
   1161           * @param   dstAddr - destination address
   1162           *          clusterID - cluster ID
   1163           *          defaultRspCmd - default response command to be sent
   1164           *          direction - direction of the command
   1165           *          manuCode - manufacturer code for proprietary extensions to a profile
   1166           *          seqNum - transaction sequence number
   1167           * @return  ZSuccess if OK
   1168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1169          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1170                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1171                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1172          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 3,A
   \   00002F   7416         MOV     A,#0x16
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
   1173            uint8 buf[2]; // Command ID and Status;
   1174          
   1175            // Load the buffer - serially
   1176            buf[0] = defaultRspCmd->commandID;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   12....       LCALL   ?Subroutine14 & 0xFFFF
   1177            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_21:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   1178          
   1179            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1180                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) ); 
   \   000050                ; Setup parameters for call to function zcl_SendCommand
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   75..02       MOV     ?V0 + 0,#0x2
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   E5..         MOV     A,?V0 + 5
   \   00006E   F5..         MOV     ?V0 + 0,A
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   EF           MOV     A,R7
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV     ?V0 + 0,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..0B       MOV     ?V0 + 0,#0xb
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   02....       LJMP    ?Subroutine85 & 0xFFFF
   1181          }
   1182          
   1183          #ifdef ZCL_DISCOVER
   1184          /*********************************************************************
   1185           * @fn      zcl_SendDiscoverCmd
   1186           * @brief   Send a Discover command
   1187           * @param   dstAddr - destination address
   1188           *          clusterID - cluster ID
   1189           *          discoverCmd - discover command to be sent
   1190           *          direction - direction of the command
   1191           *          seqNum - transaction sequence number
   1192           * @return  ZSuccess if OK
   1193           */
   1194          ZStatus_t zcl_SendDiscoverCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1195                                      uint16 clusterID, zclDiscoverCmd_t *discoverCmd,
   1196                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1197          {
   1198            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1199            uint8 *buf;
   1200            uint8 *pBuf;
   1201            ZStatus_t status;
   1202            
   1203            buf = osal_mem_alloc( dataLen );
   1204            if ( buf != NULL )
   1205            {
   1206              // Load the buffer - serially
   1207              pBuf = buf;
   1208              *pBuf++ = LO_UINT16(discoverCmd->startAttr);
   1209              *pBuf++ = HI_UINT16(discoverCmd->startAttr);
   1210              *pBuf++ = discoverCmd->maxAttrIDs;
   1211              
   1212              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER, FALSE, 
   1213                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1214              osal_mem_free( buf );
   1215            }
   1216            else
   1217              status = ZMemError;
   1218            
   1219            return ( status );
   1220          }
   1221          
   1222          /*********************************************************************
   1223           * @fn      zcl_SendDiscoverRspCmd
   1224           * @brief   Send a Discover Response command
   1225           * @param   dstAddr - destination address
   1226           *          clusterID - cluster ID
   1227           *          reportRspCmd - report response command to be sent
   1228           *          direction - direction of the command
   1229           *          seqNum - transaction sequence number
   1230           * @return  ZSuccess if OK
   1231           */
   1232          ZStatus_t zcl_SendDiscoverRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1233                                uint16 clusterID, zclDiscoverRspCmd_t *discoverRspCmd,
   1234                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1235          {
   1236            uint8 dataLen = 1; // Discovery complete
   1237            uint8 *buf;
   1238            uint8 *pBuf;
   1239            uint8 i;
   1240            ZStatus_t status;
   1241            
   1242            // calculate the size of the command
   1243            dataLen += discoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   1244            
   1245            buf = osal_mem_alloc( dataLen );
   1246            if ( buf != NULL )
   1247            {
   1248              // Load the buffer - serially
   1249              pBuf = buf;
   1250              *pBuf++ = discoverRspCmd->discComplete;    
   1251              for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1252              {
   1253                *pBuf++ = LO_UINT16(discoverRspCmd->attrList[i].attrID);
   1254                *pBuf++ = HI_UINT16(discoverRspCmd->attrList[i].attrID);
   1255                *pBuf++ = discoverRspCmd->attrList[i].dataType;
   1256              }
   1257              
   1258              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_RSP, FALSE,
   1259                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1260              osal_mem_free( buf );
   1261            }
   1262            else
   1263              status = ZMemError;
   1264            
   1265            return ( status );
   1266          }
   1267          #endif // ZCL_DISCOVER
   1268          
   1269          /*********************************************************************
   1270           * @fn      zclProcessMessageMSG
   1271           * @brief   Data message processor callback.  This function processes
   1272           *          any incoming data - probably from other devices.  So, based
   1273           *          on cluster ID, perform the intended action.
   1274           * @param   pkt - incoming message
   1275           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1276          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zclProcessMessageMSG:
   1277          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1278          #if defined(Coor_receiver) // The coordinator receive data
   1279            byte recv_data[30]; // receive data array
   1280            uint16 len;
   1281          #endif
   1282            
   1283          #if defined(End_Device) || defined(Router_Device) // The End Device receive data
   1284            byte receive[20];
   1285            uint16 len;
   1286          #endif  
   1287          
   1288            endPointDesc_t *epDesc;
   1289            zclIncoming_t inMsg;
   1290            zclLibPlugin_t *pInPlugin;
   1291            zclDefaultRspCmd_t defautlRspCmd;
   1292            uint8 options;
   1293            uint8 securityEnable;
   1294            uint8 interPanMsg;
   1295            ZStatus_t status = ZFailure;
   1296          
   1297            if ( pkt->cmd.DataLength == 0 ) return;   // Error, ignore the message
   \   00000E   EA           MOV     A,R2
   \   00000F   241F         ADD     A,#0x1f
   \   000011   F8           MOV     R0,A
   \   000012   EB           MOV     A,R3
   \   000013   3400         ADDC    A,#0x0
   \   000015   F9           MOV     R1,A
   \   000016   88..         MOV     ?V0 + 2,R0
   \   000018   89..         MOV     ?V0 + 3,R1
   \   00001A   8882         MOV     DPL,R0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7002         JNZ     ??zclProcessMessageMSG_0
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??zclProcessMessageMSG_0:
   \   000023   6050         JZ      ??zclProcessMessageMSG_1
   1298          
   1299          #if defined(Coor_receiver)
   1300            if (pkt->cmd.DataLength > 0)
   1301            {
   1302              device_manager.DataLength = pkt->cmd.DataLength;
   1303              
   1304              for(len = 0; len < pkt->cmd.DataLength; len++) // Send the recv_data to UART
   1305              {
   1306                recv_data[len] = pkt->cmd.Data[len+3]; // the cmd.Data[0~2] is cluster ID.
   1307                device_manager.Data[len]= pkt->cmd.Data[len+3]; // the cmd.Data[0~2] is cluster ID.  
   1308                #if defined ( LCD_SUPPORTED )
   1309                  HalLcdWriteChar(HAL_LCD_LINE_4, len, recv_data[len]);
   1310                #endif
   1311              }
   1312              //chris
   1313          //    HalUARTWrite(MT_UART_DEFAULT_PORT, recv_data, pkt->cmd.DataLength-2);
   1314          //    HalUARTWrite(MT_UART_DEFAULT_PORT, device_manager.Data, pkt->cmd.DataLength-2);    
   1315          //    HalUARTWrite(HAL_UART_PORT_0, "\r\n", 3);      
   1316            }
   1317          #endif
   1318          
   1319          // The device receive the uart command with RF
   1320          #if defined(End_Device) || defined(Router_Device)
   1321            if(pkt->cmd.DataLength > 0)
   1322            {
   1323              for(len = 0; len < pkt->cmd.DataLength; len++)
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \   000029   803A         SJMP    ??zclProcessMessageMSG_2
   1324              {
   1325                receive[len] = pkt->cmd.Data[len+3];
   \                     ??zclProcessMessageMSG_3:
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   2421         ADD     A,#0x21
   \   00002F   F582         MOV     DPL,A
   \   000031   E5..         MOV     A,?V0 + 1
   \   000033   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000036   2E           ADD     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   3F           ADDC    A,R7
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   F583         MOV     DPH,A
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FB           MOV     R3,A
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E582         MOV     A,DPL
   \   00004C   2E           ADD     A,R6
   \   00004D   F582         MOV     DPL,A
   \   00004F   E583         MOV     A,DPH
   \   000051   3F           ADDC    A,R7
   \   000052   F583         MOV     DPH,A
   \   000054   EB           MOV     A,R3
   \   000055   F0           MOVX    @DPTR,A
   1326                #if defined ( LCD_SUPPORTED )
   1327                  HalLcdWriteChar(HAL_LCD_LINE_3, len, receive[len]);
   \   000056                ; Setup parameters for call to function HalLcdWriteChar
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   7903         MOV     R1,#0x3
   \   00005A   12....       LCALL   ??HalLcdWriteChar?relay
   1328                #endif
   1329              }
   \   00005D   EE           MOV     A,R6
   \   00005E   2401         ADD     A,#0x1
   \   000060   0E           INC     R6
   \   000061   EF           MOV     A,R7
   \   000062   3400         ADDC    A,#0x0
   \   000064   FF           MOV     R7,A
   \                     ??zclProcessMessageMSG_2:
   \   000065   85..82       MOV     DPL,?V0 + 2
   \   000068   85..83       MOV     DPH,?V0 + 3
   \   00006B   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   1330              // Write receive coordinator command to UART, chrischris
   1331          //  HalUARTWrite(MT_UART_DEFAULT_PORT, receive, pkt->cmd.DataLength-2);
   1332                
   1333              return ;
   1334            }
   \                     ??CrossCallReturnLabel_188:
   \   00006E   C3           CLR     C
   \   00006F   EE           MOV     A,R6
   \   000070   98           SUBB    A,R0
   \   000071   EF           MOV     A,R7
   \   000072   99           SUBB    A,R1
   \   000073   40B6         JC      ??zclProcessMessageMSG_3
   \                     ??zclProcessMessageMSG_1:
   \   000075   7414         MOV     A,#0x14
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A                REQUIRE ?Subroutine84
   \   00007A                ; // Fall through to label ?Subroutine84
   1335          #endif  
   1336            
   1337            // Initialize
   1338            inMsg.msg = pkt;
   1339            inMsg.attrCmd = NULL;
   1340            inMsg.pData = NULL;
   1341            inMsg.pDataLen = 0;
   1342          
   1343            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   1344            inMsg.pDataLen = pkt->cmd.DataLength;
   1345            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   1346          
   1347            // Find the wanted endpoint
   1348            epDesc = afFindEndPointDesc( pkt->endPoint );
   1349            if ( epDesc == NULL )
   1350              return;   // Error, ignore the message
   1351          
   1352            if ( pkt->clusterId == ZCL_INVALID_CLUSTER_ID )
   1353              return;   // Error, ignore the message
   1354            
   1355            if ((epDesc->simpleDesc == NULL) ||
   1356                (zcl_DeviceOperational(pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type, inMsg.hdr.commandID,
   1357                                             epDesc->simpleDesc->AppProfId) == FALSE))
   1358            {
   1359              return; // Error, ignore the message
   1360            }
   1361          
   1362          #if defined ( INTER_PAN )
   1363            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   1364            {
   1365              // No foundation command is supported thru Inter-PAN communication
   1366              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   1367                return;
   1368          
   1369              interPanMsg = TRUE; 
   1370              options = AF_TX_OPTIONS_NONE;
   1371            }
   1372            else
   1373          #endif
   1374            {
   1375              interPanMsg = FALSE;
   1376              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   1377            }
   1378            
   1379            // Local and remote Security options must match except for Default Response command
   1380            if ( !zcl_DefaultRspCmd( inMsg.hdr ) )
   1381            {
   1382              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   1383              if ( pkt->SecurityUse != securityEnable )
   1384              {
   1385                if ( UNICAST_MSG( inMsg.msg ) )
   1386                {
   1387                  // Send a Default Response command back with no Application Link Key security
   1388                  if ( securityEnable )
   1389                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   1390                  
   1391                  defautlRspCmd.statusCode = status;
   1392                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   1393                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1394                                         inMsg.msg->clusterId, &defautlRspCmd, 
   1395                                         ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1396                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   1397                  if ( securityEnable )
   1398                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );       
   1399                }
   1400                return;   // Error, ignore the message
   1401              }
   1402            }
   1403            
   1404            // Is this a foundation type message
   1405            if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   1406            { 
   1407              if ( inMsg.hdr.fc.manuSpecific )
   1408              {
   1409                // We don't support any manufacturer specific command
   1410                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   1411              }
   1412              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) && 
   1413                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   1414              {
   1415                zclParseCmd_t parseCmd;
   1416                
   1417                parseCmd.endpoint = pkt->endPoint;
   1418                parseCmd.dataLen = inMsg.pDataLen;
   1419                parseCmd.pData = inMsg.pData;
   1420                
   1421                // Parse the command, remember that the return value is a pointer to allocated memory
   1422                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   1423                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   1424                { 
   1425                  // Process the command
   1426                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   1427                  {
   1428                    // Couldn't find attribute in the table.
   1429                  }
   1430                }
   1431                 
   1432                // Free the buffer
   1433                if ( inMsg.attrCmd )
   1434                  osal_mem_free( inMsg.attrCmd );
   1435                
   1436                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   1437                  return; // We're done
   1438                
   1439                status = ZSuccess;
   1440              }
   1441              else
   1442              {
   1443                // Unsupported message
   1444                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   1445              }
   1446            }
   1447            else  // Not a foundation type message, so it must be specific to the cluster ID.
   1448            {
   1449              if (epDesc->simpleDesc == NULL)
   1450              {
   1451                pInPlugin = NULL;
   1452              }
   1453              else
   1454              {
   1455                // Find the appropriate plugin
   1456                pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   1457              }
   1458              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   1459              { 
   1460                // The return value of the plugin function will be ZSuccess - Supported and need default response
   1461                //                                                 ZFailure - Unsupported
   1462                //                                                 ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   1463                //                                                 ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   1464                //                                                 ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   1465                //                                                 ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   1466                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   1467                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   1468                  return; // We're done      
   1469              }
   1470              
   1471              if ( status == ZFailure )
   1472              {
   1473                // Unsupported message
   1474                if ( inMsg.hdr.fc.manuSpecific )
   1475                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   1476                else
   1477                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   1478              }
   1479            }
   1480            
   1481            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   1482            {
   1483              // Send a Default Response command back
   1484              defautlRspCmd.statusCode = status;
   1485              defautlRspCmd.commandID = inMsg.hdr.commandID;
   1486              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1487                                     inMsg.msg->clusterId, &defautlRspCmd, 
   1488                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 
   1489                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   1490            }
   1491          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
   1492          
   1493          /*********************************************************************
   1494           * @fn      zclParseHdr
   1495           * @brief   Parse header of the ZCL format
   1496           * @param   hdr - place to put the frame control information
   1497           *          pData - incoming buffer to parse
   1498           * @return  pointer past the header
   1499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1500          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   1501          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1502            // Clear the header
   1503            osal_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV     R4,#0x6
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??osal_memset?relay
   1504          
   1505            // Parse the Frame Control
   1506            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   54FC         ANL     A,#0xfc
   \   00001F   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7403         MOV     A,#0x3
   \   000026   5A           ANL     A,R2
   \   000027   48           ORL     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1507            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_216:
   \   000032   74FB         MOV     A,#-0x5
   \   000034   58           ANL     A,R0
   \   000035   FA           MOV     R2,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00003D   E4           CLR     A
   \   00003E   92E0         MOV     0xE0 /* A   */.0,C
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   75..00       MOV     ?V0 + 3,#0x0
   \   000045   7402         MOV     A,#0x2
   \   000047   78..         MOV     R0,#?V0 + 2
   \   000049   12....       LCALL   ?S_SHL
   \   00004C   7404         MOV     A,#0x4
   \   00004E   55..         ANL     A,?V0 + 2
   \   000050   4A           ORL     A,R2
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   1508            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_17:
   \   00005A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00005C   85..82       MOV     DPL,?V0 + 0
   \   00005F   85..83       MOV     DPH,?V0 + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5004         JNC     ??zclParseHdr_0
   1509              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000065   4408         ORL     A,#0x8
   \   000067   8002         SJMP    ??zclParseHdr_1
   1510            else
   1511              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_0:
   \   000069   54F7         ANL     A,#0xf7
   \                     ??zclParseHdr_1:
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F0           MOVX    @DPTR,A
   1512            
   1513            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \   00006F   85..82       MOV     DPL,?V0 + 0
   \   000072   85..83       MOV     DPH,?V0 + 1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   54EF         ANL     A,#0xef
   \   000078   FA           MOV     R2,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FB           MOV     R3,A
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   A2E4         MOV     C,0xE0 /* A   */.4
   \   000083   E4           CLR     A
   \   000084   92E0         MOV     0xE0 /* A   */.0,C
   \   000086   F5..         MOV     ?V0 + 2,A
   \   000088   7404         MOV     A,#0x4
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?S_SHL
   \   00008F   7410         MOV     A,#0x10
   \   000091   55..         ANL     A,?V0 + 2
   \   000093   4A           ORL     A,R2
   \   000094   F8           MOV     R0,A
   \   000095   EB           MOV     A,R3
   \   000096   F9           MOV     R1,A
   \   000097   85..82       MOV     DPL,?V0 + 0
   \   00009A   85..83       MOV     DPH,?V0 + 1
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1514            pData++;  // move past the frame control field
   1515          
   1516            // parse the manfacturer code
   1517            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_162:
   \   0000A4   E8           MOV     A,R0
   \   0000A5   5404         ANL     A,#0x4
   \   0000A7   6014         JZ      ??CrossCallReturnLabel_10
   1518            {
   1519              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FA           MOV     R2,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   EA           MOV     A,R2
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E9           MOV     A,R1
   \   0000BA   12....       LCALL   ?Subroutine9 & 0xFFFF
   1520              pData += 2;
   1521            }
   1522          
   1523            // parse the Transaction Sequence Number
   1524            hdr->transSeqNum = *pData++;
   \                     ??CrossCallReturnLabel_10:
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   85..82       MOV     DPL,?V0 + 0
   \   0000C5   85..83       MOV     DPH,?V0 + 1
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ?Subroutine5 & 0xFFFF
   1525          
   1526            // parse the Cluster's command ID
   1527            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_8:
   \   0000CE   85..82       MOV     DPL,?V0 + 0
   \   0000D1   85..83       MOV     DPH,?V0 + 1
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1528          
   1529            // Should point to the frame payload
   1530            return ( pData );
   \                     ??CrossCallReturnLabel_168:
   \   0000DC   AA82         MOV     R2,DPL
   \   0000DE   AB83         MOV     R3,DPH
   \   0000E0   02....       LJMP    ?Subroutine84 & 0xFFFF
   1531          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   02....       LJMP    ?Subroutine89 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   02....       LJMP    ?Subroutine92 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ?Subroutine92 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1532          
   1533          /*********************************************************************
   1534           * @fn      zclBuildHdr
   1535           * @brief   Build header of the ZCL format
   1536           * @param   hdr - outgoing header information
   1537           *          pData - outgoing header space
   1538           * @return  pointer past the header
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   1541          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1542            // Build the Frame Control byte
   1543            *pData = hdr->fc.type;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   5403         ANL     A,#0x3
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1544            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_144:
   \   000013   5404         ANL     A,#0x4
   \   000015   12....       LCALL   ?Subroutine16 & 0xFFFF
   1545            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_142:
   \   000018   5408         ANL     A,#0x8
   \   00001A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1546            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_143:
   \   00001D   5410         ANL     A,#0x10
   \   00001F   FE           MOV     R6,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   4E           ORL     A,R6
   \   000026   12....       LCALL   ?Subroutine8 & 0xFFFF
   1547            pData++;  // move past the frame control field
   1548          
   1549            // Add the manfacturer code
   1550            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_180:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5404         ANL     A,#0x4
   \   00002C   6017         JZ      ??CrossCallReturnLabel_56
   1551            {
   1552              *pData++ = LO_UINT16( hdr->manuCode );
   \   00002E   EA           MOV     A,R2
   \   00002F   2402         ADD     A,#0x2
   \   000031   F8           MOV     R0,A
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   F9           MOV     R1,A
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   12....       LCALL   ?Subroutine43 & 0xFFFF
   1553              *pData++ = HI_UINT16( hdr->manuCode );
   \                     ??CrossCallReturnLabel_55:
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?Subroutine43 & 0xFFFF
   1554            }
   1555          
   1556            // Add the Transaction Sequence Number
   1557            *pData++ = hdr->transSeqNum;
   \                     ??CrossCallReturnLabel_56:
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   8C82         MOV     DPL,R4
   \   000050   8D83         MOV     DPH,R5
   \   000052   12....       LCALL   ?Subroutine8 & 0xFFFF
   1558            
   1559            // Add the Cluster's command ID
   1560            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_181:
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   1561          
   1562            // Should point to the frame payload
   1563            return ( pData );
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
   1564          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0C           INC     R4
   \   000008   AD83         MOV     R5,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   FE           MOV     R6,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   E0           MOVX    A,@DPTR
   \   000006   4E           ORL     A,R6
   \   000007                REQUIRE ??Subroutine104_0
   \   000007                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AC82         MOV     R4,DPL
   \   000004   AD83         MOV     R5,DPH
   \   000006                REQUIRE ?Subroutine91
   \   000006                ; // Fall through to label ?Subroutine91

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   22           RET
   1565          
   1566          /*********************************************************************
   1567           * @fn      zclCalcHdrSize
   1568           * @brief   Calculate the number of bytes needed for an outgoing
   1569           *          ZCL header.
   1570           * @param   hdr - outgoing header information
   1571           * @return  returns the number of bytes needed
   1572           */
   1573          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   1574          {
   1575            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   1576          
   1577            // Add the manfacturer code
   1578            if ( hdr->fc.manuSpecific )
   1579              needed += 2;
   1580          
   1581            return ( needed );
   1582          }
   1583          
   1584          /*********************************************************************
   1585           * @fn      zclFindPlugin
   1586           * @brief   Find the right plugin for a cluster ID
   1587           * @param   clusterID - cluster ID to look for
   1588           *          profileID - profile ID
   1589           * @return  pointer to plugin, NULL if not found
   1590           */
   1591          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   1592          {
   1593            zclLibPlugin_t *pLoop;
   1594            
   1595            (void)profileID;  // Intentionally unreferenced parameter
   1596          
   1597            if ( clusterID != ZCL_INVALID_CLUSTER_ID )
   1598            {
   1599              pLoop = plugins;
   1600              while ( pLoop != NULL )
   1601              {
   1602                if ( clusterID >= pLoop->startClusterID && clusterID <= pLoop->endClusterID )
   1603                  return ( pLoop );
   1604                pLoop = pLoop->next;
   1605              }
   1606            }
   1607            return ( (zclLibPlugin_t *)NULL );
   1608          }
   1609          
   1610          /*********************************************************************
   1611           * @fn      zclFindAttrRec
   1612           * @brief   Find the attribute record that matchs the parameters
   1613           * @param   endpoint - Application's endpoint
   1614           *          clusterID - cluster ID
   1615           *          attrId - attribute looking for
   1616           * @return  TRUE if record found. FALSE, otherwise.
   1617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1618          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   1619          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine27 & 0xFFFF
   1620            uint8 x;
   1621            zclAttrRecsList *pLoop;
   1622          
   1623            pLoop = attrList;
   \                     ??CrossCallReturnLabel_32:
   \   000017   90....       MOV     DPTR,#attrList
   \   00001A   8004         SJMP    ??zclFindAttrRec_0
   1624          
   1625            while ( pLoop != NULL )
   1626            {
   1627              if ( pLoop->endpoint == endpoint )
   1628              {
   1629                for ( x = 0; x < pLoop->numAttributes; x++ )
   1630                {
   1631                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId == attrId )
   1632                  {
   1633                    *pAttr = pLoop->attrs[x];
   1634                    return ( TRUE ); // EMBEDDED RETURN
   1635                  }
   1636                }
   1637              }
   1638              pLoop = pLoop->next;
   \                     ??zclFindAttrRec_1:
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \                     ??zclFindAttrRec_0:
   \   000020   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000023   7001         JNZ     ??zclFindAttrRec_2
   \   000025   EB           MOV     A,R3
   \                     ??zclFindAttrRec_2:
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??zclFindAttrRec_3 & 0xFFFF
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   65..         XRL     A,?V0 + 2
   \   000034   70E6         JNZ     ??zclFindAttrRec_1
   \   000036   75..00       MOV     ?V0 + 3,#0x0
   \   000039   EA           MOV     A,R2
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F9           MOV     R1,A
   \   000041   88..         MOV     ?V0 + 4,R0
   \   000043   89..         MOV     ?V0 + 5,R1
   \   000045   8002         SJMP    ??zclFindAttrRec_4
   \                     ??zclFindAttrRec_5:
   \   000047   05..         INC     ?V0 + 3
   \                     ??zclFindAttrRec_4:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   C3           CLR     C
   \   000055   98           SUBB    A,R0
   \   000056   50C4         JNC     ??zclFindAttrRec_1
   \   000058   85....       MOV     ?V0 + 8,?V0 + 3
   \   00005B   75..00       MOV     ?V0 + 9,#0x0
   \   00005E   7403         MOV     A,#0x3
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?S_SHL
   \   000065   85....       MOV     ?V0 + 6,?V0 + 8
   \   000068   85....       MOV     ?V0 + 7,?V0 + 9
   \   00006B   85..82       MOV     DPL,?V0 + 4
   \   00006E   85..83       MOV     DPH,?V0 + 5
   \   000071   E0           MOVX    A,@DPTR
   \   000072   25..         ADD     A,?V0 + 6
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   35..         ADDC    A,?V0 + 7
   \   000079   F9           MOV     R1,A
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   E4           CLR     A
   \   00007F   93           MOVC    A,@A+DPTR
   \   000080   F8           MOV     R0,A
   \   000081   7401         MOV     A,#0x1
   \   000083   93           MOVC    A,@A+DPTR
   \   000084   F9           MOV     R1,A
   \   000085   EE           MOV     A,R6
   \   000086   68           XRL     A,R0
   \   000087   7002         JNZ     ??zclFindAttrRec_6
   \   000089   EF           MOV     A,R7
   \   00008A   69           XRL     A,R1
   \                     ??zclFindAttrRec_6:
   \   00008B   70BA         JNZ     ??zclFindAttrRec_5
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E4           CLR     A
   \   000090   93           MOVC    A,@A+DPTR
   \   000091   F8           MOV     R0,A
   \   000092   7401         MOV     A,#0x1
   \   000094   93           MOVC    A,@A+DPTR
   \   000095   F9           MOV     R1,A
   \   000096   E5..         MOV     A,?V0 + 0
   \   000098   68           XRL     A,R0
   \   000099   7003         JNZ     ??zclFindAttrRec_7
   \   00009B   E5..         MOV     A,?V0 + 1
   \   00009D   69           XRL     A,R1
   \                     ??zclFindAttrRec_7:
   \   00009E   70A7         JNZ     ??zclFindAttrRec_5
   \   0000A0   85..82       MOV     DPL,?V0 + 4
   \   0000A3   85..83       MOV     DPH,?V0 + 5
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   25..         ADD     A,?V0 + 6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   35..         ADDC    A,?V0 + 7
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   7408         MOV     A,#0x8
   \   0000B4   12....       LCALL   ?MOVE_LONG8_XDATA_CODE
   \   0000B7   7901         MOV     R1,#0x1
   \   0000B9   8002         SJMP    ??zclFindAttrRec_8
   1639            }
   1640          
   1641            return ( FALSE );
   \                     ??zclFindAttrRec_3:
   \   0000BB   7900         MOV     R1,#0x0
   \                     ??zclFindAttrRec_8:
   \   0000BD   7F0A         MOV     R7,#0xa
   \   0000BF   02....       LJMP    ?BANKED_LEAVE_XDATA
   1642          }
   1643          
   1644          /*********************************************************************
   1645           * @fn      zclFindClusterOption
   1646           *
   1647           * @brief   Find the option record that matchs the cluster id
   1648           *
   1649           * @param   endpoint - Application's endpoint
   1650           * @param   clusterID - cluster ID looking for
   1651           *
   1652           * @return  pointer to clutser option, NULL if not found
   1653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1654          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   1655          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   1656            uint8 x;
   1657            zclClusterOptionList *pLoop;
   1658          
   1659            pLoop = clusterOptionList;
   \   000007   90....       MOV     DPTR,#clusterOptionList
   \   00000A   8004         SJMP    ??zclFindClusterOption_0
   1660          
   1661            while ( pLoop != NULL )
   1662            {
   1663              if ( pLoop->endpoint == endpoint )
   1664              {
   1665                for ( x = 0; x < pLoop->numOptions; x++ )
   1666                {
   1667                  if ( pLoop->options[x].clusterID == clusterID )
   1668                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   1669                }
   1670              }
   1671              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000010   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000013   E8           MOV     A,R0
   \   000014   7001         JNZ     ??zclFindClusterOption_2
   \   000016   E9           MOV     A,R1
   \                     ??zclFindClusterOption_2:
   \   000017   605F         JZ      ??zclFindClusterOption_3
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   65..         XRL     A,?V0 + 0
   \   000022   70E8         JNZ     ??zclFindClusterOption_1
   \   000024   75..00       MOV     ?V0 + 2,#0x0
   \   000027   E8           MOV     A,R0
   \   000028   2404         ADD     A,#0x4
   \   00002A   FC           MOV     R4,A
   \   00002B   E9           MOV     A,R1
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   FD           MOV     R5,A
   \   00002F   EC           MOV     A,R4
   \   000030   FE           MOV     R6,A
   \   000031   ED           MOV     A,R5
   \   000032   FF           MOV     R7,A
   \   000033   8002         SJMP    ??zclFindClusterOption_4
   \                     ??zclFindClusterOption_5:
   \   000035   05..         INC     ?V0 + 2
   \                     ??zclFindClusterOption_4:
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FC           MOV     R4,A
   \   000040   E5..         MOV     A,?V0 + 2
   \   000042   C3           CLR     C
   \   000043   9C           SUBB    A,R4
   \   000044   50C6         JNC     ??zclFindClusterOption_1
   \   000046   E5..         MOV     A,?V0 + 2
   \   000048   75F003       MOV     B,#0x3
   \   00004B   A4           MUL     AB
   \   00004C   FC           MOV     R4,A
   \   00004D   85F0..       MOV     ?V0 + 1,B
   \   000050   AD..         MOV     R5,?V0 + 1
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   E0           MOVX    A,@DPTR
   \   000057   2C           ADD     A,R4
   \   000058   F5..         MOV     ?V0 + 1,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   3D           ADDC    A,R5
   \   00005D   85..82       MOV     DPL,?V0 + 1
   \   000060   F583         MOV     DPH,A
   \   000062   E0           MOVX    A,@DPTR
   \   000063   6A           XRL     A,R2
   \   000064   7003         JNZ     ??zclFindClusterOption_6
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6B           XRL     A,R3
   \                     ??zclFindClusterOption_6:
   \   000069   70CA         JNZ     ??zclFindClusterOption_5
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   2C           ADD     A,R4
   \   000071   FA           MOV     R2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   3D           ADDC    A,R5
   \   000075   FB           MOV     R3,A
   \   000076   8004         SJMP    ??zclFindClusterOption_7
   1672            }
   1673          
   1674            return ( NULL );
   \                     ??zclFindClusterOption_3:
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \                     ??zclFindClusterOption_7:
   \   00007C                REQUIRE ?Subroutine96
   \   00007C                ; // Fall through to label ?Subroutine96
   1675          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1676          
   1677          /*********************************************************************
   1678           * @fn      zclGetClusterOption
   1679           *
   1680           * @brief   Get the option record that matchs the cluster id
   1681           *
   1682           * @param   endpoint - Application's endpoint
   1683           * @param   clusterID - cluster ID looking for
   1684           *
   1685           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   1686           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1687          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   1688          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1689            uint8 option;
   1690            zclOptionRec_t *pOption;
   1691          
   1692             pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL   ??zclFindClusterOption?relay
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   1693            if ( pOption != NULL )
   \   00000C   E582         MOV     A,DPL
   \   00000E   7002         JNZ     ??zclGetClusterOption_0
   \   000010   E583         MOV     A,DPH
   \                     ??zclGetClusterOption_0:
   \   000012   6008         JZ      ??zclGetClusterOption_1
   1694            {
   1695              option = pOption->option;
   1696              if ( !ZG_SECURE_ENABLED )
   1697                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   1698          
   1699              return ( option ); // EMBEDDED RETURN
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   54BF         ANL     A,#0xbf
   \   000019   F9           MOV     R1,A
   \   00001A   8002         SJMP    ??zclGetClusterOption_2
   1700            }
   1701          
   1702            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_1:
   \   00001C   7900         MOV     R1,#0x0
   \                     ??zclGetClusterOption_2:
   \   00001E   80..         SJMP    ?Subroutine93
   1703          }
   1704          
   1705          /*********************************************************************
   1706           * @fn      zclSetSecurityOption
   1707           *
   1708           * @brief   Set the security option for the cluster id
   1709           *
   1710           * @param   endpoint - Application's endpoint
   1711           * @param   clusterID - cluster ID looking for
   1712           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   1713           *
   1714           * @return  none
   1715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1716          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   1717          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   1718            zclOptionRec_t *pOption;
   1719          
   1720            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL   ??zclFindClusterOption?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
   1721            if ( pOption != NULL )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??zclSetSecurityOption_0
   \   000015   E9           MOV     A,R1
   \                     ??zclSetSecurityOption_0:
   \   000016   6016         JZ      ??zclSetSecurityOption_1
   1722            {
   1723              if ( enable )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   EE           MOV     A,R6
   \   000023   6005         JZ      ??zclSetSecurityOption_2
   1724                pOption->option |= AF_EN_SECURITY;
   \   000025   E0           MOVX    A,@DPTR
   \   000026   D2E6         SETB    0xE0 /* A   */.6
   \   000028   8003         SJMP    ??zclSetSecurityOption_3
   1725              else
   1726                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_2:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C2E6         CLR     0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_3:
   \   00002D   F0           MOVX    @DPTR,A
   1727            }
   1728          }
   \                     ??zclSetSecurityOption_1:
   \   00002E                REQUIRE ?Subroutine93
   \   00002E                ; // Fall through to label ?Subroutine93
   1729          
   1730          #ifdef ZCL_DISCOVER
   1731          /*********************************************************************
   1732           * @fn      zclFindNextAttrRec
   1733           *
   1734           * @brief   Find the attribute (or next) record that matchs the parameters
   1735           *
   1736           * @param   endpoint - Application's endpoint
   1737           * @param   clusterID - cluster ID
   1738           * @param   attr - attribute looking for
   1739           *
   1740           * @return  pointer to attribute record, NULL if not found
   1741           */
   1742          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID,
   1743                                           uint16 *attrId, zclAttrRec_t *pAttr )
   1744          {
   1745            uint16 x;
   1746            zclAttrRecsList *pLoop;
   1747          
   1748            pLoop = attrList;
   1749          
   1750            while ( pLoop != NULL )
   1751            {
   1752              if ( pLoop->endpoint == endpoint )
   1753              {
   1754                for ( x = 0; x < pLoop->numAttributes; x++ )
   1755                {
   1756                  if ( pLoop->attrs[x].clusterID == clusterID && pLoop->attrs[x].attr.attrId >= *attrId )
   1757                  {
   1758                    *pAttr = pLoop->attrs[x];
   1759                    
   1760                    // Update attribute ID
   1761                    *attrId = pAttr->attr.attrId; 
   1762                    return ( TRUE ); // EMBEDDED RETURN
   1763                  }
   1764                }
   1765              }
   1766              pLoop = pLoop->next;
   1767            }
   1768          
   1769            return ( FALSE );
   1770          }
   1771          #endif // ZCL_DISCOVER
   1772          
   1773          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT)
   1774          /*********************************************************************
   1775           * @fn      zclSerializeData
   1776           * @brief   Builds a buffer from the attribute data to sent out over
   1777           *          the air.
   1778           * @param   dataType - data types defined in zcl.h
   1779           *          attrData - pointer to the attribute data
   1780           *          buf - where to put the serialized data
   1781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1782          static void zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   1783          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   1784            uint8 *pStr;
   1785            uint8 len;
   1786          
   1787            switch ( dataType )
   \   00000D   8E..         MOV     ?V0 + 0,R6
   \   00000F   8F..         MOV     ?V0 + 1,R7
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000021   03           DB        3
   \   000022   41           DB        65
   \   000023   42           DB        66
   \   000024   ....         DW        ??zclSerializeData_0
   \   000026   E0           DB        224
   \   000027   E2           DB        226
   \   000028   ....         DW        ??zclSerializeData_1
   \   00002A   E8           DB        232
   \   00002B   E9           DB        233
   \   00002C   ....         DW        ??zclSerializeData_2
   \   00002E   19           DB        25
   \   00002F   08           DB        8
   \   000030   ....         DW        ??zclSerializeData_3
   \   000032   09           DB        9
   \   000033   ....         DW        ??zclSerializeData_2
   \   000035   0A           DB        10
   \   000036   ....         DW        ??zclSerializeData_4
   \   000038   0B           DB        11
   \   000039   ....         DW        ??zclSerializeData_1
   \   00003B   10           DB        16
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   18           DB        24
   \   00003F   ....         DW        ??zclSerializeData_3
   \   000041   19           DB        25
   \   000042   ....         DW        ??zclSerializeData_2
   \   000044   1A           DB        26
   \   000045   ....         DW        ??zclSerializeData_4
   \   000047   1B           DB        27
   \   000048   ....         DW        ??zclSerializeData_1
   \   00004A   20           DB        32
   \   00004B   ....         DW        ??zclSerializeData_3
   \   00004D   21           DB        33
   \   00004E   ....         DW        ??zclSerializeData_2
   \   000050   22           DB        34
   \   000051   ....         DW        ??zclSerializeData_4
   \   000053   23           DB        35
   \   000054   ....         DW        ??zclSerializeData_1
   \   000056   24           DB        36
   \   000057   ....         DW        ??zclSerializeData_5
   \   000059   25           DB        37
   \   00005A   ....         DW        ??zclSerializeData_6
   \   00005C   28           DB        40
   \   00005D   ....         DW        ??zclSerializeData_3
   \   00005F   29           DB        41
   \   000060   ....         DW        ??zclSerializeData_2
   \   000062   2A           DB        42
   \   000063   ....         DW        ??zclSerializeData_4
   \   000065   2B           DB        43
   \   000066   ....         DW        ??zclSerializeData_1
   \   000068   30           DB        48
   \   000069   ....         DW        ??zclSerializeData_3
   \   00006B   31           DB        49
   \   00006C   ....         DW        ??zclSerializeData_2
   \   00006E   38           DB        56
   \   00006F   ....         DW        ??zclSerializeData_2
   \   000071   39           DB        57
   \   000072   ....         DW        ??zclSerializeData_1
   \   000074   EA           DB        234
   \   000075   ....         DW        ??zclSerializeData_1
   \   000077   F0           DB        240
   \   000078   ....         DW        ??zclSerializeData_7
   \   00007A   ....         DW        ??zclSerializeData_8
   1788            {
   1789              case ZCL_DATATYPE_DATA8:
   1790              case ZCL_DATATYPE_BOOLEAN:
   1791              case ZCL_DATATYPE_BITMAP8:
   1792              case ZCL_DATATYPE_INT8:
   1793              case ZCL_DATATYPE_UINT8:
   1794              case ZCL_DATATYPE_ENUM8:
   1795                *buf = *((uint8 *)attrData);
   \                     ??zclSerializeData_3:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \                     ??zclSerializeData_9:
   \   000080   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   02....       LJMP    ??zclSerializeData_8 & 0xFFFF
   1796                 break;
   1797          
   1798              case ZCL_DATATYPE_DATA16:
   1799              case ZCL_DATATYPE_BITMAP16:
   1800              case ZCL_DATATYPE_UINT16:
   1801              case ZCL_DATATYPE_INT16: 
   1802              case ZCL_DATATYPE_ENUM16:
   1803              case ZCL_DATATYPE_SEMI_PREC:
   1804              case ZCL_DATATYPE_CLUSTER_ID:
   1805              case ZCL_DATATYPE_ATTR_ID:
   1806                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_2:
   \   000087   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00008A   12....       LCALL   ?Subroutine15 & 0xFFFF
   1807                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_175:
   \   00008D   A3           INC     DPTR
   \   00008E   80F0         SJMP    ??zclSerializeData_9
   1808                break;
   1809          
   1810              case ZCL_DATATYPE_DATA24:
   1811              case ZCL_DATATYPE_BITMAP24: 
   1812              case ZCL_DATATYPE_UINT24:
   1813              case ZCL_DATATYPE_INT24:
   1814                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_4:
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   12....       LCALL   ?Subroutine15 & 0xFFFF
   1815                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_176:
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   0A           INC     R2
   \   0000B0   AB83         MOV     R3,DPH
   1816                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?L_MOV_X
   \   0000BB   7410         MOV     A,#0x10
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?UL_SHR
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   E5..         MOV     A,?V0 + 0
   \   0000C8   80B9         SJMP    ??CrossCallReturnLabel_182
   1817                break;
   1818                
   1819              case ZCL_DATATYPE_DATA32:
   1820              case ZCL_DATATYPE_BITMAP32:
   1821              case ZCL_DATATYPE_UINT32:
   1822              case ZCL_DATATYPE_INT32:
   1823              case ZCL_DATATYPE_SINGLE_PREC:
   1824              case ZCL_DATATYPE_TOD:
   1825              case ZCL_DATATYPE_DATE:
   1826              case ZCL_DATATYPE_UTC:
   1827              case ZCL_DATATYPE_BAC_OID:
   1828                buf = osal_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_1:
   \   0000CA                ; Setup parameters for call to function osal_buffer_uint32
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D1   12....       LCALL   ??osal_buffer_uint32?relay
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   8043         SJMP    ??zclSerializeData_8
   1829                break;
   1830                
   1831              case ZCL_DATATYPE_UINT40:
   1832                pStr = (uint8*)attrData;
   1833                osal_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_5:
   \   0000DB                ; Setup parameters for call to function osal_memcpy
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E0   7C05         MOV     R4,#0x5
   \   0000E2   8032         SJMP    ??zclSerializeData_10
   1834                break;
   1835                
   1836              case ZCL_DATATYPE_UINT48:
   1837                pStr = (uint8*)attrData;
   1838                osal_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_6:
   \   0000E4                ; Setup parameters for call to function osal_memcpy
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E9   7C06         MOV     R4,#0x6
   \   0000EB   8029         SJMP    ??zclSerializeData_10
   1839                break;
   1840                
   1841              case ZCL_DATATYPE_IEEE_ADDR:
   1842                pStr = (uint8*)attrData;
   1843                osal_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_7:
   \   0000ED                ; Setup parameters for call to function osal_memcpy
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C08         MOV     R4,#0x8
   \   0000F4   8020         SJMP    ??zclSerializeData_10
   1844                break;
   1845                
   1846              case ZCL_DATATYPE_CHAR_STR:
   1847              case ZCL_DATATYPE_OCTET_STR:
   1848                pStr = (uint8*)attrData;
   1849                len = *pStr++;
   \                     ??zclSerializeData_0:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F5..         MOV     ?V0 + 3,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   AE82         MOV     R6,DPL
   \   000100   AF83         MOV     R7,DPH
   1850                *buf++ = len;
   \   000102   8A82         MOV     DPL,R2
   \   000104   8B83         MOV     DPH,R3
   \   000106   F0           MOVX    @DPTR,A
   \   000107   EC           MOV     A,R4
   \   000108   FA           MOV     R2,A
   \   000109   ED           MOV     A,R5
   \   00010A   FB           MOV     R3,A
   1851                osal_memcpy( buf, pStr, len );
   \   00010B                ; Setup parameters for call to function osal_memcpy
   \   00010B   8E..         MOV     ?V0 + 0,R6
   \   00010D   8F..         MOV     ?V0 + 1,R7
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000114   AC..         MOV     R4,?V0 + 3
   \                     ??zclSerializeData_10:
   \   000116   7D00         MOV     R5,#0x0
   1852                break;
   1853                
   1854              case ZCL_DATATYPE_NO_DATA:
   1855              case ZCL_DATATYPE_UNKNOWN:
   1856                // Fall through
   1857          
   1858              default:
   1859                break;
   1860            }
   \   000118   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   1861          }
   \                     ??zclSerializeData_8:
   \   00011E   02....       LJMP    ?Subroutine84 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   FA           MOV     R2,A
   \   000003   ED           MOV     A,R5
   \   000004   FB           MOV     R3,A
   \   000005                REQUIRE ?Subroutine92
   \   000005                ; // Fall through to label ?Subroutine92

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine114_0
   \   000004                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   02....       LJMP    ?Subroutine91 & 0xFFFF
   1862          #endif // ZCL_READ || ZCL_WRITE || ZCL_REPORT
   1863          
   1864          #ifdef ZCL_REPORT
   1865          /*********************************************************************
   1866           * @fn      zclAnalogDataType
   1867           * @brief   Checks to see if Data Type is Analog
   1868           * @param   dataType - data type
   1869           * @return  TRUE if data type is analog
   1870           */
   1871          uint8 zclAnalogDataType( uint8 dataType )
   1872          {
   1873            uint8 analog;
   1874            
   1875            switch ( dataType )
   1876            {
   1877              case ZCL_DATATYPE_UINT8:
   1878              case ZCL_DATATYPE_UINT16:
   1879              case ZCL_DATATYPE_UINT24:
   1880              case ZCL_DATATYPE_UINT32:
   1881              case ZCL_DATATYPE_UINT40:
   1882              case ZCL_DATATYPE_UINT48:
   1883              case ZCL_DATATYPE_INT8:
   1884              case ZCL_DATATYPE_INT16:
   1885              case ZCL_DATATYPE_INT24:
   1886              case ZCL_DATATYPE_INT32:
   1887              case ZCL_DATATYPE_SEMI_PREC:
   1888              case ZCL_DATATYPE_SINGLE_PREC:
   1889              case ZCL_DATATYPE_DOUBLE_PREC:
   1890              case ZCL_DATATYPE_TOD:
   1891              case ZCL_DATATYPE_DATE:
   1892              case ZCL_DATATYPE_UTC:
   1893                analog = TRUE;
   1894                break;
   1895                
   1896              default:
   1897                analog = FALSE;
   1898                break;
   1899            }
   1900            return ( analog );
   1901          }
   1902          
   1903          /*********************************************************************
   1904           * @fn      zcl_BuildAnalogData
   1905           * @brief   Build an analog arribute out of sequential bytes.
   1906           * @param   dataType - type of data
   1907           *          pData - pointer to data
   1908           *          pBuf - where to put the data
   1909           */
   1910          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf)
   1911          {
   1912            switch ( dataType )
   1913            {
   1914              case ZCL_DATATYPE_UINT8:
   1915              case ZCL_DATATYPE_INT8:
   1916                *pData = *pBuf;
   1917                break;
   1918          
   1919              case ZCL_DATATYPE_UINT16:
   1920              case ZCL_DATATYPE_INT16:
   1921              case ZCL_DATATYPE_SEMI_PREC:
   1922                *((uint16*)pData) = BUILD_UINT16( pBuf[0], pBuf[1] ); 
   1923                break;
   1924           
   1925              case ZCL_DATATYPE_UINT24:
   1926              case ZCL_DATATYPE_INT24:
   1927                *((uint32*)pData) = osal_build_uint32( pBuf, 3 );
   1928                break;
   1929                
   1930              case ZCL_DATATYPE_UINT32:
   1931              case ZCL_DATATYPE_INT32:
   1932              case ZCL_DATATYPE_SINGLE_PREC:
   1933              case ZCL_DATATYPE_TOD:
   1934              case ZCL_DATATYPE_DATE:
   1935              case ZCL_DATATYPE_UTC:
   1936                *((uint32*)pData) = osal_build_uint32( pBuf, 4 );
   1937                break;
   1938                
   1939              case ZCL_DATATYPE_DOUBLE_PREC:
   1940                *pData = 0;
   1941                break;
   1942           
   1943              default:
   1944                break;
   1945            }
   1946          }
   1947          #endif // ZCL_REPORT
   1948          
   1949          /*********************************************************************
   1950           * @fn      zclGetDataTypeLength
   1951           * @brief   Return the length of the datatype in length. 
   1952           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or 
   1953           *                ZCL_DATATYPE_CHAR_STR data types.
   1954           * @param   dataType - data type
   1955           * @return  length of data
   1956           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1957          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   1958          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1959            uint8 len;
   1960            
   1961            switch ( dataType )
   \   000004   E9           MOV     A,R1
   \   000005   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclGetDataTypeLength>_0`:
   \   000008   02           DB        2
   \   000009   E0           DB        224
   \   00000A   E2           DB        226
   \   00000B   ....         DW        ??zclGetDataTypeLength_0
   \   00000D   E8           DB        232
   \   00000E   E9           DB        233
   \   00000F   ....         DW        ??zclGetDataTypeLength_1
   \   000011   1A           DB        26
   \   000012   08           DB        8
   \   000013   ....         DW        ??zclGetDataTypeLength_2
   \   000015   09           DB        9
   \   000016   ....         DW        ??zclGetDataTypeLength_1
   \   000018   0A           DB        10
   \   000019   ....         DW        ??zclGetDataTypeLength_3
   \   00001B   0B           DB        11
   \   00001C   ....         DW        ??zclGetDataTypeLength_0
   \   00001E   10           DB        16
   \   00001F   ....         DW        ??zclGetDataTypeLength_2
   \   000021   18           DB        24
   \   000022   ....         DW        ??zclGetDataTypeLength_2
   \   000024   19           DB        25
   \   000025   ....         DW        ??zclGetDataTypeLength_1
   \   000027   1A           DB        26
   \   000028   ....         DW        ??zclGetDataTypeLength_3
   \   00002A   1B           DB        27
   \   00002B   ....         DW        ??zclGetDataTypeLength_0
   \   00002D   20           DB        32
   \   00002E   ....         DW        ??zclGetDataTypeLength_2
   \   000030   21           DB        33
   \   000031   ....         DW        ??zclGetDataTypeLength_1
   \   000033   22           DB        34
   \   000034   ....         DW        ??zclGetDataTypeLength_3
   \   000036   23           DB        35
   \   000037   ....         DW        ??zclGetDataTypeLength_0
   \   000039   24           DB        36
   \   00003A   ....         DW        ??zclGetDataTypeLength_4
   \   00003C   25           DB        37
   \   00003D   ....         DW        ??zclGetDataTypeLength_5
   \   00003F   28           DB        40
   \   000040   ....         DW        ??zclGetDataTypeLength_2
   \   000042   29           DB        41
   \   000043   ....         DW        ??zclGetDataTypeLength_1
   \   000045   2A           DB        42
   \   000046   ....         DW        ??zclGetDataTypeLength_3
   \   000048   2B           DB        43
   \   000049   ....         DW        ??zclGetDataTypeLength_0
   \   00004B   30           DB        48
   \   00004C   ....         DW        ??zclGetDataTypeLength_2
   \   00004E   31           DB        49
   \   00004F   ....         DW        ??zclGetDataTypeLength_1
   \   000051   38           DB        56
   \   000052   ....         DW        ??zclGetDataTypeLength_1
   \   000054   39           DB        57
   \   000055   ....         DW        ??zclGetDataTypeLength_0
   \   000057   3A           DB        58
   \   000058   ....         DW        ??zclGetDataTypeLength_6
   \   00005A   EA           DB        234
   \   00005B   ....         DW        ??zclGetDataTypeLength_0
   \   00005D   F0           DB        240
   \   00005E   ....         DW        ??zclGetDataTypeLength_6
   \   000060   ....         DW        ??zclGetDataTypeLength_7
   1962            {
   1963              case ZCL_DATATYPE_DATA8:
   1964              case ZCL_DATATYPE_BOOLEAN:
   1965              case ZCL_DATATYPE_BITMAP8:
   1966              case ZCL_DATATYPE_INT8:
   1967              case ZCL_DATATYPE_UINT8:
   1968              case ZCL_DATATYPE_ENUM8:
   1969                len = 1;
   \                     ??zclGetDataTypeLength_2:
   \   000062   7901         MOV     R1,#0x1
   \   000064   801A         SJMP    ??zclGetDataTypeLength_8
   1970                break;
   1971                
   1972              case ZCL_DATATYPE_DATA16:
   1973              case ZCL_DATATYPE_BITMAP16:
   1974              case ZCL_DATATYPE_UINT16:
   1975              case ZCL_DATATYPE_INT16: 
   1976              case ZCL_DATATYPE_ENUM16:
   1977              case ZCL_DATATYPE_SEMI_PREC:
   1978              case ZCL_DATATYPE_CLUSTER_ID:
   1979              case ZCL_DATATYPE_ATTR_ID:
   1980                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000066   7902         MOV     R1,#0x2
   \   000068   8016         SJMP    ??zclGetDataTypeLength_8
   1981                break;
   1982                
   1983              case ZCL_DATATYPE_DATA24:
   1984              case ZCL_DATATYPE_BITMAP24: 
   1985              case ZCL_DATATYPE_UINT24:
   1986              case ZCL_DATATYPE_INT24:
   1987                len = 3;
   \                     ??zclGetDataTypeLength_3:
   \   00006A   7903         MOV     R1,#0x3
   \   00006C   8012         SJMP    ??zclGetDataTypeLength_8
   1988                break;
   1989                
   1990              case ZCL_DATATYPE_DATA32:
   1991              case ZCL_DATATYPE_BITMAP32:
   1992              case ZCL_DATATYPE_UINT32:
   1993              case ZCL_DATATYPE_INT32:
   1994              case ZCL_DATATYPE_SINGLE_PREC:
   1995              case ZCL_DATATYPE_TOD:
   1996              case ZCL_DATATYPE_DATE:
   1997              case ZCL_DATATYPE_UTC:
   1998              case ZCL_DATATYPE_BAC_OID:
   1999                len = 4;
   \                     ??zclGetDataTypeLength_0:
   \   00006E   7904         MOV     R1,#0x4
   \   000070   800E         SJMP    ??zclGetDataTypeLength_8
   2000                break;                       
   2001                          
   2002             case ZCL_DATATYPE_UINT40:
   2003                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   000072   7905         MOV     R1,#0x5
   \   000074   800A         SJMP    ??zclGetDataTypeLength_8
   2004                 break;
   2005                 
   2006             case ZCL_DATATYPE_UINT48:
   2007                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000076   7906         MOV     R1,#0x6
   \   000078   8006         SJMP    ??zclGetDataTypeLength_8
   2008                 break;
   2009                 
   2010             case ZCL_DATATYPE_DOUBLE_PREC:
   2011             case ZCL_DATATYPE_IEEE_ADDR:
   2012               len = 8;
   \                     ??zclGetDataTypeLength_6:
   \   00007A   7908         MOV     R1,#0x8
   \   00007C   8002         SJMP    ??zclGetDataTypeLength_8
   2013               break;
   2014          
   2015              case ZCL_DATATYPE_NO_DATA:
   2016              case ZCL_DATATYPE_UNKNOWN:
   2017                // Fall through
   2018                
   2019              default:
   2020                len = 0;
   \                     ??zclGetDataTypeLength_7:
   \   00007E   7900         MOV     R1,#0x0
   2021                break;
   2022            }  
   2023            return ( len );
   \                     ??zclGetDataTypeLength_8:
   \   000080   02....       LJMP    ?Subroutine83 & 0xFFFF
   2024          }
   2025          
   2026          /*********************************************************************
   2027           * @fn      zclGetAttrDataLength
   2028           * @brief   Return the length of the attribute.
   2029           * @param   dataType - data type
   2030           *          pData - pointer to data
   2031           * @return  returns atrribute lentgh
   2032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2033          uint8 zclGetAttrDataLength( uint8  dataType, uint8 *pData)
   \                     zclGetAttrDataLength:
   2034          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2035            uint8 dataLen = 0;
   2036            
   2037            if ( dataType  == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \   000004   7442         MOV     A,#0x42
   \   000006   69           XRL     A,R1
   \   000007   6005         JZ      ??zclGetAttrDataLength_0
   \   000009   7441         MOV     A,#0x41
   \   00000B   69           XRL     A,R1
   \   00000C   7009         JNZ     ??zclGetAttrDataLength_1
   2038            {
   2039              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   04           INC     A
   \   000014   F9           MOV     R1,A
   \   000015   8003         SJMP    ??zclGetAttrDataLength_2
   2040            }
   2041            else
   2042            {
   2043              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_1:
   \   000017                ; Setup parameters for call to function zclGetDataTypeLength
   \   000017   12....       LCALL   ??zclGetDataTypeLength?relay
   2044            }
   2045          
   2046            return ( dataLen );
   \                     ??zclGetAttrDataLength_2:
   \   00001A   02....       LJMP    ?Subroutine83 & 0xFFFF
   2047          }
   2048          
   2049          /*********************************************************************
   2050           * @fn      zclReadAttrData
   2051           * @brief   Read the attribute's current value into pAttrData.
   2052           * @param   pAttrData - where to put attribute data
   2053           *          pAttr - pointer to attribute
   2054           * @return Success
   2055           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2056          uint8 zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr )
   \                     zclReadAttrData:
   2057          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2058            uint8 dataLen;
   2059              
   2060            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \   000009   EC           MOV     A,R4
   \   00000A   2406         ADD     A,#0x6
   \   00000C   F8           MOV     R0,A
   \   00000D   ED           MOV     A,R5
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   \   000015                ; Setup parameters for call to function zclGetAttrDataLength
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   12....       LCALL   ?Subroutine25 & 0xFFFF
   2061            osal_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \                     ??CrossCallReturnLabel_145:
   \   000023                ; Setup parameters for call to function osal_memcpy
   \   000023   85..82       MOV     DPL,?V0 + 0
   \   000026   85..83       MOV     DPH,?V0 + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 1,A
   \   000030   75..00       MOV     ?V0 + 2,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EA           MOV     A,R2
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   2062            return ( ZCL_STATUS_SUCCESS );
   \   000046   7900         MOV     R1,#0x0
   \   000048   02....       LJMP    ?Subroutine96 & 0xFFFF
   2063          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine105_0
   \   000002                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine106_0
   \   000002                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   FA           MOV     R2,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   22           RET
   2064          
   2065          #ifdef ZCL_WRITE
   2066          /*********************************************************************
   2067           * @fn      zclWriteAttrData
   2068           * @brief   Write the received data.
   2069           * @param   pAttr - where to write data to
   2070           *          pWriteRec - data to be written
   2071           * @return  Successful if data was written
   2072           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2073          static uint8 zclWriteAttrData( zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   \                     zclWriteAttrData:
   2074          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   2075            uint8 len;
   2076          
   2077            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   5058         JNC     ??zclWriteAttrData_0
   2078            {
   2079              if ( zcl_ValidateAttrDataCB && !zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   00001B   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   7002         JNZ     ??zclWriteAttrData_1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \                     ??zclWriteAttrData_1:
   \   000023   6010         JZ      ??zclWriteAttrData_2
   \   000025                ; Setup parameters for indirect call
   \   000025   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000028   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   E9           MOV     A,R1
   \   00002F   7004         JNZ     ??zclWriteAttrData_2
   2080                return ( ZCL_STATUS_INVALID_VALUE );
   \   000031   7987         MOV     R1,#-0x79
   \   000033   8040         SJMP    ??zclWriteAttrData_3
   2081              
   2082              len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000035   EE           MOV     A,R6
   \   000036   2403         ADD     A,#0x3
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   0E           INC     R6
   \   00003C   0E           INC     R6
   \   00003D   0E           INC     R6
   \   00003E   FF           MOV     R7,A
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000046   85..82       MOV     DPL,?V0 + 0
   \   000049   85..83       MOV     DPH,?V0 + 1
   \   00004C   12....       LCALL   ?Subroutine25 & 0xFFFF
   2083              osal_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \                     ??CrossCallReturnLabel_146:
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   EA           MOV     A,R2
   \   00005A   FC           MOV     R4,A
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   2084              return ( ZCL_STATUS_SUCCESS );
   \   00006F   7900         MOV     R1,#0x0
   \   000071   8002         SJMP    ??zclWriteAttrData_3
   2085            }
   2086            return ( ZCL_STATUS_READ_ONLY );
   \                     ??zclWriteAttrData_0:
   \   000073   7988         MOV     R1,#-0x78
   \                     ??zclWriteAttrData_3:
   \   000075   7F07         MOV     R7,#0x7
   \   000077   02....       LJMP    ?BANKED_LEAVE_XDATA
   2087          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   75..00       MOV     ?V0 + 6,#0x0
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   02....       LJMP    ?Subroutine87 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   02....       LJMP    ?Subroutine88 & 0xFFFF
   2088          #endif // ZCL_WRITE
   2089          
   2090          #ifdef ZCL_READ
   2091          /*********************************************************************
   2092           * @fn      zclParseInReadCmd
   2093           * @brief   Parse the "Profile" Read Commands
   2094           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2095           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2096           * @param   pCmd - pointer to incoming data to parse
   2097           * @return  pointer to the parsed command structure
   2098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2099          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   2100          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2101            zclReadCmd_t *readCmd;
   2102            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00000C   E8           MOV     A,R0
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
   2103            
   2104            readCmd = (zclReadCmd_t *)osal_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \   000010   12....       LCALL   ?Subroutine29 & 0xFFFF
   2105            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_36:
   \   000013   7001         JNZ     ??zclParseInReadCmd_0
   \   000015   EB           MOV     A,R3
   \                     ??zclParseInReadCmd_0:
   \   000016   6049         JZ      ??zclParseInReadCmd_1
   2106            {
   2107              uint8 i;
   2108              
   2109              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   C3           CLR     C
   \   000023   13           RRC     A
   \   000024   E8           MOV     A,R0
   \   000025   13           RRC     A
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   F0           MOVX    @DPTR,A
   2110              for ( i = 0; i < readCmd->numAttr; i++ )
   \   00002B   75..00       MOV     ?V0 + 0,#0x0
   \   00002E   8025         SJMP    ??zclParseInReadCmd_2
   2111              {
   2112                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_3:
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   12....       LCALL   ?Subroutine70 & 0xFFFF
   2113                pBuf += 2;
   2114              }
   \                     ??CrossCallReturnLabel_212:
   \   000037   F9           MOV     R1,A
   \   000038   E4           CLR     A
   \   000039   2C           ADD     A,R4
   \   00003A   E9           MOV     A,R1
   \   00003B   FD           MOV     R5,A
   \   00003C   E5..         MOV     A,?V0 + 0
   \   00003E   33           RLC     A
   \   00003F   F8           MOV     R0,A
   \   000040   E4           CLR     A
   \   000041   33           RLC     A
   \   000042   F9           MOV     R1,A
   \   000043   EA           MOV     A,R2
   \   000044   28           ADD     A,R0
   \   000045   F582         MOV     DPL,A
   \   000047   EB           MOV     A,R3
   \   000048   39           ADDC    A,R1
   \   000049   F583         MOV     DPH,A
   \   00004B   A3           INC     DPTR
   \   00004C   EC           MOV     A,R4
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   ED           MOV     A,R5
   \   000050   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000053   05..         INC     ?V0 + 0
   \                     ??zclParseInReadCmd_2:
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FC           MOV     R4,A
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   C3           CLR     C
   \   00005E   9C           SUBB    A,R4
   \   00005F   40CF         JC      ??zclParseInReadCmd_3
   2115            }
   2116            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_1:
   \   000061   02....       LJMP    ?Subroutine84 & 0xFFFF
   2117          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   8582..       MOV     ?V0 + 0,DPL
   \   000008   8583..       MOV     ?V0 + 1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2401         ADD     A,#0x1
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??osal_mem_alloc?relay
   \   000017   EA           MOV     A,R2
   \   000018   22           RET
   2118          
   2119          /*********************************************************************
   2120           * @fn      zclParseInReadRspCmd
   2121           * @brief   Parse the "Profile" Read Response Commands
   2122           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2123           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2124           * @param   pCmd - pointer to incoming data to parse
   2125           * @return  pointer to the parsed command structure
   2126           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E9           MOV     A,R1
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   FC           MOV     R4,A
   \   000004   7D00         MOV     R5,#0x0
   \   000006   AA..         MOV     R2,?V0 + 2
   \   000008   AB..         MOV     R3,?V0 + 3
   \   00000A                REQUIRE ?Subroutine87
   \   00000A                ; // Fall through to label ?Subroutine87

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2127          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   2128          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine34 & 0xFFFF
   2129            zclReadRspCmd_t *readRspCmd;
   2130            zclReadRspStatus_t *statusRec;
   2131            uint8 *pBuf = pCmd->pData;
   2132            uint8 *dataPtr;
   2133            uint8 numAttr = 0;
   2134            uint8 hdrLen;
   2135            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_44:
   \   000008   801B         SJMP    ??zclParseInReadRspCmd_0
   2136            uint8 attrDataLen;
   2137            uint8 dataType;
   2138            uint8 status;
   2139            uint8 i;
   2140            
   2141            // find out the number of attributes and the length of attribute data
   2142            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2143            {
   2144              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   00000A   12....       LCALL   ?Subroutine57 & 0xFFFF
   2145          
   2146              pBuf += 2; // move pass attribute id
   2147              
   2148              status = *pBuf++;  
   \                     ??CrossCallReturnLabel_110:
   \   00000D   A3           INC     DPTR
   \   00000E   AE82         MOV     R6,DPL
   \   000010   AF83         MOV     R7,DPH
   2149              if ( status == ZCL_STATUS_SUCCESS )
   \   000012   7011         JNZ     ??zclParseInReadRspCmd_0
   2150              {
   2151                dataType = *pBuf++;
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   A3           INC     DPTR
   \   000017   0E           INC     R6
   \   000018   12....       LCALL   ?Subroutine51 & 0xFFFF
   2152          
   2153                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2154                pBuf += attrDataLen; // move pass attribute data
   2155                
   2156                if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_65:
   \   00001B   5002         JNC     ??zclParseInReadRspCmd_2
   2157                  attrDataLen++;
   \   00001D   05..         INC     ?V0 + 8
   2158                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   00001F   E5..         MOV     A,?V0 + 8
   \   000021   25..         ADD     A,?V0 + 6
   \   000023   F5..         MOV     ?V0 + 6,A
   2159              }
   2160            }
   \                     ??zclParseInReadRspCmd_0:
   \   000025   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000028   40E0         JC      ??zclParseInReadRspCmd_1
   2161           
   2162            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) ); // calculate the length of the response header
   \   00002A   75F006       MOV     B,#0x6
   \   00002D   12....       LCALL   ?Subroutine48 & 0xFFFF
   2163            
   2164            readRspCmd = (zclReadRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2165            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_61:
   \   000030   7001         JNZ     ??zclParseInReadRspCmd_3
   \   000032   EB           MOV     A,R3
   \                     ??zclParseInReadRspCmd_3:
   \   000033   6049         JZ      ??zclParseInReadRspCmd_4
   2166            {
   2167              pBuf = pCmd->pData;
   \   000035   12....       LCALL   ?Subroutine22 & 0xFFFF
   2168              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   2169                  
   2170              readRspCmd->numAttr = numAttr;
   2171              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_26:
   \   000038   803D         SJMP    ??zclParseInReadRspCmd_5
   2172              {
   2173                statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   00003A   E5..         MOV     A,?V0 + 9
   \   00003C   75F006       MOV     B,#0x6
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
   2174                
   2175                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2176                pBuf += 2;
   2177                
   2178                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_108:
   \   000042   12....       LCALL   ?Subroutine6 & 0xFFFF
   2179                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_163:
   \   000045   702E         JNZ     ??CrossCallReturnLabel_67
   2180                {
   2181                  statusRec->dataType = *pBuf++;
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   85..82       MOV     DPL,?V0 + 10
   \   00004C   85..83       MOV     DPH,?V0 + 11
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000055   0E           INC     R6
   \   000056   AF83         MOV     R7,DPH
   2182          
   2183                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   000058                ; Setup parameters for call to function zclGetAttrDataLength
   \   000058   12....       LCALL   ?Subroutine59 & 0xFFFF
   2184                  osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_120:
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005E   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   2185                  statusRec->data = dataPtr;
   \   000064   85..82       MOV     DPL,?V0 + 10
   \   000067   85..83       MOV     DPH,?V0 + 11
   \   00006A   A3           INC     DPTR
   \   00006B   12....       LCALL   ?Subroutine4 & 0xFFFF
   2186                  
   2187                  pBuf += attrDataLen; // move pass attribute data
   2188                 
   2189                  if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_6:
   \   00006E   5002         JNC     ??zclParseInReadRspCmd_7
   2190                    attrDataLen++;
   \   000070   05..         INC     ?V0 + 8
   2191                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   000072   12....       LCALL   ?Subroutine52 & 0xFFFF
   2192                }
   2193              }
   \                     ??CrossCallReturnLabel_67:
   \   000075   05..         INC     ?V0 + 9
   \                     ??zclParseInReadRspCmd_5:
   \   000077   E5..         MOV     A,?V0 + 9
   \   000079   C3           CLR     C
   \   00007A   95..         SUBB    A,?V0 + 7
   \   00007C   40BC         JC      ??zclParseInReadRspCmd_6
   2194            }
   2195            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   00007E                REQUIRE ?Subroutine97
   \   00007E                ; // Fall through to label ?Subroutine97
   2196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   7F0C         MOV     R7,#0xc
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine109_0
   \   000007                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?V0 + 2
   \   000008   85..83       MOV     DPH,?V0 + 3
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   28           ADD     A,R0
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   39           ADDC    A,R1
   \   000011   F9           MOV     R1,A
   \   000012   C3           CLR     C
   \   000013   EE           MOV     A,R6
   \   000014   98           SUBB    A,R0
   \   000015   EF           MOV     A,R7
   \   000016   99           SUBB    A,R1
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?V0 + 10
   \   000003   85..83       MOV     DPH,?V0 + 11
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine110_0
   \   000008                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000007   E9           MOV     A,R1
   \   000008   F5..         MOV     ?V0 + 8,A
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   8E..         MOV     ?V0 + 4,R6
   \   00000C   8F..         MOV     ?V0 + 5,R7
   \   00000E                REQUIRE ?Subroutine88
   \   00000E                ; // Fall through to label ?Subroutine88

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   05..         INC     ?V0 + 7
   \   000002   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000005                REQUIRE ?Subroutine86
   \   000005                ; // Fall through to label ?Subroutine86

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 8
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   25..         ADD     A,?V0 + 4
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   E5..         MOV     A,?V0 + 3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   AF83         MOV     R7,DPH
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000009   E9           MOV     A,R1
   \   00000A   F5..         MOV     ?V0 + 8,A
   \   00000C   F5..         MOV     ?V0 + 4,A
   \   00000E   EE           MOV     A,R6
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FE           MOV     R6,A
   \   000012   EF           MOV     A,R7
   \   000013   3400         ADDC    A,#0x0
   \   000015   FF           MOV     R7,A
   \   000016   E9           MOV     A,R1
   \   000017   A2E0         MOV     C,0xE0 /* A   */.0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E5..         MOV     A,?V0 + 7
   \   000002   A4           MUL     AB
   \   000003   04           INC     A
   \   000004   FA           MOV     R2,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8582..       MOV     ?V0 + 4,DPL
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   85....       MOV     ?V0 + 0,?V0 + 6
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   25..         ADD     A,?V0 + 4
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3400         ADDC    A,#0x0
   \   000015   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   EA           MOV     A,R2
   \   000005   2403         ADD     A,#0x3
   \   000007   F5..         MOV     ?V0 + 2,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FE           MOV     R6,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
   \   000012   75..00       MOV     ?V0 + 7,#0x0
   \   000015   75..00       MOV     ?V0 + 6,#0x0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   EA           MOV     A,R2
   \   00000C   25..         ADD     A,?V0 + 4
   \   00000E   F5..         MOV     ?V0 + 2,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F5..         MOV     ?V0 + 3,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   E5..         MOV     A,?V0 + 7
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   75..00       MOV     ?V0 + 9,#0x0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   25..         ADD     A,?V0 + 4
   \   00000D   FE           MOV     R6,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FF           MOV     R7,A
   \   000012   E5..         MOV     A,?V0 + 8
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 10,DPL
   \   000007   8583..       MOV     ?V0 + 11,DPH
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   EA           MOV     A,R2
   \   000014   85..82       MOV     DPL,?V0 + 10
   \   000017   85..83       MOV     DPH,?V0 + 11
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   E9           MOV     A,R1
   \   00001D   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000020   02....       LJMP    ?Subroutine86 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 0
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 1
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004                ; Setup parameters for call to function zclGetAttrDataLength
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine123_0
   \   000001                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET
   2197          #endif // ZCL_READ
   2198          
   2199          #ifdef ZCL_WRITE
   2200          /*********************************************************************
   2201           * @fn      zclParseInWriteCmd
   2202           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   2203           *          Response Commands
   2204           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2205           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2206           * @param   pCmd - pointer to incoming data to parse
   2207           * @return  pointer to the parsed command structure
   2208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2209          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   2210          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine34 & 0xFFFF
   2211            zclWriteCmd_t *writeCmd;
   2212            zclWriteRec_t *statusRec;
   2213            uint8 *pBuf = pCmd->pData;
   2214            uint8 attrDataLen;
   2215            uint8 *dataPtr;
   2216            uint8 numAttr = 0;
   2217            uint8 hdrLen;
   2218            uint8 dataLen = 0;
   \                     ??CrossCallReturnLabel_45:
   \   000008   8014         SJMP    ??zclParseInWriteCmd_0
   2219            uint8 dataType;
   2220            uint8 i;
   2221          
   2222            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   2223            {
   2224              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   00000A   12....       LCALL   ?Subroutine57 & 0xFFFF
   2225          
   2226              pBuf += 2; // move pass attribute id
   2227          
   2228              dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_111:
   \   00000D   F9           MOV     R1,A
   \   00000E   A3           INC     DPTR
   \   00000F   AE82         MOV     R6,DPL
   \   000011   12....       LCALL   ?Subroutine51 & 0xFFFF
   2229          
   2230              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2231              pBuf += attrDataLen; // move pass attribute data
   2232              
   2233              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   \                     ??CrossCallReturnLabel_66:
   \   000014   5002         JNC     ??zclParseInWriteCmd_2
   2234                attrDataLen++;
   \   000016   05..         INC     ?V0 + 8
   2235              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   000018   E5..         MOV     A,?V0 + 8
   \   00001A   25..         ADD     A,?V0 + 6
   \   00001C   F5..         MOV     ?V0 + 6,A
   2236            }
   \                     ??zclParseInWriteCmd_0:
   \   00001E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000021   40E7         JC      ??zclParseInWriteCmd_1
   2237            
   2238            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) ); // calculate the length of the response header
   \   000023   75F005       MOV     B,#0x5
   \   000026   12....       LCALL   ?Subroutine48 & 0xFFFF
   2239            
   2240            writeCmd = (zclWriteCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2241            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_62:
   \   000029   7001         JNZ     ??zclParseInWriteCmd_3
   \   00002B   EB           MOV     A,R3
   \                     ??zclParseInWriteCmd_3:
   \   00002C   6036         JZ      ??zclParseInWriteCmd_4
   2242            {
   2243              pBuf = pCmd->pData;
   \   00002E   12....       LCALL   ?Subroutine22 & 0xFFFF
   2244              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   2245          
   2246              writeCmd->numAttr = numAttr;
   2247              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_27:
   \   000031   802A         SJMP    ??zclParseInWriteCmd_5
   2248              {
   2249                statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   000033   E5..         MOV     A,?V0 + 9
   \   000035   75F005       MOV     B,#0x5
   \   000038   12....       LCALL   ?Subroutine3 & 0xFFFF
   2250                
   2251                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2252                pBuf += 2;
   2253                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_109:
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ?Subroutine6 & 0xFFFF
   2254          
   2255                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_164:
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003F   12....       LCALL   ?Subroutine59 & 0xFFFF
   2256                osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_121:
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000045   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   2257                statusRec->attrData = dataPtr;
   \   00004B   85..82       MOV     DPL,?V0 + 10
   \   00004E   85..83       MOV     DPH,?V0 + 11
   \   000051   12....       LCALL   ?Subroutine4 & 0xFFFF
   2258                
   2259                pBuf += attrDataLen; // move pass attribute data
   2260          
   2261                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   \                     ??CrossCallReturnLabel_7:
   \   000054   5002         JNC     ??zclParseInWriteCmd_7
   2262                  attrDataLen++;
   \   000056   05..         INC     ?V0 + 8
   2263                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   000058   12....       LCALL   ?Subroutine52 & 0xFFFF
   2264              }
   \                     ??CrossCallReturnLabel_68:
   \   00005B   05..         INC     ?V0 + 9
   \                     ??zclParseInWriteCmd_5:
   \   00005D   E5..         MOV     A,?V0 + 9
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V0 + 7
   \   000062   40CF         JC      ??zclParseInWriteCmd_6
   2265            }
   2266            
   2267            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   000064   02....       LJMP    ?Subroutine97 & 0xFFFF
   2268          }
   2269          
   2270          /*********************************************************************
   2271           * @fn      zclParseInWriteRspCmd
   2272           * @brief   Parse the "Profile" Write Response Commands
   2273           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2274           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2275           * @param   pCmd - pointer to incoming data to parse
   2276           * @return  pointer to the parsed command structure
   2277           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2278          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   2279          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2280            zclWriteRspCmd_t *writeRspCmd;
   2281            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV     A,R2
   \   000006   2403         ADD     A,#0x3
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   EB           MOV     A,R3
   \   00000B   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00000E   12....       LCALL   ?Subroutine35 & 0xFFFF
   2282            uint8 i = 0;
   \                     ??CrossCallReturnLabel_47:
   \   000011   75..00       MOV     ?V0 + 4,#0x0
   2283          
   2284            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000014   12....       LCALL   ?Subroutine29 & 0xFFFF
   2285            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_37:
   \   000017   7001         JNZ     ??zclParseInWriteRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInWriteRspCmd_0:
   \   00001A   605C         JZ      ??zclParseInWriteRspCmd_1
   2286            {
   2287              if ( pCmd->dataLen == 1 )
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7002         JNZ     ??zclParseInWriteRspCmd_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \                     ??zclParseInWriteRspCmd_2:
   \   000029   703B         JNZ     ??CrossCallReturnLabel_99
   2288              {
   2289                writeRspCmd->attrList[i++].status = *pBuf; // special case when all writes were successfull
   \   00002B   12....       LCALL   ?Subroutine40 & 0xFFFF
   2290              }
   \                     ??CrossCallReturnLabel_186:
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   75..01       MOV     ?V0 + 4,#0x1
   \   000033   803C         SJMP    ??zclParseInWriteRspCmd_3
   2291              else
   2292              {
   2293                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2294                {
   2295                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000035   E5..         MOV     A,?V0 + 4
   \   000037   75F003       MOV     B,#0x3
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   EA           MOV     A,R2
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EB           MOV     A,R3
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ?Subroutine5 & 0xFFFF
   2296                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_9:
   \   000050   F5..         MOV     ?V0 + 6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FD           MOV     R5,A
   \   000055   E5..         MOV     A,?V0 + 6
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   ED           MOV     A,R5
   \   000060   F0           MOVX    @DPTR,A
   \   000061   05..         INC     ?V0 + 4
   2297                  pBuf += 2;
   \   000063   12....       LCALL   ?Subroutine77 & 0xFFFF
   2298                }
   \                     ??CrossCallReturnLabel_99:
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   2299              }
   \                     ??CrossCallReturnLabel_159:
   \   00006F   40C4         JC      ??zclParseInWriteRspCmd_4
   2300              writeRspCmd->numAttr = i; 
   \                     ??zclParseInWriteRspCmd_3:
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   E5..         MOV     A,?V0 + 4
   \   000077   F0           MOVX    @DPTR,A
   2301            }
   2302            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_1:
   \   000078   7F08         MOV     R7,#0x8
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2303          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET
   2304          #endif // ZCL_WRITE
   2305          
   2306          #ifdef ZCL_REPORT
   2307          /*********************************************************************
   2308           * @fn      zclParseInConfigReportCmd
   2309           * @brief   Parse the "Profile" Configure Reporting Command
   2310           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2311           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2312           * @param   pCmd - pointer to incoming data to parse
   2313           * @return  pointer to the parsed command structure
   2314           */
   2315          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   2316          {
   2317            zclCfgReportCmd_t *cfgReportCmd;
   2318            zclCfgReportRec_t *reportRec;
   2319            uint8 *pBuf = pCmd->pData;
   2320            uint8 *dataPtr;
   2321            uint8 numAttr = 0;
   2322            uint8 direction;
   2323            uint8 dataType;
   2324            uint8 hdrLen;
   2325            uint8 dataLen = 0;
   2326            uint8 reportChangeLen; // length of Reportable Change field
   2327            uint8 i;
   2328           
   2329            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // Calculate the length of the Request command
   2330            {
   2331              numAttr++;
   2332              
   2333              direction = *pBuf++;
   2334              pBuf += 2; // move pass the attribute ID
   2335              
   2336              if ( direction == ZCL_SEND_ATTR_REPORTS ) // Is there a Reportable Change field?
   2337              {
   2338                dataType = *pBuf++;
   2339                pBuf += 4; // move pass the Min and Max Reporting Intervals
   2340           
   2341                if ( zclAnalogDataType( dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2342                {
   2343                  reportChangeLen = zclGetDataTypeLength( dataType );
   2344                  pBuf += reportChangeLen;
   2345                  
   2346                  if ( PADDING_NEEDED( reportChangeLen ) ) // add padding if needed
   2347                    reportChangeLen++;
   2348                  dataLen += reportChangeLen;
   2349                }
   2350              }
   2351              else
   2352              {
   2353                pBuf += 2; // move pass the Timeout Period
   2354              }
   2355            } // while loop
   2356          
   2357            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   2358            
   2359            cfgReportCmd = (zclCfgReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2360            if ( cfgReportCmd != NULL )
   2361            { 
   2362              pBuf = pCmd->pData;
   2363              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   2364              
   2365              cfgReportCmd->numAttr = numAttr;
   2366              for ( i = 0; i < numAttr; i++ )
   2367              {
   2368                reportRec = &(cfgReportCmd->attrList[i]);
   2369                
   2370                osal_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   2371                  
   2372                reportRec->direction = *pBuf++;
   2373                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2374                pBuf += 2;
   2375                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   2376                {
   2377                 
   2378                  reportRec->dataType = *pBuf++; // Attribute to be reported
   2379                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2380                  pBuf += 2;
   2381                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2382                  pBuf += 2;
   2383                 
   2384                  if ( zclAnalogDataType( reportRec->dataType ) ) // For attributes of 'discrete' data types this field is omitted
   2385                  {
   2386                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   2387                    reportRec->reportableChange = dataPtr;
   2388                    
   2389                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   2390                    pBuf += reportChangeLen;
   2391                   
   2392                    if ( PADDING_NEEDED( reportChangeLen ) ) // advance attribute data pointer
   2393                      reportChangeLen++;
   2394                    dataPtr += reportChangeLen;
   2395                  }
   2396                }
   2397                else
   2398                {
   2399                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] ); // Attribute reports to be received
   2400                  pBuf += 2;
   2401                }
   2402              } // while loop
   2403            }
   2404            return ( (void *)cfgReportCmd );
   2405          }
   2406          
   2407          /*********************************************************************
   2408           * @fn      zclParseInConfigReportRspCmd
   2409           * @brief   Parse the "Profile" Configure Reporting Response Command
   2410           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2411           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2412           * @param   pCmd - pointer to incoming data to parse
   2413           * @return  pointer to the parsed command structure
   2414           */
   2415          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   2416          {
   2417            zclCfgReportRspCmd_t *cfgReportRspCmd;
   2418            uint8 *pBuf = pCmd->pData;
   2419            uint8 numAttr;
   2420            uint8 i; 
   2421            
   2422            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   2423            
   2424            cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof( zclCfgReportRspCmd_t ) 
   2425                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   2426            if ( cfgReportRspCmd != NULL )
   2427            {
   2428              cfgReportRspCmd->numAttr = numAttr;
   2429              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   2430              {
   2431                cfgReportRspCmd->attrList[i].status = *pBuf++;
   2432                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   2433                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2434                pBuf += 2;
   2435              }
   2436            }
   2437            return ( (void *)cfgReportRspCmd );  
   2438          }
   2439          
   2440          /*********************************************************************
   2441           * @fn      zclParseInReadReportCfgCmd
   2442           * @brief   Parse the "Profile" Read Reporting Configuration Command
   2443           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2444           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2445           * @param   pCmd - pointer to incoming data to parse
   2446           * @return  pointer to the parsed command structure
   2447           */
   2448          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   2449          {
   2450            zclReadReportCfgCmd_t *readReportCfgCmd;
   2451            uint8 *pBuf = pCmd->pData;
   2452            uint8 numAttr;
   2453            uint8 i;
   2454            
   2455            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   2456            
   2457            readReportCfgCmd = (zclReadReportCfgCmd_t *)osal_mem_alloc( sizeof( zclReadReportCfgCmd_t ) 
   2458                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   2459            if ( readReportCfgCmd != NULL )
   2460            {
   2461              readReportCfgCmd->numAttr = numAttr;
   2462              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   2463              {
   2464                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   2465                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2466                pBuf += 2;
   2467              }
   2468            }
   2469            return ( (void *)readReportCfgCmd );
   2470          }
   2471          
   2472          /*********************************************************************
   2473           * @fn      zclParseInReadReportCfgRspCmd
   2474           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   2475           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2476           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2477           * @param   pCmd - pointer to incoming data to parse
   2478           * @return  pointer to the parsed command structure
   2479           */
   2480          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   2481          {
   2482            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   2483            zclReportCfgRspRec_t *reportRspRec;
   2484            uint8 reportChangeLen;
   2485            uint8 *pBuf = pCmd->pData;
   2486            uint8 *dataPtr;
   2487            uint8 numAttr = 0;
   2488            uint8 hdrLen;
   2489            uint8 dataLen = 0;
   2490            uint8 status;
   2491            uint8 direction;
   2492            uint8 dataType;
   2493            uint8 i;
   2494            
   2495            // Calculate the length of the response command
   2496            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2497            { 
   2498              numAttr++;
   2499              
   2500              status = *pBuf++;
   2501              direction = *pBuf++; 
   2502              pBuf += 2; // move pass the attribute ID
   2503              
   2504              if ( status == ZCL_STATUS_SUCCESS )
   2505              {
   2506                if ( direction == ZCL_SEND_ATTR_REPORTS )
   2507                {
   2508                  dataType = *pBuf++;
   2509                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   2510           
   2511                  // For attributes of 'discrete' data types this field is omitted
   2512                  if ( zclAnalogDataType( dataType ) )
   2513                  {
   2514                    reportChangeLen = zclGetDataTypeLength( dataType );
   2515                    pBuf += reportChangeLen;
   2516                    
   2517                    // add padding if needed
   2518                    if ( PADDING_NEEDED( reportChangeLen ) )
   2519                      reportChangeLen++;
   2520                    dataLen += reportChangeLen;
   2521                  }
   2522                }
   2523                else
   2524                {
   2525                  pBuf += 2; // move pass the Timeout field
   2526                }
   2527              }
   2528            } // while loop
   2529            
   2530            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   2531            
   2532            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2533            if ( readReportCfgRspCmd != NULL )
   2534            {
   2535              pBuf = pCmd->pData;
   2536              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   2537              
   2538              readReportCfgRspCmd->numAttr = numAttr;
   2539              for ( i = 0; i < numAttr; i++ )
   2540              {
   2541                reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   2542                
   2543                reportRspRec->status = *pBuf++;
   2544                reportRspRec->direction = *pBuf++;
   2545                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2546                pBuf += 2;
   2547           
   2548                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   2549                {
   2550                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   2551                  {
   2552                    reportRspRec->dataType = *pBuf++;
   2553                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2554                    pBuf += 2;
   2555                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2556                    pBuf += 2;
   2557          
   2558                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   2559                    {
   2560                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   2561                      reportRspRec->reportableChange = dataPtr;
   2562                      
   2563                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType ); 
   2564                      pBuf += reportChangeLen;
   2565                      
   2566                      // advance attribute data pointer
   2567                      if ( PADDING_NEEDED( reportChangeLen ) )
   2568                        reportChangeLen++;
   2569                      dataPtr += reportChangeLen;
   2570                    }
   2571                  }
   2572                  else
   2573                  {
   2574                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   2575                    pBuf += 2;
   2576                  }
   2577                }
   2578              } 
   2579            }
   2580            
   2581            return ( (void *)readReportCfgRspCmd );
   2582          }
   2583          
   2584          /*********************************************************************
   2585           * @fn      zclParseInReportCmd
   2586           * @brief   Parse the "Profile" Report Command
   2587           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2588           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2589           * @param   pCmd - pointer to incoming data to parse
   2590           * @return  pointer to the parsed command structure
   2591           */
   2592          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   2593          {
   2594            zclReportCmd_t *reportCmd;
   2595            zclReport_t *reportRec;
   2596            uint8 *pBuf = pCmd->pData;
   2597            uint8 attrDataLen;
   2598            uint8 *dataPtr;
   2599            uint8 numAttr = 0;
   2600            uint8 hdrLen;
   2601            uint8 dataLen = 0;
   2602            uint8 dataType;
   2603            uint8 i;
   2604          
   2605            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) ) // find out the number of attributes and the length of attribute data
   2606            {
   2607              numAttr++;
   2608          
   2609              pBuf += 2; // move pass attribute id
   2610              dataType = *pBuf++;
   2611              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2612              pBuf += attrDataLen; // move pass attribute data
   2613                
   2614              if ( PADDING_NEEDED( attrDataLen ) ) // add padding if needed
   2615                attrDataLen++;
   2616              dataLen += attrDataLen;
   2617            }
   2618            
   2619            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   2620            
   2621            reportCmd = (zclReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2622            if (reportCmd != NULL )
   2623            {
   2624              pBuf = pCmd->pData;
   2625              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   2626              
   2627              reportCmd->numAttr = numAttr;
   2628              for ( i = 0; i < numAttr; i++ )
   2629              {
   2630                reportRec = &(reportCmd->attrList[i]);
   2631                
   2632                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2633                pBuf += 2;
   2634                reportRec->dataType = *pBuf++;
   2635          
   2636                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );  
   2637                osal_memcpy( dataPtr, pBuf, attrDataLen );
   2638                reportRec->attrData = dataPtr;
   2639                
   2640                pBuf += attrDataLen; // move pass attribute data
   2641                
   2642                if ( PADDING_NEEDED( attrDataLen ) ) // advance attribute data pointer
   2643                  attrDataLen++;
   2644                dataPtr += attrDataLen;
   2645              }
   2646            }
   2647            return ( (void *)reportCmd );
   2648          }
   2649          #endif // ZCL_REPORT
   2650          
   2651          /*********************************************************************
   2652           * @fn      zclParseInDefaultRspCmd
   2653           * @brief   Parse the "Profile" Default Response Command
   2654           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2655           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2656           * @param   pCmd - pointer to incoming data to parse
   2657           * @return  pointer to the parsed command structure
   2658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2659          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   2660          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2661            zclDefaultRspCmd_t *defaultRspCmd;
   2662            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine35 & 0xFFFF
   2663          
   2664            defaultRspCmd = (zclDefaultRspCmd_t *)osal_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_48:
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A02         MOV     R2,#0x2
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_mem_alloc?relay
   2665            if ( defaultRspCmd != NULL )
   \   000016   EA           MOV     A,R2
   \   000017   7001         JNZ     ??zclParseInDefaultRspCmd_0
   \   000019   EB           MOV     A,R3
   \                     ??zclParseInDefaultRspCmd_0:
   \   00001A   600D         JZ      ??zclParseInDefaultRspCmd_1
   2666            {
   2667              defaultRspCmd->commandID = *pBuf++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   12....       LCALL   ?Subroutine7 & 0xFFFF
   2668              defaultRspCmd->statusCode = *pBuf;
   \                     ??CrossCallReturnLabel_170:
   \   000024   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   2669            }
   \                     ??CrossCallReturnLabel_183:
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   2670            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_1:
   \   000029   02....       LJMP    ?Subroutine93 & 0xFFFF
   2671          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine111_0
   \   000004                ; // Fall through to label ??Subroutine111_0
   2672          
   2673          #ifdef ZCL_DISCOVER
   2674          /*********************************************************************
   2675           * @fn      zclParseInDiscCmd
   2676           * @brief   Parse the "Profile" Discovery Commands
   2677           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2678           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2679           * @param   pCmd - pointer to incoming data to parse
   2680           * @return  pointer to the parsed command structure
   2681           */
   2682          void *zclParseInDiscCmd( zclParseCmd_t *pCmd )
   2683          {
   2684            zclDiscoverCmd_t *discoverCmd;
   2685            uint8 *pBuf = pCmd->pData;
   2686          
   2687            discoverCmd = (zclDiscoverCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverCmd_t ) );
   2688            if ( discoverCmd != NULL )
   2689            {
   2690              discoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2691              pBuf += 2;
   2692              discoverCmd->maxAttrIDs = *pBuf;
   2693            }
   2694            return ( (void *)discoverCmd );
   2695          }
   2696          
   2697          /*********************************************************************
   2698           * @fn      zclParseInDiscRspCmd
   2699           * @brief   Parse the "Profile" Discovery Response Commands
   2700           *          NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2701           *                FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2702           * @param   pCmd - pointer to incoming data to parse
   2703           * @return  pointer to the parsed command structure
   2704           */
   2705          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   2706          static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd )
   2707          {
   2708            zclDiscoverRspCmd_t *discoverRspCmd;
   2709            uint8 *pBuf = pCmd->pData;
   2710            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   2711            uint8 i;
   2712          
   2713            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverRspCmd_t ) 
   2714                                                           + ( numAttr * sizeof(zclDiscoverInfo_t) ) );
   2715            if ( discoverRspCmd != NULL )
   2716            {
   2717              discoverRspCmd->discComplete = *pBuf++;
   2718              discoverRspCmd->numAttr = numAttr;
   2719              
   2720              for ( i = 0; i < numAttr; i++ )
   2721              {
   2722                discoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2723                pBuf += 2;
   2724                discoverRspCmd->attrList[i].dataType = *pBuf++;;
   2725              }
   2726            }
   2727            return ( (void *)discoverRspCmd );
   2728          }
   2729          #endif // ZCL_DISCOVER
   2730          
   2731          #ifdef ZCL_READ
   2732          /*********************************************************************
   2733           * @fn      zclProcessInReadCmd
   2734           * @brief   Process the "Profile" Read Command
   2735           * @param   pInMsg - incoming message to process
   2736           * @return  TRUE if command processed. FALSE, otherwise.
   2737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2738          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   2739          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   2740            zclReadCmd_t *readCmd;
   2741            zclReadRspCmd_t *readRspCmd;
   2742            zclReadRspStatus_t *statusRec;
   2743            zclAttrRec_t attrRec;
   2744            uint8 len;
   2745            uint8 i;
   2746            
   2747            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
   2748            
   2749            // calculate the length of the response status record
   2750            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   2751            
   2752            readRspCmd = osal_mem_alloc( len );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   75F006       MOV     B,#0x6
   \   00001A   85..82       MOV     DPL,?V0 + 2
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   A4           MUL     AB
   \   000021   04           INC     A
   \   000022   FA           MOV     R2,A
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   2753            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_237:
   \   000028   7001         JNZ     ??zclProcessInReadCmd_0
   \   00002A   EB           MOV     A,R3
   \                     ??zclProcessInReadCmd_0:
   \   00002B   7005         JNZ     ??zclProcessInReadCmd_1
   2754              return FALSE; // EMBEDDED RETURN
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   02....       LJMP    ??zclProcessInReadCmd_2 & 0xFFFF
   2755          
   2756            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_1:
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00003B   F0           MOVX    @DPTR,A
   2757            for (i = 0; i < readCmd->numAttr; i++)
   \   00003C   75..00       MOV     ?V0 + 6,#0x0
   \   00003F   800B         SJMP    ??zclProcessInReadCmd_3
   2758            {
   2759              statusRec = &(readRspCmd->attrList[i]);
   2760              statusRec->attrID = readCmd->attrID[i];
   2761              
   2762              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec ) )
   2763              {
   2764                statusRec->data = attrRec.attr.dataPtr;
   2765                statusRec->status = ZCL_STATUS_SUCCESS;
   2766                statusRec->dataType = attrRec.attr.dataType;
   2767              }
   2768              else
   2769              {
   2770                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_4:
   \   000041   7486         MOV     A,#-0x7a
   \   000043   85..82       MOV     DPL,?V0 + 10
   \   000046   85..83       MOV     DPH,?V0 + 11
   \                     ??zclProcessInReadCmd_5:
   \   000049   F0           MOVX    @DPTR,A
   2771              }
   \   00004A   05..         INC     ?V0 + 6
   \                     ??zclProcessInReadCmd_3:
   \   00004C   85..82       MOV     DPL,?V0 + 2
   \   00004F   85..83       MOV     DPH,?V0 + 3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   E5..         MOV     A,?V0 + 6
   \   000056   C3           CLR     C
   \   000057   9A           SUBB    A,R2
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??zclProcessInReadCmd_6 & 0xFFFF
   \   00005D   85..82       MOV     DPL,?V0 + 6
   \   000060   A882         MOV     R0,DPL
   \   000062   E8           MOV     A,R0
   \   000063   75F006       MOV     B,#0x6
   \   000066   A4           MUL     AB
   \   000067   FA           MOV     R2,A
   \   000068   ABF0         MOV     R3,B
   \   00006A   E5..         MOV     A,?V0 + 0
   \   00006C   2A           ADD     A,R2
   \   00006D   F582         MOV     DPL,A
   \   00006F   E5..         MOV     A,?V0 + 1
   \   000071   3B           ADDC    A,R3
   \   000072   F583         MOV     DPH,A
   \   000074   A3           INC     DPTR
   \   000075   AE82         MOV     R6,DPL
   \   000077   AF83         MOV     R7,DPH
   \   000079   E8           MOV     A,R0
   \   00007A   C3           CLR     C
   \   00007B   33           RLC     A
   \   00007C   F8           MOV     R0,A
   \   00007D   E4           CLR     A
   \   00007E   33           RLC     A
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00008A   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00008D   EE           MOV     A,R6
   \   00008E   2402         ADD     A,#0x2
   \   000090   F5..         MOV     ?V0 + 10,A
   \   000092   EF           MOV     A,R7
   \   000093   3400         ADDC    A,#0x0
   \   000095   F5..         MOV     ?V0 + 11,A
   \   000097   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00009A                ; Setup parameters for call to function zclFindAttrRec
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   8582..       MOV     ?V0 + 12,DPL
   \   0000A3   8583..       MOV     ?V0 + 13,DPH
   \   0000A6   78..         MOV     R0,#?V0 + 12
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV     A,R1
   \   0000B6   6089         JZ      ??zclProcessInReadCmd_4
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000C7   E4           CLR     A
   \   0000C8   85..82       MOV     DPL,?V0 + 10
   \   0000CB   85..83       MOV     DPH,?V0 + 11
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   02....       LJMP    ??zclProcessInReadCmd_5 & 0xFFFF
   2772            }
   2773            
   2774            // Build and send Read Response command
   2775            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   2776                             readRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   2777                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   0000DF   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   0000E2                ; Setup parameters for call to function zcl_SendReadRsp
   \   0000E2   85..82       MOV     DPL,?V0 + 4
   \   0000E5   85..83       MOV     DPH,?V0 + 5
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V0 + 2,A
   \   0000F1   78..         MOV     R0,#?V0 + 2
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   75..01       MOV     ?V0 + 2,#0x1
   \   0000F9   78..         MOV     R0,#?V0 + 2
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   85..82       MOV     DPL,?V0 + 8
   \   00010B   85..83       MOV     DPH,?V0 + 9
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000115   E5..         MOV     A,?V0 + 8
   \   000117   2406         ADD     A,#0x6
   \   000119   FA           MOV     R2,A
   \   00011A   E5..         MOV     A,?V0 + 9
   \   00011C   3400         ADDC    A,#0x0
   \   00011E   FB           MOV     R3,A
   \   00011F   E5..         MOV     A,?V0 + 8
   \   000121   2414         ADD     A,#0x14
   \   000123   F582         MOV     DPL,A
   \   000125   E5..         MOV     A,?V0 + 9
   \   000127   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00012A   F9           MOV     R1,A
   \   00012B   12....       LCALL   ??zcl_SendReadRsp?relay
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   2778            osal_mem_free( readRspCmd );
   \   000133                ; Setup parameters for call to function osal_mem_free
   \   000133   AA..         MOV     R2,?V0 + 0
   \   000135   AB..         MOV     R3,?V0 + 1
   \   000137   12....       LCALL   ??osal_mem_free?relay
   2779              
   2780            return TRUE;
   \   00013A   7901         MOV     R1,#0x1
   \                     ??zclProcessInReadCmd_2:
   \   00013C   7408         MOV     A,#0x8
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000141   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   2781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine112_0
   \   000006                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine113_0
   \   000001                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 8
   \   000007   85..83       MOV     DPH,?V0 + 9
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000011   E5..         MOV     A,?V0 + 8
   \   000013   2414         ADD     A,#0x14
   \   000015   F582         MOV     DPL,A
   \   000017   E5..         MOV     A,?V0 + 9
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??zclFindAttrRec?relay
   \   000022   7402         MOV     A,#0x2
   \   000024   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine120_0
   \   000001                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006                REQUIRE ??Subroutine121_0
   \   000006                ; // Fall through to label ??Subroutine121_0
   2782          #endif // ZCL_READ
   2783          
   2784          #ifdef ZCL_WRITE
   2785          /*********************************************************************
   2786           * @fn      processInWriteCmd
   2787           * @brief   Process the "Profile" Write and Write No Response Commands
   2788           * @param   pInMsg - incoming message to process
   2789           * @return  TRUE if command processed. FALSE, otherwise.
   2790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2791          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   2792          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   2793            zclWriteCmd_t *writeCmd;
   2794            zclWriteRec_t *statusRec;
   2795            zclWriteRspCmd_t *writeRspCmd;
   2796            zclAttrRec_t attrRec;
   2797            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2798            uint8 status;
   2799            uint8 i, j = 0;
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   2800          
   2801            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000014   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2802            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_221:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6402         XRL     A,#0x2
   \   00002B   7013         JNZ     ??zclProcessInWriteCmd_0
   2803            {
   2804              // We need to send a response back - allocate space for it
   2805              writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) 
   2806                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000030   12....       LCALL   ?Subroutine23 & 0xFFFF
   2807              if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_28:
   \   000033   7001         JNZ     ??zclProcessInWriteCmd_1
   \   000035   EB           MOV     A,R3
   \                     ??zclProcessInWriteCmd_1:
   \   000036   7005         JNZ     ??zclProcessInWriteCmd_2
   2808                return FALSE; // EMBEDDED RETURN
   \   000038   7900         MOV     R1,#0x0
   \   00003A   02....       LJMP    ??zclProcessInWriteCmd_3 & 0xFFFF
   2809              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_2:
   \   00003D   75..01       MOV     ?V0 + 4,#0x1
   2810            }
   2811            
   2812            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteCmd_0:
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   801F         SJMP    ??zclProcessInWriteCmd_4
   2813            {
   2814              statusRec = &(writeCmd->attrList[i]);
   2815              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2816              {
   2817                if ( statusRec->dataType == attrRec.attr.dataType )
   2818                {
   2819                  status = zclWriteAttrData( &attrRec, statusRec );
   2820          
   2821                  if ( sendRsp && status != ZCL_STATUS_SUCCESS ) // If successful, a write attribute status record shall NOT be generated
   2822                  {
   2823                    writeRspCmd->attrList[j].status = status; // Attribute is read only - move on to the next write attribute record
   2824                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2825                  }
   2826                }
   2827                else
   2828                {
   2829                  if ( sendRsp ) // Attribute data type is incorrect - move on to the next write attribute record
   2830                  {
   2831                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2832                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2833                  }
   2834                }
   2835              }
   2836              else
   2837              {
   2838                if ( sendRsp ) // Attribute is not supported - move on to the next write attribute record
   \                     ??zclProcessInWriteCmd_5:
   \   000045   E5..         MOV     A,?V0 + 4
   \   000047   6019         JZ      ??zclProcessInWriteCmd_6
   2839                {
   2840                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000049   7486         MOV     A,#-0x7a
   \                     ??zclProcessInWriteCmd_7:
   \   00004B   85..82       MOV     DPL,?V0 + 14
   \   00004E   85..83       MOV     DPH,?V0 + 15
   2841                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2842                }
   2843              }
   \   000051   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000054   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000057   85..82       MOV     DPL,?V0 + 12
   \   00005A   85..83       MOV     DPH,?V0 + 13
   \   00005D   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000060   05..         INC     ?V0 + 2
   \                     ??zclProcessInWriteCmd_6:
   \   000062   05..         INC     ?V0 + 3
   \                     ??zclProcessInWriteCmd_4:
   \   000064   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   C3           CLR     C
   \   00006C   9A           SUBB    A,R2
   \   00006D   4003         JC      $+5
   \   00006F   02....       LJMP    ??zclProcessInWriteCmd_8 & 0xFFFF
   \   000072   E5..         MOV     A,?V0 + 3
   \   000074   75F005       MOV     B,#0x5
   \   000077   A4           MUL     AB
   \   000078   F8           MOV     R0,A
   \   000079   A9F0         MOV     R1,B
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   E0           MOVX    A,@DPTR
   \   000082   28           ADD     A,R0
   \   000083   FA           MOV     R2,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   39           ADDC    A,R1
   \   000087   8A82         MOV     DPL,R2
   \   000089   F583         MOV     DPH,A
   \   00008B   A3           INC     DPTR
   \   00008C   AE82         MOV     R6,DPL
   \   00008E   AF83         MOV     R7,DPH
   \   000090   E5..         MOV     A,?V0 + 2
   \   000092   75F003       MOV     B,#0x3
   \   000095   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000098   E582         MOV     A,DPL
   \   00009A   2402         ADD     A,#0x2
   \   00009C   F5..         MOV     ?V0 + 12,A
   \   00009E   E583         MOV     A,DPH
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F5..         MOV     ?V0 + 13,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   8582..       MOV     ?V0 + 14,DPL
   \   0000A8   8583..       MOV     ?V0 + 15,DPH
   \   0000AB   85..82       MOV     DPL,?V0 + 6
   \   0000AE   85..83       MOV     DPH,?V0 + 7
   \   0000B1   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   8582..       MOV     ?V0 + 10,DPL
   \   0000BA   8583..       MOV     ?V0 + 11,DPH
   \   0000BD   78..         MOV     R0,#?V0 + 10
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV     A,R1
   \   0000CD   7003         JNZ     $+5
   \   0000CF   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FA           MOV     R2,A
   \   0000DA   7406         MOV     A,#0x6
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6A           XRL     A,R2
   \   0000E1   7022         JNZ     ??zclProcessInWriteCmd_9
   \   0000E3                ; Setup parameters for call to function zclWriteAttrData
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FC           MOV     R4,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   FD           MOV     R5,A
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   AA82         MOV     R2,DPL
   \   0000EE   AB83         MOV     R3,DPH
   \   0000F0   12....       LCALL   ??zclWriteAttrData?relay
   \   0000F3   E9           MOV     A,R1
   \   0000F4   FA           MOV     R2,A
   \   0000F5   E5..         MOV     A,?V0 + 4
   \   0000F7   7003         JNZ     $+5
   \   0000F9   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   0000FC   EA           MOV     A,R2
   \   0000FD   7003         JNZ     $+5
   \   0000FF   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   000102   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   \                     ??zclProcessInWriteCmd_9:
   \   000105   E5..         MOV     A,?V0 + 4
   \   000107   7003         JNZ     $+5
   \   000109   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \   00010C   748D         MOV     A,#-0x73
   \   00010E   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   2844            } // for loop
   2845          
   2846            if ( sendRsp )
   \                     ??zclProcessInWriteCmd_8:
   \   000111   E5..         MOV     A,?V0 + 4
   \   000113   604A         JZ      ??zclProcessInWriteCmd_10
   2847            {
   2848              writeRspCmd->numAttr = j;
   \   000115   85..82       MOV     DPL,?V0 + 0
   \   000118   85..83       MOV     DPH,?V0 + 1
   \   00011B   E5..         MOV     A,?V0 + 2
   \   00011D   F0           MOVX    @DPTR,A
   2849              if ( writeRspCmd->numAttr == 0 )
   \   00011E   7003         JNZ     ??CrossCallReturnLabel_12
   2850              {
   2851                // Since all records were written successful, include a single status record in the resonse command 
   2852                // with the status field set to SUCCESS and the attribute ID field omitted.
   2853                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000120   12....       LCALL   ?Subroutine10 & 0xFFFF
   2854                writeRspCmd->numAttr = 1;
   2855              }
   2856              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2857                                pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   2858                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_12:
   \   000123   85..82       MOV     DPL,?V0 + 6
   \   000126   85..83       MOV     DPH,?V0 + 7
   \   000129   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00012C                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00012C   85..82       MOV     DPL,?V0 + 6
   \   00012F   85..83       MOV     DPH,?V0 + 7
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   F5..         MOV     ?V0 + 2,A
   \   00013B   78..         MOV     R0,#?V0 + 2
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   75..01       MOV     ?V0 + 2,#0x1
   \   000143   78..         MOV     R0,#?V0 + 2
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   78..         MOV     R0,#?V0 + 2
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014D   78..         MOV     R0,#?V0 + 0
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000155   12....       LCALL   ?DEALLOC_XSTACK8
   2859              osal_mem_free( writeRspCmd );
   \   000158                ; Setup parameters for call to function osal_mem_free
   \   000158   AA..         MOV     R2,?V0 + 0
   \   00015A   AB..         MOV     R3,?V0 + 1
   \   00015C   12....       LCALL   ??osal_mem_free?relay
   2860            }
   2861            return TRUE; 
   \                     ??zclProcessInWriteCmd_10:
   \   00015F   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteCmd_3:
   \   000161   740A         MOV     A,#0xa
   \   000163   02....       LJMP    ??Subroutine100_0 & 0xFFFF
   2862          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine117_0
   \   000006                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F9           MOV     R1,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine119_0
   \   000007                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   7401         MOV     A,#0x1
   \   00000A   28           ADD     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00000B   FD           MOV     R5,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2406         ADD     A,#0x6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   EE           MOV     A,R6
   \   000015   2414         ADD     A,#0x14
   \   000017   F582         MOV     DPL,A
   \   000019   EF           MOV     A,R7
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??zcl_SendWriteRsp?relay
   \   000023   7405         MOV     A,#0x5
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR     A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7401         MOV     A,#0x1
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
   2863          
   2864          /*********************************************************************
   2865           * @fn      zclRevertWriteUndividedCmd
   2866           * @brief   Revert the "Profile" Write Undevided Command
   2867           * @param   pInMsg - incoming message to process
   2868           *          curWriteRec - old data
   2869           *          numAttr - number of attributes to be reverted
   2870           */
   2871          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg, zclWriteRec_t *curWriteRec, uint16 numAttr )
   2872          {
   2873            zclWriteRec_t *statusRec;
   2874            zclAttrRec_t attrRec;
   2875            uint8 dataLen;
   2876            uint8 i;
   2877          
   2878            statusRec = curWriteRec;
   2879            for (i = 0; i < numAttr; i++)
   2880            {
   2881              statusRec = &(curWriteRec[i]);
   2882              
   2883              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2884                break; // should never happen
   2885           
   2886              // Just copy the old data back - no need to validate the data
   2887              dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   2888              osal_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   2889            } // for loop
   2890          }
   2891          
   2892          /*********************************************************************
   2893           * @fn      zclProcessInWriteUndividedCmd
   2894           * @brief   Process the "Profile" Write Undivided Command
   2895           * @param   pInMsg - incoming message to process
   2896           * @return  TRUE if command processed. FALSE, otherwise.
   2897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine107_0
   \   000006                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine118_0
   \   000006                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2898          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   2899          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   2900            zclWriteCmd_t *writeCmd;
   2901            zclWriteRec_t *statusRec;
   2902            zclWriteRec_t *curWriteRec;
   2903            zclWriteRec_t *curStatusRec;
   2904            zclWriteRspCmd_t *writeRspCmd;
   2905            zclAttrRec_t attrRec;
   2906            uint8 *curDataPtr;
   2907            uint8 hdrLen;
   2908            uint8 dataLen;
   2909            uint8 curLen = 0;
   \   00000E   75..00       MOV     ?V0 + 4,#0x0
   2910            uint8 status;
   2911            uint8 i, j = 0;
   \   000011   7F00         MOV     R7,#0x0
   2912          
   2913            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000013   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000016   F5..         MOV     ?V0 + 6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 7,A
   2914            
   2915            // Allocate space for Write Response Command
   2916            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t ) + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   85..82       MOV     DPL,?V0 + 6
   \   00001F   F583         MOV     DPH,A
   \   000021   12....       LCALL   ?Subroutine23 & 0xFFFF
   2917            
   2918            if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_29:
   \   000024   7001         JNZ     ??zclProcessInWriteUndividedCmd_0
   \   000026   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000027   7005         JNZ     ??zclProcessInWriteUndividedCmd_1
   2919              return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000029   7900         MOV     R1,#0x0
   \   00002B   02....       LJMP    ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   2920            
   2921            // If any attribute cannot be written, no attribute values are changed. Hence,
   2922            // make sure all the attributes are supported and writable
   2923            for (i = 0; i < writeCmd->numAttr; i++)
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00002E   7E00         MOV     R6,#0x0
   \   000030   8013         SJMP    ??zclProcessInWriteUndividedCmd_4
   2924            {
   2925              statusRec = &(writeCmd->attrList[i]);
   2926              
   2927              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2928              {
   2929                // Attribute is not supported - stop here
   2930                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   2931                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2932                break;
   2933              }
   2934              
   2935              if ( statusRec->dataType != attrRec.attr.dataType )
   2936              {
   2937                // Attribute data type is incorrect - stope here
   2938                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   2939                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2940                break;
   2941              }
   2942              
   2943              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   2944              {
   2945                // Attribute is not writable - stop here
   2946                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   2947                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2948                break;
   2949              }  
   2950              dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000032                ; Setup parameters for call to function zclGetAttrDataLength
   \   000032   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000035   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000038   E9           MOV     A,R1
   \   000039   FA           MOV     R2,A
   2951              
   2952              // add padding if needed
   2953              if ( PADDING_NEEDED( dataLen ) )
   \   00003A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003C   5001         JNC     ??zclProcessInWriteUndividedCmd_6
   2954                dataLen++;
   \   00003E   0A           INC     R2
   2955              curLen += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   00003F   EA           MOV     A,R2
   \   000040   25..         ADD     A,?V0 + 4
   \   000042   F5..         MOV     ?V0 + 4,A
   \   000044   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   000045   85..82       MOV     DPL,?V0 + 6
   \   000048   85..83       MOV     DPH,?V0 + 7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   EE           MOV     A,R6
   \   00004E   C3           CLR     C
   \   00004F   9A           SUBB    A,R2
   \   000050   505D         JNC     ??zclProcessInWriteUndividedCmd_7
   \   000052   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000055   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   8582..       MOV     ?V0 + 10,DPL
   \   00005E   8583..       MOV     ?V0 + 11,DPH
   \   000061   78..         MOV     R0,#?V0 + 10
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
   \   00006D   7004         JNZ     ??zclProcessInWriteUndividedCmd_8
   \   00006F   7486         MOV     A,#-0x7a
   \   000071   8023         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000073   85..82       MOV     DPL,?V0 + 2
   \   000076   85..83       MOV     DPH,?V0 + 3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   7406         MOV     A,#0x6
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   69           XRL     A,R1
   \   000084   6004         JZ      ??zclProcessInWriteUndividedCmd_10
   \   000086   748D         MOV     A,#-0x73
   \   000088   800C         SJMP    ??zclProcessInWriteUndividedCmd_9
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   00008A   7407         MOV     A,#0x7
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   A2E1         MOV     C,0xE0 /* A   */.1
   \   000092   409E         JC      ??zclProcessInWriteUndividedCmd_5
   \   000094   7488         MOV     A,#-0x78
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   000096   85..82       MOV     DPL,?V0 + 0
   \   000099   85..83       MOV     DPH,?V0 + 1
   \   00009C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   85..82       MOV     DPL,?V0 + 0
   \   0000A6   85..83       MOV     DPH,?V0 + 1
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000AE   0F           INC     R7
   2956            } // for loop
   2957            
   2958            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0000AF   EF           MOV     A,R7
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   F0           MOVX    @DPTR,A
   2959            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000B7   6003         JZ      $+5
   \   0000B9   02....       LJMP    ??zclProcessInWriteUndividedCmd_11 & 0xFFFF
   2960            {
   2961              // calculate the length of the current data header
   2962              hdrLen = j * sizeof( zclWriteRec_t );
   \   0000BC   75F005       MOV     B,#0x5
   \   0000BF   A4           MUL     AB
   \   0000C0   FA           MOV     R2,A
   2963            
   2964              // Allocate space to keep a copy of the current data
   2965              curWriteRec = (zclWriteRec_t *) osal_mem_alloc( hdrLen + curLen ); 
   \   0000C1   8A82         MOV     DPL,R2
   \   0000C3   8582..       MOV     ?V0 + 2,DPL
   \   0000C6                ; Setup parameters for call to function osal_mem_alloc
   \   0000C6   E5..         MOV     A,?V0 + 4
   \   0000C8   25..         ADD     A,?V0 + 2
   \   0000CA   FA           MOV     R2,A
   \   0000CB   E4           CLR     A
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   ??osal_mem_alloc?relay
   \   0000D2   8A..         MOV     ?V0 + 12,R2
   \   0000D4   8B..         MOV     ?V0 + 13,R3
   2966              if ( curWriteRec == NULL )
   \   0000D6   EA           MOV     A,R2
   \   0000D7   7001         JNZ     ??zclProcessInWriteUndividedCmd_12
   \   0000D9   EB           MOV     A,R3
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   0000DA   700A         JNZ     ??zclProcessInWriteUndividedCmd_13
   2967              {
   2968                osal_mem_free(writeRspCmd );
   \   0000DC                ; Setup parameters for call to function osal_mem_free
   \   0000DC   AA..         MOV     R2,?V0 + 0
   \   0000DE   AB..         MOV     R3,?V0 + 1
   \   0000E0   12....       LCALL   ??osal_mem_free?relay
   2969                return FALSE; // EMBEDDED RETURN
   \   0000E3   02....       LJMP    ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   2970              }
   2971          
   2972              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0000E6   EA           MOV     A,R2
   \   0000E7   25..         ADD     A,?V0 + 2
   \   0000E9   F5..         MOV     ?V0 + 4,A
   \   0000EB   EB           MOV     A,R3
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F5..         MOV     ?V0 + 5,A
   2973              
   2974              // Write the new data over
   2975              for (i = 0; i < writeCmd->numAttr; i++)
   \   0000F0   7E00         MOV     R6,#0x0
   \   0000F2   8020         SJMP    ??zclProcessInWriteUndividedCmd_14
   2976              {
   2977                statusRec = &(writeCmd->attrList[i]);
   2978                curStatusRec = &(curWriteRec[i]);
   2979              
   2980                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, statusRec->attrID, &attrRec ) )
   2981                  break; // should never happen
   2982          
   2983                // Keep a copy of the current data before before writing the new data over
   2984                curStatusRec->attrID = statusRec->attrID;
   2985                zclReadAttrData( curDataPtr, &attrRec );
   2986                curStatusRec->attrData = curDataPtr;
   2987                
   2988                status = zclWriteAttrData( &attrRec, statusRec );
   2989                   
   2990                // If successful, a write attribute status record shall NOT be generated
   2991                if ( status != ZCL_STATUS_SUCCESS )
   2992                {
   2993                  writeRspCmd->attrList[j].status = status;
   2994                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   2995                    
   2996                  // Since this write failed, we need to revert all the pervious writes
   2997                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   2998                  break;
   2999                }
   3000                
   3001                dataLen = zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0000F4                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000F4   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000F7   85..82       MOV     DPL,?V0 + 2
   \   0000FA   85..83       MOV     DPH,?V0 + 3
   \   0000FD   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   3002                
   3003                // add padding if needed
   3004                if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_147:
   \   000100   A2E0         MOV     C,0xE0 /* A   */.0
   \   000102   5001         JNC     ??zclProcessInWriteUndividedCmd_16
   3005                  dataLen++;
   \   000104   0A           INC     R2
   3006                curDataPtr += dataLen;
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000105   8A..         MOV     ?V0 + 2,R2
   \   000107   E5..         MOV     A,?V0 + 4
   \   000109   25..         ADD     A,?V0 + 2
   \   00010B   F5..         MOV     ?V0 + 4,A
   \   00010D   E5..         MOV     A,?V0 + 5
   \   00010F   3400         ADDC    A,#0x0
   \   000111   F5..         MOV     ?V0 + 5,A
   \   000113   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000114   85..82       MOV     DPL,?V0 + 6
   \   000117   85..83       MOV     DPH,?V0 + 7
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   EE           MOV     A,R6
   \   00011D   C3           CLR     C
   \   00011E   9A           SUBB    A,R2
   \   00011F   4003         JC      $+5
   \   000121   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   000124   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000127   E5..         MOV     A,?V0 + 12
   \   000129   28           ADD     A,R0
   \   00012A   F8           MOV     R0,A
   \   00012B   E5..         MOV     A,?V0 + 13
   \   00012D   39           ADDC    A,R1
   \   00012E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000131   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   8582..       MOV     ?V0 + 10,DPL
   \   00013A   8583..       MOV     ?V0 + 11,DPH
   \   00013D   78..         MOV     R0,#?V0 + 10
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   \   000148   E9           MOV     A,R1
   \   000149   7003         JNZ     $+5
   \   00014B   02....       LJMP    ??zclProcessInWriteUndividedCmd_17 & 0xFFFF
   \   00014E   85..82       MOV     DPL,?V0 + 2
   \   000151   85..83       MOV     DPH,?V0 + 3
   \   000154   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000157   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00015A   EA           MOV     A,R2
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   A3           INC     DPTR
   \   00015D   EB           MOV     A,R3
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F                ; Setup parameters for call to function zclReadAttrData
   \   00015F   7402         MOV     A,#0x2
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   AC82         MOV     R4,DPL
   \   000166   AD83         MOV     R5,DPH
   \   000168   AA..         MOV     R2,?V0 + 4
   \   00016A   AB..         MOV     R3,?V0 + 5
   \   00016C   12....       LCALL   ??zclReadAttrData?relay
   \   00016F   85..82       MOV     DPL,?XSP + 0
   \   000172   85..83       MOV     DPH,?XSP + 1
   \   000175   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000178   E5..         MOV     A,?V0 + 4
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   A3           INC     DPTR
   \   00017C   E5..         MOV     A,?V0 + 5
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F                ; Setup parameters for call to function zclWriteAttrData
   \   00017F   AC..         MOV     R4,?V0 + 2
   \   000181   AD..         MOV     R5,?V0 + 3
   \   000183   7402         MOV     A,#0x2
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   AA82         MOV     R2,DPL
   \   00018A   AB83         MOV     R3,DPH
   \   00018C   12....       LCALL   ??zclWriteAttrData?relay
   \   00018F   E9           MOV     A,R1
   \   000190   FB           MOV     R3,A
   \   000191   7003         JNZ     $+5
   \   000193   02....       LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   000196   EF           MOV     A,R7
   \   000197   75F003       MOV     B,#0x3
   \   00019A   A4           MUL     AB
   \   00019B   F8           MOV     R0,A
   \   00019C   A9F0         MOV     R1,B
   \   00019E   E5..         MOV     A,?V0 + 0
   \   0001A0   28           ADD     A,R0
   \   0001A1   F8           MOV     R0,A
   \   0001A2   E5..         MOV     A,?V0 + 1
   \   0001A4   39           ADDC    A,R1
   \   0001A5   F9           MOV     R1,A
   \   0001A6   EB           MOV     A,R3
   \   0001A7   8882         MOV     DPL,R0
   \   0001A9   8983         MOV     DPH,R1
   \   0001AB   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001AE   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0001B1   EA           MOV     A,R2
   \   0001B2   F0           MOVX    @DPTR,A
   \   0001B3   A3           INC     DPTR
   \   0001B4   EB           MOV     A,R3
   \   0001B5   F0           MOVX    @DPTR,A
   \   0001B6   0F           INC     R7
   \   0001B7   8E82         MOV     DPL,R6
   \   0001B9   8582..       MOV     ?V0 + 8,DPL
   \   0001BC   7E00         MOV     R6,#0x0
   \   0001BE   8032         SJMP    ??zclProcessInWriteUndividedCmd_18
   3007              } // for loop
   \                     ??zclProcessInWriteUndividedCmd_19:
   \   0001C0   E5..         MOV     A,?V0 + 2
   \   0001C2   2403         ADD     A,#0x3
   \   0001C4   F5..         MOV     ?V0 + 2,A
   \   0001C6   E5..         MOV     A,?V0 + 3
   \   0001C8   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001CB   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0001CE   740E         MOV     A,#0xe
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0001D6                ; Setup parameters for call to function osal_memcpy
   \   0001D6   85..82       MOV     DPL,?V0 + 2
   \   0001D9   85..83       MOV     DPH,?V0 + 3
   \   0001DC   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E2   EA           MOV     A,R2
   \   0001E3   FC           MOV     R4,A
   \   0001E4   7D00         MOV     R5,#0x0
   \   0001E6   7413         MOV     A,#0x13
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0001EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F1   0E           INC     R6
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   0001F2   8E..         MOV     ?V0 + 2,R6
   \   0001F4   C3           CLR     C
   \   0001F5   E5..         MOV     A,?V0 + 2
   \   0001F7   95..         SUBB    A,?V0 + 8
   \   0001F9   E4           CLR     A
   \   0001FA   9400         SUBB    A,#0x0
   \   0001FC   5058         JNC     ??zclProcessInWriteUndividedCmd_17
   \   0001FE   EE           MOV     A,R6
   \   0001FF   75F005       MOV     B,#0x5
   \   000202   A4           MUL     AB
   \   000203   F8           MOV     R0,A
   \   000204   A9F0         MOV     R1,B
   \   000206   E5..         MOV     A,?V0 + 12
   \   000208   28           ADD     A,R0
   \   000209   F5..         MOV     ?V0 + 2,A
   \   00020B   E5..         MOV     A,?V0 + 13
   \   00020D   39           ADDC    A,R1
   \   00020E   F5..         MOV     ?V0 + 3,A
   \   000210   85..82       MOV     DPL,?V0 + 14
   \   000213   85..83       MOV     DPH,?V0 + 15
   \   000216   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000219                ; Setup parameters for call to function zclFindAttrRec
   \   000219   740A         MOV     A,#0xa
   \   00021B   12....       LCALL   ?XSTACK_DISP0_8
   \   00021E   8582..       MOV     ?V0 + 6,DPL
   \   000221   8583..       MOV     ?V0 + 7,DPH
   \   000224   78..         MOV     R0,#?V0 + 6
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000229   85..82       MOV     DPL,?V0 + 2
   \   00022C   85..83       MOV     DPH,?V0 + 3
   \   00022F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000232   85..82       MOV     DPL,?V0 + 4
   \   000235   85..83       MOV     DPH,?V0 + 5
   \   000238   A3           INC     DPTR
   \   000239   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00023C   E5..         MOV     A,?V0 + 4
   \   00023E   2414         ADD     A,#0x14
   \   000240   F582         MOV     DPL,A
   \   000242   E5..         MOV     A,?V0 + 5
   \   000244   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000247   F9           MOV     R1,A
   \   000248   12....       LCALL   ??zclFindAttrRec?relay
   \   00024B   7402         MOV     A,#0x2
   \   00024D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000250   E9           MOV     A,R1
   \   000251   6003         JZ      $+5
   \   000253   02....       LJMP    ??zclProcessInWriteUndividedCmd_19 & 0xFFFF
   3008            
   3009              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000256   EF           MOV     A,R7
   \   000257   85..82       MOV     DPL,?V0 + 0
   \   00025A   85..83       MOV     DPH,?V0 + 1
   \   00025D   F0           MOVX    @DPTR,A
   3010              if ( writeRspCmd->numAttr  == 0 )
   \   00025E   7003         JNZ     ??CrossCallReturnLabel_13
   3011              {
   3012                // Since all records were written successful, include a single status record in the resonse command
   3013                // with the status field set to SUCCESS and the attribute ID field omitted.
   3014                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000260   12....       LCALL   ?Subroutine10 & 0xFFFF
   3015                writeRspCmd->numAttr = 1;
   3016              }
   3017          
   3018              osal_mem_free( curWriteRec );
   \                     ??CrossCallReturnLabel_13:
   \   000263                ; Setup parameters for call to function osal_mem_free
   \   000263   AA..         MOV     R2,?V0 + 12
   \   000265   AB..         MOV     R3,?V0 + 13
   \   000267   12....       LCALL   ??osal_mem_free?relay
   3019            }
   3020            
   3021            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3022                              pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   3023                              true, pInMsg->hdr.transSeqNum );  
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   00026A   85..82       MOV     DPL,?V0 + 14
   \   00026D   85..83       MOV     DPH,?V0 + 15
   \   000270   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000273                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000273   85..82       MOV     DPL,?V0 + 14
   \   000276   85..83       MOV     DPH,?V0 + 15
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   F5..         MOV     ?V0 + 2,A
   \   000282   78..         MOV     R0,#?V0 + 2
   \   000284   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000287   75..01       MOV     ?V0 + 2,#0x1
   \   00028A   78..         MOV     R0,#?V0 + 2
   \   00028C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028F   78..         MOV     R0,#?V0 + 2
   \   000291   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000294   78..         MOV     R0,#?V0 + 0
   \   000296   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000299   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00029C   12....       LCALL   ?DEALLOC_XSTACK8
   3024            osal_mem_free( writeRspCmd );
   \   00029F                ; Setup parameters for call to function osal_mem_free
   \   00029F   AA..         MOV     R2,?V0 + 0
   \   0002A1   AB..         MOV     R3,?V0 + 1
   \   0002A3   12....       LCALL   ??osal_mem_free?relay
   3025           
   3026            return TRUE; 
   \   0002A6   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   0002A8   02....       LJMP    ?Subroutine98 & 0xFFFF
   3027          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EE           MOV     A,R6
   \   000001   75F005       MOV     B,#0x5
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V0 + 7
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   8582..       MOV     ?V0 + 2,DPL
   \   000016   8583..       MOV     ?V0 + 3,DPH
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006                REQUIRE ??Subroutine122_0
   \   000006                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   85..82       MOV     DPL,?V0 + 2
   \   000005   85..83       MOV     DPH,?V0 + 3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   3028          #endif // ZCL_WRITE
   3029          
   3030          #ifdef ZCL_DISCOVER
   3031          /*********************************************************************
   3032           * @fn      zclProcessInDiscCmd
   3033           * @brief   Process the "Profile" Discover Command
   3034           * @param   pInMsg - incoming message to process
   3035           * @return  TRUE if command processed. FALSE, otherwise.
   3036           */
   3037          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   3038          {
   3039            zclDiscoverCmd_t *discoverCmd;
   3040            zclDiscoverRspCmd_t *discoverRspCmd;
   3041            uint8 discComplete = TRUE;
   3042            zclAttrRec_t attrRec;
   3043            uint16 attrID;
   3044            uint8 i;
   3045            
   3046            discoverCmd = (zclDiscoverCmd_t *)pInMsg->attrCmd;
   3047            
   3048            // Find out the number of attributes supported within the specified range
   3049            for ( i = 0, attrID = discoverCmd->startAttr; i < discoverCmd->maxAttrIDs; i++, attrID++ )
   3050            {
   3051              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3052                break;
   3053            }
   3054            
   3055            // Allocate space for the response command
   3056            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof (zclDiscoverRspCmd_t) 
   3057                                                                   + sizeof ( zclDiscoverInfo_t ) * i );
   3058            if ( discoverRspCmd == NULL )
   3059              return FALSE; // EMEDDED RETURN
   3060            
   3061            discoverRspCmd->numAttr = i;
   3062            if ( discoverRspCmd->numAttr != 0 )
   3063            {
   3064              for ( i = 0, attrID = discoverCmd->startAttr; i < discoverRspCmd->numAttr; i++, attrID++ )
   3065              {
   3066                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3067                  break; // Attribute not supported
   3068                
   3069                discoverRspCmd->attrList[i].attrID = attrRec.attr.attrId;
   3070                discoverRspCmd->attrList[i].dataType = attrRec.attr.dataType;
   3071              }
   3072              
   3073              // Are there more attributes to be discovered?
   3074              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3075                discComplete = FALSE;
   3076            }
   3077            
   3078            discoverRspCmd->discComplete = discComplete;
   3079            zcl_SendDiscoverRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr, 
   3080                                    pInMsg->msg->clusterId, discoverRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR, 
   3081                                    true, pInMsg->hdr.transSeqNum );
   3082            osal_mem_free( discoverRspCmd );
   3083            
   3084            return TRUE;
   3085          }
   3086          #endif // ZCL_DISCOVER
   3087          
   3088          /*********************************************************************
   3089           * @fn      zclSendMsg
   3090           * @brief   Send an incoming message to the Application
   3091           * @param   pInMsg - incoming message to process
   3092           * @return  TRUE
   3093           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3094          static uint8 zclSendMsg( zclIncoming_t *pInMsg )
   \                     zclSendMsg:
   3095          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3096            zclIncomingMsg_t *pCmd;
   3097              
   3098            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000009   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   7005         JNZ     ??zclSendMsg_0
   3099              return ( TRUE );
   \                     ??zclSendMsg_1:
   \   000011   7901         MOV     R1,#0x1
   \   000013   02....       LJMP    ?Subroutine93 & 0xFFFF
   3100            
   3101            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \                     ??zclSendMsg_0:
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A18         MOV     R2,#0x18
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_msg_allocate?relay
   3102            if ( pCmd != NULL )
   \   00001D   EA           MOV     A,R2
   \   00001E   7001         JNZ     ??zclSendMsg_2
   \   000020   EB           MOV     A,R3
   \                     ??zclSendMsg_2:
   \   000021   60EE         JZ      ??zclSendMsg_1
   3103            {
   3104              // fill in the message
   3105              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000023   7434         MOV     A,#0x34
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
   3106              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_167:
   \   000028   A3           INC     DPTR
   \   000029   EA           MOV     A,R2
   \   00002A   2402         ADD     A,#0x2
   \   00002C   FC           MOV     R4,A
   \   00002D   EB           MOV     A,R3
   \   00002E   3400         ADDC    A,#0x0
   \   000030   FD           MOV     R5,A
   \   000031   7406         MOV     A,#0x6
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3107              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00003D   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E8           MOV     A,R0
   \   00004D   12....       LCALL   ?Subroutine12 & 0xFFFF
   3108              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_18:
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F583         MOV     DPH,A
   \   000055   8882         MOV     DPL,R0
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   EA           MOV     A,R2
   \   00005E   240A         ADD     A,#0xa
   \   000060   FC           MOV     R4,A
   \   000061   EB           MOV     A,R3
   \   000062   3400         ADDC    A,#0x0
   \   000064   FD           MOV     R5,A
   \   000065   740C         MOV     A,#0xc
   \   000067   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3109              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00006A   EE           MOV     A,R6
   \   00006B   240C         ADD     A,#0xc
   \   00006D   F8           MOV     R0,A
   \   00006E   EF           MOV     A,R7
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F9           MOV     R1,A
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000079   EA           MOV     A,R2
   \   00007A   2416         ADD     A,#0x16
   \   00007C   F582         MOV     DPL,A
   \   00007E   EB           MOV     A,R3
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F583         MOV     DPH,A
   \   000083   EC           MOV     A,R4
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   ED           MOV     A,R5
   \   000087   F0           MOVX    @DPTR,A
   3110              
   3111              // Application will free the attrCmd buffer
   3112              pInMsg->attrCmd = NULL;
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   E4           CLR     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   3113              
   3114              /* send message through task message */
   3115              osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
   \   000090                ; Setup parameters for call to function osal_msg_send
   \   000090   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   12....       LCALL   ??osal_msg_send?relay
   \   000098   02....       LJMP    ??zclSendMsg_1 & 0xFFFF
   3116            }
   3117            return ( TRUE );
   3118          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_RegisteredMsgTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerPlugin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerAttrList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerClusterOptionList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerValidateAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerForMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_DeviceOperational?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessMessageMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclBuildHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindAttrRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSetSecurityOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSerializeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetDataTypeLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclWriteAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteUndividedCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSendMsg
   3119          
   3120          /*********************************************************************
   3121          *********************************************************************/

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     zclBuildHdr                       1      0     54
     zclFindAttrRec                    1      0     62
     zclFindClusterOption              1      0     21
     zclGetAttrDataLength              2      0     42
       -> zclGetDataTypeLength         4      0      0
     zclGetClusterOption               0      0     52
       -> zclFindClusterOption         0      0     20
     zclGetDataTypeLength              2      0      0
     zclParseHdr                       1      0     12
       -> osal_memset                  0      0     24
     zclParseInDefaultRspCmd           1      0     10
       -> osal_mem_alloc               0      0     20
     zclParseInReadCmd                 1      0     12
       -> osal_mem_alloc               0      0     24
     zclParseInReadRspCmd              1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteCmd                1      0     23
       -> zclGetAttrDataLength         0      0     40
       -> osal_mem_alloc               0      0     40
       -> zclGetAttrDataLength         0      0     40
       -> osal_memcpy                  0      0     46
     zclParseInWriteRspCmd             1      0     16
       -> osal_mem_alloc               0      0     32
     zclProcessInReadCmd               1      0     35
       -> osal_mem_alloc               0      0     60
       -> zclFindAttrRec               0      0     64
       -> zcl_SendReadRsp              0      0     70
       -> osal_mem_free                0      0     60
     zclProcessInWriteCmd              1      0     39
       -> osal_mem_alloc               0      0     68
       -> zclFindAttrRec               0      0     72
       -> zclWriteAttrData             0      0     68
       -> zcl_SendWriteRsp             0      0     78
       -> osal_mem_free                0      0     68
     zclProcessInWriteUndividedCmd     1      0     47
       -> osal_mem_alloc               0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> osal_mem_alloc               0      0     84
       -> osal_mem_free                0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> zclFindAttrRec               0      0     88
       -> zclReadAttrData              0      0     84
       -> zclWriteAttrData             0      0     84
       -> zclGetAttrDataLength         0      0     84
       -> osal_memcpy                  0      0     90
       -> zclFindAttrRec               0      0     88
       -> osal_mem_free                0      0     84
       -> zcl_SendWriteRsp             0      0     94
       -> osal_mem_free                0      0     84
     zclProcessMessageMSG              1      0     44
       -> HalLcdWriteChar              0      0     64
     zclReadAttrData                   0      0     56
       -> zclGetAttrDataLength         0      0     22
       -> osal_memcpy                  0      0     28
     zclSendMsg                        1      0     10
       -> osal_msg_allocate            0      0     20
       -> osal_msg_send                0      0     20
     zclSerializeData                  1      0     44
       -> osal_buffer_uint32           0      0     32
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
       -> osal_memcpy                  0      0     30
     zclSetSecurityOption              0      0     10
       -> zclFindClusterOption         0      0     20
     zclWriteAttrData                  0      0     60
       -> zclGetAttrDataLength         0      0     30
       -> osal_memcpy                  0      0     36
     zcl_DeviceOperational             1      0     65
       -> zclFindAttrRec               0      0     42
       -> zclReadAttrData              0      0     38
     zcl_Init                          2      0      0
     zcl_SendCommand                   1      0     90
       -> osal_memcpy                  0      0     90
       -> afFindEndPointDesc           0      0     84
       -> zclGetClusterOption          0      0     84
       -> osal_memset                  0      0     84
       -> zcl_DeviceOperational        0      0     88
       -> osal_mem_alloc               0      0     84
       -> zclBuildHdr                  0      0     90
       -> osal_memcpy                  0      0     90
       -> AF_DataRequest               0      0    102
       -> osal_mem_free                0      0     84
     zcl_SendDefaultRspCmd             1      0     34
       -> zcl_SendCommand              0      0     54
     zcl_SendRead                      1      0     38
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_SendReadRsp                   1      0     74
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRequest              1      0     45
       -> zclGetAttrDataLength         0      0     56
       -> osal_mem_alloc               0      0     56
       -> zclSerializeData             0      0     56
       -> zclGetAttrDataLength         0      0     56
       -> zcl_SendCommand              0      0     78
       -> osal_mem_free                0      0     56
     zcl_SendWriteRsp                  1      0     80
       -> osal_mem_alloc               0      0     44
       -> zcl_SendCommand              0      0     66
       -> osal_mem_free                0      0     44
     zcl_event_loop                    0      0     12
       -> osal_msg_receive             0      0     24
       -> zclProcessMessageMSG         0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> osal_msg_send                0      0     24
     zcl_registerAttrList              1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerClusterOptionList     1      0     12
       -> osal_mem_alloc               0      0     24
     zcl_registerForMsg                2      0      0
     zcl_registerPlugin                0      0     16
       -> osal_mem_alloc               0      0     28
     zcl_registerValidateAttrData      2      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     zcl_TaskID                                    1
     zcl_RegisteredMsgTaskID                       1
     zcl_ValidateAttrDataCB                        2
     zcl_SeqNum                                    1
     plugins                                       2
     attrList                                      2
     clusterOptionList                             2
     zcl_TransID                                   1
     zclCmdTable                                  56
     zcl_Init                                     31
     ?Subroutine83                                 7
     zcl_event_loop                              102
     ?Subroutine84                                 5
     zcl_registerPlugin                          131
     ?Subroutine85                                 5
     ?Subroutine30                                 5
     ??Subroutine99_0                              5
     ?Subroutine11                                 8
     ?Subroutine14                                 4
     ?Subroutine78                                 7
     ?Subroutine66                                 6
     ?Subroutine70                                 5
     ?Subroutine35                                 6
     zcl_registerAttrList                         59
     ?Subroutine50                                25
     ?Subroutine0                                 28
     ?Subroutine63                                 6
     zcl_registerClusterOptionList                59
     zcl_registerValidateAttrData                 16
     zcl_registerForMsg                           20
     zcl_DeviceOperational                       118
     ?Subroutine93                                 5
     zcl_SendCommand                             517
     ?Subroutine98                                 4
     ??Subroutine100_0                             8
     ?Subroutine87                                 6
     ?Subroutine45                                 2
     ??Subroutine115_0                             1
     ??Subroutine116_0                             6
     ?Subroutine64                                 8
     zcl_SendRead                                218
     ?Subroutine95                                 2
     ??Subroutine101_0                             5
     ?Subroutine24                                 5
     ??Subroutine102_0                            11
     ?Subroutine90                                 5
     ?Subroutine74                                 6
     ?Subroutine53                                11
     ?Subroutine46                                 6
     ?Subroutine38                                10
     ?Subroutine94                                 4
     zcl_SendReadRsp                             251
     ?Subroutine28                                 4
     ??Subroutine103_0                            11
     ?Subroutine69                                 7
     ?Subroutine60                                 4
     ?Subroutine75                                 7
     ?Subroutine54                                21
     ?Subroutine47                                10
     ?Subroutine39                                16
     ?Subroutine68                                 5
     ?Subroutine80                                11
     ?Subroutine33                                 9
     ?Subroutine32                                13
     ?Subroutine19                                28
     ?Subroutine89                                 5
     ?Subroutine65                                20
     ?Subroutine2                                 21
     ?Subroutine1                                 25
     ?Subroutine81                                12
     ?Subroutine27                                 5
     zcl_SendWriteRequest                        222
     zcl_SendWriteRsp                            250
     zcl_SendDefaultRspCmd                       171
     zclProcessMessageMSG                        122
     ??Subroutine121_0                             6
     zclParseHdr                                 227
     ?Subroutine92                                 5
     ?Subroutine9                                  4
     ?Subroutine61                                 5
     ??Subroutine110_0                             4
     ?Subroutine62                                 9
     ?Subroutine82                                 8
     ?Subroutine5                                  6
     ??Subroutine111_0                             5
     ??Subroutine113_0                             7
     ?Subroutine79                                 4
     ??Subroutine120_0                             5
     ?Subroutine12                                 8
     zclBuildHdr                                 106
     ?Subroutine43                                11
     ?Subroutine16                                 7
     ??Subroutine104_0                             7
     ?Subroutine8                                  6
     ?Subroutine91                                 5
     zclFindAttrRec                              194
     zclFindClusterOption                        124
     ?Subroutine96                                 5
     zclGetClusterOption                          32
     zclSetSecurityOption                         46
     zclSerializeData                            289
     ?Subroutine15                                 5
     ?Subroutine40                                 4
     ??Subroutine114_0                             4
     zclGetDataTypeLength                        131
     zclGetAttrDataLength                         29
     zclReadAttrData                              75
     ?Subroutine25                                 2
     ??Subroutine105_0                             2
     ??Subroutine106_0                             5
     ??Subroutine108_0                             4
     zclWriteAttrData                            122
     ?Subroutine88                                 6
     ??Subroutine117_0                             4
     ?Subroutine71                                 9
     ?Subroutine41                                 6
     ?Subroutine31                                 6
     zclParseInReadCmd                           100
     ?Subroutine29                                25
     ?Subroutine49                                10
     zclParseInReadRspCmd                        126
     ?Subroutine97                                 9
     ?Subroutine20                                 7
     ??Subroutine109_0                            24
     ?Subroutine6                                  8
     ?Subroutine59                                14
     ?Subroutine57                                 5
     ?Subroutine86                                 6
     ?Subroutine52                                16
     ?Subroutine51                                26
     ?Subroutine48                                25
     ?Subroutine34                                25
     ?Subroutine22                                32
     ?Subroutine4                                 23
     ?Subroutine3                                 35
     ?Subroutine77                                 4
     ?Subroutine76                                15
     ?Subroutine73                                10
     ?Subroutine72                                 1
     ??Subroutine123_0                             9
     zclParseInWriteCmd                          103
     zclParseInWriteRspCmd                       125
     ?Subroutine56                                 4
     zclParseInDefaultRspCmd                      44
     ?Subroutine7                                  4
     zclProcessInReadCmd                         324
     ?Subroutine67                                 6
     ??Subroutine112_0                             8
     ?Subroutine44                                 1
     ??Subroutine118_0                            37
     ??Subroutine119_0                             1
     ?Subroutine55                                 6
     zclProcessInWriteCmd                        358
     ?Subroutine37                                 6
     ?Subroutine13                                 7
     ??Subroutine122_0                             6
     ?Subroutine23                                18
     ?Subroutine21                                38
     ?Subroutine10                                13
     ?Subroutine42                                 6
     ??Subroutine107_0                             3
     ?Subroutine18                                 6
     zclProcessInWriteUndividedCmd               683
     ?Subroutine58                                26
     ?Subroutine26                                 6
     ?Subroutine17                                10
     ?Subroutine36                                 7
     zclSendMsg                                  155
     ?<Initializer for zcl_RegisteredMsgTaskID>    1
     ??zcl_Init?relay                              6
     ??zcl_event_loop?relay                        6
     ??zcl_registerPlugin?relay                    6
     ??zcl_registerAttrList?relay                  6
     ??zcl_registerClusterOptionList?relay         6
     ??zcl_registerValidateAttrData?relay          6
     ??zcl_registerForMsg?relay                    6
     ??zcl_DeviceOperational?relay                 6
     ??zcl_SendCommand?relay                       6
     ??zcl_SendRead?relay                          6
     ??zcl_SendReadRsp?relay                       6
     ??zcl_SendWriteRequest?relay                  6
     ??zcl_SendWriteRsp?relay                      6
     ??zcl_SendDefaultRspCmd?relay                 6
     ??zclProcessMessageMSG?relay                  6
     ??zclParseHdr?relay                           6
     ??zclBuildHdr?relay                           6
     ??zclFindAttrRec?relay                        6
     ??zclFindClusterOption?relay                  6
     ??zclGetClusterOption?relay                   6
     ??zclSetSecurityOption?relay                  6
     ??zclSerializeData?relay                      6
     ??zclGetDataTypeLength?relay                  6
     ??zclGetAttrDataLength?relay                  6
     ??zclReadAttrData?relay                       6
     ??zclWriteAttrData?relay                      6
     ??zclParseInReadCmd?relay                     6
     ??zclParseInReadRspCmd?relay                  6
     ??zclParseInWriteCmd?relay                    6
     ??zclParseInWriteRspCmd?relay                 6
     ??zclParseInDefaultRspCmd?relay               6
     ??zclProcessInReadCmd?relay                   6
     ??zclProcessInWriteCmd?relay                  6
     ??zclProcessInWriteUndividedCmd?relay         6
     ??zclSendMsg?relay                            6

 
 6 863 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    56 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    11 bytes in segment XDATA_Z
 
 7 130 bytes of CODE  memory
    12 bytes of XDATA memory

Errors: none
Warnings: none
