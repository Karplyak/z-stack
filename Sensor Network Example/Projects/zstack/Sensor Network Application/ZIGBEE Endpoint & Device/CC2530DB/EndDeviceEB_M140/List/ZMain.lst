###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Aug/2013  23:45:13 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network        #
#                          Example\Projects\zstack\ZMain\TI2530DB\ZMain.c     #
#    Command line       =  -f "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network    #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.c #
#                          fg" (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS)   #
#                          -f "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network    #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0             #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network    #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg #
#                          " (-DZCL_READ -DZCL_WRITE -DZCL_BASIC              #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE                       #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\ZMain\TI2530DB\ZMain.c"    #
#                          -D LCD_SUPPORTED=DEBUG -D NWK_AUTO_POLL -D         #
#                          ZTOOL_P1 -D MT_APP_FUNC -D MT_SYS_FUNC -D          #
#                          MT_ZDO_FUNC -D MT_TASK -D xPOWER_SAVING -D         #
#                          xNV_RESTORE -D End_Device -D M140 -D HAL_KEYPAD    #
#                          -D xPA2591 -lC "D:\CC2530_ZStack-2.3.0-1.4.0\Senso #
#                          r Network Example\Projects\zstack\Sensor Network   #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\List\" -lA        #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\List\"            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\Obj\" -e          #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\CC2530_ZStack-2.3.0-1. #
#                          4.0\Sensor Network Example\Projects\zstack\Sensor  #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\" -I "D:\CC2530_ZStack-2.3.0-1.4.0 #
#                          \Sensor Network Example\Projects\zstack\Sensor     #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\..\SOURCE\" -I                     #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\SOURCE\" -I                  #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I       #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I  #
#                          "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network       #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCL #
#                          UDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MODU #
#                          LE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor       #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARG #
#                          ET\CC2530EB\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sen #
#                          sor Network Example\Projects\zstack\Sensor         #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU #
#                          \CCSOC\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INC #
#                          LUDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor     #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF #
#                          \" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NW #
#                          K\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SE #
#                          C\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SA #
#                          PI\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor       #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SY #
#                          S\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZC #
#                          L\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZD #
#                          O\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor        #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W #
#                          \" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor         #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"   #
#                          -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network    #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SADDR\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES #
#                          \SDATA\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCL #
#                          UDE\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor      #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH #
#                          _LEVEL\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sensor   #
#                          Network Example\Projects\zstack\Sensor Network     #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\" -I "D:\CC2530_ZStack-2.3.0-1.4.0\Sen #
#                          sor Network Example\Projects\zstack\Sensor         #
#                          Network Application\ZIGBEE Endpoint &              #
#                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_ #
#                          LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files     #
#                          (x86)\IAR Systems\Embedded Workbench               #
#                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR      #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\List\ZMain.lst    #
#    Object file        =  D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network        #
#                          Example\Projects\zstack\Sensor Network             #
#                          Application\ZIGBEE Endpoint &                      #
#                          Device\CC2530DB\EndDeviceEB_M140\Obj\ZMain.r51     #
#                                                                             #
#                                                                             #
###############################################################################

D:\CC2530_ZStack-2.3.0-1.4.0\Sensor Network Example\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2009-09-17 20:35:33 -0700 (Thu, 17 Sep 2009) $
      4            Revision:       $Revision: 20782 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            Should you have any questions regarding your right to use this Software,
     12            contact Texas Instruments Incorporated at www.TI.com.
     13          **************************************************************************************************/
     14          
     15          /*********************************************************************
     16           * INCLUDES
     17           */
     18          #include "ZComDef.h"
     19          
     20          /* OSAL */
     21          #include "OSAL.h"
     22          #include "OSAL_Nv.h"
     23          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     24          
     25          /* ZMac */
     26          #include "ZMAC.h"
     27          #ifndef NONWK
     28            #include "AF.h"
     29          #endif
     30          
     31          /* Hal */
     32          #include "hal_lcd.h"
     33          #include "hal_keypad.h"
     34          #include "hal_led.h"
     35          #include "hal_adc.h"
     36          #include "hal_drivers.h"
     37          #include "hal_assert.h"
     38          #include "hal_flash.h"
     39          #include "hal_keypad.h"
     40          #include "hal_buzzer.h"
     41          #include "hal_rs485.h"
     42          
     43          /* Sensor */
     44          #if defined(M140)||(M170)||(M200)
     45            #include "M200.h"
     46            #include "M140.h"
     47          #endif
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * CONSTANTS
     55           */
     56          
     57          // Maximun number of Vdd samples checked before go on
     58          #define MAX_VDD_SAMPLES  3
     59          #define ZMAIN_VDD_LIMIT  HAL_ADC_VDD_LIMIT_4
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL VARIABLES
     67           */
     68          
     69          /*********************************************************************
     70           * EXTERNAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * EXTERNAL FUNCTIONS
     75           */
     76          extern bool HalAdcCheckVdd (uint8 limit);
     77          
     78          /*********************************************************************
     79           * LOCAL FUNCTIONS
     80           */
     81          static void zmain_dev_info( void );
     82          static void zmain_ext_addr( void );
     83          static void zmain_vdd_check( void );
     84          
     85          #ifdef LCD_SUPPORTED
     86            static void zmain_lcd_init( void );
     87          #endif
     88          
     89          /*********************************************************************
     90           * @fn      main
     91           * @brief   First function called after startup.
     92           * @return  don't caresd
     93           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     94          int main( void )
   \                     main:
     95          { 
   \   000000                ; Auto size: 0
     96            // Turn off interrupts
     97            show("osal_int_disable_INTS_ALL");
   \   000000                ; Setup parameters for call to function show
   \   000000   7A..         MOV     R2,#(`?<Constant "osal_int_disable_INTS...">` & 0xff)
   \   000002   7B..         MOV     R3,#((`?<Constant "osal_int_disable_INTS...">` >> 8) & 0xff)
   \   000004   12....       LCALL   ??show?relay
     98            osal_int_disable( INTS_ALL ); 
   \   000007                ; Setup parameters for call to function osal_int_disable
   \   000007   79FF         MOV     R1,#-0x1
   \   000009   12....       LCALL   ??osal_int_disable?relay
     99            
    100            // Initialization for board related stuff such as LEDs
    101            show("HAL_BOARD_INIT");
   \   00000C                ; Setup parameters for call to function show
   \   00000C   7A..         MOV     R2,#(`?<Constant "HAL_BOARD_INIT">` & 0xff)
   \   00000E   7B..         MOV     R3,#((`?<Constant "HAL_BOARD_INIT">` >> 8) & 0xff)
   \   000010   12....       LCALL   ??show?relay
    102            HAL_BOARD_INIT();
   \   000013   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000016   E59D         MOV     A,0x9d
   \   000018   A2E6         MOV     C,0xE0 /* A   */.6
   \   00001A   50FA         JNC     ??main_0
   \   00001C   00           NOP
   \   00001D   78F8         MOV     R0,#-0x8
   \   00001F   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000021   00           NOP
   \   000022   E8           MOV     A,R0
   \   000023   24FF         ADD     A,#-0x1
   \   000025   18           DEC     R0
   \   000026   E9           MOV     A,R1
   \   000027   34FF         ADDC    A,#-0x1
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   7001         JNZ     ??main_2
   \   00002D   E9           MOV     A,R1
   \                     ??main_2:
   \   00002E   70F1         JNZ     ??main_1
   \   000030   75C680       MOV     0xc6,#-0x80
   \                     ??main_3:
   \   000033   7480         MOV     A,#-0x80
   \   000035   659E         XRL     A,0x9e
   \   000037   70FA         JNZ     ??main_3
   \   000039   43BE04       ORL     0xbe,#0x4
   \   00003C   7408         MOV     A,#0x8
   \   00003E   906270       MOV     DPTR,#0x6270
   \   000041   F0           MOVX    @DPTR,A
   \   000042   43FE01       ORL     0xfe,#0x1
   \   000045   43FE02       ORL     0xfe,#0x2
   \   000048   43FE04       ORL     0xfe,#0x4
   \   00004B   43FE08       ORL     0xfe,#0x8
    103            
    104            // Make sure supply voltage is high enough to run
    105            show("zmain_vdd_check");
   \   00004E                ; Setup parameters for call to function show
   \   00004E   7A..         MOV     R2,#(`?<Constant "zmain_vdd_check">` & 0xff)
   \   000050   7B..         MOV     R3,#((`?<Constant "zmain_vdd_check">` >> 8) & 0xff)
   \   000052   12....       LCALL   ??show?relay
    106            zmain_vdd_check();
   \   000055                ; Setup parameters for call to function zmain_vdd_check
   \   000055   12....       LCALL   ??zmain_vdd_check?relay
    107            
    108            // Initialize board I/O
    109            show("InitBoard_OB_COLD");
   \   000058                ; Setup parameters for call to function show
   \   000058   7A..         MOV     R2,#(`?<Constant "InitBoard_OB_COLD">` & 0xff)
   \   00005A   7B..         MOV     R3,#((`?<Constant "InitBoard_OB_COLD">` >> 8) & 0xff)
   \   00005C   12....       LCALL   ??show?relay
    110            InitBoard( OB_COLD );
   \   00005F                ; Setup parameters for call to function InitBoard
   \   00005F   7900         MOV     R1,#0x0
   \   000061   12....       LCALL   ??InitBoard?relay
    111            
    112            // Initialze HAL drivers
    113            show("HalDriverInit");
   \   000064                ; Setup parameters for call to function show
   \   000064   7A..         MOV     R2,#(`?<Constant "HalDriverInit">` & 0xff)
   \   000066   7B..         MOV     R3,#((`?<Constant "HalDriverInit">` >> 8) & 0xff)
   \   000068   12....       LCALL   ??show?relay
    114            HalDriverInit(); 
   \   00006B                ; Setup parameters for call to function HalDriverInit
   \   00006B   12....       LCALL   ??HalDriverInit?relay
    115            
    116            // Initialize NV System
    117            show("osal_nv_init_NULL");
   \   00006E                ; Setup parameters for call to function show
   \   00006E   7A..         MOV     R2,#(`?<Constant "osal_nv_init_NULL">` & 0xff)
   \   000070   7B..         MOV     R3,#((`?<Constant "osal_nv_init_NULL">` >> 8) & 0xff)
   \   000072   12....       LCALL   ??show?relay
    118            osal_nv_init( NULL ); 
   \   000075                ; Setup parameters for call to function osal_nv_init
   \   000075   7A00         MOV     R2,#0x0
   \   000077   7B00         MOV     R3,#0x0
   \   000079   12....       LCALL   ??osal_nv_init?relay
    119            
    120            // Initialize the MAC
    121            show("ZMacInit");
   \   00007C                ; Setup parameters for call to function show
   \   00007C   7A..         MOV     R2,#(`?<Constant "ZMacInit">` & 0xff)
   \   00007E   7B..         MOV     R3,#((`?<Constant "ZMacInit">` >> 8) & 0xff)
   \   000080   12....       LCALL   ??show?relay
    122            ZMacInit(); 
   \   000083                ; Setup parameters for call to function ZMacInit
   \   000083   12....       LCALL   ??ZMacInit?relay
    123            
    124            // Determine the extended address
    125            show("zmain_ext_addr");
   \   000086                ; Setup parameters for call to function show
   \   000086   7A..         MOV     R2,#(`?<Constant "zmain_ext_addr">` & 0xff)
   \   000088   7B..         MOV     R3,#((`?<Constant "zmain_ext_addr">` >> 8) & 0xff)
   \   00008A   12....       LCALL   ??show?relay
    126            zmain_ext_addr(); 
   \   00008D                ; Setup parameters for call to function zmain_ext_addr
   \   00008D   12....       LCALL   ??zmain_ext_addr?relay
    127            
    128            // Initialize basic NV items
    129            show("zgInit");
   \   000090                ; Setup parameters for call to function show
   \   000090   7A..         MOV     R2,#(`?<Constant "zgInit">` & 0xff)
   \   000092   7B..         MOV     R3,#((`?<Constant "zgInit">` >> 8) & 0xff)
   \   000094   12....       LCALL   ??show?relay
    130            zgInit(); 
   \   000097                ; Setup parameters for call to function zgInit
   \   000097   12....       LCALL   ??zgInit?relay
    131            
    132            // Since the AF isn't a task, call it's initialization routine
    133          #ifndef NONWK
    134            show("afInit");
   \   00009A                ; Setup parameters for call to function show
   \   00009A   7A..         MOV     R2,#(`?<Constant "afInit">` & 0xff)
   \   00009C   7B..         MOV     R3,#((`?<Constant "afInit">` >> 8) & 0xff)
   \   00009E   12....       LCALL   ??show?relay
    135            afInit(); 
   \   0000A1                ; Setup parameters for call to function afInit
   \   0000A1   12....       LCALL   ??afInit?relay
    136          #endif
    137            // Initialize the operating system
    138            show("osal_int_system");
   \   0000A4                ; Setup parameters for call to function show
   \   0000A4   7A..         MOV     R2,#(`?<Constant "osal_int_system">` & 0xff)
   \   0000A6   7B..         MOV     R3,#((`?<Constant "osal_int_system">` >> 8) & 0xff)
   \   0000A8   12....       LCALL   ??show?relay
    139            osal_init_system(); 
   \   0000AB                ; Setup parameters for call to function osal_init_system
   \   0000AB   12....       LCALL   ??osal_init_system?relay
    140            
    141            // Allow interrupts
    142            show("osal_int_enbale_INTS_ALL");
   \   0000AE                ; Setup parameters for call to function show
   \   0000AE   7A..         MOV     R2,#(`?<Constant "osal_int_enbale_INTS_ALL">` & 0xff)
   \   0000B0   7B..         MOV     R3,#((`?<Constant "osal_int_enbale_INTS_ALL">` >> 8) & 0xff)
   \   0000B2   12....       LCALL   ??show?relay
    143            osal_int_enable( INTS_ALL );
   \   0000B5                ; Setup parameters for call to function osal_int_enable
   \   0000B5   79FF         MOV     R1,#-0x1
   \   0000B7   12....       LCALL   ??osal_int_enable?relay
    144            
    145            // Final board initialization
    146            show("InitBoard_OB_READY");
   \   0000BA                ; Setup parameters for call to function show
   \   0000BA   7A..         MOV     R2,#(`?<Constant "InitBoard_OB_READY">` & 0xff)
   \   0000BC   7B..         MOV     R3,#((`?<Constant "InitBoard_OB_READY">` >> 8) & 0xff)
   \   0000BE   12....       LCALL   ??show?relay
    147            InitBoard( OB_READY ); 
   \   0000C1                ; Setup parameters for call to function InitBoard
   \   0000C1   7902         MOV     R1,#0x2
   \   0000C3   12....       LCALL   ??InitBoard?relay
    148            
    149            // Display information about this device
    150            show("zmain_dev_info");
   \   0000C6                ; Setup parameters for call to function show
   \   0000C6   7A..         MOV     R2,#(`?<Constant "zmain_dev_info">` & 0xff)
   \   0000C8   7B..         MOV     R3,#((`?<Constant "zmain_dev_info">` >> 8) & 0xff)
   \   0000CA   12....       LCALL   ??show?relay
    151            zmain_dev_info(); 
   \   0000CD                ; Setup parameters for call to function zmain_dev_info
   \   0000CD   12....       LCALL   ??zmain_dev_info?relay
    152            
    153            // Display the device info on the LCD 
    154          #ifdef LCD_SUPPORTED
    155            show("zmain_lcd_init");
   \   0000D0                ; Setup parameters for call to function show
   \   0000D0   7A..         MOV     R2,#(`?<Constant "zmain_lcd_init">` & 0xff)
   \   0000D2   7B..         MOV     R3,#((`?<Constant "zmain_lcd_init">` >> 8) & 0xff)
   \   0000D4   12....       LCALL   ??show?relay
    156            zmain_lcd_init(); 
   \   0000D7                ; Setup parameters for call to function HalLcdWriteString
   \   0000D7   7901         MOV     R1,#0x1
   \   0000D9   7A..         MOV     R2,#(`?<Constant "TexasInstruments">` & 0xff)
   \   0000DB   7B..         MOV     R3,#((`?<Constant "TexasInstruments">` >> 8) & 0xff)
   \   0000DD   12....       LCALL   ??HalLcdWriteString?relay
    157          #endif
    158            // If WDT is used, this is a good place to enable it.
    159          #ifdef WDT_IN_PM1
    160            show("WatchDogEnable_WDTIMX");
    161            WatchDogEnable( WDTIMX ); 
    162          #endif 
    163            
    164          #ifdef RS485
    165            show("HalRS485Init");
    166            HalRS485Init(); // Initilization the RS485 Enable pin to low
    167          #endif
    168            
    169            // No Return from here
    170            show("osal_start_system");
   \   0000E0                ; Setup parameters for call to function show
   \   0000E0   7A..         MOV     R2,#(`?<Constant "osal_start_system">` & 0xff)
   \   0000E2   7B..         MOV     R3,#((`?<Constant "osal_start_system">` >> 8) & 0xff)
   \   0000E4   12....       LCALL   ??show?relay
    171            osal_start_system(); 
   \   0000E7                ; Setup parameters for call to function osal_start_system
   \   0000E7   12....       LCALL   ??osal_start_system?relay
    172          
    173            return 0;  // Shouldn't get here.
   \   0000EA   7A00         MOV     R2,#0x0
   \   0000EC   7B00         MOV     R3,#0x0
   \   0000EE   02....       LJMP    ?BRET
   \   0000F1                REQUIRE SLEEPSTA
   \   0000F1                REQUIRE CLKCONSTA
   \   0000F1                REQUIRE CLKCONCMD
   \   0000F1                REQUIRE SLEEPCMD
   \   0000F1                REQUIRE P1DIR
    174          } // main()
    175          
    176          /*********************************************************************
    177           * @fn      zmain_vdd_check
    178           * @brief   Check if the Vdd is OK to run the processor.
    179           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    180           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    182          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    183            uint8 vdd_passed_count = 0;
   \   000005   7E00         MOV     R6,#0x0
    184            bool toggle = 0;
   \   000007   7F00         MOV     R7,#0x0
    185          
    186            // Repeat getting the sample until number of failures or successes hits MAX
    187            // then based on the count value, determine if the device is ready or not
    188            while ( vdd_passed_count < MAX_VDD_SAMPLES )
    189            {
    190              if ( HalAdcCheckVdd (ZMAIN_VDD_LIMIT) )
   \                     ??zmain_vdd_check_0:
   \   000009                ; Setup parameters for call to function HalAdcCheckVdd
   \   000009   7904         MOV     R1,#0x4
   \   00000B   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000E   E9           MOV     A,R1
   \   00000F   601D         JZ      ??zmain_vdd_check_1
    191              {
    192                vdd_passed_count++;    // Keep track # times Vdd passes in a row
   \   000011   0E           INC     R6
    193                MicroWait (10000);     // Wait 10ms to try again
   \   000012                ; Setup parameters for call to function Onboard_wait
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B27         MOV     R3,#0x27
   \   000016   12....       LCALL   ??Onboard_wait?relay
    194              }
    195              else
    196              {
    197                vdd_passed_count = 0;  // Reset passed counter
    198                MicroWait (50000);     // Wait 50ms
    199                MicroWait (50000);     // Wait another 50ms to try again
    200              }
    201              
    202              if (vdd_passed_count == 0) // toggle LED1 and LED2
   \   000019   EE           MOV     A,R6
   \   00001A   6022         JZ      ??zmain_vdd_check_2
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   40E8         JC      ??zmain_vdd_check_0
    203              {
    204                if ((toggle = !(toggle)))
    205                  HAL_TOGGLE_LED1();
    206                else
    207                  HAL_TOGGLE_LED2();
    208              }
    209            }
    210            
    211            /* turn off LED1 */
    212            HAL_TURN_OFF_LED1();
   \   000021   D290         SETB    0x90.0
    213            HAL_TURN_OFF_LED2();
   \   000023   D291         SETB    0x90.1
    214            
    215            #if !defined ( XT200_PA )
    216              HAL_TURN_OFF_LED3();
   \   000025   D292         SETB    0x90.2
    217              HAL_TURN_OFF_LED4();
   \   000027   D293         SETB    0x90.3
    218            #endif
    219          }
   \   000029   7F01         MOV     R7,#0x1
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_vdd_check_1:
   \   00002E   7E00         MOV     R6,#0x0
   \   000030                ; Setup parameters for call to function Onboard_wait
   \   000030   7A50         MOV     R2,#0x50
   \   000032   7BC3         MOV     R3,#-0x3d
   \   000034   12....       LCALL   ??Onboard_wait?relay
   \   000037                ; Setup parameters for call to function Onboard_wait
   \   000037   7A50         MOV     R2,#0x50
   \   000039   7BC3         MOV     R3,#-0x3d
   \   00003B   12....       LCALL   ??Onboard_wait?relay
   \                     ??zmain_vdd_check_2:
   \   00003E   EF           MOV     A,R7
   \   00003F   700A         JNZ     ??zmain_vdd_check_3
   \   000041   7F01         MOV     R7,#0x1
   \   000043   A290         MOV     C,0x90.0
   \   000045   400E         JC      ??zmain_vdd_check_4
   \   000047   D290         SETB    0x90.0
   \   000049   80BE         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_3:
   \   00004B   7F00         MOV     R7,#0x0
   \   00004D   A291         MOV     C,0x90.1
   \   00004F   4008         JC      ??zmain_vdd_check_5
   \   000051   D291         SETB    0x90.1
   \   000053   80B4         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_4:
   \   000055   C290         CLR     0x90.0
   \   000057   80B0         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_5:
   \   000059   C291         CLR     0x90.1
   \   00005B   80AC         SJMP    ??zmain_vdd_check_0
   \   00005D                REQUIRE _A_P1
    220          
    221          /**************************************************************************************************
    222           * @fn          zmain_ext_addr
    223           * @brief       Execute a prioritized search for a valid extended address and write the results
    224           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    225           **************************************************************************************************
    226           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    228          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    229            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#((`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff)
   \   000017   7582..       MOV     DPL,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff)
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    230            uint8 writeNV = TRUE;
    231          
    232            // First check whether a non-erased extended address exists in the OSAL NV.
    233            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    234                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    235                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   A982         MOV     R1,DPL
   \   000027   AA83         MOV     R2,DPH
   \   000029   89..         MOV     ?V0 + 4,R1
   \   00002B   8A..         MOV     ?V0 + 5,R2
   \   00002D   F5..         MOV     ?V0 + 6,A
   \   00002F                ; Setup parameters for call to function osal_nv_item_init
   \   00002F   F5..         MOV     ?V0 + 8,A
   \   000031   F5..         MOV     ?V0 + 9,A
   \   000033   78..         MOV     R0,#?V0 + 8
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C08         MOV     R4,#0x8
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A01         MOV     R2,#0x1
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_nv_item_init?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   7046         JNZ     ??zmain_ext_addr_0
   \   00004B                ; Setup parameters for call to function osal_nv_read
   \   00004B   75....       MOV     ?V0 + 8,#(aExtendedAddress & 0xff)
   \   00004E   75....       MOV     ?V0 + 9,#((aExtendedAddress >> 8) & 0xff)
   \   000051   78..         MOV     R0,#?V0 + 8
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   75..08       MOV     ?V0 + 8,#0x8
   \   000059   75..00       MOV     ?V0 + 9,#0x0
   \   00005C   78..         MOV     R0,#?V0 + 8
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C00         MOV     R4,#0x0
   \   000063   7D00         MOV     R5,#0x0
   \   000065   7A01         MOV     R2,#0x1
   \   000067   7B00         MOV     R3,#0x0
   \   000069   12....       LCALL   ??osal_nv_read?relay
   \   00006C   7404         MOV     A,#0x4
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   E9           MOV     A,R1
   \   000072   701D         JNZ     ??zmain_ext_addr_0
   \   000074                ; Setup parameters for call to function osal_memcmp
   \   000074   78..         MOV     R0,#?V0 + 4
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000079   7C08         MOV     R4,#0x8
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   79..         MOV     R1,#(aExtendedAddress & 0xff)
   \   00007F   7A..         MOV     R2,#((aExtendedAddress >> 8) & 0xff)
   \   000081   7B00         MOV     R3,#0x0
   \   000083   12....       LCALL   ??osal_memcmp?relay
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   E9           MOV     A,R1
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    236            {
    237              // Attempt to read the extended address from the location on the lock bits page
    238              // where the programming tools know to reserve it.
    239              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000091                ; Setup parameters for call to function HalFlashRead
   \   000091   75..08       MOV     ?V0 + 8,#0x8
   \   000094   78..         MOV     R0,#?V0 + 8
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7C..         MOV     R4,#(aExtendedAddress & 0xff)
   \   00009B   7D..         MOV     R5,#((aExtendedAddress >> 8) & 0xff)
   \   00009D   7AE8         MOV     R2,#-0x18
   \   00009F   7B07         MOV     R3,#0x7
   \   0000A1   797F         MOV     R1,#0x7f
   \   0000A3   12....       LCALL   ??HalFlashRead?relay
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
    240          
    241              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AB                ; Setup parameters for call to function osal_memcmp
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B0   7C08         MOV     R4,#0x8
   \   0000B2   7D00         MOV     R5,#0x0
   \   0000B4   79..         MOV     R1,#(aExtendedAddress & 0xff)
   \   0000B6   7A..         MOV     R2,#((aExtendedAddress >> 8) & 0xff)
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   12....       LCALL   ??osal_memcmp?relay
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   E9           MOV     A,R1
   \   0000C3   6038         JZ      ??zmain_ext_addr_2
    242              {
    243                // Attempt to read the extended address from the designated location in the Info Page.
    244                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000C5                ; Setup parameters for call to function osal_memcmp
   \   0000C5   78..         MOV     R0,#?V0 + 4
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CA   7C08         MOV     R4,#0x8
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   790C         MOV     R1,#0xc
   \   0000D0   7A78         MOV     R2,#0x78
   \   0000D2   7B00         MOV     R3,#0x0
   \   0000D4   12....       LCALL   ??osal_memcmp?relay
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   7057         JNZ     ??zmain_ext_addr_3
    245                {
    246                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   75..0C       MOV     ?V0 + 0,#0xc
   \   0000E2   75..78       MOV     ?V0 + 1,#0x78
   \   0000E5   75..00       MOV     ?V0 + 2,#0x0
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000ED   7C08         MOV     R4,#0x8
   \   0000EF   7D00         MOV     R5,#0x0
   \   0000F1   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   0000F3   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   0000F5   12....       LCALL   ??osal_memcpy?relay
   \   0000F8   7403         MOV     A,#0x3
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
    247                }
    248                else  // No valid extended address was found.
    249                {
    250                  uint8 idx;
    251                  
    252          #if !defined ( NV_RESTORE )
    253                  writeNV = FALSE;  // Make this a temporary IEEE address
    254          #endif
    255          
    256                  // Attempt to create a sufficiently random extended address for expediency.
    257                  // Note: this is only valid/legal in a test environment and must never be used for a commercial product.                
    258                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    259                  {
    260                    uint16 randy = osal_rand();
    261                    aExtendedAddress[idx++] = LO_UINT16(randy);
    262                    aExtendedAddress[idx++] = HI_UINT16(randy);
    263                  }
    264                  // Next-to-MSB identifies ZigBee devicetype.
    265          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    266                  aExtendedAddress[idx++] = 0x10;
    267          #elif ZG_BUILD_RTRONLY_TYPE
    268                  aExtendedAddress[idx++] = 0x20;
    269          #else
    270                  aExtendedAddress[idx++] = 0x30;
    271          #endif
    272                  // MSB has historical signficance.
    273                  aExtendedAddress[idx] = 0xF8;
    274                }
    275              }
    276              if (writeNV)
    277              {
    278                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   0000FD                ; Setup parameters for call to function osal_nv_write
   \   0000FD   75....       MOV     ?V0 + 0,#(aExtendedAddress & 0xff)
   \   000100   75....       MOV     ?V0 + 1,#((aExtendedAddress >> 8) & 0xff)
   \   000103   78..         MOV     R0,#?V0 + 0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   75..08       MOV     ?V0 + 0,#0x8
   \   00010B   75..00       MOV     ?V0 + 1,#0x0
   \   00010E   78..         MOV     R0,#?V0 + 0
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   7C00         MOV     R4,#0x0
   \   000115   7D00         MOV     R5,#0x0
   \   000117   7A01         MOV     R2,#0x1
   \   000119   7B00         MOV     R3,#0x0
   \   00011B   12....       LCALL   ??osal_nv_write?relay
   \   00011E   7404         MOV     A,#0x4
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
    279              }
    280            }
    281            // Set the MAC PIB extended address according to results from above.
    282            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000123                ; Setup parameters for call to function ZMacSetReq
   \   000123   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   000125   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   000127   79E2         MOV     R1,#-0x1e
   \   000129   12....       LCALL   ??ZMacSetReq?relay
    283          }
   \   00012C   7408         MOV     A,#0x8
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   7F0A         MOV     R7,#0xa
   \   000133   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000136   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   000138                ; Setup parameters for call to function osal_rand
   \   000138   12....       LCALL   ??osal_rand?relay
   \   00013B   8A..         MOV     ?V0 + 0,R2
   \   00013D   A8..         MOV     R0,?V0 + 0
   \   00013F   8E..         MOV     ?V0 + 0,R6
   \   000141   E5..         MOV     A,?V0 + 0
   \   000143   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000146   E8           MOV     A,R0
   \   000147   F0           MOVX    @DPTR,A
   \   000148   0E           INC     R6
   \   000149   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00014C   EB           MOV     A,R3
   \   00014D   F0           MOVX    @DPTR,A
   \   00014E   0E           INC     R6
   \   00014F   EE           MOV     A,R6
   \   000150   C3           CLR     C
   \   000151   9406         SUBB    A,#0x6
   \   000153   40E3         JC      ??zmain_ext_addr_4
   \   000155   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000158   7430         MOV     A,#0x30
   \   00015A   F0           MOVX    @DPTR,A
   \   00015B   7401         MOV     A,#0x1
   \   00015D   2E           ADD     A,R6
   \   00015E   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000161   74F8         MOV     A,#-0x8
   \   000163   F0           MOVX    @DPTR,A
   \   000164   80BD         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine3_0
   \   000001                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   24..         ADD     A,#(aExtendedAddress & 0xff)
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#((aExtendedAddress >> 8) & 0xff)
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    284          
    285          /**************************************************************************************************
    286           * @fn          zmain_dev_info
    287           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    288           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    290          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    291          #ifdef LCD_SUPPORTED
    292            uint8 i;
    293            uint8 *xad;
    294            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    295          
    296            xad = aExtendedAddress + Z_EXTADDR_LEN - 1; // Display the extended address.
   \   00000A   78..         MOV     R0,#((aExtendedAddress + 7) & 0xff)
   \   00000C   79..         MOV     R1,#(((aExtendedAddress + 7) >> 8) & 0xff)
    297          
    298            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   00000E   7C00         MOV     R4,#0x0
    299            {
    300              uint8 ch;
    301              ch = (*xad >> 4) & 0x0F;
   \                     ??zmain_dev_info_0:
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C4           SWAP    A
   \   000016   12....       LCALL   ?Subroutine2 & 0xFFFF
    302              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \                     ??CrossCallReturnLabel_2:
   \   000019   5004         JNC     ??zmain_dev_info_1
   \   00001B   7A30         MOV     R2,#0x30
   \   00001D   8002         SJMP    ??zmain_dev_info_2
   \                     ??zmain_dev_info_1:
   \   00001F   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_2:
   \   000021   EA           MOV     A,R2
   \   000022   2D           ADD     A,R5
   \   000023   C0E0         PUSH    A
   \   000025   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
    303              ch = *xad & 0x0F;
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   12....       LCALL   ?Subroutine2 & 0xFFFF
    304              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    305            }
   \                     ??CrossCallReturnLabel_3:
   \   000033   5004         JNC     ??zmain_dev_info_3
   \   000035   7A30         MOV     R2,#0x30
   \   000037   8002         SJMP    ??zmain_dev_info_4
   \                     ??zmain_dev_info_3:
   \   000039   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_4:
   \   00003B   EA           MOV     A,R2
   \   00003C   2D           ADD     A,R5
   \   00003D   C0E0         PUSH    A
   \   00003F   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
   \   000045   E8           MOV     A,R0
   \   000046   24FF         ADD     A,#-0x1
   \   000048   18           DEC     R0
   \   000049   E9           MOV     A,R1
   \   00004A   34FF         ADDC    A,#-0x1
   \   00004C   F9           MOV     R1,A
   \   00004D   EC           MOV     A,R4
   \   00004E   C3           CLR     C
   \   00004F   9410         SUBB    A,#0x10
   \   000051   40BD         JC      ??zmain_dev_info_0
    306            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
   \   000053   7410         MOV     A,#0x10
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
    307            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
   \   00005A                ; Setup parameters for call to function HalLcdWriteString
   \   00005A   7901         MOV     R1,#0x1
   \   00005C   7A..         MOV     R2,#(`?<Constant "IEEE: ">` & 0xff)
   \   00005E   7B..         MOV     R3,#((`?<Constant "IEEE: ">` >> 8) & 0xff)
   \   000060   12....       LCALL   ??HalLcdWriteString?relay
    308            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   \   000063                ; Setup parameters for call to function HalLcdWriteString
   \   000063   7902         MOV     R1,#0x2
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   12....       LCALL   ??HalLcdWriteString?relay
    309          #endif
    310          }
   \   000072   7411         MOV     A,#0x11
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   7F02         MOV     R7,#0x2
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   540F         ANL     A,#0xf
   \   000002   FD           MOV     R5,A
   \   000003   8C..         MOV     ?V0 + 0,R4
   \   000005   0C           INC     R4
   \   000006   C3           CLR     C
   \   000007   940A         SUBB    A,#0xa
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 0
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_vdd_check?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_dev_info?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "osal_int_disable_INTS...">`:
   \   000000   6F73616C     DB "osal_int_disable_INTS_ALL"
   \            5F696E74
   \            5F646973
   \            61626C65
   \            5F494E54
   \            535F414C
   \            4C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HAL_BOARD_INIT">`:
   \   000000   48414C5F     DB "HAL_BOARD_INIT"
   \            424F4152
   \            445F494E
   \            495400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zmain_vdd_check">`:
   \   000000   7A6D6169     DB "zmain_vdd_check"
   \            6E5F7664
   \            645F6368
   \            65636B00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "InitBoard_OB_COLD">`:
   \   000000   496E6974     DB "InitBoard_OB_COLD"
   \            426F6172
   \            645F4F42
   \            5F434F4C
   \            4400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HalDriverInit">`:
   \   000000   48616C44     DB "HalDriverInit"
   \            72697665
   \            72496E69
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "osal_nv_init_NULL">`:
   \   000000   6F73616C     DB "osal_nv_init_NULL"
   \            5F6E765F
   \            696E6974
   \            5F4E554C
   \            4C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZMacInit">`:
   \   000000   5A4D6163     DB "ZMacInit"
   \            496E6974
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zmain_ext_addr">`:
   \   000000   7A6D6169     DB "zmain_ext_addr"
   \            6E5F6578
   \            745F6164
   \            647200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zgInit">`:
   \   000000   7A67496E     DB "zgInit"
   \            697400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "afInit">`:
   \   000000   6166496E     DB "afInit"
   \            697400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "osal_int_system">`:
   \   000000   6F73616C     DB "osal_int_system"
   \            5F696E74
   \            5F737973
   \            74656D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "osal_int_enbale_INTS_ALL">`:
   \   000000   6F73616C     DB "osal_int_enbale_INTS_ALL"
   \            5F696E74
   \            5F656E62
   \            616C655F
   \            494E5453
   \            5F414C4C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "InitBoard_OB_READY">`:
   \   000000   496E6974     DB "InitBoard_OB_READY"
   \            426F6172
   \            645F4F42
   \            5F524541
   \            445900  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zmain_dev_info">`:
   \   000000   7A6D6169     DB "zmain_dev_info"
   \            6E5F6465
   \            765F696E
   \            666F00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "zmain_lcd_init">`:
   \   000000   7A6D6169     DB "zmain_lcd_init"
   \            6E5F6C63
   \            645F696E
   \            697400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "osal_start_system">`:
   \   000000   6F73616C     DB "osal_start_system"
   \            5F737461
   \            72745F73
   \            79737465
   \            6D00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FFFFFFFF     DB 255, 255, 255, 255, 255, 255, 255, 255
   \            FFFFFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TexasInstruments">`:
   \   000000   54657861     DB "TexasInstruments"
   \            73496E73
   \            7472756D
   \            656E7473
   \            00      
    311          
    312          #ifdef LCD_SUPPORTED
    313          /*********************************************************************
    314           * @fn      zmain_lcd_init
    315           * @brief   Initialize LCD at start up.
    316           *********************************************************************/
    317          static void zmain_lcd_init ( void )
    318          {
    319          #ifdef SERIAL_DEBUG_SUPPORTED
    320            {
    321              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    322          
    323            #if defined( MT_MAC_FUNC )
    324            #if defined( ZDO_COORDINATOR )
    325                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    326            #else
    327                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    328            #endif // ZDO
    329            #elif defined( MT_NWK_FUNC )
    330            
    331            #if defined( ZDO_COORDINATOR )
    332                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    333            #else
    334                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    335            #endif // ZDO
    336            #endif // MT_FUNC
    337            }
    338            #endif // SERIAL_DEBUG_SUPPORTED
    339          }
    340          #endif
    341          
    342          /*********************************************************************
    343          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     main                       0      0      0
       -> show                  0      0      0
       -> osal_int_disable      0      0      0
       -> show                  0      0      0
       -> show                  0      0      0
       -> zmain_vdd_check       0      0      0
       -> show                  0      0      0
       -> InitBoard             0      0      0
       -> show                  0      0      0
       -> HalDriverInit         0      0      0
       -> show                  0      0      0
       -> osal_nv_init          0      0      0
       -> show                  0      0      0
       -> ZMacInit              0      0      0
       -> show                  0      0      0
       -> zmain_ext_addr        0      0      0
       -> show                  0      0      0
       -> zgInit                0      0      0
       -> show                  0      0      0
       -> afInit                0      0      0
       -> show                  0      0      0
       -> osal_init_system      0      0      0
       -> show                  0      0      0
       -> osal_int_enable       0      0      0
       -> show                  0      0      0
       -> InitBoard             0      0      0
       -> show                  0      0      0
       -> zmain_dev_info        0      0      0
       -> show                  0      0      0
       -> HalLcdWriteString     0      0      0
       -> show                  0      0      0
       -> osal_start_system     0      0      0
     zmain_dev_info             1      0     27
       -> HalLcdWriteString     0      0     54
       -> HalLcdWriteString     0      0     54
     zmain_ext_addr             2      0     30
       -> osal_nv_item_init     0      0     56
       -> osal_nv_read          0      0     60
       -> osal_memcmp           0      0     58
       -> HalFlashRead          0      0     56
       -> osal_memcmp           0      0     58
       -> osal_memcmp           0      0     58
       -> osal_memcpy           0      0     58
       -> osal_nv_write         0      0     60
       -> ZMacSetReq            0      0     52
       -> osal_rand             0      0     52
     zmain_vdd_check            0      0      9
       -> HalAdcCheckVdd        0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P1DIR                                             1
     main                                            241
     zmain_vdd_check                                  93
     zmain_ext_addr                                  358
     ?Subroutine0                                      1
     ??Subroutine3_0                                  10
     zmain_dev_info                                  124
     ?Subroutine2                                     10
     ?Subroutine1                                     19
     ??main?relay                                      6
     ??zmain_vdd_check?relay                           6
     ??zmain_ext_addr?relay                            6
     ??zmain_dev_info?relay                            6
     ?<Constant "osal_int_disable_INTS...">           26
     ?<Constant "HAL_BOARD_INIT">                     15
     ?<Constant "zmain_vdd_check">                    16
     ?<Constant "InitBoard_OB_COLD">                  18
     ?<Constant "HalDriverInit">                      14
     ?<Constant "osal_nv_init_NULL">                  18
     ?<Constant "ZMacInit">                            9
     ?<Constant "zmain_ext_addr">                     15
     ?<Constant "zgInit">                              7
     ?<Constant "afInit">                              7
     ?<Constant "osal_int_system">                    16
     ?<Constant "osal_int_enbale_INTS_ALL">           25
     ?<Constant "InitBoard_OB_READY">                 19
     ?<Constant "zmain_dev_info">                     15
     ?<Constant "zmain_lcd_init">                     15
     ?<Constant "osal_start_system">                  18
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8
     ?<Constant "IEEE: ">                              7
     ?<Constant "TexasInstruments">                   17

 
 856 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   6 bytes in segment SFR_AN
 285 bytes in segment XDATA_ROM_C
 
 880 bytes of CODE  memory
 285 bytes of CONST memory
   0 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
