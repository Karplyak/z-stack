///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               19/Aug/2013  17:38:54 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c                        /
//    Command line       =  -f "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "D:\GitHub\z-stack\Sensor        /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\Source\hal_sensor.c" -D                    /
//                          LCD_SUPPORTED=DEBUG -D NWK_AUTO_POLL -D ZTOOL_P1  /
//                          -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D   /
//                          MT_TASK -D xPOWER_SAVING -D xNV_RESTORE -D        /
//                          End_Device -D M140 -D HAL_KEYPAD -D xPA2591 -lC   /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\List\" -lA       /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint & Device\CC2530DB\"   /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\SOURCE\" -I                    /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "D:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "D:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "D:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "D:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "D:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "D:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "D:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "D:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "D:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program Files   /
//                          (x86)\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files (x86)\IAR     /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  D:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\List\hal_sensor. /
//                          s51                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_sensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??M140_SensorFunction?relay
        FUNCTION ??M140_SensorFunction?relay,0203H
        PUBLIC M140_SensorFunction
        FUNCTION M140_SensorFunction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC TransmitApp_Msg
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
M140_Init           SYMBOL "M140_Init"
M140_GetValue       SYMBOL "M140_GetValue"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
HalLcdWriteChar     SYMBOL "HalLcdWriteChar"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??HalLcdWriteChar?relay SYMBOL "?relay", HalLcdWriteChar
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??M140_GetValue?relay SYMBOL "?relay", M140_GetValue
??M140_Init?relay   SYMBOL "?relay", M140_Init
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
M140_SensorFunction SYMBOL "M140_SensorFunction"
??M140_SensorFunction?relay SYMBOL "?relay", M140_SensorFunction

        EXTERN M140_Init
        FUNCTION M140_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M140_GetValue
        FUNCTION M140_GetValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteChar
        FUNCTION HalLcdWriteChar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLcdWriteChar?relay
        FUNCTION ??HalLcdWriteChar?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??M140_GetValue?relay
        FUNCTION ??M140_GetValue?relay,00H
        EXTERN ??M140_Init?relay
        FUNCTION ??M140_Init?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN zclZigbeeDevice_DstAddr

// D:\GitHub\z-stack\Sensor Network Example\Projects\zstack\Sensor Network Application\ZIGBEE Endpoint & Device\Source\hal_sensor.c
//    1 #include <string.h>
//    2 #include <stdio.h>
//    3 #include "ZComDef.h"
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 #include "mac_radio_defs.h"
//   10 
//   11 /* ZCL */
//   12 #include "zcl.h"
//   13 #include "zcl_general.h"
//   14 #include "zcl_ha.h"
//   15 #include "zcl_zigbee device.h"
//   16 
//   17 /* HAL */
//   18 #include "onboard.h"
//   19 #include "hal_lcd.h"
//   20 #include "hal_led.h"
//   21 #include "hal_key.h"
//   22 #include "MT_UART.h"
//   23 #include "hal_uart.h"
//   24 #include "hal_timer.h"
//   25 #include "hal_keypad.h"
//   26 #include "hal_buzzer.h"
//   27   
//   28 /* HAL Sensor */
//   29 #include "hal_sensor.h"
//   30 
//   31 #if defined(M110)
//   32   #include "M110.h"
//   33 #endif
//   34 #if defined(M140)
//   35   #include "M140.h"
//   36 #endif
//   37 #if defined(M160)
//   38   #include "M160.h"
//   39 #endif
//   40 #if defined(M170)
//   41   #include "M170.h"
//   42 #endif
//   43 #if defined(M190)
//   44   #include "M190.h"
//   45 #endif
//   46 #if defined(M200)
//   47   #include "M200.h"
//   48 #endif
//   49 #if defined(M270)
//   50   #include "M270.h"
//   51 #endif
//   52 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   53 byte TransmitApp_Msg[ TRANSMITAPP_MAX_DATA_LEN ]; 
TransmitApp_Msg:
        DS 102
        REQUIRE __INIT_XDATA_Z
//   54  
//   55 void M110_SensorFunction(void); // M140 Module function
//   56 void M140_SensorFunction(void); // M140 Module function
//   57 void M160_SensorFunction(void); // M160 Module function
//   58 void M170_SensorFunction(void); // M170 Module function
//   59 void M190_SensorFunction(void); // M190 Module function
//   60 void M200_SensorFunction(void); // M200 Module function
//   61 void M270_SensorFunction(void); // M270 Module function
//   62 
//   63 #if defined(M110)
//   64 
//   65 void M110_SensorFunction(void)
//   66 {
//   67     // M110 sensor variable
//   68     uint16 val;
//   69     char buf[16];
//   70 
//   71     // ZCL transmit variable
//   72     uint8 len;
//   73       
//   74     // initilization the device
//   75     M110_Init();
//   76     
//   77     val = M110_GetValue();
//   78    
//   79     if(val >3000)
//   80     {    
//   81         sprintf(buf, "%s", "1");
//   82     }
//   83     else
//   84     {
//   85         sprintf(buf, "%s", "0");      
//   86     }
//   87 
//   88 #if defined ( LCD_SUPPORTED )
//   89     HalLcdWriteString("* Z-Stack M110 *", HAL_LCD_LINE_1);
//   90     HalLcdWriteString( buf, HAL_LCD_LINE_2 );
//   91 #endif
//   92    
//   93    len = 3;
//   94    uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//   95                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
//   96  }
//   97 #endif
//   98   
//   99 #if defined(M140)
//  100 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  101 void M140_SensorFunction(void)
M140_SensorFunction:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function M140_SensorFunction
//  102 {
        FUNCALL M140_SensorFunction, M140_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, M140_GetValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, HalLcdWriteChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M140_SensorFunction, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  103   // M140 sensor variable
//  104   uint16 val;
//  105   uint8 tmp1, tmp2, tmp3, tmp4;
//  106   uint8 tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmpT;  
//  107   uint8 len;
//  108   
//  109   // initilization the device
//  110   M140_Init();
        ; Setup parameters for call to function M140_Init
        LCALL   ??M140_Init?relay
//  111       
//  112   val = M140_GetValue();  
        ; Setup parameters for call to function M140_GetValue
        LCALL   ??M140_GetValue?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  113   if((0x2000 & val) == 0x2000) // check sign bit for negative value
        MOV     A,#0x20
        ANL     A,R5
        MOV     R1,A
        CLR     A
        JNZ     ??M140_SensorFunction_0
        MOV     A,R1
??M140_SensorFunction_0:
        JZ      ??M140_SensorFunction_1
//  114   {
//  115     val = ((val - 16384) * 10) / 32;
        CLR     A
        ADD     A,R4
        MOV     A,#-0x40
        ADDC    A,R5
        MOV     ?V0 + 1,A
        MOV     A,R2
        MOV     B,#0xa
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     ?V0 + 1,A
        SJMP    ??M140_SensorFunction_2
//  116   }
//  117   else
//  118   {
//  119     val = (val * 10) / 32;
??M140_SensorFunction_1:
        MOV     A,R4
        MOV     B,#0xa
        MUL     AB
        MOV     R4,A
        MOV     R2,B
        MOV     B,#0xa
        MOV     A,R5
        MUL     AB
        ADD     A,R2
        MOV     R5,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
??M140_SensorFunction_2:
        MOV     A,#0x5
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  120   }
//  121 
//  122   tmpT = 3 + '0';
//  123   TransmitApp_Msg[0] = tmpT;  
        MOV     A,#0x33
        MOV     DPTR,#TransmitApp_Msg
        MOVX    @DPTR,A
//  124   
//  125   tmp10 = ',';  
//  126   TransmitApp_Msg[1] = tmp10;
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 1)
        MOVX    @DPTR,A
//  127   
//  128   tmp1 = 1 + '0';  
//  129   TransmitApp_Msg[2] = tmp1;  
        MOV     A,#0x31
        MOV     DPTR,#(TransmitApp_Msg + 2)
        MOVX    @DPTR,A
//  130   tmp2 = 4 + '0';  
//  131   TransmitApp_Msg[3] = tmp2;  
        MOV     A,#0x34
        MOV     DPTR,#(TransmitApp_Msg + 3)
        MOVX    @DPTR,A
//  132   tmp3 = 0 + '0';  
//  133   TransmitApp_Msg[4] = tmp3;   
        MOV     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 4)
        MOVX    @DPTR,A
//  134   
//  135   tmp4 = ',';  
//  136   TransmitApp_Msg[5] = tmp4;
        MOV     A,#0x2c
        MOV     DPTR,#(TransmitApp_Msg + 5)
        MOVX    @DPTR,A
//  137   
//  138   tmp5 = (val / 100) + '0';
//  139   TransmitApp_Msg[6] = tmp5;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     DPTR,#(TransmitApp_Msg + 6)
        LCALL   ?Subroutine0 & 0xFFFF
//  140   tmp6 = ((val / 10) % 10) + '0';
??CrossCallReturnLabel_0:
        LCALL   ?US_DIV_MOD
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     R6,A
//  141   TransmitApp_Msg[7] = tmp6;
        MOV     DPTR,#(TransmitApp_Msg + 7)
        MOVX    @DPTR,A
//  142   tmp7 = '.';
//  143   TransmitApp_Msg[8] = tmp7;
        MOV     A,#0x2e
        MOV     DPTR,#(TransmitApp_Msg + 8)
        LCALL   ?Subroutine0 & 0xFFFF
//  144   tmp8 = (val % 10) + '0';
??CrossCallReturnLabel_1:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     R7,A
//  145   TransmitApp_Msg[9] = tmp8;
        MOV     DPTR,#(TransmitApp_Msg + 9)
        MOVX    @DPTR,A
//  146   
//  147   tmp9 = '$';  
//  148   TransmitApp_Msg[10] = tmp9;
        MOV     A,#0x24
        MOV     DPTR,#(TransmitApp_Msg + 10)
        MOVX    @DPTR,A
//  149   
//  150   len = 11;
//  151     
//  152 #if defined ( LCD_SUPPORTED )
//  153   HalLcdWriteString("* Z-Stack M140 *", HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#(`?<Constant "* Z-Stack M140 *">` & 0xff)
        MOV     R3,#((`?<Constant "* Z-Stack M140 *">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  154   HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant " Temp. =       C">` & 0xff)
        MOV     R3,#((`?<Constant " Temp. =       C">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  155   HalLcdWriteChar(HAL_LCD_LINE_2, 14, 0xDF);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,#-0x21
        MOV     R2,#0xe
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  156   HalLcdWriteChar(HAL_LCD_LINE_2, 9, tmp6);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     A,R6
        MOV     R3,A
        MOV     R2,#0x9
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  157   HalLcdWriteChar(HAL_LCD_LINE_2, 10, tmp7);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,#0x2e
        MOV     R2,#0xa
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  158   HalLcdWriteChar(HAL_LCD_LINE_2, 11, tmp8);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     A,R7
        MOV     R3,A
        MOV     R2,#0xb
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  159   HalLcdWriteChar(HAL_LCD_LINE_2, 12, tmp9);
        ; Setup parameters for call to function HalLcdWriteChar
        MOV     R3,#0x24
        MOV     R2,#0xc
        MOV     R1,#0x2
        LCALL   ??HalLcdWriteChar?relay
//  160 #endif 
//  161 
//  162   len = 11;
//  163   uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, 
//  164                                 ZCL_CLUSTER_ID_GEN_BASIC, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );   
        ; Setup parameters for call to function zcl_SendCommand
        MOV     ?V0 + 0,#(TransmitApp_Msg & 0xff)
        MOV     ?V0 + 1,#((TransmitApp_Msg >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#(zclZigbeeDevice_DstAddr & 0xff)
        MOV     R3,#((zclZigbeeDevice_DstAddr >> 8) & 0xff)
        MOV     R1,#0xc
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  165  }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M140_SensorFunction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M140_SensorFunction

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "* Z-Stack M140 *">`:
        DB "* Z-Stack M140 *"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant " Temp. =       C">`:
        DB " Temp. =       C"

        END
//  166 #endif
//  167 
//  168 #if defined(M160)
//  169 /*********************************************************************
//  170  * @fn          M160_SensorFunction
//  171  * @brief       The ZIGBEE Device to receive the M160 tempture data.
//  172  */
//  173  void M160_SensorFunction(void)
//  174  {
//  175   // M160 sensor variable
//  176   static uint8 duty = 50;
//  177   
//  178   // initilization the device
//  179   M160_Init();
//  180   
//  181   if (ch > 0)
//  182   {           
//  183     if (ch == 'U')
//  184     {
//  185       if (duty < 100)
//  186       {
//  187         duty = duty + 5;
//  188       }
//  189     }
//  190     
//  191     if (ch == 'N')
//  192     {
//  193       if (duty > 0)
//  194       {
//  195         duty = duty - 5;
//  196       }
//  197     }
//  198       
//  199     M160_On(duty);
//  200     #if defined ( LCD_SUPPORTED )
//  201       HalLcdWriteString("** M160 Test  **", HAL_LCD_LINE_1);
//  202       HalLcdWriteString("   Duty =     % ", HAL_LCD_LINE_2);
//  203       halLcdDisplayUint8(HAL_LCD_LINE_2, 10, HAL_LCD_RADIX_DEC, duty); 
//  204     #endif
//  205   }
//  206 //  M160_Off();
//  207  }
//  208 #endif 
//  209 
//  210  
//  211 #if defined(M170)
//  212 /*********************************************************************
//  213  * @fn          M170_SensorFunction
//  214  * @brief       The ZIGBEE Device to receive the M170 optical data.
//  215  */
//  216  void M170_SensorFunction(void)
//  217  {
//  218     // M170 sensor variable
//  219     uint16 val;
//  220     uint8 tmp1, tmp2, tmp3;
//  221     // ZCL transmit variable
//  222     uint8 len;
//  223       
//  224     // initilization the device
//  225     M170_Init();
//  226   
//  227    val = M170_GetValue();
//  228    if (val > 2000)
//  229    {
//  230       val -= 2000;
//  231    }
//  232    else
//  233     {
//  234       val = 0;
//  235     }val /= 120;
//  236             
//  237    if (val > 100)
//  238    {
//  239       val = 100;
//  240    }
//  241    
//  242    tmp1 = (val / 100) + '0';
//  243    TransmitApp_Msg[0] = tmp1;
//  244    tmp2 = ((val / 10) % 10) + '0';
//  245    TransmitApp_Msg[1] = tmp2;
//  246    tmp3 = (val % 10) + '0';
//  247    TransmitApp_Msg[2] = tmp3;
//  248    
//  249 #if defined ( LCD_SUPPORTED )
//  250    HalLcdWriteString("* Z-Stack M170 *", HAL_LCD_LINE_1);
//  251    HalLcdWriteString(" Bright =     % ", HAL_LCD_LINE_2);
//  252    HalLcdWriteChar(HAL_LCD_LINE_2, 10, tmp1);
//  253    HalLcdWriteChar(HAL_LCD_LINE_2, 11, tmp2);
//  254    HalLcdWriteChar(HAL_LCD_LINE_2, 12, tmp3);
//  255 #endif
//  256    
//  257    len = 3;
//  258    uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  259                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
//  260  }
//  261 #endif
//  262  
//  263 #if defined(M190)
//  264 /*********************************************************************
//  265  * @fn          M190_SensorFunction
//  266  * @brief       The ZIGBEE Device to receive the M190 optical data.
//  267  */
//  268  void M190_SensorFunction(void)
//  269  {
//  270     // M190 sensor variable
//  271     uint16 val;
//  272     char buf[16];
//  273 
//  274     // ZCL transmit variable
//  275     uint8 len;
//  276       
//  277     // initilization the device
//  278     M190_Init();
//  279     val = M190_GetValue();  
//  280     sprintf(buf, "ADC = %u %", val);
//  281 
//  282 #if defined ( LCD_SUPPORTED )
//  283     HalLcdWriteString("* Z-Stack M190 *", HAL_LCD_LINE_1);
//  284     HalLcdWriteString( buf, HAL_LCD_LINE_2 );
//  285 #endif
//  286    
//  287    len = 3;
//  288    uint8 temp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, ZCL_CLUSTER_ID_GEN_BASIC,
//  289                                  TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
//  290  }
//  291 #endif
//  292  
//  293 #if defined(M200)
//  294 /*********************************************************************
//  295  * @fn          M200_SensorFunction
//  296  * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
//  297  */
//  298  void M200_SensorFunction(void)
//  299  {
//  300     // M200 module variable
//  301     uint16 temp, humi;
//  302     uint8 hum_1,hum_2,hum_3,hum_4;
//  303     uint8 temp_1,temp_2,temp_3,temp_4;
//  304     uint8 len;
//  305       
//  306     // initilization the device
//  307     M200_Init();
//  308   
//  309     M200_GetValue();
//  310     temp = (uint16)(((((float)M200_Temp) *0.01) - 40.0) *10.0);
//  311     humi = (uint16)(((((float)M200_Humi) *0.0405) - (((float)M200_Humi)*((float)M200_Humi) *0.0000028) - 4.0) *10.0);
//  312     if (humi > 999)
//  313     {
//  314       humi = 999;
//  315     }
//  316     if (temp > 999)
//  317     {
//  318       temp = 999;
//  319     }
//  320     hum_1 = (humi / 100) + '0';
//  321     TransmitApp_Msg[0] = hum_1;
//  322     hum_2 = ((humi / 10) % 10) + '0';
//  323     TransmitApp_Msg[1] = hum_2;
//  324     hum_3 = '.';
//  325     TransmitApp_Msg[2] = hum_3;
//  326     hum_4 = (humi % 10) + '0';
//  327     TransmitApp_Msg[3] = hum_4;
//  328     TransmitApp_Msg[4] = ' ';
//  329     temp_1 = (temp / 100) + '0';
//  330     TransmitApp_Msg[5] = temp_1;
//  331     temp_2 = ((temp / 10) % 10) + '0';
//  332     TransmitApp_Msg[6] = temp_2;
//  333     temp_3 = '.';
//  334     TransmitApp_Msg[7] = temp_3;
//  335     temp_4 = (temp % 10) + '0';
//  336     TransmitApp_Msg[8] = temp_4;
//  337     
//  338     #if defined ( LCD_SUPPORTED )
//  339       HalLcdWriteString("Humidity=      %", HAL_LCD_LINE_1);
//  340       HalLcdWriteString(" Temp. =       C", HAL_LCD_LINE_2);
//  341       // Humi
//  342       HalLcdWriteChar(HAL_LCD_LINE_1, 10, hum_1);
//  343       HalLcdWriteChar(HAL_LCD_LINE_1, 11, hum_2);
//  344       HalLcdWriteChar(HAL_LCD_LINE_1, 12, hum_3);
//  345       HalLcdWriteChar(HAL_LCD_LINE_1, 13, hum_4);
//  346       // Temp
//  347       HalLcdWriteChar(HAL_LCD_LINE_2, 9, temp_1);
//  348       HalLcdWriteChar(HAL_LCD_LINE_2, 10, temp_2);
//  349       HalLcdWriteChar(HAL_LCD_LINE_2, 11, temp_3);
//  350       HalLcdWriteChar(HAL_LCD_LINE_2, 12, temp_4);
//  351     #endif
//  352 
//  353     len = 9;
//  354     uint8 tmp = zcl_SendCommand( ZIGBEEDEVICE_ENDPOINT, &zclZigbeeDevice_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, 
//  355                                  ZCL_CLUSTER_ID_GEN_BASIC, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0, 0, len, TransmitApp_Msg );
//  356  }
//  357 #endif
//  358  
//  359 #if defined(M270)
//  360 /*********************************************************************
//  361  * @fn          M270_SensorFunction
//  362  * @brief       The ZIGBEE Device to receive the M200 Temp and Humi data.
//  363  */
//  364  void M270_SensorFunction(void)
//  365  {
//  366     static uint8 udo;
//  367 
//  368     M270_Init();
//  369     
//  370      if( ch == 'A' )
//  371      {
//  372         udo = 1;
//  373         M270_SetDO(udo);
//  374      }
//  375      
//  376      if( ch == 'D' )
//  377      {
//  378         udo = 0;
//  379         M270_SetDO(udo);
//  380      }
//  381     
//  382      #if defined ( LCD_SUPPORTED )
//  383         HalLcdWriteString("** M270 Test  **", HAL_LCD_LINE_1);
//  384         HalLcdWriteString("* RELAY DO=[0] *", HAL_LCD_LINE_2);
//  385         // Show the control value
//  386         HalLcdWriteChar(HAL_LCD_LINE_2, 12, udo + '0');
//  387      #endif
//  388  }
//  389 #endif
// 
// 342 bytes in segment BANKED_CODE
//   6 bytes in segment BANK_RELAYS
//  34 bytes in segment XDATA_ROM_C
// 102 bytes in segment XDATA_Z
// 
// 348 bytes of CODE  memory
//  34 bytes of CONST memory
// 102 bytes of XDATA memory
//
//Errors: none
//Warnings: none
