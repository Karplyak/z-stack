///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               18/Aug/2013  22:21:44 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\ZMain\TI2530DB\OnBoard.c  /
//    Command line       =  -f "C:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev. /
//                          cfg" (-DCPU32MHZ -DROOT=__near_func               /
//                          -DBLINK_LEDS) -f "C:\GitHub\z-stack\Sensor        /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f                        /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cf /
//                          g" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC            /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE                      /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\ZMain\TI2530DB\OnBoard.c" /
//                           -D LCD_SUPPORTED=DEBUG -D NWK_AUTO_POLL -D       /
//                          ZTOOL_P1 -D MT_APP_FUNC -D MT_SYS_FUNC -D         /
//                          MT_ZDO_FUNC -D MT_TASK -D xPOWER_SAVING -D        /
//                          xNV_RESTORE -D End_Device -D M140 -D HAL_KEYPAD   /
//                          -D xPA2591 -lC "C:\GitHub\z-stack\Sensor Network  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\List\" -lA       /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\List\"           /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\Obj\" -e         /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint & Device\CC2530DB\"   /
//                          -I "C:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\SOURCE\" -I                    /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\SOURCE\" -I                 /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I      /
//                          "C:\GitHub\z-stack\Sensor Network                 /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"    /
//                          -I "C:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC /
//                          LUDE\" -I "C:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\MOD /
//                          ULE\" -I "C:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TAR /
//                          GET\CC2530EB\" -I "C:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC /
//                          U\CCSOC\" -I "C:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\IN /
//                          CLUDE\" -I "C:\GitHub\z-stack\Sensor Network      /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\A /
//                          F\" -I "C:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N /
//                          WK\" -I "C:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          EC\" -I "C:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          API\" -I "C:\GitHub\z-stack\Sensor Network        /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\S /
//                          YS\" -I "C:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          CL\" -I "C:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z /
//                          DO\" -I "C:\GitHub\z-stack\Sensor Network         /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8 /
//                          W\" -I "C:\GitHub\z-stack\Sensor Network          /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\"  /
//                          -I "C:\GitHub\z-stack\Sensor Network              /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SADDR\" -I "C:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE /
//                          S\SDATA\" -I "C:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INC /
//                          LUDE\" -I "C:\GitHub\z-stack\Sensor Network       /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIG /
//                          H_LEVEL\" -I "C:\GitHub\z-stack\Sensor Network    /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\" -I "C:\GitHub\z-stack\Sensor       /
//                          Network Example\Projects\zstack\Sensor Network    /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW /
//                          _LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program         /
//                          Files\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files\IAR           /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  C:\GitHub\z-stack\Sensor Network                  /
//                          Example\Projects\zstack\Sensor Network            /
//                          Application\ZIGBEE Endpoint &                     /
//                          Device\CC2530DB\EndDeviceEB_M140\List\OnBoard.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OnBoard

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:DATA:REORDER:NOROOT(0)

        EXTERN ??OnBoard_KeyCallback?relay
        EXTERN ??OnBoard_SendKeys?relay
        EXTERN ??Onboard_wait?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BigLight_Off?relay
        FUNCTION ??BigLight_Off?relay,0203H
        PUBLIC ??BigLight_On?relay
        FUNCTION ??BigLight_On?relay,0203H
        PUBLIC ??BuzzerControl?relay
        FUNCTION ??BuzzerControl?relay,0203H
        PUBLIC ??Dimmer?relay
        FUNCTION ??Dimmer?relay,0203H
        PUBLIC ??GetUserDipSw?relay
        FUNCTION ??GetUserDipSw?relay,0203H
        PUBLIC ??InitBoard?relay
        FUNCTION ??InitBoard?relay,0203H
        PUBLIC ??OnBoard_KeyCallback?relay
        FUNCTION ??OnBoard_KeyCallback?relay,0203H
        PUBLIC ??OnBoard_SendKeys?relay
        FUNCTION ??OnBoard_SendKeys?relay,0203H
        PUBLIC ??OnBoard_stack_used?relay
        FUNCTION ??OnBoard_stack_used?relay,0203H
        PUBLIC ??Onboard_rand?relay
        FUNCTION ??Onboard_rand?relay,0203H
        PUBLIC ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,0203H
        PUBLIC ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,0203H
        PUBLIC ??_itoa?relay
        FUNCTION ??_itoa?relay,0203H
        PUBLIC BigLight_Off
        FUNCTION BigLight_Off,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC BigLight_On
        FUNCTION BigLight_On,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC BuzzerControl
        FUNCTION BuzzerControl,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Dimmer
        FUNCTION Dimmer,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC GetUserDipSw
        FUNCTION GetUserDipSw,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC InitBoard
        FUNCTION InitBoard,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OnBoard_KeyCallback
        FUNCTION OnBoard_KeyCallback,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC OnBoard_SendKeys
        FUNCTION OnBoard_SendKeys,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC OnBoard_stack_used
        FUNCTION OnBoard_stack_used,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC OnboardKeyIntEnable
        PUBLIC Onboard_rand
        FUNCTION Onboard_rand,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Onboard_wait
        FUNCTION Onboard_wait,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC RegisterForKeys
        FUNCTION RegisterForKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK SLEEPSTA
        PUBWEAK _A_IEN0
        PUBLIC _itoa
        FUNCTION _itoa,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC aExtendedAddress
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
osal_int_disable    SYMBOL "osal_int_disable"
HalLedSet           SYMBOL "HalLedSet"
HalKeyConfig        SYMBOL "HalKeyConfig"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
macMcuRandomWord    SYMBOL "macMcuRandomWord"
??HalKeyConfig?relay SYMBOL "?relay", HalKeyConfig
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??macMcuRandomWord?relay SYMBOL "?relay", macMcuRandomWord
??osal_int_disable?relay SYMBOL "?relay", osal_int_disable
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
BigLight_Off        SYMBOL "BigLight_Off"
??BigLight_Off?relay SYMBOL "?relay", BigLight_Off
BigLight_On         SYMBOL "BigLight_On"
??BigLight_On?relay SYMBOL "?relay", BigLight_On
BuzzerControl       SYMBOL "BuzzerControl"
??BuzzerControl?relay SYMBOL "?relay", BuzzerControl
Dimmer              SYMBOL "Dimmer"
??Dimmer?relay      SYMBOL "?relay", Dimmer
GetUserDipSw        SYMBOL "GetUserDipSw"
??GetUserDipSw?relay SYMBOL "?relay", GetUserDipSw
InitBoard           SYMBOL "InitBoard"
??InitBoard?relay   SYMBOL "?relay", InitBoard
OnBoard_KeyCallback SYMBOL "OnBoard_KeyCallback"
??OnBoard_KeyCallback?relay SYMBOL "?relay", OnBoard_KeyCallback
OnBoard_SendKeys    SYMBOL "OnBoard_SendKeys"
??OnBoard_SendKeys?relay SYMBOL "?relay", OnBoard_SendKeys
OnBoard_stack_used  SYMBOL "OnBoard_stack_used"
??OnBoard_stack_used?relay SYMBOL "?relay", OnBoard_stack_used
Onboard_rand        SYMBOL "Onboard_rand"
??Onboard_rand?relay SYMBOL "?relay", Onboard_rand
Onboard_wait        SYMBOL "Onboard_wait"
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
_itoa               SYMBOL "_itoa"
??_itoa?relay       SYMBOL "?relay", _itoa

        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyConfig
        FUNCTION HalKeyConfig,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuRandomWord
        FUNCTION macMcuRandomWord,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalKeyConfig?relay
        FUNCTION ??HalKeyConfig?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??macMcuRandomWord?relay
        FUNCTION ??macMcuRandomWord?relay,00H
        EXTERN ??osal_int_disable?relay
        FUNCTION ??osal_int_disable?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H

// C:\GitHub\z-stack\Sensor Network Example\Projects\zstack\ZMain\TI2530DB\OnBoard.c
//    1 /**************************************************************************************************
//    2   Filename:       OnBoard.c
//    3   Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
//    4   Revision:       $Revision: 21351 $
//    5 
//    6   Description:    This file contains the UI and control for the
//    7                   peripherals on the EVAL development board
//    8   Notes:          This file targets the Chipcon CC2530
//    9 
//   10 
//   11   Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
//   12 
//   13   Should you have any questions regarding your right to use this Software,
//   14   contact Texas Instruments Incorporated at www.TI.com.
//   15 **************************************************************************************************/
//   16 #include "ZComDef.h"
//   17 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1
//   18 #include "OSAL.h"
//   19 #include "MT.h"
//   20 #include "MT_SYS.h"
//   21 #include "DebugTrace.h"
//   22 
//   23 /* Hal */
//   24 #include "hal_lcd.h"
//   25 #include "hal_mcu.h"
//   26 #include "hal_timer.h"
//   27 #include "hal_key.h"
//   28 #include "hal_led.h"
//   29 
//   30 /* Allow access macRandomByte() */
//   31 #include "mac_radio_defs.h"
//   32 
//   33 // Task ID not initialized
//   34 #define NO_TASK_ID 0xFF
//   35 
//   36 // Minimum length RAM "pattern" for Stack check
//   37 #define MIN_RAM_INIT 12
//   38 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   39 uint8 OnboardKeyIntEnable;
OnboardKeyIntEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   40 
//   41 #if defined MAKE_CRC_SHDW
//   42 #pragma location="CRC_SHDW"
//   43 const CODE uint16 _crcShdw = 0xFFFF;
//   44 #pragma required=_crcShdw
//   45 #endif
//   46 
//   47 // 64-bit Extended Address of this device

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   48 uint8 aExtendedAddress[8];
aExtendedAddress:
        DS 8
        REQUIRE __INIT_XDATA_Z
//   49 
//   50 // Registered keys task ID, initialized to NOT USED.

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   51 static uint8 registeredKeysTaskID = NO_TASK_ID;
registeredKeysTaskID:
        DS 1
        REQUIRE `?<Initializer for registeredKeysTaskID>`
        REQUIRE __INIT_XDATA_I
//   52 
//   53 static void ChkReset( void );
//   54 
//   55 /*********************************************************************
//   56  * @fn      InitBoard()
//   57  * @brief   Initialize the CC2420DB Board Peripherals
//   58  * @param   level: COLD,WARM,READY
//   59  * @return  None
//   60  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 void InitBoard( uint8 level )
InitBoard:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function InitBoard
//   62 {
        FUNCALL InitBoard, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalKeyConfig
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   63   if ( level == OB_COLD )
        MOV     A,R1
        JNZ     ??InitBoard_0
//   64   {
//   65     // Interrupts off
//   66     osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV     R1,#-0x1
        LCALL   ??osal_int_disable?relay
//   67     // Turn all LEDs off
//   68     HalLedSet( HAL_LED_ALL, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??HalLedSet?relay
//   69     // Check for Brown-Out reset
//   70     ChkReset();
        MOV     A,#0x18
        ANL     A,0x9d
        MOV     R2,A
        JZ      ??InitBoard_1
        MOV     A,#0x8
        XRL     A,R2
        JZ      ??InitBoard_1
        MOV     A,#0x10
        XRL     A,R2
        JZ      ??InitBoard_1
        CLR     0xa8.7
??InitBoard_2:
        MOV     R6,#0x2
??InitBoard_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x24
        MOV     R3,#-0xc
        LCALL   ??Onboard_wait?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x24
        MOV     R3,#-0xc
        LCALL   ??Onboard_wait?relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x7c
        MOV     R3,#-0x6e
        LCALL   ??Onboard_wait?relay
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x7c
        MOV     R3,#-0x6e
        LCALL   ??Onboard_wait?relay
        MOV     A,R6
        CLR     C
        RRC     A
        MOV     R6,A
        JNZ     ??InitBoard_3
        SJMP    ??InitBoard_2
//   71   }
//   72   else  // !OB_COLD
//   73   {
//   74     /* Initialize Key stuff */
//   75     OnboardKeyIntEnable = HAL_KEY_INTERRUPT_DISABLE;
??InitBoard_0:
        CLR     A
        MOV     DPTR,#OnboardKeyIntEnable
        MOVX    @DPTR,A
//   76     HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
        ; Setup parameters for call to function HalKeyConfig
        MOV     R2,#(??OnBoard_KeyCallback?relay & 0xff)
        MOV     R3,#((??OnBoard_KeyCallback?relay >> 8) & 0xff)
        MOV     R1,A
        LCALL   ??HalKeyConfig?relay
//   77   }
//   78 }
??InitBoard_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE SLEEPSTA
        REQUIRE _A_IEN0
//   79 
//   80 /*********************************************************************
//   81  * @fn      ChkReset()
//   82  * @brief   Check reset bits - if reset cause is unknown, assume a
//   83  *          brown-out (low power), assume batteries are not reliable,
//   84  *          hang in a loop and sequence through the LEDs.
//   85  * @param   None
//   86  * @return  None
//   87  *********************************************************************/
//   88 void ChkReset( void )
//   89 {
//   90   uint8 led;
//   91   uint8 rib;
//   92 
//   93   // Isolate reset indicator bits
//   94   rib = SLEEPSTA & LRESET;
//   95 
//   96   if ( rib == RESETPO )
//   97   {
//   98     // Put code here to handle Power-On reset
//   99   }
//  100   else if ( rib == RESETEX )
//  101   {
//  102     // Put code here to handle External reset
//  103   }
//  104   else if ( rib == RESETWD )
//  105   {
//  106     // Put code here to handle WatchDog reset
//  107   }
//  108   else
//  109   {
//  110     // Unknown, hang and blink
//  111     HAL_DISABLE_INTERRUPTS();
//  112     led = HAL_LED_2;
//  113     
//  114     while ( 1 ) 
//  115     {
//  116       HalLedSet( led, HAL_LED_MODE_ON );
//  117       MicroWait( 62500 );
//  118       MicroWait( 62500 );
//  119       HalLedSet( led, HAL_LED_MODE_OFF );
//  120       MicroWait( 37500 );
//  121       MicroWait( 37500 );
//  122       
//  123       if ( !(led >>= 1) )
//  124         led = HAL_LED_2;
//  125     }
//  126   }
//  127 }
//  128 
//  129 /*********************************************************************
//  130  *                        "Keyboard" Support
//  131  *********************************************************************/
//  132 
//  133 /*********************************************************************
//  134  * Keyboard Register function
//  135  *
//  136  * The keyboard handler is setup to send all keyboard changes to
//  137  * one task (if a task is registered).
//  138  *
//  139  * If a task registers, it will get all the keys. You can change this
//  140  * to register for individual keys.
//  141  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  142 uint8 RegisterForKeys( uint8 task_id )
RegisterForKeys:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function RegisterForKeys
//  143 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  144   // Allow only the first task
//  145   if ( registeredKeysTaskID == NO_TASK_ID )
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??RegisterForKeys_0
//  146   {
//  147     registeredKeysTaskID = task_id;
        MOV     A,R1
        MOVX    @DPTR,A
//  148     return ( true );
        MOV     R1,#0x1
        SJMP    ??RegisterForKeys_1
//  149   }
//  150   else
//  151     return ( false );
??RegisterForKeys_0:
        MOV     R1,#0x0
??RegisterForKeys_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  152 }
//  153 
//  154 /*********************************************************************
//  155  * @fn      OnBoard_SendKeys
//  156  *
//  157  * @brief   Send "Key Pressed" message to application.
//  158  *
//  159  * @param   keys  - keys that were pressed
//  160  *          state - shifted
//  161  *
//  162  * @return  status
//  163  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
OnBoard_SendKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function OnBoard_SendKeys
//  165 {
        FUNCALL OnBoard_SendKeys, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OnBoard_SendKeys, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  166   keyChange_t *msgPtr;
//  167 
//  168   if ( registeredKeysTaskID != NO_TASK_ID )
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??OnBoard_SendKeys_0
//  169   {
//  170     // Send the address to the task
//  171     msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  172     if ( msgPtr )
        MOV     A,R2
        JNZ     ??OnBoard_SendKeys_1
        MOV     A,R3
??OnBoard_SendKeys_1:
        JZ      ??OnBoard_SendKeys_2
//  173     {
//  174       msgPtr->hdr.event = KEY_CHANGE;
        MOV     A,#-0x40
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  175       msgPtr->state = state;
        MOV     A,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  176       msgPtr->keys = keys;
        MOV     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  177 
//  178       osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  179     }
//  180     return ( ZSuccess );
??OnBoard_SendKeys_2:
        MOV     R1,#0x0
        SJMP    ??OnBoard_SendKeys_3
//  181   }
//  182   else
//  183     return ( ZFailure );
??OnBoard_SendKeys_0:
        MOV     R1,#0x1
??OnBoard_SendKeys_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  184 }
//  185 
//  186 /*********************************************************************
//  187  * @fn      OnBoard_KeyCallback
//  188  *
//  189  * @brief   Callback service for keys
//  190  *
//  191  * @param   keys  - keys that were pressed
//  192  *          state - shifted
//  193  *
//  194  * @return  void
//  195  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  196 void OnBoard_KeyCallback ( uint8 keys, uint8 state )
OnBoard_KeyCallback:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function OnBoard_KeyCallback
//  197 {
        FUNCALL OnBoard_KeyCallback, OnBoard_SendKeys
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  198   uint8 shift;
//  199   (void)state;
//  200 
//  201   /* Get shift key status */
//  202   shift = (( keys & HAL_KEY_SW_6 ) ? true : false);
//  203 
//  204   if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
        ; Setup parameters for call to function OnBoard_SendKeys
        MOV     A,R1
        MOV     C,0xE0 /* A   */.5
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R2,A
        LCALL   ??OnBoard_SendKeys?relay
//  205   {
//  206     // Process SW1 here
//  207     if ( keys & HAL_KEY_SW1 )  // Switch 1
//  208     {
//  209     }
//  210     // Process SW2 here
//  211     if ( keys & HAL_KEY_SW2 )  // Switch 2
//  212     {
//  213     } 
//  214   }
//  215 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
//  216 
//  217 /*********************************************************************
//  218  * @fn      OnBoard_stack_used
//  219  *
//  220  * @brief   Runs through the stack looking for touched memory.
//  221  *
//  222  * @param   none
//  223  *
//  224  * @return  Maximum number of bytes used by the stack.
//  225  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  226 uint16 OnBoard_stack_used(void)
OnBoard_stack_used:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function OnBoard_stack_used
//  227 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  228   uint8 const *ptr;
//  229   uint8 cnt = 0;
        MOV     R2,#0x0
//  230 
//  231   for (ptr = XSTACK_END; ptr > XSTACK_BEG; ptr--)
        MOV     DPL,#((SFE(XSTACK) + 255) & 0xff)
        MOV     DPH,#(((SFE(XSTACK) - 1) >> 8) & 0xff)
        SJMP    ??OnBoard_stack_used_0
//  232   {
//  233     if (STACK_INIT_VALUE == *ptr)
//  234     {
//  235       if (++cnt >= MIN_RAM_INIT)
//  236       {
//  237         ptr += MIN_RAM_INIT;
//  238         break;
//  239       }
//  240     }
//  241     else
//  242     {
//  243       cnt = 0;
??OnBoard_stack_used_1:
        MOV     R2,#0x0
//  244     }
??OnBoard_stack_used_2:
        MOV     A,DPL
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#-0x1
        MOV     DPH,A
??OnBoard_stack_used_0:
        CLR     C
        MOV     A,#(SFB(XSTACK) & 0xff)
        SUBB    A,DPL
        MOV     A,#((SFB(XSTACK) >> 8) & 0xff)
        SUBB    A,DPH
        JNC     ??OnBoard_stack_used_3
        MOVX    A,@DPTR
        XRL     A,#0xcd
        JNZ     ??OnBoard_stack_used_1
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0xc
        JC      ??OnBoard_stack_used_2
        MOV     A,DPL
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
//  245   }
//  246 
//  247   return (uint16)(XSTACK_END - ptr + 1);
??OnBoard_stack_used_3:
        MOV     A,#((SFE(XSTACK) + 255) & 0xff)
        CLR     C
        SUBB    A,DPL
        MOV     R0,A
        MOV     A,#(((SFE(XSTACK) - 1) >> 8) & 0xff)
        SUBB    A,DPH
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        CFI EndBlock cfiBlock4
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  248 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  249 
//  250 /*********************************************************************
//  251  * @fn      _itoa
//  252  *
//  253  * @brief   convert a 16bit number to ASCII
//  254  *
//  255  * @param   num -
//  256  *          buf -
//  257  *          radix -
//  258  *
//  259  * @return  void
//  260  *
//  261  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  262 void _itoa(uint16 num, uint8 *buf, uint8 radix)
_itoa:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function _itoa
//  263 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  264   char c,i;
//  265   uint8 *p, rst[5];
//  266 
//  267   p = rst;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
//  268   for ( i=0; i<5; i++,p++ )
        MOV     ?V0 + 4,#0x0
        MOV     DPL,R1
        MOV     ?V0 + 2,DPL
//  269   {
//  270     c = num % radix;  // Isolate a digit
??_itoa_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
//  271     *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
        SUBB    A,#0xa
        JNC     ??_itoa_1
        MOV     R0,#0x30
        SJMP    ??_itoa_2
??_itoa_1:
        MOV     R0,#0x37
??_itoa_2:
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  272     num /= radix;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,?V0 + 2
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//  273     if ( !num )
        MOV     A,R6
        JNZ     ??_itoa_3
        MOV     A,R7
??_itoa_3:
        JZ      ??_itoa_4
//  274       break;
//  275   }
        INC     ?V0 + 4
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 4
        SUBB    A,#0x5
        JC      ??_itoa_0
//  276 
//  277   for ( c=0 ; c<=i; c++ )
??_itoa_4:
        MOV     R2,#0x0
//  278     *buf++ = *p--;  // Reverse character order
??_itoa_5:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        INC     R2
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,R2
        JNC     ??_itoa_5
//  279 
//  280   *buf = '\0';
        CLR     A
        MOVX    @DPTR,A
//  281 }
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  282 
//  283 /*********************************************************************
//  284  * @fn        Onboard_rand
//  285  *
//  286  * @brief    Random number generator
//  287  *
//  288  * @param   none
//  289  *
//  290  * @return  uint16 - new random number
//  291  *
//  292  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  293 uint16 Onboard_rand( void )
Onboard_rand:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Onboard_rand
//  294 {
        FUNCALL Onboard_rand, macMcuRandomWord
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  295   return ( MAC_RADIO_RANDOM_WORD() );
        ; Setup parameters for call to function macMcuRandomWord
        LCALL   ??macMcuRandomWord?relay
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock7
//  296 }
//  297 
//  298 /*********************************************************************
//  299  * @fn        Onboard_wait
//  300  *
//  301  * @brief    Delay wait
//  302  *
//  303  * @param   uint16 - time to wait
//  304  *
//  305  * @return  none
//  306  *
//  307  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  308 void Onboard_wait( uint16 timeout )
Onboard_wait:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function Onboard_wait
//  309 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??Onboard_wait_0
//  310   while (timeout--)
//  311   {
//  312     asm("NOP");
??Onboard_wait_1:
        NOP
//  313     asm("NOP");
        NOP
//  314     asm("NOP");
        NOP
//  315   }
??Onboard_wait_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R0
        JNZ     ??Onboard_wait_2
        MOV     A,R1
??Onboard_wait_2:
        JNZ     ??Onboard_wait_1
//  316 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
//  317 
//  318 /*********************************************************************
//  319  *                    EXTERNAL I/O FUNCTIONS
//  320  *
//  321  * User defined functions to control external devices. Add your code
//  322  * to the following functions to control devices wired to DB outputs.
//  323  *
//  324  *********************************************************************/
//  325 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 void BigLight_On( void )
BigLight_On:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function BigLight_On
//  327 {
        ; Saved register size: 0
        ; Auto size: 0
//  328   // Put code here to turn on an external light
//  329 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//  330 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  331 void BigLight_Off( void )
BigLight_Off:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function BigLight_Off
//  332 {
        ; Saved register size: 0
        ; Auto size: 0
//  333   // Put code here to turn off an external light
//  334 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  335 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  336 void BuzzerControl( uint8 on )
BuzzerControl:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function BuzzerControl
//  337 { 
        ; Saved register size: 0
        ; Auto size: 0
//  338   // Put code here to turn a buzzer on/off
//  339   (void)on;
//  340 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
//  341 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  342 void Dimmer( uint8 lvl )
Dimmer:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Dimmer
//  343 {
        ; Saved register size: 0
        ; Auto size: 0
//  344   // Put code here to control a dimmer
//  345   (void)lvl;
//  346 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  347 
//  348 // No dip switches on this board

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  349 uint8 GetUserDipSw( void )
GetUserDipSw:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function GetUserDipSw
//  350 {
        ; Saved register size: 0
        ; Auto size: 0
//  351   return 0;
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock13
//  352 }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for registeredKeysTaskID>`:
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitBoard?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitBoard

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RegisterForKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RegisterForKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OnBoard_SendKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OnBoard_SendKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OnBoard_KeyCallback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OnBoard_KeyCallback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OnBoard_stack_used?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OnBoard_stack_used

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_itoa?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _itoa

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Onboard_rand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Onboard_rand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Onboard_wait?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Onboard_wait

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BigLight_On?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BigLight_On

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BigLight_Off?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BigLight_Off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BuzzerControl?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BuzzerControl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Dimmer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Dimmer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetUserDipSw?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetUserDipSw

        RSEG XSTACK:DATA:REORDER:NOROOT(0)

        END
// 
// 509 bytes in segment BANKED_CODE
//  78 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
//   9 bytes in segment XDATA_Z
// 
// 588 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//  10 bytes of XDATA memory
//
//Errors: none
//Warnings: none
