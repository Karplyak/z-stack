###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                23/Aug/2010  21:56:14 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE      #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Components\stack\zdo\ZDObject.c          #
#    Command line       =  -f "D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE  #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg" #
#                           (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f   #
#                          "D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE     #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg #
#                          " (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR    #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE  #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"   #
#                          (-DZCL_READ -DZCL_WRITE -DZCL_BASIC                #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE "D:\R.D               #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Components\stack\zdo\ZDObject.c" -D      #
#                          CC2530BB -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK   #
#                          -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D    #
#                          xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D           #
#                          HAL_PA_LNA -lC "D:\R.D Dept\程式開發\TI CC2530     #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\RouterBB\List\" -lA    #
#                          "D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE     #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\RouterBB\List\" --diag_suppress       #
#                          Pe001,Pa010 -o "D:\R.D Dept\程式開發\TI CC2530     #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\RouterBB\Obj\" -e      #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\R.D Dept\程式開發\TI   #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\" -I "D:\R.D    #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\SOURCE\" -I "D:\R.D                #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\SOURCE\" -I "D:\R.D             #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I "D:\R.D  #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\..\..\COMPONENTS\MT\" -I     #
#                          "D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE     #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE #
#                          \" -I "D:\R.D Dept\程式開發\TI CC2530              #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\HAL\TARGET\CC2530EB\" -I "D:\R.D               #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CC #
#                          SOC\" -I "D:\R.D Dept\程式開發\TI CC2530           #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\INCLUDE\" -I "D:\R.D Dept\程式開發\TI     #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\STACK\AF\" -I "D:\R.D Dept\程式開發\TI  #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\STACK\NWK\" -I "D:\R.D                  #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\" #
#                           -I "D:\R.D Dept\程式開發\TI CC2530                #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\SAPI\" -I "D:\R.D Dept\程式開發\TI       #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\STACK\SYS\" -I "D:\R.D                  #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZCL\" #
#                           -I "D:\R.D Dept\程式開發\TI CC2530                #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\ZDO\" -I "D:\R.D Dept\程式開發\TI        #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\ZMAC\F8W\" -I "D:\R.D Dept\程式開發\TI  #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\ZMAC\" -I "D:\R.D Dept\程式開發\TI      #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\SERVICES\SADDR\" -I "D:\R.D             #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SD #
#                          ATA\" -I "D:\R.D Dept\程式開發\TI CC2530           #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\INCLUDE\" -I "D:\R.D Dept\程式開發\TI      #
#                          CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0- #
#                          1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Ho #
#                          meAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\HIGH_LEVEL\" -I "D:\R.D             #
#                          Dept\程式開發\TI CC2530 example\ZIGBEE             #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEV #
#                          EL\srf04\" -I "D:\R.D Dept\程式開發\TI CC2530      #
#                          example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutom #
#                          ation\SampleSwitch\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR   #
#                          Systems\Embedded Workbench MCS 51\8051\INC\" -I    #
#                          "C:\IAR Systems\Embedded Workbench MCS             #
#                          51\8051\INC\CLIB\" -Ohz                            #
#    List file          =  D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE      #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\RouterBB\List\ZDObject.lst            #
#    Object file        =  D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE      #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\HomeAutomation\SampleSwi #
#                          tch\CC2530DB\RouterBB\Obj\ZDObject.r51             #
#                                                                             #
#                                                                             #
###############################################################################

D:\R.D Dept\程式開發\TI CC2530 example\ZIGBEE Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2009-12-29 11:40:43 -0800 (Tue, 29 Dec 2009) $
      4            Revision:       $Revision: 21414 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            Should you have any questions regarding your right to use this Software,
     11            contact Texas Instruments Incorporated at www.TI.com.
     12          **************************************************************************************************/
     13          
     14          /*********************************************************************
     15           * INCLUDES
     16           */
     17          #include "ZComdef.h"
     18          #include "OSAL.h"
     19          #include "OSAL_Nv.h"
     20          #include "rtg.h"
     21          #include "NLMEDE.h"
     22          #include "nwk_globals.h"
     23          #include "APS.h"
     24          #include "APSMEDE.h"
     25          #include "AssocList.h"
     26          #include "BindingTable.h"
     27          #include "AddrMgr.h"
     28          #include "AF.h"
     29          #include "ZDObject.h"
     30          #include "ZDProfile.h"
     31          #include "ZDConfig.h"
     32          #include "ZDSecMgr.h"
     33          #include "ZDApp.h"
     34          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     35          #include "ZGlobals.h"
     36          #if defined MT_ZDO_CB_FUNC
     37          #include "MT.h"
     38          #endif
     39          
     40          #if defined( LCD_SUPPORTED )
     41            #include "OnBoard.h"
     42          #endif
     43          
     44          /* HAL */
     45          #include "hal_lcd.h"
     46          
     47          /*********************************************************************
     48           * MACROS
     49           */
     50          
     51          /*********************************************************************
     52           * CONSTANTS
     53           */
     54          // NLME Stub Implementations
     55          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     56          
     57          // Status fields used by ZDO_ProcessMgmtRtgReq
     58          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     59          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     60          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     61          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     62          
     63          /*********************************************************************
     64           * TYPEDEFS
     65           */
     66          #if defined ( REFLECTOR )
     67          typedef struct
     68          {
     69            byte SrcTransSeq;
     70            zAddrType_t SrcAddr;
     71            uint16 LocalCoordinator;
     72            byte epIntf;
     73            uint16 ProfileID;
     74            byte numInClusters;
     75            uint16 *inClusters;
     76            byte numOutClusters;
     77            uint16 *outClusters;
     78            byte SecurityUse;
     79            byte status;
     80          } ZDO_EDBind_t;
     81          #endif // defined ( REFLECTOR )
     82          
     83          enum
     84          {
     85            ZDMATCH_INIT,           // Initialized
     86            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
     87            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
     88          };
     89          
     90          enum
     91          {
     92            ZDMATCH_SENDING_NOT,
     93            ZDMATCH_SENDING_UNBIND,
     94            ZDMATCH_SENDING_BIND
     95          };
     96          
     97          /*********************************************************************
     98           * GLOBAL VARIABLES
     99           */
    100          
    101          /*********************************************************************
    102           * EXTERNAL VARIABLES
    103           */
    104          
    105          /*********************************************************************
    106           * EXTERNAL FUNCTIONS
    107           */
    108          
    109          /*********************************************************************
    110           * LOCAL VARIABLES
    111           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    113          
    114          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    116          #endif
    117          
    118          #if defined ( MANAGED_SCAN )
    119            uint32 managedScanNextChannel = 0;
    120            uint32 managedScanChannelMask = 0;
    121            uint8  managedScanTimesPerChannel = 0;
    122          #endif
    123          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    125          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    127          
    128          #if defined(Coor_receiver)
    129            uint8 cnt = 0;
    130            ZDEndDeviceBind_t dev_sht[5];
    131            ZDEndDeviceBind_t coordinator;
    132          #endif
    133            
    134          /*********************************************************************
    135           * LOCAL FUNCTIONS
    136           */
    137          static void ZDODeviceSetup( void );
    138          #if defined ( MANAGED_SCAN )
    139            static void ZDOManagedScan_Next( void );
    140          #endif
    141          #if defined ( REFLECTOR )
    142            static void ZDO_RemoveEndDeviceBind( void );
    143            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    144          #endif
    145          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    146                                          byte numList2, uint16 *list2, uint16 *pMatches );
    147          static void ZDO_RemoveMatchMemory( void );
    148          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    149          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    150          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    151          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    152          
    153          /*********************************************************************
    154           * @fn          ZDO_Init
    155           * @brief       ZDObject and ZDProfile initialization.
    156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          void ZDO_Init( void )
   \                     ZDO_Init:
    158          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    159            // Initialize ZD items
    160            #if defined ( REFLECTOR )
    161            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    162            #endif
    163          
    164            // Initialize default ZDO_UseExtendedPANID to the APS one.
    165            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#(AIB_apsUseExtendedPANID & 0xff)
   \   00000D   7D..         MOV     R5,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
   \   00000F   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000011   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
    166          
    167            // Setup the device - type of device to create.
    168            ZDODeviceSetup();
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7004         JNZ     ??ZDO_Init_0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8002         SJMP    ??ZDO_Init_1
   \                     ??ZDO_Init_0:
   \   000020   7901         MOV     R1,#0x1
   \                     ??ZDO_Init_1:
   \   000022                ; Setup parameters for call to function APS_ReflectorInit
   \   000022   12....       LCALL   ??APS_ReflectorInit?relay
   \   000025                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000025   12....       LCALL   ??NLME_DeviceJoiningInit?relay
    169          }
   \   000028   02....       LJMP    ?Subroutine169 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    170          
    171          #if defined ( MANAGED_SCAN )
    172          /*********************************************************************
    173           * @fn      ZDOManagedScan_Next()
    174           * @brief   Setup a managed scan.
    175           */
    176          static void ZDOManagedScan_Next( void )
    177          {
    178            // Is it the first time
    179            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    180            {
    181              // Setup the defaults
    182              managedScanNextChannel  = 1;
    183          
    184              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    185                managedScanNextChannel <<= 1;
    186          
    187              managedScanChannelMask = managedScanNextChannel;
    188              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    189            }
    190            else
    191            {
    192              // Do we need to go to the next channel
    193              if ( managedScanTimesPerChannel == 0 )
    194              {
    195                // Find next active channel
    196                managedScanChannelMask  = managedScanNextChannel;
    197                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    198              }
    199              else
    200              {
    201                managedScanTimesPerChannel--;
    202          
    203                if ( managedScanTimesPerChannel == 0 )
    204                {
    205                  managedScanNextChannel  <<= 1;
    206                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    207                    managedScanNextChannel <<= 1;
    208          
    209                  if ( managedScanNextChannel == 0 )
    210                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    211                }
    212              }
    213            }
    214          }
    215          #endif // MANAGED_SCAN
    216          
    217          /*********************************************************************
    218           * @fn      ZDODeviceSetup()
    219           * @brief   Call set functions depending on the type of device compiled.
    220           */
    221          static void ZDODeviceSetup( void )
    222          {
    223            if ( ZG_BUILD_COORDINATOR_TYPE )
    224            {
    225              NLME_CoordinatorInit();
    226            }
    227          
    228          #if defined ( REFLECTOR )
    229            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    230          #endif
    231          
    232            if ( ZG_BUILD_JOINING_TYPE )
    233            {
    234              NLME_DeviceJoiningInit();
    235            }
    236          }
    237          
    238          /*********************************************************************
    239           * @fn          ZDO_StartDevice
    240           * @brief       This function starts a device in a network.
    241           * @param       logicalType     - Device type to start
    242           *              startMode       - indicates mode of device startup
    243           *              beaconOrder     - indicates time betwen beacons
    244           *              superframeOrder - indicates length of active superframe
    245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    247          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    248            ZStatus_t ret;
    249          #if defined ( ZIGBEE_FREQ_AGILITY )
    250            static uint8 discRetries = 0;
    251          #endif
    252          #if defined ( ZIGBEE_COMMISSIONING )
    253            static uint8 scanCnt = 0;
    254          #endif
    255          
    256            ret = ZUnsupportedMode;
    257          
    258            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    259            {
    260              if ( startMode == MODE_HARD )
    261              {
    262                devState = DEV_COORD_STARTING;
    263                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    264                                                    zgDefaultStartingScanDuration, beaconOrder,
    265                                                    superframeOrder, false );
    266              }
    267              else if ( startMode == MODE_RESUME )
    268              {
    269                // Just start the coordinator
    270                devState = DEV_COORD_STARTING;
    271                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    272              }
    273              else
    274              {
    275          #if defined( LCD_SUPPORTED )
    276                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    277          #endif
    278              }
    279            }
    280          
    281            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000A   7401         MOV     A,#0x1
   \   00000C   69           XRL     A,R1
   \   00000D   6005         JZ      ??ZDO_StartDevice_0
   \   00000F   7402         MOV     A,#0x2
   \   000011   69           XRL     A,R1
   \   000012   7074         JNZ     ??ZDO_StartDevice_1
    282            {
    283              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   000014   EA           MOV     A,R2
   \   000015   6005         JZ      ??ZDO_StartDevice_2
   \   000017   7403         MOV     A,#0x3
   \   000019   6A           XRL     A,R2
   \   00001A   7015         JNZ     ??ZDO_StartDevice_3
    284              {
    285                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?Subroutine25 & 0xFFFF
    286          
    287            #if defined( MANAGED_SCAN )
    288                ZDOManagedScan_Next();
    289                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    290            #else
    291                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    292              #if defined ( ZIGBEE_FREQ_AGILITY )
    293                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    294                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    295                {
    296                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    297                  // change will not be recieved. On these devices or routers that have
    298                  // lost the network, an active scan shall be conducted on the Default
    299                  // Channel list using the extended PANID to find the network. If the
    300                  // extended PANID isn't found using the Default Channel list, an scan
    301                  // should be completed using all channels.
    302                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    303                }
    304              #endif // ZIGBEE_FREQ_AGILITY
    305              #if defined ( ZIGBEE_COMMISSIONING )
    306                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    307                {
    308                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    309                  // application specific means, the device shall conduct an active scan
    310                  // on the Default Channel list and join the PAN with the same
    311                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    312                  // on all channels.
    313                  // When devices rejoin the network and the PAN is not found from
    314                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    315                }
    316              #endif // ZIGBEE_COMMISSIONING
    317            #endif
    318              }
   \                     ??CrossCallReturnLabel_49:
   \   000021   12....       LCALL   ?L_MOV_X
   \   000024   AA..         MOV     R2,?V0 + 0
   \   000026   AB..         MOV     R3,?V0 + 1
   \   000028   AC..         MOV     R4,?V0 + 2
   \   00002A   AD..         MOV     R5,?V0 + 3
   \   00002C   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \   00002F   8052         SJMP    ??ZDO_StartDevice_4
    319              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   000031   7401         MOV     A,#0x1
   \   000033   6A           XRL     A,R2
   \   000034   7052         JNZ     ??ZDO_StartDevice_1
    320              {
    321                if ( logicalType == NODETYPE_ROUTER )
   \   000036   7401         MOV     A,#0x1
   \   000038   69           XRL     A,R1
   \   000039   7035         JNZ     ??ZDO_StartDevice_5
    322                {
    323                  ZMacScanCnf_t scanCnf;
    324                  devState = DEV_NWK_ORPHAN;
   \   00003B   740A         MOV     A,#0xa
   \   00003D   90....       MOV     DPTR,#devState
   \   000040   F0           MOVX    @DPTR,A
    325          
    326                  /* if router and nvram is available, fake successful orphan scan */
    327                  scanCnf.hdr.Status = ZSUCCESS;
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    328                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7403         MOV     A,#0x3
   \   00004F   F0           MOVX    @DPTR,A
    329                  scanCnf.UnscannedChannels = 0;
   \   000050   90....       MOV     DPTR,#__Constant_0
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?L_MOV_X
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?L_MOV_TO_X
    330                  scanCnf.ResultListSize = 0;
   \   000062   7408         MOV     A,#0x8
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   E4           CLR     A
   \   000068   12....       LCALL   ?Subroutine12 & 0xFFFF
    331                  nwk_ScanJoiningOrphan(&scanCnf);
   \                     ??CrossCallReturnLabel_236:
   \   00006B   12....       LCALL   ??nwk_ScanJoiningOrphan?relay
    332          
    333                  ret = ZSuccess;
   \   00006E   8028         SJMP    ??ZDO_StartDevice_6
    334                }
    335                else
    336                {
    337                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_5:
   \   000070   740A         MOV     A,#0xa
   \   000072   12....       LCALL   ?Subroutine25 & 0xFFFF
    338                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    339                                                zgDefaultStartingScanDuration );
    340                }
    341              }
    342              else
    343              {
    344          #if defined( LCD_SUPPORTED )
    345                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    346          #endif
    347              }
    348            }
   \                     ??CrossCallReturnLabel_50:
   \   000075   12....       LCALL   ?L_MOV_X
   \   000078   AA..         MOV     R2,?V0 + 0
   \   00007A   AB..         MOV     R3,?V0 + 1
   \   00007C   AC..         MOV     R4,?V0 + 2
   \   00007E   AD..         MOV     R5,?V0 + 3
   \   000080   12....       LCALL   ??NLME_OrphanJoinRequest?relay
   \                     ??ZDO_StartDevice_4:
   \   000083   E9           MOV     A,R1
   \   000084   FA           MOV     R2,A
    349          
    350            if ( ret != ZSuccess )
   \   000085   EA           MOV     A,R2
   \   000086   6010         JZ      ??ZDO_StartDevice_6
    351              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   000088                ; Setup parameters for call to function osal_start_timerEx
   \   000088   7CE8         MOV     R4,#-0x18
   \   00008A   7D03         MOV     R5,#0x3
   \   00008C   7A01         MOV     R2,#0x1
   \   00008E   7B00         MOV     R3,#0x0
   \   000090   90....       MOV     DPTR,#ZDAppTaskID
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   12....       LCALL   ??osal_start_timerEx?relay
    352          }
   \                     ??ZDO_StartDevice_6:
   \   000098   740B         MOV     A,#0xb
   \   00009A   02....       LJMP    ?Subroutine170 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000004                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000004   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#zgDefaultChannelList
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine194_0
   \   000003                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000001                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ?Subroutine180
   \   000007                ; // Fall through to label ?Subroutine180

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   22           RET
    353          
    354          /**************************************************************************************************
    355           * @fn          zdoSendStateChangeMsg
    356           * @brief       Helper function for ZDO_UpdateNwkStatus.
    357           * input parameters
    358           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    359           * @param       state - The current device state.
    360           **************************************************************************************************
    361           */
    362          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    363          {
    364            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    365          
    366            if (NULL == pMsg)
    367            {
    368              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    369              {
    370                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    371                // try again later when more Heap may be available.
    372                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    373              }
    374              else
    375              {
    376                pMsg->event = ZDO_STATE_CHANGE;
    377                pMsg->status = state;
    378          
    379                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    380              }
    381            }
    382            else
    383            {
    384              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    385              pMsg->status = state;
    386            }
    387          }
    388          
    389          /**************************************************************************************************
    390           * @fn          ZDO_UpdateNwkStatus
    391           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    392           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    393           *              than one registered EndPoint, it will only receive one notification per state
    394           *              change. Although the device may go through a sequence of state changes, the
    395           *              Application task may only receive notification of the final, steady-state state
    396           *              because it has the lowest priority and never even runs to receive the intermediate
    397           *              state change notifications.
    398           * input parameters
    399           * @param       state - The current device state.
    400           **************************************************************************************************
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    403          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
    404            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   8014         SJMP    ??CrossCallReturnLabel_142
    405          
    406            while (pItem != NULL)
    407            {
    408              if (pItem->epDesc->endPoint != ZDO_EP)
    409              {
    410                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   F0           MOVX    @DPTR,A
    411              }
    412          
    413              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000024   FF           MOV     R7,A
   \   000025   EE           MOV     A,R6
   \   000026   7001         JNZ     ??ZDO_UpdateNwkStatus_2
   \   000028   EF           MOV     A,R7
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000029   604D         JZ      ??ZDO_UpdateNwkStatus_3
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   60DF         JZ      ??ZDO_UpdateNwkStatus_1
   \   000039   A3           INC     DPTR
   \   00003A   12....       LCALL   ??Subroutine215_0 & 0xFFFF
    414            }
   \                     ??CrossCallReturnLabel_326:
   \   00003D   F5..         MOV     ?V0 + 1,A
   \   00003F                ; Setup parameters for call to function osal_msg_find
   \   00003F   7AD1         MOV     R2,#-0x2f
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_find?relay
   \   000045   EA           MOV     A,R2
   \   000046   7001         JNZ     ??ZDO_UpdateNwkStatus_4
   \   000048   EB           MOV     A,R3
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000049   70C5         JNZ     ??ZDO_UpdateNwkStatus_0
   \   00004B                ; Setup parameters for call to function osal_msg_allocate
   \   00004B   7A02         MOV     R2,#0x2
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??osal_msg_allocate?relay
   \   000052   EA           MOV     A,R2
   \   000053   7001         JNZ     ??ZDO_UpdateNwkStatus_5
   \   000055   EB           MOV     A,R3
   \                     ??ZDO_UpdateNwkStatus_5:
   \   000056   700E         JNZ     ??ZDO_UpdateNwkStatus_6
   \   000058                ; Setup parameters for call to function osal_set_event
   \   000058   7A10         MOV     R2,#0x10
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   90....       MOV     DPTR,#ZDAppTaskID
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??osal_set_event?relay
   \   000064   80B2         SJMP    ??ZDO_UpdateNwkStatus_1
   \                     ??ZDO_UpdateNwkStatus_6:
   \   000066   74D1         MOV     A,#-0x2f
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E5..         MOV     A,?V0 + 0
   \   000070   F0           MOVX    @DPTR,A
   \   000071                ; Setup parameters for call to function osal_msg_send
   \   000071   A9..         MOV     R1,?V0 + 1
   \   000073   12....       LCALL   ??osal_msg_send?relay
   \   000076   80A0         SJMP    ??ZDO_UpdateNwkStatus_1
    415          #if defined MT_ZDO_CB_FUNC
    416            zdoSendStateChangeMsg(state, MT_TaskID);
    417          #endif
    418          
    419            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000078                ; Setup parameters for call to function NLME_GetShortAddr
   \   000078   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00007B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00007E   12....       LCALL   ?Subroutine22 & 0xFFFF
    420            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_34:
   \   000081                ; Setup parameters for call to function NLME_GetExtAddr
   \   000081   12....       LCALL   ??NLME_GetExtAddr?relay
    421          }
   \   000084   80..         SJMP    ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine216_0
   \   000001                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000003   E8           MOV     A,R0
   \   000004   FE           MOV     R6,A
   \   000005   E9           MOV     A,R1
   \   000006   22           RET
    422          
    423          #if defined ( REFLECTOR )
    424          /*********************************************************************
    425           * @fn          ZDO_RemoveEndDeviceBind
    426           * @brief       Remove the end device bind
    427           */
    428          static void ZDO_RemoveEndDeviceBind( void )
    429          {
    430            if ( ZDO_EDBind != NULL )
    431            {
    432              // Free the RAM
    433              if ( ZDO_EDBind->inClusters != NULL )
    434                osal_mem_free( ZDO_EDBind->inClusters );
    435              if ( ZDO_EDBind->outClusters != NULL )
    436                osal_mem_free( ZDO_EDBind->outClusters );
    437              osal_mem_free( ZDO_EDBind );
    438              ZDO_EDBind = NULL;
    439            }
    440          }
    441          #endif // REFLECTOR
    442          
    443          #if defined ( REFLECTOR )
    444          /*********************************************************************
    445           * @fn          ZDO_RemoveEndDeviceBind
    446           * @brief       Remove the end device bind
    447           */
    448          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    449          {
    450            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    451          
    452          #if defined( LCD_SUPPORTED )
    453            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    454            if ( Status == ZDP_SUCCESS )
    455              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    456            else
    457              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    458          #endif
    459          
    460          }
    461          #endif // REFLECTOR
    462          
    463          /*********************************************************************
    464           * @fn          ZDO_CompareClusterLists
    465           * @brief       Compare one list to another list
    466           * @param       numList1 - number of items in list 1, list1 - first list of cluster IDs 
    467           *              numList2 - number of items in list 2, list2 - second list of cluster IDs
    468           *              pMatches - buffer to put matches
    469           * @return      number of matches
    470           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    471          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    472                                    byte numList2, uint16 *list2, uint16 *pMatches )
    473          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
   \   000007   8C..         MOV     ?V0 + 2,R4
   \   000009   740F         MOV     A,#0xf
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000011   7411         MOV     A,#0x11
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine72 & 0xFFFF
    474            byte x, y;
    475            uint16 z;
    476            byte numMatches = 0;
   \                     ??CrossCallReturnLabel_118:
   \   000019   75..00       MOV     ?V0 + 0,#0x0
    477          
    478            // Check the first in against the seconds out
    479            for ( x = 0; x < numList1; x++ )
   \   00001C   75..00       MOV     ?V0 + 6,#0x0
   \   00001F   804A         SJMP    ??ZDO_CompareClusterLists_0
    480            {
    481              for ( y = 0; y < numList2; y++ )
    482              {
    483                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000021   E5..         MOV     A,?V0 + 3
   \   000023   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 5,A
    484                if ( list1[x] == z )
   \   00002C   E5..         MOV     A,?V0 + 6
   \   00002E   C3           CLR     C
   \   00002F   33           RLC     A
   \   000030   FE           MOV     R6,A
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   FF           MOV     R7,A
   \   000034   EA           MOV     A,R2
   \   000035   2E           ADD     A,R6
   \   000036   F582         MOV     DPL,A
   \   000038   EB           MOV     A,R3
   \   000039   3F           ADDC    A,R7
   \   00003A   F583         MOV     DPH,A
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   65..         XRL     A,?V0 + 4
   \   00003F   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V0 + 5
   \                     ??ZDO_CompareClusterLists_2:
   \   000045   7019         JNZ     ??ZDO_CompareClusterLists_3
    485                  pMatches[numMatches++] = z;
   \   000047   E5..         MOV     A,?V0 + 0
   \   000049   C3           CLR     C
   \   00004A   33           RLC     A
   \   00004B   FE           MOV     R6,A
   \   00004C   E4           CLR     A
   \   00004D   33           RLC     A
   \   00004E   FF           MOV     R7,A
   \   00004F   EC           MOV     A,R4
   \   000050   2E           ADD     A,R6
   \   000051   F582         MOV     DPL,A
   \   000053   ED           MOV     A,R5
   \   000054   3F           ADDC    A,R7
   \   000055   F583         MOV     DPH,A
   \   000057   E5..         MOV     A,?V0 + 4
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E5..         MOV     A,?V0 + 5
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   05..         INC     ?V0 + 0
    486              }
   \                     ??ZDO_CompareClusterLists_3:
   \   000060   05..         INC     ?V0 + 3
   \                     ??ZDO_CompareClusterLists_4:
   \   000062   E5..         MOV     A,?V0 + 3
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V0 + 2
   \   000067   40B8         JC      ??ZDO_CompareClusterLists_1
   \   000069   05..         INC     ?V0 + 6
   \                     ??ZDO_CompareClusterLists_0:
   \   00006B   E5..         MOV     A,?V0 + 6
   \   00006D   C3           CLR     C
   \   00006E   95..         SUBB    A,?V0 + 1
   \   000070   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000072   75..00       MOV     ?V0 + 3,#0x0
   \   000075   80EB         SJMP    ??ZDO_CompareClusterLists_4
    487            }
    488          
    489            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000077   A9..         MOV     R1,?V0 + 0
   \   000079   02....       LJMP    ??Subroutine217_0 & 0xFFFF
    490          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FE           MOV     R6,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FF           MOV     R7,A
   \   000006   E8           MOV     A,R0
   \   000007   2E           ADD     A,R6
   \   000008   F582         MOV     DPL,A
   \   00000A   E9           MOV     A,R1
   \   00000B   3F           ADDC    A,R7
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    491          
    492          /*********************************************************************
    493           * Utility functions
    494           */
    495          
    496          /*********************************************************************
    497           * @fn          ZDO_CompareByteLists
    498           * @brief       Compares two lists for matches.
    499           * @param       ACnt  - number of entries in list A, AList  - List A     
    500           * @param       BCnt  - number of entries in list B, BList  - List B    
    501           * @return      true if a match is found
    502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    504          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   \   000007   740C         MOV     A,#0xc
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine209_0 & 0xFFFF
    505            byte x, y;
    506          
    507            for ( x = 0; x < ACnt; x++ )
   \                     ??CrossCallReturnLabel_304:
   \   00000F   75..00       MOV     ?V0 + 3,#0x0
   \   000012   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000014   05..         INC     ?V0 + 3
   \                     ??ZDO_AnyClusterMatches_0:
   \   000016   E5..         MOV     A,?V0 + 3
   \   000018   C3           CLR     C
   \   000019   9D           SUBB    A,R5
   \   00001A   5035         JNC     ??ZDO_AnyClusterMatches_2
    508            {
    509              for ( y = 0; y < BCnt; y++ )
   \   00001C   75..00       MOV     ?V0 + 2,#0x0
   \   00001F   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000021   05..         INC     ?V0 + 2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000023   E5..         MOV     A,?V0 + 2
   \   000025   C3           CLR     C
   \   000026   9C           SUBB    A,R4
   \   000027   50EB         JNC     ??ZDO_AnyClusterMatches_1
    510              {
    511                if ( AList[x] == BList[y] )
   \   000029   E5..         MOV     A,?V0 + 3
   \   00002B   C3           CLR     C
   \   00002C   33           RLC     A
   \   00002D   FE           MOV     R6,A
   \   00002E   E4           CLR     A
   \   00002F   33           RLC     A
   \   000030   FF           MOV     R7,A
   \   000031   EA           MOV     A,R2
   \   000032   2E           ADD     A,R6
   \   000033   F582         MOV     DPL,A
   \   000035   EB           MOV     A,R3
   \   000036   3F           ADDC    A,R7
   \   000037   F583         MOV     DPH,A
   \   000039   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00003C   F5..         MOV     ?V0 + 1,A
   \   00003E   E5..         MOV     A,?V0 + 2
   \   000040   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000043   65..         XRL     A,?V0 + 0
   \   000045   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0 + 1
   \                     ??ZDO_AnyClusterMatches_5:
   \   00004B   70D4         JNZ     ??ZDO_AnyClusterMatches_4
    512                {
    513                  return true;
   \   00004D   7901         MOV     R1,#0x1
   \   00004F   8002         SJMP    ??ZDO_AnyClusterMatches_6
    514                }
    515              }
    516            }
    517          
    518            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000051   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000053   02....       LJMP    ??Subroutine194_0 & 0xFFFF
    519          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    520          
    521          /*********************************************************************
    522           * Callback functions from ZDProfile
    523           */
    524          
    525          /*********************************************************************
    526           * @fn          ZDO_ProcessNodeDescReq
    527           * @brief       This function processes and responds to the
    528           *              Node_Desc_req message.
    529           * @param       inMsg - incoming message
    530           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    531          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    532          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine49 & 0xFFFF
    533            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    534            NodeDescriptorFormat_t *desc = NULL;
    535          
    536            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_92:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    537            {
    538              desc = &ZDO_Config_Node_Descriptor;
    539            }
    540          
    541            if ( desc != NULL )
    542            {
    543              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#(ZDO_Config_Node_Descriptor & 0xff)
   \   000012   75....       MOV     ?V0 + 1,#((ZDO_Config_Node_Descriptor >> 8) & 0xff)
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_NodeDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessNodeDescReq_2
    544            }
    545            else
    546            {
    547              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    548                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine45 & 0xFFFF
    549            }
   \                     ??CrossCallReturnLabel_88:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    550          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP    ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000007   FC           MOV     R4,A
   \   000008   E9           MOV     A,R1
   \   000009   FD           MOV     R5,A
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6C           XRL     A,R4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000006   FD           MOV     R5,A
   \   000007   7C80         MOV     R4,#-0x80
   \   000009   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00000C   EE           MOV     A,R6
   \   00000D   240F         ADD     A,#0xf
   \   00000F   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000016   7404         MOV     A,#0x4
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000009                REQUIRE ?Subroutine173
   \   000009                REQUIRE ??Subroutine203_0
   \   000009                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ?Subroutine173
   \   000001                ; // Fall through to label ?Subroutine173

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ?Subroutine174
   \   000004                REQUIRE ??Subroutine204_0
   \   000004                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003                REQUIRE ?Subroutine174
   \   000003                ; // Fall through to label ?Subroutine174

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   F9           MOV     R1,A
   \   000001                REQUIRE ??Subroutine205_0
   \   000001                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine228_0
   \   000003                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    551          
    552          /*********************************************************************
    553           * @fn          ZDO_ProcessPowerDescReq
    554           * @brief       This function processes and responds to the
    555           *              Node_Power_req message.
    556           * @param       inMsg  - incoming request
    557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    558          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    559          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine49 & 0xFFFF
    560            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    561            NodePowerDescriptorFormat_t *desc = NULL;
    562          
    563            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_93:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    564            {
    565              desc = &ZDO_Config_Power_Descriptor;
    566            }
    567          
    568            if ( desc != NULL )
    569            {
    570              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#(ZDO_Config_Power_Descriptor & 0xff)
   \   000012   75....       MOV     ?V0 + 1,#((ZDO_Config_Power_Descriptor >> 8) & 0xff)
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_PowerDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessPowerDescReq_2
    571            }
    572            else
    573            {
    574              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    575                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0 + 0,#0x3
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine45 & 0xFFFF
    576            }
   \                     ??CrossCallReturnLabel_89:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    577          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP    ??Subroutine196_0
    578          
    579          /*********************************************************************
    580           * @fn          ZDO_ProcessSimpleDescReq
    581           * @brief       This function processes and responds to the
    582           *              Simple_Desc_req message.
    583           * @param       inMsg - incoming message (request)
    584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine195_0
   \   000002                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine196_0
   \   000003                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    585          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    586          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    587            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    588            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00001B   FA           MOV     R2,A
    589            byte endPoint = inMsg->asdu[2];
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
    590            byte free = false;
   \   000024   75..00       MOV     ?V0 + 0,#0x0
    591            byte stat = ZDP_SUCCESS;
   \   000027   75..00       MOV     ?V0 + 1,#0x0
    592          
    593            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002A   6004         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   00002C   94F1         SUBB    A,#-0xf
   \   00002E   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    594            {
    595              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000030   75..82       MOV     ?V0 + 1,#-0x7e
   \   000033   8031         SJMP    ??ZDO_ProcessSimpleDescReq_2
    596            }
    597            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000035   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6A           XRL     A,R2
   \   00003A   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   00003F   7022         JNZ     ??ZDO_ProcessSimpleDescReq_4
    598            {
    599              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000041                ; Setup parameters for call to function afFindSimpleDesc
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   AA82         MOV     R2,DPL
   \   000049   AB83         MOV     R3,DPH
   \   00004B   12....       LCALL   ??afFindSimpleDesc?relay
   \   00004E   E9           MOV     A,R1
   \   00004F   F5..         MOV     ?V0 + 0,A
    600              if ( sDesc == NULL )
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   E0           MOVX    A,@DPTR
   \   000058   7002         JNZ     ??ZDO_ProcessSimpleDescReq_5
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   00005C   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    601              {
    602                stat = ZDP_NOT_ACTIVE;
   \   00005E   75..83       MOV     ?V0 + 1,#-0x7d
   \   000061   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    603              }
    604            }
    605            else
    606            {
    607              if ( ZSTACK_ROUTER_BUILD )
    608              {
    609                stat = ZDP_DEVICE_NOT_FOUND;
    610              }
    611              else if ( ZSTACK_END_DEVICE_BUILD )
    612              {
    613                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000063   75..80       MOV     ?V0 + 1,#-0x80
    614              }
    615            }
    616          
    617            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000066                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00006F   A9..         MOV     R1,?V0 + 1
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   ??ZDP_SimpleDescMsg?relay
    618          
    619            if ( free && sDesc )
   \   000078   E5..         MOV     A,?V0 + 0
   \   00007A   6016         JZ      ??CrossCallReturnLabel_96
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   7002         JNZ     ??ZDO_ProcessSimpleDescReq_6
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000087   6009         JZ      ??CrossCallReturnLabel_96
    620            {
    621              osal_mem_free( sDesc );
   \   000089                ; Setup parameters for call to function osal_mem_free
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   12....       LCALL   ?Subroutine57 & 0xFFFF
    622            }
    623          }
   \                     ??CrossCallReturnLabel_96:
   \   000092   02....       LJMP    ?Subroutine185 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000003   12....       LCALL   ??osal_mem_free?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000006   FC           MOV     R4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FB           MOV     R3,A
   \   00000A   E4           CLR     A
   \   00000B   2C           ADD     A,R4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    624          
    625          /*********************************************************************
    626           * @fn          ZDO_ProcessActiveEPReq
    627           * @brief       This function processes and responds to the
    628           *              Active_EP_req message.
    629           * @param       inMsg  - incoming message (request)
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    632          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    633            byte cnt = 0;
   \   000009   75..00       MOV     ?V0 + 2,#0x0
    634            uint16 aoi;
    635            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
    636          
    637            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   E9           MOV     A,R1
   \   000015   F5..         MOV     ?V0 + 1,A
    638          
    639            if ( aoi == NLME_GetShortAddr() )
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001A   EA           MOV     A,R2
   \   00001B   65..         XRL     A,?V0 + 0
   \   00001D   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   00001F   EB           MOV     A,R3
   \   000020   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000022   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    640            {
    641              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000024                ; Setup parameters for call to function afNumEndPoints
   \   000024   12....       LCALL   ??afNumEndPoints?relay
   \   000027   E9           MOV     A,R1
   \   000028   14           DEC     A
   \   000029   F5..         MOV     ?V0 + 2,A
    642              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002B                ; Setup parameters for call to function afEndPoints
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   7A..         MOV     R2,#(ZDOBuildBuf & 0xff)
   \   00002F   7B..         MOV     R3,#((ZDOBuildBuf >> 8) & 0xff)
   \   000031   12....       LCALL   ??afEndPoints?relay
   \   000034   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    643            }
    644            else
    645            {
    646              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000036   75..80       MOV     ?V0 + 3,#-0x80
    647            }
    648          
    649            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    650                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000039                ; Setup parameters for call to function ZDP_EPRsp
   \   000039   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00003C   F5..         MOV     ?V0 + 4,A
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   75....       MOV     ?V0 + 4,#(ZDOBuildBuf & 0xff)
   \   000046   75....       MOV     ?V0 + 5,#((ZDOBuildBuf >> 8) & 0xff)
   \   000049   78..         MOV     R0,#?V0 + 4
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   78..         MOV     R0,#?V0 + 2
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   E5..         MOV     A,?V0 + 3
   \   00005A   F5..         MOV     ?V0 + 0,A
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000064   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000067   7A05         MOV     R2,#0x5
   \   000069   7B80         MOV     R3,#-0x80
   \   00006B   12....       LCALL   ??ZDP_EPRsp?relay
   \   00006E   7407         MOV     A,#0x7
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    651          }
   \   000073                REQUIRE ?Subroutine186
   \   000073                ; // Fall through to label ?Subroutine186

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   EF           MOV     A,R7
   \   000004                REQUIRE ??Subroutine197_0
   \   000004                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine198_0
   \   000001                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine227_0
   \   000006                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET
    652          
    653          /*********************************************************************
    654           * @fn          ZDO_ConvertOTAClusters
    655           * @brief       This function will convert the over-the-air cluster list
    656           *              format to an internal format.
    657           * @param       inMsg  - incoming message (request)
    658           * @return      pointer to incremented inBuf
    659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    661          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    662            uint8 x;
    663          
    664            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   8027         SJMP    ??ZDO_ConvertOTAClusters_0
    665            {
    666              // convert ota format to internal
    667              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000012   F9           MOV     R1,A
   \   000013   E4           CLR     A
   \   000014   25..         ADD     A,?V0 + 0
   \   000016   E9           MOV     A,R1
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   EF           MOV     A,R7
   \   00001A   33           RLC     A
   \   00001B   F8           MOV     R0,A
   \   00001C   E4           CLR     A
   \   00001D   33           RLC     A
   \   00001E   F9           MOV     R1,A
   \   00001F   EC           MOV     A,R4
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   ED           MOV     A,R5
   \   000024   39           ADDC    A,R1
   \   000025   F583         MOV     DPH,A
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?V0 + 1
   \   00002D   F0           MOVX    @DPTR,A
    668              inBuf += sizeof( uint16 );
   \   00002E   12....       LCALL   ?Subroutine111 & 0xFFFF
    669            }
   \                     ??CrossCallReturnLabel_168:
   \   000031   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000032   EF           MOV     A,R7
   \   000033   C3           CLR     C
   \   000034   9E           SUBB    A,R6
   \   000035   40D4         JC      ??ZDO_ConvertOTAClusters_1
    670            return ( inBuf );
   \   000037   7F03         MOV     R7,#0x3
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
    671          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
    672          
    673          /*********************************************************************
    674           * @fn          ZDO_ProcessMatchDescReq
    675           * @brief       This function processes and responds to the
    676           *              Match_Desc_req message.
    677           * @param       inMsg  - incoming message (request)
    678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    679          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    680          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   12....       LCALL   ?Subroutine22 & 0xFFFF
    681            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_35:
   \   000013   75..00       MOV     ?V0 + 7,#0x0
    682            uint8 numInClusters;
    683            uint16 *inClusters = NULL;
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    684            uint8 numOutClusters;
    685            uint16 *outClusters = NULL;
   \   00001F   F5..         MOV     ?V0 + 14,A
   \   000021   F5..         MOV     ?V0 + 15,A
    686            epList_t *epDesc;
    687            SimpleDescriptionFormat_t *sDesc = NULL;
    688            uint8 allocated;
    689            uint8 *msg;
    690            uint16 aoi;
    691            uint16 profileID;
    692          
    693            // Parse the incoming message
    694            msg = inMsg->asdu;
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   2413         ADD     A,#0x13
   \   00002C   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00002F   12....       LCALL   ?Subroutine59 & 0xFFFF
    695            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_100:
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   E9           MOV     A,R1
   \   000035   F5..         MOV     ?V0 + 1,A
    696            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000037   85..82       MOV     DPL,?V0 + 2
   \   00003A   85..83       MOV     DPH,?V0 + 3
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   EA           MOV     A,R2
   \   000046   FE           MOV     R6,A
   \   000047   E9           MOV     A,R1
   \   000048   FF           MOV     R7,A
    697            msg += 4;
   \   000049   E5..         MOV     A,?V0 + 2
   \   00004B   2404         ADD     A,#0x4
   \   00004D   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000050                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000050   AA..         MOV     R2,?V0 + 0
   \   000052   AB..         MOV     R3,?V0 + 1
    698          
    699            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000054   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000057   E9           MOV     A,R1
   \   000058   6401         XRL     A,#0x1
   \   00005A   7038         JNZ     ??ZDO_ProcessMatchDescReq_0
    700            {
    701              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    702                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   00005C                ; Setup parameters for call to function ZDP_EPRsp
   \   00005C   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   75..00       MOV     ?V0 + 0,#0x0
   \   000065   75..00       MOV     ?V0 + 1,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000075   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000078   75..80       MOV     ?V0 + 0,#-0x80
   \   00007B   78..         MOV     R0,#?V0 + 0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   7407         MOV     A,#0x7
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
    703              return;
   \   000091   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    704            }
    705            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000094                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000094   AA..         MOV     R2,?V0 + 0
   \   000096   AB..         MOV     R3,?V0 + 1
   \   000098   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00009B   E9           MOV     A,R1
   \   00009C   700E         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   00009E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   65..         XRL     A,?V0 + 0
   \   0000A4   7004         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000AA   70B0         JNZ     ??ZDO_ProcessMatchDescReq_1
    706            {
    707              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    708                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    709              return;
    710            }
    711          
    712            if ((numInClusters = *msg++) &&
    713                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0000AC   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   0000AF   8A..         MOV     ?V0 + 1,R2
   \   0000B1   6034         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000B3                ; Setup parameters for call to function osal_mem_alloc
   \   0000B3   C3           CLR     C
   \   0000B4   33           RLC     A
   \   0000B5   FA           MOV     R2,A
   \   0000B6   E4           CLR     A
   \   0000B7   33           RLC     A
   \   0000B8   FB           MOV     R3,A
   \   0000B9   12....       LCALL   ??osal_mem_alloc?relay
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000C4   7402         MOV     A,#0x2
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   7002         JNZ     ??ZDO_ProcessMatchDescReq_6
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000CE   6017         JZ      ??ZDO_ProcessMatchDescReq_5
    714            {
    715              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000D0                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000D0   7402         MOV     A,#0x2
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   12....       LCALL   ?Subroutine72 & 0xFFFF
    716            }
   \                     ??CrossCallReturnLabel_120:
   \   0000D8   AA..         MOV     R2,?V0 + 2
   \   0000DA   AB..         MOV     R3,?V0 + 3
   \   0000DC   A9..         MOV     R1,?V0 + 1
   \   0000DE   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000E1   8A..         MOV     ?V0 + 2,R2
   \   0000E3   8B..         MOV     ?V0 + 3,R3
   \   0000E5   8003         SJMP    ??ZDO_ProcessMatchDescReq_7
    717            else
    718            {
    719              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000E7   75..00       MOV     ?V0 + 1,#0x0
    720            }
    721          
    722            if ((numOutClusters = *msg++) &&
    723                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   0000EA   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   0000ED   8A..         MOV     ?V0 + 0,R2
   \   0000EF   601C         JZ      ??ZDO_ProcessMatchDescReq_8
   \   0000F1                ; Setup parameters for call to function osal_mem_alloc
   \   0000F1   C3           CLR     C
   \   0000F2   33           RLC     A
   \   0000F3   FA           MOV     R2,A
   \   0000F4   E4           CLR     A
   \   0000F5   33           RLC     A
   \   0000F6   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000F9   7001         JNZ     ??ZDO_ProcessMatchDescReq_9
   \   0000FB   EB           MOV     A,R3
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0000FC   600F         JZ      ??ZDO_ProcessMatchDescReq_8
    724            {
    725              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   0000FE                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000FE   AC..         MOV     R4,?V0 + 14
   \   000100   AD..         MOV     R5,?V0 + 15
   \   000102   AA..         MOV     R2,?V0 + 2
   \   000104   AB..         MOV     R3,?V0 + 3
   \   000106   A9..         MOV     R1,?V0 + 0
   \   000108   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   00010B   8003         SJMP    ??ZDO_ProcessMatchDescReq_10
    726            }
    727            else
    728            {
    729              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00010D   75..00       MOV     ?V0 + 0,#0x0
    730            }
    731          
    732            // First count the number of endpoints that match.
    733            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000110   90....       MOV     DPTR,#epList
   \   000113   804A         SJMP    ??ZDO_ProcessMatchDescReq_11
    734            while ( epDesc )
    735            {
    736              // Don't search endpoint 0 and check if response is allowed
    737              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    738              {
    739                if ( epDesc->pfnDescCB )
    740                {
    741                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    742                  allocated = TRUE;
    743                }
    744                else
    745                {
    746                  sDesc = epDesc->epDesc->simpleDesc;
    747                  allocated = FALSE;
    748                }
    749          
    750                if ( sDesc && sDesc->AppProfId == profileID )
    751                {
    752                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    753          
    754                  // If there are no search input/ouput clusters - respond
    755                  if ( ((numInClusters == 0) && (numOutClusters == 0))
    756                      // Are there matching input clusters?
    757                       || (ZDO_AnyClusterMatches( numInClusters, inClusters,
    758                            sDesc->AppNumInClusters, sDesc->pAppInClusterList ))
    759                      // Are there matching output clusters?
    760                       || (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    761                            sDesc->AppNumOutClusters, sDesc->pAppOutClusterList ))     )
    762                  {
    763                    // Notify the endpoint of the match.
    764                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    765                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    766          
    767                    if (pRspSent)
    768                    {
    769                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    770                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    771                      pRspSent->numInClusters = numInClusters;
    772                      pRspSent->numOutClusters = numOutClusters;
    773          
    774                      if (numInClusters)
    775                      {
    776                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    777                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    778                      }
    779                      else
    780                      {
    781                        pRspSent->pInClusters = NULL;
    782                      }
    783          
    784                      if (numOutClusters)
    785                      {
    786                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    787                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    788                      }
    789                      else
    790                      {
    791                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000115   E4           CLR     A
   \   000116   F0           MOVX    @DPTR,A
   \   000117   A3           INC     DPTR
   \   000118   F0           MOVX    @DPTR,A
    792                      }
    793          
    794                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000119                ; Setup parameters for call to function osal_msg_send
   \   000119   AA..         MOV     R2,?V0 + 2
   \   00011B   AB..         MOV     R3,?V0 + 3
   \   00011D   85..82       MOV     DPL,?V0 + 10
   \   000120   85..83       MOV     DPH,?V0 + 11
   \   000123   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000126   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000129   F9           MOV     R1,A
   \   00012A   12....       LCALL   ??osal_msg_send?relay
    795                    }
    796          
    797                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   00012D   85..82       MOV     DPL,?V0 + 8
   \   000130   85..83       MOV     DPH,?V0 + 9
   \   000133   E0           MOVX    A,@DPTR
   \   000134   C0E0         PUSH    A
   \   000136   85....       MOV     ?V0 + 2,?V0 + 7
   \   000139   E5..         MOV     A,?V0 + 2
   \   00013B   24..         ADD     A,#(ZDOBuildBuf & 0xff)
   \   00013D   F582         MOV     DPL,A
   \   00013F   E4           CLR     A
   \   000140   34..         ADDC    A,#((ZDOBuildBuf >> 8) & 0xff)
   \   000142   F583         MOV     DPH,A
   \   000144   D0E0         POP     A
   \   000146   F0           MOVX    @DPTR,A
   \   000147   05..         INC     ?V0 + 7
    798                  }
    799                }
    800          
    801                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000149   E5..         MOV     A,?V0 + 12
   \   00014B   6007         JZ      ??ZDO_ProcessMatchDescReq_16
    802                  osal_mem_free( sDesc );
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   AA..         MOV     R2,?V0 + 8
   \   00014F   AB..         MOV     R3,?V0 + 9
   \   000151   12....       LCALL   ??osal_mem_free?relay
    803              }
    804              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000154   85..82       MOV     DPL,?V0 + 10
   \   000157   85..83       MOV     DPH,?V0 + 11
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F5..         MOV     ?V0 + 10,A
   \   000162   A3           INC     DPTR
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F5..         MOV     ?V0 + 11,A
   \   000166   E5..         MOV     A,?V0 + 10
   \   000168   7002         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   00016A   E5..         MOV     A,?V0 + 11
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   00016C   7003         JNZ     $+5
   \   00016E   02....       LJMP    ??ZDO_ProcessMatchDescReq_18 & 0xFFFF
   \   000171   85..82       MOV     DPL,?V0 + 10
   \   000174   85..83       MOV     DPH,?V0 + 11
   \   000177   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00017A   FA           MOV     R2,A
   \   00017B   E9           MOV     A,R1
   \   00017C   FB           MOV     R3,A
   \   00017D   8A82         MOV     DPL,R2
   \   00017F   8B83         MOV     DPH,R3
   \   000181   E0           MOVX    A,@DPTR
   \   000182   60D0         JZ      ??ZDO_ProcessMatchDescReq_16
   \   000184   85..82       MOV     DPL,?V0 + 10
   \   000187   85..83       MOV     DPH,?V0 + 11
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00018F   50C3         JNC     ??ZDO_ProcessMatchDescReq_16
   \   000191   85..82       MOV     DPL,?V0 + 10
   \   000194   85..83       MOV     DPH,?V0 + 11
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00019D   FC           MOV     R4,A
   \   00019E   E9           MOV     A,R1
   \   00019F   FD           MOV     R5,A
   \   0001A0   EC           MOV     A,R4
   \   0001A1   7001         JNZ     ??ZDO_ProcessMatchDescReq_19
   \   0001A3   ED           MOV     A,R5
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0001A4   8A82         MOV     DPL,R2
   \   0001A6   8B83         MOV     DPH,R3
   \   0001A8   6014         JZ      ??ZDO_ProcessMatchDescReq_20
   \   0001AA                ; Setup parameters for indirect call
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   FA           MOV     R2,A
   \   0001AC   7901         MOV     R1,#0x1
   \   0001AE   8C82         MOV     DPL,R4
   \   0001B0   8D83         MOV     DPH,R5
   \   0001B2   12....       LCALL   ?CALL_IND
   \   0001B5   8A..         MOV     ?V0 + 8,R2
   \   0001B7   8B..         MOV     ?V0 + 9,R3
   \   0001B9   75..01       MOV     ?V0 + 12,#0x1
   \   0001BC   800D         SJMP    ??ZDO_ProcessMatchDescReq_21
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F5..         MOV     ?V0 + 8,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F5..         MOV     ?V0 + 9,A
   \   0001C8   75..00       MOV     ?V0 + 12,#0x0
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0001CB   E5..         MOV     A,?V0 + 8
   \   0001CD   7002         JNZ     ??ZDO_ProcessMatchDescReq_22
   \   0001CF   E5..         MOV     A,?V0 + 9
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0001D1   7003         JNZ     $+5
   \   0001D3   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001D6   85..82       MOV     DPL,?V0 + 8
   \   0001D9   85..83       MOV     DPH,?V0 + 9
   \   0001DC   A3           INC     DPTR
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   6E           XRL     A,R6
   \   0001DF   7003         JNZ     ??ZDO_ProcessMatchDescReq_23
   \   0001E1   A3           INC     DPTR
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0001E4   6003         JZ      $+5
   \   0001E6   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001E9   E5..         MOV     A,?V0 + 1
   \   0001EB   7004         JNZ     ??ZDO_ProcessMatchDescReq_24
   \   0001ED   E5..         MOV     A,?V0 + 0
   \   0001EF   606B         JZ      ??ZDO_ProcessMatchDescReq_25
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0001F1                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0001F1   85..82       MOV     DPL,?V0 + 8
   \   0001F4   85..83       MOV     DPH,?V0 + 9
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000201   85..82       MOV     DPL,?V0 + 8
   \   000204   85..83       MOV     DPH,?V0 + 9
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   FC           MOV     R4,A
   \   00020F   7404         MOV     A,#0x4
   \   000211   12....       LCALL   ?XSTACK_DISP0_8
   \   000214   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000217   A9..         MOV     R1,?V0 + 1
   \   000219   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   00021C   7402         MOV     A,#0x2
   \   00021E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000221   E9           MOV     A,R1
   \   000222   7038         JNZ     ??ZDO_ProcessMatchDescReq_25
   \   000224                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000224   85..82       MOV     DPL,?V0 + 8
   \   000227   85..83       MOV     DPH,?V0 + 9
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000237   85..82       MOV     DPL,?V0 + 8
   \   00023A   85..83       MOV     DPH,?V0 + 9
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   E0           MOVX    A,@DPTR
   \   000247   FC           MOV     R4,A
   \   000248   AA..         MOV     R2,?V0 + 14
   \   00024A   AB..         MOV     R3,?V0 + 15
   \   00024C   A9..         MOV     R1,?V0 + 0
   \   00024E   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000251   7402         MOV     A,#0x2
   \   000253   12....       LCALL   ?DEALLOC_XSTACK8
   \   000256   E9           MOV     A,R1
   \   000257   7003         JNZ     $+5
   \   000259   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   00025C                ; Setup parameters for call to function osal_msg_allocate
   \   00025C   E5..         MOV     A,?V0 + 1
   \   00025E   25..         ADD     A,?V0 + 0
   \   000260   C3           CLR     C
   \   000261   33           RLC     A
   \   000262   240A         ADD     A,#0xa
   \   000264   FA           MOV     R2,A
   \   000265   7B00         MOV     R3,#0x0
   \   000267   12....       LCALL   ??osal_msg_allocate?relay
   \   00026A   8A..         MOV     ?V0 + 2,R2
   \   00026C   8B..         MOV     ?V0 + 3,R3
   \   00026E   EA           MOV     A,R2
   \   00026F   7001         JNZ     ??ZDO_ProcessMatchDescReq_26
   \   000271   EB           MOV     A,R3
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   000272   7003         JNZ     $+5
   \   000274   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   000277   74D2         MOV     A,#-0x2e
   \   000279   8A82         MOV     DPL,R2
   \   00027B   8B83         MOV     DPH,R3
   \   00027D   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000280   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000288   8A82         MOV     DPL,R2
   \   00028A   8B83         MOV     DPH,R3
   \   00028C   A3           INC     DPTR
   \   00028D   A3           INC     DPTR
   \   00028E   E8           MOV     A,R0
   \   00028F   F0           MOVX    @DPTR,A
   \   000290   A3           INC     DPTR
   \   000291   E9           MOV     A,R1
   \   000292   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000295   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000298   E5..         MOV     A,?V0 + 0
   \   00029A   F0           MOVX    @DPTR,A
   \   00029B   EA           MOV     A,R2
   \   00029C   2405         ADD     A,#0x5
   \   00029E   FA           MOV     R2,A
   \   00029F   EB           MOV     A,R3
   \   0002A0   3400         ADDC    A,#0x0
   \   0002A2   FB           MOV     R3,A
   \   0002A3   E5..         MOV     A,?V0 + 1
   \   0002A5   603C         JZ      ??ZDO_ProcessMatchDescReq_27
   \   0002A7   E5..         MOV     A,?V0 + 2
   \   0002A9   240A         ADD     A,#0xa
   \   0002AB   F8           MOV     R0,A
   \   0002AC   E5..         MOV     A,?V0 + 3
   \   0002AE   3400         ADDC    A,#0x0
   \   0002B0   F9           MOV     R1,A
   \   0002B1   8A82         MOV     DPL,R2
   \   0002B3   8B83         MOV     DPH,R3
   \   0002B5   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0002B8                ; Setup parameters for call to function osal_memcpy
   \   0002B8   7402         MOV     A,#0x2
   \   0002BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   F5..         MOV     ?V0 + 4,A
   \   0002C0   A3           INC     DPTR
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   F5..         MOV     ?V0 + 5,A
   \   0002C4   75..00       MOV     ?V0 + 6,#0x0
   \   0002C7   78..         MOV     R0,#?V0 + 4
   \   0002C9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002CC   E5..         MOV     A,?V0 + 1
   \   0002CE   C3           CLR     C
   \   0002CF   33           RLC     A
   \   0002D0   FC           MOV     R4,A
   \   0002D1   E4           CLR     A
   \   0002D2   33           RLC     A
   \   0002D3   FD           MOV     R5,A
   \   0002D4   8A82         MOV     DPL,R2
   \   0002D6   8B83         MOV     DPH,R3
   \   0002D8   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   0002DB   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   0002DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E1   8008         SJMP    ??ZDO_ProcessMatchDescReq_28
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0002E3   8A82         MOV     DPL,R2
   \   0002E5   8B83         MOV     DPH,R3
   \   0002E7   E4           CLR     A
   \   0002E8   F0           MOVX    @DPTR,A
   \   0002E9   A3           INC     DPTR
   \   0002EA   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   0002EB   E5..         MOV     A,?V0 + 2
   \   0002ED   2408         ADD     A,#0x8
   \   0002EF   F582         MOV     DPL,A
   \   0002F1   E5..         MOV     A,?V0 + 3
   \   0002F3   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   0002F6   E5..         MOV     A,?V0 + 0
   \   0002F8   7003         JNZ     $+5
   \   0002FA   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0002FD   E5..         MOV     A,?V0 + 1
   \   0002FF   C3           CLR     C
   \   000300   33           RLC     A
   \   000301   F8           MOV     R0,A
   \   000302   E4           CLR     A
   \   000303   33           RLC     A
   \   000304   F9           MOV     R1,A
   \   000305   E5..         MOV     A,?V0 + 2
   \   000307   28           ADD     A,R0
   \   000308   F8           MOV     R0,A
   \   000309   E5..         MOV     A,?V0 + 3
   \   00030B   39           ADDC    A,R1
   \   00030C   F9           MOV     R1,A
   \   00030D   740A         MOV     A,#0xa
   \   00030F   28           ADD     A,R0
   \   000310   FA           MOV     R2,A
   \   000311   E4           CLR     A
   \   000312   39           ADDC    A,R1
   \   000313   FB           MOV     R3,A
   \   000314   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000317                ; Setup parameters for call to function osal_memcpy
   \   000317   85....       MOV     ?V0 + 4,?V0 + 14
   \   00031A   85....       MOV     ?V0 + 5,?V0 + 15
   \   00031D   75..00       MOV     ?V0 + 6,#0x0
   \   000320   78..         MOV     R0,#?V0 + 4
   \   000322   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000325   E5..         MOV     A,?V0 + 0
   \   000327   C3           CLR     C
   \   000328   33           RLC     A
   \   000329   FC           MOV     R4,A
   \   00032A   E4           CLR     A
   \   00032B   33           RLC     A
   \   00032C   FD           MOV     R5,A
   \   00032D   12....       LCALL   ?Subroutine177 & 0xFFFF
    805            }
   \                     ??CrossCallReturnLabel_454:
   \   000330   12....       LCALL   ?DEALLOC_XSTACK8
   \   000333   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
    806          
    807          /********************** Send the message only if at least one match found. **********************/
    808            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000336   E5..         MOV     A,?V0 + 7
   \   000338   6039         JZ      ??ZDO_ProcessMatchDescReq_29
    809            {
    810              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    811                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00033A                ; Setup parameters for call to function ZDP_EPRsp
   \   00033A   12....       LCALL   ?Subroutine52 & 0xFFFF
    812              {      
    813          #if defined( LCD_SUPPORTED )
    814                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    815          #endif
    816              }
    817            }
   \                     ??CrossCallReturnLabel_274:
   \   00033D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000340   75....       MOV     ?V0 + 0,#(ZDOBuildBuf & 0xff)
   \   000343   75....       MOV     ?V0 + 1,#((ZDOBuildBuf >> 8) & 0xff)
   \   000346   78..         MOV     R0,#?V0 + 0
   \   000348   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00034B   E5..         MOV     A,?V0 + 7
   \   00034D   F5..         MOV     ?V0 + 0,A
   \   00034F   78..         MOV     R0,#?V0 + 0
   \   000351   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000354   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000357   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00035A   75..00       MOV     ?V0 + 0,#0x0
   \   00035D   78..         MOV     R0,#?V0 + 0
   \   00035F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000362   7407         MOV     A,#0x7
   \   000364   12....       LCALL   ?XSTACK_DISP0_8
   \   000367   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00036A   12....       LCALL   ?XSTACK_DISP0_8
   \   00036D   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000370   12....       LCALL   ?DEALLOC_XSTACK8
    818            else
    819            {
    820          #if defined( LCD_SUPPORTED )
    821              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    822          #endif
    823            }
    824          
    825            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_29:
   \   000373   7402         MOV     A,#0x2
   \   000375   12....       LCALL   ?XSTACK_DISP0_8
   \   000378   E0           MOVX    A,@DPTR
   \   000379   7002         JNZ     ??ZDO_ProcessMatchDescReq_30
   \   00037B   A3           INC     DPTR
   \   00037C   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_30:
   \   00037D   6008         JZ      ??CrossCallReturnLabel_97
    826              osal_mem_free( inClusters );
   \   00037F                ; Setup parameters for call to function osal_mem_free
   \   00037F   7402         MOV     A,#0x2
   \   000381   12....       LCALL   ?XSTACK_DISP0_8
   \   000384   12....       LCALL   ?Subroutine57 & 0xFFFF
    827            if ( outClusters != NULL )
   \                     ??CrossCallReturnLabel_97:
   \   000387   E5..         MOV     A,?V0 + 14
   \   000389   7002         JNZ     ??ZDO_ProcessMatchDescReq_31
   \   00038B   E5..         MOV     A,?V0 + 15
   \                     ??ZDO_ProcessMatchDescReq_31:
   \   00038D   6007         JZ      ??ZDO_ProcessMatchDescReq_2
    828              osal_mem_free( outClusters );
   \   00038F                ; Setup parameters for call to function osal_mem_free
   \   00038F   AA..         MOV     R2,?V0 + 14
   \   000391   AB..         MOV     R3,?V0 + 15
   \   000393   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000396   7404         MOV     A,#0x4
   \   000398                REQUIRE ?Subroutine187
   \   000398                ; // Fall through to label ?Subroutine187
    829          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine199_0
   \   000003                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   02....       LJMP    ?Subroutine172 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   7407         MOV     A,#0x7
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   240E         ADD     A,#0xe
   \   000009                REQUIRE ?Subroutine179
   \   000009                REQUIRE ??Subroutine200_0
   \   000009                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000003                REQUIRE ?Subroutine179
   \   000003                ; // Fall through to label ?Subroutine179

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   78..         MOV     R0,#?V0 + 0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   240F         ADD     A,#0xf
   \   000003   F8           MOV     R0,A
   \   000004   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000007   7A06         MOV     R2,#0x6
   \   000009   7B80         MOV     R3,#-0x80
   \   00000B   12....       LCALL   ??ZDP_EPRsp?relay
   \   00000E   7407         MOV     A,#0x7
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC     DPTR
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003                REQUIRE ??Subroutine201_0
   \   000003                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   02....       LJMP    ??Subroutine250_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine207_0
   \   000001                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   3400         ADDC    A,#0x0
   \   000002   02....       LJMP    ?Subroutine174 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine229_0
   \   000001                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   85..82       MOV     DPL,?V0 + 2
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   A3           INC     DPTR
   \   000001   8582..       MOV     ?V0 + 2,DPL
   \   000004   8583..       MOV     ?V0 + 3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004                REQUIRE ??Subroutine244_0
   \   000004                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   FA           MOV     R2,A
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??osal_mem_alloc?relay
   \   000004   8A..         MOV     ?V0 + 14,R2
   \   000006   8B..         MOV     ?V0 + 15,R3
   \   000008   EA           MOV     A,R2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   22           RET
    830          /*********************************************************************************************/
    831          
    832          /*********************************************************************
    833           * @fn      ZDO_ProcessBindUnbindReq()
    834           * @brief   Called to process a Bind or Unbind Request message.
    835           * @param   inMsg  - incoming message (request)
    836           * @param   pReq - place to put parsed information
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    839          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    840            zAddrType_t SourceAddr;       // Binding Source addres
    841            byte bindStat;
    842          
    843            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    844            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??sAddrExtCpy?relay
    845          
    846          
    847            // If the local device is not the primary binding cache
    848            // check the src address of the bind request.
    849            // If it is not the local device's extended address
    850            // discard the request.
    851            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    852                  (pReq->dstAddress.addrMode != Addr64Bit &&
    853                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000024   E5..         MOV     A,?V0 + 6
   \   000026   240C         ADD     A,#0xc
   \   000028   F5..         MOV     ?V0 + 10,A
   \   00002A   E5..         MOV     A,?V0 + 7
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F5..         MOV     ?V0 + 11,A
   \   000030                ; Setup parameters for call to function sAddrExtCmp
   \   000030                ; Setup parameters for call to function NLME_GetExtAddr
   \   000030   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000033   EA           MOV     A,R2
   \   000034   FC           MOV     R4,A
   \   000035   EB           MOV     A,R3
   \   000036   FD           MOV     R5,A
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   ??sAddrExtCmp?relay
   \   000043   E9           MOV     A,R1
   \   000044   6012         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000046   EE           MOV     A,R6
   \   000047   2413         ADD     A,#0x13
   \   000049   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   7403         MOV     A,#0x3
   \   000050   6A           XRL     A,R2
   \   000051   600A         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   000053   7401         MOV     A,#0x1
   \   000055   6A           XRL     A,R2
   \   000056   6005         JZ      ??ZDO_ProcessBindUnbindReq_1
    854            {
    855              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000058   7484         MOV     A,#-0x7c
   \   00005A   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    856            }
    857            else
    858            {
    859              // Check source & destination endpoints
    860              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    861                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    862                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00005D   EE           MOV     A,R6
   \   00005E   2408         ADD     A,#0x8
   \   000060   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   6021         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000067   C3           CLR     C
   \   000068   94F1         SUBB    A,#-0xf
   \   00006A   501C         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   00006C   EE           MOV     A,R6
   \   00006D   2414         ADD     A,#0x14
   \   00006F   F5..         MOV     ?V0 + 2,A
   \   000071   EF           MOV     A,R7
   \   000072   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000075   7403         MOV     A,#0x3
   \   000077   6A           XRL     A,R2
   \   000078   7013         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   00007A   85..82       MOV     DPL,?V0 + 2
   \   00007D   85..83       MOV     DPH,?V0 + 3
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000083   C3           CLR     C
   \   000084   94F1         SUBB    A,#-0xf
   \   000086   4005         JC      ??ZDO_ProcessBindUnbindReq_4
    863              {
    864                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000088   7482         MOV     A,#-0x7e
   \   00008A   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    865              }
    866              else
    867              {
    868                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00008D   EE           MOV     A,R6
   \   00008E   2409         ADD     A,#0x9
   \   000090   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000093   EE           MOV     A,R6
   \   000094   240B         ADD     A,#0xb
   \   000096   FE           MOV     R6,A
   \   000097   EF           MOV     A,R7
   \   000098   3400         ADDC    A,#0x0
   \   00009A   FF           MOV     R7,A
   \   00009B   85..82       MOV     DPL,?V0 + 10
   \   00009E   85..83       MOV     DPH,?V0 + 11
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   6421         XRL     A,#0x21
   \   0000A4   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000A8   707C         JNZ     ??ZDO_ProcessBindUnbindReq_6
    869                {
    870                  // Assume the table is full
    871                  bindStat = ZDP_TABLE_FULL;
   \   0000AA   7487         MOV     A,#-0x79
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   F0           MOVX    @DPTR,A
    872          
    873                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   0000B3                ; Setup parameters for call to function bindNumOfEntries
   \   0000B3   12....       LCALL   ??bindNumOfEntries?relay
   \   0000B6   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B9   E4           CLR     A
   \   0000BA   93           MOVC    A,@A+DPTR
   \   0000BB   F8           MOV     R0,A
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   93           MOVC    A,@A+DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   C3           CLR     C
   \   0000C1   EA           MOV     A,R2
   \   0000C2   98           SUBB    A,R0
   \   0000C3   EB           MOV     A,R3
   \   0000C4   99           SUBB    A,R1
   \   0000C5   4003         JC      $+5
   \   0000C7   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
    874                  {
    875                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    876                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000CA                ; Setup parameters for call to function APSME_BindRequest
   \   0000CA   85..82       MOV     DPL,?V0 + 2
   \   0000CD   85..83       MOV     DPH,?V0 + 3
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F5..         MOV     ?V0 + 2,A
   \   0000D3   78..         MOV     R0,#?V0 + 2
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   0000DB   85..82       MOV     DPL,?V0 + 4
   \   0000DE   85..83       MOV     DPH,?V0 + 5
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   ??APSME_BindRequest?relay
   \   0000E6   7401         MOV     A,#0x1
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   \   0000EC   706A         JNZ     ??ZDO_ProcessBindUnbindReq_7
    877                    {
    878                      uint16 nwkAddr;
    879          
    880                      // valid entry
    881                      bindStat = ZDP_SUCCESS;
   \   0000EE   E4           CLR     A
   \   0000EF   85..82       MOV     DPL,?XSP + 0
   \   0000F2   85..83       MOV     DPH,?XSP + 1
   \   0000F5   F0           MOVX    @DPTR,A
    882          
    883                      // Notify to save info into NV
    884                      ZDApp_NVUpdate();
   \   0000F6                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000F6   12....       LCALL   ??ZDApp_NVUpdate?relay
    885          
    886                      // Check for the destination address
    887                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000F9   85..82       MOV     DPL,?V0 + 8
   \   0000FC   85..83       MOV     DPH,?V0 + 9
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6403         XRL     A,#0x3
   \   000102   7054         JNZ     ??ZDO_ProcessBindUnbindReq_7
    888                      {
    889                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   000104                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000104   7401         MOV     A,#0x1
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   AC82         MOV     R4,DPL
   \   00010B   AD83         MOV     R5,DPH
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   \   000111   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   000114   E9           MOV     A,R1
   \   000115   7041         JNZ     ??ZDO_ProcessBindUnbindReq_7
    890                        {
    891                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000117                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000117   7D00         MOV     R5,#0x0
   \   000119   7C00         MOV     R4,#0x0
   \   00011B   7900         MOV     R1,#0x0
   \   00011D   EE           MOV     A,R6
   \   00011E   FA           MOV     R2,A
   \   00011F   EF           MOV     A,R7
   \   000120   FB           MOV     R3,A
   \   000121   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   000124   8032         SJMP    ??ZDO_ProcessBindUnbindReq_7
    892                        }
    893                      }
    894                    }
    895                  }
    896                }
    897                else // Unbind_req
    898                {
    899                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
    900                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000126                ; Setup parameters for call to function APSME_UnBindRequest
   \   000126   85..82       MOV     DPL,?V0 + 2
   \   000129   85..83       MOV     DPH,?V0 + 3
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F5..         MOV     ?V0 + 2,A
   \   00012F   78..         MOV     R0,#?V0 + 2
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000134   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000137   12....       LCALL   ??APSME_UnBindRequest?relay
   \   00013A   7401         MOV     A,#0x1
   \   00013C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013F   E9           MOV     A,R1
   \   000140   700D         JNZ     ??ZDO_ProcessBindUnbindReq_8
    901                  {
    902                    bindStat = ZDP_SUCCESS;
   \   000142   E4           CLR     A
   \   000143   85..82       MOV     DPL,?XSP + 0
   \   000146   85..83       MOV     DPH,?XSP + 1
   \   000149   F0           MOVX    @DPTR,A
    903          
    904                    // Notify to save info into NV
    905                    ZDApp_NVUpdate();
   \   00014A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00014A   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   00014D   8009         SJMP    ??ZDO_ProcessBindUnbindReq_7
    906                  }
    907                  else
    908                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   00014F   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000151   85..82       MOV     DPL,?XSP + 0
   \   000154   85..83       MOV     DPH,?XSP + 1
   \   000157   F0           MOVX    @DPTR,A
    909                }
    910              }
    911            }
    912          
    913            // Send back a response message
    914            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
    915                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
    916                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   000158                ; Setup parameters for call to function ZDP_SendData
   \   000158   E5..         MOV     A,?V0 + 6
   \   00015A   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00015D   E5..         MOV     A,?V0 + 7
   \   00015F   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000162   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000165   7401         MOV     A,#0x1
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   8582..       MOV     ?V0 + 0,DPL
   \   00016D   8583..       MOV     ?V0 + 1,DPH
   \   000170   78..         MOV     R0,#?V0 + 0
   \   000172   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000175   85..82       MOV     DPL,?V0 + 10
   \   000178   85..83       MOV     DPH,?V0 + 11
   \   00017B   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00017E   4480         ORL     A,#0x80
   \   000180   F5..         MOV     ?V0 + 1,A
   \   000182   78..         MOV     R0,#?V0 + 0
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000187   7901         MOV     R1,#0x1
   \   000189   E5..         MOV     A,?V0 + 6
   \   00018B   2402         ADD     A,#0x2
   \   00018D   FC           MOV     R4,A
   \   00018E   E5..         MOV     A,?V0 + 7
   \   000190   3400         ADDC    A,#0x0
   \   000192   FD           MOV     R5,A
   \   000193   E5..         MOV     A,?V0 + 6
   \   000195   240F         ADD     A,#0xf
   \   000197   FA           MOV     R2,A
   \   000198   E5..         MOV     A,?V0 + 7
   \   00019A   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00019D   12....       LCALL   ?DEALLOC_XSTACK8
    917          }
   \   0001A0   740C         MOV     A,#0xc
   \   0001A2                REQUIRE ?Subroutine188
   \   0001A2                ; // Fall through to label ?Subroutine188

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine213_0
   \   000001                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL   ??ZDP_SendData?relay
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000003   02....       LJMP    ?Subroutine179 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 0
   \   000007   85..83       MOV     DPH,?V0 + 1
   \   00000A                REQUIRE ??Subroutine220_0
   \   00000A                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   F5..         MOV     ?V0 + 8,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   85..82       MOV     DPL,?V0 + 8
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   85..82       MOV     DPL,?V0 + 4
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine239_0
   \   000003                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   22           RET
    918          
    919          /*********************************************************************
    920           * @fn      ZDO_UpdateAddrManager
    921           * @brief   Update the Address Manager.
    922           * @param   nwkAddr - network address
    923           * @param   extAddr - extended address
    924           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    925          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
    926          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    927            AddrMgrEntry_t addrEntry;
    928          
    929            // Update the address manager
    930            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   E4           CLR     A
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
    931            addrEntry.nwkAddr = nwkAddr;
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine22 & 0xFFFF
    932            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_38:
   \   000019                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000019   7403         MOV     A,#0x3
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine119 & 0xFFFF
    933            AddrMgrEntryUpdate( &addrEntry );
    934          }
   \                     ??CrossCallReturnLabel_184:
   \   000021   740D         MOV     A,#0xd
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   \   000026   02....       LJMP    ?Subroutine169 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??AddrMgrExtAddrSet?relay
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   AA82         MOV     R2,DPL
   \   00000F   AB83         MOV     R3,DPH
   \   000011   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \   000014   22           RET
    935          
    936          /*********************************************************************
    937           * @fn      ZDO_ProcessServerDiscReq
    938           * @brief   Process the Server_Discovery_req message.
    939           * @param   inMsg  - incoming message (request)
    940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    941          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
    942          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine50 & 0xFFFF
    943            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    944            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_280:
   \   000008   F8           MOV     R0,A
   \   000009   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 8)
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   58           ANL     A,R0
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   59           ANL     A,R1
   \   000013   F5..         MOV     ?V0 + 1,A
    945          
    946            if ( matchMask )
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   7002         JNZ     ??ZDO_ProcessServerDiscReq_0
   \   000019   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00001B   601F         JZ      ??ZDO_ProcessServerDiscReq_1
    947            {
    948              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
    949                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   00001D                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000025   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000028   12....       LCALL   ?Subroutine104 & 0xFFFF
    950            }
   \                     ??CrossCallReturnLabel_260:
   \   00002B   FD           MOV     R5,A
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000031   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000034   12....       LCALL   ??ZDP_ServerDiscRsp?relay
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    951          }
   \                     ??ZDO_ProcessServerDiscReq_1:
   \   00003C   02....       LJMP    ??Subroutine196_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine202_0
   \   000004                ; // Fall through to label ??Subroutine202_0
    952          
    953          /*********************************************************************
    954           * Call Back Functions from APS  - API
    955           */
    956          
    957          /*********************************************************************
    958           * @fn          ZDO_EndDeviceTimeoutCB
    959           * @brief       This function handles the binding timer for the End
    960           *              Device Bind command.
    961           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    962          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
    963          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    964          #if defined ( REFLECTOR )
    965            byte stat;
    966            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7002         JNZ     ??ZDO_EndDeviceTimeoutCB_0
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_1 & 0xFFFF
    967            {
    968              stat = ZDO_EDBind->status;
    969          
    970              // Send the response message to the first sent
    971              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
    972                                  stat, ZDO_EDBind->SecurityUse );
   \   000017   90....       MOV     DPTR,#ZDO_EDBind
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   2415         ADD     A,#0x15
   \   00001D   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000020   FA           MOV     R2,A
   \   000021   90....       MOV     DPTR,#ZDO_EDBind
   \   000024   E0           MOVX    A,@DPTR
   \   000025   2416         ADD     A,#0x16
   \   000027   08           INC     R0
   \   000028   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00002B   C0E0         PUSH    A
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   90....       MOV     DPTR,#ZDO_EDBind
   \   000038   E0           MOVX    A,@DPTR
   \   000039   2401         ADD     A,#0x1
   \   00003B   FC           MOV     R4,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   3400         ADDC    A,#0x0
   \   000040   FD           MOV     R5,A
   \   000041   90....       MOV     DPTR,#ZDO_EDBind
   \   000044   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E                ; Setup parameters for call to function ZDP_SendData
   \   00004E   EA           MOV     A,R2
   \   00004F   F5..         MOV     ?V0 + 0,A
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   8582..       MOV     ?V0 + 0,DPL
   \   00005E   8583..       MOV     ?V0 + 1,DPH
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   75..20       MOV     ?V0 + 0,#0x20
   \   000069   75..80       MOV     ?V0 + 1,#-0x80
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   7901         MOV     R1,#0x1
   \   000073   7405         MOV     A,#0x5
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   AA82         MOV     R2,DPL
   \   00007A   AB83         MOV     R3,DPH
   \   00007C   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
    973          
    974              ZDO_RemoveEndDeviceBind();
   \   000082   90....       MOV     DPTR,#ZDO_EDBind
   \   000085   E0           MOVX    A,@DPTR
   \   000086   7002         JNZ     ??ZDO_EndDeviceTimeoutCB_2
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   00008A   602F         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   00008C   90....       MOV     DPTR,#ZDO_EDBind
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   2410         ADD     A,#0x10
   \   000092   12....       LCALL   ?Subroutine42 & 0xFFFF
    975            }
   \                     ??CrossCallReturnLabel_80:
   \   000095   7001         JNZ     ??ZDO_EndDeviceTimeoutCB_3
   \   000097   EB           MOV     A,R3
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   000098   6003         JZ      ??ZDO_EndDeviceTimeoutCB_4
   \   00009A                ; Setup parameters for call to function osal_mem_free
   \   00009A   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   00009D   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   2413         ADD     A,#0x13
   \   0000A3   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000A6   7001         JNZ     ??ZDO_EndDeviceTimeoutCB_5
   \   0000A8   EB           MOV     A,R3
   \                     ??ZDO_EndDeviceTimeoutCB_5:
   \   0000A9   6003         JZ      ??ZDO_EndDeviceTimeoutCB_6
   \   0000AB                ; Setup parameters for call to function osal_mem_free
   \   0000AB   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_6:
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B1   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000B4   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B7   E4           CLR     A
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   F0           MOVX    @DPTR,A
    976          #endif  // REFLECTOR
    977          }
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   0000BB   02....       LJMP    ?Subroutine185 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine222_0
   \   000001                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003                REQUIRE ??Subroutine235_0
   \   000003                ; // Fall through to label ??Subroutine235_0
    978          
    979          /*********************************************************************
    980           * Optional Management Messages
    981           */
    982          
    983          /*********************************************************************
    984           * @fn          ZDO_ProcessMgmtLqiReq
    985           * @brief       This function handles parsing the incoming Management
    986           *              LQI request and generate the response.
    987           *   Note:      This function will limit the number of items returned
    988           *              to ZDO_MAX_LQI_ITEMS items.
    989           * @param       inMsg - incoming message (request)
    990          
    991           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    992          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
    993          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
    994            byte x;
    995            byte index;
    996            byte numItems;
    997            byte maxItems;
    998            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V0 + 10,#0x0
   \   000011   75..00       MOV     ?V0 + 11,#0x0
    999            ZDP_MgmtLqiItem_t* item;
   1000            neighborEntry_t    entry;
   1001            byte aItems;
   1002            associated_devices_t *aDevice;
   1003            AddrMgrEntry_t  nwkEntry;
   1004            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000017   F5..         MOV     ?V0 + 3,A
   1005          
   1006            // Get the number of neighbor items
   1007            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000019                ; Setup parameters for call to function NLME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   799C         MOV     R1,#-0x64
   \   000029   12....       LCALL   ??NLME_GetRequest?relay
   1008          
   1009            // Get the number of associated items
   1010            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002C                ; Setup parameters for call to function AssocCount
   \   00002C   7A04         MOV     R2,#0x4
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??AssocCount?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 4,A
   1011          
   1012            // Total number of items
   1013            maxItems += aItems;
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   25..         ADD     A,?V0 + 4
   \   00003F   F0           MOVX    @DPTR,A
   1014          
   1015            // Start with the supplied index
   1016            if ( maxItems > StartIndex )
   \   000040   FA           MOV     R2,A
   \   000041   E5..         MOV     A,?V0 + 3
   \   000043   C3           CLR     C
   \   000044   9A           SUBB    A,R2
   \   000045   4003         JC      $+5
   \   000047   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1017            {
   1018              numItems = maxItems - StartIndex;
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   95..         SUBB    A,?V0 + 3
   \   00004E   F5..         MOV     ?V0 + 1,A
   1019          
   1020              // limit the size of the list
   1021              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000050   C3           CLR     C
   \   000051   9404         SUBB    A,#0x4
   \   000053   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1022                numItems = ZDO_MAX_LQI_ITEMS;
   \   000055   75..03       MOV     ?V0 + 1,#0x3
   1023          
   1024              // Allocate the memory to build the table
   1025              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1026                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   E5..         MOV     A,?V0 + 1
   \   00005A   75F01A       MOV     B,#0x1a
   \   00005D   A4           MUL     AB
   \   00005E   FA           MOV     R2,A
   \   00005F   ABF0         MOV     R3,B
   \   000061   12....       LCALL   ??osal_mem_alloc?relay
   \   000064   8A..         MOV     ?V0 + 10,R2
   \   000066   8B..         MOV     ?V0 + 11,R3
   1027          
   1028              if ( table != NULL )
   \   000068   EA           MOV     A,R2
   \   000069   7001         JNZ     ??ZDO_ProcessMgmtLqiReq_2
   \   00006B   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1029              {
   1030                x = 0;
   \   000071   75..00       MOV     ?V0 + 2,#0x0
   1031                item = table;
   \   000074   AE..         MOV     R6,?V0 + 10
   \   000076   AF..         MOV     R7,?V0 + 11
   1032                index = StartIndex;
   \   000078   85....       MOV     ?V0 + 0,?V0 + 3
   \   00007B   02....       LJMP    ??CrossCallReturnLabel_51 & 0xFFFF
   1033          
   1034                // Loop through associated items and build list
   1035                for ( ; x < numItems; x++ )
   1036                {
   1037                  if ( index < aItems )
   1038                  {
   1039                    // get next associated device
   1040                    aDevice = AssocFindDevice( index++ );
   1041          
   1042                    // set basic fields
   1043                    item->panID   = _NIB.nwkPanId;
   1044                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1045                    item->nwkAddr = aDevice->shortAddr;
   1046                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1047                    item->depth   = 0xFF;
   1048                    item->lqi     = aDevice->linkInfo.rxLqi;
   1049          
   1050                    // set extented address
   1051                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1052                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1053          
   1054                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1055                    {
   1056                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1057                    }
   1058                    else
   1059                    {
   1060                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007E                ; Setup parameters for call to function osal_memset
   \   00007E   7C08         MOV     R4,#0x8
   \   000080   7D00         MOV     R5,#0x0
   \   000082   79FF         MOV     R1,#-0x1
   \   000084   AA..         MOV     R2,?V0 + 8
   \   000086   AB..         MOV     R3,?V0 + 9
   \   000088   12....       LCALL   ??osal_memset?relay
   1061                    }
   1062          
   1063                    // use association info to set other fields
   1064                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   00008B   E5..         MOV     A,?V0 + 6
   \   00008D   2404         ADD     A,#0x4
   \   00008F   F8           MOV     R0,A
   \   000090   E5..         MOV     A,?V0 + 7
   \   000092   3400         ADDC    A,#0x0
   \   000094   F9           MOV     R1,A
   \   000095   EE           MOV     A,R6
   \   000096   2416         ADD     A,#0x16
   \   000098   FA           MOV     R2,A
   \   000099   EF           MOV     A,R7
   \   00009A   3400         ADDC    A,#0x0
   \   00009C   FB           MOV     R3,A
   \   00009D   EE           MOV     A,R6
   \   00009E   2415         ADD     A,#0x15
   \   0000A0   FC           MOV     R4,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   FD           MOV     R5,A
   \   0000A5   EE           MOV     A,R6
   \   0000A6   2414         ADD     A,#0x14
   \   0000A8   F5..         MOV     ?V0 + 8,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   3400         ADDC    A,#0x0
   \   0000AD   F5..         MOV     ?V0 + 9,A
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   7036         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1065                    {
   1066                      if (  aDevice->shortAddr == 0 )
   \   0000B6   85..82       MOV     DPL,?V0 + 6
   \   0000B9   85..83       MOV     DPH,?V0 + 7
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000C1   700A         JNZ     ??ZDO_ProcessMgmtLqiReq_8
   1067                      {
   1068                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000C3   E4           CLR     A
   \   0000C4   85..82       MOV     DPL,?V0 + 8
   \   0000C7   85..83       MOV     DPH,?V0 + 9
   \   0000CA   F0           MOVX    @DPTR,A
   1069                        item->depth = 0;
   \   0000CB   800E         SJMP    ??ZDO_ProcessMgmtLqiReq_9
   1070                      }
   1071                      else
   1072                      {
   1073                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF   85..82       MOV     DPL,?V0 + 8
   \   0000D2   85..83       MOV     DPH,?V0 + 9
   \   0000D5   F0           MOVX    @DPTR,A
   1074                        item->depth = _NIB.nodeDepth - 1;
   \   0000D6   90....       MOV     DPTR,#(_NIB + 52)
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   14           DEC     A
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0000DB   85..82       MOV     DPL,?V0 + 12
   \   0000DE   85..83       MOV     DPH,?V0 + 13
   \   0000E1   F0           MOVX    @DPTR,A
   1075                      }
   1076          
   1077                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   8C82         MOV     DPL,R4
   \   0000E6   8D83         MOV     DPH,R5
   \   0000E8   F0           MOVX    @DPTR,A
   1078                      item->relation = ZDP_MGMT_REL_PARENT;
   \   0000E9   E4           CLR     A
   \   0000EA   8030         SJMP    ??ZDO_ProcessMgmtLqiReq_10
   1079                    }
   1080                    else
   1081                    {
   1082                      // If not parent, then it's a child
   1083                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000EC   90....       MOV     DPTR,#(_NIB + 52)
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   04           INC     A
   \   0000F1   85..82       MOV     DPL,?V0 + 12
   \   0000F4   85..83       MOV     DPH,?V0 + 13
   \   0000F7   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   1084          
   1085                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_459:
   \   0000FA   C3           CLR     C
   \   0000FB   9403         SUBB    A,#0x3
   \   0000FD   4003         JC      $+5
   \   0000FF   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1086                      {
   1087                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   000102   7402         MOV     A,#0x2
   \   000104   85..82       MOV     DPL,?V0 + 8
   \   000107   85..83       MOV     DPH,?V0 + 9
   \   00010A   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   1088          
   1089                        if ( aDevice->nodeRelation == CHILD_RFD )
   \                     ??CrossCallReturnLabel_460:
   \   00010D   6401         XRL     A,#0x1
   \   00010F   6003         JZ      $+5
   \   000111   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   1090                        {
   1091                          item->rxOnIdle = FALSE;
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   000114   E4           CLR     A
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   000115   8C82         MOV     DPL,R4
   \   000117   8D83         MOV     DPH,R5
   \   000119   F0           MOVX    @DPTR,A
   1092                        }
   1093                        else
   1094                        {
   1095                          item->rxOnIdle = TRUE;
   1096                        }
   1097                      }
   1098                      else
   1099                      {
   1100                        item->devType = ZDP_MGMT_DT_ROUTER;
   1101          
   1102                        if ( aDevice->nodeRelation == CHILD_FFD )
   1103                        {
   1104                          item->rxOnIdle = FALSE;
   1105                        }
   1106                        else
   1107                        {
   1108                          item->rxOnIdle = TRUE;
   1109                        }
   1110                      }
   1111          
   1112                      item->relation = ZDP_MGMT_REL_CHILD;
   \   00011A   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   00011C   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00011F   E5..         MOV     A,?V0 + 2
   \   000121   C3           CLR     C
   \   000122   95..         SUBB    A,?V0 + 1
   \   000124   4003         JC      $+5
   \   000126   02....       LJMP    ??CrossCallReturnLabel_52 & 0xFFFF
   \   000129   E5..         MOV     A,?V0 + 0
   \   00012B   C3           CLR     C
   \   00012C   95..         SUBB    A,?V0 + 4
   \   00012E   4003         JC      $+5
   \   000130   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   000133                ; Setup parameters for call to function AssocFindDevice
   \   000133   A9..         MOV     R1,?V0 + 0
   \   000135   12....       LCALL   ??AssocFindDevice?relay
   \   000138   8A..         MOV     ?V0 + 6,R2
   \   00013A   8B..         MOV     ?V0 + 7,R3
   \   00013C   05..         INC     ?V0 + 0
   \   00013E   90....       MOV     DPTR,#(_NIB + 33)
   \   000141   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000144   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000147   EE           MOV     A,R6
   \   000148   2412         ADD     A,#0x12
   \   00014A   F582         MOV     DPL,A
   \   00014C   EF           MOV     A,R7
   \   00014D   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000150   E8           MOV     A,R0
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \   000153   E9           MOV     A,R1
   \   000154   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000157   F5..         MOV     ?V0 + 12,A
   \   000159   EF           MOV     A,R7
   \   00015A   3400         ADDC    A,#0x0
   \   00015C   F5..         MOV     ?V0 + 13,A
   \   00015E   74FF         MOV     A,#-0x1
   \   000160   85..82       MOV     DPL,?V0 + 12
   \   000163   85..83       MOV     DPH,?V0 + 13
   \   000166   F0           MOVX    @DPTR,A
   \   000167   85..82       MOV     DPL,?V0 + 6
   \   00016A   85..83       MOV     DPH,?V0 + 7
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   C0E0         PUSH    A
   \   00017A   EE           MOV     A,R6
   \   00017B   2419         ADD     A,#0x19
   \   00017D   F582         MOV     DPL,A
   \   00017F   EF           MOV     A,R7
   \   000180   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000183   D0E0         POP     A
   \   000185   F0           MOVX    @DPTR,A
   \   000186   7401         MOV     A,#0x1
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   E4           CLR     A
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000190   7402         MOV     A,#0x2
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000198   EE           MOV     A,R6
   \   000199   240A         ADD     A,#0xa
   \   00019B   F5..         MOV     ?V0 + 8,A
   \   00019D   EF           MOV     A,R7
   \   00019E   3400         ADDC    A,#0x0
   \   0001A0   F5..         MOV     ?V0 + 9,A
   \   0001A2                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0001A2   7401         MOV     A,#0x1
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   AA82         MOV     R2,DPL
   \   0001A9   AB83         MOV     R3,DPH
   \   0001AB   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   0001AE   E9           MOV     A,R1
   \   0001AF   6401         XRL     A,#0x1
   \   0001B1   6003         JZ      $+5
   \   0001B3   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   0001B6                ; Setup parameters for call to function sAddrExtCpy
   \   0001B6   7404         MOV     A,#0x4
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   AC82         MOV     R4,DPL
   \   0001BD   AD83         MOV     R5,DPH
   \   0001BF   AA..         MOV     R2,?V0 + 8
   \   0001C1   AB..         MOV     R3,?V0 + 9
   \   0001C3   12....       LCALL   ??sAddrExtCpy?relay
   \   0001C6   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001C9   7401         MOV     A,#0x1
   \   0001CB   85..82       MOV     DPL,?V0 + 8
   \   0001CE   85..83       MOV     DPH,?V0 + 9
   \   0001D1   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   0001D4   6403         XRL     A,#0x3
   \   0001D6   7003         JNZ     $+5
   \   0001D8   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0001DB   7401         MOV     A,#0x1
   \   0001DD   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   1113                    }
   1114          
   1115                    item++;
   1116                  }
   1117                  else
   1118                  {
   1119                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001E0   E5..         MOV     A,?V0 + 4
   \   0001E2   C3           CLR     C
   \   0001E3   95..         SUBB    A,?V0 + 3
   \   0001E5   4005         JC      ??ZDO_ProcessMgmtLqiReq_16
   1120                      // Start with 1st neighbor
   1121                      index = 0;
   \   0001E7   75..00       MOV     ?V0 + 0,#0x0
   \   0001EA   8018         SJMP    ??ZDO_ProcessMgmtLqiReq_17
   1122                    else
   1123                      // Start with >1st neighbor
   1124                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001EC   E5..         MOV     A,?V0 + 3
   \   0001EE   C3           CLR     C
   \   0001EF   95..         SUBB    A,?V0 + 4
   \   0001F1   F5..         MOV     ?V0 + 0,A
   \   0001F3   800F         SJMP    ??ZDO_ProcessMgmtLqiReq_17
   1125                    break;
   1126                  }
   1127                }
   1128          
   1129                // Loop through neighbor items and finish list
   1130                for ( ; x < numItems; x++ )
   1131                {
   1132                  // Add next neighbor table item
   1133                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1134          
   1135                  // set ZDP_MgmtLqiItem_t fields
   1136                  item->panID    = entry.panId;
   1137                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1138                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1139                  item->nwkAddr  = entry.neighborAddress;
   1140                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1141                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1142                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1143                  item->depth    = 0xFF;
   1144                  item->lqi      = entry.linkInfo.rxLqi;
   1145          
   1146                  if ( item->nwkAddr == 0 )
   1147                  {
   1148                    item->devType = ZDP_MGMT_DT_COORD;
   1149                  }
   1150                  else
   1151                  {
   1152                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001F5   7401         MOV     A,#0x1
   1153                  }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001F7   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0001FA   E5..         MOV     A,?V0 + 2
   \   0001FC   C3           CLR     C
   \   0001FD   95..         SUBB    A,?V0 + 1
   \   0001FF   4003         JC      $+5
   \   000201   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   000204                ; Setup parameters for call to function NLME_GetRequest
   \   000204   740E         MOV     A,#0xe
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   AC82         MOV     R4,DPL
   \   00020B   AD83         MOV     R5,DPH
   \   00020D   AA..         MOV     R2,?V0 + 0
   \   00020F   7B00         MOV     R3,#0x0
   \   000211   7987         MOV     R1,#-0x79
   \   000213   12....       LCALL   ??NLME_GetRequest?relay
   \   000216   05..         INC     ?V0 + 0
   \   000218   7418         MOV     A,#0x18
   \   00021A   12....       LCALL   ?XSTACK_DISP0_8
   \   00021D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000220                ; Setup parameters for call to function osal_memset
   \   000220   7C08         MOV     R4,#0x8
   \   000222   7D00         MOV     R5,#0x0
   \   000224   79FF         MOV     R1,#-0x1
   \   000226   EE           MOV     A,R6
   \   000227   240A         ADD     A,#0xa
   \   000229   FA           MOV     R2,A
   \   00022A   EF           MOV     A,R7
   \   00022B   3400         ADDC    A,#0x0
   \   00022D   FB           MOV     R3,A
   \   00022E   12....       LCALL   ??osal_memset?relay
   \   000231   EE           MOV     A,R6
   \   000232   2412         ADD     A,#0x12
   \   000234   F8           MOV     R0,A
   \   000235   EF           MOV     A,R7
   \   000236   3400         ADDC    A,#0x0
   \   000238   F9           MOV     R1,A
   \   000239   740E         MOV     A,#0xe
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000241   8882         MOV     DPL,R0
   \   000243   8983         MOV     DPH,R1
   \   000245   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000248   EE           MOV     A,R6
   \   000249   2415         ADD     A,#0x15
   \   00024B   F582         MOV     DPL,A
   \   00024D   EF           MOV     A,R7
   \   00024E   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000251   7402         MOV     A,#0x2
   \   000253   F0           MOVX    @DPTR,A
   \   000254   EE           MOV     A,R6
   \   000255   2416         ADD     A,#0x16
   \   000257   F582         MOV     DPL,A
   \   000259   EF           MOV     A,R7
   \   00025A   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   00025D   7403         MOV     A,#0x3
   \   00025F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000262   F582         MOV     DPL,A
   \   000264   EF           MOV     A,R7
   \   000265   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000268   74FF         MOV     A,#-0x1
   \   00026A   F0           MOVX    @DPTR,A
   \   00026B   741D         MOV     A,#0x1d
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   E0           MOVX    A,@DPTR
   \   000271   C0E0         PUSH    A
   \   000273   EE           MOV     A,R6
   \   000274   2419         ADD     A,#0x19
   \   000276   F582         MOV     DPL,A
   \   000278   EF           MOV     A,R7
   \   000279   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   00027C   D0E0         POP     A
   \   00027E   F0           MOVX    @DPTR,A
   \   00027F   EE           MOV     A,R6
   \   000280   2414         ADD     A,#0x14
   \   000282   FA           MOV     R2,A
   \   000283   EF           MOV     A,R7
   \   000284   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000287   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_20
   \   000289   A3           INC     DPTR
   \   00028A   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   00028B   6003         JZ      $+5
   \   00028D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_18 & 0xFFFF
   \   000290   E4           CLR     A
   \   000291   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   1154          
   1155                  item++;
   1156                }
   1157              }
   1158            }
   1159            else
   1160            {
   1161              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000294   75..00       MOV     ?V0 + 1,#0x0
   1162            }
   1163          
   1164            // Send response
   1165            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1166                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   000297                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000297   75..00       MOV     ?V0 + 0,#0x0
   \   00029A   78..         MOV     R0,#?V0 + 0
   \   00029C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029F   78..         MOV     R0,#?V0 + 10
   \   0002A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A4   E5..         MOV     A,?V0 + 1
   \   0002A6   F5..         MOV     ?V0 + 0,A
   \   0002A8   78..         MOV     R0,#?V0 + 0
   \   0002AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002AD   E5..         MOV     A,?V0 + 3
   \   0002AF   F5..         MOV     ?V0 + 0,A
   \   0002B1   78..         MOV     R0,#?V0 + 0
   \   0002B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002B6   7405         MOV     A,#0x5
   \   0002B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BB   E0           MOVX    A,@DPTR
   \   0002BC   FD           MOV     R5,A
   \   0002BD   7C00         MOV     R4,#0x0
   \   0002BF   E5..         MOV     A,?V0 + 14
   \   0002C1   2402         ADD     A,#0x2
   \   0002C3   FA           MOV     R2,A
   \   0002C4   E5..         MOV     A,?V0 + 15
   \   0002C6   3400         ADDC    A,#0x0
   \   0002C8   FB           MOV     R3,A
   \   0002C9   E5..         MOV     A,?V0 + 14
   \   0002CB   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0002CE   E5..         MOV     A,?V0 + 15
   \   0002D0   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0002D3   12....       LCALL   ??ZDP_MgmtLqiRsp?relay
   \   0002D6   7405         MOV     A,#0x5
   \   0002D8   12....       LCALL   ?DEALLOC_XSTACK8
   1167          
   1168            if ( table )
   \   0002DB   E5..         MOV     A,?V0 + 10
   \   0002DD   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_21
   \   0002DF   E5..         MOV     A,?V0 + 11
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0002E1   6007         JZ      ??ZDO_ProcessMgmtLqiReq_22
   1169            {
   1170              osal_mem_free( table );
   \   0002E3                ; Setup parameters for call to function osal_mem_free
   \   0002E3   AA..         MOV     R2,?V0 + 10
   \   0002E5   AB..         MOV     R3,?V0 + 11
   \   0002E7   12....       LCALL   ??osal_mem_free?relay
   1171            }
   1172          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   0002EA   7425         MOV     A,#0x25
   \   0002EC   02....       LJMP    ?Subroutine187 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   241A         ADD     A,#0x1a
   \   000008   FE           MOV     R6,A
   \   000009   EF           MOV     A,R7
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FF           MOV     R7,A
   \   00000D   05..         INC     ?V0 + 2
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   EF           MOV     A,R7
   \   000007   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2418         ADD     A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV     R4,#((_NIB + 53) & 0xff)
   \   00000E   7D..         MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
   \   000010   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006                REQUIRE ??Subroutine209_0
   \   000006                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003                REQUIRE ??Subroutine214_0
   \   000003                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000003                REQUIRE ??Subroutine215_0
   \   000003                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003                REQUIRE ?Subroutine175
   \   000003                ; // Fall through to label ?Subroutine175

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ?Subroutine175 & 0xFFFF
   1173          
   1174          /*********************************************************************
   1175           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1176           * @brief       This function handles parsing the incoming Management
   1177           *              Network Discover request and starts the request.
   1178           * @param       inMsg - incoming message (request)
   1179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1180          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1181          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1182            NLME_ScanFields_t scan;
   1183            uint8             index;
   1184            uint8             *msg;
   1185          
   1186            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine53 & 0xFFFF
   1187            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_94:
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?L_MOV_TO_X
   1188            msg += 4;
   \   00001C   12....       LCALL   ?Subroutine99 & 0xFFFF
   1189            scan.duration = *msg++;
   \                     ??CrossCallReturnLabel_297:
   \   00001F   C0E0         PUSH    A
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   D0E0         POP     A
   \   000028   12....       LCALL   ?Subroutine36 & 0xFFFF
   1190            index         = *msg;
   1191            scan.scanType = ZMAC_ACTIVE_SCAN;
   \                     ??CrossCallReturnLabel_70:
   \   00002B   7405         MOV     A,#0x5
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
   1192            scan.scanApp  = NLME_DISC_SCAN;
   \   000033   7406         MOV     A,#0x6
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   1193          
   1194            // Save off the information to be used for the response
   1195            zdappMgmtNwkDiscReqInProgress          = true;
   \   00003B   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00003E   F0           MOVX    @DPTR,A
   1196            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00003F   7402         MOV     A,#0x2
   \   000041   90....       MOV     DPTR,#(zdappMgmtNwkDiscRspAddr + 8)
   \   000044   F0           MOVX    @DPTR,A
   1197            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   000045   85..82       MOV     DPL,?V0 + 0
   \   000048   85..83       MOV     DPH,?V0 + 1
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   000053   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   1198            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_289:
   \   000056   EA           MOV     A,R2
   \   000057   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   00005A   F0           MOVX    @DPTR,A
   1199            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000060   E5..         MOV     A,?V0 + 1
   \   000062   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000065   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000068   12....       LCALL   ?Subroutine12 & 0xFFFF
   1200          
   1201            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \                     ??CrossCallReturnLabel_237:
   \   00006B   12....       LCALL   ??NLME_NwkDiscReq2?relay
   \   00006E   E9           MOV     A,R1
   \   00006F   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1202            {
   1203              NLME_NwkDiscTerm();
   \   000071                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000071   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1204          
   1205              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1206            }
   1207          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000074   7407         MOV     A,#0x7
   \   000076                REQUIRE ?Subroutine192
   \   000076                ; // Fall through to label ?Subroutine192

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine226_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   FE           MOV     R6,A
   \   000004                REQUIRE ??Subroutine208_0
   \   000004                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ?Subroutine182
   \   000004                ; // Fall through to label ?Subroutine182

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003                REQUIRE ??Subroutine233_0
   \   000003                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   7904         MOV     R1,#0x4
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??osal_build_uint32?relay
   \   000009   8A..         MOV     ?V0 + 4,R2
   \   00000B   8B..         MOV     ?V0 + 5,R3
   \   00000D   8C..         MOV     ?V0 + 6,R4
   \   00000F   8D..         MOV     ?V0 + 7,R5
   \   000011   22           RET
   1208          
   1209          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1210          /*********************************************************************
   1211           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1212           * @brief       This function finishes the processing of the Management
   1213           *              Network Discover Request and generates the response.
   1214           *   Note:      This function will limit the number of items returned
   1215           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1216           * @param       ResultCountSrcAddr - source of the request
   1217           * @param       msg - pointer to incoming message
   1218           * @param       SecurityUse -
   1219           */
   1220          void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
   1221                                                   networkDesc_t *NetworkList )
   1222          {
   1223            byte count, i;
   1224            networkDesc_t *newDesc = NULL, *pList = NetworkList;
   1225          
   1226            if ( ZSTACK_ROUTER_BUILD )
   1227            {
   1228              // Look for my PanID.
   1229              while ( pList )
   1230              {
   1231                if ( pList->panId == _NIB.nwkPanId )
   1232                {
   1233                  break;
   1234                }
   1235          
   1236          
   1237                if ( !pList->nextDesc )
   1238                {
   1239                  break;
   1240                }
   1241                pList = pList->nextDesc;
   1242              }
   1243          
   1244          
   1245              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1246              // prepend it.
   1247              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1248              {
   1249                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1250                if ( newDesc )
   1251                {
   1252                  byte pJoin;
   1253          
   1254                  newDesc->panId = _NIB.nwkPanId;
   1255                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1256                  newDesc->beaconOrder = _NIB.beaconOrder;
   1257                  newDesc->superFrameOrder = _NIB.superFrameOrder;
   1258                  newDesc->version = NLME_GetProtocolVersion();
   1259                  newDesc->stackProfile = zgStackProfile;
   1260                  //Extended PanID
   1261                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1262          
   1263                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1264                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1265                                                     INVALID_NODE_ADDR);
   1266          
   1267                  newDesc->nextDesc = NetworkList;
   1268                  NetworkList = newDesc;
   1269                  ResultCount++;
   1270                }
   1271              }
   1272            }
   1273          
   1274            // Calc the count and apply a max count.
   1275            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1276            {
   1277              count = 0;
   1278            }
   1279            else
   1280            {
   1281              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1282              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1283              {
   1284                count = ZDO_MAX_NWKDISC_ITEMS;
   1285              }
   1286          
   1287              // Move the list pointer up to the start index.
   1288              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1289              {
   1290                NetworkList = NetworkList->nextDesc;
   1291              }
   1292            }
   1293          
   1294            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1295                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1296                                zdappMgmtNwkDiscStartIndex,
   1297                                count,
   1298                                NetworkList,
   1299                                false );
   1300          
   1301            if ( ZSTACK_ROUTER_BUILD )
   1302            {
   1303              if ( newDesc != NULL )
   1304              {
   1305                osal_mem_free( newDesc );
   1306              }
   1307            }
   1308          
   1309            NLME_NwkDiscTerm();
   1310          }
   1311          #endif
   1312          
   1313          /*********************************************************************
   1314           * @fn          ZDO_ProcessMgmtRtgReq
   1315           * @brief       This function finishes the processing of the Management
   1316           *              Routing Request and generates the response.
   1317           *   Note:      This function will limit the number of items returned
   1318           *              to ZDO_MAX_RTG_ITEMS items.
   1319           * @param       inMsg - incoming message (request)
   1320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1321          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1322          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   1323            byte x;
   1324            byte maxNumItems;
   1325            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1326            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V0 + 6,R6
   \   000012   8E..         MOV     ?V0 + 7,R6
   1327            rtgItem_t *pList;
   1328            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000017   FF           MOV     R7,A
   1329          
   1330            // Get the number of table items
   1331            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000018                ; Setup parameters for call to function NLME_GetRequest
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   799D         MOV     R1,#-0x63
   \   000028   12....       LCALL   ??NLME_GetRequest?relay
   1332          
   1333            if ( maxNumItems > StartIndex )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   C3           CLR     C
   \   000035   9A           SUBB    A,R2
   \   000036   507E         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1334            {
   1335              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C3           CLR     C
   \   00003A   9F           SUBB    A,R7
   \   00003B   FE           MOV     R6,A
   1336          
   1337              // limit the size of the list
   1338              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003C   C3           CLR     C
   \   00003D   940B         SUBB    A,#0xb
   \   00003F   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1339              {
   1340                numItems = ZDO_MAX_RTG_ITEMS;
   \   000041   7E0A         MOV     R6,#0xa
   1341              }
   1342          
   1343              // Allocate the memory to build the table
   1344              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   EE           MOV     A,R6
   \   000044   75F006       MOV     B,#0x6
   \   000047   A4           MUL     AB
   \   000048   FA           MOV     R2,A
   \   000049   ABF0         MOV     R3,B
   \   00004B   12....       LCALL   ??osal_mem_alloc?relay
   \   00004E   8A..         MOV     ?V0 + 0,R2
   \   000050   8B..         MOV     ?V0 + 1,R3
   \   000052   8A..         MOV     ?V0 + 6,R2
   \   000054   8B..         MOV     ?V0 + 7,R3
   1345          
   1346              if ( pBuf != NULL )
   \   000056   EA           MOV     A,R2
   \   000057   7001         JNZ     ??ZDO_ProcessMgmtRtgReq_2
   \   000059   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   00005A   6058         JZ      ??ZDO_ProcessMgmtRtgReq_3
   1347              {
   1348                // Convert buffer to list
   1349                pList = (rtgItem_t *)pBuf;
   1350          
   1351                // Loop through items and build list
   1352                for ( x = 0; x < numItems; x++ )
   \   00005C   75..00       MOV     ?V0 + 4,#0x0
   \   00005F   801B         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   1353                {
   1354                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1355          
   1356                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1357                  switch( pList->status )
   1358                  {
   1359                    case RT_ACTIVE:
   1360                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1361                      break;
   1362          
   1363                    case RT_DISC:
   1364                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1365                      break;
   1366          
   1367                    case RT_LINK_FAIL:
   1368                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000061   7402         MOV     A,#0x2
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   F0           MOVX    @DPTR,A
   1369          
   1370                    case RT_INIT:
   1371                    case RT_REPAIR:
   1372                    default:
   1373                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000068   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   F0           MOVX    @DPTR,A
   1374                      break;
   1375                  }
   1376          
   1377                  // Increment pointer to next record
   1378                  pList++;
   \   00006F   E5..         MOV     A,?V0 + 0
   \   000071   2406         ADD     A,#0x6
   \   000073   F5..         MOV     ?V0 + 0,A
   \   000075   E5..         MOV     A,?V0 + 1
   \   000077   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   00007A   05..         INC     ?V0 + 4
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   00007C   E5..         MOV     A,?V0 + 4
   \   00007E   C3           CLR     C
   \   00007F   9E           SUBB    A,R6
   \   000080   5034         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000082                ; Setup parameters for call to function NLME_GetRequest
   \   000082   AC..         MOV     R4,?V0 + 0
   \   000084   AD..         MOV     R5,?V0 + 1
   \   000086   85....       MOV     ?V0 + 10,?V0 + 4
   \   000089   EF           MOV     A,R7
   \   00008A   25..         ADD     A,?V0 + 10
   \   00008C   FA           MOV     R2,A
   \   00008D   E4           CLR     A
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FB           MOV     R3,A
   \   000091   798B         MOV     R1,#-0x75
   \   000093   12....       LCALL   ??NLME_GetRequest?relay
   \   000096   E5..         MOV     A,?V0 + 0
   \   000098   2405         ADD     A,#0x5
   \   00009A   F8           MOV     R0,A
   \   00009B   E5..         MOV     A,?V0 + 1
   \   00009D   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000A0   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for ZDO_ProcessMgmtRtgReq>_0`:
   \   0000A3   01           DB        1
   \   0000A4   02           DB        2
   \   0000A5   ....         DW        ??ZDO_ProcessMgmtRtgReq_6
   \   0000A7   ....         DW        ??ZDO_ProcessMgmtRtgReq_8
   \   0000A9   ....         DW        ??ZDO_ProcessMgmtRtgReq_9
   \   0000AB   ....         DW        ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000AD   E4           CLR     A
   \   0000AE   80BA         SJMP    ??ZDO_ProcessMgmtRtgReq_7
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000B0   7401         MOV     A,#0x1
   \   0000B2   80B6         SJMP    ??ZDO_ProcessMgmtRtgReq_7
   1379                }
   1380              }
   1381              else
   1382              {
   1383                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   0000B4   7E00         MOV     R6,#0x0
   1384              }
   1385            }
   1386          
   1387            // Send response
   1388            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1389                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000B6                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000B6   75..00       MOV     ?V0 + 0,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BE   78..         MOV     R0,#?V0 + 6
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F5..         MOV     ?V0 + 0,A
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   EF           MOV     A,R7
   \   0000CC   F5..         MOV     ?V0 + 0,A
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D3   7405         MOV     A,#0x5
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FD           MOV     R5,A
   \   0000DA   7C00         MOV     R4,#0x0
   \   0000DC   E5..         MOV     A,?V0 + 2
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   FA           MOV     R2,A
   \   0000E1   E5..         MOV     A,?V0 + 3
   \   0000E3   3400         ADDC    A,#0x0
   \   0000E5   FB           MOV     R3,A
   \   0000E6   E5..         MOV     A,?V0 + 2
   \   0000E8   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000EB   E5..         MOV     A,?V0 + 3
   \   0000ED   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   0000F0   12....       LCALL   ??ZDP_MgmtRtgRsp?relay
   \   0000F3   7405         MOV     A,#0x5
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
   1390          
   1391            if ( pBuf )
   \   0000F8   E5..         MOV     A,?V0 + 6
   \   0000FA   7002         JNZ     ??ZDO_ProcessMgmtRtgReq_10
   \   0000FC   E5..         MOV     A,?V0 + 7
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000FE   6007         JZ      ??ZDO_ProcessMgmtRtgReq_11
   1392            {
   1393              osal_mem_free( pBuf );
   \   000100                ; Setup parameters for call to function osal_mem_free
   \   000100   AA..         MOV     R2,?V0 + 6
   \   000102   AB..         MOV     R3,?V0 + 7
   \   000104   12....       LCALL   ??osal_mem_free?relay
   1394            }
   1395          }
   \                     ??ZDO_ProcessMgmtRtgReq_11:
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C                REQUIRE ?Subroutine190
   \   00010C                ; // Fall through to label ?Subroutine190

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   1396          
   1397          /*********************************************************************
   1398           * @fn          ZDO_ProcessMgmtBindReq
   1399           * @brief       This function finishes the processing of the Management
   1400           *              Bind Request and generates the response.
   1401           *   Note:      This function will limit the number of items returned
   1402           *              to ZDO_MAX_BIND_ITEMS items.
   1403           * @param       inMsg - incoming message (request)
   1404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1405          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1406          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   1407          #if defined ( REFLECTOR )
   1408            byte x;
   1409            uint16 maxNumItems;
   1410            uint16 numItems;
   1411            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   1412            apsBindingItem_t *pList;
   1413            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000017   F5..         MOV     ?V0 + 0,A
   1414            uint8 status;
   1415          
   1416            // Get the number of table items
   1417            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000019                ; Setup parameters for call to function APSME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   79A3         MOV     R1,#-0x5d
   \   000029   12....       LCALL   ??APSME_GetRequest?relay
   1418          
   1419            if ( maxNumItems > StartIndex )
   \   00002C   85..82       MOV     DPL,?V0 + 0
   \   00002F   AA82         MOV     R2,DPL
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00003A   C3           CLR     C
   \   00003B   EA           MOV     A,R2
   \   00003C   98           SUBB    A,R0
   \   00003D   E4           CLR     A
   \   00003E   99           SUBB    A,R1
   \   00003F   4003         JC      $+5
   \   000041   02....       LJMP    ??ZDO_ProcessMgmtBindReq_0 & 0xFFFF
   1420            {
   1421              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   9A           SUBB    A,R2
   \   00004D   FE           MOV     R6,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   9400         SUBB    A,#0x0
   \   000052   FF           MOV     R7,A
   1422            }
   1423            else
   1424            {
   1425              numItems = 0;
   1426            }
   1427          
   1428            // limit the size of the list
   1429            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000053   C3           CLR     C
   \   000054   EE           MOV     A,R6
   \   000055   9404         SUBB    A,#0x4
   \   000057   EF           MOV     A,R7
   \   000058   9400         SUBB    A,#0x0
   \   00005A   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1430            {
   1431              numItems = ZDO_MAX_BIND_ITEMS;
   \   00005C   7E03         MOV     R6,#0x3
   \   00005E   7F00         MOV     R7,#0x0
   \   000060   8006         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1432            }
   1433          
   1434            // Allocate the memory to build the table
   1435            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000062   EE           MOV     A,R6
   \   000063   7001         JNZ     ??ZDO_ProcessMgmtBindReq_3
   \   000065   EF           MOV     A,R7
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000066   605D         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   EA           MOV     A,R2
   \   00006D   75F015       MOV     B,#0x15
   \   000070   A4           MUL     AB
   \   000071   FA           MOV     R2,A
   \   000072   ACF0         MOV     R4,B
   \   000074   75F015       MOV     B,#0x15
   \   000077   EB           MOV     A,R3
   \   000078   A4           MUL     AB
   \   000079   2C           ADD     A,R4
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   ??osal_mem_alloc?relay
   \   00007E   8A..         MOV     ?V0 + 4,R2
   \   000080   8B..         MOV     ?V0 + 5,R3
   \   000082   8A..         MOV     ?V0 + 2,R2
   \   000084   8B..         MOV     ?V0 + 3,R3
   \   000086   EA           MOV     A,R2
   \   000087   7001         JNZ     ??ZDO_ProcessMgmtBindReq_4
   \   000089   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   00008A   6039         JZ      ??ZDO_ProcessMgmtBindReq_0
   1436            {
   1437              status = ZSuccess;
   \   00008C   75..00       MOV     ?V0 + 6,#0x0
   1438          
   1439              // Convert buffer to list
   1440              pList = (apsBindingItem_t *)pBuf;
   1441          
   1442              // Loop through items and build list
   1443              for ( x = 0; x < numItems; x++ )
   \   00008F   75..00       MOV     ?V0 + 1,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000092   85....       MOV     ?V0 + 8,?V0 + 1
   \   000095   C3           CLR     C
   \   000096   E5..         MOV     A,?V0 + 8
   \   000098   9E           SUBB    A,R6
   \   000099   E4           CLR     A
   \   00009A   9F           SUBB    A,R7
   \   00009B   502D         JNC     ??ZDO_ProcessMgmtBindReq_6
   1444              {
   1445                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   00009D                ; Setup parameters for call to function APSME_GetRequest
   \   00009D   AC..         MOV     R4,?V0 + 4
   \   00009F   AD..         MOV     R5,?V0 + 5
   \   0000A1   85....       MOV     ?V0 + 10,?V0 + 1
   \   0000A4   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000A7   E5..         MOV     A,?V0 + 8
   \   0000A9   25..         ADD     A,?V0 + 10
   \   0000AB   FA           MOV     R2,A
   \   0000AC   E4           CLR     A
   \   0000AD   3400         ADDC    A,#0x0
   \   0000AF   FB           MOV     R3,A
   \   0000B0   79A2         MOV     R1,#-0x5e
   \   0000B2   12....       LCALL   ??APSME_GetRequest?relay
   1446                pList++;
   \   0000B5   E5..         MOV     A,?V0 + 4
   \   0000B7   2415         ADD     A,#0x15
   \   0000B9   F5..         MOV     ?V0 + 4,A
   \   0000BB   E5..         MOV     A,?V0 + 5
   \   0000BD   3400         ADDC    A,#0x0
   \   0000BF   F5..         MOV     ?V0 + 5,A
   1447              }
   \   0000C1   05..         INC     ?V0 + 1
   \   0000C3   80CD         SJMP    ??ZDO_ProcessMgmtBindReq_5
   1448          
   1449            }
   1450            else
   1451            {
   1452              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000C5   75..8B       MOV     ?V0 + 6,#-0x75
   1453              numItems = 0;
   \   0000C8   7E00         MOV     R6,#0x0
   1454            }
   1455          
   1456            // Send response
   1457            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1458                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000CA                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000CA   75..00       MOV     ?V0 + 1,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 1
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   78..         MOV     R0,#?V0 + 2
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   EE           MOV     A,R6
   \   0000D8   F5..         MOV     ?V0 + 1,A
   \   0000DA   78..         MOV     R0,#?V0 + 1
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   78..         MOV     R0,#?V0 + 0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E4   7405         MOV     A,#0x5
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FD           MOV     R5,A
   \   0000EB   AC..         MOV     R4,?V0 + 6
   \   0000ED   E5..         MOV     A,?V0 + 12
   \   0000EF   2402         ADD     A,#0x2
   \   0000F1   FA           MOV     R2,A
   \   0000F2   E5..         MOV     A,?V0 + 13
   \   0000F4   3400         ADDC    A,#0x0
   \   0000F6   FB           MOV     R3,A
   \   0000F7   E5..         MOV     A,?V0 + 12
   \   0000F9   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000FC   E5..         MOV     A,?V0 + 13
   \   0000FE   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000101   12....       LCALL   ??ZDP_MgmtBindRsp?relay
   \   000104   7405         MOV     A,#0x5
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   1459          
   1460            if ( pBuf )
   \   000109   E5..         MOV     A,?V0 + 2
   \   00010B   7002         JNZ     ??ZDO_ProcessMgmtBindReq_7
   \   00010D   E5..         MOV     A,?V0 + 3
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   00010F   6007         JZ      ??ZDO_ProcessMgmtBindReq_8
   1461            {
   1462              osal_mem_free( pBuf );
   \   000111                ; Setup parameters for call to function osal_mem_free
   \   000111   AA..         MOV     R2,?V0 + 2
   \   000113   AB..         MOV     R3,?V0 + 3
   \   000115   12....       LCALL   ??osal_mem_free?relay
   1463            }
   1464          #else
   1465            (void)inMsg;
   1466          #endif
   1467          }
   \                     ??ZDO_ProcessMgmtBindReq_8:
   \   000118   7402         MOV     A,#0x2
   \   00011A   02....       LJMP    ?Subroutine188 & 0xFFFF
   1468          
   1469          /*********************************************************************
   1470           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1471           * @brief       This function finishes the processing of the Management
   1472           *              Direct Join Request and generates the response.
   1473           * @param       inMsg - incoming message (request)
   1474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1475          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1476          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine141 & 0xFFFF
   1477            uint8 *deviceAddr;
   1478            uint8 capInfo;
   1479            uint8 stat;
   1480          
   1481            // Parse the message
   1482            deviceAddr = inMsg->asdu;
   1483            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1484          
   1485            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_312:
   \   00000D   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??NLME_DirectJoinRequest?relay
   \   00001D   E9           MOV     A,R1
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   F0           MOVX    @DPTR,A
   1486          
   1487            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV     ?V0 + 0,#0x0
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   8582..       MOV     ?V0 + 0,DPL
   \   000035   8583..       MOV     ?V0 + 1,DPH
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..35       MOV     ?V0 + 0,#0x35
   \   000040   75..80       MOV     ?V0 + 1,#-0x80
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7901         MOV     R1,#0x1
   \   00004A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1488          }
   \   000050                REQUIRE ?Subroutine193
   \   000050                ; // Fall through to label ?Subroutine193

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine195_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine210_0
   \   000004                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003                REQUIRE ??Subroutine211_0
   \   000003                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005                REQUIRE ??Subroutine212_0
   \   000005                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000003   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000006                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000006                REQUIRE ?Subroutine183
   \   000006                ; // Fall through to label ?Subroutine183

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   22           RET
   1489          
   1490          /*********************************************************************
   1491           * @fn          ZDO_ProcessMgmtLeaveReq
   1492           * @brief       This function processes a Management Leave Request
   1493           *              and generates the response.
   1494           * @param       inMsg - incoming message (request)
   1495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1496          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1497          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1498            NLME_LeaveReq_t req;
   1499            ZStatus_t       status;
   1500            uint8           option;
   1501            uint8 *msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine92 & 0xFFFF
   1502          
   1503            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1504                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_148:
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000017   E9           MOV     A,R1
   \   000018   6013         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001A                ; Setup parameters for call to function sAddrExtCmp
   \   00001A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001A   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??sAddrExtCmp?relay
   \   000028   E9           MOV     A,R1
   \   000029   6401         XRL     A,#0x1
   \   00002B   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1505            {
   1506              // Remove this device
   1507              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1508            }
   1509            else
   1510            {
   1511              // Remove child device
   1512              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   EE           MOV     A,R6
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EF           MOV     A,R7
   1513            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000040   12....       LCALL   ?Subroutine37 & 0xFFFF
   1514          
   1515            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_72:
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   1516            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004C   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1517            {
   1518              req.removeChildren = TRUE;
   \   00004E   7403         MOV     A,#0x3
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   7401         MOV     A,#0x1
   \   000055   F0           MOVX    @DPTR,A
   1519            }
   1520          
   1521            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000056   EA           MOV     A,R2
   \   000057   A2E7         MOV     C,0xE0 /* A   */.7
   \   000059   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1522            {
   1523               req.rejoin = TRUE;
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7401         MOV     A,#0x1
   \   000062   F0           MOVX    @DPTR,A
   1524            }
   1525          
   1526            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000063   7405         MOV     A,#0x5
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   1527          
   1528            status = NLME_LeaveReq( &req );
   \   00006A                ; Setup parameters for call to function NLME_LeaveReq
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   AA82         MOV     R2,DPL
   \   000071   AB83         MOV     R3,DPH
   \   000073   12....       LCALL   ??NLME_LeaveReq?relay
   \   000076   E9           MOV     A,R1
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   F0           MOVX    @DPTR,A
   1529          
   1530            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00007E                ; Setup parameters for call to function ZDP_SendData
   \   00007E   75..00       MOV     ?V0 + 2,#0x0
   \   000081   78..         MOV     R0,#?V0 + 2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   7401         MOV     A,#0x1
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   8582..       MOV     ?V0 + 2,DPL
   \   00008E   8583..       MOV     ?V0 + 3,DPH
   \   000091   78..         MOV     R0,#?V0 + 2
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   75..34       MOV     ?V0 + 2,#0x34
   \   000099   75..80       MOV     ?V0 + 3,#-0x80
   \   00009C   78..         MOV     R0,#?V0 + 2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   7901         MOV     R1,#0x1
   \   0000A3   E5..         MOV     A,?V0 + 0
   \   0000A5   2402         ADD     A,#0x2
   \   0000A7   FC           MOV     R4,A
   \   0000A8   E5..         MOV     A,?V0 + 1
   \   0000AA   3400         ADDC    A,#0x0
   \   0000AC   FD           MOV     R5,A
   \   0000AD   E5..         MOV     A,?V0 + 0
   \   0000AF   240F         ADD     A,#0xf
   \   0000B1   FA           MOV     R2,A
   \   0000B2   E5..         MOV     A,?V0 + 1
   \   0000B4   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   1531          }
   \   0000BA   7406         MOV     A,#0x6
   \   0000BC   02....       LJMP    ?Subroutine170 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1532          
   1533          
   1534          /*********************************************************************
   1535           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1536           * @brief       This function processes a Management Permit Join Request
   1537           *              and generates the response.
   1538           * @param       inMsg - incoming message (request)
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1541          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine141 & 0xFFFF
   1542            uint8 stat;
   1543            uint8 duration;
   1544            uint8 tcsig;
   1545          
   1546            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1547            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1548          
   1549            // Set the network layer permit join duration
   1550            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_313:
   \   00000D   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??NLME_PermitJoiningRequest?relay
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   1551          
   1552            // Handle the Trust Center Significance
   1553            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1554            {
   1555              if ( tcsig == TRUE )
   1556              {
   1557                ZDSecMgrPermitJoining( duration );
   1558              }
   1559            }
   1560          
   1561            // Send a response if unicast
   1562            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \   00001C   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
   \   000023   E0           MOVX    A,@DPTR
   \   000024   64FF         XRL     A,#0xff
   \   000026   7004         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   64FF         XRL     A,#0xff
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00002C   602B         JZ      ??ZDO_ProcessMgmtPermitJoinReq_1
   1563            {
   1564              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002E                ; Setup parameters for call to function ZDP_SendData
   \   00002E   75..00       MOV     ?V0 + 0,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   8582..       MOV     ?V0 + 0,DPL
   \   00003E   8583..       MOV     ?V0 + 1,DPH
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..36       MOV     ?V0 + 0,#0x36
   \   000049   75..80       MOV     ?V0 + 1,#-0x80
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7901         MOV     R1,#0x1
   \   000053   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   1565            }
   \                     ??CrossCallReturnLabel_318:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   1566          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000059   02....       LJMP    ?Subroutine193 & 0xFFFF
   1567          
   1568          /*
   1569           * This function stub allows the next higher layer to be notified of
   1570           * a permit joining timeout.
   1571           */
   1572          /*********************************************************************
   1573           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1574           * @brief       This function stub allows the next higher layer to be
   1575           *              notified of a permit joining timeout. Currently, this
   1576           *              directly bypasses the APS layer.
   1577           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1578          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1579          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1580            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1581            // Currently, only the ZDSecMgr needs to be notified
   1582            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1583            {
   1584              ZDSecMgrPermitJoiningTimeout();
   1585            }
   1586            #endif
   1587          }
   \   000000   02....       LJMP    ?BRET
   1588          
   1589          /*********************************************************************
   1590           * @fn          ZDO_ProcessUserDescReq
   1591           * @brief       This function finishes the processing of the User
   1592           *              Descriptor Request and generates the response.
   1593           * @param       inMsg - incoming message (request)
   1594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1595          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1596          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine50 & 0xFFFF
   1597            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_281:
   \   00000D   F5..         MOV     ?V0 + 4,A
   \   00000F   E9           MOV     A,R1
   \   000010   F5..         MOV     ?V0 + 5,A
   1598            UserDescriptorFormat_t userDesc;
   1599          
   1600            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1601                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000012   EE           MOV     A,R6
   \   000013   240F         ADD     A,#0xf
   \   000015   F5..         MOV     ?V0 + 2,A
   \   000017   EF           MOV     A,R7
   \   000018   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   00001B   EE           MOV     A,R6
   \   00001C   2402         ADD     A,#0x2
   \   00001E   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000021   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000024   E0           MOVX    A,@DPTR
   \   000025   65..         XRL     A,?V0 + 4
   \   000027   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   65..         XRL     A,?V0 + 5
   \                     ??ZDO_ProcessUserDescReq_0:
   \   00002D   7061         JNZ     ??ZDO_ProcessUserDescReq_1
   \   00002F                ; Setup parameters for call to function osal_nv_read
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   8582..       MOV     ?V0 + 6,DPL
   \   000038   8583..       MOV     ?V0 + 7,DPH
   \   00003B   78..         MOV     R0,#?V0 + 6
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..11       MOV     ?V0 + 6,#0x11
   \   000043   75..00       MOV     ?V0 + 7,#0x0
   \   000046   78..         MOV     R0,#?V0 + 6
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C00         MOV     R4,#0x0
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7A81         MOV     R2,#-0x7f
   \   000051   7B00         MOV     R3,#0x0
   \   000053   12....       LCALL   ??osal_nv_read?relay
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   E9           MOV     A,R1
   \   00005C   7032         JNZ     ??ZDO_ProcessUserDescReq_1
   1602            {
   1603              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00005E                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00005E   75..00       MOV     ?V0 + 6,#0x0
   \   000061   78..         MOV     R0,#?V0 + 6
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   7401         MOV     A,#0x1
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   8582..       MOV     ?V0 + 6,DPL
   \   00006E   8583..       MOV     ?V0 + 7,DPH
   \   000071   78..         MOV     R0,#?V0 + 6
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   AC..         MOV     R4,?V0 + 4
   \   000078   AD..         MOV     R5,?V0 + 5
   \   00007A   AA..         MOV     R2,?V0 + 0
   \   00007C   AB..         MOV     R3,?V0 + 1
   \   00007E   85..82       MOV     DPL,?V0 + 2
   \   000081   85..83       MOV     DPH,?V0 + 3
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   ??ZDP_UserDescRsp?relay
   \   000089   7403         MOV     A,#0x3
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   802A         SJMP    ??ZDO_ProcessUserDescReq_2
   1604            }
   1605            else
   1606            {
   1607              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1608                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000090                ; Setup parameters for call to function ZDP_GenericRsp
   \   000090   75..11       MOV     ?V0 + 6,#0x11
   \   000093   75..80       MOV     ?V0 + 7,#-0x80
   \   000096   78..         MOV     R0,#?V0 + 6
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   78..         MOV     R0,#?V0 + 4
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   12....       LCALL   ?Subroutine104 & 0xFFFF
   1609            }
   \                     ??CrossCallReturnLabel_261:
   \   0000A3   FD           MOV     R5,A
   \   0000A4   7C84         MOV     R4,#-0x7c
   \   0000A6   AA..         MOV     R2,?V0 + 0
   \   0000A8   AB..         MOV     R3,?V0 + 1
   \   0000AA   85..82       MOV     DPL,?V0 + 2
   \   0000AD   85..83       MOV     DPH,?V0 + 3
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   ??ZDP_GenericRsp?relay
   \   0000B5   7404         MOV     A,#0x4
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   1610          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000BA   7411         MOV     A,#0x11
   \   0000BC   02....       LJMP    ?Subroutine192 & 0xFFFF
   1611          
   1612          /*********************************************************************
   1613           * @fn          ZDO_ProcessUserDescSet
   1614           * @brief       This function finishes the processing of the User
   1615           *              Descriptor Set and generates the response.
   1616           * @param       inMsg - incoming message (request)
   1617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1618          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1619          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1620            uint8 *msg;
   1621            uint16 aoi;
   1622            UserDescriptorFormat_t userDesc;
   1623            uint8 outMsg[3];
   1624            uint8 status;
   1625          
   1626            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine62 & 0xFFFF
   1627            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_102:
   \   000011   F5..         MOV     ?V0 + 0,A
   \   000013   EB           MOV     A,R3
   \   000014   F5..         MOV     ?V0 + 1,A
   1628          
   1629            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000016   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   65..         XRL     A,?V0 + 0
   \   00001C   7004         JNZ     ??ZDO_ProcessUserDescSet_0
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1630            {
   1631              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   9410         SUBB    A,#0x10
   \   000031   5004         JNC     ??ZDO_ProcessUserDescSet_2
   \   000033   EA           MOV     A,R2
   \   000034   FB           MOV     R3,A
   \   000035   8002         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000037   7B10         MOV     R3,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   EB           MOV     A,R3
   \   00003F   12....       LCALL   ?Subroutine33 & 0xFFFF
   1632              msg ++;  // increment one for the length field
   1633          
   1634              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_65:
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A982         MOV     R1,DPL
   \   000046   AA83         MOV     R2,DPH
   \   000048   89..         MOV     ?V0 + 4,R1
   \   00004A   8A..         MOV     ?V0 + 5,R2
   \   00004C   75..00       MOV     ?V0 + 6,#0x0
   \   00004F   78..         MOV     R0,#?V0 + 4
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000054   7406         MOV     A,#0x6
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FC           MOV     R4,A
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7407         MOV     A,#0x7
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   1635              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   00006C                ; Setup parameters for call to function osal_nv_write
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   8582..       MOV     ?V0 + 2,DPL
   \   000074   8583..       MOV     ?V0 + 3,DPH
   \   000077   78..         MOV     R0,#?V0 + 2
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   75..11       MOV     ?V0 + 2,#0x11
   \   00007F   75..00       MOV     ?V0 + 3,#0x0
   \   000082   78..         MOV     R0,#?V0 + 2
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   7C00         MOV     R4,#0x0
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   7A81         MOV     R2,#-0x7f
   \   00008D   7B00         MOV     R3,#0x0
   \   00008F   12....       LCALL   ??osal_nv_write?relay
   \   000092   7404         MOV     A,#0x4
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   1636              if ( userDesc.len != 0 )
   \   000097   7403         MOV     A,#0x3
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000A0   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1637              {
   1638                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   D2E4         SETB    0xE0 /* A   */.4
   \   0000A5   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1639              }
   1640              else
   1641              {
   1642                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000AA   F0           MOVX    @DPTR,A
   1643              }
   1644          
   1645              status = ZDP_SUCCESS;
   \   0000AB   7A00         MOV     R2,#0x0
   \   0000AD   8002         SJMP    ??ZDO_ProcessUserDescSet_6
   1646            }
   1647            else
   1648            {
   1649              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000AF   7A84         MOV     R2,#-0x7c
   1650            }
   1651          
   1652            outMsg[0] = status;
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000B1   EA           MOV     A,R2
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   F0           MOVX    @DPTR,A
   1653            outMsg[1] = LO_UINT16( aoi );
   \   0000B9   7401         MOV     A,#0x1
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E5..         MOV     A,?V0 + 0
   \   0000C0   F0           MOVX    @DPTR,A
   1654            outMsg[2] = LO_UINT16( aoi );
   \   0000C1   7402         MOV     A,#0x2
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   E5..         MOV     A,?V0 + 0
   \   0000C8   F0           MOVX    @DPTR,A
   1655          
   1656            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1657                         inMsg->SecurityUse );
   \   0000C9                ; Setup parameters for call to function ZDP_SendData
   \   0000C9   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0000CC   EF           MOV     A,R7
   \   0000CD   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   8582..       MOV     ?V0 + 0,DPL
   \   0000DB   8583..       MOV     ?V0 + 1,DPH
   \   0000DE   78..         MOV     R0,#?V0 + 0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   75..14       MOV     ?V0 + 0,#0x14
   \   0000E6   75..80       MOV     ?V0 + 1,#-0x80
   \   0000E9   78..         MOV     R0,#?V0 + 0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   7903         MOV     R1,#0x3
   \   0000F0   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   1658          }
   \   0000F6   7414         MOV     A,#0x14
   \   0000F8                REQUIRE ?Subroutine184
   \   0000F8                ; // Fall through to label ?Subroutine184

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine217_0
   \   000003                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1659          
   1660          /*********************************************************************
   1661           * @fn          ZDO_ProcessDeviceAnnce
   1662           * @brief       This function processes a device annouce message.
   1663           * @param       inMsg - incoming message
   1664           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1665          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1666          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1667            ZDO_DeviceAnnce_t Annce;
   1668            AddrMgrEntry_t addrEntry;
   1669            uint8 parentExt[Z_EXTADDR_LEN];
   1670          
   1671            // Parse incoming message
   1672            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000A                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000A   740D         MOV     A,#0xd
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   1673          
   1674            if ( ZSTACK_END_DEVICE_BUILD )
   1675            {
   1676              // Make sure the message didn't come from myself - end device only
   1677              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000016                ; Setup parameters for call to function sAddrExtCmp
   \   000016   740F         MOV     A,#0xf
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   AE82         MOV     R6,DPL
   \   00001D   AF83         MOV     R7,DPH
   \   00001F                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001F   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000022   EE           MOV     A,R6
   \   000023   FC           MOV     R4,A
   \   000024   EF           MOV     A,R7
   \   000025   FD           MOV     R5,A
   \   000026   12....       LCALL   ??sAddrExtCmp?relay
   \   000029   E9           MOV     A,R1
   \   00002A   6019         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   00002C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00002F   8A..         MOV     ?V0 + 0,R2
   \   000031   8B..         MOV     ?V0 + 1,R3
   \   000033   A8..         MOV     R0,?V0 + 0
   \   000035   A9..         MOV     R1,?V0 + 1
   \   000037   740D         MOV     A,#0xd
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   68           XRL     A,R0
   \   00003E   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000043   605B         JZ      ??CrossCallReturnLabel_185
   1678              {
   1679                return;
   1680              }
   1681            }
   1682          
   1683          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1684            // Clean up the neighbor table
   1685            nwkNeighborRemoveAllStranded();
   1686          
   1687            // If address conflict is detected, no need to update the address manager
   1688            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   1689            {
   1690              return;
   1691            }
   1692          #endif
   1693          
   1694          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1695            // Check for parent's address
   1696            NLME_GetCoordExtAddr( parentExt );
   1697            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   1698            {
   1699              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   1700              {
   1701                // Set the Parent's MAC's new short address
   1702                _NIB.nwkCoordAddress = Annce.nwkAddr;
   1703                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   1704              }
   1705            }
   1706          
   1707            if ( ZSTACK_ROUTER_BUILD )
   1708            {
   1709              // If the device annce comes from a end device child that has moved
   1710              // to another parent, remove it from associated device list
   1711          
   1712              // If the dev annce is coming from other device's children,
   1713              // (The dev annce from its own children shall be unicast to itself,
   1714              // So check the mac destination address)
   1715              // Remove it from the associated device list. If it is not
   1716              // a child, no action will be taken in AssocRemove() anyway.
   1717              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1718              {
   1719                associated_devices_t *dev_ptr;
   1720          
   1721                // If it's an end device child
   1722                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1723                if ( dev_ptr )
   1724                {
   1725                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1726                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1727                  {
   1728                    AssocRemove( Annce.extAddr );
   1729                  }
   1730                }
   1731              }
   1732          
   1733              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1734              {
   1735                // If an associated device is found with matched extended Address,
   1736                // update its short address
   1737                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1738                {
   1739                  // Update the neighbor table
   1740                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   1741          
   1742                  // Set event to save NV
   1743                  ZDApp_NVUpdate();
   1744                }
   1745              }
   1746            }
   1747            
   1748            // Assume that the device has moved, remove existing routing entries
   1749            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   1750            
   1751          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1752          
   1753          
   1754            // Fill in the extended address in address manager if we don't have it already.
   1755            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000045   E4           CLR     A
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   F0           MOVX    @DPTR,A
   1756            addrEntry.nwkAddr = Annce.nwkAddr;
   \   00004D   740D         MOV     A,#0xd
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E8           MOV     A,R0
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E9           MOV     A,R1
   \   00005C   12....       LCALL   ?Subroutine12 & 0xFFFF
   1757            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_238:
   \   00005F   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000062   E9           MOV     A,R1
   \   000063   603B         JZ      ??CrossCallReturnLabel_185
   1758            {
   1759              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000065                ; Setup parameters for call to function osal_memset
   \   000065   7C08         MOV     R4,#0x8
   \   000067   7D00         MOV     R5,#0x0
   \   000069   7900         MOV     R1,#0x0
   \   00006B   7418         MOV     A,#0x18
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   AA82         MOV     R2,DPL
   \   000072   AB83         MOV     R3,DPH
   \   000074   12....       LCALL   ??osal_memset?relay
   1760              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000077                ; Setup parameters for call to function sAddrExtCmp
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AC82         MOV     R4,DPL
   \   00007E   AD83         MOV     R5,DPH
   \   000080   7418         MOV     A,#0x18
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   AA82         MOV     R2,DPL
   \   000087   AB83         MOV     R3,DPH
   \   000089   12....       LCALL   ??sAddrExtCmp?relay
   \   00008C   E9           MOV     A,R1
   \   00008D   6011         JZ      ??CrossCallReturnLabel_185
   1761              {
   1762                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   00008F                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00008F   740F         MOV     A,#0xf
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   AC82         MOV     R4,DPL
   \   000096   AD83         MOV     R5,DPH
   \   000098   7403         MOV     A,#0x3
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   12....       LCALL   ?Subroutine119 & 0xFFFF
   1763                AddrMgrEntryUpdate( &addrEntry );
   1764              }
   1765            }
   \                     ??CrossCallReturnLabel_185:
   \   0000A0   7420         MOV     A,#0x20
   \   0000A2   02....       LJMP    ??Subroutine195_0 & 0xFFFF
   1766          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET
   1767          
   1768          /*********************************************************************
   1769           * @fn          ZDO_BuildSimpleDescBuf
   1770           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1771           * @param       buf  - pointer to a byte array big enough for data.
   1772           * @param       desc - SimpleDescriptionFormat_t *
   1773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1774          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1775          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   1776            byte cnt;
   1777            uint16 *ptr;
   1778          
   1779            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine74 & 0xFFFF
   1780            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_239:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine11 & 0xFFFF
   1781            *buf++ = LO_UINT16( desc->AppProfId );
   1782            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_13:
   \   000018   EC           MOV     A,R4
   \   000019   2403         ADD     A,#0x3
   \   00001B   F8           MOV     R0,A
   \   00001C   ED           MOV     A,R5
   \   00001D   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000020   12....       LCALL   ?Subroutine11 & 0xFFFF
   1783            *buf++ = LO_UINT16( desc->AppDeviceId );
   1784          
   1785            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_14:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C4           SWAP    A
   \   00002E   54F0         ANL     A,#0xf0
   \   000030   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   1786          
   1787            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_337:
   \   000033   EC           MOV     A,R4
   \   000034   2406         ADD     A,#0x6
   \   000036   08           INC     R0
   \   000037   08           INC     R0
   \   000038   08           INC     R0
   \   000039   ED           MOV     A,R5
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F9           MOV     R1,A
   \   00003D   88..         MOV     ?V0 + 0,R0
   \   00003F   89..         MOV     ?V0 + 1,R1
   \   000041   8882         MOV     DPL,R0
   \   000043   F583         MOV     DPH,A
   \   000045   12....       LCALL   ?Subroutine124 & 0xFFFF
   1788            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_338:
   \   000048   8C82         MOV     DPL,R4
   \   00004A   8D83         MOV     DPH,R5
   \   00004C   12....       LCALL   ?Subroutine86 & 0xFFFF
   1789            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_140:
   \   00004F   800B         SJMP    ??CrossCallReturnLabel_24
   1790            {
   1791              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   12....       LCALL   ?Subroutine77 & 0xFFFF
   1792              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_127:
   \   000059   12....       LCALL   ?Subroutine17 & 0xFFFF
   1793            }
   \                     ??CrossCallReturnLabel_24:
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   A882         MOV     R0,DPL
   \   000063   A983         MOV     R1,DPH
   \   000065   85..82       MOV     DPL,?V0 + 0
   \   000068   85..83       MOV     DPH,?V0 + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F5..         MOV     ?V0 + 2,A
   \   00006E   E5..         MOV     A,?V0 + 4
   \   000070   C3           CLR     C
   \   000071   95..         SUBB    A,?V0 + 2
   \   000073   40DC         JC      ??ZDO_BuildSimpleDescBuf_0
   1794          
   1795            *buf++ = desc->AppNumOutClusters;
   \   000075   EC           MOV     A,R4
   \   000076   2409         ADD     A,#0x9
   \   000078   FE           MOV     R6,A
   \   000079   ED           MOV     A,R5
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   FF           MOV     R7,A
   \   00007D   8E..         MOV     ?V0 + 0,R6
   \   00007F   8F..         MOV     ?V0 + 1,R7
   \   000081   8E82         MOV     DPL,R6
   \   000083   F583         MOV     DPH,A
   \   000085   12....       LCALL   ?Subroutine77 & 0xFFFF
   1796            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_128:
   \   000088   8C82         MOV     DPL,R4
   \   00008A   8D83         MOV     DPH,R5
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   12....       LCALL   ?Subroutine86 & 0xFFFF
   1797            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_141:
   \   000092   800B         SJMP    ??CrossCallReturnLabel_25
   1798            {
   1799              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   12....       LCALL   ?Subroutine74 & 0xFFFF
   1800              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_240:
   \   00009C   12....       LCALL   ?Subroutine17 & 0xFFFF
   1801            }
   \                     ??CrossCallReturnLabel_25:
   \   00009F   85..82       MOV     DPL,?V0 + 0
   \   0000A2   85..83       MOV     DPH,?V0 + 1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FC           MOV     R4,A
   \   0000A7   E5..         MOV     A,?V0 + 4
   \   0000A9   C3           CLR     C
   \   0000AA   9C           SUBB    A,R4
   \   0000AB   40E7         JC      ??ZDO_BuildSimpleDescBuf_1
   1802          }
   \   0000AD   7F05         MOV     R7,#0x5
   \   0000AF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   00000A   75..00       MOV     ?V0 + 4,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   E8           MOV     A,R0
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   02....       LJMP    ?Subroutine180 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000007   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00000A   05..         INC     ?V0 + 4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine218_0
   \   000001                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET
   1803          
   1804          /*********************************************************************
   1805           * @fn      ZDO_MatchEndDeviceBind()
   1806           * @brief   Called to match end device binding requests
   1807           * @param   bindReq  - binding request information
   1808           *          SecurityUse - Security enable/disable
   1809           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1810          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   1811          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1812            zAddrType_t dstAddr;
   1813            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   1814            uint8 status;
   1815            
   1816          #if defined(Coor_receiver)
   1817            if(((bindReq->srcAddr) != 0) && ((bindReq->srcAddr) != (dev_sht[cnt-1].srcAddr))) // The shortaddr is End Device or Router shortaddr
   1818            {
   1819              ZDO_CopyMatchInfo( &dev_sht[cnt], bindReq );
   1820              cnt++;
   1821            }
   1822            if((bindReq->srcAddr) == 0) // The coordinator shortaddr is number "0"
   1823            {
   1824              ZDO_CopyMatchInfo( &coordinator, bindReq );
   1825            }
   1826          #endif
   1827            
   1828            if ( matchED == NULL ) // Is this the first request?
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7002         JNZ     ??ZDO_MatchEndDeviceBind_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000019   703E         JNZ     ??ZDO_MatchEndDeviceBind_1
   1829            {
   1830              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) ); // Create match info structure
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A37         MOV     R2,#0x37
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000022   12....       LCALL   ?Subroutine22 & 0xFFFF
   1831              if ( matchED )
   \                     ??CrossCallReturnLabel_40:
   \   000025   90....       MOV     DPTR,#matchED
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7002         JNZ     ??ZDO_MatchEndDeviceBind_2
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   00002D   6019         JZ      ??ZDO_MatchEndDeviceBind_3
   1832              {
   1833                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) ); // Clear the structure
   \   00002F                ; Setup parameters for call to function osal_memset
   \   00002F   7C37         MOV     R4,#0x37
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??osal_memset?relay
   1834                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) ) // Copy the first request's information
   \   000038                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FD           MOV     R5,A
   \   00003C   90....       MOV     DPTR,#matchED
   \   00003F   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000042   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000045   E9           MOV     A,R1
   \   000046   7005         JNZ     ??ZDO_MatchEndDeviceBind_4
   1835                {
   1836                  status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   000048   7488         MOV     A,#-0x78
   \   00004A   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   1837                  sendRsp = TRUE;
   1838                }
   1839              }
   1840              else
   1841                {
   1842                  status = ZDP_NO_ENTRY;
   1843                  sendRsp = TRUE;
   1844                }
   1845          
   1846              if ( !sendRsp )
   1847              {
   1848                matchED->state = ZDMATCH_WAIT_REQ; // Set into the correct state
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   00004D   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   1849                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB ); // Setup the timeout
   \   000053                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000053   12....       LCALL   ?Subroutine82 & 0xFFFF
   1850              }
   1851            }
   \                     ??CrossCallReturnLabel_133:
   \   000056   02....       LJMP    ??ZDO_MatchEndDeviceBind_6 & 0xFFFF
   1852             else
   1853              {
   1854                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000059   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   F0           MOVX    @DPTR,A
   1855          
   1856                // Copy the 2nd request's information
   1857                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   00005F                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00005F   EE           MOV     A,R6
   \   000060   FC           MOV     R4,A
   \   000061   EF           MOV     A,R7
   \   000062   FD           MOV     R5,A
   \   000063   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000066   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000069   E9           MOV     A,R1
   \   00006A   700C         JNZ     ??ZDO_MatchEndDeviceBind_7
   1858                {
   1859                  status = ZDP_NO_ENTRY;
   \   00006C   7488         MOV     A,#-0x78
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   F0           MOVX    @DPTR,A
   1860                  sendRsp = TRUE;
   \   000075   75..01       MOV     ?V0 + 0,#0x1
   1861                }
   1862          
   1863                // Make a source match for ed1
   1864                matchED->ed1numMatched = ZDO_CompareClusterLists(
   1865                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   1866                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   000078                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000078   75....       MOV     ?V0 + 2,#(ZDOBuildBuf & 0xff)
   \   00007B   75....       MOV     ?V0 + 3,#((ZDOBuildBuf >> 8) & 0xff)
   \   00007E   78..         MOV     R0,#?V0 + 2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   90....       MOV     DPTR,#matchED
   \   000086   E0           MOVX    A,@DPTR
   \   000087   2429         ADD     A,#0x29
   \   000089   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00008C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008F   90....       MOV     DPTR,#matchED
   \   000092   E0           MOVX    A,@DPTR
   \   000093   2428         ADD     A,#0x28
   \   000095   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000098   2415         ADD     A,#0x15
   \   00009A   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00009D   2414         ADD     A,#0x14
   \   00009F   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV     A,R1
   \   0000A6   C0E0         PUSH    A
   \   0000A8   90....       MOV     DPTR,#matchED
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   2431         ADD     A,#0x31
   \   0000AE   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0000B1   D0E0         POP     A
   \   0000B3   12....       LCALL   ?Subroutine34 & 0xFFFF
   1867                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_241:
   \   0000B6   2431         ADD     A,#0x31
   \   0000B8   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   0000BB   75....       MOV     ?V0 + 4,#(ZDOBuildBuf & 0xff)
   \   0000BE   75....       MOV     ?V0 + 5,#((ZDOBuildBuf >> 8) & 0xff)
   \   0000C1   75..00       MOV     ?V0 + 6,#0x0
   \   0000C4   602E         JZ      ??ZDO_MatchEndDeviceBind_8
   1868                {
   1869                  // Save the match list
   1870                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000C6                ; Setup parameters for call to function osal_mem_alloc
   \   0000C6   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   2432         ADD     A,#0x32
   \   0000CC   12....       LCALL   ?Subroutine2 & 0xFFFF
   1871                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_457:
   \   0000CF   FA           MOV     R2,A
   \   0000D0   7001         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   0000D2   EB           MOV     A,R3
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0000D3   6013         JZ      ??ZDO_MatchEndDeviceBind_10
   1872                  {
   1873                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000D5                ; Setup parameters for call to function osal_memcpy
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DA   90....       MOV     DPTR,#matchED
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   2431         ADD     A,#0x31
   \   0000E0   12....       LCALL   ?Subroutine44 & 0xFFFF
   1874                  }
   \                     ??CrossCallReturnLabel_449:
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   800C         SJMP    ??ZDO_MatchEndDeviceBind_8
   1875                  else
   1876                  {
   1877                    // Allocation error, stop
   1878                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0000E8   7488         MOV     A,#-0x78
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   F0           MOVX    @DPTR,A
   1879                    sendRsp = TRUE;
   \   0000F1   75..01       MOV     ?V0 + 0,#0x1
   1880                  }
   1881                }
   1882          
   1883                // Make a source match for ed2
   1884                matchED->ed2numMatched = ZDO_CompareClusterLists(
   1885                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   1886                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   0000F4                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000F4   78..         MOV     R0,#?V0 + 2
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   90....       MOV     DPTR,#matchED
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   2412         ADD     A,#0x12
   \   0000FF   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000102   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000105   90....       MOV     DPTR,#matchED
   \   000108   E0           MOVX    A,@DPTR
   \   000109   2411         ADD     A,#0x11
   \   00010B   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00010E   242C         ADD     A,#0x2c
   \   000110   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000113   242B         ADD     A,#0x2b
   \   000115   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011B   E9           MOV     A,R1
   \   00011C   C0E0         PUSH    A
   \   00011E   90....       MOV     DPTR,#matchED
   \   000121   E0           MOVX    A,@DPTR
   \   000122   2434         ADD     A,#0x34
   \   000124   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000127   D0E0         POP     A
   \   000129   12....       LCALL   ?Subroutine34 & 0xFFFF
   1887                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_242:
   \   00012C   2434         ADD     A,#0x34
   \   00012E   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000131   6020         JZ      ??ZDO_MatchEndDeviceBind_11
   1888                {
   1889                  // Save the match list
   1890                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000133                ; Setup parameters for call to function osal_mem_alloc
   \   000133   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000136   E0           MOVX    A,@DPTR
   \   000137   2435         ADD     A,#0x35
   \   000139   12....       LCALL   ?Subroutine2 & 0xFFFF
   1891                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_458:
   \   00013C   FA           MOV     R2,A
   \   00013D   7001         JNZ     ??ZDO_MatchEndDeviceBind_12
   \   00013F   EB           MOV     A,R3
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000140   602B         JZ      ??ZDO_MatchEndDeviceBind_13
   1892                  {
   1893                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000142                ; Setup parameters for call to function osal_memcpy
   \   000142   78..         MOV     R0,#?V0 + 4
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000147   90....       MOV     DPTR,#matchED
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   2434         ADD     A,#0x34
   \   00014D   12....       LCALL   ?Subroutine44 & 0xFFFF
   1894                  }
   \                     ??CrossCallReturnLabel_450:
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
   1895                  else
   1896                  {
   1897                    // Allocation error, stop
   1898                    status = ZDP_NO_ENTRY;
   1899                    sendRsp = TRUE;
   1900                  }
   1901                }
   1902          
   1903                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000153   E5..         MOV     A,?V0 + 0
   \   000155   701F         JNZ     ??ZDO_MatchEndDeviceBind_14
   \   000157   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00015A   7005         JNZ     ??ZDO_MatchEndDeviceBind_15
   \   00015C   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00015F   6015         JZ      ??ZDO_MatchEndDeviceBind_14
   1904                {
   1905                  // Do the first unbind/bind state
   1906                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_15:
   \   000161                ; Setup parameters for call to function ZDMatchSendState
   \   000161   7B00         MOV     R3,#0x0
   \   000163   7A00         MOV     R2,#0x0
   \   000165   7900         MOV     R1,#0x0
   \   000167   12....       LCALL   ??ZDMatchSendState?relay
   \   00016A   02....       LJMP    ??ZDO_MatchEndDeviceBind_6 & 0xFFFF
   1907                }
   \                     ??ZDO_MatchEndDeviceBind_13:
   \   00016D   7488         MOV     A,#-0x78
   \   00016F   85..82       MOV     DPL,?XSP + 0
   \   000172   85..83       MOV     DPH,?XSP + 1
   \   000175   F0           MOVX    @DPTR,A
   1908                else
   1909                {
   1910                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_14:
   \   000176   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000178   85..82       MOV     DPL,?XSP + 0
   \   00017B   85..83       MOV     DPH,?XSP + 1
   \   00017E   F0           MOVX    @DPTR,A
   1911                  sendRsp = TRUE;
   1912                }
   1913              }
   1914          
   1915            if ( sendRsp ) // send response to this requester
   1916            {
   1917              dstAddr.addrMode = Addr16Bit;
   \   00017F   7409         MOV     A,#0x9
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   7402         MOV     A,#0x2
   \   000186   F0           MOVX    @DPTR,A
   1918              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   000187   8E82         MOV     DPL,R6
   \   000189   8F83         MOV     DPH,R7
   \   00018B   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   00018E   12....       LCALL   ?XSTACK_DISP0_8
   \   000191   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   1919              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_290:
   \   000194                ; Setup parameters for call to function ZDP_SendData
   \   000194   8E82         MOV     DPL,R6
   \   000196   8F83         MOV     DPH,R7
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F5..         MOV     ?V0 + 0,A
   \   00019C   78..         MOV     R0,#?V0 + 0
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A1   7401         MOV     A,#0x1
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   8582..       MOV     ?V0 + 0,DPL
   \   0001A9   8583..       MOV     ?V0 + 1,DPH
   \   0001AC   78..         MOV     R0,#?V0 + 0
   \   0001AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B1   75..20       MOV     ?V0 + 0,#0x20
   \   0001B4   75..80       MOV     ?V0 + 1,#-0x80
   \   0001B7   78..         MOV     R0,#?V0 + 0
   \   0001B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BC   7901         MOV     R1,#0x1
   \   0001BE   7406         MOV     A,#0x6
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   AC82         MOV     R4,DPL
   \   0001C5   AD83         MOV     R5,DPH
   \   0001C7   EE           MOV     A,R6
   \   0001C8   FA           MOV     R2,A
   \   0001C9   EF           MOV     A,R7
   \   0001CA   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0001CD   12....       LCALL   ?DEALLOC_XSTACK8
   1920              
   1921              if ( matchED->state == ZDMATCH_SENDING_BINDS ) // send response to first requester
   \   0001D0   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001D3   703E         JNZ     ??ZDO_MatchEndDeviceBind_16
   1922              {   
   1923                dstAddr.addrMode = Addr16Bit;
   \   0001D5   7409         MOV     A,#0x9
   \   0001D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DA   7402         MOV     A,#0x2
   \   0001DC   12....       LCALL   ?Subroutine34 & 0xFFFF
   1924                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   1925                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   1926              }
   \                     ??CrossCallReturnLabel_243:
   \   0001DF   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   0001E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001EB   7401         MOV     A,#0x1
   \   0001ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F0   8582..       MOV     ?V0 + 0,DPL
   \   0001F3   8583..       MOV     ?V0 + 1,DPH
   \   0001F6   78..         MOV     R0,#?V0 + 0
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FB   75..20       MOV     ?V0 + 0,#0x20
   \   0001FE   75..80       MOV     ?V0 + 1,#-0x80
   \   000201   78..         MOV     R0,#?V0 + 0
   \   000203   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000206   7901         MOV     R1,#0x1
   \   000208   7406         MOV     A,#0x6
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000210   12....       LCALL   ?DEALLOC_XSTACK8
   1927              ZDO_RemoveMatchMemory(); // Process ended - release memory used
   \                     ??ZDO_MatchEndDeviceBind_16:
   \   000213                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000213   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   1928            }
   1929          }
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000216   740A         MOV     A,#0xa
   \   000218   02....       LJMP    ?Subroutine184 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006                REQUIRE ??Subroutine219_0
   \   000006                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006                REQUIRE ??Subroutine221_0
   \   000006                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000003   FC           MOV     R4,A
   \   000004   02....       LJMP    ?Subroutine181 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   18           DEC     R0
   \   000001   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000004   12....       LCALL   ??ZDO_CompareClusterLists?relay
   \   000007   7404         MOV     A,#0x4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000003   02....       LJMP    ?Subroutine181 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine223_0
   \   000003                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2434         ADD     A,#0x34
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   08           INC     R0
   \   000006   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003                REQUIRE ??Subroutine224_0
   \   000003                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   33           RLC     A
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FD           MOV     R5,A
   \   000007   02....       LJMP    ?Subroutine177 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   7C..         MOV     R4,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff)
   \   000002   7D..         MOV     R5,#((??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff)
   \   000004   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000007   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   00000A   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   00000A   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2431         ADD     A,#0x31
   \   000006   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000009   6402         XRL     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine231_0
   \   000002                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ?Subroutine181 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005   90....       MOV     DPTR,#matchED
   \   000008   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   02....       LJMP    ?Subroutine179 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007                REQUIRE ??Subroutine237_0
   \   000007                ; // Fall through to label ??Subroutine237_0
   1930          
   1931          /*********************************************************************
   1932           * @fn      ZDO_RemoveMatchMemory()
   1933           * @brief   Called to clear the memory used for the end device bind.
   1934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1935          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   1936          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1937            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??ZDO_RemoveMatchMemory_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00000C   6073         JZ      ??ZDO_RemoveMatchMemory_1
   1938            {
   1939              if ( matchED->ed2Matched != NULL )
   \   00000E   90....       MOV     DPTR,#matchED
   \   000011   E0           MOVX    A,@DPTR
   \   000012   2435         ADD     A,#0x35
   \   000014   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000017   7001         JNZ     ??ZDO_RemoveMatchMemory_2
   \   000019   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_2:
   \   00001A   6003         JZ      ??ZDO_RemoveMatchMemory_3
   1940                osal_mem_free( matchED->ed2Matched );
   \   00001C                ; Setup parameters for call to function osal_mem_free
   \   00001C   12....       LCALL   ??osal_mem_free?relay
   1941              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   00001F   90....       MOV     DPTR,#matchED
   \   000022   E0           MOVX    A,@DPTR
   \   000023   2432         ADD     A,#0x32
   \   000025   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000028   7001         JNZ     ??ZDO_RemoveMatchMemory_4
   \   00002A   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00002B   6003         JZ      ??ZDO_RemoveMatchMemory_5
   1942                osal_mem_free( matchED->ed1Matched );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   12....       LCALL   ??osal_mem_free?relay
   1943          
   1944              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000030   90....       MOV     DPTR,#matchED
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2412         ADD     A,#0x12
   \   000036   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000039   7001         JNZ     ??ZDO_RemoveMatchMemory_6
   \   00003B   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_6:
   \   00003C   6003         JZ      ??ZDO_RemoveMatchMemory_7
   1945                osal_mem_free( matchED->ed1.inClusters );
   \   00003E                ; Setup parameters for call to function osal_mem_free
   \   00003E   12....       LCALL   ??osal_mem_free?relay
   1946          
   1947              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_7:
   \   000041   90....       MOV     DPTR,#matchED
   \   000044   E0           MOVX    A,@DPTR
   \   000045   2415         ADD     A,#0x15
   \   000047   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00004A   7001         JNZ     ??ZDO_RemoveMatchMemory_8
   \   00004C   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_8:
   \   00004D   6003         JZ      ??ZDO_RemoveMatchMemory_9
   1948                osal_mem_free( matchED->ed1.outClusters );
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL   ??osal_mem_free?relay
   1949          
   1950              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_9:
   \   000052   90....       MOV     DPTR,#matchED
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2429         ADD     A,#0x29
   \   000058   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00005B   7001         JNZ     ??ZDO_RemoveMatchMemory_10
   \   00005D   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_10:
   \   00005E   6003         JZ      ??ZDO_RemoveMatchMemory_11
   1951                osal_mem_free( matchED->ed2.inClusters );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   12....       LCALL   ??osal_mem_free?relay
   1952          
   1953              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_11:
   \   000063   90....       MOV     DPTR,#matchED
   \   000066   E0           MOVX    A,@DPTR
   \   000067   242C         ADD     A,#0x2c
   \   000069   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00006C   7001         JNZ     ??ZDO_RemoveMatchMemory_12
   \   00006E   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_12:
   \   00006F   6003         JZ      ??ZDO_RemoveMatchMemory_13
   1954                osal_mem_free( matchED->ed2.outClusters );
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   12....       LCALL   ??osal_mem_free?relay
   1955          
   1956              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_13:
   \   000074                ; Setup parameters for call to function osal_mem_free
   \   000074   90....       MOV     DPTR,#matchED
   \   000077   12....       LCALL   ?Subroutine57 & 0xFFFF
   1957          
   1958              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     ??CrossCallReturnLabel_98:
   \   00007A   90....       MOV     DPTR,#matchED
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   1959            }
   1960          }
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000081                REQUIRE ?Subroutine169
   \   000081                ; // Fall through to label ?Subroutine169
   1961          
   1962          /*********************************************************************
   1963           * @fn      ZDO_CopyMatchInfo()
   1964           * @brief   Called to copy memory used for the end device bind.
   1965           * @param   srcReq - source information
   1966           *          dstReq - destination location
   1967           * @return  TRUE if copy was successful.
   1968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1969          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   1970          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   1971            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V0 + 2,#0x1
   1972          
   1973            // Copy bind information into the match info structure
   1974            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV     ?V0 + 4,R4
   \   000012   8D..         MOV     ?V0 + 5,R5
   \   000014   75..00       MOV     ?V0 + 6,#0x0
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV     R4,#0x17
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   1975          
   1976            // Initialize the destination cluster pointers
   1977            destReq->inClusters = NULL;
   \   000026   EE           MOV     A,R6
   \   000027   2412         ADD     A,#0x12
   \   000029   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   1978            destReq->outClusters = NULL;
   \   000030   EE           MOV     A,R6
   \   000031   2415         ADD     A,#0x15
   \   000033   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
   1979          
   1980            // Copy input cluster IDs
   1981            if ( srcReq->numInClusters )
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   2411         ADD     A,#0x11
   \   00003E   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000041   603A         JZ      ??ZDO_CopyMatchInfo_0
   1982            {
   1983              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   C3           CLR     C
   \   000044   33           RLC     A
   \   000045   FA           MOV     R2,A
   \   000046   E4           CLR     A
   \   000047   33           RLC     A
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??osal_mem_alloc?relay
   \   00004C   85..82       MOV     DPL,?V0 + 8
   \   00004F   85..83       MOV     DPH,?V0 + 9
   \   000052   12....       LCALL   ?Subroutine22 & 0xFFFF
   1984              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_41:
   \   000055   85..82       MOV     DPL,?V0 + 8
   \   000058   85..83       MOV     DPH,?V0 + 9
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   7001         JNZ     ??ZDO_CopyMatchInfo_1
   \   00005F   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_1:
   \   000060   6018         JZ      ??ZDO_CopyMatchInfo_2
   1985              {
   1986                // Copy the clusters
   1987                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   1988                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   2412         ADD     A,#0x12
   \   000066   12....       LCALL   ?Subroutine78 & 0xFFFF
   1989              }
   \                     ??CrossCallReturnLabel_129:
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   85..82       MOV     DPL,?V0 + 10
   \   00006F   85..83       MOV     DPH,?V0 + 11
   \   000072   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   8003         SJMP    ??ZDO_CopyMatchInfo_0
   1990              else
   1991                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_2:
   \   00007A   75..00       MOV     ?V0 + 2,#0x0
   1992            }
   1993          
   1994            // Copy output cluster IDs
   1995            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   2414         ADD     A,#0x14
   \   000081   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000084   6031         JZ      ??ZDO_CopyMatchInfo_3
   1996            {
   1997              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   C3           CLR     C
   \   000087   33           RLC     A
   \   000088   FA           MOV     R2,A
   \   000089   E4           CLR     A
   \   00008A   33           RLC     A
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   ??osal_mem_alloc?relay
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   12....       LCALL   ?Subroutine22 & 0xFFFF
   1998              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_42:
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   7001         JNZ     ??ZDO_CopyMatchInfo_4
   \   00009E   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_4:
   \   00009F   603F         JZ      ??ZDO_CopyMatchInfo_5
   1999              {
   2000                // Copy the clusters
   2001                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2002                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   0000A1                ; Setup parameters for call to function osal_memcpy
   \   0000A1   E5..         MOV     A,?V0 + 0
   \   0000A3   2415         ADD     A,#0x15
   \   0000A5   12....       LCALL   ?Subroutine78 & 0xFFFF
   2003              }
   \                     ??CrossCallReturnLabel_130:
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AB   85..82       MOV     DPL,?V0 + 10
   \   0000AE   85..83       MOV     DPH,?V0 + 11
   \   0000B1   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   2004              else
   2005                allOK = FALSE;
   2006            }
   2007          
   2008            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000B7   E5..         MOV     A,?V0 + 2
   \   0000B9   7020         JNZ     ??ZDO_CopyMatchInfo_6
   2009            {
   2010              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_7:
   \   0000BB   85..82       MOV     DPL,?V0 + 8
   \   0000BE   85..83       MOV     DPH,?V0 + 9
   \   0000C1   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000C4   7001         JNZ     ??ZDO_CopyMatchInfo_8
   \   0000C6   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_8:
   \   0000C7   6003         JZ      ??ZDO_CopyMatchInfo_9
   2011                osal_mem_free( destReq->inClusters );
   \   0000C9                ; Setup parameters for call to function osal_mem_free
   \   0000C9   12....       LCALL   ??osal_mem_free?relay
   2012              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_9:
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000D3   7001         JNZ     ??ZDO_CopyMatchInfo_10
   \   0000D5   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_10:
   \   0000D6   6003         JZ      ??ZDO_CopyMatchInfo_6
   2013                osal_mem_free( destReq->outClusters );
   \   0000D8                ; Setup parameters for call to function osal_mem_free
   \   0000D8   12....       LCALL   ??osal_mem_free?relay
   2014            }
   2015          
   2016            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000DB   A9..         MOV     R1,?V0 + 2
   \   0000DD   02....       LJMP    ?Subroutine190 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000E0   75..00       MOV     ?V0 + 2,#0x0
   \   0000E3   80D6         SJMP    ??ZDO_CopyMatchInfo_7
   2017          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   FE           MOV     R6,A
   \   000001                REQUIRE ?Subroutine182
   \   000001                REQUIRE ??Subroutine225_0
   \   000001                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F5..         MOV     ?V0 + 10,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 11,A
   \   000008   85..82       MOV     DPL,?V0 + 10
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000007   F5..         MOV     ?V0 + 4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 5,A
   \   00000D   78..         MOV     R0,#?V0 + 4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET
   2018          
   2019          /*********************************************************************
   2020           * @fn      ZDMatchSendState()
   2021           * @brief   State machine for the End device match message algorithm.
   2022           * @param   reason - state of algoritm
   2023           *          status - initial message status
   2024           *          TransSeq - next transaction sequence number
   2025           * @return  FALSE if error and we are not currently matching, TRUE
   2026           *          if success.
   2027           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2028          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2029          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 3,R2
   2030            uint8 *dstIEEEAddr = NULL;
   \   00000E   7E00         MOV     R6,#0x0
   \   000010   7F00         MOV     R7,#0x0
   2031            uint8 dstEP = 0xFF;
   \   000012   75..FF       MOV     ?V0 + 4,#-0x1
   2032            zAddrType_t dstAddr;
   2033            zAddrType_t destinationAddr;
   2034            uint16 msgType;
   2035            uint16 clusterID = 0xFFFF;
   \   000015   75..FF       MOV     ?V0 + 6,#-0x1
   \   000018   75..FF       MOV     ?V0 + 7,#-0x1
   2036            ZDEndDeviceBind_t *ed = NULL;
   \   00001B   8E..         MOV     ?V0 + 0,R6
   \   00001D   8E..         MOV     ?V0 + 1,R6
   2037            uint8 rspStatus = ZDP_SUCCESS;
   \   00001F   E4           CLR     A
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   12....       LCALL   ?Subroutine34 & 0xFFFF
   2038          
   2039            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_244:
   \   000029   7002         JNZ     ??ZDMatchSendState_0
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \                     ??ZDMatchSendState_0:
   \   00002D   7005         JNZ     ??ZDMatchSendState_1
   2040              return ( FALSE );
   \                     ??ZDMatchSendState_2:
   \   00002F   7900         MOV     R1,#0x0
   \   000031   02....       LJMP    ??ZDMatchSendState_3 & 0xFFFF
   2041          
   2042            // Check sequence number
   2043            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_1:
   \   000034   7403         MOV     A,#0x3
   \   000036   65..         XRL     A,?V0 + 2
   \   000038   6006         JZ      ??ZDMatchSendState_4
   \   00003A   7402         MOV     A,#0x2
   \   00003C   65..         XRL     A,?V0 + 2
   \   00003E   700C         JNZ     ??ZDMatchSendState_5
   2044            {
   2045              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_4:
   \   000040   90....       MOV     DPTR,#matchED
   \   000043   E0           MOVX    A,@DPTR
   \   000044   2430         ADD     A,#0x30
   \   000046   12....       LCALL   ?Subroutine68 & 0xFFFF
   2046                return( FALSE ); // ignore the message
   2047            }
   \                     ??CrossCallReturnLabel_371:
   \   000049   6B           XRL     A,R3
   \   00004A   70E3         JNZ     ??ZDMatchSendState_2
   2048          
   2049            // turn off timer
   2050            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_5:
   \   00004C                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00004C   7C..         MOV     R4,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff)
   \   00004E   7D..         MOV     R5,#((??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff)
   \   000050   7A00         MOV     R2,#0x0
   \   000052   7B00         MOV     R3,#0x0
   \   000054   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   2051          
   2052            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000057   7401         MOV     A,#0x1
   \   000059   65..         XRL     A,?V0 + 2
   \   00005B   700B         JNZ     ??ZDMatchSendState_6
   2053            {
   2054              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   00005D   7485         MOV     A,#-0x7b
   \                     ??ZDMatchSendState_7:
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \                     ??ZDMatchSendState_8:
   \   000065   F0           MOVX    @DPTR,A
   \   000066   8038         SJMP    ??ZDMatchSendState_9
   2055            }
   2056          
   2057            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_6:
   \   000068   90....       MOV     DPTR,#matchED
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   242F         ADD     A,#0x2f
   \   00006E   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000071   E5..         MOV     A,?V0 + 2
   \   000073   6006         JZ      ??ZDMatchSendState_10
   \   000075   7403         MOV     A,#0x3
   \   000077   65..         XRL     A,?V0 + 2
   \   000079   700F         JNZ     ??ZDMatchSendState_11
   2058            {
   2059              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_10:
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
   2060          
   2061              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00007E   7403         MOV     A,#0x3
   \   000080   65..         XRL     A,?V0 + 2
   \   000082   7018         JNZ     ??ZDMatchSendState_12
   \   000084   E5..         MOV     A,?V0 + 3
   \   000086   6018         JZ      ??ZDMatchSendState_9
   2062              {
   2063                rspStatus = status;
   \   000088   80D5         SJMP    ??ZDMatchSendState_7
   2064              }
   2065            }
   2066            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_11:
   \   00008A   7402         MOV     A,#0x2
   \   00008C   65..         XRL     A,?V0 + 2
   \   00008E   7010         JNZ     ??ZDMatchSendState_9
   2067            {
   2068              if ( status == ZDP_SUCCESS )
   \   000090   E5..         MOV     A,?V0 + 3
   \   000092   7004         JNZ     ??ZDMatchSendState_13
   2069              {
   2070                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   000094   7401         MOV     A,#0x1
   \   000096   80CD         SJMP    ??ZDMatchSendState_8
   2071              }
   2072              else
   2073              {
   2074                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_13:
   \   000098   7402         MOV     A,#0x2
   \   00009A   80C9         SJMP    ??ZDMatchSendState_8
   2075              }
   2076            }
   2077          
   2078            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_12:
   \   00009C   E5..         MOV     A,?V0 + 2
   \   00009E   6019         JZ      ??ZDMatchSendState_14
   \                     ??ZDMatchSendState_9:
   \   0000A0   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000A3   7014         JNZ     ??ZDMatchSendState_14
   2079            {
   2080              // Move to the next cluster ID
   2081              if ( matchED->ed1numMatched )
   \   0000A5   90....       MOV     DPTR,#matchED
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   2431         ADD     A,#0x31
   \   0000AB   08           INC     R0
   \   0000AC   08           INC     R0
   \   0000AD   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   0000B0   7005         JNZ     ??ZDMatchSendState_15
   2082                matchED->ed1numMatched--;
   2083              else if ( matchED->ed2numMatched )
   \   0000B2   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   0000B5   6002         JZ      ??ZDMatchSendState_14
   2084                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_15:
   \   0000B7   14           DEC     A
   \   0000B8   F0           MOVX    @DPTR,A
   2085            }
   2086          
   2087            // What message do we send now
   2088            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000B9   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000BC   FA           MOV     R2,A
   \   0000BD   90....       MOV     DPTR,#matchED
   \   0000C0   601E         JZ      ??ZDMatchSendState_16
   2089            {
   2090              ed = &(matchED->ed1);
   \   0000C2   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000C5   F5..         MOV     ?V0 + 1,A
   2091              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   0000C7   EA           MOV     A,R2
   \   0000C8   C3           CLR     C
   \   0000C9   33           RLC     A
   \   0000CA   F8           MOV     R0,A
   \   0000CB   E4           CLR     A
   \   0000CC   33           RLC     A
   \   0000CD   F9           MOV     R1,A
   \   0000CE   90....       MOV     DPTR,#matchED
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   2432         ADD     A,#0x32
   \   0000D4   12....       LCALL   ?Subroutine43 & 0xFFFF
   2092              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2093              dstEP = matchED->ed2.endpoint;
   2094            }
   \                     ??CrossCallReturnLabel_245:
   \   0000D7   241D         ADD     A,#0x1d
   \   0000D9   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000DC   2425         ADD     A,#0x25
   \   0000DE   802A         SJMP    ??ZDMatchSendState_17
   2095            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_16:
   \   0000E0   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   0000E3   FA           MOV     R2,A
   \   0000E4   6029         JZ      ??ZDMatchSendState_18
   2096            {
   2097              ed = &(matchED->ed2);
   \   0000E6   90....       MOV     DPTR,#matchED
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   2417         ADD     A,#0x17
   \   0000EC   F5..         MOV     ?V0 + 0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2098              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \                     ??CrossCallReturnLabel_479:
   \   0000F3   EA           MOV     A,R2
   \   0000F4   C3           CLR     C
   \   0000F5   33           RLC     A
   \   0000F6   F8           MOV     R0,A
   \   0000F7   E4           CLR     A
   \   0000F8   33           RLC     A
   \   0000F9   F9           MOV     R1,A
   \   0000FA   90....       MOV     DPTR,#matchED
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   2435         ADD     A,#0x35
   \   000100   12....       LCALL   ?Subroutine43 & 0xFFFF
   2099              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2100              dstEP = matchED->ed1.endpoint;
   2101            }
   \                     ??CrossCallReturnLabel_246:
   \   000103   2406         ADD     A,#0x6
   \   000105   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000108   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_17:
   \   00010A   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   00010D   F5..         MOV     ?V0 + 4,A
   2102          
   2103            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_18:
   \   00010F   7409         MOV     A,#0x9
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?Subroutine35 & 0xFFFF
   2104          
   2105            // Send the next message
   2106            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_69:
   \   000119   6003         JZ      $+5
   \   00011B   02....       LJMP    ??ZDMatchSendState_19 & 0xFFFF
   \   00011E   E5..         MOV     A,?V0 + 0
   \   000120   7002         JNZ     ??ZDMatchSendState_20
   \   000122   E5..         MOV     A,?V0 + 1
   \                     ??ZDMatchSendState_20:
   \   000124   7003         JNZ     $+5
   \   000126   02....       LJMP    ??ZDMatchSendState_19 & 0xFFFF
   2107            {
   2108              // Send unbind/bind message to source
   2109              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   000129   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00012C   7005         JNZ     ??ZDMatchSendState_21
   2110                msgType = Unbind_req;
   \   00012E   75..22       MOV     ?V0 + 2,#0x22
   \   000131   8003         SJMP    ??ZDMatchSendState_22
   2111              else
   2112                msgType = Bind_req;
   \                     ??ZDMatchSendState_21:
   \   000133   75..21       MOV     ?V0 + 2,#0x21
   2113          
   2114              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_22:
   \   000136   85..82       MOV     DPL,?V0 + 0
   \   000139   85..83       MOV     DPH,?V0 + 1
   \   00013C   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   2115          
   2116              // Save off the transaction sequence number
   2117              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_291:
   \   000145   90....       MOV     DPTR,#ZDP_TransID
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   90....       MOV     DPTR,#matchED
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   2430         ADD     A,#0x30
   \   000151   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000154   D0E0         POP     A
   \   000156   F0           MOVX    @DPTR,A
   2118          
   2119              destinationAddr.addrMode = Addr64Bit;
   \   000157   7412         MOV     A,#0x12
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   7403         MOV     A,#0x3
   \   00015E   F0           MOVX    @DPTR,A
   2120              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   00015F                ; Setup parameters for call to function sAddrExtCpy
   \   00015F   EE           MOV     A,R6
   \   000160   FC           MOV     R4,A
   \   000161   EF           MOV     A,R7
   \   000162   FD           MOV     R5,A
   \   000163   740A         MOV     A,#0xa
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   AA82         MOV     R2,DPL
   \   00016A   AB83         MOV     R3,DPH
   \   00016C   12....       LCALL   ??sAddrExtCpy?relay
   2121          
   2122              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2123                  &destinationAddr, dstEP, ed->SecurityUse );
   \   00016F                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00016F   85..82       MOV     DPL,?V0 + 0
   \   000172   85..83       MOV     DPH,?V0 + 1
   \   000175   A3           INC     DPTR
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F5..         MOV     ?V0 + 5,A
   \   000179   78..         MOV     R0,#?V0 + 5
   \   00017B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017E   78..         MOV     R0,#?V0 + 4
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000183   740C         MOV     A,#0xc
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   8582..       MOV     ?V0 + 4,DPL
   \   00018B   8583..       MOV     ?V0 + 5,DPH
   \   00018E   78..         MOV     R0,#?V0 + 4
   \   000190   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000193   78..         MOV     R0,#?V0 + 6
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   E5..         MOV     A,?V0 + 0
   \   00019A   2406         ADD     A,#0x6
   \   00019C   F5..         MOV     ?V0 + 4,A
   \   00019E   E5..         MOV     A,?V0 + 1
   \   0001A0   3400         ADDC    A,#0x0
   \   0001A2   F5..         MOV     ?V0 + 5,A
   \   0001A4   78..         MOV     R0,#?V0 + 4
   \   0001A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A9   E5..         MOV     A,?V0 + 0
   \   0001AB   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   0001AE   E5..         MOV     A,?V0 + 1
   \   0001B0   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   0001B3   7409         MOV     A,#0x9
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   AC82         MOV     R4,DPL
   \   0001BA   AD83         MOV     R5,DPH
   \   0001BC   AA..         MOV     R2,?V0 + 2
   \   0001BE   7B00         MOV     R3,#0x0
   \   0001C0   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   0001C3   7408         MOV     A,#0x8
   \   0001C5   12....       LCALL   ?DEALLOC_XSTACK8
   2124          
   2125              // Set timeout for response
   2126              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001C8                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001C8   12....       LCALL   ?Subroutine82 & 0xFFFF
   2127            }
   \                     ??CrossCallReturnLabel_134:
   \   0001CB   02....       LJMP    ??ZDMatchSendState_23 & 0xFFFF
   2128            else
   2129            {
   2130              // Send the response messages to requesting devices
   2131              // send response to first requester
   2132              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_19:
   \   0001CE   90....       MOV     DPTR,#matchED
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL   ?Subroutine5 & 0xFFFF
   2133              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_269:
   \   0001DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001DE   7401         MOV     A,#0x1
   \   0001E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E3   8582..       MOV     ?V0 + 0,DPL
   \   0001E6   8583..       MOV     ?V0 + 1,DPH
   \   0001E9   78..         MOV     R0,#?V0 + 0
   \   0001EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EE   75..20       MOV     ?V0 + 0,#0x20
   \   0001F1   75..80       MOV     ?V0 + 1,#-0x80
   \   0001F4   78..         MOV     R0,#?V0 + 0
   \   0001F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F9   7901         MOV     R1,#0x1
   \   0001FB   7406         MOV     A,#0x6
   \   0001FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000200   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000203   12....       LCALL   ?DEALLOC_XSTACK8
   2134          
   2135              // send response to second requester
   2136              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000206   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000209   704D         JNZ     ??ZDMatchSendState_24
   2137              {
   2138                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   00020B   90....       MOV     DPTR,#matchED
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   2419         ADD     A,#0x19
   \   000211   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000214   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   2139                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \                     ??CrossCallReturnLabel_292:
   \   00021D                ; Setup parameters for call to function ZDP_SendData
   \   00021D   90....       MOV     DPTR,#matchED
   \   000220   E0           MOVX    A,@DPTR
   \   000221   2418         ADD     A,#0x18
   \   000223   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2140              }
   \                     ??CrossCallReturnLabel_272:
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000229   7401         MOV     A,#0x1
   \   00022B   12....       LCALL   ?XSTACK_DISP0_8
   \   00022E   8582..       MOV     ?V0 + 0,DPL
   \   000231   8583..       MOV     ?V0 + 1,DPH
   \   000234   78..         MOV     R0,#?V0 + 0
   \   000236   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000239   75..20       MOV     ?V0 + 0,#0x20
   \   00023C   75..80       MOV     ?V0 + 1,#-0x80
   \   00023F   78..         MOV     R0,#?V0 + 0
   \   000241   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000244   7901         MOV     R1,#0x1
   \   000246   7406         MOV     A,#0x6
   \   000248   12....       LCALL   ?XSTACK_DISP0_8
   \   00024B   AC82         MOV     R4,DPL
   \   00024D   AD83         MOV     R5,DPH
   \   00024F   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000252   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000255   12....       LCALL   ?DEALLOC_XSTACK8
   2141          
   2142              // Process ended - release memory used
   2143              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_24:
   \   000258                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000258   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2144            }
   2145          
   2146            return ( TRUE );
   \                     ??ZDMatchSendState_23:
   \   00025B   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   00025D   7413         MOV     A,#0x13
   \   00025F   02....       LJMP    ?Subroutine192 & 0xFFFF
   2147          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   FE           MOV     R6,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FF           MOV     R7,A
   \   000006                REQUIRE ?Subroutine181
   \   000006                ; // Fall through to label ?Subroutine181

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242F         ADD     A,#0x2f
   \   000006   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000009   6401         XRL     A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   28           ADD     A,R0
   \   00000C   F8           MOV     R0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   39           ADDC    A,R1
   \   000010   F9           MOV     R1,A
   \   000011   74FE         MOV     A,#-0x2
   \   000013   28           ADD     A,R0
   \   000014   F582         MOV     DPL,A
   \   000016   74FF         MOV     A,#-0x1
   \   000018   39           ADDC    A,R1
   \   000019   F583         MOV     DPH,A
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 7,A
   \   000022   02....       LJMP    ?Subroutine181 & 0xFFFF
   2148          
   2149          /*********************************************************************
   2150           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2151           * @brief   End device bind timeout.
   2152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2153          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2154          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2155            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   ??ZDMatchSendState?relay
   2156          }
   \   00000D   02....       LJMP    ?Subroutine169 & 0xFFFF
   2157          
   2158          /*********************************************************************
   2159           * ZDO MESSAGE PARSING API FUNCTIONS
   2160           */
   2161          
   2162          /*********************************************************************
   2163           * @fn          ZDO_ParseEndDeviceBindReq
   2164           * @brief       This function parses the End_Device_Bind_req message.
   2165           *              NOTE:  The clusters lists in bindReq are allocated in this
   2166           *                     function and must be freed by that calling function.
   2167           * @param       inMsg  - incoming message (request)
   2168           *              bindReq - pointer to place to parse message to
   2169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2170          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2171          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2172            uint8 *msg;
   2173          
   2174            // Parse the message
   2175            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00000F   12....       LCALL   ?Subroutine19 & 0xFFFF
   2176            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_26:
   \   000012   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   2177            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_293:
   \   00001E   EA           MOV     A,R2
   \   00001F   240E         ADD     A,#0xe
   \   000021   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   2178            msg = inMsg->asdu;
   \   000026   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000029   12....       LCALL   ?Subroutine59 & 0xFFFF
   2179          
   2180            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_101:
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   12....       LCALL   ?Subroutine0 & 0xFFFF
   2181            msg += 2;
   2182          
   2183            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??CrossCallReturnLabel_523:
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   AC..         MOV     R4,?V0 + 2
   \   000035   FD           MOV     R5,A
   \   000036   EE           MOV     A,R6
   \   000037   2406         ADD     A,#0x6
   \   000039   FA           MOV     R2,A
   \   00003A   EF           MOV     A,R7
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   12....       LCALL   ?Subroutine39 & 0xFFFF
   2184            msg += Z_EXTADDR_LEN;
   2185          
   2186            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_425:
   \   000040   C0E0         PUSH    A
   \   000042   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000045   EF           MOV     A,R7
   \   000046   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000049   D0E0         POP     A
   \   00004B   12....       LCALL   ?Subroutine9 & 0xFFFF
   2187            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_8:
   \   00004E   F8           MOV     R0,A
   \   00004F   EE           MOV     A,R6
   \   000050   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000053   EF           MOV     A,R7
   \   000054   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000057   E8           MOV     A,R0
   \   000058   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   2188            msg += 2;
   2189          
   2190            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_525:
   \   00005B   EE           MOV     A,R6
   \   00005C   2412         ADD     A,#0x12
   \   00005E   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   F0           MOVX    @DPTR,A
   2191            bindReq->outClusters = NULL;
   \   000065   EE           MOV     A,R6
   \   000066   2415         ADD     A,#0x15
   \   000068   F5..         MOV     ?V0 + 6,A
   \   00006A   EF           MOV     A,R7
   \   00006B   3400         ADDC    A,#0x0
   \   00006D   F5..         MOV     ?V0 + 7,A
   \   00006F   85..82       MOV     DPL,?V0 + 6
   \   000072   F583         MOV     DPH,A
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   12....       LCALL   ?Subroutine38 & 0xFFFF
   2192          
   2193            if ((bindReq->numInClusters = *msg++) &&
   2194                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_74:
   \   00007A   FB           MOV     R3,A
   \   00007B   A3           INC     DPTR
   \   00007C   8582..       MOV     ?V0 + 2,DPL
   \   00007F   8583..       MOV     ?V0 + 3,DPH
   \   000082   EE           MOV     A,R6
   \   000083   2411         ADD     A,#0x11
   \   000085   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000088   EB           MOV     A,R3
   \   000089   85..82       MOV     DPL,?V0 + 0
   \   00008C   85..83       MOV     DPH,?V0 + 1
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   6036         JZ      ??ZDO_ParseEndDeviceBindReq_0
   \   000092                ; Setup parameters for call to function osal_mem_alloc
   \   000092   C3           CLR     C
   \   000093   33           RLC     A
   \   000094   FA           MOV     R2,A
   \   000095   E4           CLR     A
   \   000096   33           RLC     A
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   ??osal_mem_alloc?relay
   \   00009B   85..82       MOV     DPL,?V0 + 4
   \   00009E   85..83       MOV     DPH,?V0 + 5
   \   0000A1   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000A4   85..82       MOV     DPL,?V0 + 4
   \   0000A7   85..83       MOV     DPH,?V0 + 5
   \   0000AA   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000AD   EC           MOV     A,R4
   \   0000AE   7001         JNZ     ??ZDO_ParseEndDeviceBindReq_1
   \   0000B0   ED           MOV     A,R5
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000B1   6015         JZ      ??ZDO_ParseEndDeviceBindReq_0
   2195            {
   2196              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000B3                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000B3   AA..         MOV     R2,?V0 + 2
   \   0000B5   AB..         MOV     R3,?V0 + 3
   \   0000B7   85..82       MOV     DPL,?V0 + 0
   \   0000BA   85..83       MOV     DPH,?V0 + 1
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000C2   8A..         MOV     ?V0 + 2,R2
   \   0000C4   8B..         MOV     ?V0 + 3,R3
   \   0000C6   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_2
   2197            }
   2198            else
   2199            {
   2200              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   0000C8   E4           CLR     A
   \   0000C9   85..82       MOV     DPL,?V0 + 0
   \   0000CC   85..83       MOV     DPH,?V0 + 1
   \   0000CF   F0           MOVX    @DPTR,A
   2201            }
   2202          
   2203            if ((bindReq->numOutClusters = *msg++) &&
   2204                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000D0   85..82       MOV     DPL,?V0 + 2
   \   0000D3   85..83       MOV     DPH,?V0 + 3
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   FB           MOV     R3,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   8582..       MOV     ?V0 + 2,DPL
   \   0000DC   8583..       MOV     ?V0 + 3,DPH
   \   0000DF   EE           MOV     A,R6
   \   0000E0   2414         ADD     A,#0x14
   \   0000E2   FE           MOV     R6,A
   \   0000E3   EF           MOV     A,R7
   \   0000E4   3400         ADDC    A,#0x0
   \   0000E6   FF           MOV     R7,A
   \   0000E7   EB           MOV     A,R3
   \   0000E8   8E82         MOV     DPL,R6
   \   0000EA   8F83         MOV     DPH,R7
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   6030         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000EF                ; Setup parameters for call to function osal_mem_alloc
   \   0000EF   C3           CLR     C
   \   0000F0   33           RLC     A
   \   0000F1   FA           MOV     R2,A
   \   0000F2   E4           CLR     A
   \   0000F3   33           RLC     A
   \   0000F4   FB           MOV     R3,A
   \   0000F5   12....       LCALL   ??osal_mem_alloc?relay
   \   0000F8   85..82       MOV     DPL,?V0 + 6
   \   0000FB   85..83       MOV     DPH,?V0 + 7
   \   0000FE   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000101   85..82       MOV     DPL,?V0 + 6
   \   000104   85..83       MOV     DPH,?V0 + 7
   \   000107   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00010A   EC           MOV     A,R4
   \   00010B   7001         JNZ     ??ZDO_ParseEndDeviceBindReq_4
   \   00010D   ED           MOV     A,R5
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   00010E   600F         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2205            {
   2206              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   000110                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000110   AA..         MOV     R2,?V0 + 2
   \   000112   AB..         MOV     R3,?V0 + 3
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F9           MOV     R1,A
   \   00011A   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   00011D   8006         SJMP    ??ZDO_ParseEndDeviceBindReq_5
   2207            }
   2208            else
   2209            {
   2210              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   00011F   E4           CLR     A
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   F0           MOVX    @DPTR,A
   2211            }
   2212          }
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000125   02....       LJMP    ??Subroutine226_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000006   02....       LJMP    ?Subroutine182 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine232_0
   \   000001                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   2408         ADD     A,#0x8
   \   000007   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000003                REQUIRE ?Subroutine178
   \   000003                ; // Fall through to label ?Subroutine178

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   F583         MOV     DPH,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   80..         SJMP    ?Subroutine172

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000003   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine243_0
   \   000004                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   2402         ADD     A,#0x2
   \   000008   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   22           RET
   2213          
   2214          /*********************************************************************
   2215           * @fn          ZDO_ParseBindUnbindReq
   2216           * @brief       This function parses the Bind_req or Unbind_req message.
   2217           * @param       inMsg  - incoming message (request)
   2218           *              pReq - place to put parsed information
   2219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2220          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2221          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2222            uint8 *msg;
   2223          
   2224            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine92 & 0xFFFF
   2225            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_149:
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   AB..         MOV     R3,?V0 + 1
   \   000013   12....       LCALL   ?Subroutine40 & 0xFFFF
   2226            msg += Z_EXTADDR_LEN;
   2227            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_76:
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine18 & 0xFFFF
   2228            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_550:
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   85..83       MOV     DPH,?V0 + 1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine1 & 0xFFFF
   2229            msg += 2;
   2230            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_538:
   \   000036   FC           MOV     R4,A
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   2413         ADD     A,#0x13
   \   00003B   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00003E   EC           MOV     A,R4
   \   00003F   12....       LCALL   ?Subroutine28 & 0xFFFF
   2231            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_55:
   \   000042   240B         ADD     A,#0xb
   \   000044   FA           MOV     R2,A
   \   000045   E5..         MOV     A,?V0 + 1
   \   000047   3400         ADDC    A,#0x0
   \   000049   FB           MOV     R3,A
   \   00004A   7403         MOV     A,#0x3
   \   00004C   6C           XRL     A,R4
   \   00004D   7014         JNZ     ??ZDO_ParseBindUnbindReq_0
   2232            {
   2233              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00004F                ; Setup parameters for call to function sAddrExtCpy
   \   00004F   EE           MOV     A,R6
   \   000050   FC           MOV     R4,A
   \   000051   EF           MOV     A,R7
   \   000052   FD           MOV     R5,A
   \   000053   12....       LCALL   ?Subroutine41 & 0xFFFF
   2234              msg += Z_EXTADDR_LEN;
   2235              pReq->dstEndpoint = *msg;
   2236            }
   \                     ??CrossCallReturnLabel_78:
   \   000056   C0E0         PUSH    A
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   2414         ADD     A,#0x14
   \   00005C   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   00005F   D0E0         POP     A
   \   000061   8006         SJMP    ??ZDO_ParseBindUnbindReq_1
   2237            else
   2238            {
   2239              // copy group address
   2240              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000063   12....       LCALL   ?Subroutine76 & 0xFFFF
   2241            }
   \                     ??CrossCallReturnLabel_254:
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000069   F0           MOVX    @DPTR,A
   2242          }
   \   00006A   02....       LJMP    ??Subroutine196_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   EE           MOV     A,R6
   \   000004   2408         ADD     A,#0x8
   \   000006   FE           MOV     R6,A
   \   000007   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine242_0
   \   000004                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   02....       LJMP    ?Subroutine183 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   02....       LJMP    ?Subroutine173 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine245_0
   \   000002                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine246_0
   \   000004                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000003   02....       LJMP    ?Subroutine176 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET
   2243          
   2244          /*********************************************************************
   2245           * @fn      ZDO_ParseAddrRsp
   2246           * @brief   Turns the inMsg (incoming message) into the out parsed
   2247           *          structure.
   2248           * @param   inMsg - incoming message
   2249           * @return  pointer to parsed structures.  This structure was
   2250           *          allocated using osal_mem_alloc, so it must be freed
   2251           *          by the calling function [osal_mem_free()].
   2252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2253          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2254          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2255            ZDO_NwkIEEEAddrResp_t *rsp;
   2256            uint8 *msg;
   2257            byte cnt = 0;
   2258          
   2259            // Calculate the number of items in the list
   2260            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   FE           MOV     R6,A
   \   00000F   E9           MOV     A,R1
   \   000010   FF           MOV     R7,A
   \   000011   EA           MOV     A,R2
   \   000012   2410         ADD     A,#0x10
   \   000014   F582         MOV     DPL,A
   \   000016   EB           MOV     A,R3
   \   000017   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00001A   C3           CLR     C
   \   00001B   940C         SUBB    A,#0xc
   \   00001D   400E         JC      ??ZDO_ParseAddrRsp_0
   2261              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   E0           MOVX    A,@DPTR
   \   000024   240B         ADD     A,#0xb
   \   000026   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2262            else
   2263              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   2264          
   2265            // Make buffer
   2266            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   000030                ; Setup parameters for call to function osal_mem_alloc
   \   000030   E5..         MOV     A,?V0 + 2
   \   000032   C3           CLR     C
   \   000033   33           RLC     A
   \   000034   F8           MOV     R0,A
   \   000035   E4           CLR     A
   \   000036   33           RLC     A
   \   000037   F9           MOV     R1,A
   \   000038   740D         MOV     A,#0xd
   \   00003A   12....       LCALL   ?Subroutine114 & 0xFFFF
   2267          
   2268            if ( rsp )
   \                     ??CrossCallReturnLabel_178:
   \   00003D   7001         JNZ     ??ZDO_ParseAddrRsp_2
   \   00003F   EB           MOV     A,R3
   \                     ??ZDO_ParseAddrRsp_2:
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??ZDO_ParseAddrRsp_3 & 0xFFFF
   2269            {
   2270              msg = inMsg->asdu;
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   2271          
   2272              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_545:
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   12....       LCALL   ?Subroutine30 & 0xFFFF
   2273              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_59:
   \   000053   7076         JNZ     ??ZDO_ParseAddrRsp_3
   2274              {
   2275                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000055                ; Setup parameters for call to function sAddrExtCpy
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   EA           MOV     A,R2
   \   00005A   2403         ADD     A,#0x3
   \   00005C   0A           INC     R2
   \   00005D   0A           INC     R2
   \   00005E   0A           INC     R2
   \   00005F   EB           MOV     A,R3
   \   000060   3400         ADDC    A,#0x0
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   ?Subroutine40 & 0xFFFF
   2276                msg += Z_EXTADDR_LEN;
   2277                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_77:
   \   000066   FA           MOV     R2,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   EA           MOV     A,R2
   \   00006B   85..82       MOV     DPL,?V0 + 0
   \   00006E   85..83       MOV     DPH,?V0 + 1
   \   000071   A3           INC     DPTR
   \   000072   12....       LCALL   ?Subroutine23 & 0xFFFF
   2278          
   2279                msg += 2;
   2280                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_47:
   \   000075   E5..         MOV     A,?V0 + 0
   \   000077   240B         ADD     A,#0xb
   \   000079   F8           MOV     R0,A
   \   00007A   E5..         MOV     A,?V0 + 1
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F9           MOV     R1,A
   \   00007F   E8           MOV     A,R0
   \   000080   FA           MOV     R2,A
   \   000081   E9           MOV     A,R1
   \   000082   FB           MOV     R3,A
   \   000083   E4           CLR     A
   \   000084   8A82         MOV     DPL,R2
   \   000086   8B83         MOV     DPH,R3
   \   000088   F0           MOVX    @DPTR,A
   2281          
   2282                // StartIndex field is only present if NumAssocDev field is non-zero.
   2283                if ( cnt > 0 )
   \   000089   E5..         MOV     A,?V0 + 2
   \   00008B   603E         JZ      ??ZDO_ParseAddrRsp_3
   2284                {
   2285                  uint16 *pList = &(rsp->devList[0]);
   \   00008D   E5..         MOV     A,?V0 + 0
   \   00008F   240D         ADD     A,#0xd
   \   000091   08           INC     R0
   \   000092   08           INC     R0
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   3400         ADDC    A,#0x0
   \   000097   F9           MOV     R1,A
   2286                  byte n = cnt;
   \   000098   85....       MOV     ?V0 + 3,?V0 + 2
   2287          
   2288                  rsp->numAssocDevs = *msg++;
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   12....       LCALL   ?Subroutine15 & 0xFFFF
   2289                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_21:
   \   0000A7   C0E0         PUSH    A
   \   0000A9   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   0000AC   D0E0         POP     A
   \   0000AE   12....       LCALL   ?Subroutine31 & 0xFFFF
   2290          
   2291                  while ( n != 0 )
   2292                  {
   2293                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_61:
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FC           MOV     R4,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FB           MOV     R3,A
   \   0000BA   EC           MOV     A,R4
   \   0000BB   8882         MOV     DPL,R0
   \   0000BD   8983         MOV     DPH,R1
   \   0000BF   12....       LCALL   ?Subroutine21 & 0xFFFF
   2294                    msg += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_33:
   \   0000C2   12....       LCALL   ?Subroutine112 & 0xFFFF
   2295                    n--;
   2296                  }
   \                     ??CrossCallReturnLabel_170:
   \   0000C5   15..         DEC     ?V0 + 3
   \   0000C7   E5..         MOV     A,?V0 + 3
   \   0000C9   70E6         JNZ     ??CrossCallReturnLabel_61
   2297                }
   2298              }
   2299            }
   2300            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000CB   AA..         MOV     R2,?V0 + 0
   \   0000CD   AB..         MOV     R3,?V0 + 1
   \   0000CF   02....       LJMP    ?Subroutine186 & 0xFFFF
   2301          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   E8           MOV     A,R0
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   28           ADD     A,R0
   \   000001   FA           MOV     R2,A
   \   000002   E4           CLR     A
   \   000003   39           ADDC    A,R1
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_mem_alloc?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000003                REQUIRE ?Subroutine176
   \   000003                ; // Fall through to label ?Subroutine176

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine241_0
   \   000004                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET
   2302          
   2303          /*********************************************************************
   2304           * @fn          ZDO_ParseNodeDescRsp
   2305           * @brief       This function parses the Node_Desc_rsp message.
   2306           * @param       inMsg - incoming message
   2307           *              pNDRsp - place to parse the message into
   2308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2309          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2310          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2311            uint8 *msg;
   2312          
   2313            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine3 & 0xFFFF
   2314          
   2315            pNDRsp->status = *msg++;
   2316            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2317          
   2318            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2319            {
   2320              msg += 2;
   \   00000D   12....       LCALL   ?Subroutine150 & 0xFFFF
   2321              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??CrossCallReturnLabel_215:
   \   000010   EC           MOV     A,R4
   \   000011   2403         ADD     A,#0x3
   \   000013   FA           MOV     R2,A
   \   000014   ED           MOV     A,R5
   \   000015   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000018   5407         ANL     A,#0x7
   \   00001A   C0E0         PUSH    A
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   E0           MOVX    A,@DPTR
   \   000021   54F8         ANL     A,#0xf8
   \   000023   FE           MOV     R6,A
   \   000024   D0E0         POP     A
   \   000026   4E           ORL     A,R6
   \   000027   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2322          
   2323              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_462:
   \   00002A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   8A82         MOV     DPL,R2
   \   000030   E0           MOVX    A,@DPTR
   \   000031   92E3         MOV     0xE0 /* A   */.3,C
   \   000033   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2324              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_463:
   \   000036   A2E4         MOV     C,0xE0 /* A   */.4
   \   000038   8B83         MOV     DPH,R3
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   92E4         MOV     0xE0 /* A   */.4,C
   \   00003F   12....       LCALL   ?Subroutine33 & 0xFFFF
   2325          
   2326              msg++;  // Reserved bits.
   \                     ??CrossCallReturnLabel_66:
   \   000042   08           INC     R0
   \   000043   A983         MOV     R1,DPH
   2327              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000045   EC           MOV     A,R4
   \   000046   2404         ADD     A,#0x4
   \   000048   0A           INC     R2
   \   000049   ED           MOV     A,R5
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FB           MOV     R3,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   54F8         ANL     A,#0xf8
   \   000050   C0E0         PUSH    A
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   E0           MOVX    A,@DPTR
   \   000057   5407         ANL     A,#0x7
   \   000059   FE           MOV     R6,A
   \   00005A   D0E0         POP     A
   \   00005C   4E           ORL     A,R6
   \   00005D   FE           MOV     R6,A
   \   00005E   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2328              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_464:
   \   000061   5407         ANL     A,#0x7
   \   000063   C0E0         PUSH    A
   \   000065   74F8         MOV     A,#-0x8
   \   000067   5E           ANL     A,R6
   \   000068   FE           MOV     R6,A
   \   000069   D0E0         POP     A
   \   00006B   4E           ORL     A,R6
   \   00006C   A3           INC     DPTR
   \   00006D   08           INC     R0
   \   00006E   A983         MOV     R1,DPH
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2329              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_465:
   \   000077   8C82         MOV     DPL,R4
   \   000079   8D83         MOV     DPH,R5
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   12....       LCALL   ?Subroutine16 & 0xFFFF
   2330              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_432:
   \   000082   8C82         MOV     DPL,R4
   \   000084   8D83         MOV     DPH,R5
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   12....       LCALL   ?Subroutine7 & 0xFFFF
   2331              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   00008F   12....       LCALL   ?Subroutine7 & 0xFFFF
   2332              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_5:
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ?Subroutine4 & 0xFFFF
   2333              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_2:
   \   000096   12....       LCALL   ?Subroutine4 & 0xFFFF
   2334              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_3:
   \   000099   12....       LCALL   ?Subroutine16 & 0xFFFF
   2335              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_433:
   \   00009C   FE           MOV     R6,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FB           MOV     R3,A
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EC           MOV     A,R4
   \   0000A3   240B         ADD     A,#0xb
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   ED           MOV     A,R5
   \   0000A8   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   0000AB   EA           MOV     A,R2
   \   0000AC   12....       LCALL   ?Subroutine21 & 0xFFFF
   2336              msg += 2;
   2337              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_32:
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   C0E0         PUSH    A
   \   0000B6   EC           MOV     A,R4
   \   0000B7   240D         ADD     A,#0xd
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   ED           MOV     A,R5
   \   0000BC   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   2338              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_434:
   \   0000C4   C0E0         PUSH    A
   \   0000C6   EC           MOV     A,R4
   \   0000C7   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   0000CA   ED           MOV     A,R5
   \   0000CB   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   0000CE   D0E0         POP     A
   \   0000D0   12....       LCALL   ?Subroutine33 & 0xFFFF
   2339              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \                     ??CrossCallReturnLabel_67:
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   C0E0         PUSH    A
   \   0000D6   EC           MOV     A,R4
   \   0000D7   12....       LCALL   ?Subroutine113 & 0xFFFF
   2340            }
   \                     ??CrossCallReturnLabel_177:
   \   0000DA   ED           MOV     A,R5
   \   0000DB   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   2341          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   0000E1                REQUIRE ?Subroutine191
   \   0000E1                ; // Fall through to label ?Subroutine191

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine234_0
   \   000001                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00000C   02....       LJMP    ?Subroutine171 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   00000D   A882         MOV     R0,DPL
   \   00000F   A983         MOV     R1,DPH
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EE           MOV     A,R6
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine249_0
   \   000002                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine250_0
   \   000001                ; // Fall through to label ??Subroutine250_0
   2342          
   2343          /*********************************************************************
   2344           * @fn          ZDO_ParesPowerDescRsp
   2345           *
   2346           * @brief       This function parses the Power_Desc_rsp message.
   2347           *
   2348           * @param       inMsg  - incoming message
   2349           * @param       pNPRsp - place to parse the message into
   2350           *
   2351           * @return      none
   2352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F9           MOV     R1,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine206_0
   \   000005                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2353          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2354          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2355            uint8 *msg;
   2356          
   2357            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000008   12....       LCALL   ?Subroutine81 & 0xFFFF
   2358            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_253:
   \   00000B   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00000E   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   2359            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   EE           MOV     A,R6
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   A3           INC     DPTR
   \   000020   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   2360          
   2361            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_283:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   707D         JNZ     ??CrossCallReturnLabel_296
   2362            {
   2363              msg += 2;
   \   00002A   12....       LCALL   ?Subroutine111 & 0xFFFF
   2364              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??CrossCallReturnLabel_169:
   \   00002D   EC           MOV     A,R4
   \   00002E   2403         ADD     A,#0x3
   \   000030   ED           MOV     A,R5
   \   000031   3400         ADDC    A,#0x0
   \   000033   0C           INC     R4
   \   000034   0C           INC     R4
   \   000035   0C           INC     R4
   \   000036   FD           MOV     R5,A
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   540F         ANL     A,#0xf
   \   00003E   FE           MOV     R6,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FF           MOV     R7,A
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C4           SWAP    A
   \   000048   540F         ANL     A,#0xf
   \   00004A   F5..         MOV     ?V0 + 0,A
   \   00004C   75..00       MOV     ?V0 + 1,#0x0
   \   00004F   7404         MOV     A,#0x4
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?S_SHL
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   4E           ORL     A,R6
   \   000059   F8           MOV     R0,A
   \   00005A   EF           MOV     A,R7
   \   00005B   12....       LCALL   ?Subroutine24 & 0xFFFF
   2365              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_294:
   \   00005E   74F0         MOV     A,#-0x10
   \   000060   58           ANL     A,R0
   \   000061   F8           MOV     R0,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FE           MOV     R6,A
   \   000068   740F         MOV     A,#0xf
   \   00006A   5E           ANL     A,R6
   \   00006B   48           ORL     A,R0
   \   00006C   FE           MOV     R6,A
   \   00006D   A3           INC     DPTR
   \   00006E   0A           INC     R2
   \   00006F   AB83         MOV     R3,DPH
   \   000071   8C82         MOV     DPL,R4
   \   000073   8D83         MOV     DPH,R5
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   EF           MOV     A,R7
   \   000078   F0           MOVX    @DPTR,A
   2366              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \   000079   740F         MOV     A,#0xf
   \   00007B   59           ANL     A,R1
   \   00007C   FF           MOV     R7,A
   \   00007D   8A82         MOV     DPL,R2
   \   00007F   8B83         MOV     DPH,R3
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C4           SWAP    A
   \   000083   540F         ANL     A,#0xf
   \   000085   F5..         MOV     ?V0 + 0,A
   \   000087   740C         MOV     A,#0xc
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?S_SHL
   \   00008E   EE           MOV     A,R6
   \   00008F   F8           MOV     R0,A
   \   000090   E5..         MOV     A,?V0 + 1
   \   000092   4F           ORL     A,R7
   \   000093   12....       LCALL   ?Subroutine24 & 0xFFFF
   2367              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_295:
   \   000096   74F0         MOV     A,#-0x10
   \   000098   59           ANL     A,R1
   \   000099   F9           MOV     R1,A
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FF           MOV     R7,A
   \   0000A0   740F         MOV     A,#0xf
   \   0000A2   5F           ANL     A,R7
   \   0000A3   49           ORL     A,R1
   \   0000A4   12....       LCALL   ?Subroutine24 & 0xFFFF
   2368            }
   2369          }
   \                     ??CrossCallReturnLabel_296:
   \   0000A7   02....       LJMP    ??Subroutine196_0 & 0xFFFF
   2370          
   2371          /*********************************************************************
   2372           * @fn          ZDO_ParseSimpleDescRsp
   2373           *
   2374           * @brief       This function parse the Simple_Desc_rsp message.
   2375           *
   2376           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2377           *         in the SimpleDescriptionFormat_t structure are allocated
   2378           *         and the calling function needs to free [osal_msg_free()]
   2379           *         these buffers.
   2380           *
   2381           * @param       inMsg  - incoming message
   2382           * @param       pSimpleDescRsp - place to parse the message into
   2383           *
   2384           * @return      none
   2385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2386          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2387          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2388            uint8 *msg;
   2389          
   2390            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine3 & 0xFFFF
   2391            pSimpleDescRsp->status = *msg++;
   2392            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2393            msg += sizeof ( uint16 );
   2394            msg++; // Skip past the length field.
   2395            
   2396            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7015         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2397            {
   2398              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   0C           INC     R4
   \   00000E   0C           INC     R4
   \   00000F   0C           INC     R4
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FD           MOV     R5,A
   \   000014   E8           MOV     A,R0
   \   000015   2403         ADD     A,#0x3
   \   000017   FA           MOV     R2,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay
   2399            }
   2400          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001F   02....       LJMP    ?Subroutine191 & 0xFFFF
   2401          
   2402          /*********************************************************************
   2403           * @fn          ZDO_ParseEPListRsp
   2404           *
   2405           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2406           *
   2407           * @param       inMsg  - incoming message
   2408           *
   2409           * @return      none
   2410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine226_0
   \   000004                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2411          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2412          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2413            ZDO_ActiveEndpointRsp_t *pRsp;
   2414            uint8 *msg;
   2415            uint8 Status;
   2416            uint8 cnt;
   2417          
   2418            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000008   12....       LCALL   ?Subroutine137 & 0xFFFF
   2419            Status = *msg++;
   \                     ??CrossCallReturnLabel_428:
   \   00000B   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   2420            cnt = msg[2];
   \                     ??CrossCallReturnLabel_477:
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 4,A
   2421          
   2422            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000013   F582         MOV     DPL,A
   \   000015   12....       LCALL   ?Subroutine97 & 0xFFFF
   2423            if ( pRsp )
   \                     ??CrossCallReturnLabel_156:
   \   000018   7001         JNZ     ??ZDO_ParseEPListRsp_0
   \   00001A   EF           MOV     A,R7
   \                     ??ZDO_ParseEPListRsp_0:
   \   00001B   602B         JZ      ??ZDO_ParseEPListRsp_1
   2424            {
   2425              pRsp->status = Status;
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   E5..         MOV     A,?V0 + 5
   \   000023   12....       LCALL   ?Subroutine38 & 0xFFFF
   2426              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_75:
   \   000026   FA           MOV     R2,A
   \   000027   12....       LCALL   ?Subroutine20 & 0xFFFF
   2427              msg += sizeof( uint16 );
   2428              pRsp->cnt = cnt;
   2429              msg++; // pass cnt
   2430              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_30:
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   85..82       MOV     DPL,?V0 + 2
   \   00002D   85..83       MOV     DPH,?V0 + 3
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A982         MOV     R1,DPL
   \   000035   AA83         MOV     R2,DPH
   \   000037   89..         MOV     ?V0 + 4,R1
   \   000039   8A..         MOV     ?V0 + 5,R2
   \   00003B   88..         MOV     ?V0 + 6,R0
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000042   12....       LCALL   ?Subroutine98 & 0xFFFF
   2431            }
   \                     ??CrossCallReturnLabel_446:
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   2432          
   2433            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_1:
   \   000048   02....       LJMP    ?Subroutine189 & 0xFFFF
   2434          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   AC..         MOV     R4,?V0 + 0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EE           MOV     A,R6
   \   000005   2404         ADD     A,#0x4
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009                REQUIRE ??Subroutine236_0
   \   000009                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   02....       LJMP    ?Subroutine177 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 5,A
   \   000003   02....       LJMP    ?Subroutine172 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   02....       LJMP    ?Subroutine178 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   8582..       MOV     ?V0 + 0,DPL
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   7404         MOV     A,#0x4
   \   000005   25..         ADD     A,?V0 + 0
   \   000007   FA           MOV     R2,A
   \   000008   E4           CLR     A
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   AE..         MOV     R6,?V0 + 6
   \   000015   AF..         MOV     R7,?V0 + 7
   \   000017   EE           MOV     A,R6
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000012   E5..         MOV     A,?V0 + 4
   \   000014   F0           MOVX    @DPTR,A
   \   000015   22           RET
   2435          
   2436          /*********************************************************************
   2437           * @fn          ZDO_ParseServerDiscRsp
   2438           *
   2439           * @brief       Parse the Server_Discovery_rsp message.
   2440           *
   2441           * @param       inMsg - incoming message.
   2442           * @param       pRsp - place to put the parsed information.
   2443           *
   2444           * @return      none
   2445           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2446          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2447          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2448            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00000D   FA           MOV     R2,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F583         MOV     DPH,A
   \   000012   8A82         MOV     DPL,R2
   \   000014   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000017   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2449            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_466:
   \   00001A   12....       LCALL   ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   EA           MOV     A,R2
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   A3           INC     DPTR
   \   00002E   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   2450          }
   \                     ??CrossCallReturnLabel_284:
   \   000031   02....       LJMP    ?Subroutine191 & 0xFFFF
   2451          
   2452          /*********************************************************************
   2453           * @fn          ZDO_ParseMgmtLqiRsp
   2454           *
   2455           * @brief       This function parses the incoming Management
   2456           *              LQI response
   2457           *
   2458           * @param       inMsg - incoming message
   2459           *
   2460           * @return      a pointer to parsed response structure (NULL if not allocated).
   2461           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2462           *          by the calling function [osal_mem_free()].
   2463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2464          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2465          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2466            ZDO_MgmtLqiRsp_t *pRsp;
   2467            uint8 status;
   2468            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2469            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2470            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   2471            uint8 *msg;
   2472          
   2473            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine56 & 0xFFFF
   2474          
   2475            status = *msg++;
   2476            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_469:
   \   000011   700A         JNZ     ??CrossCallReturnLabel_471
   2477            {
   2478              neighborLqiEntries = *msg++;
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 6,A
   \   000016   A3           INC     DPTR
   2479              startIndex = *msg++;
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 4,A
   \   00001A   12....       LCALL   ?Subroutine60 & 0xFFFF
   2480              neighborLqiCount = *msg++;
   2481            }
   2482          
   2483            // Allocate a buffer big enough to handle the list.
   2484            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2485                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??CrossCallReturnLabel_471:
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   E5..         MOV     A,?V0 + 5
   \   00001F   75F00E       MOV     B,#0xe
   \   000022   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000025   8A..         MOV     ?V0 + 0,R2
   \   000027   8B..         MOV     ?V0 + 1,R3
   \   000029   AE..         MOV     R6,?V0 + 0
   \   00002B   AF..         MOV     R7,?V0 + 1
   2486            if ( pRsp )
   \   00002D   EE           MOV     A,R6
   \   00002E   7001         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   \   000030   EF           MOV     A,R7
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000031   6074         JZ      ??ZDO_ParseMgmtLqiRsp_1
   2487            {
   2488              uint8 x;
   2489              neighborLqiItem_t *pList = pRsp->list;
   \   000033   EE           MOV     A,R6
   \   000034   2404         ADD     A,#0x4
   \   000036   12....       LCALL   ?Subroutine100 & 0xFFFF
   2490              pRsp->status = status;
   \                     ??CrossCallReturnLabel_486:
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E5..         MOV     A,?V0 + 7
   \   00003F   F0           MOVX    @DPTR,A
   2491              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   000040   A3           INC     DPTR
   \   000041   E5..         MOV     A,?V0 + 6
   \   000043   12....       LCALL   ?Subroutine129 & 0xFFFF
   2492              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_193:
   \   000046   A3           INC     DPTR
   \   000047   E5..         MOV     A,?V0 + 4
   \   000049   12....       LCALL   ?Subroutine37 & 0xFFFF
   2493              pRsp->neighborLqiCount = neighborLqiCount;
   \                     ??CrossCallReturnLabel_73:
   \   00004C   E5..         MOV     A,?V0 + 5
   \   00004E   F0           MOVX    @DPTR,A
   2494          
   2495              for ( x = 0; x < neighborLqiCount; x++ )
   \   00004F   75..00       MOV     ?V0 + 4,#0x0
   \   000052   804C         SJMP    ??ZDO_ParseMgmtLqiRsp_2
   2496              {
   2497                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000054                ; Setup parameters for call to function sAddrExtCpy
   \   000054   AC..         MOV     R4,?V0 + 2
   \   000056   AD..         MOV     R5,?V0 + 3
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   2404         ADD     A,#0x4
   \   00005C   FA           MOV     R2,A
   \   00005D   E5..         MOV     A,?V0 + 1
   \   00005F   3400         ADDC    A,#0x0
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??sAddrExtCpy?relay
   2498                msg += Z_EXTADDR_LEN;
   2499          
   2500                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   000065   E5..         MOV     A,?V0 + 2
   \   000067   2410         ADD     A,#0x10
   \   000069   12....       LCALL   ?Subroutine106 & 0xFFFF
   2501                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_160:
   \   00006C   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   00006F   85..82       MOV     DPL,?V0 + 0
   \   000072   85..83       MOV     DPH,?V0 + 1
   \   000075   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   2502                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \                     ??CrossCallReturnLabel_285:
   \   000078   E5..         MOV     A,?V0 + 2
   \   00007A   2405         ADD     A,#0x5
   \   00007C   12....       LCALL   ?Subroutine106 & 0xFFFF
   2503                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_161:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C0E0         PUSH    A
   \   000082   E5..         MOV     A,?V0 + 0
   \   000084   240D         ADD     A,#0xd
   \   000086   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000089   D0E0         POP     A
   \   00008B   12....       LCALL   ?Subroutine10 & 0xFFFF
   2504                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??CrossCallReturnLabel_10:
   \   00008E   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000091   E4           CLR     A
   \   000092   F0           MOVX    @DPTR,A
   2505                pList++;
   \   000093   E5..         MOV     A,?V0 + 0
   \   000095   240E         ADD     A,#0xe
   \   000097   F5..         MOV     ?V0 + 0,A
   \   000099   E5..         MOV     A,?V0 + 1
   \   00009B   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2506              }
   \                     ??CrossCallReturnLabel_480:
   \   00009E   05..         INC     ?V0 + 4
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   0000A0   E5..         MOV     A,?V0 + 4
   \   0000A2   C3           CLR     C
   \   0000A3   95..         SUBB    A,?V0 + 5
   \   0000A5   40AD         JC      ??ZDO_ParseMgmtLqiRsp_3
   2507            }
   2508          
   2509            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   0000A7   02....       LJMP    ?Subroutine189 & 0xFFFF
   2510          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine238_0
   \   000001                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   7404         MOV     A,#0x4
   \   000006   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 7,A
   \   000009                REQUIRE ?Subroutine172
   \   000009                ; // Fall through to label ?Subroutine172

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000003   22           RET
   2511          
   2512          /*********************************************************************
   2513           * @fn          ZDO_ParseMgmNwkDiscRsp
   2514           *
   2515           * @brief       This function parses the incoming Management
   2516           *              Network Discover response.
   2517           *
   2518           * @param       inMsg - incoming message
   2519           *
   2520           * @return      pointer to parsed response.  This structure was
   2521           *          allocated using osal_mem_alloc, so it must be freed
   2522           *          by the calling function [osal_mem_free()].
   2523           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2524          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2525          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2526            ZDO_MgmNwkDiscRsp_t *pRsp;
   2527            uint8 status;
   2528            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   2529            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2530            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2531            uint8 *msg;
   2532          
   2533            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine47 & 0xFFFF
   2534            status = *msg++;
   \                     ??CrossCallReturnLabel_542:
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2535          
   2536            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2537            {
   2538              networkCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine70 & 0xFFFF
   2539              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_112:
   \   00001D   F5..         MOV     ?V0 + 5,A
   \   00001F   A3           INC     DPTR
   2540              networkListCount = *msg++;
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   A3           INC     DPTR
   \   000024   0E           INC     R6
   \   000025   0E           INC     R6
   \   000026   0E           INC     R6
   \   000027   AF83         MOV     R7,DPH
   2541            }
   2542          
   2543            // Allocate a buffer big enough to handle the list.
   2544            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2545                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   85....       MOV     ?V0 + 2,?V0 + 4
   \   00002C   75..00       MOV     ?V0 + 3,#0x0
   \   00002F   7404         MOV     A,#0x4
   \   000031   78..         MOV     R0,#?V0 + 2
   \   000033   12....       LCALL   ?S_SHL
   \   000036   7404         MOV     A,#0x4
   \   000038   25..         ADD     A,?V0 + 2
   \   00003A   FA           MOV     R2,A
   \   00003B   E4           CLR     A
   \   00003C   35..         ADDC    A,?V0 + 3
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   ??osal_mem_alloc?relay
   \   000042   8A..         MOV     ?V0 + 2,R2
   \   000044   8B..         MOV     ?V0 + 3,R3
   2546            if ( pRsp )
   \   000046   EA           MOV     A,R2
   \   000047   7001         JNZ     ??ZDO_ParseMgmNwkDiscRsp_1
   \   000049   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   2547            {
   2548              uint8 x;
   2549              mgmtNwkDiscItem_t *pList;
   2550          
   2551              pRsp->status = status;
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   E5..         MOV     A,?V0 + 1
   \   000055   F0           MOVX    @DPTR,A
   2552              pRsp->networkCount = networkCount;
   \   000056   A3           INC     DPTR
   \   000057   E5..         MOV     A,?V0 + 0
   \   000059   12....       LCALL   ?Subroutine19 & 0xFFFF
   2553              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_27:
   \   00005C   E5..         MOV     A,?V0 + 5
   \   00005E   12....       LCALL   ?Subroutine13 & 0xFFFF
   2554              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_16:
   \   000061   E5..         MOV     A,?V0 + 4
   \   000063   F0           MOVX    @DPTR,A
   2555              pList = pRsp->list;
   \   000064   EA           MOV     A,R2
   \   000065   2404         ADD     A,#0x4
   \   000067   F5..         MOV     ?V0 + 0,A
   \   000069   EB           MOV     A,R3
   \   00006A   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2556          
   2557              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_481:
   \   00006D   75..00       MOV     ?V0 + 5,#0x0
   \   000070   806F         SJMP    ??ZDO_ParseMgmNwkDiscRsp_3
   2558              {
   2559                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   000072                ; Setup parameters for call to function sAddrExtCpy
   \   000072   EE           MOV     A,R6
   \   000073   FC           MOV     R4,A
   \   000074   EF           MOV     A,R7
   \   000075   FD           MOV     R5,A
   \   000076   AA..         MOV     R2,?V0 + 0
   \   000078   AB..         MOV     R3,?V0 + 1
   \   00007A   12....       LCALL   ??sAddrExtCpy?relay
   2560                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00007D   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000080   A3           INC     DPTR
   \   000081   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   2561                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_286:
   \   000084   EE           MOV     A,R6
   \   000085   2408         ADD     A,#0x8
   \   000087   12....       LCALL   ?Subroutine162 & 0xFFFF
   2562          
   2563                pList->logicalChannel = *msg++;
   2564                pList->stackProfile = (*msg) & 0x0F;
   2565                pList->version = (*msg++ >> 4) & 0x0F;
   2566                pList->beaconOrder = (*msg) & 0x0F;
   2567                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   2568                pList->permitJoining = *msg++;
   2569                pList++;
   2570              }
   \                     ??CrossCallReturnLabel_377:
   \   00008A   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   00008D   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000090   540F         ANL     A,#0xf
   \   000092   C0E0         PUSH    A
   \   000094   E5..         MOV     A,?V0 + 0
   \   000096   240B         ADD     A,#0xb
   \   000098   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   00009B   D0E0         POP     A
   \   00009D   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0000A5   D0E0         POP     A
   \   0000A7   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000AA   540F         ANL     A,#0xf
   \   0000AC   C0E0         PUSH    A
   \   0000AE   E5..         MOV     A,?V0 + 0
   \   0000B0   240D         ADD     A,#0xd
   \   0000B2   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   0000B5   D0E0         POP     A
   \   0000B7   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000BA   C0E0         PUSH    A
   \   0000BC   E5..         MOV     A,?V0 + 0
   \   0000BE   240E         ADD     A,#0xe
   \   0000C0   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   0000C3   D0E0         POP     A
   \   0000C5   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000C8   C0E0         PUSH    A
   \   0000CA   E5..         MOV     A,?V0 + 0
   \   0000CC   240F         ADD     A,#0xf
   \   0000CE   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   0000D1   D0E0         POP     A
   \   0000D3   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000D6   2410         ADD     A,#0x10
   \   0000D8   F5..         MOV     ?V0 + 0,A
   \   0000DA   E5..         MOV     A,?V0 + 1
   \   0000DC   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   0000DF   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   0000E1   E5..         MOV     A,?V0 + 5
   \   0000E3   C3           CLR     C
   \   0000E4   95..         SUBB    A,?V0 + 4
   \   0000E6   408A         JC      ??ZDO_ParseMgmNwkDiscRsp_4
   2571            }
   2572          
   2573            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000E8   AA..         MOV     R2,?V0 + 2
   \   0000EA   AB..         MOV     R3,?V0 + 3
   \   0000EC   02....       LJMP    ??Subroutine226_0 & 0xFFFF
   2574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C4           SWAP    A
   \   000007   540F         ANL     A,#0xf
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003                REQUIRE ?Subroutine176
   \   000003                REQUIRE ??Subroutine240_0
   \   000003                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000007   85..82       MOV     DPL,?V0 + 0
   \   00000A   85..83       MOV     DPH,?V0 + 1
   \   00000D   80..         SJMP    ?Subroutine171

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   80..         SJMP    ??Subroutine249_0
   2575          
   2576          /*********************************************************************
   2577           * @fn          ZDO_ParseMgmtRtgRsp
   2578           *
   2579           * @brief       This function parses the incoming Management
   2580           *              Routing response.
   2581           *
   2582           * @param       inMsg - incoming message
   2583           *
   2584           * @return      a pointer to parsed response structure (NULL if not allocated).
   2585           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2586           *          by the calling function [osal_mem_free()].
   2587           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2588          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2589          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2590            ZDO_MgmtRtgRsp_t *pRsp;
   2591            uint8 status;
   2592            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V0 + 1,#0x0
   2593            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 2,#0x0
   2594            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   2595            uint8 *msg;
   2596          
   2597            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine47 & 0xFFFF
   2598          
   2599            status = *msg++;
   \                     ??CrossCallReturnLabel_543:
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2600            if ( status == ZSuccess )
   \   000018   7011         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2601            {
   2602              rtgCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 1,A
   \   00001D   A3           INC     DPTR
   2603              startIndex = *msg++;
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 2,A
   \   000021   A3           INC     DPTR
   2604              rtgListCount = *msg++;
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 0,A
   \   000025   A3           INC     DPTR
   \   000026   0E           INC     R6
   \   000027   0E           INC     R6
   \   000028   0E           INC     R6
   \   000029   AF83         MOV     R7,DPH
   2605            }
   2606          
   2607            // Allocate a buffer big enough to handle the list
   2608            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2609                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   75F006       MOV     B,#0x6
   \   000030   12....       LCALL   ?Subroutine115 & 0xFFFF
   2610            if ( pRsp )
   \                     ??CrossCallReturnLabel_181:
   \   000033   EA           MOV     A,R2
   \   000034   7001         JNZ     ??ZDO_ParseMgmtRtgRsp_1
   \   000036   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   000037   6054         JZ      ??ZDO_ParseMgmtRtgRsp_2
   2611            {
   2612              uint8 x;
   2613              rtgItem_t *pList = pRsp->list;
   \   000039   EA           MOV     A,R2
   \   00003A   2404         ADD     A,#0x4
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F9           MOV     R1,A
   2614              pRsp->status = status;
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   E5..         MOV     A,?V0 + 3
   \   000047   F0           MOVX    @DPTR,A
   2615              pRsp->rtgCount = rtgCount;
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0 + 1
   \   00004B   12....       LCALL   ?Subroutine19 & 0xFFFF
   2616              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_28:
   \   00004E   E5..         MOV     A,?V0 + 2
   \   000050   12....       LCALL   ?Subroutine13 & 0xFFFF
   2617              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_17:
   \   000053   E5..         MOV     A,?V0 + 0
   \   000055   F0           MOVX    @DPTR,A
   2618          
   2619              for ( x = 0; x < rtgListCount; x++ )
   \   000056   75..00       MOV     ?V0 + 1,#0x0
   \   000059   802B         SJMP    ??ZDO_ParseMgmtRtgRsp_3
   2620              {
   2621                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   ED           MOV     A,R5
   \   000066   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   2622                msg += 2;
   2623                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_541:
   \   000069   8882         MOV     DPL,R0
   \   00006B   8983         MOV     DPH,R1
   \   00006D   12....       LCALL   ?Subroutine29 & 0xFFFF
   2624                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_58:
   \   000070   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   ED           MOV     A,R5
   \   000078   F0           MOVX    @DPTR,A
   2625                msg += 2;
   \   000079   12....       LCALL   ?Subroutine112 & 0xFFFF
   2626                pList++;
   \                     ??CrossCallReturnLabel_171:
   \   00007C   E8           MOV     A,R0
   \   00007D   2406         ADD     A,#0x6
   \   00007F   F8           MOV     R0,A
   \   000080   E9           MOV     A,R1
   \   000081   3400         ADDC    A,#0x0
   \   000083   F9           MOV     R1,A
   2627              }
   \   000084   05..         INC     ?V0 + 1
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000086   E5..         MOV     A,?V0 + 1
   \   000088   C3           CLR     C
   \   000089   95..         SUBB    A,?V0 + 0
   \   00008B   40CE         JC      ??ZDO_ParseMgmtRtgRsp_4
   2628            }
   2629          
   2630            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   00008D   02....       LJMP    ?Subroutine186 & 0xFFFF
   2631          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   E5..         MOV     A,?V0 + 2
   \   000007   02....       LJMP    ??Subroutine205_0 & 0xFFFF
   2632          
   2633          /*********************************************************************
   2634           * @fn          ZDO_ParseMgmtBindRsp
   2635           *
   2636           * @brief       This function parses the incoming Management
   2637           *              Binding response.
   2638           *
   2639           * @param       inMsg - pointer to message to parse
   2640           *
   2641           * @return      a pointer to parsed response structure (NULL if not allocated).
   2642           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2643           *          by the calling function [osal_mem_free()].
   2644           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2645          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2646          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   2647            ZDO_MgmtBindRsp_t *pRsp;
   2648            uint8 status;
   2649            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2650            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 6,#0x0
   2651            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 5,#0x0
   2652            uint8 *msg;
   2653          
   2654            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine56 & 0xFFFF
   2655          
   2656            status = *msg++;
   2657            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_470:
   \   000011   700A         JNZ     ??CrossCallReturnLabel_472
   2658            {
   2659              bindingCount = *msg++;
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 4,A
   \   000016   A3           INC     DPTR
   2660              startIndex = *msg++;
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 6,A
   \   00001A   12....       LCALL   ?Subroutine60 & 0xFFFF
   2661              bindingListCount = *msg++;
   2662            }
   2663          
   2664            // Allocate a buffer big enough to handle the list
   2665            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2666                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??CrossCallReturnLabel_472:
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   E5..         MOV     A,?V0 + 5
   \   00001F   75F015       MOV     B,#0x15
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?Subroutine114 & 0xFFFF
   2667            if ( pRsp )
   \                     ??CrossCallReturnLabel_179:
   \   00002B   7001         JNZ     ??ZDO_ParseMgmtBindRsp_0
   \   00002D   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2668            {
   2669              uint8 x;
   2670              apsBindingItem_t *pList = pRsp->list;
   \   000033   EA           MOV     A,R2
   \   000034   2404         ADD     A,#0x4
   \   000036   FE           MOV     R6,A
   \   000037   EB           MOV     A,R3
   \   000038   3400         ADDC    A,#0x0
   \   00003A   FF           MOV     R7,A
   2671              pRsp->status = status;
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   E5..         MOV     A,?V0 + 7
   \   000041   F0           MOVX    @DPTR,A
   2672              pRsp->bindingCount = bindingCount;
   \   000042   A3           INC     DPTR
   \   000043   E5..         MOV     A,?V0 + 4
   \   000045   12....       LCALL   ?Subroutine19 & 0xFFFF
   2673              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_29:
   \   000048   E5..         MOV     A,?V0 + 6
   \   00004A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2674              pRsp->bindingListCount = bindingListCount;
   \                     ??CrossCallReturnLabel_18:
   \   00004D   E5..         MOV     A,?V0 + 5
   \   00004F   F0           MOVX    @DPTR,A
   2675          
   2676              for ( x = 0; x < bindingListCount; x++ )
   \   000050   75..00       MOV     ?V0 + 4,#0x0
   \   000053   8010         SJMP    ??ZDO_ParseMgmtBindRsp_2
   2677              {
   2678                osal_cpyExtAddr( pList->srcAddr, msg );
   2679                msg += Z_EXTADDR_LEN;
   2680                pList->srcEP = *msg++;
   2681          
   2682                // Get the Cluster ID
   2683          
   2684                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2685                msg += 2;
   2686                pList->dstAddr.addrMode = *msg++;
   2687                if ( pList->dstAddr.addrMode == Addr64Bit )
   2688                {
   2689                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2690                  msg += Z_EXTADDR_LEN;
   2691                  pList->dstEP = *msg++;
   2692                }
   2693                else
   2694                {
   2695                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   000055   12....       LCALL   ?Subroutine76 & 0xFFFF
   2696                  msg += 2;
   2697                }
   \                     ??CrossCallReturnLabel_255:
   \   000058   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   2698          
   2699                pList++;
   \                     ??CrossCallReturnLabel_526:
   \   00005B   EE           MOV     A,R6
   \   00005C   2415         ADD     A,#0x15
   \   00005E   FE           MOV     R6,A
   \   00005F   EF           MOV     A,R7
   \   000060   3400         ADDC    A,#0x0
   \   000062   FF           MOV     R7,A
   \   000063   05..         INC     ?V0 + 4
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000065   E5..         MOV     A,?V0 + 4
   \   000067   C3           CLR     C
   \   000068   95..         SUBB    A,?V0 + 5
   \   00006A   505C         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   00006C                ; Setup parameters for call to function sAddrExtCpy
   \   00006C   AC..         MOV     R4,?V0 + 2
   \   00006E   AD..         MOV     R5,?V0 + 3
   \   000070   EE           MOV     A,R6
   \   000071   FA           MOV     R2,A
   \   000072   EF           MOV     A,R7
   \   000073   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000091   85..82       MOV     DPL,?V0 + 2
   \   000094   F583         MOV     DPH,A
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FC           MOV     R4,A
   \   000098   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00009B   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00009E   EC           MOV     A,R4
   \   00009F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000A2   EE           MOV     A,R6
   \   0000A3   240B         ADD     A,#0xb
   \   0000A5   FA           MOV     R2,A
   \   0000A6   EF           MOV     A,R7
   \   0000A7   3400         ADDC    A,#0x0
   \   0000A9   FB           MOV     R3,A
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   6C           XRL     A,R4
   \   0000AD   70A6         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   0000AF                ; Setup parameters for call to function sAddrExtCpy
   \   0000AF   AC..         MOV     R4,?V0 + 2
   \   0000B1   AD..         MOV     R5,?V0 + 3
   \   0000B3   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   2700              }
   2701            }
   \                     ??CrossCallReturnLabel_427:
   \   0000B6   C0E0         PUSH    A
   \   0000B8   EE           MOV     A,R6
   \   0000B9   2414         ADD     A,#0x14
   \   0000BB   F582         MOV     DPL,A
   \   0000BD   EF           MOV     A,R7
   \   0000BE   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   0000C1   D0E0         POP     A
   \   0000C3   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000C6   8093         SJMP    ??CrossCallReturnLabel_526
   2702          
   2703            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000C8   AA..         MOV     R2,?V0 + 0
   \   0000CA   AB..         MOV     R3,?V0 + 1
   \   0000CC   7F0A         MOV     R7,#0xa
   \   0000CE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2704          }
   2705          
   2706          /*********************************************************************
   2707           * @fn          ZDO_ParseUserDescRsp
   2708           *
   2709           * @brief       This function parses the incoming User
   2710           *              Descriptor Response.
   2711           *
   2712           * @param       inMsg - incoming response message
   2713           *
   2714           * @return      a pointer to parsed response structure (NULL if not allocated).
   2715           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2716           *          by the calling function [osal_mem_free()].
   2717           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2718          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2719          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2720            ZDO_UserDescRsp_t *pRsp;
   2721            uint8 *msg;
   2722            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2723          
   2724            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000B   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00000E   88..         MOV     ?V0 + 2,R0
   \   000010   89..         MOV     ?V0 + 3,R1
   2725          
   2726            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   2727              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   2728          
   2729            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F   85..82       MOV     DPL,?V0 + 4
   \   000022   12....       LCALL   ?Subroutine97 & 0xFFFF
   2730            if ( pRsp )
   \                     ??CrossCallReturnLabel_157:
   \   000025   7001         JNZ     ??ZDO_ParseUserDescRsp_1
   \   000027   EF           MOV     A,R7
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000028   602F         JZ      ??ZDO_ParseUserDescRsp_2
   2731            {
   2732              pRsp->status = msg[0];
   \   00002A   85..82       MOV     DPL,?V0 + 2
   \   00002D   85..83       MOV     DPH,?V0 + 3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   12....       LCALL   ?Subroutine154 & 0xFFFF
   2733              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_224:
   \   000038   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00003B   12....       LCALL   ?Subroutine20 & 0xFFFF
   2734              pRsp->length = descLen;
   2735              if ( descLen )
   \                     ??CrossCallReturnLabel_31:
   \   00003E   6019         JZ      ??ZDO_ParseUserDescRsp_2
   2736                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000040                ; Setup parameters for call to function osal_memcpy
   \   000040   E5..         MOV     A,?V0 + 2
   \   000042   2404         ADD     A,#0x4
   \   000044   F5..         MOV     ?V0 + 4,A
   \   000046   E5..         MOV     A,?V0 + 3
   \   000048   3400         ADDC    A,#0x0
   \   00004A   F5..         MOV     ?V0 + 5,A
   \   00004C   88..         MOV     ?V0 + 6,R0
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000053   12....       LCALL   ?Subroutine98 & 0xFFFF
   2737            }
   \                     ??CrossCallReturnLabel_447:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   2738          
   2739            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_2:
   \   000059   02....       LJMP    ?Subroutine189 & 0xFFFF
   2740          }
   2741          
   2742          /*********************************************************************
   2743           * @fn          ZDO_ParseSimpleDescBuf
   2744           *
   2745           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2746           *
   2747           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2748           * @param       desc - SimpleDescriptionFormat_t *
   2749           *
   2750           *              This routine allocates storage for the cluster IDs because
   2751           *              they are 16-bit and need to be aligned to be properly processed.
   2752           *              This routine returns non-zero if an allocation fails.
   2753           *
   2754           *              NOTE: This means that the caller or user of the input structure
   2755           *                    is responsible for freeing the memory
   2756           *
   2757           * @return      0: success
   2758           *              1: failure due to malloc failure.
   2759           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2760          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2761          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2762            uint8 num, i;
   2763          
   2764            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   2765            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_551:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   2766            buf += 2;
   2767            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_540:
   \   00001E   FA           MOV     R2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   EA           MOV     A,R2
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   12....       LCALL   ?Subroutine1 & 0xFFFF
   2768            buf += 2;
   2769            desc->AppDevVer = *buf >> 4;
   2770          
   2771            desc->Reserved = 0;
   \                     ??CrossCallReturnLabel_539:
   \   00002A   C4           SWAP    A
   \   00002B   540F         ANL     A,#0xf
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine36 & 0xFFFF
   2772            buf++;
   2773          
   2774            // move in input cluster list (if any). allocate aligned memory.
   2775            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_71:
   \   000039   A3           INC     DPTR
   \   00003A   0E           INC     R6
   \   00003B   0E           INC     R6
   \   00003C   AF83         MOV     R7,DPH
   \   00003E   8C82         MOV     DPL,R4
   \   000040   8D83         MOV     DPH,R5
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8A..         MOV     ?V0 + 4,R2
   2776            if ( num )
   \   00004B   EC           MOV     A,R4
   \   00004C   2407         ADD     A,#0x7
   \   00004E   F5..         MOV     ?V0 + 2,A
   \   000050   ED           MOV     A,R5
   \   000051   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000054   EA           MOV     A,R2
   \   000055   6056         JZ      ??ZDO_ParseSimpleDescBuf_0
   2777            {
   2778              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000057                ; Setup parameters for call to function osal_mem_alloc
   \   000057   C3           CLR     C
   \   000058   33           RLC     A
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   33           RLC     A
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ??osal_mem_alloc?relay
   \   000060   85..82       MOV     DPL,?V0 + 2
   \   000063   85..83       MOV     DPH,?V0 + 3
   \   000066   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000069   85..82       MOV     DPL,?V0 + 2
   \   00006C   85..83       MOV     DPH,?V0 + 3
   \   00006F   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000072   7001         JNZ     ??ZDO_ParseSimpleDescBuf_1
   \   000074   E9           MOV     A,R1
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000075   7005         JNZ     ??ZDO_ParseSimpleDescBuf_2
   2779              {
   2780                // malloc failed. we're done.
   2781                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000077   7901         MOV     R1,#0x1
   \   000079   02....       LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
   2782              }
   2783              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00007C   7C00         MOV     R4,#0x0
   \   00007E   8027         SJMP    ??CrossCallReturnLabel_53
   2784              {
   2785                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F5..         MOV     ?V0 + 6,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FB           MOV     R3,A
   \   00008A   E4           CLR     A
   \   00008B   25..         ADD     A,?V0 + 6
   \   00008D   EB           MOV     A,R3
   \   00008E   F5..         MOV     ?V0 + 7,A
   \   000090   EC           MOV     A,R4
   \   000091   33           RLC     A
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   FB           MOV     R3,A
   \   000096   E8           MOV     A,R0
   \   000097   2A           ADD     A,R2
   \   000098   F582         MOV     DPL,A
   \   00009A   E9           MOV     A,R1
   \   00009B   3B           ADDC    A,R3
   \   00009C   F583         MOV     DPH,A
   \   00009E   E5..         MOV     A,?V0 + 6
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E5..         MOV     A,?V0 + 7
   \   0000A4   12....       LCALL   ?Subroutine27 & 0xFFFF
   2786                buf += 2;
   2787              }
   \                     ??CrossCallReturnLabel_53:
   \   0000A7   EC           MOV     A,R4
   \   0000A8   C3           CLR     C
   \   0000A9   95..         SUBB    A,?V0 + 4
   \   0000AB   40D3         JC      ??ZDO_ParseSimpleDescBuf_5
   2788            }
   2789          
   2790            // move in output cluster list (if any). allocate aligned memory.
   2791            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   AE82         MOV     R6,DPL
   \   0000B6   AF83         MOV     R7,DPH
   \   0000B8   85..82       MOV     DPL,?V0 + 0
   \   0000BB   85..83       MOV     DPH,?V0 + 1
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   8A..         MOV     ?V0 + 4,R2
   2792            if (num)
   \   0000CA   6075         JZ      ??ZDO_ParseSimpleDescBuf_6
   2793            {
   2794              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000CC   E5..         MOV     A,?V0 + 0
   \   0000CE   240A         ADD     A,#0xa
   \   0000D0   F8           MOV     R0,A
   \   0000D1   E5..         MOV     A,?V0 + 1
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F9           MOV     R1,A
   \   0000D6   88..         MOV     ?V0 + 0,R0
   \   0000D8   89..         MOV     ?V0 + 1,R1
   \   0000DA                ; Setup parameters for call to function osal_mem_alloc
   \   0000DA   EA           MOV     A,R2
   \   0000DB   C3           CLR     C
   \   0000DC   33           RLC     A
   \   0000DD   FA           MOV     R2,A
   \   0000DE   E4           CLR     A
   \   0000DF   33           RLC     A
   \   0000E0   FB           MOV     R3,A
   \   0000E1   12....       LCALL   ??osal_mem_alloc?relay
   \   0000E4   85..82       MOV     DPL,?V0 + 0
   \   0000E7   85..83       MOV     DPH,?V0 + 1
   \   0000EA   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000ED   85..82       MOV     DPL,?V0 + 0
   \   0000F0   85..83       MOV     DPH,?V0 + 1
   \   0000F3   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000F6   7001         JNZ     ??ZDO_ParseSimpleDescBuf_7
   \   0000F8   E9           MOV     A,R1
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0000F9   7017         JNZ     ??ZDO_ParseSimpleDescBuf_8
   2795              {
   2796                // malloc failed. free input cluster list memory if there is any
   2797                if ( desc->pAppInClusterList != NULL )
   \   0000FB   85..82       MOV     DPL,?V0 + 2
   \   0000FE   85..83       MOV     DPH,?V0 + 3
   \   000101   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000104   7001         JNZ     ??ZDO_ParseSimpleDescBuf_9
   \   000106   EB           MOV     A,R3
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000107   7003         JNZ     $+5
   \   000109   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   2798                {
   2799                  osal_mem_free(desc->pAppInClusterList);
   \   00010C                ; Setup parameters for call to function osal_mem_free
   \   00010C   12....       LCALL   ??osal_mem_free?relay
   \   00010F   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   2800                }
   2801                return 1;
   2802              }
   2803              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000112   7C00         MOV     R4,#0x0
   \   000114   8025         SJMP    ??CrossCallReturnLabel_54
   2804              {
   2805                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000116   8E82         MOV     DPL,R6
   \   000118   8F83         MOV     DPH,R7
   \   00011A   12....       LCALL   ?Subroutine70 & 0xFFFF
   2806                buf += 2;
   2807              }
   \                     ??CrossCallReturnLabel_117:
   \   00011D   FB           MOV     R3,A
   \   00011E   E4           CLR     A
   \   00011F   25..         ADD     A,?V0 + 0
   \   000121   EB           MOV     A,R3
   \   000122   F5..         MOV     ?V0 + 1,A
   \   000124   EC           MOV     A,R4
   \   000125   33           RLC     A
   \   000126   FA           MOV     R2,A
   \   000127   E4           CLR     A
   \   000128   33           RLC     A
   \   000129   FB           MOV     R3,A
   \   00012A   E8           MOV     A,R0
   \   00012B   2A           ADD     A,R2
   \   00012C   F582         MOV     DPL,A
   \   00012E   E9           MOV     A,R1
   \   00012F   3B           ADDC    A,R3
   \   000130   F583         MOV     DPH,A
   \   000132   E5..         MOV     A,?V0 + 0
   \   000134   F0           MOVX    @DPTR,A
   \   000135   A3           INC     DPTR
   \   000136   E5..         MOV     A,?V0 + 1
   \   000138   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00013B   EC           MOV     A,R4
   \   00013C   C3           CLR     C
   \   00013D   95..         SUBB    A,?V0 + 4
   \   00013F   40D5         JC      ??ZDO_ParseSimpleDescBuf_10
   2808            }
   2809            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000141   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   000143   02....       LJMP    ??Subroutine226_0 & 0xFFFF
   2810          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000003   0C           INC     R4
   \   000004   22           RET
   2811          
   2812          /*********************************************************************
   2813           * @fn          ZDO_ParseDeviceAnnce
   2814           *
   2815           * @brief       Parse a Device Announce message.
   2816           *
   2817           * @param       inMsg - Incoming message
   2818           * @param       pAnnce - place to put the parsed information
   2819           *
   2820           * @return      none
   2821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2822          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   2823          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2824            uint8 *msg;
   2825          
   2826            // Parse incoming message
   2827            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00000C   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00000F   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   2828            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_548:
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   12....       LCALL   ?Subroutine23 & 0xFFFF
   2829            msg += 2;
   2830            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??CrossCallReturnLabel_48:
   \   000019                ; Setup parameters for call to function sAddrExtCpy
   \   000019   EE           MOV     A,R6
   \   00001A   FC           MOV     R4,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FD           MOV     R5,A
   \   00001D   E5..         MOV     A,?V0 + 0
   \   00001F   2402         ADD     A,#0x2
   \   000021   FA           MOV     R2,A
   \   000022   E5..         MOV     A,?V0 + 1
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ?Subroutine41 & 0xFFFF
   2831            msg += Z_EXTADDR_LEN;
   2832            pAnnce->capabilities = *msg;
   \                     ??CrossCallReturnLabel_79:
   \   00002A   85..82       MOV     DPL,?V0 + 0
   \   00002D   85..83       MOV     DPH,?V0 + 1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
   2833          }
   \   00003B   02....       LJMP    ??Subroutine196_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005                REQUIRE ??Subroutine248_0
   \   000005                ; // Fall through to label ??Subroutine248_0
   2834          
   2835          /*********************************************************************
   2836           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   2837           *
   2838           * @brief       This function handles parsing of the incoming Management
   2839           *              Network Update notify.
   2840           *
   2841           * @param       inMsg - incoming message (request)
   2842           *
   2843           * @return      a pointer to parsed response structure (NULL if not allocated).
   2844           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2845           *          by the calling function [osal_mem_free()].
   2846           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003                REQUIRE ??Subroutine247_0
   \   000003                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2847          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   2848          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   2849            uint8 status;
   2850            uint32 scannedChannels = 0;
   \   000005   90....       MOV     DPTR,#__Constant_0
   \   000008   78..         MOV     R0,#?V0 + 4
   \   00000A   12....       LCALL   ?L_MOV_X
   2851            uint16 totalTransmissions = 0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
   \   000010   75..00       MOV     ?V0 + 1,#0x0
   2852            uint16 transmissionFailures = 0;
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   75..00       MOV     ?V0 + 3,#0x0
   2853            uint8 listCount = 0;
   \   000019   75..00       MOV     ?V0 + 10,#0x0
   2854            uint8 *msg = inMsg->asdu;
   \   00001C   12....       LCALL   ?Subroutine47 & 0xFFFF
   2855            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   2856          
   2857            status = *msg++;
   \                     ??CrossCallReturnLabel_544:
   \   00001F   F5..         MOV     ?V0 + 11,A
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   2858            if ( status == ZSuccess )
   \   000026   702A         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   2859            {
   2860              scannedChannels = osal_build_uint32( msg, 4 );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   12....       LCALL   ?Subroutine152 & 0xFFFF
   2861              msg += 4;
   \                     ??CrossCallReturnLabel_217:
   \   00002B   EE           MOV     A,R6
   \   00002C   2404         ADD     A,#0x4
   \   00002E   FE           MOV     R6,A
   \   00002F   12....       LCALL   ?Subroutine71 & 0xFFFF
   2862              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_546:
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   E9           MOV     A,R1
   \   000035   F5..         MOV     ?V0 + 1,A
   2863              msg += 2;
   \   000037   EE           MOV     A,R6
   \   000038   2402         ADD     A,#0x2
   \   00003A   0E           INC     R6
   \   00003B   0E           INC     R6
   \   00003C   12....       LCALL   ?Subroutine71 & 0xFFFF
   2864              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_547:
   \   00003F   F5..         MOV     ?V0 + 2,A
   \   000041   E9           MOV     A,R1
   \   000042   F5..         MOV     ?V0 + 3,A
   2865              msg += 2;
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   0E           INC     R6
   \   000048   0E           INC     R6
   \   000049   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   2866              listCount = *msg++;
   2867            }
   \                     ??CrossCallReturnLabel_299:
   \   00004C   F5..         MOV     ?V0 + 10,A
   \   00004E   A3           INC     DPTR
   \   00004F   0E           INC     R6
   \   000050   AF83         MOV     R7,DPH
   2868          
   2869            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000052   85..82       MOV     DPL,?V0 + 10
   \   000055   8582..       MOV     ?V0 + 8,DPL
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   740A         MOV     A,#0xa
   \   00005A   25..         ADD     A,?V0 + 8
   \   00005C   FA           MOV     R2,A
   \   00005D   E4           CLR     A
   \   00005E   3400         ADDC    A,#0x0
   \   000060   12....       LCALL   ?Subroutine118 & 0xFFFF
   2870          
   2871            if ( pRsp )
   \                     ??CrossCallReturnLabel_183:
   \   000063   7001         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000065   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000066   6047         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_2
   2872            {
   2873              pRsp->status = status;
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   E5..         MOV     A,?V0 + 11
   \   00006E   F0           MOVX    @DPTR,A
   2874              pRsp->scannedChannels = scannedChannels;
   \   00006F   A3           INC     DPTR
   \   000070   78..         MOV     R0,#?V0 + 4
   \   000072   12....       LCALL   ?L_MOV_TO_X
   2875              pRsp->totalTransmissions = totalTransmissions;
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   E5..         MOV     A,?V0 + 0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   12....       LCALL   ?Subroutine6 & 0xFFFF
   2876              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_559:
   \   000084   E5..         MOV     A,?V0 + 2
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   E5..         MOV     A,?V0 + 3
   \   00008A   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   2877              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_560:
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E5..         MOV     A,?V0 + 10
   \   000091   F0           MOVX    @DPTR,A
   2878          
   2879              // Allocate a buffer big enough to handle the list.
   2880              if ( listCount > 0 )
   \   000092   601B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_2
   2881                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000094                ; Setup parameters for call to function osal_memcpy
   \   000094   8E..         MOV     ?V0 + 0,R6
   \   000096   8F..         MOV     ?V0 + 1,R7
   \   000098   75..00       MOV     ?V0 + 2,#0x0
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A0   AC..         MOV     R4,?V0 + 8
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   EA           MOV     A,R2
   \   0000A5   240A         ADD     A,#0xa
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EB           MOV     A,R3
   \   0000A9   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   2882            }
   \                     ??CrossCallReturnLabel_448:
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   2883          
   2884            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   0000AF   AA..         MOV     R2,?V0 + 14
   \   0000B1   AB..         MOV     R3,?V0 + 15
   \   0000B3   02....       LJMP    ??Subroutine199_0 & 0xFFFF
   2885          }
   2886          
   2887          /*********************************************************************
   2888           * @fn          ZDO_ParseMgmtNwkUpdateReq
   2889           *
   2890           * @brief       This function handles parsing the incoming Management
   2891           *              Network Update request and starts the request (if needed).
   2892           *
   2893           * @param       inMsg - incoming message (request)
   2894           * @param       pReq - pointer to place to parse message to
   2895           *
   2896           * @return      none
   2897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2898          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   2899          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2900            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine53 & 0xFFFF
   2901          
   2902            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_95:
   \   00000C   85..82       MOV     DPL,?V0 + 0
   \   00000F   85..83       MOV     DPH,?V0 + 1
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_TO_X
   2903            msg += 4;
   \   000017   12....       LCALL   ?Subroutine99 & 0xFFFF
   2904            pReq->scanDuration = *msg++;
   \                     ??CrossCallReturnLabel_298:
   \   00001A   FA           MOV     R2,A
   \   00001B   E5..         MOV     A,?V0 + 0
   \   00001D   2404         ADD     A,#0x4
   \   00001F   F8           MOV     R0,A
   \   000020   E5..         MOV     A,?V0 + 1
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \   000025   EA           MOV     A,R2
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   12....       LCALL   ?Subroutine30 & 0xFFFF
   2905          
   2906            if ( pReq->scanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_60:
   \   00002D   C3           CLR     C
   \   00002E   9406         SUBB    A,#0x6
   \   000030   5005         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   2907            {
   2908              // Request is to scan over channelMask
   2909              pReq->scanCount = *msg;
   \   000032   12....       LCALL   ?Subroutine55 & 0xFFFF
   2910            }
   \                     ??CrossCallReturnLabel_564:
   \   000035   8020         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   2911            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000037   74FE         MOV     A,#-0x2
   \   000039   6A           XRL     A,R2
   \   00003A   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00003C   74FF         MOV     A,#-0x1
   \   00003E   6A           XRL     A,R2
   \   00003F   7017         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   2912            {
   2913              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   2914              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000041   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   000044   A3           INC     DPTR
   \   000045   12....       LCALL   ?Subroutine31 & 0xFFFF
   2915          
   2916              if ( pReq->scanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_62:
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   64FF         XRL     A,#0xff
   \   00004F   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   2917              {
   2918                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000051   12....       LCALL   ?Subroutine58 & 0xFFFF
   2919              }
   2920            }
   \                     ??CrossCallReturnLabel_567:
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000057   F0           MOVX    @DPTR,A
   2921          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000058   02....       LJMP    ??Subroutine226_0 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CompareClusterLists?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_MatchEndDeviceBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveMatchMemory?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CopyMatchInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDMatchSendState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceBindMatchTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq
   2922          
   2923          /*********************************************************************
   2924          *********************************************************************/
   2925          
   2926          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NLME_PermitJoiningTimeout          0      0      0
     ZDMatchSendState                   1      0     68
       -> APS_SetEndDeviceBindTimeout
                                        0      0     70
       -> sAddrExtCpy                   0      0     70
       -> ZDP_BindUnbindReq             0      0     86
       -> APS_SetEndDeviceBindTimeout
                                        0      0     70
       -> ZDP_SendData                  0      0     80
       -> ZDP_SendData                  0      0     80
       -> ZDO_RemoveMatchMemory         0      0     70
     ZDO_AnyClusterMatches              0      0     42
     ZDO_BuildSimpleDescBuf             1      0     13
     ZDO_CompareClusterLists            0      0     44
     ZDO_ConvertOTAClusters             0      0     39
     ZDO_CopyMatchInfo                  0      0     48
       -> osal_memcpy                   0      0     46
       -> osal_mem_alloc                0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_mem_alloc                0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_mem_free                 0      0     40
       -> osal_mem_free                 0      0     40
     ZDO_EndDeviceBindMatchTimeoutCB
                                        2      0      0
       -> ZDMatchSendState              4      0      0
     ZDO_EndDeviceTimeoutCB             1      0     17
       -> ZDP_SendData                  0      0     34
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_Init                           2      0      0
       -> sAddrExtCpy                   4      0      0
       -> APS_ReflectorInit             4      0      0
       -> NLME_DeviceJoiningInit        4      0      0
     ZDO_MatchEndDeviceBind             1      0     30
       -> osal_mem_alloc                0      0     50
       -> osal_memset                   0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> APS_SetEndDeviceBindTimeout
                                        0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDMatchSendState              0      0     50
       -> ZDP_SendData                  0      0     60
       -> ZDP_SendData                  0      0     60
       -> ZDO_RemoveMatchMemory         0      0     50
     ZDO_ParseAddrRsp                   1      0     14
       -> osal_mem_alloc                0      0     28
       -> sAddrExtCpy                   0      0     28
     ZDO_ParseBindUnbindReq             1      0     10
       -> sAddrExtCpy                   0      0     20
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseDeviceAnnce               1      0     52
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseEPListRsp                 1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ParseEndDeviceBindReq          1      0     16
       -> sAddrExtCpy                   0      0     32
       -> osal_mem_alloc                0      0     32
       -> ZDO_ConvertOTAClusters        0      0     32
       -> osal_mem_alloc                0      0     32
       -> ZDO_ConvertOTAClusters        0      0     32
     ZDO_ParseMgmNwkDiscRsp             1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtBindRsp               1      0     18
       -> osal_mem_alloc                0      0     36
       -> sAddrExtCpy                   0      0     36
       -> sAddrExtCpy                   0      0     36
     ZDO_ParseMgmtLqiRsp                1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtNwkUpdateNotify       1      0     27
       -> osal_build_uint32             0      0     48
       -> osal_mem_alloc                0      0     48
       -> osal_memcpy                   0      0     54
     ZDO_ParseMgmtNwkUpdateReq          1      0     16
       -> osal_build_uint32             0      0     32
     ZDO_ParseMgmtRtgRsp                1      0     14
       -> osal_mem_alloc                0      0     28
     ZDO_ParseNodeDescRsp               2      0      9
     ZDO_ParsePowerDescRsp              1      0     10
     ZDO_ParseServerDiscRsp             1      0      9
     ZDO_ParseSimpleDescBuf             1      0     25
       -> osal_mem_alloc                0      0     32
       -> osal_mem_alloc                0      0     32
       -> osal_mem_free                 0      0     32
     ZDO_ParseSimpleDescRsp             1      0      9
       -> ZDO_ParseSimpleDescBuf        0      0     18
     ZDO_ParseUserDescRsp               1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ProcessActiveEPReq             0      0     21
       -> NLME_GetShortAddr             0      0     28
       -> afNumEndPoints                0      0     28
       -> afEndPoints                   0      0     28
       -> ZDP_EPRsp                     0      0     42
     ZDO_ProcessBindUnbindReq           1      0     39
       -> sAddrExtCpy                   0      0     68
       -> NLME_GetExtAddr               0      0     68
       -> sAddrExtCmp                   0      0     68
       -> bindNumOfEntries              0      0     68
       -> APSME_BindRequest             0      0     70
       -> ZDApp_NVUpdate                0      0     68
       -> APSME_LookupNwkAddr           0      0     68
       -> ZDP_NwkAddrReq                0      0     68
       -> APSME_UnBindRequest           0      0     70
       -> ZDApp_NVUpdate                0      0     68
       -> ZDP_SendData                  0      0     78
     ZDO_ProcessDeviceAnnce             1      0     42
       -> ZDO_ParseDeviceAnnce          0      0     84
       -> NLME_GetExtAddr               0      0     84
       -> sAddrExtCmp                   0      0     84
       -> NLME_GetShortAddr             0      0     84
       -> AddrMgrEntryLookupNwk         0      0     84
       -> osal_memset                   0      0     84
       -> sAddrExtCmp                   0      0     84
       -> AddrMgrExtAddrSet             0      0     84
       -> AddrMgrEntryUpdate            0      0     84
     ZDO_ProcessMatchDescReq            1      0     35
       -> NLME_IsAddressBroadcast       0      0     56
       -> ZDP_EPRsp                     0      0     70
       -> NLME_IsAddressBroadcast       0      0     56
       -> osal_mem_alloc                0      0     56
       -> ZDO_ConvertOTAClusters        0      0     56
       -> osal_mem_alloc                0      0     56
       -> ZDO_ConvertOTAClusters        0      0     56
       -> osal_msg_send                 0      0     56
       -> osal_mem_free                 0      0     56
       -> ZDO_AnyClusterMatches         0      0     60
       -> ZDO_AnyClusterMatches         0      0     60
       -> osal_msg_allocate             0      0     56
       -> osal_memcpy                   0      0     62
       -> osal_memcpy                   0      0     62
       -> ZDP_EPRsp                     0      0     70
       -> osal_mem_free                 0      0     56
       -> osal_mem_free                 0      0     56
     ZDO_ProcessMgmtBindReq             0      0     29
       -> APSME_GetRequest              0      0     48
       -> osal_mem_alloc                0      0     48
       -> APSME_GetRequest              0      0     48
       -> ZDP_MgmtBindRsp               0      0     58
       -> osal_mem_free                 0      0     48
     ZDO_ProcessMgmtDirectJoinReq       1      0     16
       -> NLME_DirectJoinRequest        0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtLeaveReq            1      0     23
       -> AddrMgrExtAddrValid           0      0     36
       -> NLME_GetExtAddr               0      0     36
       -> sAddrExtCmp                   0      0     36
       -> NLME_LeaveReq                 0      0     36
       -> ZDP_SendData                  0      0     46
     ZDO_ProcessMgmtLqiReq              1      0     66
       -> NLME_GetRequest               0      0    122
       -> AssocCount                    0      0    122
       -> osal_mem_alloc                0      0    122
       -> osal_memset                   0      0    122
       -> AssocFindDevice               0      0    122
       -> sAddrExtCpy                   0      0    122
       -> AddrMgrEntryLookupNwk         0      0    122
       -> sAddrExtCpy                   0      0    122
       -> NLME_GetRequest               0      0    122
       -> sAddrExtCpy                   0      0    122
       -> osal_memset                   0      0    122
       -> ZDP_MgmtLqiRsp                0      0    132
       -> osal_mem_free                 0      0    122
     ZDO_ProcessMgmtNwkDiscReq          1      0     23
       -> osal_build_uint32             0      0     46
       -> NLME_NwkDiscReq2              0      0     46
       -> NLME_NwkDiscTerm              0      0     46
     ZDO_ProcessMgmtPermitJoinReq       1      0     16
       -> NLME_PermitJoiningRequest     0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtRtgReq              1      0     26
       -> NLME_GetRequest               0      0     42
       -> osal_mem_alloc                0      0     42
       -> NLME_GetRequest               0      0     42
       -> ZDP_MgmtRtgRsp                0      0     52
       -> osal_mem_free                 0      0     42
     ZDO_ProcessNodeDescReq             0      0     14
       -> ZDP_NodeDescMsg               0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessPowerDescReq            0      0     14
       -> ZDP_PowerDescMsg              0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessServerDiscReq           0      0     14
       -> ZDP_ServerDiscRsp             0      0     28
     ZDO_ProcessSimpleDescReq           0      0     12
       -> afFindSimpleDesc              0      0     24
       -> ZDP_SimpleDescMsg             0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_ProcessUserDescReq             0      0     37
       -> osal_nv_read                  0      0     74
       -> ZDP_UserDescRsp               0      0     72
       -> ZDP_GenericRsp                0      0     74
     ZDO_ProcessUserDescSet             1      0     40
       -> osal_memcpy                   0      0     76
       -> osal_nv_write                 0      0     78
       -> ZDP_SendData                  0      0     80
     ZDO_RemoveMatchMemory              2      0     35
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
     ZDO_StartDevice                    1      0     23
       -> NLME_NetworkDiscoveryRequest
                                        0      0     46
       -> nwk_ScanJoiningOrphan         0      0     46
       -> NLME_OrphanJoinRequest        0      0     46
       -> osal_start_timerEx            0      0     46
     ZDO_UpdateAddrManager              3      0     13
       -> AddrMgrExtAddrSet             4      0     26
       -> AddrMgrEntryUpdate            4      0     26
     ZDO_UpdateNwkStatus                1      0     12
       -> osal_msg_find                 0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_send                 0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> NLME_GetExtAddr               0      0     24


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     ZDOBuildBuf                               52
     ZDO_EDBind                                 2
     matchED                                    2
     apsChannelMask                             4
     ZDO_Init                                  43
     ?Subroutine169                             7
     ZDO_StartDevice                          157
     ?Subroutine25                             15
     ?Subroutine170                             3
     ??Subroutine194_0                          5
     ?Subroutine12                              7
     ?Subroutine180                             5
     ZDO_UpdateNwkStatus                      134
     ??Subroutine209_0                          4
     ?Subroutine133                             6
     ??Subroutine215_0                          5
     ?Subroutine157                             1
     ??Subroutine216_0                          8
     ?Subroutine22                              6
     ?Subroutine87                              7
     ZDO_CompareClusterLists                  124
     ?Subroutine94                             16
     ?Subroutine72                              6
     ??Subroutine217_0                          5
     ZDO_AnyClusterMatches                     86
     ?Subroutine70                              6
     ZDO_ProcessNodeDescReq                    66
     ??Subroutine196_0                          5
     ?Subroutine49                             16
     ?Subroutine45                             25
     ?Subroutine145                             9
     ?Subroutine130                             9
     ??Subroutine203_0                          1
     ?Subroutine173                             6
     ?Subroutine156                             4
     ??Subroutine204_0                          3
     ?Subroutine174                             1
     ??Subroutine205_0                          5
     ?Subroutine142                             3
     ??Subroutine228_0                          5
     ?Subroutine167                             5
     ZDO_ProcessPowerDescReq                   66
     ?Subroutine185                             2
     ??Subroutine195_0                          3
     ZDO_ProcessSimpleDescReq                 149
     ?Subroutine57                              7
     ??Subroutine210_0                          7
     ?Subroutine62                             13
     ??Subroutine235_0                          6
     ?Subroutine132                             5
     ZDO_ProcessActiveEPReq                   115
     ?Subroutine186                             5
     ?Subroutine104                             4
     ??Subroutine197_0                          4
     ?Subroutine148                             1
     ??Subroutine198_0                          5
     ??Subroutine202_0                          4
     ?Subroutine146                             9
     ?Subroutine96                              6
     ??Subroutine227_0                          5
     ZDO_ConvertOTAClusters                    60
     ?Subroutine111                            10
     ZDO_ProcessMatchDescReq                  920
     ?Subroutine187                             3
     ??Subroutine199_0                          5
     ?Subroutine80                             11
     ?Subroutine73                             12
     ?Subroutine52                              9
     ??Subroutine200_0                          3
     ?Subroutine179                             5
     ?Subroutine48                             17
     ?Subroutine6                               3
     ??Subroutine201_0                          6
     ??Subroutine206_0                          1
     ??Subroutine207_0                          5
     ?Subroutine177                             6
     ??Subroutine220_0                          4
     ??Subroutine221_0                          4
     ?Subroutine136                             4
     ?Subroutine160                             5
     ?Subroutine165                             6
     ?Subroutine168                             5
     ?Subroutine134                             5
     ?Subroutine135                             1
     ??Subroutine229_0                          4
     ?Subroutine158                             5
     ?Subroutine35                              9
     ?Subroutine139                             5
     ?Subroutine59                             16
     ?Subroutine155                             7
     ?Subroutine13                              4
     ?Subroutine127                             6
     ??Subroutine242_0                          4
     ?Subroutine172                             8
     ?Subroutine163                             4
     ??Subroutine244_0                          5
     ?Subroutine79                             11
     ?Subroutine88                              5
     ?Subroutine118                            10
     ??Subroutine250_0                          5
     ZDO_ProcessBindUnbindReq                 418
     ?Subroutine188                             8
     ??Subroutine212_0                          6
     ?Subroutine151                             1
     ??Subroutine213_0                          6
     ?Subroutine102                             6
     ?Subroutine84                             10
     ?Subroutine107                            13
     ?Subroutine108                            13
     ?Subroutine100                             3
     ??Subroutine239_0                          5
     ZDO_UpdateAddrManager                     41
     ?Subroutine119                            21
     ZDO_ProcessServerDiscReq                  63
     ?Subroutine50                              4
     ZDO_EndDeviceTimeoutCB                   190
     ?Subroutine68                              1
     ??Subroutine222_0                          4
     ?Subroutine42                              5
     ?Subroutine131                             3
     ZDO_ProcessMgmtLqiReq                    751
     ?Subroutine26                             16
     ?Subroutine14                             17
     ?Subroutine8                              23
     ?Subroutine89                              6
     ?Subroutine113                             5
     ?Subroutine54                              3
     ??Subroutine214_0                          3
     ?Subroutine109                             3
     ?Subroutine175                             6
     ?Subroutine166                             7
     ??Subroutine237_0                          4
     ZDO_ProcessMgmtNwkDiscReq                118
     ?Subroutine192                             6
     ?Subroutine99                              4
     ??Subroutine208_0                          4
     ??Subroutine225_0                          4
     ?Subroutine182                             5
     ??Subroutine226_0                          5
     ?Subroutine138                             3
     ??Subroutine233_0                          6
     ?Subroutine144                             5
     ?Subroutine161                             7
     ?Subroutine36                              6
     ?Subroutine129                             4
     ?Subroutine153                             7
     ?Subroutine53                              7
     ?Subroutine152                            18
     ZDO_ProcessMgmtRtgReq                    268
     ?Subroutine190                             5
     ?Subroutine110                             5
     ZDO_ProcessMgmtBindReq                   285
     ZDO_ProcessMgmtDirectJoinReq              80
     ?Subroutine193                             5
     ?Subroutine141                             4
     ?Subroutine95                              3
     ??Subroutine211_0                          5
     ?Subroutine81                              6
     ?Subroutine183                             5
     ZDO_ProcessMgmtLeaveReq                  191
     ?Subroutine92                              5
     ?Subroutine37                              4
     ?Subroutine128                             6
     ZDO_ProcessMgmtPermitJoinReq              92
     NLME_PermitJoiningTimeout                  3
     ZDO_ProcessUserDescReq                   191
     ZDO_ProcessUserDescSet                   248
     ?Subroutine184                             3
     ?Subroutine33                              4
     ?Subroutine126                             7
     ZDO_ProcessDeviceAnnce                   165
     ??Subroutine231_0                          6
     ZDO_BuildSimpleDescBuf                   178
     ?Subroutine86                             14
     ?Subroutine77                             11
     ?Subroutine74                             10
     ?Subroutine17                             13
     ?Subroutine11                             12
     ?Subroutine124                             1
     ??Subroutine218_0                         10
     ?Subroutine149                             4
     ?Subroutine164                            10
     ZDO_MatchEndDeviceBind                   539
     ?Subroutine116                             6
     ??Subroutine219_0                          7
     ?Subroutine69                              6
     ?Subroutine66                              7
     ?Subroutine65                             10
     ?Subroutine61                              6
     ?Subroutine46                              3
     ??Subroutine223_0                         10
     ?Subroutine44                              3
     ??Subroutine224_0                         10
     ?Subroutine181                             5
     ?Subroutine85                             13
     ?Subroutine82                             14
     ?Subroutine75                             14
     ?Subroutine67                             10
     ?Subroutine63                             12
     ?Subroutine51                              3
     ??Subroutine230_0                          2
     ?Subroutine34                              4
     ?Subroutine5                              15
     ?Subroutine2                               7
     ZDO_RemoveMatchMemory                    129
     ZDO_CopyMatchInfo                        229
     ?Subroutine162                             1
     ?Subroutine101                            15
     ?Subroutine78                             16
     ?Subroutine83                              5
     ZDMatchSendState                         610
     ?Subroutine91                              6
     ?Subroutine64                             12
     ?Subroutine43                             37
     ZDO_EndDeviceBindMatchTimeoutCB
                                               16
     ZDO_ParseEndDeviceBindReq                296
     ?Subroutine103                             9
     ?Subroutine39                              1
     ??Subroutine232_0                         12
     ?Subroutine38                              5
     ?Subroutine143                             3
     ?Subroutine178                             6
     ?Subroutine19                              5
     ?Subroutine123                             5
     ?Subroutine154                             8
     ?Subroutine9                               7
     ?Subroutine0                               4
     ??Subroutine243_0                         12
     ?Subroutine93                              4
     ?Subroutine140                             4
     ZDO_ParseBindUnbindReq                   109
     ?Subroutine40                             11
     ?Subroutine28                              6
     ?Subroutine176                             6
     ?Subroutine125                             9
     ??Subroutine241_0                          4
     ?Subroutine76                              9
     ?Subroutine18                              6
     ?Subroutine1                               2
     ??Subroutine245_0                          4
     ??Subroutine246_0                          6
     ?Subroutine41                             17
     ?Subroutine121                             5
     ?Subroutine122                             7
     ZDO_ParseAddrRsp                         210
     ?Subroutine21                              8
     ?Subroutine150                            10
     ?Subroutine15                              5
     ?Subroutine147                             9
     ?Subroutine112                             4
     ??Subroutine240_0                          3
     ?Subroutine114                             9
     ?Subroutine105                             4
     ?Subroutine23                              7
     ?Subroutine31                              4
     ?Subroutine30                              8
     ZDO_ParseNodeDescRsp                     225
     ?Subroutine191                             5
     ?Subroutine16                              1
     ??Subroutine234_0                          8
     ?Subroutine7                               4
     ?Subroutine120                            15
     ?Subroutine4                               6
     ?Subroutine3                              38
     ?Subroutine159                             6
     ?Subroutine171                             2
     ??Subroutine249_0                          1
     ?Subroutine24                              5
     ZDO_ParsePowerDescRsp                    170
     ZDO_ParseSimpleDescRsp                    34
     ?Subroutine189                             4
     ZDO_ParseEPListRsp                        75
     ?Subroutine98                              9
     ??Subroutine236_0                          6
     ??Subroutine238_0                          6
     ?Subroutine137                             8
     ?Subroutine97                             25
     ?Subroutine20                             22
     ZDO_ParseServerDiscRsp                    52
     ZDO_ParseMgmtLqiRsp                      170
     ?Subroutine106                             4
     ?Subroutine60                              1
     ?Subroutine115                            10
     ?Subroutine56                              9
     ?Subroutine10                              4
     ??Subroutine248_0                          4
     ZDO_ParseMgmNwkDiscRsp                   239
     ?Subroutine32                             10
     ?Subroutine47                              3
     ?Subroutine29                              9
     ?Subroutine58                             15
     ?Subroutine55                              9
     ZDO_ParseMgmtRtgRsp                      144
     ?Subroutine90                             10
     ZDO_ParseMgmtBindRsp                     209
     ZDO_ParseUserDescRsp                      92
     ZDO_ParseSimpleDescBuf                   326
     ?Subroutine27                              5
     ZDO_ParseDeviceAnnce                      62
     ??Subroutine247_0                          5
     ?Subroutine71                              3
     ZDO_ParseMgmtNwkUpdateNotify             182
     ZDO_ParseMgmtNwkUpdateReq                 91
     __Constant_0                               4
     ??ZDO_Init?relay                           6
     ??ZDO_StartDevice?relay                    6
     ??ZDO_UpdateNwkStatus?relay                6
     ??ZDO_CompareClusterLists?relay            6
     ??ZDO_AnyClusterMatches?relay              6
     ??ZDO_ProcessNodeDescReq?relay             6
     ??ZDO_ProcessPowerDescReq?relay            6
     ??ZDO_ProcessSimpleDescReq?relay           6
     ??ZDO_ProcessActiveEPReq?relay             6
     ??ZDO_ConvertOTAClusters?relay             6
     ??ZDO_ProcessMatchDescReq?relay            6
     ??ZDO_ProcessBindUnbindReq?relay           6
     ??ZDO_UpdateAddrManager?relay              6
     ??ZDO_ProcessServerDiscReq?relay           6
     ??ZDO_EndDeviceTimeoutCB?relay             6
     ??ZDO_ProcessMgmtLqiReq?relay              6
     ??ZDO_ProcessMgmtNwkDiscReq?relay          6
     ??ZDO_ProcessMgmtRtgReq?relay              6
     ??ZDO_ProcessMgmtBindReq?relay             6
     ??ZDO_ProcessMgmtDirectJoinReq?relay       6
     ??ZDO_ProcessMgmtLeaveReq?relay            6
     ??ZDO_ProcessMgmtPermitJoinReq?relay       6
     ??NLME_PermitJoiningTimeout?relay          6
     ??ZDO_ProcessUserDescReq?relay             6
     ??ZDO_ProcessUserDescSet?relay             6
     ??ZDO_ProcessDeviceAnnce?relay             6
     ??ZDO_BuildSimpleDescBuf?relay             6
     ??ZDO_MatchEndDeviceBind?relay             6
     ??ZDO_RemoveMatchMemory?relay              6
     ??ZDO_CopyMatchInfo?relay                  6
     ??ZDMatchSendState?relay                   6
     ??ZDO_EndDeviceBindMatchTimeoutCB?relay    6
     ??ZDO_ParseEndDeviceBindReq?relay          6
     ??ZDO_ParseBindUnbindReq?relay             6
     ??ZDO_ParseAddrRsp?relay                   6
     ??ZDO_ParseNodeDescRsp?relay               6
     ??ZDO_ParsePowerDescRsp?relay              6
     ??ZDO_ParseSimpleDescRsp?relay             6
     ??ZDO_ParseEPListRsp?relay                 6
     ??ZDO_ParseServerDiscRsp?relay             6
     ??ZDO_ParseMgmtLqiRsp?relay                6
     ??ZDO_ParseMgmNwkDiscRsp?relay             6
     ??ZDO_ParseMgmtRtgRsp?relay                6
     ??ZDO_ParseMgmtBindRsp?relay               6
     ??ZDO_ParseUserDescRsp?relay               6
     ??ZDO_ParseSimpleDescBuf?relay             6
     ??ZDO_ParseDeviceAnnce?relay               6
     ??ZDO_ParseMgmtNwkUpdateNotify?relay       6
     ??ZDO_ParseMgmtNwkUpdateReq?relay          6

 
 11 174 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
      4 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
 11 468 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
     60 bytes of XDATA memory

Errors: none
Warnings: none
