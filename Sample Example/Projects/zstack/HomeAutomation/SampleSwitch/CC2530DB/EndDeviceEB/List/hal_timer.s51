///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               29/Nov/2010  16:05:25 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Darren\桌面\ZIGBEE      /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Components\hal\target\CC2530EB /
//                          \hal_timer.c                                      /
//    Command line       =  -f "C:\Documents and Settings\Darren\桌面\ZIGBEE  /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8 /
//                          wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func        /
//                          -DBLINK_LEDS) -f "C:\Documents and                /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8 /
//                          wConfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0    /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "C:\Documents and      /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8 /
//                          wZCL.cfg" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC     /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING) -DZCL_MESSAGE "C:\Documents and    /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Components\hal\target\CC2530EB /
//                          \hal_timer.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D     /
//                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D          /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -lC "C:\Documents and               /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\EndDeviceEB\List\" -lA     /
//                          "C:\Documents and Settings\Darren\桌面\ZIGBEE     /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\EndDeviceEB\List\"         /
//                          --diag_suppress Pe001,Pa010 -o "C:\Documents and  /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\EndDeviceEB\Obj\" -e       /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\" -I "C:\Documents and     /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\SOURCE\" -I             /
//                          "C:\Documents and Settings\Darren\桌面\ZIGBEE     /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\SOURCE\" -I          /
//                          "C:\Documents and Settings\Darren\桌面\ZIGBEE     /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\ZMAIN\TI2530DB\"  /
//                          -I "C:\Documents and Settings\Darren\桌面\ZIGBEE  /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          MT\" -I "C:\Documents and                         /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          HAL\INCLUDE\" -I "C:\Documents and                /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          HAL\TARGET\CC2530EB\" -I "C:\Documents and        /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          OSAL\MCU\CCSOC\" -I "C:\Documents and             /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          OSAL\INCLUDE\" -I "C:\Documents and               /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\AF\" -I "C:\Documents and                   /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\NWK\" -I "C:\Documents and                  /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\SEC\" -I "C:\Documents and                  /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\SAPI\" -I "C:\Documents and                 /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\SYS\" -I "C:\Documents and                  /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\ZCL\" -I "C:\Documents and                  /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          STACK\ZDO\" -I "C:\Documents and                  /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          ZMAC\F8W\" -I "C:\Documents and                   /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          ZMAC\" -I "C:\Documents and                       /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          SERVICES\SADDR\" -I "C:\Documents and             /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          SERVICES\SDATA\" -I "C:\Documents and             /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          MAC\INCLUDE\" -I "C:\Documents and                /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          MAC\HIGH_LEVEL\" -I "C:\Documents and             /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          MAC\LOW_LEVEL\srf04\" -I "C:\Documents and        /
//                          Settings\Darren\桌面\ZIGBEE                       /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ /
//                          MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR      /
//                          Systems\Embedded Workbench for MCS-51             /
//                          V7.51\8051\INC\" -I "C:\IAR Systems\Embedded      /
//                          Workbench for MCS-51 V7.51\8051\INC\CLIB\" -Ohz   /
//    List file          =  C:\Documents and Settings\Darren\桌面\ZIGBEE      /
//                          教學模組_出貨光碟\ZIGBEE                          /
//                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack- /
//                          CC2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation /
//                          \SampleSwitch\CC2530DB\EndDeviceEB\List\hal_timer /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_timer

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??HalTimerInterruptEnable?relay
        EXTERN ??halMcuWaitUs?relay
        EXTERN ??halProcessTimer1?relay
        EXTERN ??halProcessTimer3?relay
        EXTERN ??halProcessTimer4?relay
        EXTERN ??halTimerRemap?relay
        EXTERN ??halTimerSendCallBack?relay
        EXTERN ??halTimerSetChannelMode?relay
        EXTERN ??halTimerSetCount?relay
        EXTERN ??halTimerSetOpMode?relay
        EXTERN ??halTimerSetPrescale?relay
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_MUL
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalTimerConfig?relay
        FUNCTION ??HalTimerConfig?relay,0203H
        PUBLIC ??HalTimerInit?relay
        FUNCTION ??HalTimerInit?relay,0203H
        PUBLIC ??HalTimerInterruptEnable?relay
        FUNCTION ??HalTimerInterruptEnable?relay,0203H
        PUBLIC ??HalTimerStart?relay
        FUNCTION ??HalTimerStart?relay,0203H
        PUBLIC ??HalTimerStop?relay
        FUNCTION ??HalTimerStop?relay,0203H
        PUBLIC ??HalTimerTick?relay
        FUNCTION ??HalTimerTick?relay,0203H
        PUBLIC ??halMcuWaitMs?relay
        FUNCTION ??halMcuWaitMs?relay,0203H
        PUBLIC ??halMcuWaitUs?relay
        FUNCTION ??halMcuWaitUs?relay,0203H
        PUBLIC ??halProcessTimer1?relay
        FUNCTION ??halProcessTimer1?relay,0203H
        PUBLIC ??halProcessTimer3?relay
        FUNCTION ??halProcessTimer3?relay,0203H
        PUBLIC ??halProcessTimer4?relay
        FUNCTION ??halProcessTimer4?relay,0203H
        PUBWEAK `??halTimer1Isr??INTVEC 75`
        PUBWEAK `??halTimer3Isr??INTVEC 91`
        PUBWEAK `??halTimer4Isr??INTVEC 99`
        PUBLIC ??halTimerRemap?relay
        FUNCTION ??halTimerRemap?relay,0203H
        PUBLIC ??halTimerSendCallBack?relay
        FUNCTION ??halTimerSendCallBack?relay,0203H
        PUBLIC ??halTimerSetChannelMode?relay
        FUNCTION ??halTimerSetChannelMode?relay,0203H
        PUBLIC ??halTimerSetCount?relay
        FUNCTION ??halTimerSetCount?relay,0203H
        PUBLIC ??halTimerSetOpMode?relay
        FUNCTION ??halTimerSetOpMode?relay,0203H
        PUBLIC ??halTimerSetPrescale?relay
        FUNCTION ??halTimerSetPrescale?relay,0203H
        PUBLIC HalTimerConfig
        FUNCTION HalTimerConfig,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC HalTimerInit
        FUNCTION HalTimerInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalTimerInterruptEnable
        FUNCTION HalTimerInterruptEnable,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalTimerStart
        FUNCTION HalTimerStart,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC HalTimerStop
        FUNCTION HalTimerStop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalTimerTick
        FUNCTION HalTimerTick,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK T1CCTL0
        PUBWEAK T1CCTL1
        PUBWEAK T1CCTL2
        PUBWEAK T1CTL
        PUBWEAK T3CCTL0
        PUBWEAK T3CCTL1
        PUBWEAK T3CTL
        PUBWEAK T4CCTL0
        PUBWEAK T4CCTL1
        PUBWEAK T4CTL
        PUBWEAK _A_IEN1
        PUBWEAK _A_TIMIF
        PUBLIC halMcuWaitMs
        FUNCTION halMcuWaitMs,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halMcuWaitUs
        FUNCTION halMcuWaitUs,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC halProcessTimer1
        FUNCTION halProcessTimer1,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halProcessTimer3
        FUNCTION halProcessTimer3,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halProcessTimer4
        FUNCTION halProcessTimer4,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimer1Isr
        FUNCTION halTimer1Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halTimer3Isr
        FUNCTION halTimer3Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halTimer4Isr
        FUNCTION halTimer4Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC halTimerRemap
        FUNCTION halTimerRemap,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSendCallBack
        FUNCTION halTimerSendCallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halTimerSetChannelMode
        FUNCTION halTimerSetChannelMode,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSetCount
        FUNCTION halTimerSetCount,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC halTimerSetOpMode
        FUNCTION halTimerSetOpMode,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSetPrescale
        FUNCTION halTimerSetPrescale,080203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalTimerConfig      SYMBOL "HalTimerConfig"
??HalTimerConfig?relay SYMBOL "?relay", HalTimerConfig
HalTimerInit        SYMBOL "HalTimerInit"
??HalTimerInit?relay SYMBOL "?relay", HalTimerInit
HalTimerInterruptEnable SYMBOL "HalTimerInterruptEnable"
??HalTimerInterruptEnable?relay SYMBOL "?relay", HalTimerInterruptEnable
HalTimerStart       SYMBOL "HalTimerStart"
??HalTimerStart?relay SYMBOL "?relay", HalTimerStart
HalTimerStop        SYMBOL "HalTimerStop"
??HalTimerStop?relay SYMBOL "?relay", HalTimerStop
HalTimerTick        SYMBOL "HalTimerTick"
??HalTimerTick?relay SYMBOL "?relay", HalTimerTick
halMcuWaitMs        SYMBOL "halMcuWaitMs"
??halMcuWaitMs?relay SYMBOL "?relay", halMcuWaitMs
halMcuWaitUs        SYMBOL "halMcuWaitUs"
??halMcuWaitUs?relay SYMBOL "?relay", halMcuWaitUs
halProcessTimer1    SYMBOL "halProcessTimer1"
??halProcessTimer1?relay SYMBOL "?relay", halProcessTimer1
halProcessTimer3    SYMBOL "halProcessTimer3"
??halProcessTimer3?relay SYMBOL "?relay", halProcessTimer3
halProcessTimer4    SYMBOL "halProcessTimer4"
??halProcessTimer4?relay SYMBOL "?relay", halProcessTimer4
halTimer1Isr        SYMBOL "halTimer1Isr"
`??halTimer1Isr??INTVEC 75` SYMBOL "??INTVEC 75", halTimer1Isr
halTimer3Isr        SYMBOL "halTimer3Isr"
`??halTimer3Isr??INTVEC 91` SYMBOL "??INTVEC 91", halTimer3Isr
halTimer4Isr        SYMBOL "halTimer4Isr"
`??halTimer4Isr??INTVEC 99` SYMBOL "??INTVEC 99", halTimer4Isr
halTimerRemap       SYMBOL "halTimerRemap"
??halTimerRemap?relay SYMBOL "?relay", halTimerRemap
halTimerSendCallBack SYMBOL "halTimerSendCallBack"
??halTimerSendCallBack?relay SYMBOL "?relay", halTimerSendCallBack
halTimerSetChannelMode SYMBOL "halTimerSetChannelMode"
??halTimerSetChannelMode?relay SYMBOL "?relay", halTimerSetChannelMode
halTimerSetCount    SYMBOL "halTimerSetCount"
??halTimerSetCount?relay SYMBOL "?relay", halTimerSetCount
halTimerSetOpMode   SYMBOL "halTimerSetOpMode"
??halTimerSetOpMode?relay SYMBOL "?relay", halTimerSetOpMode
halTimerSetPrescale SYMBOL "halTimerSetPrescale"
??halTimerSetPrescale?relay SYMBOL "?relay", halTimerSetPrescale

// C:\Documents and Settings\Darren\桌面\ZIGBEE 教學模組_出貨光碟\ZIGBEE Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\Components\hal\target\CC2530EB\hal_timer.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_timer.c
//    3   Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
//    4   Revision:       $Revision: 19404 $
//    5 
//    6   Description:   This file contains the interface to the Timer Service.
//    7 
//    8   Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   Should you have any questions regarding your right to use this Software,
//   11   contact Texas Instruments Incorporated at www.TI.com.
//   12 **************************************************************************************************/
//   13 /*********************************************************************
//   14  NOTE: The following mapping is done between the logical timer
//   15        names defined in HAL_TIMER.H and the physical HW timer.
//   16 
//   17        HAL_TIMER_0 --> HW Timer 3  (8-bits)
//   18        HAL_TIMER_2 --> HW Timer 4  (8-bits)
//   19        HAL_TIMER_3 --> HW Timer 1  (16-bits)
//   20 
//   21  NOTE: The timer code assumes only one channel, CHANNEL 0, is used
//   22        for each timer.  There is currently no support for other
//   23        channels.
//   24 
//   25  NOTE: Only Output Compare Mode is supported.  There is no provision
//   26        to support Input Capture Mode.
//   27 
//   28  NOTE: There is no support to map the output of the timers to a
//   29        physical I/O pin
//   30 
//   31 *********************************************************************/
//   32 /*********************************************************************
//   33  * INCLUDES
//   34  */
//   35 #include  "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ccH
// unsigned char volatile __sfr T3CCTL0
T3CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ceH
// unsigned char volatile __sfr T3CCTL1
T3CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d8H
// union <unnamed> volatile __sfr _A_TIMIF
_A_TIMIF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e5H
// unsigned char volatile __sfr T1CCTL0
T1CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e6H
// unsigned char volatile __sfr T1CCTL1
T1CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e7H
// unsigned char volatile __sfr T1CCTL2
T1CCTL2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ebH
// unsigned char volatile __sfr T4CTL
T4CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ecH
// unsigned char volatile __sfr T4CCTL0
T4CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0eeH
// unsigned char volatile __sfr T4CCTL1
T4CCTL1:
        DS 1
//   36 #include  "hal_defs.h"
//   37 #include  "hal_types.h"
//   38 #include  "hal_timer.h"
//   39 
//   40 /*********************************************************************
//   41  * MACROS
//   42  */
//   43 
//   44 /*********************************************************************
//   45  * CONSTANTS
//   46  */
//   47 #define HW_TIMER_1        0x00
//   48 #define HW_TIMER_3        0x01
//   49 #define HW_TIMER_4        0x02
//   50 #define HW_TIMER_INVALID  0x03
//   51 #define HW_TIMER_MAX      0x03
//   52 
//   53 #define IEN1_T1IE     0x02    /* Timer1 Interrupt Enable */
//   54 #define IEN1_T3IE     0x08    /* Timer3 Interrupt Enable */
//   55 #define IEN1_T4IE     0x10    /* Timer4 Interrupt Enable */
//   56 
//   57 #define T1CTL_CH2IF   0x80
//   58 #define T1CTL_CH1IF   0x40
//   59 #define T1CTL_CH0IF   0x20
//   60 #define T1CTL_OVFIF   0x10
//   61 
//   62 #define TIMIF_T1OVFIM 0x40
//   63 #define TIMIF_T4CH1IF 0x20
//   64 #define TIMIF_T4CH0IF 0x10
//   65 #define TIMIF_T4OVFIF 0x08
//   66 #define TIMIF_T3CH1IF 0x04
//   67 #define TIMIF_T3CH0IF 0x02
//   68 #define TIMIF_T3OVFIF 0x01
//   69 
//   70 #define T34CTL_OVFIM  0x80
//   71 
//   72 #define T134CCTL_IM         0x40    /* Interrupt Mask */
//   73 #define T134CCTL_CMP_BITS   0x38    /* Bits[5:3] == CMP[2:0] */
//   74 #define T134CCTL_MODE       0x04    /* Capture(0)/Compare(1) mode */
//   75 #define T134CCTL_CAP_BITS   0x03    /* Bits[1:0] == CAP[1:0] */
//   76 
//   77 #define T134CCTL_CMP_OC     0x18    /* Set output on compare, clear at 0 */
//   78 #define T134CCTL_CAP_RE     0x01    /* Set input capture on rising edge */
//   79 
//   80 /* Timer clock pre-scaler definitions for 16bit timer1 */
//   81 #define HAL_TIMER1_16_TC_DIV1     0x00  /* No clock pre-scaling */
//   82 #define HAL_TIMER1_16_TC_DIV8     0x04  /* Clock pre-scaled by 8 */
//   83 #define HAL_TIMER1_16_TC_DIV32    0x08  /* Clock pre-scaled by 32 */
//   84 #define HAL_TIMER1_16_TC_DIV128   0x0c  /* Clock pre-scaled by 128 */
//   85 #define HAL_TIMER1_16_TC_BITS     0x0c  /* Bits 3:2 */
//   86 
//   87 /* Timer clock pre-scaler definitions for 8bit timer3 and timer4 */
//   88 #define HAL_TIMER34_8_TC_DIV1     0x00  /* No clock pre-scaling */
//   89 #define HAL_TIMER34_8_TC_DIV2     0x20  /* Clock pre-scaled by 2 */
//   90 #define HAL_TIMER34_8_TC_DIV4     0x40  /* Clock pre-scaled by 4 */
//   91 #define HAL_TIMER34_8_TC_DIV8     0x60  /* Clock pre-scaled by 8 */
//   92 #define HAL_TIMER34_8_TC_DIV16    0x80  /* Clock pre-scaled by 16 */
//   93 #define HAL_TIMER34_8_TC_DIV32    0xA0  /* Clock pre-scaled by 32 */
//   94 #define HAL_TIMER34_8_TC_DIV64    0xC0  /* Clock pre-scaled by 64 */
//   95 #define HAL_TIMER34_8_TC_DIV128   0xE0  /* Clock pre-scaled by 128 */
//   96 #define HAL_TIMER34_8_TC_BITS     0xE0  /* Bits 7:5 */
//   97 
//   98 /* Operation Mode definitions */
//   99 #define HAL_TIMER1_OPMODE_STOP      0x00  /* Free Running Mode, Count from 0 to Max */
//  100 #define HAL_TIMER1_OPMODE_FREERUN   0x01  /* Free Running Mode, Count from 0 to Max */
//  101 #define HAL_TIMER1_OPMODE_MODULO    0x02  /* Modulo Mode, Count from 0 to CompareValue */
//  102 #define HAL_TIMER1_OPMODE_BITS      0x03  /* Bits 1:0 */
//  103 
//  104 #define HAL_TIMER34_START           0x10  /* Timer3 and Timer4 have separate Start bit */
//  105 #define HAL_TIMER34_OPMODE_FREERUN  0x00  /* Free Running Mode, Count from 0 to Max */
//  106 #define HAL_TIMER34_OPMODE_MODULO   0x02  /* Modulo Mode, Count from 0 to CompareValue */
//  107 #define HAL_TIMER34_OPMODE_BITS     0x03  /* Bits 1:0 */
//  108 
//  109 #define HAL_TIMER_MODE_STOP         0x03
//  110 
//  111 /* Prescale settings */
//  112 #define HAL_TIMER1_16_PRESCALE      HAL_TIMER1_16_TC_DIV128
//  113 #define HAL_TIMER1_16_PRESCALE_VAL  128
//  114 #define HAL_TIMER3_8_PRESCALE       HAL_TIMER34_8_TC_DIV128
//  115 #define HAL_TIMER3_8_PRESCALE_VAL   128
//  116 #define HAL_TIMER4_8_PRESCALE       HAL_TIMER34_8_TC_DIV128
//  117 #define HAL_TIMER4_8_PRESCALE_VAL   128
//  118 
//  119 /* Clock settings */
//  120 #define HAL_TIMER_16MHZ           16
//  121 #define HAL_TIMER_32MHZ           32
//  122 
//  123 /* Default all timers to use channel 0 */
//  124 #define TCHN_T1CCTL   &(X_T1CCTL0)
//  125 #define TCHN_T1CCL    &(X_T1CC0L)
//  126 #define TCHN_T1CCH    &(X_T1CC0H)
//  127 #define TCNH_T1OVF    &(X_TIMIF)
//  128 #define TCHN_T1OVFBIT TIMIF_T1OVFIM
//  129 #define TCHN_T1INTBIT IEN1_T1IE
//  130 
//  131 #define TCHN_T3CCTL   &(X_T3CCTL0)
//  132 #define TCHN_T3CCL    &(X_T3CC0)
//  133 #define TCHN_T3CCH    &(X_T3CC0)
//  134 #define TCNH_T3OVF    &(X_T3CTL)
//  135 #define TCHN_T3OVFBIT T34CTL_OVFIM
//  136 #define TCHN_T3INTBIT IEN1_T3IE
//  137 
//  138 #define TCHN_T4CCTL   &(X_T4CCTL0)
//  139 #define TCHN_T4CCL    &(X_T4CC0)
//  140 #define TCHN_T4CCH    &(X_T4CC0)
//  141 #define TCNH_T4OVF    &(X_T4CTL)
//  142 #define TCHN_T4OVFBIT T34CTL_OVFIM
//  143 #define TCHN_T4INTBIT IEN1_T4IE
//  144 
//  145 /*********************************************************************
//  146  * TYPEDEFS
//  147  */
//  148 typedef struct
//  149 {
//  150   bool configured;
//  151   bool intEnable;
//  152   uint8 opMode;
//  153   uint8 channel;
//  154   uint8 channelMode;
//  155   uint8 prescale;
//  156   uint8 prescaleVal;
//  157   uint8 clock;
//  158   halTimerCBack_t callBackFunc;
//  159 } halTimerSettings_t;
//  160 
//  161 typedef struct
//  162 {
//  163   uint8 volatile XDATA *TxCCTL;
//  164   uint8 volatile XDATA *TxCCH;
//  165   uint8 volatile XDATA *TxCCL;
//  166   uint8 volatile XDATA *TxOVF;
//  167   uint8 ovfbit;
//  168   uint8 intbit;
//  169 } halTimerChannel_t;
//  170 
//  171 /*********************************************************************
//  172  * GLOBAL VARIABLES
//  173  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  174 static halTimerSettings_t halTimerRecord[HW_TIMER_MAX];
halTimerRecord:
        DS 30
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  175 static halTimerChannel_t  halTimerChannel[HW_TIMER_MAX];
halTimerChannel:
        DS 30
        REQUIRE __INIT_XDATA_Z
//  176 
//  177 /*********************************************************************
//  178  * FUNCTIONS - External
//  179  */
//  180 
//  181 /*********************************************************************
//  182  * FUNCTIONS - Local
//  183  */
//  184 uint8 halTimerSetCount (uint8 cc2430id, uint32 timePerTick);
//  185 uint8 halTimerSetPrescale (uint8 cc2430id, uint8 prescale);
//  186 uint8 halTimerSetOpMode (uint8 cc2430id, uint8 opMode);
//  187 uint8 halTimerSetChannelMode (uint8 cc2430id, uint8 channelMode);
//  188 void halTimerSendCallBack (uint8 timerId, uint8 channel, uint8 channelMode);
//  189 uint8 halTimerRemap (uint8 timerId);
//  190 void halProcessTimer1 (void);
//  191 void halProcessTimer3 (void);
//  192 void halProcessTimer4 (void);
//  193 
//  194 
//  195 /*********************************************************************
//  196  * FUNCTIONS - API
//  197  */
//  198 
//  199 /*********************************************************************
//  200  * @fn      HalTimerInit
//  201  *
//  202  * @brief   Initialize Timer Service
//  203  *
//  204  * @param   None
//  205  *
//  206  * @return  None
//  207  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  208 void HalTimerInit (void)
HalTimerInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalTimerInit
//  209 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  210   T1CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV     0xe5,#0x0
//  211   T1CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV     0xe6,#0x0
//  212   T1CCTL2 = 0;    /* Make sure interrupts are disabled */
        MOV     0xe7,#0x0
//  213   T3CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV     0xcc,#0x0
//  214   T3CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV     0xce,#0x0
//  215   T4CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV     0xec,#0x0
//  216   T4CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV     0xee,#0x0
//  217 
//  218   /* Setup prescale & clock for timer0 */
//  219   halTimerRecord[HW_TIMER_1].prescale    = HAL_TIMER1_16_PRESCALE;
        MOV     A,#0xc
        MOV     DPTR,#(halTimerRecord + 5)
        MOVX    @DPTR,A
//  220   halTimerRecord[HW_TIMER_1].clock       = HAL_TIMER_32MHZ;
        MOV     A,#0x20
        MOV     DPTR,#(halTimerRecord + 7)
        MOVX    @DPTR,A
//  221   halTimerRecord[HW_TIMER_1].prescaleVal = HAL_TIMER1_16_PRESCALE_VAL;
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerRecord + 6)
        MOVX    @DPTR,A
//  222 
//  223   /* Setup prescale & clock for timer2 */
//  224   halTimerRecord[HW_TIMER_3].prescale    = HAL_TIMER3_8_PRESCALE;
        MOV     A,#-0x20
        MOV     DPTR,#(halTimerRecord + 15)
        MOVX    @DPTR,A
//  225   halTimerRecord[HW_TIMER_3].clock       = HAL_TIMER_32MHZ;
        MOV     A,#0x20
        MOV     DPTR,#(halTimerRecord + 17)
        MOVX    @DPTR,A
//  226   halTimerRecord[HW_TIMER_3].prescaleVal = HAL_TIMER3_8_PRESCALE_VAL;
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerRecord + 16)
        MOVX    @DPTR,A
//  227 
//  228   /* Setup prescale & clock for timer3 */
//  229   halTimerRecord[HW_TIMER_4].prescale    = HAL_TIMER4_8_PRESCALE;
        MOV     A,#-0x20
        MOV     DPTR,#(halTimerRecord + 25)
        MOVX    @DPTR,A
//  230   halTimerRecord[HW_TIMER_4].clock       = HAL_TIMER_32MHZ;
        MOV     A,#0x20
        MOV     DPTR,#(halTimerRecord + 27)
        MOVX    @DPTR,A
//  231   halTimerRecord[HW_TIMER_4].prescaleVal = HAL_TIMER4_8_PRESCALE_VAL;
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerRecord + 26)
        MOVX    @DPTR,A
//  232 
//  233   /* Setup Timer1 Channel structure */
//  234   halTimerChannel[HW_TIMER_1].TxCCTL =  TCHN_T1CCTL;
        MOV     DPTR,#halTimerChannel
        MOV     A,#-0x1b
        LCALL   ??Subroutine16_0 & 0xFFFF
//  235   halTimerChannel[HW_TIMER_1].TxCCL =   TCHN_T1CCL;
??CrossCallReturnLabel_20:
        MOV     DPTR,#(halTimerChannel + 4)
        MOV     A,#-0x26
        LCALL   ??Subroutine16_0 & 0xFFFF
//  236   halTimerChannel[HW_TIMER_1].TxCCH =   TCHN_T1CCH;
??CrossCallReturnLabel_21:
        MOV     DPTR,#(halTimerChannel + 2)
        MOV     A,#-0x25
        LCALL   ??Subroutine16_0 & 0xFFFF
//  237   halTimerChannel[HW_TIMER_1].TxOVF =   TCNH_T1OVF;
??CrossCallReturnLabel_22:
        MOV     DPTR,#(halTimerChannel + 6)
        MOV     A,#-0x28
        LCALL   ??Subroutine16_0 & 0xFFFF
//  238   halTimerChannel[HW_TIMER_1].ovfbit =  TCHN_T1OVFBIT;
??CrossCallReturnLabel_23:
        MOV     A,#0x40
        MOV     DPTR,#(halTimerChannel + 8)
        MOVX    @DPTR,A
//  239   halTimerChannel[HW_TIMER_1].intbit =  TCHN_T1INTBIT;
        MOV     A,#0x2
        MOV     DPTR,#(halTimerChannel + 9)
        MOVX    @DPTR,A
//  240 
//  241   /* Setup Timer3 Channel structure */
//  242   halTimerChannel[HW_TIMER_3].TxCCTL =  TCHN_T3CCTL;
        MOV     DPTR,#(halTimerChannel + 10)
        MOV     A,#-0x34
        LCALL   ??Subroutine16_0 & 0xFFFF
//  243   halTimerChannel[HW_TIMER_3].TxCCL =   TCHN_T3CCL;
??CrossCallReturnLabel_24:
        MOV     DPTR,#(halTimerChannel + 14)
        LCALL   ?Subroutine0 & 0xFFFF
//  244   halTimerChannel[HW_TIMER_3].TxCCH =   TCHN_T3CCH;
??CrossCallReturnLabel_30:
        MOV     DPTR,#(halTimerChannel + 12)
        LCALL   ?Subroutine0 & 0xFFFF
//  245   halTimerChannel[HW_TIMER_3].TxOVF =   TCNH_T3OVF;
??CrossCallReturnLabel_31:
        MOV     DPTR,#(halTimerChannel + 16)
        MOV     A,#-0x35
        LCALL   ??Subroutine16_0 & 0xFFFF
//  246   halTimerChannel[HW_TIMER_3].ovfbit =  TCHN_T3OVFBIT;
??CrossCallReturnLabel_25:
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerChannel + 18)
        MOVX    @DPTR,A
//  247   halTimerChannel[HW_TIMER_3].intbit =  TCHN_T3INTBIT;
        MOV     A,#0x8
        MOV     DPTR,#(halTimerChannel + 19)
        MOVX    @DPTR,A
//  248 
//  249   /* Setup Timer4 Channel structure */
//  250   halTimerChannel[HW_TIMER_4].TxCCTL =  TCHN_T4CCTL;
        MOV     DPTR,#(halTimerChannel + 20)
        MOV     A,#-0x14
        LCALL   ??Subroutine16_0 & 0xFFFF
//  251   halTimerChannel[HW_TIMER_4].TxCCL =   TCHN_T4CCL;
??CrossCallReturnLabel_26:
        MOV     DPTR,#(halTimerChannel + 24)
        MOV     A,#-0x13
        LCALL   ??Subroutine16_0 & 0xFFFF
//  252   halTimerChannel[HW_TIMER_4].TxCCH =   TCHN_T4CCH;
??CrossCallReturnLabel_27:
        MOV     DPTR,#(halTimerChannel + 22)
        MOV     A,#-0x13
        LCALL   ??Subroutine16_0 & 0xFFFF
//  253   halTimerChannel[HW_TIMER_4].TxOVF =   TCNH_T4OVF;
??CrossCallReturnLabel_28:
        MOV     DPTR,#(halTimerChannel + 26)
        MOV     A,#-0x15
        LCALL   ??Subroutine16_0 & 0xFFFF
//  254   halTimerChannel[HW_TIMER_4].ovfbit =  TCHN_T4OVFBIT;
??CrossCallReturnLabel_29:
        MOV     A,#-0x80
        MOV     DPTR,#(halTimerChannel + 28)
        MOVX    @DPTR,A
//  255   halTimerChannel[HW_TIMER_4].intbit =  TCHN_T4INTBIT;
        MOV     A,#0x10
        MOV     DPTR,#(halTimerChannel + 29)
        MOVX    @DPTR,A
//  256 }
        LJMP    ?Subroutine12 & 0xFFFF
        CFI EndBlock cfiBlock0
        REQUIRE T1CCTL0
        REQUIRE T1CCTL1
        REQUIRE T1CCTL2
        REQUIRE T3CCTL0
        REQUIRE T3CCTL1
        REQUIRE T4CCTL0
        REQUIRE T4CCTL1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     A,#-0x33
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond8) CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond9) CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond10) CFA_SP SP+-5
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond13) CFA_SP SP+-5
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x70
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  257 
//  258 /***************************************************************************************************
//  259  * @fn      HalTimerConfig
//  260  *
//  261  * @brief   Configure the Timer Serivce
//  262  *
//  263  * @param   timerId - Id of the timer
//  264  *          opMode  - Operation mode
//  265  *          channel - Channel where the counter operates on
//  266  *          channelMode - Mode of that channel
//  267  *          prescale - Prescale of the clock
//  268  *          cBack - Pointer to the callback function
//  269  *
//  270  * @return  Status of the configuration
//  271  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  272 uint8 HalTimerConfig (uint8 timerId, uint8 opMode, uint8 channel, uint8 channelMode,
HalTimerConfig:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function HalTimerConfig
//  273                       bool intEnable, halTimerCBack_t cBack)
//  274 {
        FUNCALL HalTimerConfig, halTimerRemap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 0,R3
        MOV     ?V0 + 1,R4
        MOV     ?V0 + 2,R5
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  275   uint8 hwtimerid;
//  276 
//  277   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        MOV     R2,A
//  278 
//  279   if ((opMode & HAL_TIMER_MODE_MASK) && (timerId < HAL_TIMER_MAX) &&
//  280       (channelMode & HAL_TIMER_CHANNEL_MASK) && (channel & HAL_TIMER_CHANNEL_MASK))
        MOV     A,#0x3
        ANL     A,?V0 + 4
        JZ      ??HalTimerConfig_0
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,#0x4
        JNC     ??HalTimerConfig_0
        MOV     A,#0xf
        ANL     A,?V0 + 1
        JZ      ??HalTimerConfig_0
        MOV     A,#0xf
        ANL     A,?V0 + 0
        JZ      ??HalTimerConfig_0
//  281   {
//  282     halTimerRecord[hwtimerid].configured    = TRUE;
        MOV     A,R2
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,#0x1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  283     halTimerRecord[hwtimerid].opMode        = opMode;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        LCALL   ?Subroutine9 & 0xFFFF
//  284     halTimerRecord[hwtimerid].channel       = channel;
??CrossCallReturnLabel_16:
        MOV     A,?V0 + 0
        LCALL   ?Subroutine2 & 0xFFFF
//  285     halTimerRecord[hwtimerid].channelMode   = channelMode;
??CrossCallReturnLabel_0:
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  286     halTimerRecord[hwtimerid].intEnable     = intEnable;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  287     halTimerRecord[hwtimerid].callBackFunc  = cBack;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  288   }
//  289   else
//  290   {
//  291     return HAL_TIMER_PARAMS_ERROR;
//  292   }
//  293   return HAL_TIMER_OK;
        MOV     R1,#0x0
        SJMP    ??HalTimerConfig_1
??HalTimerConfig_0:
        MOV     R1,#0x2
        CFI EndBlock cfiBlock17
??HalTimerConfig_1:
        REQUIRE ?Subroutine13
        ; // Fall through to label ?Subroutine13
//  294 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18
//  295 
//  296 
//  297 /***************************************************************************************************
//  298  * @fn      HalTimerStart
//  299  *
//  300  * @brief   Start the Timer Service
//  301  *
//  302  * @param   timerId      - ID of the timer
//  303  *          timerPerTick - number of micro sec per tick, (ticks x prescale) / clock = usec/tick
//  304  *
//  305  * @return  Status - OK or Not OK
//  306  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  307 uint8 HalTimerStart (uint8 timerId, uint32 timePerTick)
HalTimerStart:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function HalTimerStart
//  308 {
        FUNCALL HalTimerStart, halTimerRemap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetPrescale
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetOpMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, halTimerSetChannelMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStart, HalTimerInterruptEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  309   uint8 hwtimerid;
//  310 
//  311   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        MOV     ?V0 + 4,A
//  312 
//  313   if (halTimerRecord[hwtimerid].configured)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      ??HalTimerStart_0
//  314   {
//  315     halTimerSetCount (hwtimerid, timePerTick);
        ; Setup parameters for call to function halTimerSetCount
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R1,?V0 + 4
        LCALL   ??halTimerSetCount?relay
//  316     halTimerSetPrescale (hwtimerid, halTimerRecord[hwtimerid].prescale);
        ; Setup parameters for call to function halTimerSetPrescale
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 4
        LCALL   ??halTimerSetPrescale?relay
//  317     halTimerSetOpMode (hwtimerid, halTimerRecord[hwtimerid].opMode);
        ; Setup parameters for call to function halTimerSetOpMode
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 4
        LCALL   ??halTimerSetOpMode?relay
//  318     halTimerSetChannelMode (hwtimerid, halTimerRecord[hwtimerid].channelMode);
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        ; Setup parameters for call to function halTimerSetChannelMode
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 4
        LCALL   ??halTimerSetChannelMode?relay
//  319 
//  320     if (hwtimerid == HW_TIMER_3)
        MOV     A,#0x1
        XRL     A,?V0 + 4
        JNZ     ??HalTimerStart_1
//  321     {
//  322       T3CTL |= HAL_TIMER34_START;
        ORL     0xcb,#0x10
        SJMP    ??HalTimerStart_2
//  323     }
//  324     if (hwtimerid == HW_TIMER_4)
??HalTimerStart_1:
        MOV     A,#0x2
        XRL     A,?V0 + 4
        JNZ     ??HalTimerStart_2
//  325     {
//  326       T4CTL |= HAL_TIMER34_START;
        ORL     0xeb,#0x10
//  327     }
//  328     HalTimerInterruptEnable (hwtimerid, halTimerRecord[hwtimerid].channelMode,
//  329                              halTimerRecord[hwtimerid].intEnable);
??HalTimerStart_2:
        ; Setup parameters for call to function HalTimerInterruptEnable
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 4
        LCALL   ??HalTimerInterruptEnable?relay
//  330   }
//  331   else
//  332   {
//  333     return HAL_TIMER_NOT_CONFIGURED;
//  334   }
//  335   return HAL_TIMER_OK;
        MOV     R1,#0x0
        SJMP    ??HalTimerStart_3
??HalTimerStart_0:
        MOV     R1,#0x3
??HalTimerStart_3:
        LJMP    ?Subroutine13 & 0xFFFF
        CFI EndBlock cfiBlock19
        REQUIRE T3CTL
        REQUIRE T4CTL
//  336 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     B,#0xa
        MUL     AB
        ADD     A,#(halTimerRecord & 0xff)
        MOV     R0,A
        MOV     A,B
        ADDC    A,#((halTimerRecord >> 8) & 0xff)
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
//  337 
//  338 /***************************************************************************************************
//  339  * @fn      HalTimerTick
//  340  *
//  341  * @brief   Check the counter for expired counter. 檢查終止的counter
//  342  *
//  343  * @param   None
//  344  *
//  345  * @return  None
//  346  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 void HalTimerTick (void)
HalTimerTick:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function HalTimerTick
//  348 {
        FUNCALL HalTimerTick, halProcessTimer1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerTick, halProcessTimer3
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerTick, halProcessTimer4
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  349   if (!halTimerRecord[HW_TIMER_1].intEnable)
        MOV     DPTR,#(halTimerRecord + 1)
        MOVX    A,@DPTR
        JNZ     ??HalTimerTick_0
//  350   {
//  351     halProcessTimer1 ();
        ; Setup parameters for call to function halProcessTimer1
        LCALL   ??halProcessTimer1?relay
//  352   }
//  353 
//  354   if (!halTimerRecord[HW_TIMER_3].intEnable)
??HalTimerTick_0:
        MOV     DPTR,#(halTimerRecord + 11)
        MOVX    A,@DPTR
        JNZ     ??HalTimerTick_1
//  355   {
//  356     halProcessTimer3 ();
        ; Setup parameters for call to function halProcessTimer3
        LCALL   ??halProcessTimer3?relay
//  357   }
//  358 
//  359   if (!halTimerRecord[HW_TIMER_4].intEnable)
??HalTimerTick_1:
        MOV     DPTR,#(halTimerRecord + 21)
        MOVX    A,@DPTR
        JNZ     ??HalTimerTick_2
//  360   {
//  361     halProcessTimer4 ();
        ; Setup parameters for call to function halProcessTimer4
        LCALL   ??halProcessTimer4?relay
//  362   }
//  363 }
??HalTimerTick_2:
        LJMP    ?Subroutine12 & 0xFFFF
        CFI EndBlock cfiBlock23
//  364 
//  365 /***************************************************************************************************
//  366  * @fn      HalTimerStop
//  367  *
//  368  * @brief   Stop the Timer Service
//  369  *
//  370  * @param   timerId - ID of the timer
//  371  *
//  372  * @return  Status - OK or Not OK
//  373  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 uint8 HalTimerStop (uint8 timerId)
HalTimerStop:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function HalTimerStop
//  375 {
        FUNCALL HalTimerStop, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalTimerStop, halTimerSetOpMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  376   uint8 hwtimerid;
//  377 
//  378   hwtimerid = halTimerRemap (timerId);
//  379 
//  380   switch (hwtimerid)
        ; Setup parameters for call to function halTimerRemap
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for HalTimerStop>_0`:
        DATA
        DB        0
        DB        2
        DW        ??HalTimerStop_0
        DW        ??HalTimerStop_1
        DW        ??HalTimerStop_2
        DW        ??HalTimerStop_3
        CODE
//  381   {
//  382     case HW_TIMER_1:
//  383       halTimerSetOpMode(HW_TIMER_1, HAL_TIMER_MODE_STOP);
??HalTimerStop_1:
        ; Setup parameters for call to function halTimerSetOpMode
        MOV     R2,#0x3
        MOV     R1,#0x0
        LCALL   ??halTimerSetOpMode?relay
//  384       break;
//  385     case HW_TIMER_3:
//  386       T3CTL &= ~(HAL_TIMER34_START);
//  387       break;
//  388     case HW_TIMER_4:
//  389       T4CTL &= ~(HAL_TIMER34_START);
//  390       break;
//  391     default:
//  392       return HAL_TIMER_INVALID_ID;
//  393   }
//  394   return HAL_TIMER_OK;
??HalTimerStop_4:
        MOV     R1,#0x0
??HalTimerStop_5:
        LJMP    ?Subroutine12 & 0xFFFF
??HalTimerStop_2:
        ANL     0xcb,#0xef
        SJMP    ??HalTimerStop_4
??HalTimerStop_3:
        ANL     0xeb,#0xef
        SJMP    ??HalTimerStop_4
??HalTimerStop_0:
        MOV     R1,#0x4
        SJMP    ??HalTimerStop_5
        CFI EndBlock cfiBlock24
        REQUIRE T3CTL
        REQUIRE T4CTL
//  395 }
//  396 
//  397 /***************************************************************************************************
//  398  * @fn      halTimerSetCount
//  399  *
//  400  * @brief   Stop the Timer Service
//  401  *
//  402  * @param   hwtimerid - ID of the timer
//  403  *          timerPerTick - Number micro sec per ticks
//  404  *
//  405  * @return  Status - OK or Not OK
//  406  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  407 uint8 halTimerSetCount (uint8 hwtimerid, uint32 timePerTick)
halTimerSetCount:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function halTimerSetCount
//  408 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  409   uint16  count;
//  410   uint8   high, low;
//  411 
//  412   /* Load count = ((sec/tick) x clock) / prescale */
//  413   count = (uint16)((timePerTick * halTimerRecord[hwtimerid].clock) / halTimerRecord[hwtimerid].prescaleVal);
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        ADD     A,#(halTimerRecord & 0xff)
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#((halTimerRecord >> 8) & 0xff)
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
//  414   high = (uint8) (count >> 8);
//  415   low = (uint8) count;
//  416 
//  417   *(halTimerChannel[hwtimerid].TxCCH) = high;
        MOV     A,R2
        ADD     A,#(halTimerChannel & 0xff)
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#((halTimerChannel >> 8) & 0xff)
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  418   *(halTimerChannel[hwtimerid].TxCCL) = low;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  419 
//  420   return HAL_TIMER_OK;
        MOV     R1,#0x0
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock25
//  421 }
//  422 
//  423 /***************************************************************************************************
//  424  * @fn      halTimerSetPrescale
//  425  *
//  426  * @brief   Stop the Timer Service
//  427  *
//  428  * @param   hwtimerid - ID of the timer
//  429  *          prescale - Prescale of the clock
//  430  *
//  431  * @return  Status - OK or Not OK
//  432  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  433 uint8 halTimerSetPrescale (uint8 hwtimerid, uint8 prescale)
halTimerSetPrescale:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function halTimerSetPrescale
//  434 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  435   switch (hwtimerid)
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetPrescale>_0`:
        DATA
        DB        0
        DB        2
        DW        ??halTimerSetPrescale_0
        DW        ??halTimerSetPrescale_1
        DW        ??halTimerSetPrescale_2
        DW        ??halTimerSetPrescale_3
        CODE
//  436   {
//  437     case HW_TIMER_1:
//  438       T1CTL &= ~(HAL_TIMER1_16_TC_BITS);
??halTimerSetPrescale_1:
        ANL     0xe4,#0xf3
        MOV     A,0xe4
//  439       T1CTL |= prescale;
        MOV     A,R2
        ORL     A,0xe4
        MOV     0xe4,A
//  440       break;
//  441     case HW_TIMER_3:
//  442       T3CTL &= ~(HAL_TIMER34_8_TC_BITS);
//  443       T3CTL |= prescale;
//  444       break;
//  445     case HW_TIMER_4:
//  446       T4CTL &= ~(HAL_TIMER34_8_TC_BITS);
//  447       T4CTL |= prescale;
//  448       break;
//  449     default:
//  450       return HAL_TIMER_INVALID_ID;
//  451   }
//  452   return HAL_TIMER_OK;
??halTimerSetPrescale_4:
        MOV     R1,#0x0
??halTimerSetPrescale_5:
        LJMP    ?Subroutine12 & 0xFFFF
??halTimerSetPrescale_2:
        ANL     0xcb,#0x1f
        MOV     A,0xcb
        MOV     A,R2
        ORL     A,0xcb
        MOV     0xcb,A
        SJMP    ??halTimerSetPrescale_4
??halTimerSetPrescale_3:
        ANL     0xeb,#0x1f
        MOV     A,0xeb
        MOV     A,R2
        ORL     A,0xeb
        MOV     0xeb,A
        SJMP    ??halTimerSetPrescale_4
??halTimerSetPrescale_0:
        MOV     R1,#0x4
        SJMP    ??halTimerSetPrescale_5
        CFI EndBlock cfiBlock26
        REQUIRE T1CTL
        REQUIRE T3CTL
        REQUIRE T4CTL
//  453 }
//  454 
//  455 /***************************************************************************************************
//  456  * @fn      halTimerSetOpMode
//  457  *
//  458  * @brief   Setup operate modes
//  459  *
//  460  * @param   hwtimerid - ID of the timer
//  461  *          opMode - operation mode of the timer
//  462  *
//  463  * @return  Status - OK or Not OK
//  464  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  465 uint8 halTimerSetOpMode (uint8 hwtimerid, uint8 opMode)
halTimerSetOpMode:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function halTimerSetOpMode
//  466 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  467   /* Load Waveform Generation Mode */
//  468   switch (opMode)
        MOV     A,R2
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_0`:
        DATA
        DB        1
        DB        2
        DW        ??halTimerSetOpMode_0
        DW        ??halTimerSetOpMode_1
        DW        ??halTimerSetOpMode_2
        DW        ??halTimerSetOpMode_3
        CODE
//  469   {
//  470     case HAL_TIMER_MODE_NORMAL:
//  471       switch (hwtimerid)
??halTimerSetOpMode_1:
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_1`:
        DATA
        DB        0
        DB        2
        DW        ??halTimerSetOpMode_4
        DW        ??halTimerSetOpMode_5
        DW        ??halTimerSetOpMode_6
        DW        ??halTimerSetOpMode_7
        CODE
//  472       {
//  473         case HW_TIMER_1:
//  474           T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
??halTimerSetOpMode_5:
        ANL     0xe4,#0xfc
        MOV     A,0xe4
//  475           T1CTL |= HAL_TIMER1_OPMODE_FREERUN;
        ORL     0xe4,#0x1
//  476           break;
//  477         case HW_TIMER_3:
//  478           T3CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  479           T3CTL |= HAL_TIMER34_OPMODE_FREERUN;
//  480           break;
//  481         case HW_TIMER_4:
//  482           T4CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  483           T4CTL |= HAL_TIMER34_OPMODE_FREERUN;
//  484           break;
//  485         default:
//  486           return HAL_TIMER_INVALID_ID;
//  487       }
//  488       break;
//  489 
//  490     case HAL_TIMER_MODE_CTC:
//  491       switch (hwtimerid)
//  492       {
//  493         case HW_TIMER_1:
//  494           T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
//  495           T1CTL |= HAL_TIMER1_OPMODE_MODULO;
//  496           break;
//  497         case HW_TIMER_3:
//  498           T3CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  499           T3CTL |= HAL_TIMER34_OPMODE_MODULO;
//  500           break;
//  501         case HW_TIMER_4:
//  502           T4CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  503           T4CTL |= HAL_TIMER34_OPMODE_MODULO;
//  504           break;
//  505         default:
//  506           return HAL_TIMER_INVALID_ID;
//  507       }
//  508       break;
//  509 
//  510     case HAL_TIMER_MODE_STOP:
//  511       if (hwtimerid == HW_TIMER_1)
//  512       {
//  513         T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
//  514         T1CTL |= HAL_TIMER1_OPMODE_STOP;
//  515       }
//  516       break;
//  517 
//  518     default:
//  519       return HAL_TIMER_INVALID_OP_MODE;
//  520   }
//  521   return HAL_TIMER_OK;
??halTimerSetOpMode_8:
        MOV     R1,#0x0
??halTimerSetOpMode_9:
        LJMP    ?Subroutine12 & 0xFFFF
??halTimerSetOpMode_6:
        ANL     0xcb,#0xfc
        MOV     A,0xcb
        MOV     0xcb,0xcb
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_7:
        ANL     0xeb,#0xfc
        MOV     A,0xeb
        MOV     0xeb,0xeb
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_4:
        MOV     R1,#0x4
        SJMP    ??halTimerSetOpMode_9
??halTimerSetOpMode_2:
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_2`:
        DATA
        DB        0
        DB        2
        DW        ??halTimerSetOpMode_4
        DW        ??halTimerSetOpMode_10
        DW        ??halTimerSetOpMode_11
        DW        ??halTimerSetOpMode_12
        CODE
??halTimerSetOpMode_10:
        ANL     0xe4,#0xfc
        MOV     A,0xe4
        ORL     0xe4,#0x2
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_11:
        ANL     0xcb,#0xfc
        MOV     A,0xcb
        ORL     0xcb,#0x2
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_12:
        ANL     0xeb,#0xfc
        MOV     A,0xeb
        ORL     0xeb,#0x2
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_3:
        MOV     A,R1
        JNZ     ??halTimerSetOpMode_8
        ANL     0xe4,#0xfc
        MOV     A,0xe4
        MOV     0xe4,0xe4
        SJMP    ??halTimerSetOpMode_8
??halTimerSetOpMode_0:
        MOV     R1,#0x6
        SJMP    ??halTimerSetOpMode_9
        CFI EndBlock cfiBlock27
        REQUIRE T1CTL
        REQUIRE T3CTL
        REQUIRE T4CTL
//  522 }
//  523 
//  524 /***************************************************************************************************
//  525  * @fn      halTimerSetChannelMode
//  526  *
//  527  * @brief   Setup channel modes.  Currently, only output compare mode is supported.  Input capture
//  528  *          mode is NOT supported.  Additionally, mapping timer channel inputs/outputs to I/O pins
//  529  *          is NOT supported.
//  530  *
//  531  * @param   hwtimerid - ID of the timer
//  532  *          channelMode - channel mode of the timer
//  533  *
//  534  * @return  Status - OK or Not OK
//  535  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  536 uint8 halTimerSetChannelMode (uint8 hwtimerid, uint8 channelMode)
halTimerSetChannelMode:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function halTimerSetChannelMode
//  537 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  538   switch (channelMode)
        MOV     A,R2
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetChannelMode>_0`:
        DATA
        DB        1
        DB        1
        DW        ??halTimerSetChannelMode_0
        DW        ??halTimerSetChannelMode_1
        DW        ??halTimerSetChannelMode_2
        CODE
//  539   {
//  540     case HAL_TIMER_CH_MODE_OUTPUT_COMPARE:
//  541       *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_CMP_BITS);
??halTimerSetChannelMode_2:
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        ADD     A,#(halTimerChannel & 0xff)
        MOV     R0,A
        MOV     A,B
        ADDC    A,#((halTimerChannel >> 8) & 0xff)
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        ANL     A,#0xc7
        MOVX    @DPTR,A
//  542       *(halTimerChannel[hwtimerid].TxCCTL) |= (T134CCTL_CMP_OC | T134CCTL_MODE);
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_32:
        ORL     A,#0x1c
        MOVX    @DPTR,A
//  543       break;
//  544 
//  545     case HAL_TIMER_CH_MODE_INPUT_CAPTURE:       /* Not Supported */
//  546 /*
//  547       *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_CAP_BITS | T134CCTL_MODE);
//  548       *(halTimerChannel[hwtimerid].TxCCTL) |= T134CCTL_CAP_RE;
//  549 */
//  550       break;
//  551 
//  552     default:
//  553       return HAL_TIMER_INVALID_CH_MODE;
//  554   }
//  555   return HAL_TIMER_OK;
??halTimerSetChannelMode_1:
        MOV     R1,#0x0
??halTimerSetChannelMode_3:
        LJMP    ?Subroutine12 & 0xFFFF
??halTimerSetChannelMode_0:
        MOV     R1,#0x5
        SJMP    ??halTimerSetChannelMode_3
        CFI EndBlock cfiBlock28
//  556 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  557 
//  558 /***************************************************************************************************
//  559  * @fn      HalTimerInterruptEnable
//  560  *
//  561  * @brief   Setup operate modes
//  562  *
//  563  * @param   hwtimerid - ID of the timer
//  564  *          channelMode - channel mode
//  565  *          enable - TRUE or FALSE
//  566  *
//  567  * @return  Status - OK or Not OK
//  568  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  569 uint8 HalTimerInterruptEnable (uint8 hwtimerid, uint8 channelMode, bool enable)
HalTimerInterruptEnable:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function HalTimerInterruptEnable
//  570 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R7,A
        MOV     A,R3
        MOV     R6,A
//  571   switch (channelMode)
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        MOV     R4,A
        MOV     R5,B
        ADD     A,#(halTimerChannel & 0xff)
        MOV     R2,A
        MOV     A,R5
        ADDC    A,#((halTimerChannel >> 8) & 0xff)
        MOV     R3,A
        MOV     A,R7
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for HalTimerInterruptEnable>_0`:
        DATA
        DB        1
        DB        1
        DB        2
        DW        ??HalTimerInterruptEnable_0
        DB        1
        DB        4
        DW        ??HalTimerInterruptEnable_1
        DW        ??HalTimerInterruptEnable_2
        CODE
//  572   {
//  573     case HAL_TIMER_CH_MODE_OVERFLOW:
//  574 
//  575       if (enable)
??HalTimerInterruptEnable_1:
        MOV     A,R2
        ADD     A,#0x8
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        JZ      ??HalTimerInterruptEnable_3
//  576       {
//  577         *(halTimerChannel[hwtimerid].TxOVF) |= halTimerChannel[hwtimerid].ovfbit;
        MOVX    A,@DPTR
        LCALL   ?Subroutine1 & 0xFFFF
//  578       }
??CrossCallReturnLabel_33:
        ORL     A,R6
??HalTimerInterruptEnable_4:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R4
        ADD     A,#((halTimerRecord + 1) & 0xff)
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#(((halTimerRecord + 1) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??HalTimerInterruptEnable_5
//  579       else
//  580       {
//  581         *(halTimerChannel[hwtimerid].TxOVF) &= ((halTimerChannel[hwtimerid].ovfbit) ^ 0xFF);
//  582       }
//  583       break;
//  584 
//  585     case HAL_TIMER_CH_MODE_OUTPUT_COMPARE:
//  586     case HAL_TIMER_CH_MODE_INPUT_CAPTURE:
//  587 
//  588       if (enable)
//  589       {
//  590         *(halTimerChannel[hwtimerid].TxCCTL) |= T134CCTL_IM;
//  591       }
//  592       else
//  593       {
//  594         *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_IM);
//  595       }
//  596       break;
//  597 
//  598     default:
//  599       return HAL_TIMER_INVALID_CH_MODE;
//  600   }
//  601 
//  602   if (halTimerRecord[hwtimerid].intEnable)
//  603   {
//  604     IEN1 |= halTimerChannel[hwtimerid].intbit;
        MOV     A,R2
        ORL     A,0xb8
        SJMP    ??HalTimerInterruptEnable_6
//  605   }
??HalTimerInterruptEnable_3:
        MOVX    A,@DPTR
        XRL     A,#0xff
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_34:
        ANL     A,R6
        SJMP    ??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_0:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,R6
        JZ      ??HalTimerInterruptEnable_7
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        SJMP    ??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_7:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
        SJMP    ??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_2:
        MOV     R1,#0x5
        SJMP    ??HalTimerInterruptEnable_8
//  606   else
//  607   {
//  608     IEN1 &= ((halTimerChannel[hwtimerid].intbit) ^ 0xFF);
??HalTimerInterruptEnable_5:
        MOV     A,#-0x1
        XRL     A,R2
        ANL     A,0xb8
??HalTimerInterruptEnable_6:
        MOV     0xb8,A
//  609   }
//  610   return HAL_TIMER_OK;
        MOV     R1,#0x0
        CFI EndBlock cfiBlock32
??HalTimerInterruptEnable_8:
        REQUIRE ?Subroutine14
        REQUIRE _A_IEN1
        ; // Fall through to label ?Subroutine14
//  611 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_0
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_1
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     R6,A
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_36:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_33
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_34
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_32
        CFI (cfiCond51) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond51) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond51) CFA_SP SP+-5
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
//  612 
//  613 /***************************************************************************************************
//  614  * @fn      halTimerSendCallBack
//  615  *
//  616  * @brief   Send Callback back to the caller
//  617  *
//  618  * @param   timerId - ID of the timer
//  619  *          channel - channel where the interrupt occurs
//  620  *          channelMode - channel mode
//  621  *
//  622  *
//  623  * @return  None
//  624  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  625 void halTimerSendCallBack (uint8 timerId, uint8 channel, uint8 channelMode)
halTimerSendCallBack:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function halTimerSendCallBack
//  626 {
        FUNCALL halTimerSendCallBack, halTimerRemap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        MOV     ?V0 + 0,R3
//  627   uint8 hwtimerid;
//  628 
//  629   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        ADD     A,#((halTimerRecord + 8) & 0xff)
        MOV     DPL,A
        MOV     A,B
        ADDC    A,#(((halTimerRecord + 8) >> 8) & 0xff)
        MOV     DPH,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,DPL
        JNZ     ??halTimerSendCallBack_0
        MOV     A,DPH
??halTimerSendCallBack_0:
        JZ      ??halTimerSendCallBack_1
//  630 
//  631   if (halTimerRecord[hwtimerid].callBackFunc)
//  632     (halTimerRecord[hwtimerid].callBackFunc) (timerId, channel, channelMode);
        ; Setup parameters for indirect call
        MOV     R3,?V0 + 0
        MOV     A,R7
        MOV     R2,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ?CALL_IND
//  633 }
??halTimerSendCallBack_1:
        SJMP    ?Subroutine14
        CFI EndBlock cfiBlock53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
//  634 
//  635 /***************************************************************************************************
//  636  * @fn      halTimerRemap
//  637  *
//  638  * @brief   Maps API HAL_TIMER_ID to HW Timer ID.
//  639  *          HAL_TIMER_0 --> HW Timer 3 8bit
//  640  *          HAL_TIMER_2 --> HW Timer 4 8bit
//  641  *          HAL_TIMER_3 --> HW Timer 1 16bit
//  642  *
//  643  * @param   timerId - ID of the timer
//  644  *
//  645  * @return  HW timer ID
//  646  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  647 uint8 halTimerRemap (uint8 timerId)
halTimerRemap:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function halTimerRemap
//  648 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  649   switch (timerId)
        MOV     A,R1
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for halTimerRemap>_0`:
        DATA
        DB        0
        DB        3
        DW        ??halTimerRemap_0
        DW        ??halTimerRemap_1
        DW        ??halTimerRemap_0
        DW        ??halTimerRemap_2
        DW        ??halTimerRemap_3
        CODE
//  650   {
//  651     case HAL_TIMER_0:
//  652       return HW_TIMER_3;
??halTimerRemap_1:
        MOV     R1,#0x1
        SJMP    ??halTimerRemap_4
//  653     case HAL_TIMER_2:
//  654       return HW_TIMER_4;
??halTimerRemap_2:
        MOV     R1,#0x2
        SJMP    ??halTimerRemap_4
//  655     case HAL_TIMER_3:
//  656       return HW_TIMER_1;
??halTimerRemap_3:
        MOV     R1,#0x0
        SJMP    ??halTimerRemap_4
//  657     default:
//  658       return HW_TIMER_INVALID;
??halTimerRemap_0:
        MOV     R1,#0x3
//  659   }
??halTimerRemap_4:
        SJMP    ?Subroutine12
        CFI EndBlock cfiBlock57
//  660 }
//  661 
//  662 /***************************************************************************************************
//  663  * @fn      halProcessTimer1
//  664  *
//  665  * @brief   Processes Timer 1 Events.
//  666  *
//  667  * @param
//  668  *
//  669  * @return
//  670  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  671 void halProcessTimer1 (void)
halProcessTimer1:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function halProcessTimer1
//  672 {
        FUNCALL halProcessTimer1, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  673   if (halTimerRecord[halTimerRemap(HAL_TIMER_3)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        JNZ     ??halProcessTimer1_0
//  674   {
//  675     if (T1CTL & T1CTL_CH0IF)
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.5
        JNC     ??halProcessTimer1_1
//  676     {
//  677       T1CTL &= ~(T1CTL_CH0IF);
        ANL     0xe4,#0xdf
//  678       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     R1,#0x3
        LCALL   ??halTimerSendCallBack?relay
//  679     }
//  680     if (T1CTL & T1CTL_CH1IF)
??halProcessTimer1_1:
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.6
        JNC     ??halProcessTimer1_2
//  681     {
//  682       T1CTL &= ~(T1CTL_CH1IF);
        ANL     0xe4,#0xbf
//  683       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x4
        MOV     R1,#0x3
        LCALL   ??halTimerSendCallBack?relay
//  684     }
//  685     if (T1CTL & T1CTL_CH2IF)
??halProcessTimer1_2:
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.7
        JNC     ??halProcessTimer1_3
//  686     {
//  687       T1CTL &= ~(T1CTL_CH2IF);
        ANL     0xe4,#0x7f
//  688       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_C, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x8
        SJMP    ??halProcessTimer1_4
//  689     }
//  690   }
//  691   else if (halTimerRecord[halTimerRemap(HAL_TIMER_3)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer1_0:
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        JNZ     ??halProcessTimer1_3
//  692   {
//  693     if (T1CTL & T1CTL_OVFIF)
        MOV     A,0xe4
        MOV     C,0xE0 /* A   */.4
        JNC     ??halProcessTimer1_3
//  694     {
//  695       T1CTL &= ~(T1CTL_OVFIF);
        ANL     0xe4,#0xef
//  696       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x4
        MOV     R2,#0x1
??halProcessTimer1_4:
        MOV     R1,#0x3
        LCALL   ??halTimerSendCallBack?relay
        CFI EndBlock cfiBlock58
//  697     }
//  698   }
//  699 }
??halProcessTimer1_3:
        REQUIRE ?Subroutine12
        REQUIRE T1CTL
        ; // Fall through to label ?Subroutine12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock59
//  700 
//  701 /***************************************************************************************************
//  702  * @fn      halProcessTimer3
//  703  *
//  704  * @brief   Processes Timer 3 Events.
//  705  *
//  706  * @param
//  707  *
//  708  * @return
//  709  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  710 void halProcessTimer3 (void)
halProcessTimer3:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI Function halProcessTimer3
//  711 {
        FUNCALL halProcessTimer3, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  712   if (halTimerRecord[halTimerRemap(HAL_TIMER_0)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     ??halProcessTimer3_0
//  713   {
//  714     if (TIMIF & TIMIF_T3CH0IF)
        MOV     C,0xd8.1
        JNC     ??halProcessTimer3_1
//  715     {
//  716       TIMIF &= ~(TIMIF_T3CH0IF);
        CLR     0xd8.1
//  717       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     R1,#0x0
        LCALL   ??halTimerSendCallBack?relay
//  718     }
//  719     if (TIMIF & TIMIF_T3CH1IF)
??halProcessTimer3_1:
        MOV     C,0xd8.2
        JNC     ??halProcessTimer3_2
//  720     {
//  721       TIMIF &= ~(TIMIF_T3CH1IF);
        CLR     0xd8.2
//  722       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x4
        SJMP    ??halProcessTimer3_3
//  723     }
//  724   }
//  725   else if (halTimerRecord[halTimerRemap(HAL_TIMER_0)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer3_0:
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x0
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        JNZ     ??halProcessTimer3_2
//  726   {
//  727     if (TIMIF & TIMIF_T3OVFIF)
        MOV     C,0xd8.0
        JNC     ??halProcessTimer3_2
//  728     {
//  729       TIMIF &= ~(TIMIF_T3OVFIF);
        CLR     0xd8.0
//  730       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x4
        MOV     R2,#0x1
??halProcessTimer3_3:
        MOV     R1,#0x0
        LCALL   ??halTimerSendCallBack?relay
//  731     }
//  732   }
//  733 }
??halProcessTimer3_2:
        SJMP    ?Subroutine12
        CFI EndBlock cfiBlock60
        REQUIRE _A_TIMIF

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond62) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond62) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond62) CFA_SP SP+-5
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond63) CFA_SP SP+-5
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        XRL     A,#0x4
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond66) CFA_SP SP+-5
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond67) CFA_SP SP+-5
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        XRL     A,#0x2
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_10
        CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond70) CFA_SP SP+-5
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_11
        CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond71) CFA_SP SP+-5
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_6
        CFI (cfiCond72) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond72) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond72) CFA_SP SP+-5
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_7
        CFI (cfiCond73) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond73) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond73) CFA_SP SP+-5
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_8
        CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond74) CFA_SP SP+-5
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_19:
        ADD     A,#((halTimerRecord + 4) & 0xff)
        MOV     DPL,A
        MOV     A,B
        ADDC    A,#(((halTimerRecord + 4) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_9
        CFI (cfiCond77) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond77) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond77) CFA_SP SP+-5
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_10
        CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond78) CFA_SP SP+-5
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_11
        CFI (cfiCond79) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond79) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond79) CFA_SP SP+-5
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_6
        CFI (cfiCond80) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond80) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond80) CFA_SP SP+-5
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_7
        CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond81) CFA_SP SP+-5
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_8
        CFI (cfiCond82) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond82) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond82) CFA_SP SP+-5
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        LCALL   ??halTimerRemap?relay
        MOV     A,R1
        MOV     B,#0xa
        MUL     AB
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
//  734 
//  735 /***************************************************************************************************
//  736  * @fn      halProcessTimer4
//  737  *
//  738  * @brief   Processes Timer 4 Events.
//  739  *
//  740  * @param
//  741  *
//  742  * @return
//  743  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  744 void halProcessTimer4 (void)
halProcessTimer4:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function halProcessTimer4
//  745 {
        FUNCALL halProcessTimer4, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  746   if (halTimerRecord[halTimerRemap(HAL_TIMER_2)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x2
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        JNZ     ??halProcessTimer4_0
//  747   {
//  748     if (TIMIF & TIMIF_T4CH0IF)
        MOV     C,0xd8.4
        JNC     ??halProcessTimer4_1
//  749     {
//  750       TIMIF &= ~(TIMIF_T4CH0IF);
        CLR     0xd8.4
//  751       halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     R1,#0x2
        LCALL   ??halTimerSendCallBack?relay
//  752     }
//  753     if (TIMIF & TIMIF_T4CH1IF)
??halProcessTimer4_1:
        MOV     C,0xd8.5
        JNC     ??halProcessTimer4_2
//  754     {
//  755       TIMIF &= ~(TIMIF_T4CH1IF);
        CLR     0xd8.5
//  756       halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x2
        MOV     R2,#0x4
        SJMP    ??halProcessTimer4_3
//  757     }
//  758   }
//  759   else if (halTimerRecord[halTimerRemap(HAL_TIMER_2)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer4_0:
        ; Setup parameters for call to function halTimerRemap
        MOV     R1,#0x2
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     ??halProcessTimer4_2
//  760   if (TIMIF & TIMIF_T4OVFIF)
        MOV     C,0xd8.3
        JNC     ??halProcessTimer4_2
//  761   {
//  762     TIMIF &= ~(TIMIF_T4OVFIF);
        CLR     0xd8.3
//  763     halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV     R3,#0x4
        MOV     R2,#0x1
??halProcessTimer4_3:
        MOV     R1,#0x2
        LCALL   ??halTimerSendCallBack?relay
//  764   }
//  765 }
??halProcessTimer4_2:
        LJMP    ?Subroutine12 & 0xFFFF
        CFI EndBlock cfiBlock84
        REQUIRE _A_TIMIF
//  766 
//  767 /***************************************************************************************************
//  768  *                                    INTERRUPT SERVICE ROUTINE
//  769  ***************************************************************************************************/
//  770 
//  771 /**************************************************************************************************
//  772  * @fn      halTimer1Isr
//  773  *
//  774  * @brief   Timer 1 ISR
//  775  *
//  776  * @param
//  777  *
//  778  * @return
//  779  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  780 HAL_ISR_FUNCTION( halTimer1Isr, T1_VECTOR )
halTimer1Isr:
        CFI Block cfiBlock85 Using cfiCommon1
        CFI Function halTimer1Isr
//  781 {
        FUNCALL halTimer1Isr, halProcessTimer1
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  782   halProcessTimer1 ();
        ; Setup parameters for call to function halProcessTimer1
        LCALL   ??halProcessTimer1?relay
        CFI EndBlock cfiBlock85
//  783 }
        REQUIRE ?Subroutine15
        ; // Fall through to label ?Subroutine15

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiBlock86 Using cfiCommon1
        CFI NoFunction
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI A Frame(CFA_SP, 3)
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock86
//  784 
//  785 /**************************************************************************************************
//  786  * @fn      halTimer3Isr
//  787  *
//  788  * @brief   Timer 3 ISR
//  789  *
//  790  * @param
//  791  *
//  792  * @return
//  793  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  794 HAL_ISR_FUNCTION( halTimer3Isr, T3_VECTOR )
halTimer3Isr:
        CFI Block cfiBlock87 Using cfiCommon1
        CFI Function halTimer3Isr
//  795 {
        FUNCALL halTimer3Isr, halProcessTimer3
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  796   halProcessTimer3 ();
        ; Setup parameters for call to function halProcessTimer3
        LCALL   ??halProcessTimer3?relay
//  797 }
        SJMP    ?Subroutine15
        CFI EndBlock cfiBlock87
//  798 
//  799 /**************************************************************************************************
//  800  * @fn      halTimer4Isr
//  801  *
//  802  * @brief   Timer 4 ISR
//  803  *
//  804  * @param
//  805  *
//  806  * @return
//  807  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  808 HAL_ISR_FUNCTION( halTimer4Isr, T4_VECTOR )
halTimer4Isr:
        CFI Block cfiBlock88 Using cfiCommon1
        CFI Function halTimer4Isr
//  809 {
        FUNCALL halTimer4Isr, halProcessTimer4
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  810   halProcessTimer4 ();
        ; Setup parameters for call to function halProcessTimer4
        LCALL   ??halProcessTimer4?relay
//  811 }
        SJMP    ?Subroutine15
        CFI EndBlock cfiBlock88
//  812 
//  813 /***************************************************************************************************
//  814 ***************************************************************************************************/
//  815 
//  816 /*******************************************************************************
//  817  * @fn          halMcuWaitUs
//  818  * @brief       Busy wait function. Waits the specified number of microseconds. Use
//  819  *              assumptions about number of clock cycles needed for the various
//  820  *              instructions. This function assumes a 32 MHz clock.
//  821  *              NB! This function is highly dependent on architecture and compiler!
//  822  * @param       uint16 usec - number of microseconds delays
//  823  * @return      none
//  824  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  825 void halMcuWaitUs(uint16 usec)
halMcuWaitUs:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI Function halMcuWaitUs
//  826 {
        ; Saved register size: 0
        ; Auto size: 0
//  827     usec >>= 1;
        MOV     A,R3
        CLR     C
        RRC     A
        MOV     R3,A
        MOV     A,R2
        RRC     A
        MOV     R2,A
        SJMP    ??halMcuWaitUs_0
//  828     while (usec--)
//  829     {
//  830         asm("NOP"); asm("NOP"); asm("NOP");
??halMcuWaitUs_1:
        NOP
        NOP
        NOP
//  831         asm("NOP"); asm("NOP"); asm("NOP");
        NOP
        NOP
        NOP
//  832         asm("NOP"); asm("NOP"); asm("NOP");
        NOP
        NOP
        NOP
//  833         asm("NOP"); asm("NOP"); asm("NOP");
        NOP
        NOP
        NOP
//  834         asm("NOP"); asm("NOP"); asm("NOP");
        NOP
        NOP
        NOP
//  835         asm("NOP");
        NOP
//  836     }
??halMcuWaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R0
        JNZ     ??halMcuWaitUs_2
        MOV     A,R1
??halMcuWaitUs_2:
        JNZ     ??halMcuWaitUs_1
//  837 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock89
//  838 
//  839 /*******************************************************************************
//  840  * @fn          halMcuWaitMs
//  841  * @brief       Busy wait function. Waits the specified number of milliseconds. Use
//  842  *              assumptions about number of clock cycles needed for the various
//  843  *              instructions.
//  844  *              NB! This function is highly dependent on architecture and compiler!
//  845  * @param       uint16 millisec - number of milliseconds delay
//  846  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  847 void halMcuWaitMs(uint16 msec)
halMcuWaitMs:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function halMcuWaitMs
//  848 {
        FUNCALL halMcuWaitMs, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        SJMP    ??halMcuWaitMs_0
//  849     while (msec--)
//  850     {
//  851         halMcuWaitUs(1000);
??halMcuWaitMs_1:
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??halMcuWaitUs?relay
//  852     }
??halMcuWaitMs_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R6
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R7,A
        MOV     A,R0
        JNZ     ??halMcuWaitMs_2
        MOV     A,R1
??halMcuWaitMs_2:
        JNZ     ??halMcuWaitMs_1
//  853 }
        LJMP    ?Subroutine14 & 0xFFFF
        CFI EndBlock cfiBlock90

        COMMON INTVEC:CODE:ROOT(0)
        ORG 75
`??halTimer1Isr??INTVEC 75`:
        LJMP       (halTimer1Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 91
`??halTimer3Isr??INTVEC 91`:
        LJMP       (halTimer3Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 99
`??halTimer4Isr??INTVEC 99`:
        LJMP       (halTimer4Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerTick?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerTick

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerStop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerStop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetCount?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetCount

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetPrescale?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetPrescale

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetOpMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetOpMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSetChannelMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSetChannelMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalTimerInterruptEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalTimerInterruptEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerSendCallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerSendCallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halTimerRemap?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halTimerRemap

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessTimer1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessTimer1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessTimer3?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessTimer3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halProcessTimer4?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halProcessTimer4

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halMcuWaitUs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halMcuWaitUs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halMcuWaitMs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halMcuWaitMs

        END
// 
// 1 566 bytes in segment BANKED_CODE
//   102 bytes in segment BANK_RELAYS
//     9 bytes in segment INTVEC
//    39 bytes in segment NEAR_CODE
//    12 bytes in segment SFR_AN
//    60 bytes in segment XDATA_Z
// 
// 1 707 bytes of CODE  memory (+  9 bytes shared)
//     0 bytes of DATA  memory (+ 12 bytes shared)
//    60 bytes of XDATA memory
//
//Errors: none
//Warnings: none
