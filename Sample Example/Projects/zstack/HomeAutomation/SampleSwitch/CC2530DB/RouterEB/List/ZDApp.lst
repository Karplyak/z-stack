###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                29/Nov/2010  16:04:33 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\Darren\桌面\ZIGBEE       #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Components\stack\zdo\ZDApp.c     #
#    Command line       =  -f "C:\Documents and Settings\Darren\桌面\ZIGBEE   #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wRo #
#                          uter.cfg" (-DCPU32MHZ -DROOT=__near_func           #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK         #
#                          -DBLINK_LEDS) -f "C:\Documents and                 #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCo #
#                          nfig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0        #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440)   #
#                          -f "C:\Documents and Settings\Darren\桌面\ZIGBEE   #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZC #
#                          L.cfg" (-DZCL_READ -DZCL_WRITE -DZCL_BASIC         #
#                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH    #
#                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING           #
#                          -DZCL_PRICING) -DZCL_MESSAGE "C:\Documents and     #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Components\stack\zdo\ZDApp.c"    #
#                          -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D           #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "C:\Documents and Settings\Darren\桌面\ZIGBEE  #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\RouterEB\List\" -lA           #
#                          "C:\Documents and Settings\Darren\桌面\ZIGBEE      #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\RouterEB\List\"               #
#                          --diag_suppress Pe001,Pa010 -o "C:\Documents and   #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\RouterEB\Obj\" -e             #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\" -I "C:\Documents and        #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\SOURCE\" -I "C:\Documents  #
#                          and Settings\Darren\桌面\ZIGBEE                    #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\SOURCE\" -I             #
#                          "C:\Documents and Settings\Darren\桌面\ZIGBEE      #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I  #
#                          "C:\Documents and Settings\Darren\桌面\ZIGBEE      #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ #
#                          " -I "C:\Documents and Settings\Darren\桌面\ZIGBEE #
#                           教學模組_出貨光碟\ZIGBEE                          #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\HAL #
#                          \INCLUDE\" -I "C:\Documents and                    #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\HAL #
#                          \TARGET\CC2530EB\" -I "C:\Documents and            #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\OSA #
#                          L\MCU\CCSOC\" -I "C:\Documents and                 #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\OSA #
#                          L\INCLUDE\" -I "C:\Documents and                   #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\AF\" -I "C:\Documents and                       #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\NWK\" -I "C:\Documents and                      #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SEC\" -I "C:\Documents and                      #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SAPI\" -I "C:\Documents and                     #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\SYS\" -I "C:\Documents and                      #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\ZCL\" -I "C:\Documents and                      #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\STA #
#                          CK\ZDO\" -I "C:\Documents and                      #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ZMA #
#                          C\F8W\" -I "C:\Documents and                       #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\ZMA #
#                          C\" -I "C:\Documents and                           #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\SER #
#                          VICES\SADDR\" -I "C:\Documents and                 #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\SER #
#                          VICES\SDATA\" -I "C:\Documents and                 #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\MAC #
#                          \INCLUDE\" -I "C:\Documents and                    #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\MAC #
#                          \HIGH_LEVEL\" -I "C:\Documents and                 #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\MAC #
#                          \LOW_LEVEL\srf04\" -I "C:\Documents and            #
#                          Settings\Darren\桌面\ZIGBEE                        #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\..\..\..\..\..\COMPONENTS\MAC #
#                          \LOW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR          #
#                          Systems\Embedded Workbench for MCS-51              #
#                          V7.51\8051\INC\" -I "C:\IAR Systems\Embedded       #
#                          Workbench for MCS-51 V7.51\8051\INC\CLIB\" -Ohz    #
#    List file          =  C:\Documents and Settings\Darren\桌面\ZIGBEE       #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\RouterEB\List\ZDApp.lst       #
#    Object file        =  C:\Documents and Settings\Darren\桌面\ZIGBEE       #
#                          教學模組_出貨光碟\ZIGBEE                           #
#                          Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\HomeAutomation\S #
#                          ampleSwitch\CC2530DB\RouterEB\Obj\ZDApp.r51        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Darren\桌面\ZIGBEE 教學模組_出貨光碟\ZIGBEE Example\CC2530_ZStack\教學模組_Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2010-01-04 12:16:55 -0800 (Mon, 04 Jan 2010) $
      4            Revision:       $Revision: 21428 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the use can change. This also contains the Task functions.
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            Should you have any questions regarding your right to use this Software,
     12            contact Texas Instruments Incorporated at www.TI.com. 
     13          **************************************************************************************************/
     14          
     15          /*********************************************************************
     16           * INCLUDES
     17           */
     18          #include "ZComDef.h"
     19          #include "ZMac.h"
     20          #include "OSAL.h"
     21          #include "OSAL_Tasks.h"
     22          #include "OSAL_PwrMgr.h"
     23          #include "OSAL_Nv.h"
     24          #include "AF.h"
     25          #include "APSMEDE.h"
     26          #include "NLMEDE.h"
     27          #include "AddrMgr.h"
     28          #include "ZDProfile.h"
     29          #include "ZDObject.h"
     30          #include "ZDConfig.h"
     31          #include "ZDSecMgr.h"
     32          #include "ZDApp.h"
     33          #include "DebugTrace.h"
     34          #include "nwk_util.h"
     35          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     36          #include "ZGlobals.h"
     37          #include "ZDNwkMgr.h"
     38          #include "rtg.h"
     39          
     40          #include "ssp.h"
     41          
     42          /* HAL */
     43          #include "hal_led.h"
     44          #include "hal_lcd.h"
     45          #include "hal_key.h"
     46          
     47          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     48            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     49          #endif
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          #if !defined( NWK_START_DELAY )
     58            #define NWK_START_DELAY             100   // in milliseconds
     59          #endif
     60          
     61          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     62            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     63          #endif
     64          
     65          #if !defined( BEACON_REQUEST_DELAY )
     66            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     67          #endif
     68          
     69          #if !defined( BEACON_REQ_DELAY_MASK )
     70            #define BEACON_REQ_DELAY_MASK       0x007F
     71          #endif
     72          
     73          #define MAX_RESUME_RETRY            3
     74          
     75          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
     76          
     77          // Beacon Order Settings (see NLMEDE.h)
     78          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
     79          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
     80          
     81          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
     82            // The number of times the frame counter can change before
     83            // saving to NV
     84            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
     85          #endif
     86          
     87          // Leave control bits
     88          #define ZDAPP_LEAVE_CTRL_INIT 0
     89          #define ZDAPP_LEAVE_CTRL_SET  1
     90          #define ZDAPP_LEAVE_CTRL_RA   2
     91          
     92          // Standard time to update NWK NV data
     93          #define ZDAPP_UPDATE_NWK_NV_TIME 700
     94          
     95          // Address Manager Stub Implementation
     96          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
     97          
     98          // Size of the ZDO callback function table zdoCBFunc[]
     99          #define MAX_ZDO_CB_FUNC 1
    100          
    101          
    102          /*********************************************************************
    103           * GLOBAL VARIABLES
    104           */
    105          
    106          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    108          #endif
    109          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    124          
    125          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    127          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          
    130          /*********************************************************************
    131           * EXTERNAL VARIABLES
    132           */
    133          
    134          /*********************************************************************
    135           * EXTERNAL FUNCTIONS
    136           */
    137          
    138          /*********************************************************************
    139           * LOCAL FUNCTIONS
    140           */
    141          
    142          void ZDApp_NetworkStartEvt( void );
    143          void ZDApp_DeviceAuthEvt( void );
    144          void ZDApp_SaveNetworkStateEvt( void );
    145          
    146          uint8 ZDApp_ReadNetworkRestoreState( void );
    147          uint8 ZDApp_RestoreNetworkState( void );
    148          void ZDAppDetermineDeviceType( void );
    149          void ZDApp_InitUserDesc( void );
    150          void ZDAppCheckForHoldKey( void );
    151          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    152          void ZDApp_ProcessNetworkJoin( void );
    153          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    154          void ZDApp_SaveNwkKey( void );
    155          uint8 ZDApp_RestoreNwkKey( void );
    156            
    157          void ZDApp_SecInit( uint8 state );
    158          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    159          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    160          
    161          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    162          
    163          void ZDApp_ResetTimerStart( uint16 delay );
    164          void ZDApp_ResetTimerCancel( void );
    165          void ZDApp_LeaveCtrlInit( void );
    166          void ZDApp_LeaveCtrlSet( uint8 ra );
    167          uint8 ZDApp_LeaveCtrlBypass( void );
    168          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    169          void ZDApp_LeaveReset( uint8 ra );
    170          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    171                                  uint8 removeChildren );
    172          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
    173          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    174          void ZDApp_RegisterCBs( void );
    175          
    176          /*********************************************************************
    177           * LOCAL VARIABLES
    178           */
    179          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    184          
    185          #if defined( HOLD_AUTO_START )
    186            devStates_t devState = DEV_HOLD;
    187          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    188            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    189          #endif
    190          
    191          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    194                                  // to parent. Set to make the device do an Orphan scan.
    195          #else
    196            // Set the default to coodinator
    197            devStartModes_t devStartMode = MODE_HARD;
    198          #endif
    199          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    201          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    202          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    203          {
    204            ZDO_EP,
    205            &ZDAppTaskID,
    206            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    207            (afNetworkLatencyReq_t)0            // No Network Latency req
    208          };
    209          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    210          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    211          
    212          /*********************************************************************
    213           * @fn      ZDApp_Init
    214           *
    215           * @brief   ZDApp Initialization function.
    216           *
    217           * @param   task_id - ZDApp Task ID
    218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    220          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    221            // Save the task ID
    222            ZDAppTaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   F0           MOVX    @DPTR,A
    223          
    224            // Initialize the ZDO global device short address storage
    225            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   000009   7402         MOV     A,#0x2
   \   00000B   90....       MOV     DPTR,#(ZDAppNwkAddr + 8)
   \   00000E   F0           MOVX    @DPTR,A
    226            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   00000F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000012   74FE         MOV     A,#-0x2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   74FF         MOV     A,#-0x1
   \   000018   F0           MOVX    @DPTR,A
    227            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    228          
    229            // Check for manual "Hold Auto Start"
    230            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    231          
    232            // Initialize ZDO items and setup the device - type of device to create.
    233            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    234          
    235            // Register the endpoint description with the AF
    236            // This task doesn't have a Simple description, but we still need
    237            // to register the endpoint.
    238            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#(ZDApp_epDesc & 0xff)
   \   000024   7B..         MOV     R3,#((ZDApp_epDesc >> 8) & 0xff)
   \   000026   12....       LCALL   ??afRegister?relay
    239          
    240          #if defined( ZDO_USERDESC_RESPONSE )
    241            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL   ??ZDApp_InitUserDesc?relay
    242          #endif // ZDO_USERDESC_RESPONSE
    243          
    244            // Start the device?
    245            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV     DPTR,#devState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6009         JZ      ??ZDApp_Init_0
    246            {
    247              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??ZDOInitDevice?relay
   \   000039   800D         SJMP    ??ZDApp_Init_1
    248            }
    249            else
    250            {
    251              // Blink LED to indicate HOLD_START
    252              HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function HalLedBlink
   \   00003B   7CF4         MOV     R4,#-0xc
   \   00003D   7D01         MOV     R5,#0x1
   \   00003F   7B32         MOV     R3,#0x32
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7902         MOV     R1,#0x2
   \   000045   12....       LCALL   ??HalLedBlink?relay
    253            }
    254            
    255            ZDApp_RegisterCBs();
   \                     ??ZDApp_Init_1:
   \   000048                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000048   12....       LCALL   ??ZDApp_RegisterCBs?relay
    256          } /* ZDApp_Init() */
   \   00004B   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    257          
    258          /*********************************************************************
    259           * @fn          ZDApp_SecInit
    260           *
    261           * @brief       ZDApp initialize security.
    262           *
    263           * @param       state - device initialization state
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    266          {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    268            {
    269              // Set the Trust Center bit
    270              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    271            }
    272          
    273            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    274            {
    275              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    276            }
    277              
    278            // Initialize ZigBee Device Security Manager
    279            ZDSecMgrInit(state);
   \   000004                ; Setup parameters for call to function ZDSecMgrInit
   \   000004   12....       LCALL   ??ZDSecMgrInit?relay
    280          
    281            if ( ZG_SECURE_ENABLED )
    282            {
    283              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    284              {
    285                nwkFrameCounter = 0;
    286            
    287                if( _NIB.nwkKeyLoaded == FALSE )
    288                {
    289                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    290                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    291                  {
    292                      SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0);
    293                      SSP_SwitchNwkKey( 0 );
    294                  }
    295                }
    296              }
    297            }    
    298          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    299          
    300          /*********************************************************************
    301           * @fn      ZDApp_event_loop()
    302           *
    303           * @brief   Main event loop for Zigbee device objects task. This function
    304           *          should be called at periodic intervals.
    305           *
    306           * @param   task_id - Task ID
    307           * @param   events  - Bitmap of events
    308           *
    309           * @return  none
    310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    312          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    313            uint8 *msg_ptr;
    314          
    315            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??ZDApp_event_loop_0
   \   000010   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_0:
   \   000011   7031         JNZ     ??ZDApp_event_loop_1
    316            {
    317              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    318              {
    319                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    320          
    321                // Release the memory
    322                osal_msg_deallocate( msg_ptr );
    323              }
    324          
    325              // Return unprocessed events
    326              return (events ^ SYS_EVENT_MSG);
    327            }
    328          
    329            if ( events & ZDO_NETWORK_INIT )
   \   000013   EE           MOV     A,R6
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   5045         JNC     ??ZDApp_event_loop_2
    330            {
    331              // Initialize apps and start the network
    332              devState = DEV_INIT;
   \   000018   7401         MOV     A,#0x1
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   F0           MOVX    @DPTR,A
    333              
    334              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    335                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001E                ; Setup parameters for call to function ZDO_StartDevice
   \   00001E   7C0F         MOV     R4,#0xf
   \   000020   7B0F         MOV     R3,#0xf
   \   000022   90....       MOV     DPTR,#devStartMode
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   5407         ANL     A,#0x7
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??ZDO_StartDevice?relay
    336          
    337              // Return unprocessed events
    338              return (events ^ ZDO_NETWORK_INIT);
   \   000031   7401         MOV     A,#0x1
   \                     ??ZDApp_event_loop_3:
   \   000033   6E           XRL     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \                     ??ZDApp_event_loop_4:
   \   000036   FB           MOV     R3,A
   \   000037   02....       LJMP    ??ZDApp_event_loop_5 & 0xFFFF
    339            }
   \                     ??ZDApp_event_loop_6:
   \   00003A                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00003A   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   00003D                ; Setup parameters for call to function osal_msg_deallocate
   \   00003D   AA..         MOV     R2,?V0 + 0
   \   00003F   AB..         MOV     R3,?V0 + 1
   \   000041   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_1:
   \   000044                ; Setup parameters for call to function osal_msg_receive
   \   000044   90....       MOV     DPTR,#ZDAppTaskID
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   ??osal_msg_receive?relay
   \   00004C   8A..         MOV     ?V0 + 0,R2
   \   00004E   8B..         MOV     ?V0 + 1,R3
   \   000050   EA           MOV     A,R2
   \   000051   7001         JNZ     ??ZDApp_event_loop_7
   \   000053   EB           MOV     A,R3
   \                     ??ZDApp_event_loop_7:
   \   000054   70E4         JNZ     ??ZDApp_event_loop_6
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   7480         MOV     A,#-0x80
   \                     ??ZDApp_event_loop_8:
   \   00005A   6F           XRL     A,R7
   \   00005B   80D9         SJMP    ??ZDApp_event_loop_4
    340          
    341            if ( ZSTACK_ROUTER_BUILD )
    342            {
    343              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_2:
   \   00005D   5402         ANL     A,#0x2
   \   00005F   6007         JZ      ??ZDApp_event_loop_9
    344              {
    345                ZDApp_NetworkStartEvt();  //The network start event
   \   000061                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000061   12....       LCALL   ??ZDApp_NetworkStartEvt?relay
    346            
    347                // Return unprocessed events
    348                return (events ^ ZDO_NETWORK_START);
   \   000064   7402         MOV     A,#0x2
   \   000066   80CB         SJMP    ??ZDApp_event_loop_3
    349              }
    350          
    351              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_9:
   \   000068   EE           MOV     A,R6
   \   000069   5420         ANL     A,#0x20
   \   00006B   601D         JZ      ??ZDApp_event_loop_10
    352              {
    353                if ( nwkStatus == ZSuccess )
   \   00006D   90....       MOV     DPTR,#nwkStatus
   \   000070   E0           MOVX    A,@DPTR
   \   000071   7010         JNZ     ??ZDApp_event_loop_11
    354                {
    355                  if ( devState == DEV_END_DEVICE )
   \   000073   90....       MOV     DPTR,#devState
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6406         XRL     A,#0x6
   \   000079   7003         JNZ     ??ZDApp_event_loop_12
    356                    devState = DEV_ROUTER;
   \   00007B   7407         MOV     A,#0x7
   \   00007D   F0           MOVX    @DPTR,A
    357            
    358                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_12:
   \   00007E                ; Setup parameters for call to function osal_pwrmgr_device
   \   00007E   7900         MOV     R1,#0x0
   \   000080   12....       LCALL   ??osal_pwrmgr_device?relay
    359                }
    360                else
    361                {
    362                  // remain as end device!!
    363                }
    364                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_11:
   \   000083                ; Setup parameters for call to function osal_set_event
   \   000083   12....       LCALL   ?Subroutine4 & 0xFFFF
    365            
    366                // Return unprocessed events
    367                return (events ^ ZDO_ROUTER_START);
   \                     ??CrossCallReturnLabel_23:
   \   000086   7420         MOV     A,#0x20
   \   000088   80A9         SJMP    ??ZDApp_event_loop_3
    368              }
    369            }
    370            
    371            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_10:
   \   00008A   EE           MOV     A,R6
   \   00008B   5410         ANL     A,#0x10
   \   00008D   6022         JZ      ??ZDApp_event_loop_13
    372            {
    373              ZDO_UpdateNwkStatus( devState );  // The device state
   \   00008F                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00008F   90....       MOV     DPTR,#devState
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    374              
    375              // At start up, do one MTO route discovery if the device is a concentrator(集中器)
    376              if ( zgConcentratorEnable == TRUE ) 
   \   000097   90....       MOV     DPTR,#zgConcentratorEnable
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   6401         XRL     A,#0x1
   \   00009D   700E         JNZ     ??CrossCallReturnLabel_43
    377              {
    378                // Start next event
    379                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00009F                ; Setup parameters for call to function osal_start_timerEx
   \   00009F   7C64         MOV     R4,#0x64
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7A00         MOV     R2,#0x0
   \   0000A5   7B08         MOV     R3,#0x8
   \   0000A7   90....       MOV     DPTR,#NWK_TaskID
   \   0000AA   12....       LCALL   ??Subroutine28_0 & 0xFFFF
    380              }
    381              
    382              // Return unprocessed events
    383              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??CrossCallReturnLabel_43:
   \   0000AD   7410         MOV     A,#0x10
   \   0000AF   8082         SJMP    ??ZDApp_event_loop_3
    384            }
    385          
    386            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_13:
   \   0000B1   EE           MOV     A,R6
   \   0000B2   5408         ANL     A,#0x8
   \   0000B4   6006         JZ      ??ZDApp_event_loop_14
    387            {
    388              // User defined logic
    389          
    390              // Return unprocessed events
    391              return (events ^ ZDO_COMMAND_CNF);
   \   0000B6   7408         MOV     A,#0x8
   \   0000B8   6E           XRL     A,R6
   \   0000B9   FA           MOV     R2,A
   \   0000BA   8021         SJMP    ??ZDApp_event_loop_5
    392            }
    393            
    394            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_14:
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   5F           ANL     A,R7
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E4           CLR     A
   \   0000C1   7001         JNZ     ??ZDApp_event_loop_15
   \   0000C3   E9           MOV     A,R1
   \                     ??ZDApp_event_loop_15:
   \   0000C4   6004         JZ      ??ZDApp_event_loop_16
    395            {
    396              ZDApp_SaveNetworkStateEvt();
    397          
    398              // Return unprocessed events
    399              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   8090         SJMP    ??ZDApp_event_loop_8
    400            }
    401          
    402            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_16:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   5404         ANL     A,#0x4
   \   0000CD   600A         JZ      ??ZDApp_event_loop_17
    403            {
    404              // The device has been in the UNAUTH state, so reset
    405              // Note: there will be no return from this call
    406              SystemReset();
   \   0000CF   C2AF         CLR     0xa8.7
   \   0000D1   75C9AB       MOV     0xc9,#-0x55
   \   0000D4   75C95B       MOV     0xc9,#0x5b
   \                     ??ZDApp_event_loop_18:
   \   0000D7   80FE         SJMP    ??ZDApp_event_loop_18
    407            }
    408          
    409            if ( ZG_SECURE_ENABLED )
    410            {
    411              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    412            }
    413            else
    414            {
    415              // Discard or make more handlers
    416              return 0;
   \                     ??ZDApp_event_loop_17:
   \   0000D9   7A00         MOV     R2,#0x0
   \   0000DB   7B00         MOV     R3,#0x0
    417            }
   \                     ??ZDApp_event_loop_5:
   \   0000DD   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   \   0000E0                REQUIRE _A_IEN0
   \   0000E0                REQUIRE WDCTL
    418          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7A10         MOV     R2,#0x10
   \   000002                REQUIRE ?Subroutine21
   \   000002                ; // Fall through to label ?Subroutine21

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??osal_start_timerEx?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    419          
    420          /*********************************************************************
    421           * @fn      ZDApp_ProcessSecEvent()
    422           *
    423           * @brief   Process incoming security events.
    424           *
    425           * @param   task_id - Task ID
    426           * @param   events  - Bitmap of events
    427           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    428          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    429          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    430            (void)task_id;  // Intentionally unreferenced parameter
    431            
    432            if ( ZSTACK_ROUTER_BUILD )
    433            {
    434              if ( events & ZDO_NEW_DEVICE )
   \   000009   EE           MOV     A,R6
   \   00000A   5440         ANL     A,#0x40
   \   00000C   6019         JZ      ??ZDApp_ProcessSecEvent_0
    435              {
    436                // process the new device event
    437                if ( ZDSecMgrNewDeviceEvent() == TRUE )
   \   00000E                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   00000E   12....       LCALL   ??ZDSecMgrNewDeviceEvent?relay
   \   000011   E9           MOV     A,R1
   \   000012   6401         XRL     A,#0x1
   \   000014   7009         JNZ     ??CrossCallReturnLabel_40
    438                {
    439                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
   \   000016                ; Setup parameters for call to function osal_start_timerEx
   \   000016   7CE8         MOV     R4,#-0x18
   \   000018   7D03         MOV     R5,#0x3
   \   00001A   7A40         MOV     R2,#0x40
   \   00001C   12....       LCALL   ?Subroutine6 & 0xFFFF
    440                }
    441          
    442                // Return unprocessed events
    443                return (events ^ ZDO_NEW_DEVICE);
   \                     ??CrossCallReturnLabel_40:
   \   00001F   7440         MOV     A,#0x40
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000021   6E           XRL     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   8043         SJMP    ??ZDApp_ProcessSecEvent_2
    444              }
    445            }
    446          
    447            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
    448                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    449            {
    450              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    451              { 
    452                if ( events & ZDO_SECMGR_EVENT )
    453                {
    454                  ZDSecMgrEvent();
    455          
    456                  // Return unprocessed events
    457                  return (events ^ ZDO_SECMGR_EVENT);
    458                }
    459              }
    460            }
    461            
    462            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000027   EE           MOV     A,R6
   \   000028   5480         ANL     A,#0x80
   \   00002A   6007         JZ      ??ZDApp_ProcessSecEvent_3
    463            {
    464              ZDApp_DeviceAuthEvt();
   \   00002C                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00002C   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    465          
    466              // Return unprocessed events
    467              return (events ^ ZDO_DEVICE_AUTH);
   \   00002F   7480         MOV     A,#-0x80
   \   000031   80EE         SJMP    ??ZDApp_ProcessSecEvent_1
    468            }
    469          
    470            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000033   7404         MOV     A,#0x4
   \   000035   5F           ANL     A,R7
   \   000036   F9           MOV     R1,A
   \   000037   E4           CLR     A
   \   000038   7001         JNZ     ??ZDApp_ProcessSecEvent_4
   \   00003A   E9           MOV     A,R1
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00003B   6029         JZ      ??ZDApp_ProcessSecEvent_5
    471            {
    472              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   00003D   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F8           MOV     R0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   7401         MOV     A,#0x1
   \   000047   28           ADD     A,R0
   \   000048   FA           MOV     R2,A
   \   000049   E4           CLR     A
   \   00004A   39           ADDC    A,R1
   \   00004B   FB           MOV     R3,A
   \   00004C   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004F   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000052   C3           CLR     C
   \   000053   E8           MOV     A,R0
   \   000054   94E9         SUBB    A,#-0x17
   \   000056   E9           MOV     A,R1
   \   000057   9403         SUBB    A,#0x3
   \   000059   4003         JC      ??ZDApp_ProcessSecEvent_6
    473                ZDApp_SaveNwkKey();
   \   00005B                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00005B   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    474          
    475              // Return unprocessed events
    476              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_6:
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   7404         MOV     A,#0x4
   \   000062   6F           XRL     A,R7
   \   000063   FB           MOV     R3,A
   \   000064   8004         SJMP    ??ZDApp_ProcessSecEvent_2
    477            }
    478            
    479            // Discard or make more handlers
    480            return 0;
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000066   7A00         MOV     R2,#0x0
   \   000068   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_2:
   \   00006A                REQUIRE ?Subroutine22
   \   00006A                ; // Fall through to label ?Subroutine22
    481          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005                REQUIRE ??Subroutine28_0
   \   000005                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    482          
    483          /*********************************************************************
    484           * Application Functions
    485           */
    486          
    487          /*********************************************************************
    488           * @fn      ZDOInitDevice
    489           *
    490           * @brief   Start the device in the network.  This function will read
    491           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    492           *   restore the network state of the device.
    493           *
    494           * @param   startDelay - timeDelay to start device (in milliseconds).
    495           *      There is a jitter added to this delay:
    496           *              ((NWK_START_DELAY + startDelay)
    497           *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    498           *
    499           * NOTE:    If the application would like to force a "new" join, the
    500           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    501           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    502           *          this function. "new" join means to not restore the network
    503           *          state of the device. Use zgWriteStartupOptions() to set these
    504           *          options.
    505           *
    506           * @return   ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    507           *           restored.
    508           *           ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized. This could 
    509           *           mean that ZCD_NV_STARTUP_OPTION said to not restore, or it could mean that 
    510           *           there was no network state to restore.
    511           *           ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    512           *           with the rejoin option set to TRUE.  So, the device was notstarted in the 
    513           *           network (one time only).  The next time this function is called it will start.
    514           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    516          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine3 & 0xFFFF
    517            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    518            uint16 extendedDelay = 0;
    519          
    520            if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_58:
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7005         JNZ     ??ZDOInitDevice_0
    521            {    
    522              // Initialize the RAM items table, in case an NV item has been updated.
    523              zgInitItems( FALSE );
   \   000013                ; Setup parameters for call to function zgInitItems
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ??zgInitItems?relay
    524            }
    525          
    526            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000018                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000018   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    527            //devtag.071807.todo - fix this temporary solution
    528            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001B   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   90....       MOV     DPTR,#(_NIB + 14)
   \   000022   F0           MOVX    @DPTR,A
    529            
    530            devState = DEV_INIT;    // Remove the Hold state
   \   000023   7401         MOV     A,#0x1
   \   000025   90....       MOV     DPTR,#devState
   \   000028   F0           MOVX    @DPTR,A
    531          
    532            // Initialize leave control logic
    533            ZDApp_LeaveCtrlInit();
   \   000029                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000029   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    534          
    535            // Check leave control reset settings
    536            ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00002C                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AC82         MOV     R4,DPL
   \   000034   AD83         MOV     R5,DPH
   \   000036   7A..         MOV     R2,#(devState & 0xff)
   \   000038   7B..         MOV     R3,#((devState >> 8) & 0xff)
   \   00003A   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    537          
    538            // Leave may make the hold state come back
    539            if ( devState == DEV_HOLD )
   \   00003D   90....       MOV     DPTR,#devState
   \   000040   E0           MOVX    A,@DPTR
   \   000041   700E         JNZ     ??ZDOInitDevice_1
    540            {
    541              // Set the NV startup option to force a "new" join.
    542              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000043                ; Setup parameters for call to function zgWriteStartupOptions
   \   000043   7A02         MOV     R2,#0x2
   \   000045   79FF         MOV     R1,#-0x1
   \   000047   12....       LCALL   ??zgWriteStartupOptions?relay
    543          
    544              // Notify the applications 
    545              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \   00004A   12....       LCALL   ?Subroutine4 & 0xFFFF
    546              
    547              return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \                     ??CrossCallReturnLabel_24:
   \   00004D   7902         MOV     R1,#0x2
   \   00004F   8039         SJMP    ??ZDOInitDevice_2
    548            }
    549          
    550          #if defined ( NV_RESTORE )
    551            // Get Keypad directly to see if a reset nv is needed.
    552            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    553            // while booting to skip past NV Restore.
    554            if ( HalKeyRead() == SW_BYPASS_NV )
    555              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    556            else
    557            {
    558              // Determine if NV should be restored
    559              networkStateNV = ZDApp_ReadNetworkRestoreState();
    560            }
    561          
    562            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    563            {
    564              networkStateNV = ZDApp_RestoreNetworkState();
    565            }
    566            else
    567            {
    568              // Wipe out the network state in NV
    569              NLME_InitNV();
    570              NLME_SetDefaultNV();
    571            }
    572          #endif
    573          
    574            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    575            {
    576              ZDAppDetermineDeviceType();
   \                     ??ZDOInitDevice_1:
   \   000051                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000051   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    577          
    578              // Only delay if joining network - not restoring network state
    579              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    580                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000054                ; Setup parameters for call to function osal_rand
   \   000054   12....       LCALL   ??osal_rand?relay
   \   000057   8A..         MOV     ?V0 + 0,R2
   \   000059   A8..         MOV     R0,?V0 + 0
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   747F         MOV     A,#0x7f
   \   000063   58           ANL     A,R0
   \   000064   F8           MOV     R0,A
   \   000065   E0           MOVX    A,@DPTR
   \   000066   28           ADD     A,R0
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F9           MOV     R1,A
   \   00006D   7464         MOV     A,#0x64
   \   00006F   28           ADD     A,R0
   \   000070   FE           MOV     R6,A
   \   000071   E4           CLR     A
   \   000072   39           ADDC    A,R1
   \   000073   FF           MOV     R7,A
    581            }
    582          
    583            // Initialize the security for type of device
    584            ZDApp_SecInit( networkStateNV );
   \   000074                ; Setup parameters for call to function ZDSecMgrInit
   \   000074   7901         MOV     R1,#0x1
   \   000076   12....       LCALL   ??ZDSecMgrInit?relay
    585            
    586            // Trigger the network start
    587            ZDApp_NetworkInit( extendedDelay );
   \   000079                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FB           MOV     R3,A
   \   00007D   12....       LCALL   ??ZDApp_NetworkInit?relay
    588          
    589            // set broadcast address mask to support broadcast filtering
    590            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000080                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000080   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    591            
    592            return ( networkStateNV );
   \   000088   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_2:
   \   00008A   02....       LJMP    ?Subroutine20 & 0xFFFF
    593          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine32_0
   \   000002                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine33_0
   \   000003                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0
    594          
    595          /*********************************************************************
    596           * @fn      ZDApp_ReadNetworkRestoreState
    597           *
    598           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    599           *          or not to restore the network state.
    600           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    601           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    602           *
    603           *
    604           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    605           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    606           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    607           *          ZCD_NV_STARTUP_OPTION
    608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    609          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    610          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    611            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    612          
    613            // Look for the New Network State option.
    614            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    615            {
    616              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    617            }
    618          
    619            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ?Subroutine22 & 0xFFFF
    620          }
    621          
    622          /*********************************************************************
    623           * @fn      ZDAppDetermineDeviceType()
    624           *
    625           * @brief   Determines the type of device to start. 
    626           *
    627           *          Looks at zgDeviceLogicalType and determines what type of
    628           *          device to start.  The types are:
    629           *            ZG_DEVICETYPE_COORDINATOR
    630           *            ZG_DEVICETYPE_ROUTER
    631           *            ZG_DEVICETYPE_ENDDEVICE
    632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    634          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    635            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    636            {
    637              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   7402         MOV     A,#0x2
   \   00000C   90....       MOV     DPTR,#devStartMode
   \   00000F   F0           MOVX    @DPTR,A
    638              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   802E         SJMP    ??ZDAppDetermineDeviceType_1
    639            }
    640            else
    641            {
    642              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??ZDAppDetermineDeviceType_2
    643                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   4401         ORL     A,#0x1
   \   000024   800D         SJMP    ??ZDAppDetermineDeviceType_3
    644              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7009         JNZ     ??ZDAppDetermineDeviceType_4
    645                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   54F8         ANL     A,#0xf8
   \   000031   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX    @DPTR,A
    646              
    647              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    648              // The device shall do rejoin the network. Otherwise, do normal join
    649              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV     R2,#(AIB_apsUseExtendedPANID & 0xff)
   \   000036   7B..         MOV     R3,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
   \   000038   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003B   E9           MOV     A,R1
   \   00003C   7003         JNZ     ??ZDAppDetermineDeviceType_5
    650              {
    651                devStartMode = MODE_JOIN;     // Assume joining
   \   00003E   E4           CLR     A
   \   00003F   8002         SJMP    ??ZDAppDetermineDeviceType_6
    652              }
    653              else
    654              {
    655                devStartMode = MODE_REJOIN;  
   \                     ??ZDAppDetermineDeviceType_5:
   \   000041   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_6:
   \   000043   90....       MOV     DPTR,#devStartMode
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX    @DPTR,A
    656              }
    657            }
    658          }
   \   000047   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    659          
    660          /*********************************************************************
    661           * @fn      ZDApp_NetworkStartEvt()
    662           *
    663           * @brief   Process the Network Start Event
    664           *
    665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    666          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    667          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    668            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    669            {
    670              // Successfully started a ZigBee network
    671              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    672              {
    673                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    674              }
    675          
    676              osal_pwrmgr_device( PWRMGR_ALWAYS_ON ); // osal device power setting -> ALWAYS ON
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    677              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT ); // TaskID -> ZDO_STATE_CHANGE_EVT
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802D         SJMP    ??ZDApp_NetworkStartEvt_2
    678            }
    679            else
    680            {
    681              // Try again with a higher energy threshold !!
    682              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   F8           MOV     R0,A
   \   000021   7410         MOV     A,#0x10
   \   000023   28           ADD     A,R0
   \   000024   F8           MOV     R0,A
   \   000025   E4           CLR     A
   \   000026   3400         ADDC    A,#0x0
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   94FF         SUBB    A,#-0x1
   \   00002C   E9           MOV     A,R1
   \   00002D   9400         SUBB    A,#0x0
   \   00002F   C3           CLR     C
   \   000030   65D0         XRL     A,PSW
   \   000032   33           RLC     A
   \   000033   500E         JNC     ??ZDApp_NetworkStartEvt_3
    683              {
    684                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000035                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000035                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000035   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000038   E9           MOV     A,R1
   \   000039   2410         ADD     A,#0x10
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    685                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003F                ; Setup parameters for call to function osal_set_event
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    686              }
    687              else
    688              {
    689                // Failed to start network. Enter a dormant state (until user intervenes)
    690                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000043   7401         MOV     A,#0x1
   \   000045   90....       MOV     DPTR,#devState
   \   000048   F0           MOVX    @DPTR,A
    691                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000049                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000049   7A10         MOV     R2,#0x10
    692              }
    693            }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00004B   02....       LJMP    ?Subroutine18 & 0xFFFF
    694          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0
    695          
    696          /*********************************************************************
    697           * @fn      ZDApp_DeviceAuthEvt()
    698           *
    699           * @brief   Process the Device Authentic Event
    700           *
    701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    702          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    703          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    704            // received authentication from trust center
    705            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   702D         JNZ     ??ZDApp_DeviceAuthEvt_0
    706            {
    707              // Stop the reset timer so it doesn't reset
    708              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    709          
    710              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine0 & 0xFFFF
    711              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    712          
    713              // Set the Power Manager Device
    714          #if defined ( POWER_SAVING )
    715              osal_pwrmgr_device( PWRMGR_BATTERY );
    716          #endif
    717          
    718              if ( ZSTACK_ROUTER_BUILD )
    719              {
    720                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_21:
   \   000012   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000015   6009         JZ      ??ZDApp_DeviceAuthEvt_1
    721                {
    722                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    723                  NLME_StartRouterRequest( 0, 0, false );
   \   000017                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000017   7B00         MOV     R3,#0x0
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??NLME_StartRouterRequest?relay
    724                }
    725              }
    726          
    727              // Notify to save info into NV
    728              ZDApp_NVUpdate();
    729          
    730              // Save off the security
    731              ZDApp_SaveNwkKey();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000020                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000020   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    732          
    733              ZDApp_AnnounceNewAddress();
   \   000023                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000023   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    734              
    735              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   000026   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002C   400B         JC      ??ZDApp_DeviceAuthEvt_0
    736              {
    737                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   00002E                ; Setup parameters for call to function NLME_SetPollRate
   \   00002E   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   ??NLME_SetPollRate?relay
    738              }
    739            }
    740            else
    741            {
    742              ZDApp_NVUpdate();
    743            }
    744          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000039   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7406         MOV     A,#0x6
   \   000002   90....       MOV     DPTR,#devState
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV     R2,#0x10
   \   000008   02....       LJMP    ?Subroutine21 & 0xFFFF
    745          
    746          /*********************************************************************
    747           * @fn      ZDApp_SaveNetworkStateEvt()
    748           *
    749           * @brief   Process the Save the Network State Event
    750           *
    751           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    752          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    753          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    754          #if defined ( NV_RESTORE )
    755           #if defined ( NV_TURN_OFF_RADIO )
    756            // Turn off the radio's receiver during an NV update
    757            uint8 RxOnIdle;
    758            uint8 x = false;
    759            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    760            ZMacSetReq( ZMacRxOnIdle, &x );
    761           #endif
    762          
    763            // Update the Network State in NV
    764            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    765                           NWK_NV_DEVICELIST_ENABLE |
    766                           NWK_NV_BINDING_ENABLE    |
    767                           NWK_NV_ADDRMGR_ENABLE );
    768          
    769            // Reset the NV startup option to resume from NV by
    770            // clearing the "New" join option.
    771            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    772          
    773           #if defined ( NV_TURN_OFF_RADIO )
    774            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    775           #endif
    776          #endif  // NV_RESTORE
    777          }
   \   000000   02....       LJMP    ?BRET
    778          
    779          /*********************************************************************
    780           * @fn      ZDApp_RestoreNetworkState()
    781           *
    782           * @brief   This function will restore the network state of the
    783           *          device if the network state is stored in NV.
    784           *
    785           * @return
    786           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    787           *          restored.
    788           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    789           *          This could mean that zgStartupOption said to not restore, or
    790           *          it could mean that there was no network state to restore.
    791           *
    792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    793          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    794          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    795            uint8 nvStat;
    796            nwkActiveKeyItems keyItems;
    797          
    798            // Initialize NWK NV items
    799            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    800          
    801            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   602F         JZ      ??ZDApp_RestoreNetworkState_0
    802            {
    803              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   6029         JZ      ??ZDApp_RestoreNetworkState_0
    804              {
    805                // Are we a coordinator
    806                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    807                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_55:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7002         JNZ     ??ZDApp_RestoreNetworkState_1
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000026   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    808                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   54F8         ANL     A,#0xf8
   \   00002E   F0           MOVX    @DPTR,A
    809                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002F   7401         MOV     A,#0x1
   \   000031   90....       MOV     DPTR,#devStartMode
   \   000034   12....       LCALL   ?Subroutine1 & 0xFFFF
    810                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    811              }
    812              else
    813                nvStat = NV_ITEM_UNINIT;
    814          
    815              if ( ZG_SECURE_ENABLED )
    816              {
    817                nwkFrameCounterChanges = 0;
    818                osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
    819                osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
    820          
    821                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    822                {
    823                  ZDApp_RestoreNwkKey();
    824                }
    825              }
    826          
    827              // The default for RxOnWhenIdle is true for Routers and false for end devices
    828              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    829              // other than default.
    830            }
    831          
    832            if ( nvStat == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000037   EE           MOV     A,R6
   \   000038   7004         JNZ     ??ZDApp_RestoreNetworkState_0
    833              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   8002         SJMP    ??ZDApp_RestoreNetworkState_3
    834            else
    835              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003E   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000040   02....       LJMP    ?Subroutine22 & 0xFFFF
    836          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#((_NIB + 53) & 0xff)
   \   000003   7D..         MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
   \   000005   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000007   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000009   12....       LCALL   ??sAddrExtCpy?relay
   \   00000C   22           RET
    837          
    838          /*********************************************************************
    839           * @fn      ZDApp_InitUserDesc()
    840           *
    841           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    842           *          when needed.  If you want to initialize the User descriptor to
    843           *          something other than all zero, do it here.
    844           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    845          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    846          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    847            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    848          
    849            // Initialize the User Descriptor, the descriptor is read from NV
    850            // when needed.  If you want to initialize the User descriptor to something
    851            // other than all zero, do it here.
    852            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
    853            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    854                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_19:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV     R4,#0x11
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A81         MOV     R2,#-0x7f
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??osal_nv_item_init?relay
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   E9           MOV     A,R1
   \   000023   7033         JNZ     ??ZDApp_InitUserDesc_0
    855            {
    856              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    857                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV     ?V0 + 0,#0x11
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A81         MOV     R2,#-0x7f
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   ??osal_nv_read?relay
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   \   000046   7010         JNZ     ??ZDApp_InitUserDesc_0
    858              {
    859                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6007         JZ      ??ZDApp_InitUserDesc_0
    860                {
    861                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000051   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000054   E0           MOVX    A,@DPTR
   \   000055   D2E4         SETB    0xE0 /* A   */.4
   \   000057   F0           MOVX    @DPTR,A
    862                }
    863              }
    864            }
    865          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000058   7411         MOV     A,#0x11
   \   00005A   02....       LJMP    ??Subroutine32_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7900         MOV     R1,#0x0
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??osal_memset?relay
   \   000011                ; Setup parameters for call to function osal_nv_item_init
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   22           RET
    866          
    867          /*********************************************************************
    868           * @fn      ZDAppCheckForHoldKey()
    869           *
    870           * @brief   Check for key to set the device into Hold Auto Start
    871           *
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    874          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    875          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    876            // Get Keypad directly to see if a HOLD_START is needed.
    877            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    878            // while booting to avoid starting up the device.
    879            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??ZDAppCheckForHoldKey_0
    880            {
    881              // Change the device state to HOLD on start up
    882              devState = DEV_HOLD;
   \   00000C   E4           CLR     A
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   F0           MOVX    @DPTR,A
    883            }
    884          #endif // HAL_KEY
    885          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    886          
    887          /*********************************************************************
    888           * @fn      ZDApp_ProcessOSALMsg()
    889           *
    890           * @brief   Process the incoming task message.
    891           *
    892           * @param   msgPtr - message to process
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    895          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    896            // Data Confirmation message fields
    897            uint8 sentEP;       // This should always be 0
    898            uint8 sentStatus;
    899            afDataConfirm_t *afDataConfirm;
    900            uint8 tmp;
    901          
    902            switch ( msgPtr->event )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
   \   000016   00           DB        0
   \   000017   06           DB        6
   \   000018   01           DB        1
   \   000019   ....         DW        ??ZDApp_ProcessOSALMsg_0
   \   00001B   02           DB        2
   \   00001C   ....         DW        ??ZDApp_ProcessOSALMsg_1
   \   00001E   03           DB        3
   \   00001F   ....         DW        ??ZDApp_ProcessOSALMsg_2
   \   000021   1A           DB        26
   \   000022   ....         DW        ??ZDApp_ProcessOSALMsg_3
   \   000024   D3           DB        211
   \   000025   ....         DW        ??ZDApp_ProcessOSALMsg_4
   \   000027   FD           DB        253
   \   000028   ....         DW        ??ZDApp_ProcessOSALMsg_5
   \   00002A   ....         DW        ??ZDApp_ProcessOSALMsg_6
    903            {
    904              // Incoming ZDO Message
    905              case AF_INCOMING_MSG_CMD:
    906                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002C                ; Setup parameters for call to function ZDP_IncomingData
   \   00002C   12....       LCALL   ??ZDP_IncomingData?relay
   \   00002F   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
    907                break;
    908                
    909              case ZDO_CB_MSG:
    910                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000032   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   \   000035   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
    911                break;
    912          
    913              case AF_DATA_CONFIRM_CMD:
    914                // This message is received as a confirmation of a data packet sent. The status is of ZStatus_t type 
    915                // [defined in NLMEDE.h] The message fields are defined in AF.h
    916                afDataConfirm = (afDataConfirm_t *)msgPtr;
    917                sentEP = afDataConfirm->endpoint;
    918                sentStatus = afDataConfirm->hdr.status;
    919          
    920                // Action taken when confirmation is received.
    921          #if defined ( ZIGBEE_FREQ_AGILITY )
    922                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000038   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   7002         JNZ     ??ZDApp_ProcessOSALMsg_7
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
    923                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000045                ; Setup parameters for indirect call
   \   000045   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   000048   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00004B   12....       LCALL   ?CALL_IND
   \   00004E   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
    924          #endif
    925                (void)sentEP;
    926                (void)sentStatus;
    927                break;
    928          
    929              case ZDO_NWK_DISC_CNF:
    930                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000051   90....       MOV     DPTR,#devState
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6402         XRL     A,#0x2
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
    931                  break;
    932                
    933                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   00005C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6401         XRL     A,#0x1
   \   000062   6008         JZ      ??ZDApp_ProcessOSALMsg_8
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6402         XRL     A,#0x2
   \   000067   6003         JZ      $+5
   \   000069   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
    934                {
    935                  if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6003         JZ      $+5
   \   000074   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   \   000077   90....       MOV     DPTR,#zdoDiscCounter
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C3           CLR     C
   \   00007C   9403         SUBB    A,#0x3
   \   00007E   5003         JNC     $+5
   \   000080   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
    936                  {
    937                    if ( devStartMode == MODE_JOIN )
   \   000083   EE           MOV     A,R6
   \   000084   2404         ADD     A,#0x4
   \   000086   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000089   2403         ADD     A,#0x3
   \   00008B   18           DEC     R0
   \   00008C   EF           MOV     A,R7
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   F9           MOV     R1,A
   \   000090   88..         MOV     ?V0 + 2,R0
   \   000092   89..         MOV     ?V0 + 3,R1
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   18           DEC     R0
   \   000098   EF           MOV     A,R7
   \   000099   3400         ADDC    A,#0x0
   \   00009B   F9           MOV     R1,A
   \   00009C   88..         MOV     ?V0 + 4,R0
   \   00009E   89..         MOV     ?V0 + 5,R1
   \   0000A0   90....       MOV     DPTR,#devStartMode
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   703E         JNZ     ??ZDApp_ProcessOSALMsg_10
    938                    {
    939                      devState = DEV_NWK_JOINING;
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   90....       MOV     DPTR,#devState
   \   0000AB   F0           MOVX    @DPTR,A
    940            
    941                      ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
   \   0000AC                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   0000AC   12....       LCALL   ??ZDApp_NodeProfileSync?relay
    942            
    943                      if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
    944                                               BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, 
    945                                             ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
    946                                             ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
    947                                               ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
   \   0000AF                ; Setup parameters for call to function NLME_JoinRequest
   \   0000AF   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F5..         MOV     ?V0 + 6,A
   \   0000B5   78..         MOV     R0,#?V0 + 6
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   85..83       MOV     DPH,?V0 + 1
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   85..82       MOV     DPL,?V0 + 4
   \   0000C5   85..83       MOV     DPH,?V0 + 5
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FC           MOV     R4,A
   \   0000CA   85..82       MOV     DPL,?V0 + 2
   \   0000CD   85..83       MOV     DPH,?V0 + 3
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FD           MOV     R5,A
   \   0000D2   EE           MOV     A,R6
   \   0000D3   2406         ADD     A,#0x6
   \   0000D5   FA           MOV     R2,A
   \   0000D6   EF           MOV     A,R7
   \   0000D7   3400         ADDC    A,#0x0
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000DD   7401         MOV     A,#0x1
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   807A         SJMP    ??ZDApp_ProcessOSALMsg_11
    948                      {
    949                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
    950                      }
    951                    }
    952                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000E4   6403         XRL     A,#0x3
   \   0000E6   707C         JNZ     ??CrossCallReturnLabel_13
    953                    {
    954                      devState = DEV_NWK_REJOIN;
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   90....       MOV     DPTR,#devState
   \   0000ED   F0           MOVX    @DPTR,A
    955          
    956                      // Before trying to do rejoin, check if the device has a valid short address
    957                      // If not, generate a random short address for itself
    958                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000EE   90....       MOV     DPTR,#(_NIB + 20)
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   64FE         XRL     A,#0xfe
   \   0000F4   7004         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000FA   7012         JNZ     ??ZDApp_ProcessOSALMsg_13
    959                      {
    960                        _NIB.nwkDevAddress = osal_rand();
   \   0000FC                ; Setup parameters for call to function osal_rand
   \   0000FC   12....       LCALL   ??osal_rand?relay
   \   0000FF   90....       MOV     DPTR,#(_NIB + 20)
   \   000102   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    961                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \                     ??CrossCallReturnLabel_56:
   \   000105                ; Setup parameters for call to function ZMacSetReq
   \   000105   7A..         MOV     R2,#((_NIB + 20) & 0xff)
   \   000107   7B..         MOV     R3,#(((_NIB + 20) >> 8) & 0xff)
   \   000109   7953         MOV     R1,#0x53
   \   00010B   12....       LCALL   ??ZMacSetReq?relay
    962                      }
    963          
    964                      if ( ZG_SECURE_ENABLED )
    965                      {
    966                        ZDApp_RestoreNwkKey();
    967                      }
    968                      
    969                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
    970                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00010E   90....       MOV     DPTR,#(_NIB + 33)
   \   000111   E0           MOVX    A,@DPTR
   \   000112   64FE         XRL     A,#0xfe
   \   000114   7004         JNZ     ??ZDApp_ProcessOSALMsg_14
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00011A   7021         JNZ     ??ZDApp_ProcessOSALMsg_15
    971                      {
    972                        _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
   \   00011C   85..82       MOV     DPL,?V0 + 4
   \   00011F   85..83       MOV     DPH,?V0 + 5
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FA           MOV     R2,A
   \   000124   85..82       MOV     DPL,?V0 + 2
   \   000127   85..83       MOV     DPH,?V0 + 3
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F9           MOV     R1,A
   \   00012C   EA           MOV     A,R2
   \   00012D   90....       MOV     DPTR,#(_NIB + 33)
   \   000130   F0           MOVX    @DPTR,A
   \   000131   A3           INC     DPTR
   \   000132   E9           MOV     A,R1
   \   000133   F0           MOVX    @DPTR,A
    973                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   000134                ; Setup parameters for call to function ZMacSetReq
   \   000134   7A..         MOV     R2,#((_NIB + 33) & 0xff)
   \   000136   7B..         MOV     R3,#(((_NIB + 33) >> 8) & 0xff)
   \   000138   7950         MOV     R1,#0x50
   \   00013A   12....       LCALL   ??ZMacSetReq?relay
    974                      }
    975          
    976                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00013D   7401         MOV     A,#0x1
   \   00013F   85..82       MOV     DPL,?XSP + 0
   \   000142   85..83       MOV     DPH,?XSP + 1
   \   000145   F0           MOVX    @DPTR,A
    977                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
   \   000146                ; Setup parameters for call to function ZMacSetReq
   \   000146   AA82         MOV     R2,DPL
   \   000148   AB83         MOV     R3,DPH
   \   00014A   7952         MOV     R1,#0x52
   \   00014C   12....       LCALL   ??ZMacSetReq?relay
    978                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
   \   00014F                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00014F   85..82       MOV     DPL,?V0 + 0
   \   000152   85..83       MOV     DPH,?V0 + 1
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000159   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   00015B   12....       LCALL   ??NLME_ReJoinRequest?relay
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   00015E   E9           MOV     A,R1
   \   00015F   6003         JZ      ??CrossCallReturnLabel_13
    979                      {
    980                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
    981                            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000161                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000161                ; Setup parameters for call to function osal_rand
   \   000161   12....       LCALL   ?Subroutine11 & 0xFFFF
    982                      }
    983                    }
    984            
    985                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_13:
   \   000164   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000167   E0           MOVX    A,@DPTR
   \   000168   A2E3         MOV     C,0xE0 /* A   */.3
   \   00016A   5062         JNC     ??ZDApp_ProcessOSALMsg_6
    986                    {
    987                      // The receiver is on, turn network layer polling off.
    988                      NLME_SetPollRate( 0 );
   \   00016C                ; Setup parameters for call to function NLME_SetPollRate
   \   00016C   12....       LCALL   ?Subroutine14 & 0xFFFF
    989                      NLME_SetQueuedPollRate( 0 );
    990                      NLME_SetResponseRate( 0 );
    991                    }
    992                    else
    993                    {
    994                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
    995                      {
    996                        ZDApp_SavedPollRate = zgPollRate;
    997                        NLME_SetPollRate( zgRejoinPollRate );
    998                      }
    999                    }
   1000                  }
   \                     ??CrossCallReturnLabel_17:
   \   00016F   805D         SJMP    ??ZDApp_ProcessOSALMsg_6
   1001                  else
   1002                  {
   1003                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000171   90....       MOV     DPTR,#continueJoining
   \   000174   E0           MOVX    A,@DPTR
   \   000175   6057         JZ      ??ZDApp_ProcessOSALMsg_6
   1004                    {
   1005              #if defined ( MANAGED_SCAN )
   1006                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1007              #else
   1008                      zdoDiscCounter++;
   \   000177   90....       MOV     DPTR,#zdoDiscCounter
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   04           INC     A
   \   00017C   F0           MOVX    @DPTR,A
   1009                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1010                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00017D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00017D                ; Setup parameters for call to function osal_rand
   \   00017D   12....       LCALL   ??osal_rand?relay
   \   000180   8A..         MOV     ?V0 + 0,R2
   \   000182   74FF         MOV     A,#-0x1
   \   000184   55..         ANL     A,?V0 + 0
   \   000186   F8           MOV     R0,A
   \   000187   7464         MOV     A,#0x64
   \   000189   28           ADD     A,R0
   \   00018A   FA           MOV     R2,A
   \   00018B   E4           CLR     A
   \   00018C   3400         ADDC    A,#0x0
   \   00018E   FB           MOV     R3,A
   \   00018F   803A         SJMP    ??ZDApp_ProcessOSALMsg_16
   1011              #endif
   1012                    }
   1013                  }
   1014                }
   1015                break;
   1016          
   1017              case ZDO_NWK_JOIN_IND:
   1018                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000191   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000194   E0           MOVX    A,@DPTR
   \   000195   6401         XRL     A,#0x1
   \   000197   6005         JZ      ??ZDApp_ProcessOSALMsg_17
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   6402         XRL     A,#0x2
   \   00019C   7030         JNZ     ??ZDApp_ProcessOSALMsg_6
   1019                {
   1020                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   00019E                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00019E   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   0001A1   802B         SJMP    ??ZDApp_ProcessOSALMsg_6
   1021                }
   1022                break;
   1023          
   1024              case ZDO_NWK_JOIN_REQ:
   1025                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   0001A3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   6401         XRL     A,#0x1
   \   0001A9   6005         JZ      ??ZDApp_ProcessOSALMsg_18
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   6402         XRL     A,#0x2
   \   0001AE   701E         JNZ     ??ZDApp_ProcessOSALMsg_6
   1026                {
   1027                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   0001B0   E4           CLR     A
   \   0001B1   90....       MOV     DPTR,#retryCnt
   \   0001B4   F0           MOVX    @DPTR,A
   1028                  devStartMode = MODE_RESUME;
   \   0001B5   7401         MOV     A,#0x1
   \   0001B7   90....       MOV     DPTR,#devStartMode
   \   0001BA   F0           MOVX    @DPTR,A
   1029                  _tmpRejoinState = true;
   \   0001BB   90....       MOV     DPTR,#_tmpRejoinState
   \   0001BE   12....       LCALL   ?Subroutine1 & 0xFFFF
   1030                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1031                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \                     ??CrossCallReturnLabel_1:
   \   0001C1   7402         MOV     A,#0x2
   \   0001C3   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0001C6   F0           MOVX    @DPTR,A
   1032                  ZDApp_NetworkInit( 0 );
   \   0001C7                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001C7   7A00         MOV     R2,#0x0
   \   0001C9   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   0001CB   12....       LCALL   ??ZDApp_NetworkInit?relay
   1033                }
   1034                break;
   1035          
   1036              default:
   1037                if ( ZG_SECURE_ENABLED )
   1038                  ZDApp_ProcessSecMsg( msgPtr );
   1039                break;
   1040            }
   1041          
   1042          }
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0001CE   7401         MOV     A,#0x1
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   7F07         MOV     R7,#0x7
   \   0001D5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??NLME_SetPollRate?relay
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??osal_rand?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   747F         MOV     A,#0x7f
   \   000007   55..         ANL     A,?V0 + 0
   \   000009   F8           MOV     R0,A
   \   00000A   7464         MOV     A,#0x64
   \   00000C   28           ADD     A,R0
   \   00000D   FA           MOV     R2,A
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   88..         MOV     ?V0 + 0,R0
   \   000007   89..         MOV     ?V0 + 1,R1
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
   1043          
   1044          /*********************************************************************
   1045           * @fn      ZDApp_ProcessMsgCBs()
   1046           * @brief   Process response messages
   1047           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1048          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1049          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   1050            switch ( inMsg->clusterID )
   \                     ??CrossCallReturnLabel_47:
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0200         DW        2
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   0000         DW        0
   \   000028   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1051            {
   1052          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1053              case NWK_addr_rsp:
   1054              case IEEE_addr_rsp:
   1055                {
   1056                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1057                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002A   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   00002D   8A..         MOV     ?V0 + 0,R2
   \   00002F   8B..         MOV     ?V0 + 1,R3
   \   000031   AE..         MOV     R6,?V0 + 0
   \   000033   AF..         MOV     R7,?V0 + 1
   1058                  if ( pAddrRsp )
   \   000035   EE           MOV     A,R6
   \   000036   7001         JNZ     ??ZDApp_ProcessMsgCBs_3
   \   000038   EF           MOV     A,R7
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000039   603F         JZ      ??ZDApp_ProcessMsgCBs_2
   1059                  {
   1060                    if ( pAddrRsp->status == ZSuccess )
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   7011         JNZ     ??ZDApp_ProcessMsgCBs_4
   1061                    {
   1062                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000042                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000042   EE           MOV     A,R6
   \   000043   2403         ADD     A,#0x3
   \   000045   FC           MOV     R4,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   FD           MOV     R5,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1063                    }
   1064                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   000053                ; Setup parameters for call to function osal_mem_free
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   ??osal_mem_free?relay
   \   00005A   801E         SJMP    ??ZDApp_ProcessMsgCBs_2
   1065                  }
   1066                }
   1067                break;
   1068          #endif
   1069                
   1070          #if defined ( REFLECTOR )
   1071              case Bind_req:
   1072              case Unbind_req:
   1073                {
   1074                  ZDO_BindUnbindReq_t bindReq;
   1075                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00005C                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   AC82         MOV     R4,DPL
   \   000064   AD83         MOV     R5,DPH
   \   000066   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1076                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000069                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   AC82         MOV     R4,DPL
   \   000071   AD83         MOV     R5,DPH
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   1077                }
   1078                break;
   1079          #endif      
   1080          
   1081          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1082              case Bind_rsp:      
   1083              case Unbind_rsp:
   1084                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1085                {
   1086                  ZDMatchSendState(
   1087                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1088                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1089                }
   1090                break;
   1091                
   1092              // Send the End device bind request  
   1093              case End_Device_Bind_req: 
   1094                if (ZG_DEVICE_COORDINATOR_TYPE)
   1095                {
   1096                  ZDEndDeviceBind_t bindReq;
   1097                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1098                  ZDO_MatchEndDeviceBind( &bindReq );  // ZDO layer match End device bind
   1099                  
   1100                  // Freeing the cluster lists - if allocated.
   1101                  if ( bindReq.numInClusters )
   1102                    osal_mem_free( bindReq.inClusters );
   1103                  if ( bindReq.numOutClusters )
   1104                    osal_mem_free( bindReq.outClusters );
   1105                }
   1106                break;
   1107          #endif
   1108            }
   1109          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00007A                REQUIRE ?Subroutine25
   \   00007A                ; // Fall through to label ?Subroutine25

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine32_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   EE           MOV     A,R6
   \   000005   240C         ADD     A,#0xc
   \   000007                REQUIRE ??Subroutine31_0
   \   000007                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   1110          
   1111          /*********************************************************************
   1112           * @fn      ZDApp_RegisterCBs()
   1113           *
   1114           * @brief   Process response messages
   1115           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1116          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1117          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1118          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1119            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   12....       LCALL   ?Subroutine7 & 0xFFFF
   1120          #endif
   1121          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1122            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_32:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   12....       LCALL   ?Subroutine7 & 0xFFFF
   1123          #endif  
   1124          #if ZG_BUILD_COORDINATOR_TYPE
   1125            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1126            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1127            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1128          #endif
   1129          #if defined ( REFLECTOR )
   1130            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_33:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV     R2,#0x21
   \   000010   7B00         MOV     R3,#0x0
   \   000012   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   1131            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_34:
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A22         MOV     R2,#0x22
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   1132          #endif  
   1133          }
   \                     ??CrossCallReturnLabel_35:
   \   00001C   02....       LJMP    ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7B80         MOV     R3,#-0x80
   \   000002                REQUIRE ??Subroutine26_0
   \   000002                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000008   22           RET
   1134          
   1135          /*********************************************************************
   1136           * @fn      ZDApp_ProcessSecMsg()
   1137           *
   1138           * @brief   Process the incoming security message.
   1139           *
   1140           * @param   msgPtr - message to process
   1141           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1142          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1143          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1144            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessSecMsg>_0`:
   \   00000C   00           DB        0
   \   00000D   03           DB        3
   \   00000E   06           DB        6
   \   00000F   ....         DW        ??ZDApp_ProcessSecMsg_0
   \   000011   08           DB        8
   \   000012   ....         DW        ??ZDApp_ProcessSecMsg_1
   \   000014   0A           DB        10
   \   000015   ....         DW        ??ZDApp_ProcessSecMsg_2
   \   000017   ....         DW        ??ZDApp_ProcessSecMsg_3
   1145            {
   1146              case ZDO_ESTABLISH_KEY_CFM:
   1147                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1148                {
   1149                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1150                }
   1151                break;
   1152          
   1153              case ZDO_ESTABLISH_KEY_IND:
   1154                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1155                {
   1156                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1157                  {
   1158                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1159                  }
   1160                }
   1161                break;
   1162          
   1163              case ZDO_TRANSPORT_KEY_IND:
   1164                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6402         XRL     A,#0x2
   \   000024   7022         JNZ     ??ZDApp_ProcessSecMsg_3
   1165                {
   1166                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000026                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000026   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000029   801D         SJMP    ??ZDApp_ProcessSecMsg_3
   1167                }
   1168                break;
   1169          
   1170              case ZDO_UPDATE_DEVICE_IND:
   1171                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1172                {
   1173                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1174                }
   1175                break;
   1176          
   1177              case ZDO_REMOVE_DEVICE_IND:
   1178                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   00002B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   7015         JNZ     ??ZDApp_ProcessSecMsg_3
   1179                {
   1180                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   \   000033                ; Setup parameters for call to function ZDSecMgrRemoveDeviceInd
   \   000033   12....       LCALL   ??ZDSecMgrRemoveDeviceInd?relay
   \   000036   8010         SJMP    ??ZDApp_ProcessSecMsg_3
   1181                }
   1182                break;
   1183          
   1184              case ZDO_REQUEST_KEY_IND:
   1185                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1186                {
   1187                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1188                  {
   1189                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1190                  }
   1191                }
   1192                break;
   1193          
   1194              case ZDO_SWITCH_KEY_IND:
   1195                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000038   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6401         XRL     A,#0x1
   \   00003E   6005         JZ      ??ZDApp_ProcessSecMsg_5
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6402         XRL     A,#0x2
   \   000043   7003         JNZ     ??ZDApp_ProcessSecMsg_3
   1196                {
   1197                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000045                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000045   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1198                }
   1199                break;
   1200              
   1201              case ZDO_AUTHENTICATE_IND:
   1202                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1203                {
   1204                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1205                }
   1206                break;
   1207          
   1208              case ZDO_AUTHENTICATE_CFM:
   1209                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1210                {
   1211                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1212                }
   1213                break;
   1214          
   1215              default:
   1216                // Unsupported messages
   1217                break;
   1218            }
   1219          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000048   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1220          
   1221          /*********************************************************************
   1222           * @fn      ZDApp_ProcessNetworkJoin()
   1223           *
   1224           * @brief  Save off the Network key information.
   1225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1226          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1227          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1228            if ( (devState == DEV_NWK_JOINING) ||
   1229                ((devState == DEV_NWK_ORPHAN)  &&
   1230                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1231            {
   1232              // Result of a Join attempt by this device.
   1233              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   703A         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1234              {
   1235                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL   ?Subroutine4 & 0xFFFF
   1236          
   1237          #if defined ( POWER_SAVING )
   1238                osal_pwrmgr_device( PWRMGR_BATTERY );
   1239          #endif
   1240          
   1241                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1242                {
   1243                  // wait for auth from trust center!!
   1244                  devState = DEV_END_DEVICE_UNAUTH;
   1245          
   1246                  // Start the reset timer for MAX UNAUTH time
   1247                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1248                }
   1249                else
   1250                {
   1251                  if ( ZSTACK_ROUTER_BUILD )
   1252                  {
   1253                    if ( devState == DEV_NWK_ORPHAN 
   1254                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_25:
   \   000030   90....       MOV     DPTR,#devState
   \   000033   E0           MOVX    A,@DPTR
   \   000034   640A         XRL     A,#0xa
   \   000036   700D         JNZ     ??ZDApp_ProcessNetworkJoin_4
   \   000038   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00003B   6010         JZ      ??ZDApp_ProcessNetworkJoin_5
   1255                    {
   1256                      // Change NIB state to router for restore
   1257                      _NIB.nwkState = NWK_ROUTER;
   \   00003D   7408         MOV     A,#0x8
   \   00003F   90....       MOV     DPTR,#(_NIB + 35)
   \   000042   F0           MOVX    @DPTR,A
   \   000043   8008         SJMP    ??ZDApp_ProcessNetworkJoin_5
   1258                    }
   1259                  }
   1260                          
   1261                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   7003         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1262                  {
   1263                    ZDApp_AnnounceNewAddress();
   \   00004A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00004A   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1264                  }
   1265                  
   1266                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00004D   7406         MOV     A,#0x6
   \   00004F   90....       MOV     DPTR,#devState
   \   000052   F0           MOVX    @DPTR,A
   1267                  if ( ZSTACK_ROUTER_BUILD )
   1268                  {
   1269                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1270                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000053   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??CrossCallReturnLabel_14 & 0xFFFF
   1271                    {
   1272                      NLME_StartRouterRequest( 0, 0, false );
   \   00005B                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   7A00         MOV     R2,#0x0
   \   00005F   7900         MOV     R1,#0x0
   \   000061   12....       LCALL   ??NLME_StartRouterRequest?relay
   \   000064   02....       LJMP    ??CrossCallReturnLabel_14 & 0xFFFF
   1273                    }
   1274                  }
   1275                }
   1276              }
   1277              else
   1278              {
   1279                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000067   90....       MOV     DPTR,#devStartMode
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6401         XRL     A,#0x1
   \   00006D   7031         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   00006F   90....       MOV     DPTR,#retryCnt
   \   000072   E0           MOVX    A,@DPTR
   \   000073   04           INC     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   C3           CLR     C
   \   000076   9403         SUBB    A,#0x3
   \   000078   4026         JC      ??ZDApp_ProcessNetworkJoin_6
   1280                {
   1281                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00007A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00007D   7003         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   00007F   74FF         MOV     A,#-0x1
   \   000081   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000082   600A         JZ      ??ZDApp_ProcessNetworkJoin_8
   \   000084   74FE         MOV     A,#-0x2
   \   000086   68           XRL     A,R0
   \   000087   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000089   74FF         MOV     A,#-0x1
   \   00008B   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00008C   7006         JNZ     ??ZDApp_ProcessNetworkJoin_10
   1282                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   00008E   E4           CLR     A
   \   00008F   90....       MOV     DPTR,#devStartMode
   \   000092   800B         SJMP    ??ZDApp_ProcessNetworkJoin_11
   1283                  else
   1284                  {
   1285                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   000094   7403         MOV     A,#0x3
   \   000096   90....       MOV     DPTR,#devStartMode
   \   000099   F0           MOVX    @DPTR,A
   1286                    _tmpRejoinState = true;
   \   00009A   7401         MOV     A,#0x1
   \   00009C   90....       MOV     DPTR,#_tmpRejoinState
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00009F   F0           MOVX    @DPTR,A
   1287                  }
   1288                }
   1289          
   1290                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1291                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   0000A0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000A0   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000A3   8A..         MOV     ?V0 + 0,R2
   \   0000A5   8B..         MOV     ?V0 + 1,R3
   \   0000A7   74FE         MOV     A,#-0x2
   \   0000A9   65..         XRL     A,?V0 + 0
   \   0000AB   7004         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   0000AD   74FF         MOV     A,#-0x1
   \   0000AF   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000B1   700E         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000B3   90....       MOV     DPTR,#(_NIB + 20)
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   64FE         XRL     A,#0xfe
   \   0000B9   7004         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   64FF         XRL     A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000BF   6026         JZ      ??ZDApp_ProcessNetworkJoin_15
   1292                {
   1293                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   74FE         MOV     A,#-0x2
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   74FF         MOV     A,#-0x1
   \   0000CD   F0           MOVX    @DPTR,A
   1294                  // Invalidate nwk addr so end device does not use in its data reqs.
   1295                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000CE   90....       MOV     DPTR,#(_NIB + 20)
   \   0000D1   74FE         MOV     A,#-0x2
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   74FF         MOV     A,#-0x1
   \   0000D7   F0           MOVX    @DPTR,A
   1296                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000D8                ; Setup parameters for call to function ZMacSetReq
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   AA82         MOV     R2,DPL
   \   0000E0   AB83         MOV     R3,DPH
   \   0000E2   7953         MOV     R1,#0x53
   \   0000E4   12....       LCALL   ??ZMacSetReq?relay
   1297                }
   1298          
   1299                // Clear the neighbor Table and network discovery tables.
   1300                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000E7                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000E7   12....       LCALL   ??nwkNeighborInitTable?relay
   1301                NLME_NwkDiscTerm();
   \   0000EA                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000EA   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1302          
   1303                zdoDiscCounter = 1;
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   90....       MOV     DPTR,#zdoDiscCounter
   \   0000F2   F0           MOVX    @DPTR,A
   1304          
   1305          //      ZDApp_NetworkInit( (uint16)
   1306          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1307          //                          (NWK_START_DELAY * 5)) );
   1308                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1309                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000F3                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000F3                ; Setup parameters for call to function osal_rand
   \   0000F3   8075         SJMP    ??ZDApp_ProcessNetworkJoin_16
   1310              }
   1311            }
   1312            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   6404         XRL     A,#0x4
   \   0000F8   7073         JNZ     ??CrossCallReturnLabel_14
   1313            {
   1314              // results of an orphaning attempt by this device
   1315              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000FA   90....       MOV     DPTR,#nwkStatus
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   7021         JNZ     ??ZDApp_ProcessNetworkJoin_17
   1316              {
   1317                if ( ZG_SECURE_ENABLED )
   1318                {
   1319                  ZDApp_RestoreNwkKey();
   1320                }
   1321                
   1322                devState = DEV_END_DEVICE;
   \   000100   12....       LCALL   ?Subroutine0 & 0xFFFF
   1323                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1324                // setup Power Manager Device
   1325          #if defined ( POWER_SAVING )
   1326                osal_pwrmgr_device( PWRMGR_BATTERY );
   1327          #endif
   1328          
   1329                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_22:
   \   000103   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000106   E0           MOVX    A,@DPTR
   \   000107   A2E3         MOV     C,0xE0 /* A   */.3
   \   000109   5003         JNC     ??CrossCallReturnLabel_18
   1330                {
   1331                  // The receiver is on, turn network layer polling off.
   1332                  NLME_SetPollRate( 0 );
   \   00010B                ; Setup parameters for call to function NLME_SetPollRate
   \   00010B   12....       LCALL   ?Subroutine14 & 0xFFFF
   1333                  NLME_SetQueuedPollRate( 0 );
   1334                  NLME_SetResponseRate( 0 );
   1335                }
   1336          
   1337                if ( ZSTACK_ROUTER_BUILD )
   1338                {
   1339                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1340                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??CrossCallReturnLabel_18:
   \   00010E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000111   6009         JZ      ??ZDApp_ProcessNetworkJoin_18
   1341                  {
   1342                    NLME_StartRouterRequest( 0, 0, false );
   \   000113                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000113   7B00         MOV     R3,#0x0
   \   000115   7A00         MOV     R2,#0x0
   \   000117   7900         MOV     R1,#0x0
   \   000119   12....       LCALL   ??NLME_StartRouterRequest?relay
   1343                  }
   1344                }
   1345                
   1346                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00011C                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00011C   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   00011F   804C         SJMP    ??CrossCallReturnLabel_14
   1347              }
   1348              else
   1349              {
   1350                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000121   90....       MOV     DPTR,#devStartMode
   \   000124   E0           MOVX    A,@DPTR
   \   000125   6401         XRL     A,#0x1
   \   000127   703B         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1351                {
   1352                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000129   90....       MOV     DPTR,#retryCnt
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   04           INC     A
   \   00012E   F0           MOVX    @DPTR,A
   \   00012F   C3           CLR     C
   \   000130   9404         SUBB    A,#0x4
   \   000132   5028         JNC     ??ZDApp_ProcessNetworkJoin_20
   1353                  {
   1354                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000134   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000137   7003         JNZ     ??ZDApp_ProcessNetworkJoin_21
   \   000139   74FF         MOV     A,#-0x1
   \   00013B   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   00013C   600A         JZ      ??ZDApp_ProcessNetworkJoin_22
   \   00013E   74FE         MOV     A,#-0x2
   \   000140   68           XRL     A,R0
   \   000141   7003         JNZ     ??ZDApp_ProcessNetworkJoin_23
   \   000143   74FF         MOV     A,#-0x1
   \   000145   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000146   7007         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1355                      devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000148   E4           CLR     A
   \   000149   90....       MOV     DPTR,#devStartMode
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   8015         SJMP    ??ZDApp_ProcessNetworkJoin_19
   1356                    else
   1357                    {
   1358                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00014F   7403         MOV     A,#0x3
   \   000151   90....       MOV     DPTR,#devStartMode
   \   000154   F0           MOVX    @DPTR,A
   1359                      _tmpRejoinState = true;
   \   000155   7401         MOV     A,#0x1
   \   000157   90....       MOV     DPTR,#_tmpRejoinState
   \   00015A   80F0         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1360                    }
   1361                  }
   1362                  // Do a normal join to the network after certain times of rejoin retries
   1363                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00015C   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   6401         XRL     A,#0x1
   \   000162   60E4         JZ      ??ZDApp_ProcessNetworkJoin_22
   1364                  {
   1365                    devStartMode = MODE_JOIN;
   1366                  }
   1367                }
   1368          
   1369                // Clear the neighbor Table and network discovery tables.
   1370                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000164                ; Setup parameters for call to function nwkNeighborInitTable
   \   000164   12....       LCALL   ??nwkNeighborInitTable?relay
   1371                NLME_NwkDiscTerm();
   \   000167                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000167   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1372          
   1373                // setup a retry for later...
   1374                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1375                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00016A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00016A                ; Setup parameters for call to function osal_rand
   1376              }
   1377            }
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00016A   12....       LCALL   ?Subroutine11 & 0xFFFF
   1378          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1379            else
   1380            {
   1381              // Assume from address conflict
   1382              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   1383              {
   1384                // Notify the network
   1385                ZDApp_AnnounceNewAddress();
   1386                
   1387                // Notify apps
   1388                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   1389              }
   1390            }
   1391          #endif
   1392          }
   \                     ??CrossCallReturnLabel_14:
   \   00016D   02....       LJMP    ?Subroutine20 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#(_NIB + 33)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   68           XRL     A,R0
   \   00000B   22           RET
   1393          
   1394          /*********************************************************************
   1395           * @fn      ZDApp_SaveNwkKey()
   1396           *
   1397           * @brief   Save off the Network key information.
   1398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1399          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1400          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1401            nwkActiveKeyItems keyItems;
   1402          
   1403            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1404            keyItems.frameCounter++;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_ADD_TO_X
   1405          
   1406            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1407                          (void *)&keyItems );
   \   000029                ; Setup parameters for call to function osal_nv_write
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..15       MOV     ?V0 + 0,#0x15
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   1408          
   1409            nwkFrameCounterChanges = 0;
   \   00004B   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
   1410          }
   \   000052                REQUIRE ?Subroutine23
   \   000052                ; // Fall through to label ?Subroutine23

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7415         MOV     A,#0x15
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A82         MOV     R2,#-0x7e
   \   000006                REQUIRE ??Subroutine27_0
   \   000006                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_write?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET
   1411          
   1412          /*********************************************************************
   1413           * @fn      ZDApp_ResetNwkKey()
   1414           *
   1415           * @brief   Reset the Network key information in NV.
   1416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1417          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1418          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1419            nwkActiveKeyItems keyItems;
   1420          
   1421            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
   1422            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1423                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_20:
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV     ?V0 + 0,#0x15
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   1424          }
   \   000023   02....       LJMP    ?Subroutine25 & 0xFFFF
   1425          
   1426          /*********************************************************************
   1427           * @fn      ZDApp_RestoreNwkKey()
   1428           *
   1429           * @brief  Save off the Network key information.
   1430           *
   1431           * @return  true if restored from NV, false if not
   1432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1433          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1434          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1435            nwkActiveKeyItems keyItems;
   1436            uint8 ret = false;
   \   00000A   7E00         MOV     R6,#0x0
   1437          
   1438            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1439                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_nv_read?relay
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   702F         JNZ     ??ZDApp_RestoreNwkKey_0
   1440            {
   1441              if ( keyItems.frameCounter > 0 )
   \   00003A   7411         MOV     A,#0x11
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?L_MOV_X
   \   000044   90....       MOV     DPTR,#__Constant_0
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?L_EQ_X
   \   00004C   6011         JZ      ??ZDApp_RestoreNwkKey_1
   1442              {
   1443                // Restore the key information
   1444                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   1445                nwkFrameCounter = keyItems.frameCounter;
   \   00004E   90....       MOV     DPTR,#__Constant_3e8
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?L_ADD_X
   \   000056   90....       MOV     DPTR,#nwkFrameCounter
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?L_MOV_TO_X
   1446                ret = true;
   \   00005E   0E           INC     R6
   1447              }
   1448          
   1449              // Force a save for the first frame counter increment
   1450              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   00005F   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000062   74E9         MOV     A,#-0x17
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   7403         MOV     A,#0x3
   \   000068   F0           MOVX    @DPTR,A
   1451            }
   1452            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000069   EE           MOV     A,R6
   \   00006A   F9           MOV     R1,A
   \   00006B   02....       LJMP    ?Subroutine23 & 0xFFFF
   1453          }
   1454          
   1455          /*********************************************************************
   1456           * @fn      ZDApp_ResetTimerStart
   1457           *
   1458           * @brief   Start the reset timer.
   1459           *
   1460           * @param   delay - delay time(ms) before reset
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1463          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1464            // Start the rest timer
   1465            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A04         MOV     R2,#0x4
   \   00000A   12....       LCALL   ?Subroutine6 & 0xFFFF
   1466          }
   \                     ??CrossCallReturnLabel_41:
   \   00000D   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1467          
   1468          /*********************************************************************
   1469           * @fn      ZDApp_ResetTimerCancel
   1470           *
   1471           * @brief   Cancel the reset timer.
   1472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1473          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1474          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1475            // Cancel the reset timer
   1476            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1477          }
   \   000010   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1478          
   1479          /*********************************************************************
   1480           * @fn      ZDApp_LeaveCtrlInit
   1481           *
   1482           * @brief   Initialize the leave control logic.
   1483           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1484          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1485          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1486            uint8 status;
   1487          
   1488          
   1489            // Initialize control state
   1490            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL   ?Subroutine2 & 0xFFFF
   1491          
   1492            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1493                                        sizeof(ZDApp_LeaveCtrl),
   1494                                        &ZDApp_LeaveCtrl );
   1495          
   1496            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   7A85         MOV     R2,#-0x7b
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_nv_item_init?relay
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   E9           MOV     A,R1
   \   00001C   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1497            {
   1498              // Read saved control
   1499              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1500                            0,
   1501                            sizeof( uint8 ),
   1502                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A85         MOV     R2,#-0x7b
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_read?relay
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1503            }
   1504          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   02....       LJMP    ??Subroutine33_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR     A
   \   000001   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000008   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET
   1505          
   1506          /*********************************************************************
   1507           * @fn      ZDApp_LeaveCtrlSet
   1508           *
   1509           * @brief   Set the leave control logic.
   1510           *
   1511           * @param   ra - reassociate flag
   1512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1513          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1514          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1515            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000005   7401         MOV     A,#0x1
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   F0           MOVX    @DPTR,A
   1516          
   1517            if ( ra == TRUE )
   \   00000B   69           XRL     A,R1
   \   00000C   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1518            {
   1519              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   00000E   7403         MOV     A,#0x3
   \   000010   F0           MOVX    @DPTR,A
   1520            }
   1521          
   1522            // Write the leave control
   1523            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1524                           0,
   1525                           sizeof( uint8 ),
   1526                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   75....       MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
   \   000014   75....       MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   75..01       MOV     ?V0 + 0,#0x1
   \   00001F   75..00       MOV     ?V0 + 1,#0x0
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A85         MOV     R2,#-0x7b
   \   00002D   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000030   02....       LJMP    ??Subroutine32_0 & 0xFFFF
   1527          }
   1528          
   1529          /*********************************************************************
   1530           * @fn      ZDApp_LeaveCtrlBypass
   1531           *
   1532           * @brief   Check if NV restore should be skipped during a leave reset.
   1533           *
   1534           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1536          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1537          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1538            uint8 bypass;
   1539          
   1540            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1541            {
   1542              bypass = TRUE;
   1543            }
   1544            else
   1545            {
   1546              bypass = FALSE;
   1547            }
   1548          
   1549            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   92E0         MOV     0xE0 /* A   */.0,C
   \   00000D   F9           MOV     R1,A
   \   00000E   80..         SJMP    ??Subroutine29_0
   1550          }
   1551          
   1552          /*********************************************************************
   1553           * @fn      ZDApp_LeaveCtrlStartup
   1554           *
   1555           * @brief   Check for startup conditions during a leave reset.
   1556           *
   1557           * @param   state      - devState_t determined by leave control logic
   1558           * @param   startDelay - startup delay
   1559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1560          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1561          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1562            *startDelay = 0;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   1563          
   1564            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5033         JNC     ??ZDApp_LeaveCtrlStartup_0
   1565            {
   1566              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1567              {
   1568                *startDelay = 5000;
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   7488         MOV     A,#-0x78
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   7413         MOV     A,#0x13
   \   000023   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1569              }
   1570              else
   1571              {
   1572                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   E4           CLR     A
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX    @DPTR,A
   1573              }
   1574          
   1575              // Set leave control to initialized state
   1576              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   00002B   12....       LCALL   ?Subroutine2 & 0xFFFF
   1577          
   1578              // Write initialized control
   1579              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1580                            0,
   1581                            sizeof( uint8 ),
   1582                            &ZDApp_LeaveCtrl);
   1583            }
   \                     ??CrossCallReturnLabel_3:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV     ?V0 + 0,#0x1
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A85         MOV     R2,#-0x7b
   \   000042   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1584          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000048   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   1585          
   1586          /*********************************************************************
   1587           * @fn      ZDApp_LeaveReset
   1588           *
   1589           * @brief   Setup a device reset due to a leave indication/confirm.
   1590           *
   1591           * @param   ra - reassociate flag
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1594          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1595            ZDApp_LeaveCtrlSet( ra );
   \   000004                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000004   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1596          
   1597            ZDApp_ResetTimerStart( 5000 );
   \   000007                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000007   7A88         MOV     R2,#-0x78
   \   000009   7B13         MOV     R3,#0x13
   \   00000B   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1598          }
   \   00000E   80..         SJMP    ??Subroutine29_0
   1599          
   1600          /*********************************************************************
   1601           * @fn      ZDApp_LeaveUpdate
   1602           *
   1603           * @brief   Update local device data related to leaving device.
   1604           *
   1605           * @param   nwkAddr        - NWK address of leaving device
   1606           * @param   extAddr        - EXT address of leaving device
   1607           * @param   removeChildren - remove children of leaving device
   1608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1609          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1610                                  uint8 removeChildren )
   1611          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EC           MOV     A,R4
   \   000005   FA           MOV     R2,A
   \   000006   ED           MOV     A,R5
   \   000007   FB           MOV     R3,A
   1612            /*
   1613            AddrMgrEntry_t entry;
   1614            */
   1615            (void)nwkAddr;  // Intentionally unreferenced parameter
   1616          
   1617            // Remove if child
   1618            if ( ZSTACK_ROUTER_BUILD )
   1619            {
   1620              NLME_RemoveChild( extAddr, removeChildren );
   \   000008                ; Setup parameters for call to function NLME_RemoveChild
   \   000008   12....       LCALL   ??NLME_RemoveChild?relay
   1621            }
   1622          }
   \   00000B   80..         SJMP    ??Subroutine29_0
   1623          
   1624          /*********************************************************************
   1625           * CALLBACK FUNCTIONS
   1626           */
   1627          
   1628          
   1629          /*********************************************************************
   1630           * @fn      ZDApp_SendEventMsg()
   1631           *
   1632           * @brief  Sends a Network Join message
   1633           *
   1634           * @param  cmd - command ID
   1635           * @param  len - length (in bytes) of the buf field
   1636           * @param  buf - buffer for the rest of the message.
   1637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1638          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1639          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1640            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000004                ; Setup parameters for call to function ZDApp_SendMsg
   \   000004   EA           MOV     A,R2
   \   000005   FB           MOV     R3,A
   \   000006   E9           MOV     A,R1
   \   000007   FA           MOV     R2,A
   \   000008                REQUIRE ?Subroutine24
   \   000008                ; // Fall through to label ?Subroutine24
   1641          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   80..         SJMP    ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#ZDAppTaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDApp_SendMsg?relay
   \   000008   22           RET
   1642          
   1643          /*********************************************************************
   1644           * @fn      ZDApp_SendMsg()
   1645           *
   1646           * @brief   Sends a OSAL message
   1647           *
   1648           * @param  taskID - Where to send the message
   1649           * @param  cmd - command ID
   1650           * @param  len - length (in bytes) of the buf field
   1651           * @param  buf - buffer for the rest of the message.
   1652           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1653          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1654          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 7,R1
   \   000007   8A..         MOV     ?V0 + 8,R2
   \   000009   8B..         MOV     ?V0 + 4,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   1655            osal_event_hdr_t *msgPtr;
   1656          
   1657            // Send the address to the task
   1658            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   8B82         MOV     DPL,R3
   \   000011   8582..       MOV     ?V0 + 0,DPL
   \   000014                ; Setup parameters for call to function osal_msg_allocate
   \   000014   AA..         MOV     R2,?V0 + 0
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??osal_msg_allocate?relay
   \   00001B   8A..         MOV     ?V0 + 10,R2
   \   00001D   8B..         MOV     ?V0 + 11,R3
   \   00001F   AE..         MOV     R6,?V0 + 10
   \   000021   AF..         MOV     R7,?V0 + 11
   1659            if ( msgPtr )
   \   000023   EE           MOV     A,R6
   \   000024   7001         JNZ     ??ZDApp_SendMsg_0
   \   000026   EF           MOV     A,R7
   \                     ??ZDApp_SendMsg_0:
   \   000027   6036         JZ      ??ZDApp_SendMsg_1
   1660            {
   1661              if ( (len > 0) && (buf != NULL) ) osal_memcpy( msgPtr, buf, len );
   \   000029   E5..         MOV     A,?V0 + 4
   \   00002B   6022         JZ      ??ZDApp_SendMsg_2
   \   00002D   E5..         MOV     A,?V0 + 2
   \   00002F   7002         JNZ     ??ZDApp_SendMsg_3
   \   000031   E5..         MOV     A,?V0 + 3
   \                     ??ZDApp_SendMsg_3:
   \   000033   601A         JZ      ??ZDApp_SendMsg_2
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   85....       MOV     ?V0 + 4,?V0 + 2
   \   000038   85....       MOV     ?V0 + 5,?V0 + 3
   \   00003B   75..00       MOV     ?V0 + 6,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000043   AC..         MOV     R4,?V0 + 0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   12....       LCALL   ??osal_memcpy?relay
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1662          
   1663              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_2:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E5..         MOV     A,?V0 + 8
   \   000055   F0           MOVX    @DPTR,A
   1664              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000056                ; Setup parameters for call to function osal_msg_send
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   A9..         MOV     R1,?V0 + 7
   \   00005C   12....       LCALL   ??osal_msg_send?relay
   1665            }
   1666          }
   \                     ??ZDApp_SendMsg_1:
   \   00005F   7F0C         MOV     R7,#0xc
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
   1667          
   1668          /*********************************************************************
   1669           * Call Back Functions from NWK  - API
   1670           */
   1671          
   1672          /*********************************************************************
   1673           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1674           *
   1675           * @brief       This function returns a choice of PAN to join.
   1676           *
   1677           * @param       ResultCount - Number of routers discovered
   1678           * @param               NetworkList - Pointer to list of network descriptors
   1679           *
   1680           * @return      ZStatus_t
   1681           */
   1682          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1683          ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1684                                                   networkDesc_t *NetworkList )
   1685          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 7,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   1686            networkDesc_t *pNwkDesc = NetworkList;
   1687            ZDO_NetworkDiscoveryCfm_t msg;
   1688            uint8 i = ResultCount;
   1689            uint8 stackProfile;
   1690            uint8 stackProfilePro;
   1691            uint8 selected;
   1692          
   1693          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1694            if ( zdappMgmtNwkDiscReqInProgress )
   1695            {
   1696              zdappMgmtNwkDiscReqInProgress = false;
   1697              ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
   1698              return ( ZSuccess );
   1699            }
   1700          #endif
   1701          
   1702            // process discovery results
   1703            stackProfilePro = FALSE;
   \   000010   75..00       MOV     ?V0 + 8,#0x0
   1704            selected = FALSE;
   1705          
   1706            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000013   75..00       MOV     ?V0 + 6,#0x0
   1707            {
   1708              pNwkDesc = NetworkList;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000016   AE..         MOV     R6,?V0 + 4
   \   000018   AF..         MOV     R7,?V0 + 5
   1709              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00001A   75..00       MOV     ?V0 + 9,#0x0
   \   00001D   8020         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   1710              {
   1711                if ( zgConfigPANID != 0xFFFF )
   1712                {
   1713                  // PAN Id is preconfigured. check if it matches
   1714                  if ( pNwkDesc->panId != zgConfigPANID )
   1715                    continue;
   1716                }
   1717                
   1718          
   1719                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
   1720                {
   1721                  // If the extended Pan ID is commissioned to a non zero value
   1722                  // Only join the Pan that has match EPID
   1723                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1724                    continue;
   1725                  
   1726                }
   1727                  // check that network is allowing joining
   1728                  if ( ZSTACK_ROUTER_BUILD )
   1729                  {
   1730                    if ( stackProfilePro == FALSE )
   1731                    {
   1732                      if ( !pNwkDesc->routerCapacity )
   1733                      {
   1734                        continue;
   1735                      }
   1736                    }
   1737                    else
   1738                    {
   1739                      if ( !pNwkDesc->deviceCapacity )
   1740                      {
   1741                        continue;
   1742                      }
   1743                    }
   1744                  }
   1745                  else if ( ZSTACK_END_DEVICE_BUILD )
   1746                  {
   1747                    if ( !pNwkDesc->deviceCapacity )
   1748                    {
   1749                      continue;
   1750                    }
   1751                  }
   1752          
   1753                  // check version of zigbee protocol
   1754                  if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1755                    continue;
   1756          
   1757                  // check version of stack profile
   1758                  if ( pNwkDesc->stackProfile != zgStackProfile  )
   1759                  {
   1760                    if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
   1761                        || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7008         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   \   000024   7401         MOV     A,#0x1
   \   000026   6A           XRL     A,R2
   \   000027   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
   1762                      stackProfilePro = TRUE;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_4:
   \   000029   75..01       MOV     ?V0 + 8,#0x1
   1763                    
   1764                    if ( stackProfile == 0 )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_3:
   \   00002C   E5..         MOV     A,?V0 + 6
   \   00002E   6003         JZ      $+5
   \   000030   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
   \                     ??ZDO_NetworkDiscoveryConfirmCB_6:
   \   000033   05..         INC     ?V0 + 9
   \   000035   EE           MOV     A,R6
   \   000036   2416         ADD     A,#0x16
   \   000038   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00003B   FE           MOV     R6,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FF           MOV     R7,A
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00003F   EE           MOV     A,R6
   \   000040   2407         ADD     A,#0x7
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   F5..         MOV     ?V0 + 1,A
   \   000049   EE           MOV     A,R6
   \   00004A   240D         ADD     A,#0xd
   \   00004C   F5..         MOV     ?V0 + 2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 3,A
   \   000053   E5..         MOV     A,?V0 + 9
   \   000055   C3           CLR     C
   \   000056   95..         SUBB    A,?V0 + 7
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
   \   00005D   90....       MOV     DPTR,#zgConfigPANID
   \   000060   E0           MOVX    A,@DPTR
   \   000061   64FF         XRL     A,#0xff
   \   000063   7004         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   64FF         XRL     A,#0xff
   \                     ??ZDO_NetworkDiscoveryConfirmCB_8:
   \   000069   6015         JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F8           MOV     R0,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   90....       MOV     DPTR,#zgConfigPANID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   68           XRL     A,R0
   \   000079   7003         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   69           XRL     A,R1
   \                     ??ZDO_NetworkDiscoveryConfirmCB_10:
   \   00007E   70B3         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_9:
   \   000080                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000080   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000082   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000084   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   000087   E9           MOV     A,R1
   \   000088   6401         XRL     A,#0x1
   \   00008A   700E         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
   \   00008C                ; Setup parameters for call to function sAddrExtCmp
   \   00008C   AC..         MOV     R4,?V0 + 2
   \   00008E   AD..         MOV     R5,?V0 + 3
   \   000090   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000092   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000094   12....       LCALL   ??sAddrExtCmp?relay
   \   000097   E9           MOV     A,R1
   \   000098   6099         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_11:
   \   00009A   E5..         MOV     A,?V0 + 8
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   7005         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_12
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   7006         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_13
   \   0000AA   8087         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_12:
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   6083         JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
   \                     ??ZDO_NetworkDiscoveryConfirmCB_13:
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FA           MOV     R2,A
   \   0000B8   90....       MOV     DPTR,#(_NIB + 17)
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   6A           XRL     A,R2
   \   0000BD   6003         JZ      $+5
   \   0000BF   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FA           MOV     R2,A
   \   0000D0   90....       MOV     DPTR,#zgStackProfile
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   6A           XRL     A,R2
   \   0000D5   6033         JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   6401         XRL     A,#0x1
   \   0000DA   6003         JZ      $+5
   \   0000DC   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
   \   0000DF   7402         MOV     A,#0x2
   \   0000E1   6A           XRL     A,R2
   \   0000E2   6003         JZ      $+5
   \   0000E4   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
   \   0000E7   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
   1765                    {
   1766                      continue;
   1767                    }
   1768                  }
   1769          
   1770                // check if beacon order is the right value.. if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
   1771                // continue;
   1772          
   1773                // choose this pan for joining
   1774                break;
   1775              } 
   1776              if (i < ResultCount)
   1777              {
   1778               selected = TRUE;
   1779                break;
   1780              }
   1781             
   1782              // break if selected or stack profile pro wasn't found
   1783              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_7:
   \   0000EA   E5..         MOV     A,?V0 + 8
   \   0000EC   600C         JZ      ??ZDO_NetworkDiscoveryConfirmCB_14
   1784              {
   1785                break;
   1786              }
   1787            }
   \   0000EE   05..         INC     ?V0 + 6
   \   0000F0   E5..         MOV     A,?V0 + 6
   \   0000F2   C3           CLR     C
   \   0000F3   9402         SUBB    A,#0x2
   \   0000F5   5003         JNC     $+5
   \   0000F7   02....       LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
   1788          
   1789            if ( i == ResultCount )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_14:
   \   0000FA   E5..         MOV     A,?V0 + 7
   \   0000FC   65..         XRL     A,?V0 + 9
   \   0000FE   700A         JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
   1790            {
   1791              msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
   \   000100   7401         MOV     A,#0x1
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   7401         MOV     A,#0x1
   \   000107   F0           MOVX    @DPTR,A
   \   000108   8058         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_15
   1792            }
   1793            else
   1794            {
   1795              msg.hdr.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_5:
   \   00010A   7401         MOV     A,#0x1
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   E4           CLR     A
   \   000110   F0           MOVX    @DPTR,A
   1796              msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   E0           MOVX    A,@DPTR
   \   000116   C0E0         PUSH    A
   \   000118   7402         MOV     A,#0x2
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   D0E0         POP     A
   \   00011F   F0           MOVX    @DPTR,A
   1797              msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   C0E0         PUSH    A
   \   000128   7403         MOV     A,#0x3
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   D0E0         POP     A
   \   00012F   F0           MOVX    @DPTR,A
   1798              msg.logicalChannel = pNwkDesc->logicalChannel;
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   C0E0         PUSH    A
   \   000139   7404         MOV     A,#0x4
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   D0E0         POP     A
   \   000140   F0           MOVX    @DPTR,A
   1799              msg.version = pNwkDesc->version;
   \   000141   85..82       MOV     DPL,?V0 + 0
   \   000144   85..83       MOV     DPH,?V0 + 1
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C0E0         PUSH    A
   \   00014A   7405         MOV     A,#0x5
   \   00014C   12....       LCALL   ?XSTACK_DISP0_8
   \   00014F   D0E0         POP     A
   \   000151   F0           MOVX    @DPTR,A
   1800              osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
   \   000152                ; Setup parameters for call to function sAddrExtCpy
   \   000152   AC..         MOV     R4,?V0 + 2
   \   000154   AD..         MOV     R5,?V0 + 3
   \   000156   7406         MOV     A,#0x6
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   AA82         MOV     R2,DPL
   \   00015D   AB83         MOV     R3,DPH
   \   00015F   12....       LCALL   ??sAddrExtCpy?relay
   1801            }
   1802            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
   \                     ??ZDO_NetworkDiscoveryConfirmCB_15:
   \   000162                ; Setup parameters for call to function ZDApp_SendMsg
   \   000162   85..82       MOV     DPL,?XSP + 0
   \   000165   85..83       MOV     DPH,?XSP + 1
   \   000168   AC82         MOV     R4,DPL
   \   00016A   AD83         MOV     R5,DPH
   \   00016C   7B0E         MOV     R3,#0xe
   \   00016E   7A01         MOV     R2,#0x1
   \   000170   12....       LCALL   ?Subroutine8 & 0xFFFF
   1803          
   1804            return (ZSuccess);
   \                     ??CrossCallReturnLabel_30:
   \   000173   7900         MOV     R1,#0x0
   \   000175   740E         MOV     A,#0xe
   \   000177   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017A   7F0A         MOV     R7,#0xa
   \   00017C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1805          }  // ZDO_NetworkDiscoveryConfirmCB
   1806          
   1807          /*********************************************************************
   1808           * @fn          ZDO_NetworkFormationConfirmCB
   1809           *
   1810           * @brief       This function reports the results of the request to
   1811           *              initialize a coordinator in a network.
   1812           *
   1813           * @param       Status - Result of NLME_NetworkFormationRequest()
   1814           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1815          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   1816          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1817            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   1818          
   1819            if ( Status == ZSUCCESS )
   \   000009   7019         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   1820            {
   1821              // LED Blink shows Coordinator started
   1822              HalLedBlink (HAL_LED_1, 1, 50, 1000);
   \   00000B                ; Setup parameters for call to function HalLedBlink
   \   00000B   7CE8         MOV     R4,#-0x18
   \   00000D   7D03         MOV     R5,#0x3
   \   00000F   7B32         MOV     R3,#0x32
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7901         MOV     R1,#0x1
   \   000015   12....       LCALL   ??HalLedBlink?relay
   1823              HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000018                ; Setup parameters for call to function HalLedSet
   \   000018   7A00         MOV     R2,#0x0
   \   00001A   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   1824              
   1825              // LED off forgets HOLD_AUTO_START
   1826              HalLedSet (HAL_LED_2, HAL_LED_MODE_OFF);
   1827          
   1828          #if defined ( ZBIT )
   1829              SIM_SetColor(0xd0ffd0);
   1830          #endif
   1831          
   1832              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_46:
   \   00001D   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   1833              {
   1834                // Began with HOLD_AUTO_START
   1835                devState = DEV_COORD_STARTING;
   \   00001F   7408         MOV     A,#0x8
   \   000021   F0           MOVX    @DPTR,A
   \   000022   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   1836              }
   1837            }
   1838          #if defined(BLINK_LEDS)
   1839            else
   1840              HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000024                ; Setup parameters for call to function HalLedSet
   \   000024   7A04         MOV     R2,#0x4
   \   000026   7901         MOV     R1,#0x1
   \   000028   12....       LCALL   ??HalLedSet?relay
   1841          #endif
   1842          
   1843            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002B                ; Setup parameters for call to function osal_set_event
   \   00002B   7A02         MOV     R2,#0x2
   \   00002D   02....       LJMP    ?Subroutine18 & 0xFFFF
   1844          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   7901         MOV     R1,#0x1
   \   000002   12....       LCALL   ??HalLedSet?relay
   \   000005                ; Setup parameters for call to function HalLedSet
   \   000005                ; Setup parameters for call to function HalLedSet
   \   000005                ; Setup parameters for call to function HalLedSet
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7902         MOV     R1,#0x2
   \   000009   12....       LCALL   ??HalLedSet?relay
   \   00000C   90....       MOV     DPTR,#devState
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
   1845          
   1846          /*********************************************************************
   1847           * @fn          ZDO_StartRouterConfirmCB
   1848           *
   1849           * @brief       This function reports the results of the request to
   1850           *              start functioning as a router in a network.
   1851           *
   1852           * @param       Status - Result of NLME_StartRouterRequest()
   1853           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1854          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   1855          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1856            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   1857          
   1858            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_StartRouterConfirmCB_0
   1859            {
   1860              // LED on shows Router started
   1861              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine16 & 0xFFFF
   1862              
   1863              // LED off forgets HOLD_AUTO_START
   1864              HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF);
   1865              
   1866              if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_44:
   \   00000E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   1867              {
   1868                // Began with HOLD_AUTO_START
   1869                devState = DEV_END_DEVICE;
   \   000010   7406         MOV     A,#0x6
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   1870              }
   1871            }
   1872          #if defined(BLINK_LEDS)
   1873            else
   1874              HalLedSet( HAL_LED_1, HAL_LED_MODE_FLASH ); // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   ??HalLedSet?relay
   1875          #endif
   1876          
   1877            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A20         MOV     R2,#0x20
   \   00001E   02....       LJMP    ?Subroutine18 & 0xFFFF
   1878          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7A01         MOV     R2,#0x1
   \   000002                REQUIRE ??Subroutine30_0
   \   000002                ; // Fall through to label ??Subroutine30_0
   1879          
   1880          /*********************************************************************
   1881           * @fn          ZDO_JoinConfirmCB
   1882           *
   1883           * @brief       This function allows the next hight layer to be notified
   1884           *              of the results of its request to join itself or another
   1885           *              device to a network.
   1886           *
   1887           * @param       Status - Result of NLME_JoinRequest()
   1888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1889          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   1890          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1891            (void)PanId;  // remove if this parameter is used.
   1892            
   1893            nwkStatus = (byte)Status;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#nwkStatus
   \   000008   F0           MOVX    @DPTR,A
   1894          
   1895            if ( Status == ZSUCCESS )
   \   000009   700A         JNZ     ??ZDO_JoinConfirmCB_0
   1896            {
   1897              // LED on shows device joined
   1898              HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   12....       LCALL   ?Subroutine16 & 0xFFFF
   1899              
   1900              // LED off forgets HOLD_AUTO_START
   1901              HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF);
   1902              
   1903              if ( (devState == DEV_HOLD) )
   \                     ??CrossCallReturnLabel_45:
   \   00000E   700C         JNZ     ??ZDO_JoinConfirmCB_1
   1904              {
   1905                // Began with HOLD_AUTO_START
   1906                devState = DEV_NWK_JOINING;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8007         SJMP    ??ZDO_JoinConfirmCB_1
   1907              }
   1908          
   1909              if ( !ZG_SECURE_ENABLED )
   1910              {
   1911                // Notify to save info into NV
   1912                ZDApp_NVUpdate();
   1913              }
   1914            }
   1915            else
   1916            {
   1917          #if defined(BLINK_LEDS)
   1918              HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH ); // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A04         MOV     R2,#0x4
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   ??HalLedSet?relay
   1919          #endif
   1920            }
   1921          
   1922            // Notify ZDApp
   1923            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00001C                ; Setup parameters for call to function ZDApp_SendMsg
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7B02         MOV     R3,#0x2
   \   000022   7A02         MOV     R2,#0x2
   \   000024   02....       LJMP    ?Subroutine24 & 0xFFFF
   1924          }
   1925          
   1926          /*********************************************************************
   1927           * @fn          ZDO_AddrChangeIndicationCB
   1928           *
   1929           * @brief       This function notifies the application that this
   1930           *              device's address has changed.  Could happen in 
   1931           *              a network with stochastic addressing (PRO).
   1932           *
   1933           * @param       newAddr - the new address
   1934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1935          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   1936          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1937            (void)newAddr;  // remove if this parameter is used
   1938            
   1939            // Notify to save info into NV
   1940            ZDApp_NVUpdate();
   1941          
   1942            // Notify the applications   
   1943            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   12....       LCALL   ?Subroutine4 & 0xFFFF
   1944          
   1945            // Send out a device announce
   1946            ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_26:
   \   000007                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000007   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1947          }
   \   00000A   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   1948          
   1949          /*********************************************************************
   1950           * @fn          ZDO_JoinIndicationCB
   1951           *
   1952           * @brief       This function allows the next higher layer of a
   1953           *              coordinator to be notified of a remote join request.
   1954           *
   1955           * @param       ShortAddress - 16-bit address
   1956           * @param       ExtendedAddress - IEEE (64-bit) address
   1957           * @param       CapabilityInformation - Association Capability Information
   1958           * @param       type - of joining - 
   1959           *                          NWK_ASSOC_JOIN
   1960           *                          NWK_ASSOC_REJOIN_UNSECURE
   1961           *                          NWK_ASSOC_REJOIN_SECURE
   1962           *
   1963           * @return      ZStatus_t
   1964           */
   1965          ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   1966                                          uint8 CapabilityInformation, uint8 type )
   1967          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1968            (void)ShortAddress;
   1969            (void)ExtendedAddress;
   1970            (void)CapabilityInformation;
   1971            
   1972              // Notify to save info into NV
   1973              ZDApp_NVUpdate();
   1974            
   1975              // send notification to TC of new device..
   1976              if ( ZG_SECURE_ENABLED )
   1977              {
   1978                if ( type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE )
   1979                {
   1980                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   1981                }
   1982              }
   1983            
   1984              return ( ZSuccess );
   \   000000                REQUIRE ?Subroutine19
   \   000000                ; // Fall through to label ?Subroutine19

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   1985          }
   1986          
   1987          /*********************************************************************
   1988           * @fn          ZDO_ConcentratorIndicationCB
   1989           *
   1990           * @brief       This function allows the next higher layer of a
   1991           *              device to be notified of existence of the concentrator.
   1992           *
   1993           * @param       nwkAddr - 16-bit NWK address of the concentrator
   1994           *
   1995           * @return      void 
   1996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1997          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr )
   \                     ZDO_ConcentratorIndicationCB:
   1998          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1999            // Write your code here to do something with the concentrator's
   2000            // address.
   2001            (void)nwkAddr;
   2002          }
   \   000000   02....       LJMP    ?BRET
   2003          
   2004          /*********************************************************************
   2005           * @fn          ZDO_LeaveCnf
   2006           *
   2007           * @brief       This function allows the next higher layer to be
   2008           *              notified of the results of its request for this or
   2009           *              a child device to leave the network.
   2010           *
   2011           * @param       cnf - NLME_LeaveCnf_t
   2012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2013          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2014          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2015            // Check for this device
   2016            if ( osal_ExtAddrEqual( cnf->extAddr,
   2017                                    NLME_GetExtAddr() ) == TRUE )
   \   000009   EE           MOV     A,R6
   \   00000A   2402         ADD     A,#0x2
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013                ; Setup parameters for call to function sAddrExtCmp
   \   000013                ; Setup parameters for call to function NLME_GetExtAddr
   \   000013   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000016   EA           MOV     A,R2
   \   000017   FC           MOV     R4,A
   \   000018   EB           MOV     A,R3
   \   000019   FD           MOV     R5,A
   \   00001A   AA..         MOV     R2,?V0 + 0
   \   00001C   AB..         MOV     R3,?V0 + 1
   \   00001E   12....       LCALL   ??sAddrExtCmp?relay
   \   000021   E9           MOV     A,R1
   \   000022   6401         XRL     A,#0x1
   \   000024   700C         JNZ     ??ZDO_LeaveCnf_0
   2018            {
   2019              // Prepare to leave with reset
   2020              ZDApp_LeaveReset( cnf->rejoin );
   \   000026                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000026   EE           MOV     A,R6
   \   000027   240B         ADD     A,#0xb
   \   000029   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   2021            }
   \                     ??CrossCallReturnLabel_50:
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000030   8017         SJMP    ??ZDO_LeaveCnf_1
   2022            else if ( ZSTACK_ROUTER_BUILD )
   2023            {
   2024              // Remove device address(optionally descendents) from data
   2025              ZDApp_LeaveUpdate( cnf->dstAddr,
   2026                                 cnf->extAddr,
   2027                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_0:
   \   000032                ; Setup parameters for call to function NLME_RemoveChild
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   AA..         MOV     R2,?V0 + 0
   \   000044   AB..         MOV     R3,?V0 + 1
   \   000046   12....       LCALL   ??NLME_RemoveChild?relay
   2028            }
   2029          }
   \                     ??ZDO_LeaveCnf_1:
   \   000049   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   2030          
   2031          /*********************************************************************
   2032           * @fn          ZDO_LeaveInd
   2033           *
   2034           * @brief       This function allows the next higher layer of a
   2035           *              device to be notified of a remote leave request or
   2036           *              indication.
   2037           *
   2038           * @param       ind - NLME_LeaveInd_t
   2039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2040          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2041          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2042            uint8 leave;
   2043          
   2044          
   2045            // Parent is requesting the leave - NWK layer filters out illegal
   2046            // requests
   2047            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000014   240B         ADD     A,#0xb
   \   000016   18           DEC     R0
   \   000017   EF           MOV     A,R7
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F9           MOV     R1,A
   \   00001B   88..         MOV     ?V0 + 2,R0
   \   00001D   89..         MOV     ?V0 + 3,R1
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6401         XRL     A,#0x1
   \   000030   7031         JNZ     ??ZDO_LeaveInd_0
   2048            {
   2049              // Notify network of leave
   2050              if ( ZSTACK_ROUTER_BUILD )
   2051              {
   2052                NLME_LeaveRsp_t rsp;
   2053                rsp.rejoin         = ind->rejoin;
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C0E0         PUSH    A
   \   00003B   7401         MOV     A,#0x1
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
   2054                rsp.removeChildren = ind->removeChildren;
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   \   000047   E0           MOVX    A,@DPTR
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   F0           MOVX    @DPTR,A
   2055                NLME_LeaveRsp( &rsp );
   \   00004F                ; Setup parameters for call to function NLME_LeaveRsp
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??NLME_LeaveRsp?relay
   2056              }
   2057          
   2058              // Prepare to leave with reset
   2059              ZDApp_LeaveReset( ind->rejoin );
   \   000056                ; Setup parameters for call to function ZDApp_LeaveReset
   \                     ??ZDO_LeaveInd_1:
   \   000056   85..82       MOV     DPL,?V0 + 0
   \   000059   85..83       MOV     DPH,?V0 + 1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000061   802D         SJMP    ??ZDO_LeaveInd_2
   2060            }
   2061            else
   2062            {
   2063              leave = FALSE;
   2064          
   2065              // Check if this device needs to leave as a child or descendent
   2066              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000063                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000063   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000066   85..82       MOV     DPL,?V0 + 2
   \   000069   85..83       MOV     DPH,?V0 + 3
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   E0           MOVX    A,@DPTR
   \   000073   6A           XRL     A,R2
   \   000074   7003         JNZ     ??ZDO_LeaveInd_3
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_3:
   \   000079   700A         JNZ     ??ZDO_LeaveInd_4
   2067              {
   2068                if ( ( ind->removeChildren == TRUE               ) ||
   2069                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2070                       NODETYPE_DEVICE                           )    )
   \   00007B   7401         MOV     A,#0x1
   \   00007D   69           XRL     A,R1
   \   00007E   60D6         JZ      ??ZDO_LeaveInd_1
   \   000080   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000083   60D1         JZ      ??ZDO_LeaveInd_1
   2071                {
   2072                  leave = TRUE;
   2073                }
   2074              }
   2075              else if ( ind->removeChildren == TRUE )
   2076              {
   2077                // Check NWK address allocation algorithm
   2078                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2079              }
   2080          
   2081              if ( leave == TRUE )
   2082              {
   2083                // Prepare to leave with reset
   2084                ZDApp_LeaveReset( ind->rejoin );
   \   000085                ; Setup parameters for call to function ZDApp_LeaveReset
   2085              }
   2086              else
   2087              {
   2088                // Remove device address(optionally descendents) from data
   2089                ZDApp_LeaveUpdate( ind->srcAddr,
   2090                                   ind->extAddr,
   2091                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_4:
   \   000085                ; Setup parameters for call to function NLME_RemoveChild
   \   000085   EE           MOV     A,R6
   \   000086   2402         ADD     A,#0x2
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   FB           MOV     R3,A
   \   00008D   12....       LCALL   ??NLME_RemoveChild?relay
   2092              }
   2093            }
   2094          }
   \                     ??ZDO_LeaveInd_2:
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   \   000095   7F06         MOV     R7,#0x6
   \   000097   02....       LJMP    ?BANKED_LEAVE_XDATA
   2095          
   2096          /*********************************************************************
   2097           * @fn          ZDO_SyncIndicationCB
   2098           *
   2099           * @brief       This function allows the next higher layer of a
   2100           *              coordinator to be notified of a loss of synchronization
   2101           *                          with the parent/child device.
   2102           *
   2103           * @param       type: 0 - child; 1 - parent
   2104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2105          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2106          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2107            (void)shortAddr;  // Remove this line if this parameter is used.
   2108            
   2109            if ( ZSTACK_END_DEVICE_BUILD
   2110              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityInfo & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000004   90....       MOV     DPTR,#(_NIB + 14)
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000A   4013         JC      ??CrossCallReturnLabel_31
   2111            {
   2112              if ( type == 1 )
   \   00000C   7401         MOV     A,#0x1
   \   00000E   69           XRL     A,R1
   \   00000F   700E         JNZ     ??CrossCallReturnLabel_31
   2113              {
   2114                // We lost contact with our parent.  Clear the neighbor Table.
   2115                nwkNeighborInitTable();
   \   000011                ; Setup parameters for call to function nwkNeighborInitTable
   \   000011   12....       LCALL   ??nwkNeighborInitTable?relay
   2116                
   2117                // Start the rejoin process.
   2118                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000014                ; Setup parameters for call to function ZDApp_SendMsg
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7B02         MOV     R3,#0x2
   \   00001A   7A03         MOV     R2,#0x3
   \   00001C   12....       LCALL   ?Subroutine8 & 0xFFFF
   2119              }
   2120            }
   2121          }
   \                     ??CrossCallReturnLabel_31:
   \   00001F   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2122          
   2123          /*********************************************************************
   2124           * @fn          ZDO_ManytoOneFailureIndicationCB
   2125           *
   2126           * @brief       This function allows the next higher layer of a
   2127           *              concentrator to be notified of a many-to-one route 
   2128           *              failure. 
   2129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2130          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2131          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2132            // By default, the concentrator automatically redo many-to-one route 
   2133            // discovery to update all many-to-one routes in the network
   2134            // If you want anything processing other than the default,
   2135            // please replace the following code.
   2136            
   2137            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2138          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2139          
   2140          
   2141          /*********************************************************************
   2142           * @fn          ZDO_PollConfirmCB
   2143           *
   2144           * @brief       This function allows the next higher layer to be
   2145           *              notified of a Poll Confirm.
   2146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2147          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2148          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2149            (void)status;  // Remove this line if this parameter is used.
   2150            return;
   \   000000   02....       LJMP    ?BRET
   2151          }
   2152          
   2153          /******************************************************************************
   2154           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2155           *
   2156           * @brief       Stub routine implemented by NHLE. NHLE should call
   2157           *              <AddrMgrWriteNV> when appropriate.
   2158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2159          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2160          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2161          #if defined ( NV_RESTORE )  
   2162            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2163            {
   2164              // Trigger to save info into NV
   2165              ZDApp_NVUpdate();
   2166            }
   2167          #endif
   2168          }
   \   000000   02....       LJMP    ?BRET
   2169          
   2170          /*********************************************************************
   2171           * Call Back Functions from Security  - API
   2172           */
   2173          
   2174           /*********************************************************************
   2175           * @fn          ZDO_UpdateDeviceIndication
   2176           *
   2177           * @brief       This function notifies the "Trust Center" of a
   2178           *              network when a device joins or leaves the network.
   2179           *
   2180           * @param       extAddr - pointer to 64 bit address of new device
   2181           * @param       status  - 0 if a new device joined securely
   2182           *                      - 1 if a new device joined un-securely
   2183           *                      - 2 if a device left the network
   2184           *
   2185           * @return      true if newly joined device should be allowed to
   2186           *                                              remain on network
   2187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2188          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2189          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2190            // can implement a network access policy based on the
   2191            // IEEE address of newly joining devices...
   2192            (void)extAddr;
   2193            (void)status;
   2194            
   2195            return ZSuccess;
   \   000000   02....       LJMP    ?Subroutine19 & 0xFFFF
   2196          }
   2197          
   2198          /*********************************************************************
   2199           * @fn          ZDApp_InMsgCB
   2200           *
   2201           * @brief       This function is called to pass up any message that is
   2202           *              not yet supported.  This allows for the developer to
   2203           *              support features themselves..
   2204           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2205          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2206          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
   2207            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \                     ??CrossCallReturnLabel_48:
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   7480         MOV     A,#-0x80
   \   00000E   59           ANL     A,R1
   \   00000F   FB           MOV     R3,A
   \   000010   E4           CLR     A
   \   000011   7001         JNZ     ??ZDApp_InMsgCB_0
   \   000013   EB           MOV     A,R3
   \                     ??ZDApp_InMsgCB_0:
   \   000014   7049         JNZ     ??ZDApp_InMsgCB_1
   2208            {
   2209              // Handle the response message
   2210            }
   2211            else
   2212            {
   2213              // Handle the request message by sending a generic "not supported".
   2214              // Device Announce doesn't have a response.
   2215              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000016   EE           MOV     A,R6
   \   000017   240B         ADD     A,#0xb
   \   000019   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00001C   7041         JNZ     ??ZDApp_InMsgCB_1
   \   00001E   7413         MOV     A,#0x13
   \   000020   68           XRL     A,R0
   \   000021   7001         JNZ     ??ZDApp_InMsgCB_2
   \   000023   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_2:
   \   000024   6039         JZ      ??ZDApp_InMsgCB_1
   2216              {
   2217                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2218                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   E8           MOV     A,R0
   \   000027   F5..         MOV     ?V0 + 0,A
   \   000029   7480         MOV     A,#-0x80
   \   00002B   49           ORL     A,R1
   \   00002C   F5..         MOV     ?V0 + 1,A
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   75..00       MOV     ?V0 + 0,#0x0
   \   000036   75..00       MOV     ?V0 + 1,#0x0
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV     A,R6
   \   00003F   240E         ADD     A,#0xe
   \   000041   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   2219              }
   2220            }
   \                     ??CrossCallReturnLabel_52:
   \   000044   FD           MOV     R5,A
   \   000045   7C84         MOV     R4,#-0x7c
   \   000047   EE           MOV     A,R6
   \   000048   2402         ADD     A,#0x2
   \   00004A   0A           INC     R2
   \   00004B   0A           INC     R2
   \   00004C   EF           MOV     A,R7
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   FB           MOV     R3,A
   \   000050   EE           MOV     A,R6
   \   000051   240F         ADD     A,#0xf
   \   000053   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   ??ZDP_GenericRsp?relay
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   2221          }
   \                     ??ZDApp_InMsgCB_1:
   \   00005F   02....       LJMP    ??Subroutine33_0 & 0xFFFF
   2222          
   2223          
   2224          /*********************************************************************
   2225           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2226           *
   2227           * @brief   Changes the Match Descriptor Response permission.
   2228           *
   2229           * @param   endpoint - endpoint to allow responses
   2230           * @param   action - true to allow responses, false to not
   2231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2232          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2233          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2234            // Store the action
   2235            afSetMatch( endpoint, action );
   \   000004                ; Setup parameters for call to function afSetMatch
   \   000004   12....       LCALL   ??afSetMatch?relay
   2236          }
   \   000007   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2237          
   2238          /*********************************************************************
   2239           * @fn      ZDApp_NetworkInit()
   2240           *
   2241           * @brief   Used to start the network joining process
   2242           *
   2243           * @param   delay - mSec delay to wait before starting
   2244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2245          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2246          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2247            if ( delay )
   \   000004   EA           MOV     A,R2
   \   000005   7001         JNZ     ??ZDApp_NetworkInit_0
   \   000007   EB           MOV     A,R3
   \                     ??ZDApp_NetworkInit_0:
   \   000008   600B         JZ      ??ZDApp_NetworkInit_1
   2248            {
   2249              // Wait awhile before starting the device
   2250              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   12....       LCALL   ?Subroutine6 & 0xFFFF
   2251            }
   \                     ??CrossCallReturnLabel_42:
   \   000013   8005         SJMP    ??CrossCallReturnLabel_28
   2252            else
   2253            {
   2254              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_1:
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A01         MOV     R2,#0x1
   \   000017   12....       LCALL   ?Subroutine21 & 0xFFFF
   2255            }
   2256          }
   \                     ??CrossCallReturnLabel_28:
   \   00001A   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2257          
   2258          /*********************************************************************
   2259           * @fn      ZDApp_NwkStateUpdateCB()
   2260           *
   2261           * @brief   This function notifies that this device's network 
   2262           *          state info has been changed.
   2263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2264          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2265          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2266            // Notify to save info into NV
   2267            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   2268            {
   2269              // Trigger to save info into NV
   2270              ZDApp_NVUpdate();
   2271            }
   2272          }
   \   000010   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2273          
   2274          /*********************************************************************
   2275           * @fn      ZDApp_NodeProfileSync()
   2276           *
   2277           * @brief   Sync node with stack profile.
   2278           *
   2279           * @param   cfm - ZDO_NetworkDiscoveryCfm_t
   2280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2281          void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
   \                     ZDApp_NodeProfileSync:
   2282          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2283            networkDesc_t* desc;
   2284            uint16         panID;
   2285          
   2286            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000005   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   5058         JNC     ??ZDApp_NodeProfileSync_0
   2287            {
   2288              panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
   2289          
   2290              desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
   \   00000D                ; Setup parameters for call to function nwk_getNetworkDesc
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FE           MOV     R6,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FD           MOV     R5,A
   \   000028   EE           MOV     A,R6
   \   000029   FC           MOV     R4,A
   \   00002A   EA           MOV     A,R2
   \   00002B   2406         ADD     A,#0x6
   \   00002D   FA           MOV     R2,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??nwk_getNetworkDesc?relay
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   2291          
   2292              if (desc != NULL)
   \   000039   E582         MOV     A,DPL
   \   00003B   7002         JNZ     ??ZDApp_NodeProfileSync_1
   \   00003D   E583         MOV     A,DPH
   \                     ??ZDApp_NodeProfileSync_1:
   \   00003F   6024         JZ      ??ZDApp_NodeProfileSync_0
   2293              {
   2294                if ( desc->stackProfile != zgStackProfile )
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   90....       MOV     DPTR,#zgStackProfile
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6A           XRL     A,R2
   \   000050   6013         JZ      ??ZDApp_NodeProfileSync_0
   2295                {
   2296                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000052   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000055   E0           MOVX    A,@DPTR
   \   000056   54F8         ANL     A,#0xf8
   \   000058   4402         ORL     A,#0x2
   \   00005A   F0           MOVX    @DPTR,A
   2297                  ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00005B   740C         MOV     A,#0xc
   \   00005D   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000060   F0           MOVX    @DPTR,A
   2298                  NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000061                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   2299                }
   2300              }
   2301            }
   2302          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000065   80..         SJMP    ??Subroutine33_0
   2303          
   2304          /*********************************************************************
   2305           * @fn      ZDApp_StartJoiningCycle()
   2306           *
   2307           * @brief   Starts the joining cycle of a device.  This will only 
   2308           *          continue an already started (or stopped) joining cycle.
   2309           *
   2310           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2312          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2313          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2314            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   2315            {
   2316              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   7401         MOV     A,#0x1
   \   000013   90....       MOV     DPTR,#continueJoining
   \   000016   F0           MOVX    @DPTR,A
   2317              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   2318          
   2319              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   2320            }
   2321            else
   2322              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2323          }
   2324          
   2325          /*********************************************************************
   2326           * @fn      ZDApp_StopJoiningCycle()
   2327           *
   2328           * @brief   Stops the joining or rejoining process of a device.
   2329           *
   2330           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2331           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2332          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2333          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2334            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   2335            {
   2336              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   E4           CLR     A
   \   000012   90....       MOV     DPTR,#continueJoining
   \   000015   F0           MOVX    @DPTR,A
   2337              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   2338            }
   2339            else
   2340              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2341          }
   2342          
   2343          /*********************************************************************
   2344           * @fn      ZDApp_AnnounceNewAddress()
   2345           *
   2346           * @brief   Send Device Announce and hold all transmissions for 
   2347           *          new address timeout.
   2348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2349          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2350          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2351          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2352            // Turn off data request hold
   2353            APSME_HoldDataRequests( 0 );
   2354          #endif
   2355            
   2356            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2357                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000005                ; Setup parameters for call to function NLME_GetExtAddr
   \   000005   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000008   8A..         MOV     ?V0 + 0,R2
   \   00000A   8B..         MOV     ?V0 + 1,R3
   \   00000C   AE..         MOV     R6,?V0 + 0
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000011                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000011   75..00       MOV     ?V0 + 0,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000019   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   EE           MOV     A,R6
   \   00001F   FC           MOV     R4,A
   \   000020   AD..         MOV     R5,?V0 + 1
   \   000022   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   000025   7401         MOV     A,#0x1
   \   000027   80..         SJMP    ??Subroutine32_0
   2358            
   2359          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2360            // Setup the timeout
   2361            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   2362          #endif  
   2363          }
   2364          
   2365          /*********************************************************************
   2366           * @fn          ZDApp_NVUpdate
   2367           *
   2368           * @brief       Set the NV Update Timer.
   2369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2370          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2371          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2372          #if defined ( NV_RESTORE )
   2373            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2374          #endif
   2375          }
   \   000000   02....       LJMP    ?BRET
   2376          
   2377          /*********************************************************************
   2378           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2379           *
   2380           * @brief   Returns a PAN ID for the network layer to use during
   2381           *          a coordinator start and there is another network with 
   2382           *          the intended PANID.
   2383           *
   2384           * @param   panid - the intended PAN ID
   2385           *
   2386           * @return  PANID to try
   2387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2388          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2389          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2390            return ( panid + 1 );
   \   000000   7401         MOV     A,#0x1
   \   000002   2A           ADD     A,R2
   \   000003   0A           INC     R2
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?BRET
   2391          }
   2392          
   2393          /*********************************************************************
   2394           * @fn          ZDO_SrcRtgIndCB
   2395           *
   2396           * @brief       This function notifies the ZDO available src route record received.
   2397           *
   2398           * @param       srcAddr - source address of the source route
   2399           * @param       relayCnt - number of devices in the relay list
   2400           * @param       relayList - relay list of the source route
   2401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2402          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2403          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2404            zdoSrcRtg_t srcRtg;
   2405            
   2406            srcRtg.srcAddr = srcAddr;
   \   000009   12....       LCALL   ?Subroutine3 & 0xFFFF
   2407            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_59:
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E9           MOV     A,R1
   \   000012   F0           MOVX    @DPTR,A
   2408            srcRtg.pRelayList = pRelayList;
   \   000013   7403         MOV     A,#0x3
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   EC           MOV     A,R4
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   ED           MOV     A,R5
   \   00001C   F0           MOVX    @DPTR,A
   2409            
   2410            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001D   90....       MOV     DPTR,#zdoCBFunc
   \   000020   E0           MOVX    A,@DPTR
   \   000021   7002         JNZ     ??ZDO_SrcRtgIndCB_0
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000025   6013         JZ      ??ZDO_SrcRtgIndCB_1
   2411            {
   2412              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000027                ; Setup parameters for indirect call
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   90....       MOV     DPTR,#zdoCBFunc
   \   000034   12....       LCALL   ?Subroutine10 & 0xFFFF
   2413            }
   \                     ??CrossCallReturnLabel_12:
   \   000037   12....       LCALL   ?CALL_IND
   2414          }
   \                     ??ZDO_SrcRtgIndCB_1:
   \   00003A   7405         MOV     A,#0x5
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2415          
   2416          
   2417          /*********************************************************************
   2418           * @fn          ZDO_RegisterForZdoCB
   2419           *
   2420           * @brief       Call this function to register the higher layer (for 
   2421           *              example, the Application layer or MT layer) with ZDO 
   2422           *              callbacks to get notified of some ZDO indication like
   2423           *              existence of a concentrator or receipt of a source 
   2424           *              route record.
   2425           *
   2426           * @param       indID - ZDO Indication ID
   2427           * @param       pFn   - Callback function pointer
   2428           *
   2429           * @return      ZSuccess - successful, ZInvalidParameter if not
   2430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2431          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   2432          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2433            // Check the range of the indication ID
   2434            if ( indID < MAX_ZDO_CB_FUNC )
   \   000004   E9           MOV     A,R1
   \   000005   700A         JNZ     ??ZDO_RegisterForZdoCB_0
   2435            {
   2436              zdoCBFunc[indID] = pFn;
   \   000007   90....       MOV     DPTR,#zdoCBFunc
   \   00000A   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   2437              return ZSuccess;
   \                     ??CrossCallReturnLabel_57:
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   2438            }
   2439            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000011   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000013   02....       LJMP    ??Subroutine29_0 & 0xFFFF
   2440          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....0000     DW ZDAppTaskID, 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB
   2441          
   2442          /*********************************************************************
   2443          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AddrMgrWriteNVRequest              0      0      0
     ZDAppCheckForHoldKey               2      0      0
       -> HalKeyRead                    4      0      0
     ZDAppDetermineDeviceType           2      0     12
       -> nwk_ExtPANIDValid             4      0      0
     ZDApp_AnnounceNewAddress           0      0     23
       -> NLME_GetExtAddr               0      0     20
       -> NLME_GetShortAddr             0      0     20
       -> ZDP_DeviceAnnce               0      0     22
     ZDApp_ChangeMatchDescRespPermission
                                        2      0      0
       -> afSetMatch                    4      0      0
     ZDApp_CoordStartPANIDConflictCB
                                        0      0      0
     ZDApp_DeviceAuthEvt                2      0      9
       -> ZDApp_ResetTimerCancel        4      0      0
       -> osal_set_event                4      0      0
       -> NLME_StartRouterRequest       4      0      0
       -> ZDApp_SaveNwkKey              4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
       -> NLME_SetPollRate              4      0      0
     ZDApp_InMsgCB                      0      0     14
       -> ZDP_GenericRsp                0      0     28
     ZDApp_Init                         2      0      0
       -> NLME_GetExtAddr               4      0      0
       -> ZDAppCheckForHoldKey          4      0      0
       -> ZDO_Init                      4      0      0
       -> afRegister                    4      0      0
       -> ZDApp_InitUserDesc            4      0      0
       -> ZDOInitDevice                 4      0      0
       -> HalLedBlink                   4      0      0
       -> ZDApp_RegisterCBs             4      0      0
     ZDApp_InitUserDesc                 0      0     31
       -> osal_memset                   0      0     54
       -> osal_nv_item_init             0      0     58
       -> osal_nv_read                  0      0     62
     ZDApp_LeaveCtrlBypass              2      0      0
     ZDApp_LeaveCtrlInit                0      0     26
       -> osal_nv_item_init             0      0     24
       -> osal_nv_read                  0      0     28
     ZDApp_LeaveCtrlSet                 0      0     14
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveCtrlStartup             1      0     26
       -> osal_nv_write                 0      0     28
     ZDApp_LeaveReset                   2      0     16
       -> ZDApp_LeaveCtrlSet            4      0      0
       -> ZDApp_ResetTimerStart         4      0      0
     ZDApp_LeaveUpdate                  2      0      0
       -> NLME_RemoveChild              4      0      0
     ZDApp_NVUpdate                     0      0      0
     ZDApp_NetworkInit                  2      0     16
       -> osal_start_timerEx            4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NetworkStartEvt              2      0     10
       -> osal_pwrmgr_device            4      0      0
       -> osal_set_event                4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_GetEnergyThreshold       4      0      0
       -> NLME_SetEnergyThreshold       4      0      0
       -> osal_set_event                4      0      0
       -> osal_set_event                4      0      0
     ZDApp_NodeProfileSync              0      0     26
       -> nwk_getNetworkDesc            0      0     20
       -> NLME_SetBroadcastFilter       0      0     20
     ZDApp_NwkStateUpdateCB             2      0      0
       -> osal_get_timeoutEx            4      0      0
     ZDApp_ProcessMsgCBs                0      0     47
       -> ZDO_ParseAddrRsp              0      0     62
       -> ZDO_UpdateAddrManager         0      0     62
       -> osal_mem_free                 0      0     62
       -> ZDO_ParseBindUnbindReq        0      0     62
       -> ZDO_ProcessBindUnbindReq      0      0     62
     ZDApp_ProcessNetworkJoin           0      0     28
       -> osal_set_event                0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> ZMacSetReq                    0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> osal_set_event                0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
       -> NLME_StartRouterRequest       0      0     24
       -> ZDApp_AnnounceNewAddress      0      0     24
       -> nwkNeighborInitTable          0      0     24
       -> NLME_NwkDiscTerm              0      0     24
       -> osal_rand                     0      0     24
       -> ZDApp_NetworkInit             0      0     24
     ZDApp_ProcessOSALMsg               1      0     27
       -> ZDP_IncomingData              0      0     32
       -> ZDApp_ProcessMsgCBs           0      0     32
       -> ZDApp_NodeProfileSync         0      0     32
       -> NLME_JoinRequest              0      0     34
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> osal_rand                     0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> ZMacSetReq                    0      0     32
       -> NLME_ReJoinRequest            0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> NLME_SetPollRate              0      0     32
       -> NLME_SetQueuedPollRate        0      0     32
       -> NLME_SetResponseRate          0      0     32
       -> osal_rand                     0      0     32
       -> ZDApp_NetworkInit             0      0     32
       -> ZDApp_ProcessNetworkJoin      0      0     32
       -> sAddrExtCpy                   0      0     32
       -> ZDApp_NetworkInit             0      0     32
     ZDApp_ProcessSecEvent              0      0      9
       -> ZDSecMgrNewDeviceEvent        0      0     18
       -> osal_start_timerEx            0      0     18
       -> ZDApp_DeviceAuthEvt           0      0     18
       -> ZDApp_SaveNwkKey              0      0     18
     ZDApp_ProcessSecMsg                2      0      0
       -> ZDSecMgrTransportKeyInd       4      0      0
       -> ZDSecMgrRemoveDeviceInd       4      0      0
       -> ZDSecMgrSwitchKeyInd          4      0      0
     ZDApp_ReadNetworkRestoreState      0      0      9
       -> zgReadStartupOptions          0      0     18
     ZDApp_RegisterCBs                  2      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
       -> ZDO_RegisterForZDOMsg         4      0      0
     ZDApp_ResetNwkKey                  0      0     35
       -> osal_memset                   0      0     62
       -> osal_nv_write                 0      0     70
     ZDApp_ResetTimerCancel             2      0      0
       -> osal_stop_timerEx             4      0      0
     ZDApp_ResetTimerStart              2      0      0
       -> osal_start_timerEx            4      0      0
     ZDApp_RestoreNetworkState          0      0      9
       -> NLME_InitNV                   0      0     18
       -> NLME_RestoreFromNV            0      0     18
       -> NLME_GetShortAddr             0      0     18
       -> sAddrExtCpy                   0      0     18
     ZDApp_RestoreNwkKey                0      0     37
       -> osal_nv_read                  0      0     74
     ZDApp_SaveNetworkStateEvt          0      0      0
     ZDApp_SaveNwkKey                   0      0     46
       -> SSP_ReadNwkActiveKey          0      0     66
       -> osal_nv_write                 0      0     74
     ZDApp_SecInit                      2      0      0
       -> ZDSecMgrInit                  4      0      0
     ZDApp_SendEventMsg                 2      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDApp_SendMsg                      1      0     55
       -> osal_msg_allocate             0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_msg_send                 0      0     40
     ZDApp_StartJoiningCycle            2      0      0
       -> ZDApp_NetworkInit             4      0      0
     ZDApp_StopJoiningCycle             2      0      0
     ZDApp_event_loop                   0      0     10
       -> ZDO_StartDevice               0      0     20
       -> ZDApp_ProcessOSALMsg          0      0     20
       -> osal_msg_deallocate           0      0     20
       -> osal_msg_receive              0      0     20
       -> ZDApp_NetworkStartEvt         0      0     20
       -> osal_pwrmgr_device            0      0     20
       -> osal_set_event                0      0     20
       -> ZDO_UpdateNwkStatus           0      0     20
       -> osal_start_timerEx            0      0     20
     ZDOInitDevice                      0      0     12
       -> zgInitItems                   0      0     24
       -> ZDConfig_InitDescriptors      0      0     24
       -> ZDApp_LeaveCtrlInit           0      0     24
       -> ZDApp_LeaveCtrlStartup        0      0     24
       -> zgWriteStartupOptions         0      0     24
       -> osal_set_event                0      0     24
       -> ZDAppDetermineDeviceType      0      0     24
       -> osal_rand                     0      0     24
       -> ZDSecMgrInit                  0      0     24
       -> ZDApp_NetworkInit             0      0     24
       -> NLME_SetBroadcastFilter       0      0     24
     ZDO_AddrChangeIndicationCB         2      0      0
       -> osal_set_event                4      0      0
       -> ZDApp_AnnounceNewAddress      4      0      0
     ZDO_ConcentratorIndicationCB       0      0      0
     ZDO_JoinConfirmCB                  2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_JoinIndicationCB               0      0      1
     ZDO_LeaveCnf                       0      0     10
       -> NLME_GetExtAddr               0      0     20
       -> sAddrExtCmp                   0      0     20
       -> ZDApp_LeaveReset              0      0     20
       -> NLME_RemoveChild              0      0     20
     ZDO_LeaveInd                       1      0     16
       -> NLME_LeaveRsp                 0      0     32
       -> ZDApp_LeaveReset              0      0     32
       -> NLME_GetCoordShortAddr        0      0     32
       -> ZDApp_LeaveReset              0      0     32
       -> NLME_RemoveChild              0      0     32
     ZDO_ManytoOneFailureIndicationCB
                                        2      0      0
       -> RTG_MTORouteReq               4      0      0
     ZDO_NetworkDiscoveryConfirmCB      1      0     32
       -> nwk_ExtPANIDValid             0      0     64
       -> sAddrExtCmp                   0      0     64
       -> sAddrExtCpy                   0      0     64
       -> ZDApp_SendMsg                 0      0     64
     ZDO_NetworkFormationConfirmCB      2      0      0
       -> HalLedBlink                   4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_PollConfirmCB                  0      0      0
     ZDO_RegisterForZdoCB               2      0      0
     ZDO_SrcRtgIndCB                    3      0      5
     ZDO_StartRouterConfirmCB           2      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> HalLedSet                     4      0      0
       -> osal_set_event                4      0      0
     ZDO_SyncIndicationCB               2      0      0
       -> nwkNeighborInitTable          4      0      0
       -> ZDApp_SendMsg                 4      0      0
     ZDO_UpdateDeviceIndication         0      0      0


   Segment part sizes:

     Function/Label                              Bytes
     --------------                              -----
     _A_IEN0                                        1
     WDCTL                                          1
     MatchRsps                                      1
     zdoDiscCounter                                 1
     ZDAppNwkAddr                                   9
     zdappMgmtNwkDiscRspTransSeq                    1
     zdappMgmtNwkDiscReqInProgress                  1
     zdappMgmtNwkDiscRspAddr                        9
     zdappMgmtNwkDiscStartIndex                     1
     zdappMgmtSavedNwkState                         1
     nwkFrameCounterChanges                         2
     continueJoining                                1
     _tmpRejoinState                                1
     ZDO_UseExtendedPANID                           8
     zdoCBFunc                                      2
     ZDAppTaskID                                    1
     nwkStatus                                      1
     ZDApp_AutoFindMode_epDesc                      2
     ZDApp_LeaveCtrl                                1
     devState                                       1
     devStartMode                                   1
     retryCnt                                       1
     ZDApp_epDesc                                   6
     ZDApp_SavedPollRate                            2
     ZDApp_Init                                    78
     ??Subroutine29_0                               7
     ZDApp_SecInit                                 10
     ZDApp_event_loop                             224
     ?Subroutine4                                   2
     ?Subroutine21                                 11
     ??Subroutine28_0                               6
     ??Subroutine33_0                               5
     ZDApp_ProcessSecEvent                        106
     ?Subroutine22                                  5
     ?Subroutine6                                   5
     ??Subroutine34_0                               6
     ZDOInitDevice                                141
     ?Subroutine20                                  2
     ??Subroutine32_0                               3
     ?Subroutine3                                   6
     ZDApp_ReadNetworkRestoreState                 21
     ZDAppDetermineDeviceType                      74
     ZDApp_NetworkStartEvt                         78
     ?Subroutine18                                  3
     ZDApp_DeviceAuthEvt                           60
     ?Subroutine5                                   9
     ?Subroutine0                                  11
     ZDApp_SaveNetworkStateEvt                      3
     ZDApp_RestoreNetworkState                     67
     ?Subroutine1                                  13
     ZDApp_InitUserDesc                            93
     ?Subroutine15                                 32
     ZDAppCheckForHoldKey                          20
     ZDApp_ProcessOSALMsg                         472
     ?Subroutine14                                 22
     ?Subroutine11                                 20
     ?Subroutine13                                 11
     ?Subroutine10                                  9
     ZDApp_ProcessMsgCBs                          122
     ?Subroutine25                                  5
     ?Subroutine12                                  7
     ??Subroutine31_0                               9
     ZDApp_RegisterCBs                             31
     ?Subroutine7                                   2
     ??Subroutine26_0                               9
     ZDApp_ProcessSecMsg                           75
     ZDApp_ProcessNetworkJoin                     368
     ?Subroutine9                                  12
     ZDApp_SaveNwkKey                              82
     ?Subroutine23                                 10
     ?Subroutine17                                  6
     ??Subroutine27_0                               8
     ZDApp_ResetNwkKey                             38
     ZDApp_RestoreNwkKey                          110
     ZDApp_ResetTimerStart                         16
     ZDApp_ResetTimerCancel                        19
     ZDApp_LeaveCtrlInit                           65
     ?Subroutine2                                  14
     ZDApp_LeaveCtrlSet                            51
     ZDApp_LeaveCtrlBypass                         16
     ZDApp_LeaveCtrlStartup                        75
     ZDApp_LeaveReset                              16
     ZDApp_LeaveUpdate                             13
     ZDApp_SendEventMsg                             8
     ?Subroutine24                                  5
     ?Subroutine8                                   9
     ZDApp_SendMsg                                100
     ZDO_NetworkDiscoveryConfirmCB                383
     ZDO_NetworkFormationConfirmCB                 48
     ??Subroutine30_0                              17
     ZDO_StartRouterConfirmCB                      33
     ?Subroutine16                                  2
     ZDO_JoinConfirmCB                             39
     ZDO_AddrChangeIndicationCB                    13
     ZDO_JoinIndicationCB                           0
     ?Subroutine19                                  5
     ZDO_ConcentratorIndicationCB                   3
     ZDO_LeaveCnf                                  76
     ZDO_LeaveInd                                 154
     ZDO_SyncIndicationCB                          34
     ZDO_ManytoOneFailureIndicationCB
                                                   10
     ZDO_PollConfirmCB                              3
     AddrMgrWriteNVRequest                          3
     ZDO_UpdateDeviceIndication                     3
     ZDApp_InMsgCB                                 98
     ZDApp_ChangeMatchDescRespPermission
                                                   10
     ZDApp_NetworkInit                             29
     ZDApp_NwkStateUpdateCB                        19
     ZDApp_NodeProfileSync                        103
     ZDApp_StartJoiningCycle                       39
     ZDApp_StopJoiningCycle                        31
     ZDApp_AnnounceNewAddress                      41
     ZDApp_NVUpdate                                 3
     ZDApp_CoordStartPANIDConflictCB
                                                   10
     ZDO_SrcRtgIndCB                               66
     ZDO_RegisterForZdoCB                          22
     ?<Initializer for zdoDiscCounter>              1
     ?<Initializer for continueJoining>             1
     ?<Initializer for devState>                    1
     ?<Initializer for ZDApp_epDesc>                6
     ?<Initializer for ZDApp_SavedPollRate>         2
     __Constant_1                                   4
     __Constant_0                                   4
     __Constant_3e8                                 4
     ??ZDApp_Init?relay                             6
     ??ZDApp_SecInit?relay                          6
     ??ZDApp_event_loop?relay                       6
     ??ZDApp_ProcessSecEvent?relay                  6
     ??ZDOInitDevice?relay                          6
     ??ZDApp_ReadNetworkRestoreState?relay          6
     ??ZDAppDetermineDeviceType?relay               6
     ??ZDApp_NetworkStartEvt?relay                  6
     ??ZDApp_DeviceAuthEvt?relay                    6
     ??ZDApp_SaveNetworkStateEvt?relay              6
     ??ZDApp_RestoreNetworkState?relay              6
     ??ZDApp_InitUserDesc?relay                     6
     ??ZDAppCheckForHoldKey?relay                   6
     ??ZDApp_ProcessOSALMsg?relay                   6
     ??ZDApp_ProcessMsgCBs?relay                    6
     ??ZDApp_RegisterCBs?relay                      6
     ??ZDApp_ProcessSecMsg?relay                    6
     ??ZDApp_ProcessNetworkJoin?relay               6
     ??ZDApp_SaveNwkKey?relay                       6
     ??ZDApp_ResetNwkKey?relay                      6
     ??ZDApp_RestoreNwkKey?relay                    6
     ??ZDApp_ResetTimerStart?relay                  6
     ??ZDApp_ResetTimerCancel?relay                 6
     ??ZDApp_LeaveCtrlInit?relay                    6
     ??ZDApp_LeaveCtrlSet?relay                     6
     ??ZDApp_LeaveCtrlBypass?relay                  6
     ??ZDApp_LeaveCtrlStartup?relay                 6
     ??ZDApp_LeaveReset?relay                       6
     ??ZDApp_LeaveUpdate?relay                      6
     ??ZDApp_SendEventMsg?relay                     6
     ??ZDApp_SendMsg?relay                          6
     ??ZDO_NetworkDiscoveryConfirmCB?relay          6
     ??ZDO_NetworkFormationConfirmCB?relay          6
     ??ZDO_StartRouterConfirmCB?relay               6
     ??ZDO_JoinConfirmCB?relay                      6
     ??ZDO_AddrChangeIndicationCB?relay             6
     ??ZDO_JoinIndicationCB?relay                   6
     ??ZDO_ConcentratorIndicationCB?relay           6
     ??ZDO_LeaveCnf?relay                           6
     ??ZDO_LeaveInd?relay                           6
     ??ZDO_SyncIndicationCB?relay                   6
     ??ZDO_ManytoOneFailureIndicationCB?relay       6
     ??ZDO_PollConfirmCB?relay                      6
     ??AddrMgrWriteNVRequest?relay                  6
     ??ZDO_UpdateDeviceIndication?relay             6
     ??ZDApp_InMsgCB?relay                          6
     ??ZDApp_ChangeMatchDescRespPermission?relay    6
     ??ZDApp_NetworkInit?relay                      6
     ??ZDApp_NwkStateUpdateCB?relay                 6
     ??ZDApp_NodeProfileSync?relay                  6
     ??ZDApp_StartJoiningCycle?relay                6
     ??ZDApp_StopJoiningCycle?relay                 6
     ??ZDApp_AnnounceNewAddress?relay               6
     ??ZDApp_NVUpdate?relay                         6
     ??ZDApp_CoordStartPANIDConflictCB?relay        6
     ??ZDO_SrcRtgIndCB?relay                        6
     ??ZDO_RegisterForZdoCB?relay                   6

 
 4 233 bytes in segment BANKED_CODE
   342 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
    12 bytes in segment XDATA_ROM_C
    43 bytes in segment XDATA_Z
 
 4 586 bytes of CODE  memory
     0 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  2 bytes shared)
    54 bytes of XDATA memory

Errors: none
Warnings: none
