///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               01/Sep/2010  08:02:13 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC2 /
//                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Compone /
//                          nts\stack\zdo\ZDApp.c                             /
//    Command line       =  -f "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack /
//                          -CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Pro /
//                          jects\zstack\Utilities\Losition                   /
//                          Position\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnde /
//                          v.cfg" (-DCPU32MHZ -DROOT=__near_func             /
//                          -DBLINK_LEDS) -f "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-S /
//                          tack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2 /
//                          .3.0-1.4.0\Projects\zstack\Utilities\Losition     /
//                          Position\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf /
//                          ig.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0         /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò² /
//                          Õ_Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2 /
//                          530-2.3.0-1.4.0\Components\stack\zdo\ZDApp.c -D   /
//                          EndDeviceKB -D NWK_AUTO_POLL -D ZTOOL_P1 -D       /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC /
//                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Utilities\Losition                      /
//                          Position\CC2530DB\EndDeviceKB\List\" -lA          /
//                          "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC /
//                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Utilities\Losition                      /
//                          Position\CC2530DB\EndDeviceKB\List\"              /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC /
//                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Utilities\Losition                      /
//                          Position\CC2530DB\EndDeviceKB\Obj\" -e            /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC /
//                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Utilities\Losition Position\CC2530DB\"  /
//                          -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack /
//                          -CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Pro /
//                          jects\zstack\Utilities\Losition                   /
//                          Position\CC2530DB\..\SOURCE\" -I                  /
//                          "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC /
//                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Utilities\Losition                      /
//                          Position\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I    /
//                          "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC /
//                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projec /
//                          ts\zstack\Utilities\Losition                      /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"  /
//                          -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack /
//                          -CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Pro /
//                          jects\zstack\Utilities\Losition                   /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\I /
//                          NCLUDE\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_ /
//                          Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Utilities\Losition          /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\T /
//                          ARGET\CC2530EB\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_ /
//                          Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC253 /
//                          0-2.3.0-1.4.0\Projects\zstack\Utilities\Losition  /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ /
//                          MCU\CCSOC\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Sta /
//                          ck_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Utilities\Losition       /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\ /
//                          INCLUDE\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack /
//                          _Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Utilities\Losition         /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \AF\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ /
//                          ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Utilities\Losition             /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \NWK\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex /
//                          \ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Utilities\Losition            /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \SEC\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex /
//                          \ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Utilities\Losition            /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \SAPI\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_E /
//                          x\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1 /
//                          .4.0\Projects\zstack\Utilities\Losition           /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \SYS\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex /
//                          \ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Utilities\Losition            /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK /
//                          \ZDO\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex /
//                          \ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Utilities\Losition            /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ /
//                          F8W\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ /
//                          ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Utilities\Losition             /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ /
//                          " -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Utilities\Losition                 /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\SERVI /
//                          CES\SADDR\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Sta /
//                          ck_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Utilities\Losition       /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\SERVI /
//                          CES\SDATA\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Sta /
//                          ck_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Utilities\Losition       /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\I /
//                          NCLUDE\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_ /
//                          Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Utilities\Losition          /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\H /
//                          IGH_LEVEL\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Sta /
//                          ck_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Utilities\Losition       /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\L /
//                          OW_LEVEL\srf04\" -I "D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_ /
//                          Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC253 /
//                          0-2.3.0-1.4.0\Projects\zstack\Utilities\Losition  /
//                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\L /
//                          OW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR           /
//                          Systems\Embedded Workbench MCS 51\8051\INC\" -I   /
//                          "C:\IAR Systems\Embedded Workbench MCS            /
//                          51\8051\INC\CLIB\" -Ohz                           /
//    List file          =  D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC2 /
//                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Project /
//                          s\zstack\Utilities\Losition                       /
//                          Position\CC2530DB\EndDeviceKB\List\ZDApp.s51      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??ZDAppCheckForHoldKey?relay
        EXTERN ??ZDAppDetermineDeviceType?relay
        EXTERN ??ZDApp_AnnounceNewAddress?relay
        EXTERN ??ZDApp_DeviceAuthEvt?relay
        EXTERN ??ZDApp_InitUserDesc?relay
        EXTERN ??ZDApp_LeaveCtrlInit?relay
        EXTERN ??ZDApp_LeaveCtrlSet?relay
        EXTERN ??ZDApp_LeaveCtrlStartup?relay
        EXTERN ??ZDApp_LeaveReset?relay
        EXTERN ??ZDApp_NetworkInit?relay
        EXTERN ??ZDApp_NodeProfileSync?relay
        EXTERN ??ZDApp_ProcessMsgCBs?relay
        EXTERN ??ZDApp_ProcessNetworkJoin?relay
        EXTERN ??ZDApp_ProcessOSALMsg?relay
        EXTERN ??ZDApp_RegisterCBs?relay
        EXTERN ??ZDApp_ResetTimerCancel?relay
        EXTERN ??ZDApp_ResetTimerStart?relay
        EXTERN ??ZDApp_SaveNwkKey?relay
        EXTERN ??ZDApp_SendMsg?relay
        EXTERN ??ZDOInitDevice?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AddrMgrWriteNVRequest?relay
        FUNCTION ??AddrMgrWriteNVRequest?relay,0203H
        PUBLIC ??ZDAppCheckForHoldKey?relay
        FUNCTION ??ZDAppCheckForHoldKey?relay,0203H
        PUBLIC ??ZDAppDetermineDeviceType?relay
        FUNCTION ??ZDAppDetermineDeviceType?relay,0203H
        PUBLIC ??ZDApp_AnnounceNewAddress?relay
        FUNCTION ??ZDApp_AnnounceNewAddress?relay,0203H
        PUBLIC ??ZDApp_ChangeMatchDescRespPermission?relay
        FUNCTION ??ZDApp_ChangeMatchDescRespPermission?relay,0203H
        PUBLIC ??ZDApp_CoordStartPANIDConflictCB?relay
        FUNCTION ??ZDApp_CoordStartPANIDConflictCB?relay,0203H
        PUBLIC ??ZDApp_DeviceAuthEvt?relay
        FUNCTION ??ZDApp_DeviceAuthEvt?relay,0203H
        PUBLIC ??ZDApp_InMsgCB?relay
        FUNCTION ??ZDApp_InMsgCB?relay,0203H
        PUBLIC ??ZDApp_Init?relay
        FUNCTION ??ZDApp_Init?relay,0203H
        PUBLIC ??ZDApp_InitUserDesc?relay
        FUNCTION ??ZDApp_InitUserDesc?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlBypass?relay
        FUNCTION ??ZDApp_LeaveCtrlBypass?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlInit?relay
        FUNCTION ??ZDApp_LeaveCtrlInit?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlSet?relay
        FUNCTION ??ZDApp_LeaveCtrlSet?relay,0203H
        PUBLIC ??ZDApp_LeaveCtrlStartup?relay
        FUNCTION ??ZDApp_LeaveCtrlStartup?relay,0203H
        PUBLIC ??ZDApp_LeaveReset?relay
        FUNCTION ??ZDApp_LeaveReset?relay,0203H
        PUBLIC ??ZDApp_LeaveUpdate?relay
        FUNCTION ??ZDApp_LeaveUpdate?relay,0203H
        PUBLIC ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,0203H
        PUBLIC ??ZDApp_NetworkInit?relay
        FUNCTION ??ZDApp_NetworkInit?relay,0203H
        PUBLIC ??ZDApp_NetworkStartEvt?relay
        FUNCTION ??ZDApp_NetworkStartEvt?relay,0203H
        PUBLIC ??ZDApp_NodeProfileSync?relay
        FUNCTION ??ZDApp_NodeProfileSync?relay,0203H
        PUBLIC ??ZDApp_NwkStateUpdateCB?relay
        FUNCTION ??ZDApp_NwkStateUpdateCB?relay,0203H
        PUBLIC ??ZDApp_ProcessMsgCBs?relay
        FUNCTION ??ZDApp_ProcessMsgCBs?relay,0203H
        PUBLIC ??ZDApp_ProcessNetworkJoin?relay
        FUNCTION ??ZDApp_ProcessNetworkJoin?relay,0203H
        PUBLIC ??ZDApp_ProcessOSALMsg?relay
        FUNCTION ??ZDApp_ProcessOSALMsg?relay,0203H
        PUBLIC ??ZDApp_ProcessSecEvent?relay
        FUNCTION ??ZDApp_ProcessSecEvent?relay,0203H
        PUBLIC ??ZDApp_ProcessSecMsg?relay
        FUNCTION ??ZDApp_ProcessSecMsg?relay,0203H
        PUBLIC ??ZDApp_ReadNetworkRestoreState?relay
        FUNCTION ??ZDApp_ReadNetworkRestoreState?relay,0203H
        PUBLIC ??ZDApp_RegisterCBs?relay
        FUNCTION ??ZDApp_RegisterCBs?relay,0203H
        PUBLIC ??ZDApp_ResetNwkKey?relay
        FUNCTION ??ZDApp_ResetNwkKey?relay,0203H
        PUBLIC ??ZDApp_ResetTimerCancel?relay
        FUNCTION ??ZDApp_ResetTimerCancel?relay,0203H
        PUBLIC ??ZDApp_ResetTimerStart?relay
        FUNCTION ??ZDApp_ResetTimerStart?relay,0203H
        PUBLIC ??ZDApp_RestoreNetworkState?relay
        FUNCTION ??ZDApp_RestoreNetworkState?relay,0203H
        PUBLIC ??ZDApp_RestoreNwkKey?relay
        FUNCTION ??ZDApp_RestoreNwkKey?relay,0203H
        PUBLIC ??ZDApp_SaveNetworkStateEvt?relay
        FUNCTION ??ZDApp_SaveNetworkStateEvt?relay,0203H
        PUBLIC ??ZDApp_SaveNwkKey?relay
        FUNCTION ??ZDApp_SaveNwkKey?relay,0203H
        PUBLIC ??ZDApp_SecInit?relay
        FUNCTION ??ZDApp_SecInit?relay,0203H
        PUBLIC ??ZDApp_SendEventMsg?relay
        FUNCTION ??ZDApp_SendEventMsg?relay,0203H
        PUBLIC ??ZDApp_SendMsg?relay
        FUNCTION ??ZDApp_SendMsg?relay,0203H
        PUBLIC ??ZDApp_StartJoiningCycle?relay
        FUNCTION ??ZDApp_StartJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_StopJoiningCycle?relay
        FUNCTION ??ZDApp_StopJoiningCycle?relay,0203H
        PUBLIC ??ZDApp_event_loop?relay
        FUNCTION ??ZDApp_event_loop?relay,0203H
        PUBLIC ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,0203H
        PUBLIC ??ZDO_AddrChangeIndicationCB?relay
        FUNCTION ??ZDO_AddrChangeIndicationCB?relay,0203H
        PUBLIC ??ZDO_ConcentratorIndicationCB?relay
        FUNCTION ??ZDO_ConcentratorIndicationCB?relay,0203H
        PUBLIC ??ZDO_JoinConfirmCB?relay
        FUNCTION ??ZDO_JoinConfirmCB?relay,0203H
        PUBLIC ??ZDO_JoinIndicationCB?relay
        FUNCTION ??ZDO_JoinIndicationCB?relay,0203H
        PUBLIC ??ZDO_LeaveCnf?relay
        FUNCTION ??ZDO_LeaveCnf?relay,0203H
        PUBLIC ??ZDO_LeaveInd?relay
        FUNCTION ??ZDO_LeaveInd?relay,0203H
        PUBLIC ??ZDO_ManytoOneFailureIndicationCB?relay
        FUNCTION ??ZDO_ManytoOneFailureIndicationCB?relay,0203H
        PUBLIC ??ZDO_NetworkDiscoveryConfirmCB?relay
        FUNCTION ??ZDO_NetworkDiscoveryConfirmCB?relay,0203H
        PUBLIC ??ZDO_NetworkFormationConfirmCB?relay
        FUNCTION ??ZDO_NetworkFormationConfirmCB?relay,0203H
        PUBLIC ??ZDO_PollConfirmCB?relay
        FUNCTION ??ZDO_PollConfirmCB?relay,0203H
        PUBLIC ??ZDO_RegisterForZdoCB?relay
        FUNCTION ??ZDO_RegisterForZdoCB?relay,0203H
        PUBLIC ??ZDO_SrcRtgIndCB?relay
        FUNCTION ??ZDO_SrcRtgIndCB?relay,0203H
        PUBLIC ??ZDO_StartRouterConfirmCB?relay
        FUNCTION ??ZDO_StartRouterConfirmCB?relay,0203H
        PUBLIC ??ZDO_SyncIndicationCB?relay
        FUNCTION ??ZDO_SyncIndicationCB?relay,0203H
        PUBLIC ??ZDO_UpdateDeviceIndication?relay
        FUNCTION ??ZDO_UpdateDeviceIndication?relay,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MatchRsps
        PUBWEAK WDCTL
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3e8
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkFrameCounterChanges
        PUBLIC nwkStatus
        PUBLIC retryCnt
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        PUBLIC zdoDiscCounter
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
ZDO_Init            SYMBOL "ZDO_Init"
afRegister          SYMBOL "afRegister"
HalLedBlink         SYMBOL "HalLedBlink"
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
zgInitItems         SYMBOL "zgInitItems"
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
osal_set_event      SYMBOL "osal_set_event"
osal_rand           SYMBOL "osal_rand"
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
NLME_InitNV         SYMBOL "NLME_InitNV"
NLME_RestoreFromNV  SYMBOL "NLME_RestoreFromNV"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
osal_memset         SYMBOL "osal_memset"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
HalKeyRead          SYMBOL "HalKeyRead"
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
ZMacSetReq          SYMBOL "ZMacSetReq"
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
osal_mem_free       SYMBOL "osal_mem_free"
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
osal_nv_write       SYMBOL "osal_nv_write"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_memcpy         SYMBOL "osal_memcpy"
osal_msg_send       SYMBOL "osal_msg_send"
sAddrExtCmp         SYMBOL "sAddrExtCmp"
HalLedSet           SYMBOL "HalLedSet"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
afSetMatch          SYMBOL "afSetMatch"
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
nwk_getNetworkDesc  SYMBOL "nwk_getNetworkDesc"
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetEnergyThreshold?relay SYMBOL "?relay", NLME_GetEnergyThreshold
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_InitNV?relay SYMBOL "?relay", NLME_InitNV
??NLME_JoinRequest?relay SYMBOL "?relay", NLME_JoinRequest
??NLME_NwkDiscTerm?relay SYMBOL "?relay", NLME_NwkDiscTerm
??NLME_ReJoinRequest?relay SYMBOL "?relay", NLME_ReJoinRequest
??NLME_RestoreFromNV?relay SYMBOL "?relay", NLME_RestoreFromNV
??NLME_SetBroadcastFilter?relay SYMBOL "?relay", NLME_SetBroadcastFilter
??NLME_SetEnergyThreshold?relay SYMBOL "?relay", NLME_SetEnergyThreshold
??NLME_SetPollRate?relay SYMBOL "?relay", NLME_SetPollRate
??NLME_SetQueuedPollRate?relay SYMBOL "?relay", NLME_SetQueuedPollRate
??NLME_SetResponseRate?relay SYMBOL "?relay", NLME_SetResponseRate
??RTG_MTORouteReq?relay SYMBOL "?relay", RTG_MTORouteReq
??SSP_ReadNwkActiveKey?relay SYMBOL "?relay", SSP_ReadNwkActiveKey
??ZDConfig_InitDescriptors?relay SYMBOL "?relay", ZDConfig_InitDescriptors
??ZDO_Init?relay    SYMBOL "?relay", ZDO_Init
??ZDO_ParseAddrRsp?relay SYMBOL "?relay", ZDO_ParseAddrRsp
??ZDO_ParseBindUnbindReq?relay SYMBOL "?relay", ZDO_ParseBindUnbindReq
??ZDO_ProcessBindUnbindReq?relay SYMBOL "?relay", ZDO_ProcessBindUnbindReq
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDO_StartDevice?relay SYMBOL "?relay", ZDO_StartDevice
??ZDO_UpdateAddrManager?relay SYMBOL "?relay", ZDO_UpdateAddrManager
??ZDO_UpdateNwkStatus?relay SYMBOL "?relay", ZDO_UpdateNwkStatus
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
??ZDP_GenericRsp?relay SYMBOL "?relay", ZDP_GenericRsp
??ZDP_IncomingData?relay SYMBOL "?relay", ZDP_IncomingData
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
??afRegister?relay  SYMBOL "?relay", afRegister
??afSetMatch?relay  SYMBOL "?relay", afSetMatch
??nwkNeighborInitTable?relay SYMBOL "?relay", nwkNeighborInitTable
??nwk_ExtPANIDValid?relay SYMBOL "?relay", nwk_ExtPANIDValid
??nwk_getNetworkDesc?relay SYMBOL "?relay", nwk_getNetworkDesc
??osal_get_timeoutEx?relay SYMBOL "?relay", osal_get_timeoutEx
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_pwrmgr_device?relay SYMBOL "?relay", osal_pwrmgr_device
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sAddrExtCmp?relay SYMBOL "?relay", sAddrExtCmp
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
??zgInitItems?relay SYMBOL "?relay", zgInitItems
??zgReadStartupOptions?relay SYMBOL "?relay", zgReadStartupOptions
??zgWriteStartupOptions?relay SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
??AddrMgrWriteNVRequest?relay SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
??ZDAppCheckForHoldKey?relay SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
??ZDAppDetermineDeviceType?relay SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
??ZDApp_AnnounceNewAddress?relay SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
??ZDApp_ChangeMatchDescRespPermission?relay SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
??ZDApp_CoordStartPANIDConflictCB?relay SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
??ZDApp_DeviceAuthEvt?relay SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
??ZDApp_InMsgCB?relay SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
??ZDApp_Init?relay  SYMBOL "?relay", ZDApp_Init
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
??ZDApp_InitUserDesc?relay SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
??ZDApp_LeaveCtrlBypass?relay SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
??ZDApp_LeaveCtrlInit?relay SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
??ZDApp_LeaveCtrlSet?relay SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
??ZDApp_LeaveCtrlStartup?relay SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
??ZDApp_LeaveReset?relay SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
??ZDApp_LeaveUpdate?relay SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
??ZDApp_NetworkInit?relay SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
??ZDApp_NetworkStartEvt?relay SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
??ZDApp_NodeProfileSync?relay SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
??ZDApp_NwkStateUpdateCB?relay SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
??ZDApp_ProcessMsgCBs?relay SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
??ZDApp_ProcessNetworkJoin?relay SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
??ZDApp_ProcessOSALMsg?relay SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
??ZDApp_ProcessSecEvent?relay SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
??ZDApp_ProcessSecMsg?relay SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
??ZDApp_ReadNetworkRestoreState?relay SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
??ZDApp_RegisterCBs?relay SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
??ZDApp_ResetNwkKey?relay SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
??ZDApp_ResetTimerCancel?relay SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
??ZDApp_ResetTimerStart?relay SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNetworkState SYMBOL "ZDApp_RestoreNetworkState"
??ZDApp_RestoreNetworkState?relay SYMBOL "?relay", ZDApp_RestoreNetworkState
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
??ZDApp_RestoreNwkKey?relay SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
??ZDApp_SaveNetworkStateEvt?relay SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
??ZDApp_SaveNwkKey?relay SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
??ZDApp_SecInit?relay SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
??ZDApp_SendEventMsg?relay SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
??ZDApp_SendMsg?relay SYMBOL "?relay", ZDApp_SendMsg
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
??ZDApp_StartJoiningCycle?relay SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
??ZDApp_StopJoiningCycle?relay SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
??ZDApp_event_loop?relay SYMBOL "?relay", ZDApp_event_loop
ZDOInitDevice       SYMBOL "ZDOInitDevice"
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
??ZDO_AddrChangeIndicationCB?relay SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
??ZDO_ConcentratorIndicationCB?relay SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
??ZDO_JoinConfirmCB?relay SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
??ZDO_JoinIndicationCB?relay SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
??ZDO_LeaveCnf?relay SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
??ZDO_LeaveInd?relay SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
??ZDO_ManytoOneFailureIndicationCB?relay SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
??ZDO_NetworkDiscoveryConfirmCB?relay SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
??ZDO_NetworkFormationConfirmCB?relay SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
??ZDO_PollConfirmCB?relay SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
??ZDO_RegisterForZdoCB?relay SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
??ZDO_SrcRtgIndCB?relay SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
??ZDO_StartRouterConfirmCB?relay SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
??ZDO_SyncIndicationCB?relay SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
??ZDO_UpdateDeviceIndication?relay SYMBOL "?relay", ZDO_UpdateDeviceIndication

        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNetworkDesc
        FUNCTION nwk_getNetworkDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetEnergyThreshold?relay
        FUNCTION ??NLME_GetEnergyThreshold?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_InitNV?relay
        FUNCTION ??NLME_InitNV?relay,00H
        EXTERN ??NLME_JoinRequest?relay
        FUNCTION ??NLME_JoinRequest?relay,00H
        EXTERN ??NLME_NwkDiscTerm?relay
        FUNCTION ??NLME_NwkDiscTerm?relay,00H
        EXTERN ??NLME_ReJoinRequest?relay
        FUNCTION ??NLME_ReJoinRequest?relay,00H
        EXTERN ??NLME_RestoreFromNV?relay
        FUNCTION ??NLME_RestoreFromNV?relay,00H
        EXTERN ??NLME_SetBroadcastFilter?relay
        FUNCTION ??NLME_SetBroadcastFilter?relay,00H
        EXTERN ??NLME_SetEnergyThreshold?relay
        FUNCTION ??NLME_SetEnergyThreshold?relay,00H
        EXTERN ??NLME_SetPollRate?relay
        FUNCTION ??NLME_SetPollRate?relay,00H
        EXTERN ??NLME_SetQueuedPollRate?relay
        FUNCTION ??NLME_SetQueuedPollRate?relay,00H
        EXTERN ??NLME_SetResponseRate?relay
        FUNCTION ??NLME_SetResponseRate?relay,00H
        EXTERN ??RTG_MTORouteReq?relay
        FUNCTION ??RTG_MTORouteReq?relay,00H
        EXTERN ??SSP_ReadNwkActiveKey?relay
        FUNCTION ??SSP_ReadNwkActiveKey?relay,00H
        EXTERN ??ZDConfig_InitDescriptors?relay
        FUNCTION ??ZDConfig_InitDescriptors?relay,00H
        EXTERN ??ZDO_Init?relay
        FUNCTION ??ZDO_Init?relay,00H
        EXTERN ??ZDO_ParseAddrRsp?relay
        FUNCTION ??ZDO_ParseAddrRsp?relay,00H
        EXTERN ??ZDO_ParseBindUnbindReq?relay
        FUNCTION ??ZDO_ParseBindUnbindReq?relay,00H
        EXTERN ??ZDO_ProcessBindUnbindReq?relay
        FUNCTION ??ZDO_ProcessBindUnbindReq?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDO_StartDevice?relay
        FUNCTION ??ZDO_StartDevice?relay,00H
        EXTERN ??ZDO_UpdateAddrManager?relay
        FUNCTION ??ZDO_UpdateAddrManager?relay,00H
        EXTERN ??ZDO_UpdateNwkStatus?relay
        FUNCTION ??ZDO_UpdateNwkStatus?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_GenericRsp?relay
        FUNCTION ??ZDP_GenericRsp?relay,00H
        EXTERN ??ZDP_IncomingData?relay
        FUNCTION ??ZDP_IncomingData?relay,00H
        EXTERN ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,00H
        EXTERN ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,00H
        EXTERN ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,00H
        EXTERN ??nwkNeighborInitTable?relay
        FUNCTION ??nwkNeighborInitTable?relay,00H
        EXTERN ??nwk_ExtPANIDValid?relay
        FUNCTION ??nwk_ExtPANIDValid?relay,00H
        EXTERN ??nwk_getNetworkDesc?relay
        FUNCTION ??nwk_getNetworkDesc?relay,00H
        EXTERN ??osal_get_timeoutEx?relay
        FUNCTION ??osal_get_timeoutEx?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_pwrmgr_device?relay
        FUNCTION ??osal_pwrmgr_device?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sAddrExtCmp?relay
        FUNCTION ??sAddrExtCmp?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ??zgInitItems?relay
        FUNCTION ??zgInitItems?relay,00H
        EXTERN ??zgReadStartupOptions?relay
        FUNCTION ??zgReadStartupOptions?relay,00H
        EXTERN ??zgWriteStartupOptions?relay
        FUNCTION ??zgWriteStartupOptions?relay,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN NWK_TaskID
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN nwkFrameCounter
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultStartingScanDuration
        EXTERN zgDeviceLogicalType
        EXTERN zgStackProfile

// D:\Z-Stack¾ã²zCode\±Ð¾Ç¼Ò²Õ_Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2010-01-04 12:16:55 -0800 (Mon, 04 Jan 2010) $
//    4   Revision:       $Revision: 21428 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the use can change. This also contains the Task functions.
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   Should you have any questions regarding your right to use this Software,
//   12   contact Texas Instruments Incorporated at www.TI.com. 
//   13 **************************************************************************************************/
//   14 
//   15 /*********************************************************************
//   16  * INCLUDES
//   17  */
//   18 #include "ZComDef.h"
//   19 #include "ZMac.h"
//   20 #include "OSAL.h"
//   21 #include "OSAL_Tasks.h"
//   22 #include "OSAL_PwrMgr.h"
//   23 #include "OSAL_Nv.h"
//   24 #include "AF.h"
//   25 #include "APSMEDE.h"
//   26 #include "NLMEDE.h"
//   27 #include "AddrMgr.h"
//   28 #include "ZDProfile.h"
//   29 #include "ZDObject.h"
//   30 #include "ZDConfig.h"
//   31 #include "ZDSecMgr.h"
//   32 #include "ZDApp.h"
//   33 #include "DebugTrace.h"
//   34 #include "nwk_util.h"
//   35 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1
//   36 #include "ZGlobals.h"
//   37 #include "ZDNwkMgr.h"
//   38 #include "rtg.h"
//   39 
//   40 #include "ssp.h"
//   41 
//   42 /* HAL */
//   43 #include "hal_led.h"
//   44 #include "hal_lcd.h"
//   45 #include "hal_key.h"
//   46 
//   47 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   48   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   49 #endif
//   50 /*********************************************************************
//   51  * MACROS
//   52  */
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 #if !defined( NWK_START_DELAY )
//   58   #define NWK_START_DELAY             100   // in milliseconds
//   59 #endif
//   60 
//   61 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   62   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   63 #endif
//   64 
//   65 #if !defined( BEACON_REQUEST_DELAY )
//   66   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//   67 #endif
//   68 
//   69 #if !defined( BEACON_REQ_DELAY_MASK )
//   70   #define BEACON_REQ_DELAY_MASK       0x007F
//   71 #endif
//   72 
//   73 #define MAX_RESUME_RETRY            3
//   74 
//   75 #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
//   76 
//   77 // Beacon Order Settings (see NLMEDE.h)
//   78 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//   79 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//   80 
//   81 #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
//   82   // The number of times the frame counter can change before
//   83   // saving to NV
//   84   #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
//   85 #endif
//   86 
//   87 // Leave control bits
//   88 #define ZDAPP_LEAVE_CTRL_INIT 0
//   89 #define ZDAPP_LEAVE_CTRL_SET  1
//   90 #define ZDAPP_LEAVE_CTRL_RA   2
//   91 
//   92 // Standard time to update NWK NV data
//   93 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//   94 
//   95 // Address Manager Stub Implementation
//   96 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//   97 
//   98 // Size of the ZDO callback function table zdoCBFunc[]
//   99 #define MAX_ZDO_CB_FUNC 1
//  100 
//  101 
//  102 /*********************************************************************
//  103  * GLOBAL VARIABLES
//  104  */
//  105 
//  106 #if defined( LCD_SUPPORTED )

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  107   uint8 MatchRsps = 0;
MatchRsps:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  108 #endif
//  109 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  110 uint8 zdoDiscCounter = 1;
zdoDiscCounter:
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  111 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  112 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  114 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  115 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  116 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  117 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  118 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  119 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  120 uint16 nwkFrameCounterChanges = 0;
nwkFrameCounterChanges:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  121 uint8 continueJoining = TRUE;
continueJoining:
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  122 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  123 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  124 
//  125 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  126 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  127 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  128 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  129 
//  130 /*********************************************************************
//  131  * EXTERNAL VARIABLES
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * EXTERNAL FUNCTIONS
//  136  */
//  137 
//  138 /*********************************************************************
//  139  * LOCAL FUNCTIONS
//  140  */
//  141 
//  142 void ZDApp_NetworkStartEvt( void );
//  143 void ZDApp_DeviceAuthEvt( void );
//  144 void ZDApp_SaveNetworkStateEvt( void );
//  145 
//  146 uint8 ZDApp_ReadNetworkRestoreState( void );
//  147 uint8 ZDApp_RestoreNetworkState( void );
//  148 void ZDAppDetermineDeviceType( void );
//  149 void ZDApp_InitUserDesc( void );
//  150 void ZDAppCheckForHoldKey( void );
//  151 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  152 void ZDApp_ProcessNetworkJoin( void );
//  153 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  154 void ZDApp_SaveNwkKey( void );
//  155 uint8 ZDApp_RestoreNwkKey( void );
//  156   
//  157 void ZDApp_SecInit( uint8 state );
//  158 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  159 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  160 
//  161 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  162 
//  163 void ZDApp_ResetTimerStart( uint16 delay );
//  164 void ZDApp_ResetTimerCancel( void );
//  165 void ZDApp_LeaveCtrlInit( void );
//  166 void ZDApp_LeaveCtrlSet( uint8 ra );
//  167 uint8 ZDApp_LeaveCtrlBypass( void );
//  168 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  169 void ZDApp_LeaveReset( uint8 ra );
//  170 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  171                         uint8 removeChildren );
//  172 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
//  173 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  174 void ZDApp_RegisterCBs( void );
//  175 
//  176 /*********************************************************************
//  177  * LOCAL VARIABLES
//  178  */
//  179 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  180 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  181 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  182 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  183 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  184 
//  185 #if defined( HOLD_AUTO_START )
//  186   devStates_t devState = DEV_HOLD;
//  187 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  188   devStates_t devState = DEV_INIT;
devState:
        DS 1
        REQUIRE `?<Initializer for devState>`
        REQUIRE __INIT_XDATA_I
//  189 #endif
//  190 
//  191 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  192   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
devStartMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  193   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  194                         // to parent. Set to make the device do an Orphan scan.
//  195 #else
//  196   // Set the default to coodinator
//  197   devStartModes_t devStartMode = MODE_HARD;
//  198 #endif
//  199 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  200 uint8 retryCnt;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  201 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  202 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  203 {
//  204   ZDO_EP,
//  205   &ZDAppTaskID,
//  206   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  207   (afNetworkLatencyReq_t)0            // No Network Latency req
//  208 };
//  209 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  210 uint16 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DS 2
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  211 
//  212 /*********************************************************************
//  213  * @fn      ZDApp_Init
//  214  *
//  215  * @brief   ZDApp Initialization function.
//  216  *
//  217  * @param   task_id - ZDApp Task ID
//  218  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  219 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDApp_Init
//  220 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitUserDesc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  221   // Save the task ID
//  222   ZDAppTaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#ZDAppTaskID
        MOVX    @DPTR,A
//  223 
//  224   // Initialize the ZDO global device short address storage
//  225   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV     A,#0x2
        MOV     DPTR,#(ZDAppNwkAddr + 8)
        MOVX    @DPTR,A
//  226   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  227   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
//  228 
//  229   // Check for manual "Hold Auto Start"
//  230   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        LCALL   ??ZDAppCheckForHoldKey?relay
//  231 
//  232   // Initialize ZDO items and setup the device - type of device to create.
//  233   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL   ??ZDO_Init?relay
//  234 
//  235   // Register the endpoint description with the AF
//  236   // This task doesn't have a Simple description, but we still need
//  237   // to register the endpoint.
//  238   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#(ZDApp_epDesc & 0xff)
        MOV     R3,#((ZDApp_epDesc >> 8) & 0xff)
        LCALL   ??afRegister?relay
//  239 
//  240 #if defined( ZDO_USERDESC_RESPONSE )
//  241   ZDApp_InitUserDesc();
        ; Setup parameters for call to function ZDApp_InitUserDesc
        LCALL   ??ZDApp_InitUserDesc?relay
//  242 #endif // ZDO_USERDESC_RESPONSE
//  243 
//  244   // Start the device?
//  245   if ( devState != DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JZ      ??ZDApp_Init_0
//  246   {
//  247     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
        SJMP    ??ZDApp_Init_1
//  248   }
//  249   else
//  250   {
//  251     // Blink LED to indicate HOLD_START
//  252     HalLedBlink ( HAL_LED_2, 0, 50, 500 );
??ZDApp_Init_0:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  253   }
//  254   
//  255   ZDApp_RegisterCBs();
??ZDApp_Init_1:
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL   ??ZDApp_RegisterCBs?relay
//  256 } /* ZDApp_Init() */
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  257 
//  258 /*********************************************************************
//  259  * @fn          ZDApp_SecInit
//  260  *
//  261  * @brief       ZDApp initialize security.
//  262  *
//  263  * @param       state - device initialization state
//  264  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZDApp_SecInit
//  266 {  
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  267   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  268   {
//  269     // Set the Trust Center bit
//  270     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
//  271   }
//  272 
//  273   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
//  274   {
//  275     ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
//  276   }
//  277     
//  278   // Initialize ZigBee Device Security Manager
//  279   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   ??ZDSecMgrInit?relay
//  280 
//  281   if ( ZG_SECURE_ENABLED )
//  282   {
//  283     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  284     {
//  285       nwkFrameCounter = 0;
//  286   
//  287       if( _NIB.nwkKeyLoaded == FALSE )
//  288       {
//  289         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  290              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  291         {
//  292             SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0);
//  293             SSP_SwitchNwkKey( 0 );
//  294         }
//  295       }
//  296     }
//  297   }    
//  298 }
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  299 
//  300 /*********************************************************************
//  301  * @fn      ZDApp_event_loop()
//  302  *
//  303  * @brief   Main event loop for Zigbee device objects task. This function
//  304  *          should be called at periodic intervals.
//  305  *
//  306  * @param   task_id - Task ID
//  307  * @param   events  - Bitmap of events
//  308  *
//  309  * @return  none
//  310  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  311 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDApp_event_loop
//  312 {
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  313   uint8 *msg_ptr;
//  314 
//  315   if ( events & SYS_EVENT_MSG )
        MOV     A,#-0x80
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_event_loop_0
        MOV     A,R1
??ZDApp_event_loop_0:
        JNZ     ??ZDApp_event_loop_1
//  316   {
//  317     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  318     {
//  319       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  320 
//  321       // Release the memory
//  322       osal_msg_deallocate( msg_ptr );
//  323     }
//  324 
//  325     // Return unprocessed events
//  326     return (events ^ SYS_EVENT_MSG);
//  327   }
//  328 
//  329   if ( events & ZDO_NETWORK_INIT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_event_loop_2
//  330   {
//  331     // Initialize apps and start the network
//  332     devState = DEV_INIT;
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  333     
//  334     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  335                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV     R4,#0xf
        MOV     R3,#0xf
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        LCALL   ??ZDO_StartDevice?relay
//  336 
//  337     // Return unprocessed events
//  338     return (events ^ ZDO_NETWORK_INIT);
        MOV     A,#0x1
??ZDApp_event_loop_3:
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
??ZDApp_event_loop_4:
        MOV     R3,A
        SJMP    ??ZDApp_event_loop_5
//  339   }
??ZDApp_event_loop_6:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL   ??ZDApp_ProcessOSALMsg?relay
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??ZDApp_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        JNZ     ??ZDApp_event_loop_7
        MOV     A,R3
??ZDApp_event_loop_7:
        JNZ     ??ZDApp_event_loop_6
        MOV     A,R6
        MOV     R2,A
        MOV     A,#-0x80
??ZDApp_event_loop_8:
        XRL     A,R7
        SJMP    ??ZDApp_event_loop_4
//  340 
//  341   if ( ZSTACK_ROUTER_BUILD )
//  342   {
//  343     if ( events & ZDO_NETWORK_START )
//  344     {
//  345       ZDApp_NetworkStartEvt();  //The network start event
//  346   
//  347       // Return unprocessed events
//  348       return (events ^ ZDO_NETWORK_START);
//  349     }
//  350 
//  351     if ( events & ZDO_ROUTER_START )
//  352     {
//  353       if ( nwkStatus == ZSuccess )
//  354       {
//  355         if ( devState == DEV_END_DEVICE )
//  356           devState = DEV_ROUTER;
//  357   
//  358         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
//  359       }
//  360       else
//  361       {
//  362         // remain as end device!!
//  363       }
//  364       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  365   
//  366       // Return unprocessed events
//  367       return (events ^ ZDO_ROUTER_START);
//  368     }
//  369   }
//  370   
//  371   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_2:
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_9
//  372   {
//  373     ZDO_UpdateNwkStatus( devState );  // The device state
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_UpdateNwkStatus?relay
//  374     
//  375     // At start up, do one MTO route discovery if the device is a concentrator(¶°¤¤¾¹)
//  376     if ( zgConcentratorEnable == TRUE ) 
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_34
//  377     {
//  378       // Start next event
//  379       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        LCALL   ??Subroutine26_0 & 0xFFFF
//  380     }
//  381     
//  382     // Return unprocessed events
//  383     return (events ^ ZDO_STATE_CHANGE_EVT);
??CrossCallReturnLabel_34:
        MOV     A,#0x10
        SJMP    ??ZDApp_event_loop_3
//  384   }
//  385 
//  386   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_9:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDApp_event_loop_10
//  387   {
//  388     // User defined logic
//  389 
//  390     // Return unprocessed events
//  391     return (events ^ ZDO_COMMAND_CNF);
        MOV     A,#0x8
        XRL     A,R6
        MOV     R2,A
        SJMP    ??ZDApp_event_loop_5
//  392   }
//  393   
//  394   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_10:
        MOV     A,#0x2
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_event_loop_11
        MOV     A,R1
??ZDApp_event_loop_11:
        JZ      ??ZDApp_event_loop_12
//  395   {
//  396     ZDApp_SaveNetworkStateEvt();
//  397 
//  398     // Return unprocessed events
//  399     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV     A,#0x2
        SJMP    ??ZDApp_event_loop_8
//  400   }
//  401 
//  402   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_12:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??ZDApp_event_loop_13
//  403   {
//  404     // The device has been in the UNAUTH state, so reset
//  405     // Note: there will be no return from this call
//  406     SystemReset();
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??ZDApp_event_loop_14:
        SJMP    ??ZDApp_event_loop_14
//  407   }
//  408 
//  409   if ( ZG_SECURE_ENABLED )
//  410   {
//  411     return ( ZDApp_ProcessSecEvent( task_id, events ) );
//  412   }
//  413   else
//  414   {
//  415     // Discard or make more handlers
//  416     return 0;
??ZDApp_event_loop_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  417   }
??ZDApp_event_loop_5:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  418 }
//  419 
//  420 /*********************************************************************
//  421  * @fn      ZDApp_ProcessSecEvent()
//  422  *
//  423  * @brief   Process incoming security events.
//  424  *
//  425  * @param   task_id - Task ID
//  426  * @param   events  - Bitmap of events
//  427  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  428 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZDApp_ProcessSecEvent
//  429 {
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  430   (void)task_id;  // Intentionally unreferenced parameter
//  431   
//  432   if ( ZSTACK_ROUTER_BUILD )
//  433   {
//  434     if ( events & ZDO_NEW_DEVICE )
//  435     {
//  436       // process the new device event
//  437       if ( ZDSecMgrNewDeviceEvent() == TRUE )
//  438       {
//  439         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
//  440       }
//  441 
//  442       // Return unprocessed events
//  443       return (events ^ ZDO_NEW_DEVICE);
//  444     }
//  445   }
//  446 
//  447   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
//  448       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
//  449   {
//  450     if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  451     { 
//  452       if ( events & ZDO_SECMGR_EVENT )
//  453       {
//  454         ZDSecMgrEvent();
//  455 
//  456         // Return unprocessed events
//  457         return (events ^ ZDO_SECMGR_EVENT);
//  458       }
//  459     }
//  460   }
//  461   
//  462   if ( events & ZDO_DEVICE_AUTH )
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??ZDApp_ProcessSecEvent_0
//  463   {
//  464     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL   ??ZDApp_DeviceAuthEvt?relay
//  465 
//  466     // Return unprocessed events
//  467     return (events ^ ZDO_DEVICE_AUTH);
        MOV     A,#-0x80
        XRL     A,R6
        MOV     R2,A
        MOV     A,R7
??ZDApp_ProcessSecEvent_1:
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_2
//  468   }
//  469 
//  470   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_0:
        MOV     A,#0x4
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??ZDApp_ProcessSecEvent_3
        MOV     A,R1
??ZDApp_ProcessSecEvent_3:
        JZ      ??ZDApp_ProcessSecEvent_4
//  471   {
//  472     if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
        MOV     DPTR,#nwkFrameCounterChanges
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#nwkFrameCounterChanges
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_45:
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x17
        MOV     A,R1
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessSecEvent_5
//  473       ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  474 
//  475     // Return unprocessed events
//  476     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
??ZDApp_ProcessSecEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,#0x4
        XRL     A,R7
        SJMP    ??ZDApp_ProcessSecEvent_1
//  477   }
//  478   
//  479   // Discard or make more handlers
//  480   return 0;
??ZDApp_ProcessSecEvent_4:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessSecEvent_2:
        LJMP    ?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock3
//  481 }
//  482 
//  483 /*********************************************************************
//  484  * Application Functions
//  485  */
//  486 
//  487 /*********************************************************************
//  488  * @fn      ZDOInitDevice
//  489  *
//  490  * @brief   Start the device in the network.  This function will read
//  491  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  492  *   restore the network state of the device.
//  493  *
//  494  * @param   startDelay - timeDelay to start device (in milliseconds).
//  495  *      There is a jitter added to this delay:
//  496  *              ((NWK_START_DELAY + startDelay)
//  497  *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  498  *
//  499  * NOTE:    If the application would like to force a "new" join, the
//  500  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  501  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  502  *          this function. "new" join means to not restore the network
//  503  *          state of the device. Use zgWriteStartupOptions() to set these
//  504  *          options.
//  505  *
//  506  * @return   ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  507  *           restored.
//  508  *           ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized. This could 
//  509  *           mean that ZCD_NV_STARTUP_OPTION said to not restore, or it could mean that 
//  510  *           there was no network state to restore.
//  511  *           ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  512  *           with the rejoin option set to TRUE.  So, the device was notstarted in the 
//  513  *           network (one time only).  The next time this function is called it will start.
//  514  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  515 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ZDOInitDevice
//  516 {
        FUNCALL ZDOInitDevice, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine3 & 0xFFFF
//  517   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  518   uint16 extendedDelay = 0;
//  519 
//  520   if ( devState == DEV_HOLD )
??CrossCallReturnLabel_49:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_0
//  521   {    
//  522     // Initialize the RAM items table, in case an NV item has been updated.
//  523     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV     R1,#0x0
        LCALL   ??zgInitItems?relay
//  524   }
//  525 
//  526   ZDConfig_InitDescriptors();
??ZDOInitDevice_0:
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL   ??ZDConfig_InitDescriptors?relay
//  527   //devtag.071807.todo - fix this temporary solution
//  528   _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     DPTR,#(_NIB + 14)
        MOVX    @DPTR,A
//  529   
//  530   devState = DEV_INIT;    // Remove the Hold state
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  531 
//  532   // Initialize leave control logic
//  533   ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL   ??ZDApp_LeaveCtrlInit?relay
//  534 
//  535   // Check leave control reset settings
//  536   ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#(devState & 0xff)
        MOV     R3,#((devState >> 8) & 0xff)
        LCALL   ??ZDApp_LeaveCtrlStartup?relay
//  537 
//  538   // Leave may make the hold state come back
//  539   if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_1
//  540   {
//  541     // Set the NV startup option to force a "new" join.
//  542     zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   ??zgWriteStartupOptions?relay
//  543 
//  544     // Notify the applications 
//  545     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine4 & 0xFFFF
//  546     
//  547     return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
??CrossCallReturnLabel_14:
        MOV     R1,#0x2
        SJMP    ??ZDOInitDevice_2
//  548   }
//  549 
//  550 #if defined ( NV_RESTORE )
//  551   // Get Keypad directly to see if a reset nv is needed.
//  552   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  553   // while booting to skip past NV Restore.
//  554   if ( HalKeyRead() == SW_BYPASS_NV )
//  555     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  556   else
//  557   {
//  558     // Determine if NV should be restored
//  559     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  560   }
//  561 
//  562   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  563   {
//  564     networkStateNV = ZDApp_RestoreNetworkState();
//  565   }
//  566   else
//  567   {
//  568     // Wipe out the network state in NV
//  569     NLME_InitNV();
//  570     NLME_SetDefaultNV();
//  571   }
//  572 #endif
//  573 
//  574   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  575   {
//  576     ZDAppDetermineDeviceType();
??ZDOInitDevice_1:
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL   ??ZDAppDetermineDeviceType?relay
//  577 
//  578     // Only delay if joining network - not restoring network state
//  579     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  580               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     R0,?V0 + 0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x7f
        ANL     A,R0
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  581   }
//  582 
//  583   // Initialize the security for type of device
//  584   ZDApp_SecInit( networkStateNV );
        ; Setup parameters for call to function ZDSecMgrInit
        MOV     R1,#0x1
        LCALL   ??ZDSecMgrInit?relay
//  585   
//  586   // Trigger the network start
//  587   ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDApp_NetworkInit?relay
//  588 
//  589   // set broadcast address mask to support broadcast filtering
//  590   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
//  591   
//  592   return ( networkStateNV );
        MOV     R1,#0x1
??ZDOInitDevice_2:
        LJMP    ?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock4
//  593 }
//  594 
//  595 /*********************************************************************
//  596  * @fn      ZDApp_ReadNetworkRestoreState
//  597  *
//  598  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  599  *          or not to restore the network state.
//  600  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  601  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  602  *
//  603  *
//  604  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  605  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  606  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  607  *          ZCD_NV_STARTUP_OPTION
//  608  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  609 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ZDApp_ReadNetworkRestoreState
//  610 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  611   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV     R6,#0x0
//  612 
//  613   // Look for the New Network State option.
//  614   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   ??zgReadStartupOptions?relay
        MOV     A,R1
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_ReadNetworkRestoreState_0
//  615   {
//  616     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        INC     R6
//  617   }
//  618 
//  619   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock5
//  620 }
//  621 
//  622 /*********************************************************************
//  623  * @fn      ZDAppDetermineDeviceType()
//  624  *
//  625  * @brief   Determines the type of device to start. 
//  626  *
//  627  *          Looks at zgDeviceLogicalType and determines what type of
//  628  *          device to start.  The types are:
//  629  *            ZG_DEVICETYPE_COORDINATOR
//  630  *            ZG_DEVICETYPE_ROUTER
//  631  *            ZG_DEVICETYPE_ENDDEVICE
//  632  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  633 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDAppDetermineDeviceType
//  634 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  635   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDAppDetermineDeviceType_0
//  636   {
//  637     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV     A,#0x2
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
//  638     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        SJMP    ??ZDAppDetermineDeviceType_1
//  639   }
//  640   else
//  641   {
//  642     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        XRL     A,#0x1
        JNZ     ??ZDAppDetermineDeviceType_2
//  643       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x1
        SJMP    ??ZDAppDetermineDeviceType_3
//  644     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDAppDetermineDeviceType_4
//  645       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
??ZDAppDetermineDeviceType_3:
        MOVX    @DPTR,A
//  646     
//  647     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  648     // The device shall do rejoin the network. Otherwise, do normal join
//  649     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#(AIB_apsUseExtendedPANID & 0xff)
        MOV     R3,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        JNZ     ??ZDAppDetermineDeviceType_5
//  650     {
//  651       devStartMode = MODE_JOIN;     // Assume joining
        CLR     A
        SJMP    ??ZDAppDetermineDeviceType_6
//  652     }
//  653     else
//  654     {
//  655       devStartMode = MODE_REJOIN;  
??ZDAppDetermineDeviceType_5:
        MOV     A,#0x3
??ZDAppDetermineDeviceType_6:
        MOV     DPTR,#devStartMode
??ZDAppDetermineDeviceType_1:
        MOVX    @DPTR,A
//  656     }
//  657   }
//  658 }
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock6
//  659 
//  660 /*********************************************************************
//  661  * @fn      ZDApp_NetworkStartEvt()
//  662  *
//  663  * @brief   Process the Network Start Event
//  664  *
//  665  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  666 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ZDApp_NetworkStartEvt
//  667 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  668   if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NetworkStartEvt_0
//  669   {
//  670     // Successfully started a ZigBee network
//  671     if ( devState == DEV_COORD_STARTING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??ZDApp_NetworkStartEvt_1
//  672     {
//  673       devState = DEV_ZB_COORD;
        MOV     A,#0x9
        MOVX    @DPTR,A
//  674     }
//  675 
//  676     osal_pwrmgr_device( PWRMGR_ALWAYS_ON ); // osal device power setting -> ALWAYS ON
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   ??osal_pwrmgr_device?relay
//  677     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT ); // TaskID -> ZDO_STATE_CHANGE_EVT
        ; Setup parameters for call to function osal_set_event
        SJMP    ??ZDApp_NetworkStartEvt_2
//  678   }
//  679   else
//  680   {
//  681     // Try again with a higher energy threshold !!
//  682     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        MOV     R0,A
        MOV     A,#0x10
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??ZDApp_NetworkStartEvt_3
//  683     {
//  684       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   ??NLME_GetEnergyThreshold?relay
        MOV     A,R1
        ADD     A,#0x10
        MOV     R1,A
        LCALL   ??NLME_SetEnergyThreshold?relay
//  685       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        SJMP    ??ZDApp_NetworkStartEvt_4
//  686     }
//  687     else
//  688     {
//  689       // Failed to start network. Enter a dormant state (until user intervenes)
//  690       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_3:
        MOV     A,#0x1
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  691       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV     R2,#0x10
//  692     }
//  693   }
??ZDApp_NetworkStartEvt_4:
        LJMP    ?Subroutine16 & 0xFFFF
        CFI EndBlock cfiBlock7
//  694 }
//  695 
//  696 /*********************************************************************
//  697  * @fn      ZDApp_DeviceAuthEvt()
//  698  *
//  699  * @brief   Process the Device Authentic Event
//  700  *
//  701  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  702 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDApp_DeviceAuthEvt
//  703 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  704   // received authentication from trust center
//  705   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  706   {
//  707     // Stop the reset timer so it doesn't reset
//  708     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL   ??ZDApp_ResetTimerCancel?relay
//  709 
//  710     devState = DEV_END_DEVICE;
        LCALL   ?Subroutine0 & 0xFFFF
//  711     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  712 
//  713     // Set the Power Manager Device
//  714 #if defined ( POWER_SAVING )
//  715     osal_pwrmgr_device( PWRMGR_BATTERY );
//  716 #endif
//  717 
//  718     if ( ZSTACK_ROUTER_BUILD )
//  719     {
//  720       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
//  721       {
//  722         // NOTE: first two parameters are not used, see NLMEDE.h for details
//  723         NLME_StartRouterRequest( 0, 0, false );
//  724       }
//  725     }
//  726 
//  727     // Notify to save info into NV
//  728     ZDApp_NVUpdate();
//  729 
//  730     // Save off the security
//  731     ZDApp_SaveNwkKey();
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   ??ZDApp_SaveNwkKey?relay
//  732 
//  733     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
//  734     
//  735     if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JC      ??ZDApp_DeviceAuthEvt_0
//  736     {
//  737       NLME_SetPollRate( ZDApp_SavedPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??NLME_SetPollRate?relay
//  738     }
//  739   }
//  740   else
//  741   {
//  742     ZDApp_NVUpdate();
//  743   }
//  744 }
??ZDApp_DeviceAuthEvt_0:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock8
//  745 
//  746 /*********************************************************************
//  747  * @fn      ZDApp_SaveNetworkStateEvt()
//  748  *
//  749  * @brief   Process the Save the Network State Event
//  750  *
//  751  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  752 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDApp_SaveNetworkStateEvt
//  753 {
        ; Saved register size: 0
        ; Auto size: 0
//  754 #if defined ( NV_RESTORE )
//  755  #if defined ( NV_TURN_OFF_RADIO )
//  756   // Turn off the radio's receiver during an NV update
//  757   uint8 RxOnIdle;
//  758   uint8 x = false;
//  759   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  760   ZMacSetReq( ZMacRxOnIdle, &x );
//  761  #endif
//  762 
//  763   // Update the Network State in NV
//  764   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  765                  NWK_NV_DEVICELIST_ENABLE |
//  766                  NWK_NV_BINDING_ENABLE    |
//  767                  NWK_NV_ADDRMGR_ENABLE );
//  768 
//  769   // Reset the NV startup option to resume from NV by
//  770   // clearing the "New" join option.
//  771   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  772 
//  773  #if defined ( NV_TURN_OFF_RADIO )
//  774   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  775  #endif
//  776 #endif  // NV_RESTORE
//  777 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//  778 
//  779 /*********************************************************************
//  780  * @fn      ZDApp_RestoreNetworkState()
//  781  *
//  782  * @brief   This function will restore the network state of the
//  783  *          device if the network state is stored in NV.
//  784  *
//  785  * @return
//  786  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  787  *          restored.
//  788  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  789  *          This could mean that zgStartupOption said to not restore, or
//  790  *          it could mean that there was no network state to restore.
//  791  *
//  792  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  793 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ZDApp_RestoreNetworkState
//  794 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNetworkState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  795   uint8 nvStat;
//  796   nwkActiveKeyItems keyItems;
//  797 
//  798   // Initialize NWK NV items
//  799   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        LCALL   ??NLME_InitNV?relay
        MOV     A,R1
        MOV     R6,A
//  800 
//  801   if ( nvStat != NV_OPER_FAILED )
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??ZDApp_RestoreNetworkState_0
//  802   {
//  803     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        LCALL   ??NLME_RestoreFromNV?relay
        MOV     A,R1
        JZ      ??ZDApp_RestoreNetworkState_0
//  804     {
//  805       // Are we a coordinator
//  806       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ??Subroutine32_0 & 0xFFFF
//  807       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
??CrossCallReturnLabel_46:
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        JNZ     ??ZDApp_RestoreNetworkState_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_RestoreNetworkState_1:
        JNZ     ??ZDApp_RestoreNetworkState_2
//  808         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
//  809       devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_2:
        MOV     A,#0x1
        MOV     DPTR,#devStartMode
        LCALL   ?Subroutine1 & 0xFFFF
//  810       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
//  811     }
//  812     else
//  813       nvStat = NV_ITEM_UNINIT;
//  814 
//  815     if ( ZG_SECURE_ENABLED )
//  816     {
//  817       nwkFrameCounterChanges = 0;
//  818       osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
//  819       osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
//  820 
//  821       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  822       {
//  823         ZDApp_RestoreNwkKey();
//  824       }
//  825     }
//  826 
//  827     // The default for RxOnWhenIdle is true for Routers and false for end devices
//  828     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
//  829     // other than default.
//  830   }
//  831 
//  832   if ( nvStat == ZSUCCESS )
??CrossCallReturnLabel_0:
        MOV     A,R6
        JNZ     ??ZDApp_RestoreNetworkState_0
//  833     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV     R1,#0x0
        SJMP    ??ZDApp_RestoreNetworkState_3
//  834   else
//  835     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_0:
        MOV     R1,#0x1
        CFI EndBlock cfiBlock10
??ZDApp_RestoreNetworkState_3:
        REQUIRE ?Subroutine19
        ; // Fall through to label ?Subroutine19
//  836 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//  837 
//  838 /*********************************************************************
//  839  * @fn      ZDApp_InitUserDesc()
//  840  *
//  841  * @brief   Initialize the User Descriptor, the descriptor is read from NV
//  842  *          when needed.  If you want to initialize the User descriptor to
//  843  *          something other than all zero, do it here.
//  844  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  845 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ZDApp_InitUserDesc
//  846 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  847   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
//  848 
//  849   // Initialize the User Descriptor, the descriptor is read from NV
//  850   // when needed.  If you want to initialize the User descriptor to something
//  851   // other than all zero, do it here.
//  852   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        LCALL   ?Subroutine13 & 0xFFFF
//  853   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
//  854          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  855   {
//  856     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
//  857          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x11
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
//  858     {
//  859       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_InitUserDesc_0
//  860       {
//  861         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
//  862       }
//  863     }
//  864   }
//  865 }
??ZDApp_InitUserDesc_0:
        MOV     A,#0x11
        LJMP    ??Subroutine30_0 & 0xFFFF
        CFI EndBlock cfiBlock12
//  866 
//  867 /*********************************************************************
//  868  * @fn      ZDAppCheckForHoldKey()
//  869  *
//  870  * @brief   Check for key to set the device into Hold Auto Start
//  871  *
//  872  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  873 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ZDAppCheckForHoldKey
//  874 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  875 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  876   // Get Keypad directly to see if a HOLD_START is needed.
//  877   // Hold down the SW_BYPASS_START key (see OnBoard.h)
//  878   // while booting to avoid starting up the device.
//  879   if ( HalKeyRead () == SW_BYPASS_START)
        ; Setup parameters for call to function HalKeyRead
        LCALL   ??HalKeyRead?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDAppCheckForHoldKey_0
//  880   {
//  881     // Change the device state to HOLD on start up
//  882     devState = DEV_HOLD;
        CLR     A
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  883   }
//  884 #endif // HAL_KEY
//  885 }
??ZDAppCheckForHoldKey_0:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock13
//  886 
//  887 /*********************************************************************
//  888  * @fn      ZDApp_ProcessOSALMsg()
//  889  *
//  890  * @brief   Process the incoming task message.
//  891  *
//  892  * @param   msgPtr - message to process
//  893  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  894 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function ZDApp_ProcessOSALMsg
//  895 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessNetworkJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  896   // Data Confirmation message fields
//  897   uint8 sentEP;       // This should always be 0
//  898   uint8 sentStatus;
//  899   afDataConfirm_t *afDataConfirm;
//  900   uint8 tmp;
//  901 
//  902   switch ( msgPtr->event )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
        DATA
        DB        0
        DB        5
        DB        1
        DW        ??ZDApp_ProcessOSALMsg_0
        DB        2
        DW        ??ZDApp_ProcessOSALMsg_1
        DB        3
        DW        ??ZDApp_ProcessOSALMsg_2
        DB        26
        DW        ??ZDApp_ProcessOSALMsg_3
        DB        211
        DW        ??ZDApp_ProcessOSALMsg_4
        DW        ??ZDApp_ProcessOSALMsg_5
        CODE
//  903   {
//  904     // Incoming ZDO Message
//  905     case AF_INCOMING_MSG_CMD:
//  906       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_3:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL   ??ZDP_IncomingData?relay
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  907       break;
//  908       
//  909     case ZDO_CB_MSG:
//  910       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL   ??ZDApp_ProcessMsgCBs?relay
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  911       break;
//  912 
//  913     case AF_DATA_CONFIRM_CMD:
//  914       // This message is received as a confirmation of a data packet sent. The status is of ZStatus_t type 
//  915       // [defined in NLMEDE.h] The message fields are defined in AF.h
//  916       afDataConfirm = (afDataConfirm_t *)msgPtr;
//  917       sentEP = afDataConfirm->endpoint;
//  918       sentStatus = afDataConfirm->hdr.status;
//  919 
//  920       // Action taken when confirmation is received.
//  921 #if defined ( ZIGBEE_FREQ_AGILITY )
//  922       if ( pZDNwkMgr_ProcessDataConfirm )
//  923         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
//  924 #endif
//  925       (void)sentEP;
//  926       (void)sentStatus;
//  927       break;
//  928 
//  929     case ZDO_NWK_DISC_CNF:
//  930       if (devState != DEV_NWK_DISC)
??ZDApp_ProcessOSALMsg_0:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  931         break;
//  932       
//  933       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_6
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
//  934       {
//  935         if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
??ZDApp_ProcessOSALMsg_6:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
//  936         {
//  937           if ( devStartMode == MODE_JOIN )
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     A,R6
        ADD     A,#0x3
        DEC     R0
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        MOV     A,R6
        ADD     A,#0x2
        DEC     R0
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessOSALMsg_8
//  938           {
//  939             devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  940   
//  941             ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        LCALL   ??ZDApp_NodeProfileSync?relay
//  942   
//  943             if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
//  944                                      BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, 
//  945                                    ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
//  946                                    ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
//  947                                      ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??NLME_JoinRequest?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??ZDApp_ProcessOSALMsg_9
//  948             {
//  949               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
//  950             }
//  951           }
//  952           else if ( devStartMode == MODE_REJOIN )
??ZDApp_ProcessOSALMsg_8:
        XRL     A,#0x3
        JNZ     ??CrossCallReturnLabel_6
//  953           {
//  954             devState = DEV_NWK_REJOIN;
        MOV     A,#0x4
        MOV     DPTR,#devState
        MOVX    @DPTR,A
//  955 
//  956             // Before trying to do rejoin, check if the device has a valid short address
//  957             // If not, generate a random short address for itself
//  958             if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV     DPTR,#(_NIB + 20)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessOSALMsg_10:
        JNZ     ??ZDApp_ProcessOSALMsg_11
//  959             {
//  960               _NIB.nwkDevAddress = osal_rand();
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     DPTR,#(_NIB + 20)
        LCALL   ??Subroutine32_0 & 0xFFFF
//  961               ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
??CrossCallReturnLabel_47:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#((_NIB + 20) & 0xff)
        MOV     R3,#(((_NIB + 20) >> 8) & 0xff)
        MOV     R1,#0x53
        LCALL   ??ZMacSetReq?relay
//  962             }
//  963 
//  964             if ( ZG_SECURE_ENABLED )
//  965             {
//  966               ZDApp_RestoreNwkKey();
//  967             }
//  968             
//  969             // Check if the device has a valid PanID, if not, set it to the discovered Pan
//  970             if ( _NIB.nwkPanId == INVALID_PAN_ID )
??ZDApp_ProcessOSALMsg_11:
        MOV     DPTR,#(_NIB + 33)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessOSALMsg_12:
        JNZ     ??ZDApp_ProcessOSALMsg_13
//  971             {
//  972               _NIB.nwkPanId = BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB );
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#(_NIB + 33)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  973               ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#((_NIB + 33) & 0xff)
        MOV     R3,#(((_NIB + 33) >> 8) & 0xff)
        MOV     R1,#0x50
        LCALL   ??ZMacSetReq?relay
//  974             }
//  975 
//  976             tmp = true;
??ZDApp_ProcessOSALMsg_13:
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  977             ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x52
        LCALL   ??ZMacSetReq?relay
//  978             if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel) != ZSuccess )
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??NLME_ReJoinRequest?relay
??ZDApp_ProcessOSALMsg_9:
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_6
//  979             {
//  980               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
//  981                   + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine9 & 0xFFFF
//  982             }
//  983           }
//  984   
//  985           if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_6:
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessOSALMsg_5
//  986           {
//  987             // The receiver is on, turn network layer polling off.
//  988             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL   ?Subroutine12 & 0xFFFF
//  989             NLME_SetQueuedPollRate( 0 );
//  990             NLME_SetResponseRate( 0 );
//  991           }
//  992           else
//  993           {
//  994             if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
//  995             {
//  996               ZDApp_SavedPollRate = zgPollRate;
//  997               NLME_SetPollRate( zgRejoinPollRate );
//  998             }
//  999           }
// 1000         }
??CrossCallReturnLabel_10:
        SJMP    ??ZDApp_ProcessOSALMsg_5
// 1001         else
// 1002         {
// 1003           if ( continueJoining )
??ZDApp_ProcessOSALMsg_7:
        MOV     DPTR,#continueJoining
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessOSALMsg_5
// 1004           {
// 1005     #if defined ( MANAGED_SCAN )
// 1006             ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1007     #else
// 1008             zdoDiscCounter++;
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1009             ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1010                   + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     A,#-0x1
        ANL     A,?V0 + 0
        MOV     R0,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        SJMP    ??ZDApp_ProcessOSALMsg_14
// 1011     #endif
// 1012           }
// 1013         }
// 1014       }
// 1015       break;
// 1016 
// 1017     case ZDO_NWK_JOIN_IND:
// 1018       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_15
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_5
// 1019       {
// 1020         ZDApp_ProcessNetworkJoin();
??ZDApp_ProcessOSALMsg_15:
        ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
        LCALL   ??ZDApp_ProcessNetworkJoin?relay
        SJMP    ??ZDApp_ProcessOSALMsg_5
// 1021       }
// 1022       break;
// 1023 
// 1024     case ZDO_NWK_JOIN_REQ:
// 1025       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_16
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_5
// 1026       {
// 1027         retryCnt = 0;
??ZDApp_ProcessOSALMsg_16:
        CLR     A
        MOV     DPTR,#retryCnt
        MOVX    @DPTR,A
// 1028         devStartMode = MODE_RESUME;
        MOV     A,#0x1
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1029         _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        LCALL   ?Subroutine1 & 0xFFFF
// 1030         osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1031         zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
??CrossCallReturnLabel_1:
        MOV     A,#0x2
        MOV     DPTR,#zgDefaultStartingScanDuration
        MOVX    @DPTR,A
// 1032         ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessOSALMsg_14:
        LCALL   ??ZDApp_NetworkInit?relay
// 1033       }
// 1034       break;
// 1035 
// 1036     default:
// 1037       if ( ZG_SECURE_ENABLED )
// 1038         ZDApp_ProcessSecMsg( msgPtr );
// 1039       break;
// 1040   }
// 1041 
// 1042 }
??ZDApp_ProcessOSALMsg_5:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#((_NIB + 53) & 0xff)
        MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??sAddrExtCpy?relay
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
// 1043 
// 1044 /*********************************************************************
// 1045  * @fn      ZDApp_ProcessMsgCBs()
// 1046  * @brief   Process response messages
// 1047  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1048 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function ZDApp_ProcessMsgCBs
// 1049 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
        LCALL   ?Subroutine11 & 0xFFFF
// 1050   switch ( inMsg->clusterID )
??CrossCallReturnLabel_38:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DW        2
        DW        33
        DW        34
        DW        ??ZDApp_ProcessMsgCBs_0
        DW        32768
        DW        32769
        DW        ??ZDApp_ProcessMsgCBs_1
        DW        0
        DW        ??ZDApp_ProcessMsgCBs_2
        CODE
// 1051   {
// 1052 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1053     case NWK_addr_rsp:
// 1054     case IEEE_addr_rsp:
// 1055       {
// 1056         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1057         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   ??ZDO_ParseAddrRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1058         if ( pAddrRsp )
        MOV     A,R6
        JNZ     ??ZDApp_ProcessMsgCBs_3
        MOV     A,R7
??ZDApp_ProcessMsgCBs_3:
        JZ      ??ZDApp_ProcessMsgCBs_2
// 1059         {
// 1060           if ( pAddrRsp->status == ZSuccess )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_4
// 1061           {
// 1062             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDO_UpdateAddrManager?relay
// 1063           }
// 1064           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_4:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        SJMP    ??ZDApp_ProcessMsgCBs_2
// 1065         }
// 1066       }
// 1067       break;
// 1068 #endif
// 1069       
// 1070 #if defined ( REFLECTOR )
// 1071     case Bind_req:
// 1072     case Unbind_req:
// 1073       {
// 1074         ZDO_BindUnbindReq_t bindReq;
// 1075         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseBindUnbindReq?relay
// 1076         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDO_ProcessBindUnbindReq?relay
        CFI EndBlock cfiBlock18
// 1077       }
// 1078       break;
// 1079 #endif      
// 1080 
// 1081 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1082     case Bind_rsp:      
// 1083     case Unbind_rsp:
// 1084       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
// 1085       {
// 1086         ZDMatchSendState(
// 1087              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1088              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
// 1089       }
// 1090       break;
// 1091       
// 1092     // Send the End device bind request  
// 1093     case End_Device_Bind_req: 
// 1094       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1095       {
// 1096         ZDEndDeviceBind_t bindReq;
// 1097         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
// 1098         ZDO_MatchEndDeviceBind( &bindReq );  // ZDO layer match End device bind
// 1099         
// 1100         // Freeing the cluster lists - if allocated.
// 1101         if ( bindReq.numInClusters )
// 1102           osal_mem_free( bindReq.inClusters );
// 1103         if ( bindReq.numOutClusters )
// 1104           osal_mem_free( bindReq.outClusters );
// 1105       }
// 1106       break;
// 1107 #endif
// 1108   }
// 1109 }
??ZDApp_ProcessMsgCBs_2:
        REQUIRE ?Subroutine23
        ; // Fall through to label ?Subroutine23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x15
        LJMP    ??Subroutine30_0 & 0xFFFF
        CFI EndBlock cfiBlock19
// 1110 
// 1111 /*********************************************************************
// 1112  * @fn      ZDApp_RegisterCBs()
// 1113  *
// 1114  * @brief   Process response messages
// 1115  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1116 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ZDApp_RegisterCBs
// 1117 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1118 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1119   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        LCALL   ?Subroutine5 & 0xFFFF
// 1120 #endif
// 1121 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1122   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
??CrossCallReturnLabel_24:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        LCALL   ?Subroutine5 & 0xFFFF
// 1123 #endif  
// 1124 #if ZG_BUILD_COORDINATOR_TYPE
// 1125   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
// 1126   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
// 1127   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
// 1128 #endif
// 1129 #if defined ( REFLECTOR )
// 1130   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
??CrossCallReturnLabel_25:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   ??Subroutine24_0 & 0xFFFF
// 1131   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
??CrossCallReturnLabel_26:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??Subroutine24_0 & 0xFFFF
// 1132 #endif  
// 1133 }
??CrossCallReturnLabel_27:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond22) CFA_SP SP+-5
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOV     R3,#-0x80
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond25) CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
// 1134 
// 1135 /*********************************************************************
// 1136  * @fn      ZDApp_ProcessSecMsg()
// 1137  *
// 1138  * @brief   Process the incoming security message.
// 1139  *
// 1140  * @param   msgPtr - message to process
// 1141  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1142 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function ZDApp_ProcessSecMsg
// 1143 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrTransportKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrSwitchKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1144   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessSecMsg>_0`:
        DATA
        DB        0
        DB        2
        DB        6
        DW        ??ZDApp_ProcessSecMsg_0
        DB        10
        DW        ??ZDApp_ProcessSecMsg_1
        DW        ??ZDApp_ProcessSecMsg_2
        CODE
// 1145   {
// 1146     case ZDO_ESTABLISH_KEY_CFM:
// 1147       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1148       {
// 1149         ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
// 1150       }
// 1151       break;
// 1152 
// 1153     case ZDO_ESTABLISH_KEY_IND:
// 1154       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1155       {
// 1156         if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1157         {
// 1158           ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
// 1159         }
// 1160       }
// 1161       break;
// 1162 
// 1163     case ZDO_TRANSPORT_KEY_IND:
// 1164       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_0:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_3
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_2
// 1165       {
// 1166         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_3:
        ; Setup parameters for call to function ZDSecMgrTransportKeyInd
        LCALL   ??ZDSecMgrTransportKeyInd?relay
        SJMP    ??ZDApp_ProcessSecMsg_2
// 1167       }
// 1168       break;
// 1169 
// 1170     case ZDO_UPDATE_DEVICE_IND:
// 1171       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1172       {
// 1173         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
// 1174       }
// 1175       break;
// 1176 
// 1177     case ZDO_REMOVE_DEVICE_IND:
// 1178       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1179       {
// 1180         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1181       }
// 1182       break;
// 1183 
// 1184     case ZDO_REQUEST_KEY_IND:
// 1185       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1186       {
// 1187         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1188         {
// 1189           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1190         }
// 1191       }
// 1192       break;
// 1193 
// 1194     case ZDO_SWITCH_KEY_IND:
// 1195       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_4
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_2
// 1196       {
// 1197         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_4:
        ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
        LCALL   ??ZDSecMgrSwitchKeyInd?relay
// 1198       }
// 1199       break;
// 1200     
// 1201     case ZDO_AUTHENTICATE_IND:
// 1202       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1203       {
// 1204         ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
// 1205       }
// 1206       break;
// 1207 
// 1208     case ZDO_AUTHENTICATE_CFM:
// 1209       if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1210       {
// 1211         ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
// 1212       }
// 1213       break;
// 1214 
// 1215     default:
// 1216       // Unsupported messages
// 1217       break;
// 1218   }
// 1219 }
??ZDApp_ProcessSecMsg_2:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock29
// 1220 
// 1221 /*********************************************************************
// 1222  * @fn      ZDApp_ProcessNetworkJoin()
// 1223  *
// 1224  * @brief  Save off the Network key information.
// 1225  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1226 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function ZDApp_ProcessNetworkJoin
// 1227 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1228   if ( (devState == DEV_NWK_JOINING) ||
// 1229       ((devState == DEV_NWK_ORPHAN)  &&
// 1230        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDApp_ProcessNetworkJoin_0
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1231   {
// 1232     // Result of a Join attempt by this device.
// 1233     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_3
// 1234     {
// 1235       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine4 & 0xFFFF
// 1236 
// 1237 #if defined ( POWER_SAVING )
// 1238       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1239 #endif
// 1240 
// 1241       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
// 1242       {
// 1243         // wait for auth from trust center!!
// 1244         devState = DEV_END_DEVICE_UNAUTH;
// 1245 
// 1246         // Start the reset timer for MAX UNAUTH time
// 1247         ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
// 1248       }
// 1249       else
// 1250       {
// 1251         if ( ZSTACK_ROUTER_BUILD )
// 1252         {
// 1253           if ( devState == DEV_NWK_ORPHAN 
// 1254             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1255           {
// 1256             // Change NIB state to router for restore
// 1257             _NIB.nwkState = NWK_ROUTER;
// 1258           }
// 1259         }
// 1260                 
// 1261         if ( devState == DEV_NWK_JOINING )
??CrossCallReturnLabel_15:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_4
// 1262         {
// 1263           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 1264         }
// 1265         
// 1266         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_4:
        MOV     A,#0x6
        MOV     DPTR,#devState
        MOVX    @DPTR,A
// 1267         if ( ZSTACK_ROUTER_BUILD )
        LJMP    ??CrossCallReturnLabel_7 & 0xFFFF
// 1268         {
// 1269           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1270           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1271           {
// 1272             NLME_StartRouterRequest( 0, 0, false );
// 1273           }
// 1274         }
// 1275       }
// 1276     }
// 1277     else
// 1278     {
// 1279       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_5
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessNetworkJoin_5
// 1280       {
// 1281         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ     ??ZDApp_ProcessNetworkJoin_6
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_6:
        JZ      ??ZDApp_ProcessNetworkJoin_7
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDApp_ProcessNetworkJoin_8
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_8:
        JNZ     ??ZDApp_ProcessNetworkJoin_9
// 1282           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_7:
        CLR     A
        MOV     DPTR,#devStartMode
        SJMP    ??ZDApp_ProcessNetworkJoin_10
// 1283         else
// 1284         {
// 1285           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_9:
        MOV     A,#0x3
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1286           _tmpRejoinState = true;
        MOV     A,#0x1
        MOV     DPTR,#_tmpRejoinState
??ZDApp_ProcessNetworkJoin_10:
        MOVX    @DPTR,A
// 1287         }
// 1288       }
// 1289 
// 1290       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1291            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_5:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#-0x2
        XRL     A,?V0 + 0
        JNZ     ??ZDApp_ProcessNetworkJoin_11
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??ZDApp_ProcessNetworkJoin_11:
        JNZ     ??ZDApp_ProcessNetworkJoin_12
        MOV     DPTR,#(_NIB + 20)
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_13
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDApp_ProcessNetworkJoin_13:
        JZ      ??ZDApp_ProcessNetworkJoin_14
// 1292       {
// 1293         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_12:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1294         // Invalidate nwk addr so end device does not use in its data reqs.
// 1295         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#(_NIB + 20)
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1296         ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x53
        LCALL   ??ZMacSetReq?relay
// 1297       }
// 1298 
// 1299       // Clear the neighbor Table and network discovery tables.
// 1300       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_14:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 1301       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   ??NLME_NwkDiscTerm?relay
// 1302 
// 1303       zdoDiscCounter = 1;
        MOV     A,#0x1
        MOV     DPTR,#zdoDiscCounter
        MOVX    @DPTR,A
// 1304 
// 1305 //      ZDApp_NetworkInit( (uint16)
// 1306 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1307 //                          (NWK_START_DELAY * 5)) );
// 1308       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1309            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        SJMP    ??ZDApp_ProcessNetworkJoin_15
// 1310     }
// 1311   }
// 1312   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
??ZDApp_ProcessNetworkJoin_1:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??CrossCallReturnLabel_7
// 1313   {
// 1314     // results of an orphaning attempt by this device
// 1315     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_16
// 1316     {
// 1317       if ( ZG_SECURE_ENABLED )
// 1318       {
// 1319         ZDApp_RestoreNwkKey();
// 1320       }
// 1321       
// 1322       devState = DEV_END_DEVICE;
        LCALL   ?Subroutine0 & 0xFFFF
// 1323       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1324       // setup Power Manager Device
// 1325 #if defined ( POWER_SAVING )
// 1326       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1327 #endif
// 1328 
// 1329       if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_20:
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??CrossCallReturnLabel_11
// 1330       {
// 1331         // The receiver is on, turn network layer polling off.
// 1332         NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        LCALL   ?Subroutine12 & 0xFFFF
// 1333         NLME_SetQueuedPollRate( 0 );
// 1334         NLME_SetResponseRate( 0 );
// 1335       }
// 1336 
// 1337       if ( ZSTACK_ROUTER_BUILD )
// 1338       {
// 1339         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1340         if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1341         {
// 1342           NLME_StartRouterRequest( 0, 0, false );
// 1343         }
// 1344       }
// 1345       
// 1346       ZDApp_AnnounceNewAddress();
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
        SJMP    ??CrossCallReturnLabel_7
// 1347     }
// 1348     else
// 1349     {
// 1350       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_16:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_17
// 1351       {
// 1352         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDApp_ProcessNetworkJoin_18
// 1353         {
// 1354           if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        JNZ     ??ZDApp_ProcessNetworkJoin_19
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_19:
        JZ      ??ZDApp_ProcessNetworkJoin_20
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDApp_ProcessNetworkJoin_21
        MOV     A,#-0x1
        XRL     A,R1
??ZDApp_ProcessNetworkJoin_21:
        JNZ     ??ZDApp_ProcessNetworkJoin_22
// 1355             devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_20:
        CLR     A
        MOV     DPTR,#devStartMode
??ZDApp_ProcessNetworkJoin_23:
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_17
// 1356           else
// 1357           {
// 1358             devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_22:
        MOV     A,#0x3
        MOV     DPTR,#devStartMode
        MOVX    @DPTR,A
// 1359             _tmpRejoinState = true;
        MOV     A,#0x1
        MOV     DPTR,#_tmpRejoinState
        SJMP    ??ZDApp_ProcessNetworkJoin_23
// 1360           }
// 1361         }
// 1362         // Do a normal join to the network after certain times of rejoin retries
// 1363         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_18:
        MOV     DPTR,#AIB_apsUseInsecureJoin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessNetworkJoin_20
// 1364         {
// 1365           devStartMode = MODE_JOIN;
// 1366         }
// 1367       }
// 1368 
// 1369       // Clear the neighbor Table and network discovery tables.
// 1370       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_17:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 1371       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   ??NLME_NwkDiscTerm?relay
// 1372 
// 1373       // setup a retry for later...
// 1374       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1375            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
// 1376     }
// 1377   }
??ZDApp_ProcessNetworkJoin_15:
        LCALL   ?Subroutine9 & 0xFFFF
// 1378 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 1379   else
// 1380   {
// 1381     // Assume from address conflict
// 1382     if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
// 1383     {
// 1384       // Notify the network
// 1385       ZDApp_AnnounceNewAddress();
// 1386       
// 1387       // Notify apps
// 1388       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1389     }
// 1390   }
// 1391 #endif
// 1392 }
??CrossCallReturnLabel_7:
        LJMP    ?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetPollRate?relay
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetQueuedPollRate?relay
        ; Setup parameters for call to function NLME_SetResponseRate
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??NLME_SetResponseRate?relay
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        LCALL   ??osal_rand?relay
        MOV     ?V0 + 0,R2
        MOV     A,#0x7f
        ANL     A,?V0 + 0
        MOV     R0,A
        MOV     A,#0x64
        ADD     A,R0
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     DPTR,#(_NIB + 33)
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#-0x1
        XRL     A,R0
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOV     A,#0x6
        MOV     DPTR,#devState
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42
        REQUIRE ?Subroutine20
        ; // Fall through to label ?Subroutine20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond47) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond47) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond47) CFA_SP SP+-5
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond48) CFA_SP SP+-5
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond49) CFA_SP SP+-5
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond50) CFA_SP SP+-5
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond51) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond51) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond51) CFA_SP SP+-5
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
// 1393 
// 1394 /*********************************************************************
// 1395  * @fn      ZDApp_SaveNwkKey()
// 1396  *
// 1397  * @brief   Save off the Network key information.
// 1398  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1399 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function ZDApp_SaveNwkKey
// 1400 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1401   nwkActiveKeyItems keyItems;
// 1402 
// 1403   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SSP_ReadNwkActiveKey?relay
// 1404   keyItems.frameCounter++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 1405 
// 1406   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1407                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1408 
// 1409   nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock53
// 1410 }
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62
// 1411 
// 1412 /*********************************************************************
// 1413  * @fn      ZDApp_ResetNwkKey()
// 1414  *
// 1415  * @brief   Reset the Network key information in NV.
// 1416  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1417 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function ZDApp_ResetNwkKey
// 1418 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1419   nwkActiveKeyItems keyItems;
// 1420 
// 1421   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        LCALL   ?Subroutine13 & 0xFFFF
// 1422   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1423                 (void *)&keyItems );
??CrossCallReturnLabel_13:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 31)
// 1424 }
        LJMP    ?Subroutine23 & 0xFFFF
        CFI EndBlock cfiBlock63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66
// 1425 
// 1426 /*********************************************************************
// 1427  * @fn      ZDApp_RestoreNwkKey()
// 1428  *
// 1429  * @brief  Save off the Network key information.
// 1430  *
// 1431  * @return  true if restored from NV, false if not
// 1432  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1433 uint8 ZDApp_RestoreNwkKey( void )
ZDApp_RestoreNwkKey:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function ZDApp_RestoreNwkKey
// 1434 {
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
// 1435   nwkActiveKeyItems keyItems;
// 1436   uint8 ret = false;
        MOV     R6,#0x0
// 1437 
// 1438   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1439       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x15
        MOV     ?V0 + 1,R6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1440   {
// 1441     if ( keyItems.frameCounter > 0 )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??ZDApp_RestoreNwkKey_1
// 1442     {
// 1443       // Restore the key information
// 1444       keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
// 1445       nwkFrameCounter = keyItems.frameCounter;
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPTR,#nwkFrameCounter
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 1446       ret = true;
        INC     R6
// 1447     }
// 1448 
// 1449     // Force a save for the first frame counter increment
// 1450     nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
??ZDApp_RestoreNwkKey_1:
        MOV     DPTR,#nwkFrameCounterChanges
        MOV     A,#-0x17
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1451   }
// 1452   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock67
// 1453 }
// 1454 
// 1455 /*********************************************************************
// 1456  * @fn      ZDApp_ResetTimerStart
// 1457  *
// 1458  * @brief   Start the reset timer.
// 1459  *
// 1460  * @param   delay - delay time(ms) before reset
// 1461  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1462 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function ZDApp_ResetTimerStart
// 1463 {
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1464   // Start the rest timer
// 1465   osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x4
        LCALL   ?Subroutine7 & 0xFFFF
// 1466 }
??CrossCallReturnLabel_32:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond70) CFA_SP SP+-5
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond73) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond73) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond73) CFA_SP SP+-5
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond74) CFA_SP SP+-5
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75
// 1467 
// 1468 /*********************************************************************
// 1469  * @fn      ZDApp_ResetTimerCancel
// 1470  *
// 1471  * @brief   Cancel the reset timer.
// 1472  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1473 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
        CFI Block cfiBlock76 Using cfiCommon0
        CFI Function ZDApp_ResetTimerCancel
// 1474 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1475   // Cancel the reset timer
// 1476   osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
// 1477 }
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock76
// 1478 
// 1479 /*********************************************************************
// 1480  * @fn      ZDApp_LeaveCtrlInit
// 1481  *
// 1482  * @brief   Initialize the leave control logic.
// 1483  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1484 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlInit
// 1485 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1486   uint8 status;
// 1487 
// 1488 
// 1489   // Initialize control state
// 1490   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL   ?Subroutine2 & 0xFFFF
// 1491 
// 1492   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1493                               sizeof(ZDApp_LeaveCtrl),
// 1494                               &ZDApp_LeaveCtrl );
// 1495 
// 1496   if ( status == ZSUCCESS )
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??ZDApp_LeaveCtrlInit_0
// 1497   {
// 1498     // Read saved control
// 1499     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1500                   0,
// 1501                   sizeof( uint8 ),
// 1502                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1503   }
// 1504 }
??ZDApp_LeaveCtrlInit_0:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock77
// 1505 
// 1506 /*********************************************************************
// 1507  * @fn      ZDApp_LeaveCtrlSet
// 1508  *
// 1509  * @brief   Set the leave control logic.
// 1510  *
// 1511  * @param   ra - reassociate flag
// 1512  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1513 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlSet
// 1514 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1515   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV     A,#0x1
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    @DPTR,A
// 1516 
// 1517   if ( ra == TRUE )
        XRL     A,R1
        JNZ     ??ZDApp_LeaveCtrlSet_0
// 1518   {
// 1519     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1520   }
// 1521 
// 1522   // Write the leave control
// 1523   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1524                  0,
// 1525                  sizeof( uint8 ),
// 1526                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_30:
        LJMP    ??Subroutine30_0 & 0xFFFF
        CFI EndBlock cfiBlock78
// 1527 }
// 1528 
// 1529 /*********************************************************************
// 1530  * @fn      ZDApp_LeaveCtrlBypass
// 1531  *
// 1532  * @brief   Check if NV restore should be skipped during a leave reset.
// 1533  *
// 1534  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1535  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1536 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlBypass
// 1537 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1538   uint8 bypass;
// 1539 
// 1540   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1541   {
// 1542     bypass = TRUE;
// 1543   }
// 1544   else
// 1545   {
// 1546     bypass = FALSE;
// 1547   }
// 1548 
// 1549   return bypass;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R1,A
        SJMP    ??Subroutine27_0
        CFI EndBlock cfiBlock79
// 1550 }
// 1551 
// 1552 /*********************************************************************
// 1553  * @fn      ZDApp_LeaveCtrlStartup
// 1554  *
// 1555  * @brief   Check for startup conditions during a leave reset.
// 1556  *
// 1557  * @param   state      - devState_t determined by leave control logic
// 1558  * @param   startDelay - startup delay
// 1559  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1560 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlStartup
// 1561 {
        FUNCALL ZDApp_LeaveCtrlStartup, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1562   *startDelay = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1563 
// 1564   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_LeaveCtrlStartup_0
// 1565   {
// 1566     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_LeaveCtrlStartup_1
// 1567     {
// 1568       *startDelay = 5000;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x13
        SJMP    ??ZDApp_LeaveCtrlStartup_2
// 1569     }
// 1570     else
// 1571     {
// 1572       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
??ZDApp_LeaveCtrlStartup_2:
        MOVX    @DPTR,A
// 1573     }
// 1574 
// 1575     // Set leave control to initialized state
// 1576     ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL   ?Subroutine2 & 0xFFFF
// 1577 
// 1578     // Write initialized control
// 1579     osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1580                   0,
// 1581                   sizeof( uint8 ),
// 1582                   &ZDApp_LeaveCtrl);
// 1583   }
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1584 }
??ZDApp_LeaveCtrlStartup_0:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        CLR     A
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV     ?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
// 1585 
// 1586 /*********************************************************************
// 1587  * @fn      ZDApp_LeaveReset
// 1588  *
// 1589  * @brief   Setup a device reset due to a leave indication/confirm.
// 1590  *
// 1591  * @param   ra - reassociate flag
// 1592  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1593 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function ZDApp_LeaveReset
// 1594 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1595   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL   ??ZDApp_LeaveCtrlSet?relay
// 1596 
// 1597   ZDApp_ResetTimerStart( 5000 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??ZDApp_ResetTimerStart?relay
// 1598 }
        SJMP    ??Subroutine27_0
        CFI EndBlock cfiBlock84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock85
??CrossCallReturnLabel_17:
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock86
// 1599 
// 1600 /*********************************************************************
// 1601  * @fn      ZDApp_LeaveUpdate
// 1602  *
// 1603  * @brief   Update local device data related to leaving device.
// 1604  *
// 1605  * @param   nwkAddr        - NWK address of leaving device
// 1606  * @param   extAddr        - EXT address of leaving device
// 1607  * @param   removeChildren - remove children of leaving device
// 1608  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1609 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function ZDApp_LeaveUpdate
// 1610                         uint8 removeChildren )
// 1611 {
        ; Saved register size: 0
        ; Auto size: 0
// 1612   /*
// 1613   AddrMgrEntry_t entry;
// 1614   */
// 1615   (void)nwkAddr;  // Intentionally unreferenced parameter
// 1616 
// 1617   // Remove if child
// 1618   if ( ZSTACK_ROUTER_BUILD )
// 1619   {
// 1620     NLME_RemoveChild( extAddr, removeChildren );
// 1621   }
// 1622 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock87
// 1623 
// 1624 /*********************************************************************
// 1625  * CALLBACK FUNCTIONS
// 1626  */
// 1627 
// 1628 
// 1629 /*********************************************************************
// 1630  * @fn      ZDApp_SendEventMsg()
// 1631  *
// 1632  * @brief  Sends a Network Join message
// 1633  *
// 1634  * @param  cmd - command ID
// 1635  * @param  len - length (in bytes) of the buf field
// 1636  * @param  buf - buffer for the rest of the message.
// 1637  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1638 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
        CFI Block cfiBlock88 Using cfiCommon0
        CFI Function ZDApp_SendEventMsg
// 1639 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1640   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     A,R2
        MOV     R3,A
        MOV     A,R1
        MOV     R2,A
        CFI EndBlock cfiBlock88
        REQUIRE ?Subroutine22
        ; // Fall through to label ?Subroutine22
// 1641 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_21:
        SJMP    ??Subroutine27_0
        CFI EndBlock cfiBlock89
// 1642 
// 1643 /*********************************************************************
// 1644  * @fn      ZDApp_SendMsg()
// 1645  *
// 1646  * @brief   Sends a OSAL message
// 1647  *
// 1648  * @param  taskID - Where to send the message
// 1649  * @param  cmd - command ID
// 1650  * @param  len - length (in bytes) of the buf field
// 1651  * @param  buf - buffer for the rest of the message.
// 1652  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1653 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function ZDApp_SendMsg
// 1654 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 7,R1
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 4,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
// 1655   osal_event_hdr_t *msgPtr;
// 1656 
// 1657   // Send the address to the task
// 1658   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        MOV     DPL,R3
        MOV     ?V0 + 0,DPL
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     R6,?V0 + 10
        MOV     R7,?V0 + 11
// 1659   if ( msgPtr )
        MOV     A,R6
        JNZ     ??ZDApp_SendMsg_0
        MOV     A,R7
??ZDApp_SendMsg_0:
        JZ      ??ZDApp_SendMsg_1
// 1660   {
// 1661     if ( (len > 0) && (buf != NULL) ) osal_memcpy( msgPtr, buf, len );
        MOV     A,?V0 + 4
        JZ      ??ZDApp_SendMsg_2
        MOV     A,?V0 + 2
        JNZ     ??ZDApp_SendMsg_3
        MOV     A,?V0 + 3
??ZDApp_SendMsg_3:
        JZ      ??ZDApp_SendMsg_2
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 2
        MOV     ?V0 + 5,?V0 + 3
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,?V0 + 0
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1662 
// 1663     msgPtr->event = cmd;
??ZDApp_SendMsg_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
// 1664     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 7
        LCALL   ??osal_msg_send?relay
// 1665   }
// 1666 }
??ZDApp_SendMsg_1:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock90
// 1667 
// 1668 /*********************************************************************
// 1669  * Call Back Functions from NWK  - API
// 1670  */
// 1671 
// 1672 /*********************************************************************
// 1673  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 1674  *
// 1675  * @brief       This function returns a choice of PAN to join.
// 1676  *
// 1677  * @param       ResultCount - Number of routers discovered
// 1678  * @param               NetworkList - Pointer to list of network descriptors
// 1679  *
// 1680  * @return      ZStatus_t
// 1681  */
// 1682 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1683 ZStatus_t ZDO_NetworkDiscoveryConfirmCB( uint8 ResultCount,
ZDO_NetworkDiscoveryConfirmCB:
        CFI Block cfiBlock91 Using cfiCommon0
        CFI Function ZDO_NetworkDiscoveryConfirmCB
// 1684                                          networkDesc_t *NetworkList )
// 1685 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 7,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
// 1686   networkDesc_t *pNwkDesc = NetworkList;
// 1687   ZDO_NetworkDiscoveryCfm_t msg;
// 1688   uint8 i = ResultCount;
// 1689   uint8 stackProfile;
// 1690   uint8 stackProfilePro;
// 1691   uint8 selected;
// 1692 
// 1693 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1694   if ( zdappMgmtNwkDiscReqInProgress )
// 1695   {
// 1696     zdappMgmtNwkDiscReqInProgress = false;
// 1697     ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
// 1698     return ( ZSuccess );
// 1699   }
// 1700 #endif
// 1701 
// 1702   // process discovery results
// 1703   stackProfilePro = FALSE;
        MOV     ?V0 + 8,#0x0
// 1704   selected = FALSE;
// 1705 
// 1706   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV     ?V0 + 6,#0x0
// 1707   {
// 1708     pNwkDesc = NetworkList;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
// 1709     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV     ?V0 + 9,#0x0
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
// 1710     {
// 1711       if ( zgConfigPANID != 0xFFFF )
// 1712       {
// 1713         // PAN Id is preconfigured. check if it matches
// 1714         if ( pNwkDesc->panId != zgConfigPANID )
// 1715           continue;
// 1716       }
// 1717       
// 1718 
// 1719       if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
// 1720       {
// 1721         // If the extended Pan ID is commissioned to a non zero value
// 1722         // Only join the Pan that has match EPID
// 1723         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 1724           continue;
// 1725         
// 1726       }
// 1727         // check that network is allowing joining
// 1728         if ( ZSTACK_ROUTER_BUILD )
// 1729         {
// 1730           if ( stackProfilePro == FALSE )
// 1731           {
// 1732             if ( !pNwkDesc->routerCapacity )
// 1733             {
// 1734               continue;
// 1735             }
// 1736           }
// 1737           else
// 1738           {
// 1739             if ( !pNwkDesc->deviceCapacity )
// 1740             {
// 1741               continue;
// 1742             }
// 1743           }
// 1744         }
// 1745         else if ( ZSTACK_END_DEVICE_BUILD )
// 1746         {
// 1747           if ( !pNwkDesc->deviceCapacity )
// 1748           {
// 1749             continue;
// 1750           }
// 1751         }
// 1752 
// 1753         // check version of zigbee protocol
// 1754         if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 1755           continue;
// 1756 
// 1757         // check version of stack profile
// 1758         if ( pNwkDesc->stackProfile != zgStackProfile  )
// 1759         {
// 1760           if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
// 1761               || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDO_NetworkDiscoveryConfirmCB_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_3
// 1762             stackProfilePro = TRUE;
??ZDO_NetworkDiscoveryConfirmCB_4:
        MOV     ?V0 + 8,#0x1
// 1763           
// 1764           if ( stackProfile == 0 )
??ZDO_NetworkDiscoveryConfirmCB_3:
        MOV     A,?V0 + 6
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
??ZDO_NetworkDiscoveryConfirmCB_6:
        INC     ?V0 + 9
        MOV     A,R6
        ADD     A,#0x16
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R6
        ADD     A,#0xd
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 9
        CLR     C
        SUBB    A,?V0 + 7
        JC      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_7 & 0xFFFF
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDO_NetworkDiscoveryConfirmCB_8:
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_9
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_NetworkDiscoveryConfirmCB_10:
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_6
??ZDO_NetworkDiscoveryConfirmCB_9:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??nwk_ExtPANIDValid?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_11
        ; Setup parameters for call to function sAddrExtCmp
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
        MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
??ZDO_NetworkDiscoveryConfirmCB_11:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(_NIB + 17)
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_5
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
        MOV     A,#0x2
        XRL     A,R2
        JZ      $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
// 1765           {
// 1766             continue;
// 1767           }
// 1768         }
// 1769 
// 1770       // check if beacon order is the right value.. if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
// 1771       // continue;
// 1772 
// 1773       // choose this pan for joining
// 1774       break;
// 1775     } 
// 1776     if (i < ResultCount)
// 1777     {
// 1778      selected = TRUE;
// 1779       break;
// 1780     }
// 1781    
// 1782     // break if selected or stack profile pro wasn't found
// 1783     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDO_NetworkDiscoveryConfirmCB_7:
        MOV     A,?V0 + 8
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_12
// 1784     {
// 1785       break;
// 1786     }
// 1787   }
        INC     ?V0 + 6
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
// 1788 
// 1789   if ( i == ResultCount )
??ZDO_NetworkDiscoveryConfirmCB_12:
        MOV     A,?V0 + 7
        XRL     A,?V0 + 9
        JNZ     ??ZDO_NetworkDiscoveryConfirmCB_5
// 1790   {
// 1791     msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_13
// 1792   }
// 1793   else
// 1794   {
// 1795     msg.hdr.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1796     msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1797     msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1798     msg.logicalChannel = pNwkDesc->logicalChannel;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1799     msg.version = pNwkDesc->version;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1800     osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
// 1801   }
// 1802   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (uint8 *)&msg );
??ZDO_NetworkDiscoveryConfirmCB_13:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0xe
        MOV     R2,#0x1
        LCALL   ?Subroutine6 & 0xFFFF
// 1803 
// 1804   return (ZSuccess);
??CrossCallReturnLabel_22:
        MOV     R1,#0x0
        MOV     A,#0xe
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock91
// 1805 }  // ZDO_NetworkDiscoveryConfirmCB
// 1806 
// 1807 /*********************************************************************
// 1808  * @fn          ZDO_NetworkFormationConfirmCB
// 1809  *
// 1810  * @brief       This function reports the results of the request to
// 1811  *              initialize a coordinator in a network.
// 1812  *
// 1813  * @param       Status - Result of NLME_NetworkFormationRequest()
// 1814  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1815 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
        CFI Block cfiBlock92 Using cfiCommon0
        CFI Function ZDO_NetworkFormationConfirmCB
// 1816 {
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1817   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 1818 
// 1819   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_NetworkFormationConfirmCB_0
// 1820   {
// 1821     // LED Blink shows Coordinator started
// 1822     HalLedBlink (HAL_LED_1, 1, 50, 1000);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
// 1823     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        LCALL   ??Subroutine28_0 & 0xFFFF
// 1824     
// 1825     // LED off forgets HOLD_AUTO_START
// 1826     HalLedSet (HAL_LED_2, HAL_LED_MODE_OFF);
// 1827 
// 1828 #if defined ( ZBIT )
// 1829     SIM_SetColor(0xd0ffd0);
// 1830 #endif
// 1831 
// 1832     if ( devState == DEV_HOLD )
??CrossCallReturnLabel_37:
        JNZ     ??ZDO_NetworkFormationConfirmCB_1
// 1833     {
// 1834       // Began with HOLD_AUTO_START
// 1835       devState = DEV_COORD_STARTING;
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkFormationConfirmCB_1
// 1836     }
// 1837   }
// 1838 #if defined(BLINK_LEDS)
// 1839   else
// 1840     HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH );
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
// 1841 #endif
// 1842 
// 1843   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LJMP    ?Subroutine16 & 0xFFFF
        CFI EndBlock cfiBlock92
// 1844 }
// 1845 
// 1846 /*********************************************************************
// 1847  * @fn          ZDO_StartRouterConfirmCB
// 1848  *
// 1849  * @brief       This function reports the results of the request to
// 1850  *              start functioning as a router in a network.
// 1851  *
// 1852  * @param       Status - Result of NLME_StartRouterRequest()
// 1853  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1854 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
        CFI Block cfiBlock93 Using cfiCommon0
        CFI Function ZDO_StartRouterConfirmCB
// 1855 {
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1856   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 1857 
// 1858   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_StartRouterConfirmCB_0
// 1859   {
// 1860     // LED on shows Router started
// 1861     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine15 & 0xFFFF
// 1862     
// 1863     // LED off forgets HOLD_AUTO_START
// 1864     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF);
// 1865     
// 1866     if ( devState == DEV_HOLD )
??CrossCallReturnLabel_35:
        JNZ     ??ZDO_StartRouterConfirmCB_1
// 1867     {
// 1868       // Began with HOLD_AUTO_START
// 1869       devState = DEV_END_DEVICE;
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??ZDO_StartRouterConfirmCB_1
// 1870     }
// 1871   }
// 1872 #if defined(BLINK_LEDS)
// 1873   else
// 1874     HalLedSet( HAL_LED_1, HAL_LED_MODE_FLASH ); // Flash LED to show failure
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
// 1875 #endif
// 1876 
// 1877   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        LJMP    ?Subroutine16 & 0xFFFF
        CFI EndBlock cfiBlock93
// 1878 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond95) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond95) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond95) CFA_SP SP+-5
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        MOV     R2,#0x1
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond98) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond98) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond98) CFA_SP SP+-5
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond99) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond99) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond99) CFA_SP SP+-5
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100
// 1879 
// 1880 /*********************************************************************
// 1881  * @fn          ZDO_JoinConfirmCB
// 1882  *
// 1883  * @brief       This function allows the next hight layer to be notified
// 1884  *              of the results of its request to join itself or another
// 1885  *              device to a network.
// 1886  *
// 1887  * @param       Status - Result of NLME_JoinRequest()
// 1888  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1889 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI Function ZDO_JoinConfirmCB
// 1890 {
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1891   (void)PanId;  // remove if this parameter is used.
// 1892   
// 1893   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 1894 
// 1895   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_JoinConfirmCB_0
// 1896   {
// 1897     // LED on shows device joined
// 1898     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine15 & 0xFFFF
// 1899     
// 1900     // LED off forgets HOLD_AUTO_START
// 1901     HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF);
// 1902     
// 1903     if ( (devState == DEV_HOLD) )
??CrossCallReturnLabel_36:
        JNZ     ??ZDO_JoinConfirmCB_1
// 1904     {
// 1905       // Began with HOLD_AUTO_START
// 1906       devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??ZDO_JoinConfirmCB_1
// 1907     }
// 1908 
// 1909     if ( !ZG_SECURE_ENABLED )
// 1910     {
// 1911       // Notify to save info into NV
// 1912       ZDApp_NVUpdate();
// 1913     }
// 1914   }
// 1915   else
// 1916   {
// 1917 #if defined(BLINK_LEDS)
// 1918     HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH ); // Flash LED to show failure
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
// 1919 #endif
// 1920   }
// 1921 
// 1922   // Notify ZDApp
// 1923   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x2
        LJMP    ?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock101
// 1924 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond104) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond104) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond104) CFA_SP SP+-5
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond105) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond105) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond105) CFA_SP SP+-5
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_SendMsg?relay
        RET
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106
// 1925 
// 1926 /*********************************************************************
// 1927  * @fn          ZDO_AddrChangeIndicationCB
// 1928  *
// 1929  * @brief       This function notifies the application that this
// 1930  *              device's address has changed.  Could happen in 
// 1931  *              a network with stochastic addressing (PRO).
// 1932  *
// 1933  * @param       newAddr - the new address
// 1934  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1935 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI Function ZDO_AddrChangeIndicationCB
// 1936 {
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1937   (void)newAddr;  // remove if this parameter is used
// 1938   
// 1939   // Notify to save info into NV
// 1940   ZDApp_NVUpdate();
// 1941 
// 1942   // Notify the applications   
// 1943   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine4 & 0xFFFF
// 1944 
// 1945   // Send out a device announce
// 1946   ZDApp_AnnounceNewAddress();
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
// 1947 }
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock107
// 1948 
// 1949 /*********************************************************************
// 1950  * @fn          ZDO_JoinIndicationCB
// 1951  *
// 1952  * @brief       This function allows the next higher layer of a
// 1953  *              coordinator to be notified of a remote join request.
// 1954  *
// 1955  * @param       ShortAddress - 16-bit address
// 1956  * @param       ExtendedAddress - IEEE (64-bit) address
// 1957  * @param       CapabilityInformation - Association Capability Information
// 1958  * @param       type - of joining - 
// 1959  *                          NWK_ASSOC_JOIN
// 1960  *                          NWK_ASSOC_REJOIN_UNSECURE
// 1961  *                          NWK_ASSOC_REJOIN_SECURE
// 1962  *
// 1963  * @return      ZStatus_t
// 1964  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1965 ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
// 1966                                 uint8 CapabilityInformation, uint8 type )
// 1967 {
        ; Saved register size: 0
        ; Auto size: 0
// 1968   (void)ShortAddress;
// 1969   (void)ExtendedAddress;
// 1970   (void)CapabilityInformation;
// 1971   
// 1972     // Notify to save info into NV
// 1973     ZDApp_NVUpdate();
// 1974   
// 1975     // send notification to TC of new device..
// 1976     if ( ZG_SECURE_ENABLED )
// 1977     {
// 1978       if ( type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE )
// 1979       {
// 1980         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
// 1981       }
// 1982     }
// 1983   
// 1984     return ( ZSuccess );
        REQUIRE ?Subroutine17
        ; // Fall through to label ?Subroutine17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI NoFunction
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock108
// 1985 }
// 1986 
// 1987 /*********************************************************************
// 1988  * @fn          ZDO_ConcentratorIndicationCB
// 1989  *
// 1990  * @brief       This function allows the next higher layer of a
// 1991  *              device to be notified of existence of the concentrator.
// 1992  *
// 1993  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 1994  *
// 1995  * @return      void 
// 1996  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1997 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr )
ZDO_ConcentratorIndicationCB:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function ZDO_ConcentratorIndicationCB
// 1998 {
        ; Saved register size: 0
        ; Auto size: 0
// 1999   // Write your code here to do something with the concentrator's
// 2000   // address.
// 2001   (void)nwkAddr;
// 2002 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock109
// 2003 
// 2004 /*********************************************************************
// 2005  * @fn          ZDO_LeaveCnf
// 2006  *
// 2007  * @brief       This function allows the next higher layer to be
// 2008  *              notified of the results of its request for this or
// 2009  *              a child device to leave the network.
// 2010  *
// 2011  * @param       cnf - NLME_LeaveCnf_t
// 2012  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2013 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function ZDO_LeaveCnf
// 2014 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2015   // Check for this device
// 2016   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2017                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function sAddrExtCmp
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??sAddrExtCmp?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_8
// 2018   {
// 2019     // Prepare to leave with reset
// 2020     ZDApp_LeaveReset( cnf->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ?Subroutine10 & 0xFFFF
// 2021   }
// 2022   else if ( ZSTACK_ROUTER_BUILD )
// 2023   {
// 2024     // Remove device address(optionally descendents) from data
// 2025     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2026                        cnf->extAddr,
// 2027                        cnf->removeChildren );
// 2028   }
// 2029 }
??CrossCallReturnLabel_8:
        LJMP    ?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock110
// 2030 
// 2031 /*********************************************************************
// 2032  * @fn          ZDO_LeaveInd
// 2033  *
// 2034  * @brief       This function allows the next higher layer of a
// 2035  *              device to be notified of a remote leave request or
// 2036  *              indication.
// 2037  *
// 2038  * @param       ind - NLME_LeaveInd_t
// 2039  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2040 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function ZDO_LeaveInd
// 2041 {
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2042   uint8 leave;
// 2043 
// 2044 
// 2045   // Parent is requesting the leave - NWK layer filters out illegal
// 2046   // requests
// 2047   if ( ind->request == TRUE )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_0
// 2048   {
// 2049     // Notify network of leave
// 2050     if ( ZSTACK_ROUTER_BUILD )
// 2051     {
// 2052       NLME_LeaveRsp_t rsp;
// 2053       rsp.rejoin         = ind->rejoin;
// 2054       rsp.removeChildren = ind->removeChildren;
// 2055       NLME_LeaveRsp( &rsp );
// 2056     }
// 2057 
// 2058     // Prepare to leave with reset
// 2059     ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ?Subroutine10 & 0xFFFF
// 2060   }
??CrossCallReturnLabel_9:
        SJMP    ??ZDO_LeaveInd_2
// 2061   else
// 2062   {
// 2063     leave = FALSE;
// 2064 
// 2065     // Check if this device needs to leave as a child or descendent
// 2066     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_LeaveInd_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_LeaveInd_3:
        JNZ     ??ZDO_LeaveInd_2
// 2067     {
// 2068       if ( ( ind->removeChildren == TRUE               ) ||
// 2069            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2070              NODETYPE_DEVICE                           )    )
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ??Subroutine29_0 & 0xFFFF
// 2071       {
// 2072         leave = TRUE;
// 2073       }
// 2074     }
// 2075     else if ( ind->removeChildren == TRUE )
// 2076     {
// 2077       // Check NWK address allocation algorithm
// 2078       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2079     }
// 2080 
// 2081     if ( leave == TRUE )
// 2082     {
// 2083       // Prepare to leave with reset
// 2084       ZDApp_LeaveReset( ind->rejoin );
// 2085     }
// 2086     else
// 2087     {
// 2088       // Remove device address(optionally descendents) from data
// 2089       ZDApp_LeaveUpdate( ind->srcAddr,
// 2090                          ind->extAddr,
// 2091                          ind->removeChildren );
// 2092     }
// 2093   }
??CrossCallReturnLabel_41:
        XRL     A,#0x1
        JZ      ??ZDO_LeaveInd_1
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        JZ      ??ZDO_LeaveInd_1
// 2094 }
??ZDO_LeaveInd_2:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_LeaveReset?relay
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114
// 2095 
// 2096 /*********************************************************************
// 2097  * @fn          ZDO_SyncIndicationCB
// 2098  *
// 2099  * @brief       This function allows the next higher layer of a
// 2100  *              coordinator to be notified of a loss of synchronization
// 2101  *                          with the parent/child device.
// 2102  *
// 2103  * @param       type: 0 - child; 1 - parent
// 2104  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2105 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
        CFI Block cfiBlock115 Using cfiCommon0
        CFI Function ZDO_SyncIndicationCB
// 2106 {
        FUNCALL ZDO_SyncIndicationCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2107   (void)shortAddr;  // Remove this line if this parameter is used.
// 2108   
// 2109   if ( ZSTACK_END_DEVICE_BUILD
// 2110     || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityInfo & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 2111   {
// 2112     if ( type == 1 )
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??CrossCallReturnLabel_23
// 2113     {
// 2114       // We lost contact with our parent.  Clear the neighbor Table.
// 2115       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   ??nwkNeighborInitTable?relay
// 2116       
// 2117       // Start the rejoin process.
// 2118       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x3
        LCALL   ?Subroutine6 & 0xFFFF
// 2119     }
// 2120   }
// 2121 }
??CrossCallReturnLabel_23:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock115
// 2122 
// 2123 /*********************************************************************
// 2124  * @fn          ZDO_ManytoOneFailureIndicationCB
// 2125  *
// 2126  * @brief       This function allows the next higher layer of a
// 2127  *              concentrator to be notified of a many-to-one route 
// 2128  *              failure. 
// 2129  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2130 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
        CFI Block cfiBlock116 Using cfiCommon0
        CFI Function ZDO_ManytoOneFailureIndicationCB
// 2131 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2132   // By default, the concentrator automatically redo many-to-one route 
// 2133   // discovery to update all many-to-one routes in the network
// 2134   // If you want anything processing other than the default,
// 2135   // please replace the following code.
// 2136   
// 2137   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL   ??RTG_MTORouteReq?relay
// 2138 }
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock116
// 2139 
// 2140 
// 2141 /*********************************************************************
// 2142  * @fn          ZDO_PollConfirmCB
// 2143  *
// 2144  * @brief       This function allows the next higher layer to be
// 2145  *              notified of a Poll Confirm.
// 2146  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2147 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
        CFI Block cfiBlock117 Using cfiCommon0
        CFI Function ZDO_PollConfirmCB
// 2148 {
        ; Saved register size: 0
        ; Auto size: 0
// 2149   (void)status;  // Remove this line if this parameter is used.
// 2150   return;
        LJMP    ?BRET
        CFI EndBlock cfiBlock117
// 2151 }
// 2152 
// 2153 /******************************************************************************
// 2154  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 2155  *
// 2156  * @brief       Stub routine implemented by NHLE. NHLE should call
// 2157  *              <AddrMgrWriteNV> when appropriate.
// 2158  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2159 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
        CFI Block cfiBlock118 Using cfiCommon0
        CFI Function AddrMgrWriteNVRequest
// 2160 {
        ; Saved register size: 0
        ; Auto size: 0
// 2161 #if defined ( NV_RESTORE )  
// 2162   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
// 2163   {
// 2164     // Trigger to save info into NV
// 2165     ZDApp_NVUpdate();
// 2166   }
// 2167 #endif
// 2168 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock118
// 2169 
// 2170 /*********************************************************************
// 2171  * Call Back Functions from Security  - API
// 2172  */
// 2173 
// 2174  /*********************************************************************
// 2175  * @fn          ZDO_UpdateDeviceIndication
// 2176  *
// 2177  * @brief       This function notifies the "Trust Center" of a
// 2178  *              network when a device joins or leaves the network.
// 2179  *
// 2180  * @param       extAddr - pointer to 64 bit address of new device
// 2181  * @param       status  - 0 if a new device joined securely
// 2182  *                      - 1 if a new device joined un-securely
// 2183  *                      - 2 if a device left the network
// 2184  *
// 2185  * @return      true if newly joined device should be allowed to
// 2186  *                                              remain on network
// 2187  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2188 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
        CFI Block cfiBlock119 Using cfiCommon0
        CFI Function ZDO_UpdateDeviceIndication
// 2189 {
        ; Saved register size: 0
        ; Auto size: 0
// 2190   // can implement a network access policy based on the
// 2191   // IEEE address of newly joining devices...
// 2192   (void)extAddr;
// 2193   (void)status;
// 2194   
// 2195   return ZSuccess;
        LJMP    ?Subroutine17 & 0xFFFF
        CFI EndBlock cfiBlock119
// 2196 }
// 2197 
// 2198 /*********************************************************************
// 2199  * @fn          ZDApp_InMsgCB
// 2200  *
// 2201  * @brief       This function is called to pass up any message that is
// 2202  *              not yet supported.  This allows for the developer to
// 2203  *              support features themselves..
// 2204  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2205 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI Function ZDApp_InMsgCB
// 2206 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        LCALL   ?Subroutine11 & 0xFFFF
// 2207   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
??CrossCallReturnLabel_39:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#-0x80
        ANL     A,R1
        MOV     R3,A
        CLR     A
        JNZ     ??ZDApp_InMsgCB_0
        MOV     A,R3
??ZDApp_InMsgCB_0:
        JNZ     ??ZDApp_InMsgCB_1
// 2208   {
// 2209     // Handle the response message
// 2210   }
// 2211   else
// 2212   {
// 2213     // Handle the request message by sending a generic "not supported".
// 2214     // Device Announce doesn't have a response.
// 2215     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_42:
        JNZ     ??ZDApp_InMsgCB_1
        MOV     A,#0x13
        XRL     A,R0
        JNZ     ??ZDApp_InMsgCB_2
        MOV     A,R1
??ZDApp_InMsgCB_2:
        JZ      ??ZDApp_InMsgCB_1
// 2216     {
// 2217       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 2218                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#-0x80
        ORL     A,R1
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ??Subroutine29_0 & 0xFFFF
// 2219     }
// 2220   }
??CrossCallReturnLabel_43:
        MOV     R5,A
        MOV     R4,#-0x7c
        MOV     A,R6
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     R1,A
        LCALL   ??ZDP_GenericRsp?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2221 }
??ZDApp_InMsgCB_1:
        LJMP    ??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0xc
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131
// 2222 
// 2223 
// 2224 /*********************************************************************
// 2225  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 2226  *
// 2227  * @brief   Changes the Match Descriptor Response permission.
// 2228  *
// 2229  * @param   endpoint - endpoint to allow responses
// 2230  * @param   action - true to allow responses, false to not
// 2231  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2232 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
        CFI Block cfiBlock132 Using cfiCommon0
        CFI Function ZDApp_ChangeMatchDescRespPermission
// 2233 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2234   // Store the action
// 2235   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL   ??afSetMatch?relay
// 2236 }
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock132
// 2237 
// 2238 /*********************************************************************
// 2239  * @fn      ZDApp_NetworkInit()
// 2240  *
// 2241  * @brief   Used to start the network joining process
// 2242  *
// 2243  * @param   delay - mSec delay to wait before starting
// 2244  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2245 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
        CFI Block cfiBlock133 Using cfiCommon0
        CFI Function ZDApp_NetworkInit
// 2246 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2247   if ( delay )
        MOV     A,R2
        JNZ     ??ZDApp_NetworkInit_0
        MOV     A,R3
??ZDApp_NetworkInit_0:
        JZ      ??ZDApp_NetworkInit_1
// 2248   {
// 2249     // Wait awhile before starting the device
// 2250     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x1
        LCALL   ?Subroutine7 & 0xFFFF
// 2251   }
??CrossCallReturnLabel_33:
        SJMP    ??CrossCallReturnLabel_18
// 2252   else
// 2253   {
// 2254     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        LCALL   ?Subroutine20 & 0xFFFF
// 2255   }
// 2256 }
??CrossCallReturnLabel_18:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond136) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond136) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond136) CFA_SP SP+-5
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        MOV     R2,#0x10
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137
// 2257 
// 2258 /*********************************************************************
// 2259  * @fn      ZDApp_NwkStateUpdateCB()
// 2260  *
// 2261  * @brief   This function notifies that this device's network 
// 2262  *          state info has been changed.
// 2263  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2264 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
        CFI Block cfiBlock138 Using cfiCommon0
        CFI Function ZDApp_NwkStateUpdateCB
// 2265 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2266   // Notify to save info into NV
// 2267   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_get_timeoutEx?relay
// 2268   {
// 2269     // Trigger to save info into NV
// 2270     ZDApp_NVUpdate();
// 2271   }
// 2272 }
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock138
// 2273 
// 2274 /*********************************************************************
// 2275  * @fn      ZDApp_NodeProfileSync()
// 2276  *
// 2277  * @brief   Sync node with stack profile.
// 2278  *
// 2279  * @param   cfm - ZDO_NetworkDiscoveryCfm_t
// 2280  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2281 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
ZDApp_NodeProfileSync:
        CFI Block cfiBlock139 Using cfiCommon0
        CFI Function ZDApp_NodeProfileSync
// 2282 {
        FUNCALL ZDApp_NodeProfileSync, nwk_getNetworkDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2283   networkDesc_t* desc;
// 2284   uint16         panID;
// 2285 
// 2286   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_NodeProfileSync_0
// 2287   {
// 2288     panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
// 2289 
// 2290     desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
        ; Setup parameters for call to function nwk_getNetworkDesc
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??nwk_getNetworkDesc?relay
        MOV     DPL,R2
        MOV     DPH,R3
// 2291 
// 2292     if (desc != NULL)
        MOV     A,DPL
        JNZ     ??ZDApp_NodeProfileSync_1
        MOV     A,DPH
??ZDApp_NodeProfileSync_1:
        JZ      ??ZDApp_NodeProfileSync_0
// 2293     {
// 2294       if ( desc->stackProfile != zgStackProfile )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??ZDApp_NodeProfileSync_0
// 2295       {
// 2296         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        ORL     A,#0x2
        MOVX    @DPTR,A
// 2297         ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV     A,#0xc
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    @DPTR,A
// 2298         NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     R1,A
        LCALL   ??NLME_SetBroadcastFilter?relay
// 2299       }
// 2300     }
// 2301   }
// 2302 }
??ZDApp_NodeProfileSync_0:
        SJMP    ??Subroutine31_0
        CFI EndBlock cfiBlock139
// 2303 
// 2304 /*********************************************************************
// 2305  * @fn      ZDApp_StartJoiningCycle()
// 2306  *
// 2307  * @brief   Starts the joining cycle of a device.  This will only 
// 2308  *          continue an already started (or stopped) joining cycle.
// 2309  *
// 2310  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2311  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2312 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function ZDApp_StartJoiningCycle
// 2313 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2314   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StartJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StartJoiningCycle_1
// 2315   {
// 2316     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV     A,#0x1
        MOV     DPTR,#continueJoining
        MOVX    @DPTR,A
// 2317     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDApp_NetworkInit?relay
// 2318 
// 2319     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StartJoiningCycle_2
// 2320   }
// 2321   else
// 2322     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock140
// 2323 }
// 2324 
// 2325 /*********************************************************************
// 2326  * @fn      ZDApp_StopJoiningCycle()
// 2327  *
// 2328  * @brief   Stops the joining or rejoining process of a device.
// 2329  *
// 2330  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 2331  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2332 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
        CFI Block cfiBlock141 Using cfiCommon0
        CFI Function ZDApp_StopJoiningCycle
// 2333 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2334   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StopJoiningCycle_1
// 2335   {
// 2336     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        CLR     A
        MOV     DPTR,#continueJoining
        MOVX    @DPTR,A
// 2337     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StopJoiningCycle_2
// 2338   }
// 2339   else
// 2340     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock141
// 2341 }
// 2342 
// 2343 /*********************************************************************
// 2344  * @fn      ZDApp_AnnounceNewAddress()
// 2345  *
// 2346  * @brief   Send Device Announce and hold all transmissions for 
// 2347  *          new address timeout.
// 2348  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2349 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
        CFI Block cfiBlock142 Using cfiCommon0
        CFI Function ZDApp_AnnounceNewAddress
// 2350 {
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2351 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2352   // Turn off data request hold
// 2353   APSME_HoldDataRequests( 0 );
// 2354 #endif
// 2355   
// 2356   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 2357                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V0 + 1
        LCALL   ??ZDP_DeviceAnnce?relay
        MOV     A,#0x1
        SJMP    ??Subroutine30_0
        CFI EndBlock cfiBlock142
// 2358   
// 2359 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 2360   // Setup the timeout
// 2361   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
// 2362 #endif  
// 2363 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiBlock143 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock143
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiBlock144 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock144
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiBlock145 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock145
// 2364 
// 2365 /*********************************************************************
// 2366  * @fn          ZDApp_NVUpdate
// 2367  *
// 2368  * @brief       Set the NV Update Timer.
// 2369  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2370 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
        CFI Block cfiBlock146 Using cfiCommon0
        CFI Function ZDApp_NVUpdate
// 2371 {
        ; Saved register size: 0
        ; Auto size: 0
// 2372 #if defined ( NV_RESTORE )
// 2373   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 2374 #endif
// 2375 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock146
// 2376 
// 2377 /*********************************************************************
// 2378  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 2379  *
// 2380  * @brief   Returns a PAN ID for the network layer to use during
// 2381  *          a coordinator start and there is another network with 
// 2382  *          the intended PANID.
// 2383  *
// 2384  * @param   panid - the intended PAN ID
// 2385  *
// 2386  * @return  PANID to try
// 2387  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2388 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
        CFI Block cfiBlock147 Using cfiCommon0
        CFI Function ZDApp_CoordStartPANIDConflictCB
// 2389 {
        ; Saved register size: 0
        ; Auto size: 0
// 2390   return ( panid + 1 );
        MOV     A,#0x1
        ADD     A,R2
        INC     R2
        CLR     A
        ADDC    A,R3
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock147
// 2391 }
// 2392 
// 2393 /*********************************************************************
// 2394  * @fn          ZDO_SrcRtgIndCB
// 2395  *
// 2396  * @brief       This function notifies the ZDO available src route record received.
// 2397  *
// 2398  * @param       srcAddr - source address of the source route
// 2399  * @param       relayCnt - number of devices in the relay list
// 2400  * @param       relayList - relay list of the source route
// 2401  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2402 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function ZDO_SrcRtgIndCB
// 2403 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 5)
// 2404   zdoSrcRtg_t srcRtg;
// 2405   
// 2406   srcRtg.srcAddr = srcAddr;
        LCALL   ?Subroutine3 & 0xFFFF
// 2407   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_50:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 2408   srcRtg.pRelayList = pRelayList;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2409   
// 2410   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc
        MOVX    A,@DPTR
        JNZ     ??ZDO_SrcRtgIndCB_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDO_SrcRtgIndCB_0:
        JZ      ??ZDO_SrcRtgIndCB_1
// 2411   {
// 2412     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPTR,#zdoCBFunc
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
// 2413   }
// 2414 }
??ZDO_SrcRtgIndCB_1:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock148
// 2415 
// 2416 
// 2417 /*********************************************************************
// 2418  * @fn          ZDO_RegisterForZdoCB
// 2419  *
// 2420  * @brief       Call this function to register the higher layer (for 
// 2421  *              example, the Application layer or MT layer) with ZDO 
// 2422  *              callbacks to get notified of some ZDO indication like
// 2423  *              existence of a concentrator or receipt of a source 
// 2424  *              route record.
// 2425  *
// 2426  * @param       indID - ZDO Indication ID
// 2427  * @param       pFn   - Callback function pointer
// 2428  *
// 2429  * @return      ZSuccess - successful, ZInvalidParameter if not
// 2430  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2431 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI Function ZDO_RegisterForZdoCB
// 2432 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2433   // Check the range of the indication ID
// 2434   if ( indID < MAX_ZDO_CB_FUNC )
        MOV     A,R1
        JNZ     ??ZDO_RegisterForZdoCB_0
// 2435   {
// 2436     zdoCBFunc[indID] = pFn;
        MOV     DPTR,#zdoCBFunc
        LCALL   ??Subroutine32_0 & 0xFFFF
// 2437     return ZSuccess;
??CrossCallReturnLabel_48:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZdoCB_1
// 2438   }
// 2439   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP    ??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock149
// 2440 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond150 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond151) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond151) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond151) CFA_SP SP+-5
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond153 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond156) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond156) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond156) CFA_SP SP+-5
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond158) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond158) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond158) CFA_SP SP+-5
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 5)
        CFI Block cfiPicker159 Using cfiCommon1
        CFI (cfiPicker159) NoFunction
        CFI (cfiPicker159) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiPicker159

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for zdoDiscCounter>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for continueJoining>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for devState>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDApp_epDesc>`:
        DB 0
        DW ZDAppTaskID, 0H
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDApp_SavedPollRate>`:
        DW 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SecInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDOInitDevice?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDOInitDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ReadNetworkRestoreState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppDetermineDeviceType?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkStartEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_DeviceAuthEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNetworkStateEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNetworkState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNetworkState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InitUserDesc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDAppCheckForHoldKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessOSALMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessMsgCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RegisterCBs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessSecMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ProcessNetworkJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SaveNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_RestoreNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ResetTimerCancel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlBypass?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveCtrlStartup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_LeaveUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendEventMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_SendMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkDiscoveryConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_NetworkFormationConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_StartRouterConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_AddrChangeIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_JoinIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ConcentratorIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveCnf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_LeaveInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SyncIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_ManytoOneFailureIndicationCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_PollConfirmCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AddrMgrWriteNVRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_UpdateDeviceIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_InMsgCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_ChangeMatchDescRespPermission?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NetworkInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NwkStateUpdateCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NodeProfileSync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StartJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_StopJoiningCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_AnnounceNewAddress?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_NVUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDApp_CoordStartPANIDConflictCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_SrcRtgIndCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDO_RegisterForZdoCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDO_RegisterForZdoCB

        END
// 2441 
// 2442 /*********************************************************************
// 2443 *********************************************************************/
// 
// 3 915 bytes in segment BANKED_CODE
//   342 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    11 bytes in segment XDATA_I
//    11 bytes in segment XDATA_ID
//    12 bytes in segment XDATA_ROM_C
//    43 bytes in segment XDATA_Z
// 
// 4 268 bytes of CODE  memory
//     0 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  2 bytes shared)
//    54 bytes of XDATA memory
//
//Errors: none
//Warnings: none
