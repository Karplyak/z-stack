###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                01/Sep/2010  07:58:19 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC25 #
#                          30-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Component #
#                          s\stack\zdo\ZDProfile.c                            #
#    Command line       =  -f "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack- #
#                          CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Utilities\Losition                      #
#                          Position\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2 #
#                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Utilities\Losition                         #
#                          Position\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfi #
#                          g.cfg" (-DSECURE=0 -DZG_SECURE_DYNAMIC=0           #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC25 #
#                          30-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Component #
#                          s\stack\zdo\ZDProfile.c -D CoordinatorEB -D        #
#                          Location -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D  #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2 #
#                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Utilities\Losition                         #
#                          Position\CC2530DB\CoordinatorEB\List\" -lA         #
#                          "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2 #
#                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Utilities\Losition                         #
#                          Position\CC2530DB\CoordinatorEB\List\"             #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2 #
#                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Utilities\Losition                         #
#                          Position\CC2530DB\CoordinatorEB\Obj\" -e           #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Z-Stack整理Code\教學模 #
#                          組_Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2 #
#                          530-2.3.0-1.4.0\Projects\zstack\Utilities\Losition #
#                           Position\CC2530DB\" -I "D:\Z-Stack整理Code\教學模 #
#                          組_Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2 #
#                          530-2.3.0-1.4.0\Projects\zstack\Utilities\Losition #
#                           Position\CC2530DB\..\SOURCE\" -I                  #
#                          "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2 #
#                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Utilities\Losition                         #
#                          Position\CC2530DB\..\..\SOURCE\" -I                #
#                          "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2 #
#                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Utilities\Losition                         #
#                          Position\CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I     #
#                          "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2 #
#                          530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Utilities\Losition                         #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MT\"   #
#                          -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack- #
#                          CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Proje #
#                          cts\zstack\Utilities\Losition                      #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\IN #
#                          CLUDE\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex #
#                          \ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Utilities\Losition              #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TA #
#                          RGET\CC2530EB\" -I "D:\Z-Stack整理Code\教學模組_Z- #
#                          Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2 #
#                          .3.0-1.4.0\Projects\zstack\Utilities\Losition      #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\M #
#                          CU\CCSOC\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack #
#                          _Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Utilities\Losition           #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\I #
#                          NCLUDE\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_E #
#                          x\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1. #
#                          4.0\Projects\zstack\Utilities\Losition             #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          AF\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZS #
#                          tack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Utilities\Losition                 #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          NWK\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\Z #
#                          Stack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Utilities\Losition                #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          SEC\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\Z #
#                          Stack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Utilities\Losition                #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          SAPI\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ #
#                          ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Utilities\Losition               #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          SYS\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\Z #
#                          Stack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Utilities\Losition                #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          ZCL\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\Z #
#                          Stack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Utilities\Losition                #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ #
#                          ZDO\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\Z #
#                          Stack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0 #
#                          \Projects\zstack\Utilities\Losition                #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F #
#                          8W\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZS #
#                          tack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Utilities\Losition                 #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" #
#                           -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack #
#                          -CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Utilities\Losition                     #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SADDR\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack #
#                          _Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Utilities\Losition           #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC #
#                          ES\SDATA\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack #
#                          _Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Utilities\Losition           #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\IN #
#                          CLUDE\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack_Ex #
#                          \ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4 #
#                          .0\Projects\zstack\Utilities\Losition              #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HI #
#                          GH_LEVEL\" -I "D:\Z-Stack整理Code\教學模組_Z-Stack #
#                          _Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Utilities\Losition           #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LO #
#                          W_LEVEL\srf04\" -I "D:\Z-Stack整理Code\教學模組_Z- #
#                          Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2 #
#                          .3.0-1.4.0\Projects\zstack\Utilities\Losition      #
#                          Position\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LO #
#                          W_LEVEL\srf04\SINGLE_CHIP\" -I "C:\IAR             #
#                          Systems\Embedded Workbench MCS 51\8051\INC\" -I    #
#                          "C:\IAR Systems\Embedded Workbench MCS             #
#                          51\8051\INC\CLIB\" -Ohz                            #
#    List file          =  D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC25 #
#                          30-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Utilities\Losition                          #
#                          Position\CC2530DB\CoordinatorEB\List\ZDProfile.lst #
#    Object file        =  D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC25 #
#                          30-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Utilities\Losition                          #
#                          Position\CC2530DB\CoordinatorEB\Obj\ZDProfile.r51  #
#                                                                             #
#                                                                             #
###############################################################################

D:\Z-Stack整理Code\教學模組_Z-Stack_Ex\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2010-01-17 08:58:03 -0800 (Sun, 17 Jan 2010) $
      4            Revision:       $Revision: 21533 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8            Should you have any questions regarding your right to use this Software,
      9            contact Texas Instruments Incorporated at www.TI.com.
     10          **************************************************************************************************/
     11          
     12          /*********************************************************************
     13           * INCLUDES
     14           */
     15          #include "ZComdef.h"
     16          #include "OSAL.h"
     17          #include "AF.h"
     18          #include "NLMEDE.h"
     19          #include "nwk_util.h"
     20          #include "APS.h"
     21          
     22          #include "AddrMgr.h"
     23          #include "ZDConfig.h"
     24          #include "ZDProfile.h"
     25          #include "ZDObject.h"
     26          #include "ZDNwkMgr.h"
     27          
     28          #if defined( LCD_SUPPORTED )
     29            #include "OnBoard.h"
     30          #endif
     31          
     32          #include "nwk_util.h"
     33          
     34          #if defined( MT_ZDO_FUNC )
     35            #include "MT_ZDO.h"
     36          #endif
     37          
     38          /*********************************************************************
     39           * MACROS
     40           */
     41          
     42          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     43            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     44            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     45            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     46          }
     47          
     48          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     49            afStatus_t stat;                                    \
     50            ZDP_TmpBuf = (BUF)+1;                               \
     51            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     52            osal_mem_free( (BUF) );                             \
     53            ZDP_TmpBuf = ZDP_Buf+1;                             \
     54            return stat;                                        \
     55          }
     56          
     57          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     58            afStatus_t stat;                                    \
     59            ZDP_TxOptions = (TxO);                              \
     60            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     61            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     62            return stat;                                        \
     63          }
     64          
     65          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     66            afStatus_t stat;                                    \
     67            ZDP_TmpBuf = (BUF)+1;                               \
     68            ZDP_TxOptions = (TxO);                              \
     69            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     70            osal_mem_free( (BUF) );                             \
     71            ZDP_TmpBuf = ZDP_Buf+1;                             \
     72            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     73            return stat;                                        \
     74          }
     75          
     76          /*********************************************************************
     77           * CONSTANTS
     78           */
     79          
     80          #define ZDP_BUF_SZ          80
     81          

   \                                 In  segment CODE_C, align 1
     82          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
     83          
     84          /*********************************************************************
     85           * TYPEDEFS
     86           */
     87          typedef struct
     88          {
     89            void *next;
     90            uint8 taskID;
     91            uint16 clusterID;
     92          } ZDO_MsgCB_t;
     93          
     94          
     95          /*********************************************************************
     96           * GLOBAL VARIABLES
     97           */
     98          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          
    101          /*********************************************************************
    102           * EXTERNAL VARIABLES
    103           */
    104          
    105          extern endPointDesc_t ZDApp_epDesc;
    106          
    107          /*********************************************************************
    108           * EXTERNAL FUNCTIONS
    109           */
    110          
    111          /*********************************************************************
    112           * LOCAL FUNCTIONS
    113           */
    114          
    115          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    116          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    117          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    118          
    119          /*********************************************************************
    120           * LOCAL VARIABLES
    121           */
    122          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * ZDO Message Processing table
    131           */
    132          
    133          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    134          
    135          typedef struct
    136          {
    137            uint16                clusterID;
    138            pfnZDPMsgProcessor    pFn;
    139          } zdpMsgProcItem_t;
    140          

   \                                 In  segment CODE_C, align 1
    141          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000....     DW 0, ??zdpProcessAddrReq?relay, 19, ??ZDO_ProcessDeviceAnnce?relay, 1
   \            1300....
   \            0100    
   \   00000A   ....0200     DW ??zdpProcessAddrReq?relay, 2, ??ZDO_ProcessNodeDescReq?relay, 3
   \            ....0300
   \   000012   ....0400     DW ??ZDO_ProcessPowerDescReq?relay, 4, ??ZDO_ProcessSimpleDescReq?relay
   \            ....    
   \   000018   0500....     DW 5, ??ZDO_ProcessActiveEPReq?relay, 6
   \            0600    
   \   00001E   ....1100     DW ??ZDO_ProcessMatchDescReq?relay, 17, ??ZDO_ProcessUserDescReq?relay
   \            ....    
   \   000024   1400....     DW 20, ??ZDO_ProcessUserDescSet?relay, 21
   \            1500    
   \   00002A   ....FFFF     DW ??ZDO_ProcessServerDiscReq?relay, 65535, 0H
   \            0000    
    142          {
    143          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    144            // These aren't processed by sleeping end devices.
    145            { NWK_addr_req,           zdpProcessAddrReq },
    146            { Device_annce,           ZDO_ProcessDeviceAnnce },
    147          #endif
    148            { IEEE_addr_req,          zdpProcessAddrReq },
    149            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    150            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    151            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    152            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    153            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    154          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    155            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    156          #endif
    157          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    158            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    159          #endif
    160          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    161            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    162          #endif
    163          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    164            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    165          #endif
    166          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    167            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    168          #endif
    169          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    170            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    171          #endif
    172          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    173            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    174          #endif
    175          #if defined ( ZDO_USERDESC_RESPONSE )
    176            { User_Desc_req,          ZDO_ProcessUserDescReq },
    177          #endif
    178          #if defined ( ZDO_USERDESCSET_RESPONSE )
    179            { User_Desc_set,          ZDO_ProcessUserDescSet },
    180          #endif
    181          #if defined ( ZDO_SERVERDISC_RESPONSE )
    182            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    183          #endif
    184            {0xFFFF, NULL} // Last
    185          };
    186          
    187          /*********************************************************************
    188           * @fn          fillAndSend
    189           *
    190           * @brief       Combined to reduce space
    191           *
    192           * @param
    193           * @param
    194           *
    195           * @return      afStatus_t
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    198          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 6,R1
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine38 & 0xFFFF
    199            afAddrType_t afAddr;
    200          
    201            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \                     ??CrossCallReturnLabel_60:
   \   00001C                ; Setup parameters for call to function osal_memset
   \   00001C   7C0C         MOV     R4,#0xc
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7900         MOV     R1,#0x0
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??osal_memset?relay
    202            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002F   7409         MOV     A,#0x9
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   7408         MOV     A,#0x8
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000054   F0           MOVX    @DPTR,A
    203          
    204            *(ZDP_TmpBuf-1) = *transSeq;
   \   000055   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000058   E0           MOVX    A,@DPTR
   \   000059   24FF         ADD     A,#-0x1
   \   00005B   F5..         MOV     ?V0 + 4,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   34FF         ADDC    A,#-0x1
   \   000061   F5..         MOV     ?V0 + 5,A
   \   000063   85..82       MOV     DPL,?V0 + 2
   \   000066   85..83       MOV     DPH,?V0 + 3
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   85..82       MOV     DPL,?V0 + 4
   \   00006D   85..83       MOV     DPH,?V0 + 5
   \   000070   F0           MOVX    @DPTR,A
    205          
    206            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    207                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    208                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000071                ; Setup parameters for call to function AF_DataRequest
   \   000071   75..1E       MOV     ?V0 + 7,#0x1e
   \   000074   78..         MOV     R0,#?V0 + 7
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   78..         MOV     R0,#?V0 + 2
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   78..         MOV     R0,#?V0 + 4
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7401         MOV     A,#0x1
   \   000085   25..         ADD     A,?V0 + 6
   \   000087   F5..         MOV     ?V0 + 2,A
   \   000089   E4           CLR     A
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   F5..         MOV     ?V0 + 3,A
   \   00008E   78..         MOV     R0,#?V0 + 2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   7C..         MOV     R4,#(ZDApp_epDesc & 0xff)
   \   00009F   7D..         MOV     R5,#((ZDApp_epDesc >> 8) & 0xff)
   \   0000A1   7409         MOV     A,#0x9
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??AF_DataRequest?relay
   \   0000AD   7409         MOV     A,#0x9
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B2   740C         MOV     A,#0xc
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7   7F08         MOV     R7,#0x8
   \   0000B9   02....       LJMP    ?BANKED_LEAVE_XDATA
    209          
    210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET
    211          
    212          /*********************************************************************
    213           * @fn          ZDP_SendData
    214           *
    215           * @brief       This builds and send a request message that has
    216           *              NWKAddrOfInterest as its only parameter.
    217           *
    218           * @param       dstAddr - destination address
    219           * @param       cmd - clusterID
    220           * @param       dataLen - number of bytes of data
    221           * @param       data - pointer to the data
    222           * @param       SecurityEnable - Security Options
    223           *
    224           * @return      afStatus_t
    225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    227                                  byte len, uint8 *buf, byte SecurityEnable )
    228          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 1,A
    229            uint8 *pBuf = ZDP_TmpBuf;
   \   00001F   12....       LCALL   ?Subroutine34 & 0xFFFF
    230            byte cnt = len;
   \                     ??CrossCallReturnLabel_178:
   \   000022   85....       MOV     ?V0 + 4,?V0 + 0
   \   000025   8019         SJMP    ??ZDP_SendData_0
    231          
    232            while ( cnt-- )
    233            {
    234              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   12....       LCALL   ?Subroutine24 & 0xFFFF
    235            }
   \                     ??CrossCallReturnLabel_31:
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   AE82         MOV     R6,DPL
   \   000035   AF83         MOV     R7,DPH
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   A3           INC     DPTR
   \   00003C   A882         MOV     R0,DPL
   \   00003E   A983         MOV     R1,DPH
   \                     ??ZDP_SendData_0:
   \   000040   85....       MOV     ?V0 + 5,?V0 + 4
   \   000043   74FF         MOV     A,#-0x1
   \   000045   25..         ADD     A,?V0 + 5
   \   000047   F5..         MOV     ?V0 + 4,A
   \   000049   E5..         MOV     A,?V0 + 5
   \   00004B   70DA         JNZ     ??ZDP_SendData_1
    236          
    237            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    238                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \   00004D   E5..         MOV     A,?V0 + 1
   \   00004F   6004         JZ      ??ZDP_SendData_2
   \   000051   7840         MOV     R0,#0x40
   \   000053   8002         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000055   7800         MOV     R0,#0x0
   \                     ??ZDP_SendData_3:
   \   000057   E8           MOV     A,R0
   \   000058   441E         ORL     A,#0x1e
   \   00005A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E                ; Setup parameters for call to function fillAndSend
   \   00005E   78..         MOV     R0,#?V0 + 2
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   A9..         MOV     R1,?V0 + 0
   \   000065   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   E4           CLR     A
   \   00006C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   80..         SJMP    ??Subroutine94_0
    239          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL   ??fillAndSend?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine110_0
   \   000003                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    240          
    241          /*********************************************************************
    242           * @fn          ZDP_NWKAddrOfInterestReq
    243           *
    244           * @brief       This builds and send a request message that has
    245           *              NWKAddrOfInterest as its only parameter.
    246           *
    247           * @param       dstAddr - destination address
    248           * @param       nwkAddr - 16 bit address
    249           * @param       SecurityEnable - Security Options
    250           *
    251           * @return      afStatus_t
    252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    254                                               byte cmd, byte SecurityEnable )
    255          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    256            (void)SecurityEnable;  // Intentionally unreferenced parameter
    257          
    258            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine7 & 0xFFFF
    259            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    260          
    261            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \                     ??CrossCallReturnLabel_8:
   \   000008                ; Setup parameters for call to function fillAndSend
   \   000008   89..         MOV     ?V0 + 0,R1
   \   00000A                REQUIRE ?Subroutine91
   \   00000A                ; // Fall through to label ?Subroutine91
    262          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   75..00       MOV     ?V0 + 1,#0x0
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00000B   02....       LJMP    ??Subroutine107_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   7902         MOV     R1,#0x2
   \   000002                REQUIRE ??Subroutine95_0
   \   000002                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine96_0
   \   000003                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   FD           MOV     R5,A
   \   000001                REQUIRE ??Subroutine97_0
   \   000001                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   7A..         MOV     R2,#(ZDP_TransID & 0xff)
   \   000002   7B..         MOV     R3,#((ZDP_TransID >> 8) & 0xff)
   \   000004                REQUIRE ??Subroutine98_0
   \   000004                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000006   EC           MOV     A,R4
   \   000007   F0           MOVX    @DPTR,A
   \   000008   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00000B   ED           MOV     A,R5
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    263          
    264          /*********************************************************************
    265           * Address Requests
    266           */
    267          
    268          /*********************************************************************
    269           * @fn          ZDP_NwkAddrReq
    270           *
    271           * @brief       This builds and send a NWK_addr_req message.  This
    272           *              function sends a broadcast message looking for a 16
    273           *              bit address with a 64 bit address as bait.
    274           *
    275           * @param       IEEEAddress - looking for this device
    276           * @param       SecurityEnable - Security Options
    277           *
    278           * @return      afStatus_t
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine94_0
   \   000003                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    281                                     byte StartIndex, byte SecurityEnable )
    282          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 3,R1
   \   000010   8C..         MOV     ?V0 + 2,R4
    283            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   12....       LCALL   ?Subroutine38 & 0xFFFF
    284            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    285            zAddrType_t dstAddr;
    286          
    287            (void)SecurityEnable;  // Intentionally unreferenced parameter
    288          
    289            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_61:
   \   000018                ; Setup parameters for call to function sAddrExtCmp
   \   000018   EE           MOV     A,R6
   \   000019   FC           MOV     R4,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FD           MOV     R5,A
   \   00001C   7A..         MOV     R2,#(saveExtAddr & 0xff)
   \   00001E   7B..         MOV     R3,#((saveExtAddr >> 8) & 0xff)
   \   000020   12....       LCALL   ??sAddrExtCmp?relay
   \   000023   E9           MOV     A,R1
   \   000024   7012         JNZ     ??ZDP_NwkAddrReq_0
    290            {
    291              dstAddr.addrMode = AddrBroadcast;
   \   000026   7408         MOV     A,#0x8
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   740F         MOV     A,#0xf
   \   00002D   12....       LCALL   ?Subroutine46 & 0xFFFF
    292              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    293            }
   \                     ??CrossCallReturnLabel_77:
   \   000030   74FD         MOV     A,#-0x3
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74FF         MOV     A,#-0x1
   \   000036   800E         SJMP    ??CrossCallReturnLabel_21
    294            else
    295            {
    296              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000038   7408         MOV     A,#0x8
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7402         MOV     A,#0x2
   \   00003F   F0           MOVX    @DPTR,A
    297              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000040   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000043   12....       LCALL   ?Subroutine17 & 0xFFFF
    298            }
   \                     ??CrossCallReturnLabel_21:
   \   000046   F0           MOVX    @DPTR,A
    299          
    300            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   EE           MOV     A,R6
   \   000048   FC           MOV     R4,A
   \   000049   EF           MOV     A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   AA..         MOV     R2,?V0 + 0
   \   00004D   AB..         MOV     R3,?V0 + 1
   \   00004F   12....       LCALL   ??sAddrExtCpy?relay
    301          
    302            *pBuf++ = ReqType;
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   E5..         MOV     A,?V0 + 3
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
    303            *pBuf++ = StartIndex;
   \   00005A   E5..         MOV     A,?V0 + 2
   \   00005C   F0           MOVX    @DPTR,A
    304          
    305            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   00005D                ; Setup parameters for call to function fillAndSend
   \   00005D   75..00       MOV     ?V0 + 0,#0x0
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   790A         MOV     R1,#0xa
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   AC82         MOV     R4,DPL
   \   000071   AD83         MOV     R5,DPH
   \   000073   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   7409         MOV     A,#0x9
   \   00007B   02....       LJMP    ?Subroutine81 & 0xFFFF
    306          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    307          
    308          /*********************************************************************
    309           * @fn          ZDP_IEEEAddrReq
    310           *
    311           * @brief       This builds and send a IEEE_addr_req message.  This
    312           *              function sends a unicast message looking for a 64
    313           *              bit IEEE address with a 16 bit address as bait.
    314           *
    315           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    316           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    317           *                        ZDP_IEEEADDR_REQTYPE_SINGLE : 該device的short address and externed address              
    318           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED : 該device的short address and externed address及相關device的short address
    319           *
    320           * @param       SecurityEnable - Security Options
    321           *
    322           * @return      afStatus_t
    323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    325                                      byte StartIndex, byte SecurityEnable )
    326          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FD           MOV     R5,A
    327            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   12....       LCALL   ?Subroutine34 & 0xFFFF
    328            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    329            zAddrType_t dstAddr;
    330          
    331            (void)SecurityEnable;  // Intentionally unreferenced parameter
    332          
    333            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_179:
   \   00000F   7408         MOV     A,#0x8
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?Subroutine46 & 0xFFFF
    334            dstAddr.addr.shortAddr = shortAddr;
   \                     ??CrossCallReturnLabel_78:
   \   000019   EA           MOV     A,R2
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   EB           MOV     A,R3
   \   00001D   F0           MOVX    @DPTR,A
    335          
    336            *pBuf++ = LO_UINT16( shortAddr );
   \   00001E   EA           MOV     A,R2
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
    337            *pBuf++ = HI_UINT16( shortAddr );
   \   000025   EB           MOV     A,R3
   \   000026   12....       LCALL   ?Subroutine48 & 0xFFFF
    338          
    339            *pBuf++ = ReqType;
    340            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_82:
   \   000029   EC           MOV     A,R4
   \   00002A   F0           MOVX    @DPTR,A
    341          
    342            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..01       MOV     ?V0 + 0,#0x1
   \   00002E   75..00       MOV     ?V0 + 1,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7904         MOV     R1,#0x4
   \   000038   02....       LJMP    ?Subroutine82 & 0xFFFF
    343          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   ED           MOV     A,R5
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP0_8
   \   000005   AC82         MOV     R4,DPL
   \   000007   AD83         MOV     R5,DPH
   \   000009   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00000C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000F                REQUIRE ??Subroutine106_0
   \   00000F                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   7409         MOV     A,#0x9
   \   000002                REQUIRE ??Subroutine107_0
   \   000002                ; // Fall through to label ??Subroutine107_0
    344          
    345          /*********************************************************************
    346           * @fn          ZDP_MatchDescReq
    347           *
    348           * @brief       This builds and send a Match_Desc_req message.  This
    349           *              function sends a broadcast or unicast message
    350           *              requesting the list of endpoint/interfaces that
    351           *              match profile ID and cluster IDs.
    352           *
    353           * @param       dstAddr - destination address
    354           * @param       nwkAddr - network address of interest
    355           * @param       ProfileID - Profile ID
    356           * @param       NumInClusters - number of input clusters
    357           * @param       InClusterList - input cluster ID list
    358           * @param       NumOutClusters - number of output clusters
    359           * @param       OutClusterList - output cluster ID list
    360           * @param       SecurityEnable - Security Options
    361           *
    362           * @return      afStatus_t
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    365                                          uint16 ProfileID,
    366                                          byte NumInClusters, cId_t *InClusterList,
    367                                          byte NumOutClusters, cId_t *OutClusterList,
    368                                          byte SecurityEnable )
    369          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 5,R1
   \   000007   7412         MOV     A,#0x12
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000017   88..         MOV     ?V0 + 0,R0
   \   000019   89..         MOV     ?V0 + 1,R1
   \   00001B   7416         MOV     A,#0x16
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   7417         MOV     A,#0x17
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00002B   88..         MOV     ?V0 + 2,R0
   \   00002D   89..         MOV     ?V0 + 3,R1
    370            uint8 *pBuf = ZDP_TmpBuf;
   \   00002F   12....       LCALL   ?Subroutine34 & 0xFFFF
    371            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    372            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    373          
    374            (void)SecurityEnable;  // Intentionally unreferenced parameter
    375          
    376            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \                     ??CrossCallReturnLabel_180:
   \   000032   E5..         MOV     A,?V0 + 4
   \   000034   25..         ADD     A,?V0 + 5
   \   000036   C3           CLR     C
   \   000037   33           RLC     A
   \   000038   2406         ADD     A,#0x6
   \   00003A   F5..         MOV     ?V0 + 6,A
    377          
    378            if ( len >= ZDP_BUF_SZ-1 )
   \   00003C   C3           CLR     C
   \   00003D   944F         SUBB    A,#0x4f
   \   00003F   4005         JC      ??ZDP_MatchDescReq_0
    379            {
    380              return afStatus_MEM_FAIL;
   \   000041   7910         MOV     R1,#0x10
   \   000043   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    381            }
    382          
    383            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    384            // this command to 0xFFFF.  So, here we will filter this and replace 
    385            // with 0xFFFD to only send to devices with RX ON.  This includes the 
    386            // network address of interest.
    387            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    388                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0 + 7,A
   \   000055   740F         MOV     A,#0xf
   \   000057   65..         XRL     A,?V0 + 7
   \   000059   6006         JZ      ??ZDP_MatchDescReq_2
   \   00005B   7402         MOV     A,#0x2
   \   00005D   65..         XRL     A,?V0 + 7
   \   00005F   701A         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   64FF         XRL     A,#0xff
   \   000068   7004         JNZ     ??ZDP_MatchDescReq_4
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   64FF         XRL     A,#0xff
   \                     ??ZDP_MatchDescReq_4:
   \   00006E   700B         JNZ     ??ZDP_MatchDescReq_3
    389            {
    390              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   74FD         MOV     A,#-0x3
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   74FF         MOV     A,#-0x1
   \   00007A   F0           MOVX    @DPTR,A
    391            }
    392            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00007B   74FF         MOV     A,#-0x1
   \   00007D   6C           XRL     A,R4
   \   00007E   7003         JNZ     ??ZDP_MatchDescReq_5
   \   000080   74FF         MOV     A,#-0x1
   \   000082   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000083   7004         JNZ     ??ZDP_MatchDescReq_6
    393            {
    394              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000085   7CFD         MOV     R4,#-0x3
   \   000087   7DFF         MOV     R5,#-0x1
    395            }
    396            
    397            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000089   EC           MOV     A,R4
   \   00008A   8882         MOV     DPL,R0
   \   00008C   8983         MOV     DPH,R1
   \   00008E   12....       LCALL   ?Subroutine48 & 0xFFFF
    398            *pBuf++ = HI_UINT16( nwkAddr );
    399          
    400            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_83:
   \   000091   EE           MOV     A,R6
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
    401            *pBuf++ = HI_UINT16( ProfileID );
   \   000094   EF           MOV     A,R7
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
    402          
    403            *pBuf++ = NumInClusters; // Input cluster list
   \   000097   E5..         MOV     A,?V0 + 5
   \   000099   12....       LCALL   ??Subroutine108_0 & 0xFFFF
    404            if ( NumInClusters )
   \                     ??CrossCallReturnLabel_156:
   \   00009C   6016         JZ      ??ZDP_MatchDescReq_7
    405            {
    406              for (i=0; i<NumInClusters; ++i)  {
   \   00009E   7E00         MOV     R6,#0x0
    407                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_8:
   \   0000A0   EE           MOV     A,R6
   \   0000A1   C3           CLR     C
   \   0000A2   33           RLC     A
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   33           RLC     A
   \   0000A6   FD           MOV     R5,A
   \   0000A7   E5..         MOV     A,?V0 + 0
   \   0000A9   2C           ADD     A,R4
   \   0000AA   FC           MOV     R4,A
   \   0000AB   E5..         MOV     A,?V0 + 1
   \   0000AD   12....       LCALL   ?Subroutine2 & 0xFFFF
    408                *pBuf++ = HI_UINT16( InClusterList[i] );
    409              }
    410            }
   \                     ??CrossCallReturnLabel_0:
   \   0000B0   95..         SUBB    A,?V0 + 5
   \   0000B2   40EC         JC      ??ZDP_MatchDescReq_8
    411          
    412            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   0000B4   12....       LCALL   ?Subroutine41 & 0xFFFF
    413            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_158:
   \   0000B7   6016         JZ      ??ZDP_MatchDescReq_9
    414            {
    415              for (i=0; i<NumOutClusters; ++i)  {
   \   0000B9   7E00         MOV     R6,#0x0
    416                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_10:
   \   0000BB   EE           MOV     A,R6
   \   0000BC   C3           CLR     C
   \   0000BD   33           RLC     A
   \   0000BE   FC           MOV     R4,A
   \   0000BF   E4           CLR     A
   \   0000C0   33           RLC     A
   \   0000C1   FD           MOV     R5,A
   \   0000C2   E5..         MOV     A,?V0 + 2
   \   0000C4   2C           ADD     A,R4
   \   0000C5   FC           MOV     R4,A
   \   0000C6   E5..         MOV     A,?V0 + 3
   \   0000C8   12....       LCALL   ?Subroutine2 & 0xFFFF
    417                *pBuf++ = HI_UINT16( OutClusterList[i] );
    418              }
    419            }
   \                     ??CrossCallReturnLabel_1:
   \   0000CB   95..         SUBB    A,?V0 + 4
   \   0000CD   40EC         JC      ??ZDP_MatchDescReq_10
    420          
    421            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_9:
   \   0000CF                ; Setup parameters for call to function fillAndSend
   \   0000CF   75..06       MOV     ?V0 + 0,#0x6
   \   0000D2   75..00       MOV     ?V0 + 1,#0x0
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   A9..         MOV     R1,?V0 + 6
   \   0000DC   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000E2   80..         SJMP    ??Subroutine99_0
    422          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   3D           ADDC    A,R5
   \   000001   FD           MOV     R5,A
   \   000002   8C82         MOV     DPL,R4
   \   000004   8D83         MOV     DPH,R5
   \   000006   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000009   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00000C   0E           INC     R6
   \   00000D   EE           MOV     A,R6
   \   00000E   C3           CLR     C
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E5..         MOV     A,?V0 + 4
   \   000006                REQUIRE ??Subroutine108_0
   \   000006                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine121_0
   \   000004                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine122_0
   \   000001                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005                REQUIRE ??Subroutine124_0
   \   000005                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET
    423          
    424          /*********************************************************************
    425           * @fn          ZDP_SimpleDescReq
    426           *
    427           * @brief       This builds and send a NWK_Simple_Desc_req
    428           *              message.  This function sends unicast message to the
    429           *              destination device.
    430           *
    431           * @param       dstAddr - destination address
    432           * @param       nwkAddr - 16 bit address
    433           * @param       epIntf - endpoint/interface
    434           * @param       SecurityEnable - Security Options
    435           *
    436           * @return      afStatus_t
    437           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    439                                              byte endPoint, byte SecurityEnable )
    440          
    441          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    442            (void)SecurityEnable;  // Intentionally unreferenced parameter
    443          
    444            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine7 & 0xFFFF
    445            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    446            ZDP_TmpBuf[2] = endPoint;
   \                     ??CrossCallReturnLabel_9:
   \   000008   12....       LCALL   ?Subroutine19 & 0xFFFF
    447          
    448            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_24:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0 + 0,#0x4
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00001B   02....       LJMP    ??Subroutine107_0 & 0xFFFF
    449          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    450          
    451          /*********************************************************************
    452           * @fn          ZDP_UserDescSet
    453           *
    454           * @brief       This builds and send a User_Desc_set message to set
    455           *              the user descriptor.  This function sends unicast
    456           *              message to the destination device.
    457           *
    458           * @param       dstAddr - destination address
    459           * @param       nwkAddr - 16 bit address
    460           * @param       UserDescriptor - user descriptor
    461           * @param       SecurityEnable - Security Options
    462           *
    463           * @return      afStatus_t
    464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    466                                    UserDescriptorFormat_t *UserDescriptor,
    467                                    byte SecurityEnable )
    468          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740F         MOV     A,#0xf
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine110_0 & 0xFFFF
    469            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_168:
   \   000011   12....       LCALL   ?Subroutine18 & 0xFFFF
    470            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    471                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_22:
   \   000014   FA           MOV     R2,A
   \   000015   C3           CLR     C
   \   000016   9410         SUBB    A,#0x10
   \   000018   5004         JNC     ??ZDP_UserDescSet_0
   \   00001A   8A..         MOV     ?V0 + 2,R2
   \   00001C   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001E   75..10       MOV     ?V0 + 2,#0x10
    472            byte addrLen = 2;
    473          
    474            (void)SecurityEnable;  // Intentionally unreferenced parameter
    475          
    476            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000021   EC           MOV     A,R4
   \   000022   85..82       MOV     DPL,?V0 + 0
   \   000025   85..83       MOV     DPH,?V0 + 1
   \   000028   12....       LCALL   ?Subroutine48 & 0xFFFF
    477            *pBuf++ = HI_UINT16( nwkAddr );
    478          
    479            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_84:
   \   00002B   E5..         MOV     A,?V0 + 2
   \   00002D   12....       LCALL   ?Subroutine40 & 0xFFFF
    480            addrLen = 3;
    481          
    482            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_68:
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000033   AC..         MOV     R4,?V0 + 2
   \   000035   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    483            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7410         MOV     A,#0x10
   \   00003D   C3           CLR     C
   \   00003E   95..         SUBB    A,?V0 + 2
   \   000040   FC           MOV     R4,A
   \   000041   E4           CLR     A
   \   000042   9400         SUBB    A,#0x0
   \   000044   FD           MOV     R5,A
   \   000045   7920         MOV     R1,#0x20
   \   000047   12....       LCALL   ??osal_memset?relay
    484          
    485            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   00004A                ; Setup parameters for call to function fillAndSend
   \   00004A   75..14       MOV     ?V0 + 0,#0x14
   \   00004D   75..00       MOV     ?V0 + 1,#0x0
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   7913         MOV     R1,#0x13
   \   000057   EE           MOV     A,R6
   \   000058   FC           MOV     R4,A
   \   000059   EF           MOV     A,R7
   \   00005A   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00005D                REQUIRE ?Subroutine87
   \   00005D                ; // Fall through to label ?Subroutine87
    486          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   8583..       MOV     ?V0 + 1,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   A982         MOV     R1,DPL
   \   00000F   AA83         MOV     R2,DPH
   \   000011   89..         MOV     ?V0 + 4,R1
   \   000013   8A..         MOV     ?V0 + 5,R2
   \   000015   75..00       MOV     ?V0 + 6,#0x0
   \   000018   78..         MOV     R0,#?V0 + 4
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   AA..         MOV     R2,?V0 + 0
   \   000004   AB..         MOV     R3,?V0 + 1
   \   000006                REQUIRE ??Subroutine126_0
   \   000006                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    487          
    488          /*********************************************************************
    489           * @fn          ZDP_ServerDiscReq
    490           *
    491           * @brief       Build and send a Server_Discovery_req request message.
    492           *
    493           * @param       serverMask - 16-bit bit-mask of server services being sought.
    494           * @param       SecurityEnable - Security Options
    495           *
    496           * @return      afStatus_t
    497           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    498          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    499          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    500            uint8 *pBuf = ZDP_TmpBuf;
   \   00000A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FC           MOV     R4,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FD           MOV     R5,A
    501            zAddrType_t dstAddr;
    502          
    503            dstAddr.addrMode = AddrBroadcast;
   \   000012   7408         MOV     A,#0x8
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine45 & 0xFFFF
    504            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    505          
    506            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_75:
   \   00001A   EA           MOV     A,R2
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
    507            *pBuf = HI_UINT16( serverMask );
   \   000021   EB           MOV     A,R3
   \   000022   F0           MOVX    @DPTR,A
    508          
    509            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    510                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   000023   E9           MOV     A,R1
   \   000024   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000026   7440         MOV     A,#0x40
   \   000028   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   00002A   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   00002B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F                ; Setup parameters for call to function fillAndSend
   \   00002F   75..15       MOV     ?V0 + 0,#0x15
   \   000032   75..00       MOV     ?V0 + 1,#0x0
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7902         MOV     R1,#0x2
   \   00003C   E9           MOV     A,R1
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   AC82         MOV     R4,DPL
   \   000042   AD83         MOV     R5,DPH
   \   000044   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E4           CLR     A
   \   00004B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   02....       LJMP    ??Subroutine106_0 & 0xFFFF
    511          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    512          
    513          /*********************************************************************
    514           * @fn          ZDP_DeviceAnnce
    515           *
    516           * @brief       This builds and send a Device_Annce message.  This
    517           *              function sends a broadcast message.
    518           *
    519           * @param       nwkAddr - 16 bit address of the device
    520           * @param       IEEEAddr - 64 bit address of the device
    521           * @param       capabilities - device capabilities.  This field is only
    522           *                 sent for v1.1 networks.
    523           * @param       SecurityEnable - Security Options
    524           *
    525           * @return      afStatus_t
    526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    528                                        byte capabilities, byte SecurityEnable )
    529          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    530            zAddrType_t dstAddr;
    531            uint8 len;
    532          
    533            (void)SecurityEnable;  // Intentionally unreferenced parameter
    534          
    535            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine45 & 0xFFFF
    536            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    537          
    538            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_76:
   \   000014   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine20 & 0xFFFF
    539            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_133:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    540            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   12....       LCALL   ?Subroutine13 & 0xFFFF
    541            len = 2 + Z_EXTADDR_LEN;
    542          
    543            ZDP_TmpBuf[10] = capabilities;
   \                     ??CrossCallReturnLabel_103:
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   EE           MOV     A,R6
   \   00002E   F0           MOVX    @DPTR,A
    544            len++;
    545          
    546            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00002F                ; Setup parameters for call to function fillAndSend
   \   00002F   75..13       MOV     ?V0 + 0,#0x13
   \   000032   75..00       MOV     ?V0 + 1,#0x0
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   790B         MOV     R1,#0xb
   \   00003C   02....       LJMP    ?Subroutine82 & 0xFFFF
    547          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??sAddrExtCpy?relay
   \   000004   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A                REQUIRE ?Subroutine83
   \   00000A                ; // Fall through to label ?Subroutine83

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   22           RET
    548          
    549          /*********************************************************************
    550           * Address Responses
    551           */
    552          
    553          /*********************************************************************
    554           * @fn      zdpProcessAddrReq
    555           *
    556           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    557           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    558           *
    559           * @param   inMsg - incoming message
    560           *
    561           * @return  none
    562           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    563          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    564          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
    565            associated_devices_t *pAssoc;
    566            uint8 reqType;
    567            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0 + 2,#-0x2
   \   000011   75..FF       MOV     ?V0 + 3,#-0x1
    568            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    569          
    570            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   EA           MOV     A,R2
   \   00001B   240C         ADD     A,#0xc
   \   00001D   F5..         MOV     ?V0 + 10,A
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   F5..         MOV     ?V0 + 11,A
   \   000024   85..82       MOV     DPL,?V0 + 10
   \   000027   F583         MOV     DPH,A
   \   000029   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00002C   EA           MOV     A,R2
   \   00002D   7001         JNZ     ??zdpProcessAddrReq_0
   \   00002F   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_0:
   \   000030   7004         JNZ     ??zdpProcessAddrReq_1
   \   000032   7C08         MOV     R4,#0x8
   \   000034   8002         SJMP    ??zdpProcessAddrReq_2
   \                     ??zdpProcessAddrReq_1:
   \   000036   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_2:
   \   000038   E5..         MOV     A,?V0 + 4
   \   00003A   2413         ADD     A,#0x13
   \   00003C   F5..         MOV     ?V0 + 12,A
   \   00003E   E5..         MOV     A,?V0 + 5
   \   000040   3400         ADDC    A,#0x0
   \   000042   F5..         MOV     ?V0 + 13,A
   \   000044   85..82       MOV     DPL,?V0 + 12
   \   000047   F583         MOV     DPH,A
   \   000049   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00004C   2C           ADD     A,R4
   \   00004D   F582         MOV     DPL,A
   \   00004F   E9           MOV     A,R1
   \   000050   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000053   F5..         MOV     ?V0 + 7,A
    571          
    572            if ( inMsg->clusterID == NWK_addr_req )
   \   000055   EA           MOV     A,R2
   \   000056   7001         JNZ     ??zdpProcessAddrReq_3
   \   000058   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_3:
   \   000059   704C         JNZ     ??zdpProcessAddrReq_4
    573          
    574            {
    575              ieee = inMsg->asdu;
   \   00005B   88..         MOV     ?V0 + 0,R0
   \   00005D   89..         MOV     ?V0 + 1,R1
    576          
    577              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00005F                ; Setup parameters for call to function sAddrExtCmp
   \   00005F   AC..         MOV     R4,?V0 + 0
   \   000061   AD..         MOV     R5,?V0 + 1
   \   000063   7A..         MOV     R2,#(saveExtAddr & 0xff)
   \   000065   7B..         MOV     R3,#((saveExtAddr >> 8) & 0xff)
   \   000067   12....       LCALL   ??sAddrExtCmp?relay
   \   00006A   E9           MOV     A,R1
   \   00006B   6006         JZ      ??zdpProcessAddrReq_5
    578              {
    579                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00006D   12....       LCALL   ?Subroutine0 & 0xFFFF
    580              }
   \                     ??CrossCallReturnLabel_192:
   \   000070   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    581              // Handle response for sleeping end devices
    582              else if ( (ZSTACK_ROUTER_BUILD)
    583                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    584                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_5:
   \   000073                ; Setup parameters for call to function AssocGetWithExt
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   12....       LCALL   ??AssocGetWithExt?relay
   \   00007A   EA           MOV     A,R2
   \   00007B   F8           MOV     R0,A
   \   00007C   EB           MOV     A,R3
   \   00007D   F9           MOV     R1,A
   \   00007E   EA           MOV     A,R2
   \   00007F   7001         JNZ     ??zdpProcessAddrReq_7
   \   000081   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_7:
   \   000082   7003         JNZ     $+5
   \   000084   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   6401         XRL     A,#0x1
   \   000092   6003         JZ      $+5
   \   000094   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
    585              {
    586                aoi = pAssoc->shortAddr;
   \   000097   8882         MOV     DPL,R0
   \   000099   8983         MOV     DPH,R1
   \   00009B   12....       LCALL   ??Subroutine111_0 & 0xFFFF
    587                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_187:
   \   00009E   E5..         MOV     A,?V0 + 7
   \   0000A0   607A         JZ      ??zdpProcessAddrReq_6
    588                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_9:
   \   0000A2   75..FF       MOV     ?V0 + 7,#-0x1
   \   0000A5   8075         SJMP    ??zdpProcessAddrReq_6
    589              }
    590            }
    591            else  // if ( inMsg->clusterID == IEEE_addr_req )
    592            {
    593              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_4:
   \   0000A7   8882         MOV     DPL,R0
   \   0000A9   8983         MOV     DPH,R1
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   FA           MOV     R2,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F9           MOV     R1,A
   \   0000B0   EA           MOV     A,R2
   \   0000B1   F5..         MOV     ?V0 + 2,A
   \   0000B3   E9           MOV     A,R1
   \   0000B4   F5..         MOV     ?V0 + 3,A
    594          
    595              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000B6   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   65..         XRL     A,?V0 + 2
   \   0000BC   7004         JNZ     ??zdpProcessAddrReq_10
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_10:
   \   0000C2   7008         JNZ     ??zdpProcessAddrReq_11
    596              {
    597                ieee = saveExtAddr;
   \   0000C4   75....       MOV     ?V0 + 0,#(saveExtAddr & 0xff)
   \   0000C7   75....       MOV     ?V0 + 1,#((saveExtAddr >> 8) & 0xff)
   \   0000CA   8050         SJMP    ??zdpProcessAddrReq_6
    598              }
    599              else if ( (ZSTACK_ROUTER_BUILD)
    600                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    601                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_11:
   \   0000CC                ; Setup parameters for call to function AssocGetWithShort
   \   0000CC   AB..         MOV     R3,?V0 + 3
   \   0000CE   12....       LCALL   ??AssocGetWithShort?relay
   \   0000D1   EA           MOV     A,R2
   \   0000D2   F8           MOV     R0,A
   \   0000D3   EB           MOV     A,R3
   \   0000D4   F9           MOV     R1,A
   \   0000D5   EA           MOV     A,R2
   \   0000D6   7001         JNZ     ??zdpProcessAddrReq_12
   \   0000D8   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_12:
   \   0000D9   6041         JZ      ??zdpProcessAddrReq_6
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   6401         XRL     A,#0x1
   \   0000E6   7034         JNZ     ??zdpProcessAddrReq_6
    602              {
    603                AddrMgrEntry_t addrEntry;
    604                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000E8   7401         MOV     A,#0x1
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E4           CLR     A
   \   0000EE   12....       LCALL   ?Subroutine49 & 0xFFFF
    605                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_282:
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000F6   740C         MOV     A,#0xc
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL   ??Subroutine129_0 & 0xFFFF
    606                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_292:
   \   0000FE                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000FE   7401         MOV     A,#0x1
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   AA82         MOV     R2,DPL
   \   000105   AB83         MOV     R3,DPH
   \   000107   12....       LCALL   ??AddrMgrEntryGet?relay
   \   00010A   E9           MOV     A,R1
   \   00010B   600B         JZ      ??zdpProcessAddrReq_13
    607                {
    608                  ieee = addrEntry.extAddr;
   \   00010D   7404         MOV     A,#0x4
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   8582..       MOV     ?V0 + 0,DPL
   \   000115   8583..       MOV     ?V0 + 1,DPH
    609                }
    610          
    611                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_13:
   \   000118   E5..         MOV     A,?V0 + 7
   \   00011A   7086         JNZ     ??zdpProcessAddrReq_9
    612                  reqType = 0xFF; // Force Invalid
    613              }
    614            }
    615          
    616            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_6:
   \   00011C   74FE         MOV     A,#-0x2
   \   00011E   65..         XRL     A,?V0 + 2
   \   000120   7004         JNZ     ??zdpProcessAddrReq_14
   \   000122   74FF         MOV     A,#-0x1
   \   000124   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_14:
   \   000126   6008         JZ      ??zdpProcessAddrReq_8
   \   000128   E5..         MOV     A,?V0 + 0
   \   00012A   7002         JNZ     ??zdpProcessAddrReq_15
   \   00012C   E5..         MOV     A,?V0 + 1
   \                     ??zdpProcessAddrReq_15:
   \   00012E   7010         JNZ     ??zdpProcessAddrReq_16
   \                     ??zdpProcessAddrReq_8:
   \   000130   E5..         MOV     A,?V0 + 4
   \   000132   240B         ADD     A,#0xb
   \   000134   F582         MOV     DPL,A
   \   000136   E5..         MOV     A,?V0 + 5
   \   000138   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00013B   6003         JZ      $+5
   \   00013D   02....       LJMP    ??zdpProcessAddrReq_17 & 0xFFFF
    617            {
    618              uint8 stat;
    619              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_16:
   \   000140   12....       LCALL   ?Subroutine8 & 0xFFFF
    620              // Status + IEEE-Addr + Nwk-Addr.
    621              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_265:
   \   000143   75..0B       MOV     ?V0 + 6,#0xb
    622              
    623              // If aoi and iee are both setup, we found results
    624              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000146   74FE         MOV     A,#-0x2
   \   000148   65..         XRL     A,?V0 + 2
   \   00014A   7004         JNZ     ??zdpProcessAddrReq_18
   \   00014C   74FF         MOV     A,#-0x1
   \   00014E   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_18:
   \   000150   601C         JZ      ??zdpProcessAddrReq_19
   \   000152   E5..         MOV     A,?V0 + 0
   \   000154   7002         JNZ     ??zdpProcessAddrReq_20
   \   000156   E5..         MOV     A,?V0 + 1
   \                     ??zdpProcessAddrReq_20:
   \   000158   6014         JZ      ??zdpProcessAddrReq_19
    625              {
    626                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED)) 
    627                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   00015A   E5..         MOV     A,?V0 + 7
   \   00015C   6006         JZ      ??zdpProcessAddrReq_21
   \   00015E   7401         MOV     A,#0x1
   \   000160   65..         XRL     A,?V0 + 7
   \   000162   7005         JNZ     ??zdpProcessAddrReq_22
   \                     ??zdpProcessAddrReq_21:
   \   000164   75..00       MOV     ?V0 + 8,#0x0
   \   000167   8020         SJMP    ??zdpProcessAddrReq_23
   \                     ??zdpProcessAddrReq_22:
   \   000169   75..80       MOV     ?V0 + 8,#-0x80
   \   00016C   801B         SJMP    ??zdpProcessAddrReq_23
    628              }
    629              else 
    630              {
    631                // not found and the req was unicast to this device
    632                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_19:
   \   00016E   75..81       MOV     ?V0 + 8,#-0x7f
    633                
    634                // Fill in the missing field with this device's address
    635                if ( inMsg->clusterID == NWK_addr_req )
   \   000171   85..82       MOV     DPL,?V0 + 10
   \   000174   85..83       MOV     DPH,?V0 + 11
   \   000177   E0           MOVX    A,@DPTR
   \   000178   7002         JNZ     ??zdpProcessAddrReq_24
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \                     ??zdpProcessAddrReq_24:
   \   00017C   7005         JNZ     ??zdpProcessAddrReq_25
    636                {
    637                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00017E   12....       LCALL   ?Subroutine0 & 0xFFFF
    638                }
   \                     ??CrossCallReturnLabel_193:
   \   000181   8006         SJMP    ??zdpProcessAddrReq_23
    639                else
    640                {
    641                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_25:
   \   000183   75....       MOV     ?V0 + 0,#(saveExtAddr & 0xff)
   \   000186   75....       MOV     ?V0 + 1,#((saveExtAddr >> 8) & 0xff)
    642                }
    643              }
    644          
    645              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_23:
   \   000189   8E82         MOV     DPL,R6
   \   00018B   8F83         MOV     DPH,R7
   \   00018D   E5..         MOV     A,?V0 + 8
   \   00018F   F0           MOVX    @DPTR,A
   \   000190   A3           INC     DPTR
    646          
    647              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   000191                ; Setup parameters for call to function sAddrExtCpy
   \   000191   AC..         MOV     R4,?V0 + 0
   \   000193   AD..         MOV     R5,?V0 + 1
   \   000195   AA82         MOV     R2,DPL
   \   000197   AB83         MOV     R3,DPH
   \   000199   12....       LCALL   ?Subroutine60 & 0xFFFF
    648          
    649              *pBuf++ = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_231:
   \   00019C   E5..         MOV     A,?V0 + 2
   \   00019E   F0           MOVX    @DPTR,A
   \   00019F   A3           INC     DPTR
    650              *pBuf++ = HI_UINT16( aoi );
   \   0001A0   E5..         MOV     A,?V0 + 3
   \   0001A2   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    651          
    652              if ( ZSTACK_ROUTER_BUILD )
    653              {
    654                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    655                     && (stat == ZDP_SUCCESS) )
   \                     ??CrossCallReturnLabel_210:
   \   0001A5   7401         MOV     A,#0x1
   \   0001A7   65..         XRL     A,?V0 + 7
   \   0001A9   6003         JZ      $+5
   \   0001AB   02....       LJMP    ??zdpProcessAddrReq_26 & 0xFFFF
   \   0001AE   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   65..         XRL     A,?V0 + 2
   \   0001B4   7004         JNZ     ??zdpProcessAddrReq_27
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_27:
   \   0001BA   6003         JZ      $+5
   \   0001BC   02....       LJMP    ??zdpProcessAddrReq_26 & 0xFFFF
   \   0001BF   E5..         MOV     A,?V0 + 8
   \   0001C1   6003         JZ      $+5
   \   0001C3   02....       LJMP    ??zdpProcessAddrReq_26 & 0xFFFF
    656                {
    657                  uint8  cnt = 0;
   \   0001C6   E4           CLR     A
   \   0001C7   85..82       MOV     DPL,?XSP + 0
   \   0001CA   85..83       MOV     DPH,?XSP + 1
   \   0001CD   F0           MOVX    @DPTR,A
    658                  uint16 *list = AssocMakeList( &cnt );
   \   0001CE                ; Setup parameters for call to function AssocMakeList
   \   0001CE   AA82         MOV     R2,DPL
   \   0001D0   AB83         MOV     R3,DPH
   \   0001D2   12....       LCALL   ??AssocMakeList?relay
    659          
    660                  if ( list != NULL )
   \   0001D5   8E82         MOV     DPL,R6
   \   0001D7   8F83         MOV     DPH,R7
   \   0001D9   A3           INC     DPTR
   \   0001DA   A983         MOV     R1,DPH
   \   0001DC   EA           MOV     A,R2
   \   0001DD   7001         JNZ     ??zdpProcessAddrReq_28
   \   0001DF   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_28:
   \   0001E0   7003         JNZ     $+5
   \   0001E2   02....       LJMP    ??zdpProcessAddrReq_29 & 0xFFFF
    661                  {
    662                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0001E5   85..82       MOV     DPL,?V0 + 10
   \   0001E8   85..83       MOV     DPH,?V0 + 11
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   7002         JNZ     ??zdpProcessAddrReq_30
   \   0001EE   A3           INC     DPTR
   \   0001EF   E0           MOVX    A,@DPTR
   \                     ??zdpProcessAddrReq_30:
   \   0001F0   7004         JNZ     ??zdpProcessAddrReq_31
   \   0001F2   7C08         MOV     R4,#0x8
   \   0001F4   8002         SJMP    ??zdpProcessAddrReq_32
   \                     ??zdpProcessAddrReq_31:
   \   0001F6   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_32:
   \   0001F8   85..82       MOV     DPL,?V0 + 12
   \   0001FB   85..83       MOV     DPH,?V0 + 13
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   2C           ADD     A,R4
   \   000200   F5..         MOV     ?V0 + 0,A
   \   000202   A3           INC     DPTR
   \   000203   E0           MOVX    A,@DPTR
   \   000204   3400         ADDC    A,#0x0
   \   000206   85..82       MOV     DPL,?V0 + 0
   \   000209   F583         MOV     DPH,A
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F5..         MOV     ?V0 + 0,A
    663                    uint16 *pList = list + idx;
   \   00020F   C3           CLR     C
   \   000210   33           RLC     A
   \   000211   FC           MOV     R4,A
   \   000212   E4           CLR     A
   \   000213   33           RLC     A
   \   000214   FD           MOV     R5,A
   \   000215   EA           MOV     A,R2
   \   000216   2C           ADD     A,R4
   \   000217   FC           MOV     R4,A
   \   000218   EB           MOV     A,R3
   \   000219   3D           ADDC    A,R5
   \   00021A   FD           MOV     R5,A
    664          
    665                    // NumAssocDev field is only present on success.
    666                    if ( cnt > idx )
   \   00021B   85..82       MOV     DPL,?XSP + 0
   \   00021E   85..83       MOV     DPH,?XSP + 1
   \   000221   E0           MOVX    A,@DPTR
   \   000222   F5..         MOV     ?V0 + 1,A
   \   000224   E5..         MOV     A,?V0 + 0
   \   000226   C3           CLR     C
   \   000227   95..         SUBB    A,?V0 + 1
   \   000229   500D         JNC     ??zdpProcessAddrReq_33
    667                    {
    668                      cnt -= idx;
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   C3           CLR     C
   \   00022D   95..         SUBB    A,?V0 + 0
   \   00022F   F0           MOVX    @DPTR,A
    669                      len += (cnt * sizeof( uint16 ));
   \   000230   C3           CLR     C
   \   000231   33           RLC     A
   \   000232   240B         ADD     A,#0xb
   \   000234   F5..         MOV     ?V0 + 6,A
   \   000236   8002         SJMP    ??zdpProcessAddrReq_34
    670                    }
    671                    else
    672                    {
    673                      cnt = 0;
   \                     ??zdpProcessAddrReq_33:
   \   000238   E4           CLR     A
   \   000239   F0           MOVX    @DPTR,A
    674                    }
    675                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_34:
   \   00023A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   00023D   0E           INC     R6
   \   00023E   E9           MOV     A,R1
   \   00023F   FF           MOV     R7,A
    676                    len++;
    677          
    678                    // StartIndex field is only present if NumAssocDev field is non-zero.
    679                    *pBuf++ = idx;
   \   000240   8E82         MOV     DPL,R6
   \   000242   8F83         MOV     DPH,R7
   \   000244   E5..         MOV     A,?V0 + 0
   \   000246   F0           MOVX    @DPTR,A
   \   000247   A3           INC     DPTR
   \   000248   0E           INC     R6
   \   000249   AF83         MOV     R7,DPH
    680                    len++;
   \   00024B   05..         INC     ?V0 + 6
   \   00024D   05..         INC     ?V0 + 6
   \   00024F   8024         SJMP    ??zdpProcessAddrReq_35
    681          
    682                    while ( cnt != 0 )
    683                    {
    684                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_36:
   \   000251   8C82         MOV     DPL,R4
   \   000253   8D83         MOV     DPH,R5
   \   000255   12....       LCALL   ?Subroutine25 & 0xFFFF
    685                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_35:
   \   000258   8C82         MOV     DPL,R4
   \   00025A   8D83         MOV     DPH,R5
   \   00025C   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00025F   A3           INC     DPTR
   \   000260   0E           INC     R6
   \   000261   AF83         MOV     R7,DPH
    686                      pList++;
   \   000263   EC           MOV     A,R4
   \   000264   2402         ADD     A,#0x2
   \   000266   0C           INC     R4
   \   000267   0C           INC     R4
   \   000268   ED           MOV     A,R5
   \   000269   3400         ADDC    A,#0x0
   \   00026B   FD           MOV     R5,A
    687                      cnt--;
   \   00026C   85..82       MOV     DPL,?XSP + 0
   \   00026F   85..83       MOV     DPH,?XSP + 1
   \   000272   E0           MOVX    A,@DPTR
   \   000273   14           DEC     A
   \   000274   F0           MOVX    @DPTR,A
    688                    }
   \                     ??zdpProcessAddrReq_35:
   \   000275   85..82       MOV     DPL,?XSP + 0
   \   000278   85..83       MOV     DPH,?XSP + 1
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   70D3         JNZ     ??zdpProcessAddrReq_36
    689          
    690                    osal_mem_free( (uint8 *)list );
   \   00027E                ; Setup parameters for call to function osal_mem_free
   \   00027E   12....       LCALL   ??osal_mem_free?relay
   \   000281   8009         SJMP    ??zdpProcessAddrReq_26
    691                  }
    692                  else
    693                  {
    694                    // NumAssocDev field is only present on success.
    695                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_29:
   \   000283   E4           CLR     A
   \   000284   8E82         MOV     DPL,R6
   \   000286   8F83         MOV     DPH,R7
   \   000288   F0           MOVX    @DPTR,A
    696                    len++;
   \   000289   75..0C       MOV     ?V0 + 6,#0xc
    697                  }
    698                }
    699              }
    700          
    701              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_26:
   \   00028C   7410         MOV     A,#0x10
   \   00028E   90....       MOV     DPTR,#ZDP_TxOptions
   \   000291   F0           MOVX    @DPTR,A
    702              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   000292                ; Setup parameters for call to function fillAndSend
   \   000292   85..82       MOV     DPL,?V0 + 10
   \   000295   85..83       MOV     DPH,?V0 + 11
   \   000298   E0           MOVX    A,@DPTR
   \   000299   F5..         MOV     ?V0 + 0,A
   \   00029B   A3           INC     DPTR
   \   00029C   E0           MOVX    A,@DPTR
   \   00029D   4480         ORL     A,#0x80
   \   00029F   F5..         MOV     ?V0 + 1,A
   \   0002A1   78..         MOV     R0,#?V0 + 0
   \   0002A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A6   A9..         MOV     R1,?V0 + 6
   \   0002A8   E5..         MOV     A,?V0 + 4
   \   0002AA   2402         ADD     A,#0x2
   \   0002AC   FC           MOV     R4,A
   \   0002AD   E5..         MOV     A,?V0 + 5
   \   0002AF   3400         ADDC    A,#0x0
   \   0002B1   FD           MOV     R5,A
   \   0002B2   E5..         MOV     A,?V0 + 4
   \   0002B4   240F         ADD     A,#0xf
   \   0002B6   FA           MOV     R2,A
   \   0002B7   E5..         MOV     A,?V0 + 5
   \   0002B9   3400         ADDC    A,#0x0
   \   0002BB   FB           MOV     R3,A
   \   0002BC   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0002BF   12....       LCALL   ?DEALLOC_XSTACK8
    703              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0002C2   E4           CLR     A
   \   0002C3   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002C6   F0           MOVX    @DPTR,A
    704            }
    705          }
   \                     ??zdpProcessAddrReq_17:
   \   0002C7   740E         MOV     A,#0xe
   \   0002C9   80..         SJMP    ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B                REQUIRE ?Subroutine84
   \   00000B                ; // Fall through to label ?Subroutine84

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine111_0
   \   000003                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003                REQUIRE ??Subroutine115_0
   \   000003                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AE82         MOV     R6,DPL
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine118_0
   \   000001                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   02....       LJMP    ?Subroutine84 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine125_0
   \   000003                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ?Subroutine85
   \   000001                ; // Fall through to label ?Subroutine85

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    706          
    707          /*********************************************************************
    708           * @fn          ZDP_NodeDescMsg
    709           *
    710           * @brief       Builds and sends a Node Descriptor message, unicast to the
    711           *              specified device.
    712           *
    713           * @param       inMsg - incoming message
    714           * @param       nwkAddr - 16 bit network address for device
    715           * @param       pNodeDesc - pointer to the node descriptor
    716           *
    717           * @return      afStatus_t
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    720                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    721          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   12....       LCALL   ?Subroutine3 & 0xFFFF
    722            uint8 *pBuf = ZDP_TmpBuf;
    723            byte len;
    724          
    725            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    726          
    727            *pBuf++ = ZDP_SUCCESS;
    728          
    729            *pBuf++ = LO_UINT16( nwkAddr );
    730            *pBuf++ = HI_UINT16( nwkAddr );
    731          
    732            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    733                               (pNodeDesc->UserDescAvail << 4) |
    734                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_2:
   \   000011   541F         ANL     A,#0x1f
   \   000013   12....       LCALL   ?Subroutine47 & 0xFFFF
    735          
    736            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_80:
   \   000016   12....       LCALL   ?Subroutine14 & 0xFFFF
    737            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_14:
   \   000019   12....       LCALL   ?Subroutine14 & 0xFFFF
    738            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_15:
   \   00001C   A3           INC     DPTR
   \   00001D   12....       LCALL   ?Subroutine12 & 0xFFFF
    739            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_12:
   \   000020   12....       LCALL   ?Subroutine12 & 0xFFFF
    740            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_13:
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine10 & 0xFFFF
    741            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_10:
   \   000027   12....       LCALL   ?Subroutine10 & 0xFFFF
    742            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_11:
   \   00002A   12....       LCALL   ?Subroutine11 & 0xFFFF
    743          
    744            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_153:
   \   00002D   2408         ADD     A,#0x8
   \   00002F   FC           MOV     R4,A
   \   000030   EF           MOV     A,R7
   \   000031   12....       LCALL   ?Subroutine6 & 0xFFFF
    745            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
    746            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_6:
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   12....       LCALL   ?Subroutine11 & 0xFFFF
    747            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_154:
   \   000044   240B         ADD     A,#0xb
   \   000046   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000049   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    748            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_155:
   \   00004C   240C         ADD     A,#0xc
   \   00004E   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000051   12....       LCALL   ?Subroutine24 & 0xFFFF
    749          
    750            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_32:
   \   000054                ; Setup parameters for call to function fillAndSend
   \   000054   75..02       MOV     ?V0 + 0,#0x2
   \   000057   75..80       MOV     ?V0 + 1,#-0x80
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7910         MOV     R1,#0x10
   \   000061                REQUIRE ?Subroutine92
   \   000061                ; // Fall through to label ?Subroutine92
    751          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000006   80..         SJMP    ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine103_0
   \   000003                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine104_0
   \   000001                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine105_0
   \   000001                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   EA           MOV     A,R2
   \   000009   240F         ADD     A,#0xf
   \   00000B   FA           MOV     R2,A
   \   00000C   EB           MOV     A,R3
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   FB           MOV     R3,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   FF           MOV     R7,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000007   E4           CLR     A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EC           MOV     A,R4
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   ED           MOV     A,R5
   \   000012   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FD           MOV     R5,A
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00000A   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00000D   22           RET
    752          
    753          /*********************************************************************
    754           * @fn          ZDP_PowerDescMsg
    755           *
    756           * @brief       Builds and sends a Power Descriptor message, unicast to the
    757           *              specified device.
    758           *
    759           * @param       inMsg - incoming message (request)
    760           * @param       nwkAddr - 16 bit network address for device
    761           * @param       pPowerDesc - pointer to the node descriptor
    762           *
    763           * @return      afStatus_t
    764           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    765          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    766                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    767          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   12....       LCALL   ?Subroutine3 & 0xFFFF
    768            uint8 *pBuf = ZDP_TmpBuf;
    769            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    770          
    771            *pBuf++ = ZDP_SUCCESS;
    772          
    773            *pBuf++ = LO_UINT16( nwkAddr );
    774            *pBuf++ = HI_UINT16( nwkAddr );
    775          
    776            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    777                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_3:
   \   000012   12....       LCALL   ?Subroutine47 & 0xFFFF
    778            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    779                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_81:
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
    780          
    781            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_33:
   \   000018                ; Setup parameters for call to function fillAndSend
   \   000018   75..03       MOV     ?V0 + 0,#0x3
   \   00001B   75..80       MOV     ?V0 + 1,#-0x80
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7905         MOV     R1,#0x5
   \   000025   80..         SJMP    ?Subroutine92
    782          }
    783          
    784          /*********************************************************************
    785           * @fn          ZDP_SimpleDescMsg
    786           *
    787           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    788           *              specified device.
    789           *
    790           * @param       inMsg - incoming message (request)
    791           * @param       Status - message status (ZDP_SUCCESS or other)
    792           * @param       pSimpleDesc - pointer to the node descriptor
    793           *
    794           * @return      afStatus_t
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    797                                        SimpleDescriptionFormat_t *pSimpleDesc )
    798          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
    799            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   12....       LCALL   ?Subroutine34 & 0xFFFF
    800            uint8 i, len;
    801          
    802            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_181:
   \   00000A   EC           MOV     A,R4
   \   00000B   2409         ADD     A,#0x9
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FF           MOV     R7,A
   \   000012   8E..         MOV     ?V0 + 0,R6
   \   000014   8F..         MOV     ?V0 + 1,R7
   \   000016   EC           MOV     A,R4
   \   000017   2406         ADD     A,#0x6
   \   000019   1E           DEC     R6
   \   00001A   1E           DEC     R6
   \   00001B   1E           DEC     R6
   \   00001C   ED           MOV     A,R5
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FF           MOV     R7,A
   \   000020   8E..         MOV     ?V0 + 2,R6
   \   000022   8F..         MOV     ?V0 + 3,R7
   \   000024   E5..         MOV     A,?V0 + 4
   \   000026   7022         JNZ     ??ZDP_SimpleDescMsg_0
   \   000028   EC           MOV     A,R4
   \   000029   7001         JNZ     ??ZDP_SimpleDescMsg_1
   \   00002B   ED           MOV     A,R5
   \                     ??ZDP_SimpleDescMsg_1:
   \   00002C   601C         JZ      ??ZDP_SimpleDescMsg_0
    803            {
    804              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    805              len = 1 + 2 + 1 + 8;
    806              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00002E   85..82       MOV     DPL,?V0 + 0
   \   000031   85..83       MOV     DPH,?V0 + 1
   \   000034   12....       LCALL   ?Subroutine78 & 0xFFFF
    807            }
   \                     ??CrossCallReturnLabel_233:
   \   000037   FE           MOV     R6,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   2E           ADD     A,R6
   \   00003A   C3           CLR     C
   \   00003B   33           RLC     A
   \   00003C   240C         ADD     A,#0xc
   \   00003E   F5..         MOV     ?V0 + 6,A
    808            else
    809            {
    810              len = 1 + 2 + 1; // Status + desc length
    811            }
    812            if ( len >= ZDP_BUF_SZ-1 )
   \   000040   C3           CLR     C
   \   000041   944F         SUBB    A,#0x4f
   \   000043   4008         JC      ??ZDP_SimpleDescMsg_2
    813            {
    814              return afStatus_MEM_FAIL;
   \   000045   7910         MOV     R1,#0x10
   \   000047   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    815            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00004A   75..04       MOV     ?V0 + 6,#0x4
    816          
    817            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_2:
   \   00004D   12....       LCALL   ?Subroutine41 & 0xFFFF
    818          
    819            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_159:
   \   000050   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000053   12....       LCALL   ?Subroutine23 & 0xFFFF
    820            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_28:
   \   000056   90....       MOV     DPTR,#(ZDAppNwkAddr + 1)
   \   000059   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00005C   A3           INC     DPTR
    821          
    822            if ( len > 4 )
   \   00005D   E5..         MOV     A,?V0 + 6
   \   00005F   C3           CLR     C
   \   000060   9405         SUBB    A,#0x5
   \   000062   5003         JNC     $+5
   \   000064   02....       LJMP    ??ZDP_SimpleDescMsg_4 & 0xFFFF
    823            {
    824              *pBuf++ = len - 4;   // Simple descriptor length
   \   000067   74FC         MOV     A,#-0x4
   \   000069   25..         ADD     A,?V0 + 6
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   08           INC     R0
   \   00006E   08           INC     R0
   \   00006F   A983         MOV     R1,DPH
    825          
    826              *pBuf++ = pSimpleDesc->EndPoint;
   \   000071   8C82         MOV     DPL,R4
   \   000073   8D83         MOV     DPH,R5
   \   000075   12....       LCALL   ?Subroutine23 & 0xFFFF
    827              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_29:
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   A3           INC     DPTR
   \   00007D   AE82         MOV     R6,DPL
   \   00007F   AF83         MOV     R7,DPH
   \   000081   12....       LCALL   ?Subroutine5 & 0xFFFF
    828              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
    829              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_4:
   \   000084   EC           MOV     A,R4
   \   000085   2403         ADD     A,#0x3
   \   000087   FE           MOV     R6,A
   \   000088   ED           MOV     A,R5
   \   000089   3400         ADDC    A,#0x0
   \   00008B   FF           MOV     R7,A
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   12....       LCALL   ?Subroutine5 & 0xFFFF
    830              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
    831          
    832              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_5:
   \   000093   8C82         MOV     DPL,R4
   \   000095   8D83         MOV     DPH,R5
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   C4           SWAP    A
   \   00009E   54F0         ANL     A,#0xf0
   \   0000A0   12....       LCALL   ?Subroutine65 & 0xFFFF
    833          
    834              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_92:
   \   0000A3   12....       LCALL   ?Subroutine15 & 0xFFFF
    835              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_16:
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   6033         JZ      ??ZDP_SimpleDescMsg_5
    836              {
    837                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000A9   75..00       MOV     ?V0 + 7,#0x0
   \   0000AC   EC           MOV     A,R4
   \   0000AD   2407         ADD     A,#0x7
   \   0000AF   FE           MOV     R6,A
   \   0000B0   ED           MOV     A,R5
   \   0000B1   3400         ADDC    A,#0x0
   \   0000B3   FF           MOV     R7,A
   \   0000B4   8E..         MOV     ?V0 + 4,R6
   \   0000B6   8F..         MOV     ?V0 + 5,R7
   \   0000B8   8014         SJMP    ??CrossCallReturnLabel_26
    838                {
    839                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000BA   E5..         MOV     A,?V0 + 7
   \   0000BC   C3           CLR     C
   \   0000BD   33           RLC     A
   \   0000BE   FE           MOV     R6,A
   \   0000BF   E4           CLR     A
   \   0000C0   33           RLC     A
   \   0000C1   FF           MOV     R7,A
   \   0000C2   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000C5   12....       LCALL   ?Subroutine4 & 0xFFFF
    840                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_252:
   \   0000C8   12....       LCALL   ?Subroutine32 & 0xFFFF
    841                }
   \                     ??CrossCallReturnLabel_50:
   \   0000CB   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000CE   85..82       MOV     DPL,?V0 + 2
   \   0000D1   85..83       MOV     DPH,?V0 + 3
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FE           MOV     R6,A
   \   0000D6   E5..         MOV     A,?V0 + 7
   \   0000D8   C3           CLR     C
   \   0000D9   9E           SUBB    A,R6
   \   0000DA   40DE         JC      ??ZDP_SimpleDescMsg_6
    842              }
    843          
    844              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000DC   85..82       MOV     DPL,?V0 + 0
   \   0000DF   85..83       MOV     DPH,?V0 + 1
   \   0000E2   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    845              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_250:
   \   0000E5   85..82       MOV     DPL,?V0 + 0
   \   0000E8   85..83       MOV     DPH,?V0 + 1
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   6035         JZ      ??ZDP_SimpleDescMsg_7
    846              {
    847                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0000EE   75..00       MOV     ?V0 + 7,#0x0
   \   0000F1   EC           MOV     A,R4
   \   0000F2   240A         ADD     A,#0xa
   \   0000F4   FC           MOV     R4,A
   \   0000F5   ED           MOV     A,R5
   \   0000F6   3400         ADDC    A,#0x0
   \   0000F8   FD           MOV     R5,A
   \   0000F9   EC           MOV     A,R4
   \   0000FA   FE           MOV     R6,A
   \   0000FB   ED           MOV     A,R5
   \   0000FC   FF           MOV     R7,A
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000FD   85..82       MOV     DPL,?V0 + 0
   \   000100   85..83       MOV     DPH,?V0 + 1
   \   000103   E0           MOVX    A,@DPTR
   \   000104   FC           MOV     R4,A
   \   000105   E5..         MOV     A,?V0 + 7
   \   000107   C3           CLR     C
   \   000108   9C           SUBB    A,R4
   \   000109   5018         JNC     ??ZDP_SimpleDescMsg_7
    848                {
    849                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00010B   E5..         MOV     A,?V0 + 7
   \   00010D   C3           CLR     C
   \   00010E   33           RLC     A
   \   00010F   FC           MOV     R4,A
   \   000110   E4           CLR     A
   \   000111   33           RLC     A
   \   000112   FD           MOV     R5,A
   \   000113   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000116   12....       LCALL   ?Subroutine4 & 0xFFFF
    850                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_253:
   \   000119   12....       LCALL   ?Subroutine31 & 0xFFFF
    851                }
    852              }
    853            }
   \                     ??CrossCallReturnLabel_48:
   \   00011C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00011F   80DC         SJMP    ??ZDP_SimpleDescMsg_8
    854          
    855            else
    856            {
    857              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_4:
   \   000121   E4           CLR     A
   \   000122   F0           MOVX    @DPTR,A
    858            }
    859          
    860            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_7:
   \   000123                ; Setup parameters for call to function fillAndSend
   \   000123   75..04       MOV     ?V0 + 0,#0x4
   \   000126   75..80       MOV     ?V0 + 1,#-0x80
   \   000129   78..         MOV     R0,#?V0 + 0
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   A9..         MOV     R1,?V0 + 6
   \   000130   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000133   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000136   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_3:
   \   000139   02....       LJMP    ??Subroutine99_0 & 0xFFFF
    861          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2E           ADD     A,R6
   \   000008   F5..         MOV     ?V0 + 8,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3F           ADDC    A,R7
   \   00000D   85..82       MOV     DPL,?V0 + 8
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2C           ADD     A,R4
   \   000006   F5..         MOV     ?V0 + 2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3D           ADDC    A,R5
   \   00000B   85..82       MOV     DPL,?V0 + 2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000005   05..         INC     ?V0 + 7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   85..82       MOV     DPL,?V0 + 2
   \   00000C   85..83       MOV     DPH,?V0 + 3
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine123_0
   \   000002                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   22           RET
    862          
    863          /*********************************************************************
    864           * @fn          ZDP_EPRsp
    865           *
    866           * @brief       This builds and send an endpoint list. Used in
    867           *              Active_EP_rsp and Match_Desc_Rsp
    868           *              message.  This function sends unicast message to the
    869           *              requesting device.
    870           *
    871           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    872           * @param       dstAddr - destination address
    873           * @param       Status - message status (ZDP_SUCCESS or other)
    874           * @param       nwkAddr - Device's short address that this response describes
    875           * @param       Count - number of endpoint/interfaces in list
    876           * @param       pEPIntfList - Array of Endpoint/Interfaces
    877           * @param       SecurityEnable - Security Options
    878           *
    879           * @return      afStatus_t
    880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    881          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    882                                  byte Status, uint16 nwkAddr, byte Count,
    883                                  uint8 *pEPList,
    884                                  byte SecurityEnable )
    885          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   7410         MOV     A,#0x10
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FD           MOV     R5,A
   \   000021   7411         MOV     A,#0x11
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000029   7413         MOV     A,#0x13
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FC           MOV     R4,A
   \   000030   7414         MOV     A,#0x14
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 4,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 5,A
    886            uint8 *pBuf = ZDP_TmpBuf;
   \   00003C   12....       LCALL   ?Subroutine69 & 0xFFFF
    887            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_163:
   \   00003F   75..04       MOV     ?V0 + 2,#0x4
    888            byte txOptions;
    889          
    890            (void)SecurityEnable;  // Intentionally unreferenced parameter
    891          
    892            if ( MsgType == Match_Desc_rsp )
   \   000042   7406         MOV     A,#0x6
   \   000044   65..         XRL     A,?V0 + 0
   \   000046   7004         JNZ     ??ZDP_EPRsp_0
   \   000048   7480         MOV     A,#-0x80
   \   00004A   65..         XRL     A,?V0 + 1
   \                     ??ZDP_EPRsp_0:
   \   00004C   7005         JNZ     ??ZDP_EPRsp_1
    893              txOptions = AF_MSG_ACK_REQUEST;
   \   00004E   75..10       MOV     ?V0 + 3,#0x10
   \   000051   8003         SJMP    ??ZDP_EPRsp_2
    894            else
    895              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000053   75..00       MOV     ?V0 + 3,#0x0
    896          
    897              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000056   ED           MOV     A,R5
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   12....       LCALL   ?Subroutine52 & 0xFFFF
    898            *pBuf++ = LO_UINT16( nwkAddr );
    899            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_290:
   \   00005E   A3           INC     DPTR
    900          
    901            *pBuf++ = Count;   // Endpoint/Interface count
   \   00005F   EC           MOV     A,R4
   \   000060   12....       LCALL   ?Subroutine43 & 0xFFFF
    902          
    903            if ( Count )
   \                     ??CrossCallReturnLabel_70:
   \   000063   6015         JZ      ??ZDP_EPRsp_3
    904            {
    905              len += Count;
   \   000065   7404         MOV     A,#0x4
   \   000067   2C           ADD     A,R4
   \   000068   F5..         MOV     ?V0 + 2,A
    906              osal_memcpy( pBuf, pEPList, Count );
   \   00006A                ; Setup parameters for call to function osal_memcpy
   \   00006A   75..00       MOV     ?V0 + 6,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 4
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   7D00         MOV     R5,#0x0
   \   000074   12....       LCALL   ??Subroutine126_0 & 0xFFFF
    907            }
   \                     ??CrossCallReturnLabel_270:
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
    908          
    909            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   00007A   E5..         MOV     A,?V0 + 3
   \   00007C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007F   F0           MOVX    @DPTR,A
   \   000080                ; Setup parameters for call to function fillAndSend
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   A9..         MOV     R1,?V0 + 2
   \   000087   EE           MOV     A,R6
   \   000088   FC           MOV     R4,A
   \   000089   EF           MOV     A,R7
   \   00008A   FD           MOV     R5,A
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AA82         MOV     R2,DPL
   \   000092   AB83         MOV     R3,DPH
   \   000094   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009A   E4           CLR     A
   \   00009B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   7401         MOV     A,#0x1
   \   0000A1   02....       LJMP    ?Subroutine87 & 0xFFFF
    910          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine109_0
   \   000003                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine129_0
   \   000002                ; // Fall through to label ??Subroutine129_0
    911          
    912          /*********************************************************************
    913           * @fn          ZDP_UserDescRsp
    914           *
    915           * @brief       Build and send the User Decriptor Response.
    916           *
    917           *
    918           * @param       dstAddr - destination address
    919           * @param       nwkAddrOfInterest -
    920           * @param       userDesc -
    921           * @param       SecurityEnable - Security Options
    922           *
    923           * @return      ZStatus_t
    924           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine99_0
   \   000003                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    925          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    926                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    927                          byte SecurityEnable )
    928          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   7413         MOV     A,#0x13
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00001E   88..         MOV     ?V0 + 8,R0
   \   000020   89..         MOV     ?V0 + 9,R1
    929            uint8 *pBuf = ZDP_TmpBuf;
   \   000022   12....       LCALL   ?Subroutine18 & 0xFFFF
    930            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    931          
    932            (void)SecurityEnable;  // Intentionally unreferenced parameter
    933          
    934            len += userDesc->len;
   \                     ??CrossCallReturnLabel_23:
   \   000025   2404         ADD     A,#0x4
   \   000027   F5..         MOV     ?V0 + 2,A
    935          
    936            *pBuf++ = ZSUCCESS;
   \   000029   E4           CLR     A
   \   00002A   85..82       MOV     DPL,?V0 + 0
   \   00002D   85..83       MOV     DPH,?V0 + 1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
    937          
    938            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000032   EC           MOV     A,R4
   \   000033   12....       LCALL   ?Subroutine48 & 0xFFFF
    939            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \                     ??CrossCallReturnLabel_85:
   \   000036   8582..       MOV     ?V0 + 0,DPL
   \   000039   8583..       MOV     ?V0 + 1,DPH
    940          
    941            *pBuf++ = userDesc->len;
   \   00003C   8882         MOV     DPL,R0
   \   00003E   8983         MOV     DPH,R1
   \   000040   E0           MOVX    A,@DPTR
   \   000041   85..82       MOV     DPL,?V0 + 0
   \   000044   85..83       MOV     DPH,?V0 + 1
   \   000047   12....       LCALL   ?Subroutine40 & 0xFFFF
    942            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_69:
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004D   85..82       MOV     DPL,?V0 + 8
   \   000050   85..83       MOV     DPH,?V0 + 9
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FC           MOV     R4,A
   \   000055   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    943          
    944            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00005B                ; Setup parameters for call to function fillAndSend
   \   00005B   75..11       MOV     ?V0 + 0,#0x11
   \   00005E   75..80       MOV     ?V0 + 1,#-0x80
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   A9..         MOV     R1,?V0 + 2
   \   000068   EE           MOV     A,R6
   \   000069   FC           MOV     R4,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FD           MOV     R5,A
   \   00006C   7402         MOV     A,#0x2
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
   \   000075   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   7401         MOV     A,#0x1
   \   00007D   02....       LJMP    ?Subroutine86 & 0xFFFF
    945          }
    946          
    947          /*********************************************************************
    948           * @fn          ZDP_ServerDiscRsp
    949           *
    950           * @brief       Build and send the Server_Discovery_rsp response.
    951           *
    952           * @param       transID - Transaction sequence number of request.
    953           * @param       dstAddr - Network Destination Address.
    954           * @param       status - Status of response to request.
    955           * @param       aoi - Network Address of Interest of request.
    956           * @param       serverMask - Bit map of service(s) being sought.
    957           * @param       SecurityEnable - Security Options
    958           *
    959           * @return      ZStatus_t
    960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    961          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    962                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    963          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740D         MOV     A,#0xd
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine110_0 & 0xFFFF
    964            const byte len = 1  + 2;  // status + aoi + mask.
    965            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_172:
   \   00001A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
    966            ZStatus_t stat;
    967          
    968            // Intentionally unreferenced parameters
    969            (void)aoi;
    970            (void)SecurityEnable;
    971          
    972            *pBuf++ = status;
   \   000021   EC           MOV     A,R4
   \   000022   12....       LCALL   ?Subroutine52 & 0xFFFF
    973          
    974            *pBuf++ = LO_UINT16( serverMask );
    975            *pBuf++ = HI_UINT16( serverMask );
    976          
    977            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_291:
   \   000025   7410         MOV     A,#0x10
   \   000027   90....       MOV     DPTR,#ZDP_TxOptions
   \   00002A   F0           MOVX    @DPTR,A
    978            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..15       MOV     ?V0 + 0,#0x15
   \   00002E   75..80       MOV     ?V0 + 1,#-0x80
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7903         MOV     R1,#0x3
   \   000038   EA           MOV     A,R2
   \   000039   FC           MOV     R4,A
   \   00003A   EB           MOV     A,R3
   \   00003B   FD           MOV     R5,A
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   \   000045   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    979            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00004B   E4           CLR     A
   \   00004C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004F   F0           MOVX    @DPTR,A
    980          
    981            return ( stat );
   \   000050                REQUIRE ?Subroutine93
   \   000050                ; // Fall through to label ?Subroutine93
    982          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine107_0 & 0xFFFF
    983          
    984          /*********************************************************************
    985           * @fn          ZDP_GenericRsp
    986           *
    987           * @brief       Sends a response message with only the parameter status
    988           *              byte and the addr of interest for data.
    989           *              This function sends unicast message to the
    990           *              requesting device.
    991           *
    992           * @param       dstAddr - destination address
    993           * @param       status  - generic status for response
    994           * @param       aoi     - address of interest
    995           * @param       dstAddr - destination address
    996           * @param       rspId   - response cluster ID
    997           * @param       SecurityEnable - Security Options
    998           *
    999           * @return      afStatus_t
   1000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1001          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1002                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1003          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00001A   740D         MOV     A,#0xd
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine37 & 0xFFFF
   1004            uint8 len;
   1005          
   1006            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1007          
   1008            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_58:
   \   000022   C0E0         PUSH    A
   \   000024   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   1009            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   00002A   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00002D   A3           INC     DPTR
   \   00002E   E8           MOV     A,R0
   \   00002F   F0           MOVX    @DPTR,A
   1010            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000030   12....       LCALL   ?Subroutine19 & 0xFFFF
   1011          
   1012            // Length byte
   1013            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_25:
   \   000033   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
   1014            len = 4;
   1015          
   1016            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7904         MOV     R1,#0x4
   \   000041   EA           MOV     A,R2
   \   000042   FC           MOV     R4,A
   \   000043   EB           MOV     A,R3
   \   000044   FD           MOV     R5,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   AA82         MOV     R2,DPL
   \   00004C   AB83         MOV     R3,DPH
   \   00004E   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   80..         SJMP    ?Subroutine93
   1017          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8C82         MOV     DPL,R4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   EC           MOV     A,R4
   \   000004   22           RET
   1018          
   1019          /*********************************************************************
   1020           * Binding
   1021           */
   1022          /*********************************************************************
   1023           * @fn          ZDP_EndDeviceBindReq
   1024           *
   1025           * @brief       This builds and sends a End_Device_Bind_req message.
   1026           *              This function sends a unicast message.
   1027           *
   1028           * @param       dstAddr - destination address
   1029           * @param       LocalCoordinator - short address of local coordinator
   1030           * @param       epIntf - Endpoint/Interface of Simple Desc
   1031           * @param       ProfileID - Profile ID
   1032           *
   1033           *   The Input cluster list is the opposite of what you would think.
   1034           *   This is the output cluster list of this device
   1035           * @param       NumInClusters - number of input clusters
   1036           * @param       InClusterList - input cluster ID list
   1037           *
   1038           *   The Output cluster list is the opposite of what you would think.
   1039           *   This is the input cluster list of this device
   1040           * @param       NumOutClusters - number of output clusters
   1041           * @param       OutClusterList - output cluster ID list
   1042           *
   1043           * @param       SecurityEnable - Security Options
   1044           *
   1045           * @return      afStatus_t
   1046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1048                                           uint16 LocalCoordinator,
   1049                                           byte endPoint,
   1050                                           uint16 ProfileID,
   1051                                           byte NumInClusters, cId_t *InClusterList,
   1052                                           byte NumOutClusters, cId_t *OutClusterList,
   1053                                           byte SecurityEnable )
   1054          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 14,R2
   \   000007   8B..         MOV     ?V0 + 15,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   89..         MOV     ?V0 + 4,R1
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000017   741A         MOV     A,#0x1a
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 5,A
   \   00001F   741B         MOV     A,#0x1b
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 12,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 13,A
   \   00002B   741D         MOV     A,#0x1d
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 6,A
   \   000033   741E         MOV     A,#0x1e
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 10,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 11,A
   1055            uint8 *pBuf = ZDP_TmpBuf;
   \   00003F   12....       LCALL   ?Subroutine8 & 0xFFFF
   1056            uint8 i, len;
   1057            uint8 *ieeeAddr;
   1058          
   1059            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1060          
   1061            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1062            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1063            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \                     ??CrossCallReturnLabel_267:
   \   000042   E5..         MOV     A,?V0 + 6
   \   000044   25..         ADD     A,?V0 + 5
   \   000046   C3           CLR     C
   \   000047   33           RLC     A
   \   000048   240F         ADD     A,#0xf
   \   00004A   F5..         MOV     ?V0 + 7,A
   1064          
   1065            if ( len >= ZDP_BUF_SZ-1 )
   \   00004C   C3           CLR     C
   \   00004D   944F         SUBB    A,#0x4f
   \   00004F   4005         JC      ??ZDP_EndDeviceBindReq_0
   1066            {
   1067              return afStatus_MEM_FAIL;
   \   000051   7910         MOV     R1,#0x10
   \   000053   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1068            }
   1069          
   1070            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000056                ; Setup parameters for call to function NLME_GetShortAddr
   \   000056   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000059   EA           MOV     A,R2
   \   00005A   65..         XRL     A,?V0 + 0
   \   00005C   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00005E   EB           MOV     A,R3
   \   00005F   65..         XRL     A,?V0 + 1
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000061   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1071            {
   1072              return afStatus_INVALID_PARAMETER;
   \   000063   7902         MOV     R1,#0x2
   \   000065   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1073            }
   1074          
   1075            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   E5..         MOV     A,?V0 + 0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   1076            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000070   E5..         MOV     A,?V0 + 1
   \   000072   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   1077          
   1078            ieeeAddr = NLME_GetExtAddr();
   1079            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \                     ??CrossCallReturnLabel_211:
   \   000075                ; Setup parameters for call to function sAddrExtCpy
   \   000075                ; Setup parameters for call to function NLME_GetExtAddr
   \   000075   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000078   EA           MOV     A,R2
   \   000079   FC           MOV     R4,A
   \   00007A   EB           MOV     A,R3
   \   00007B   FD           MOV     R5,A
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   ?Subroutine60 & 0xFFFF
   1080          
   1081            *pBuf++ = endPoint;
   \                     ??CrossCallReturnLabel_232:
   \   000083   E5..         MOV     A,?V0 + 4
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   1082          
   1083            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   000087   E5..         MOV     A,?V0 + 2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   1084            *pBuf++ = HI_UINT16( ProfileID );
   \   00008B   E5..         MOV     A,?V0 + 3
   \   00008D   12....       LCALL   ?Subroutine42 & 0xFFFF
   1085          
   1086            *pBuf++ = NumInClusters; // Input cluster list
   1087            for ( i = 0; i < NumInClusters; ++i )
   \                     ??CrossCallReturnLabel_208:
   \   000090   7C00         MOV     R4,#0x0
   \   000092   8022         SJMP    ??CrossCallReturnLabel_37
   1088            {
   1089              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_4:
   \   000094   EC           MOV     A,R4
   \   000095   C3           CLR     C
   \   000096   33           RLC     A
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   33           RLC     A
   \   00009A   FB           MOV     R3,A
   \   00009B   E5..         MOV     A,?V0 + 12
   \   00009D   2A           ADD     A,R2
   \   00009E   FA           MOV     R2,A
   \   00009F   E5..         MOV     A,?V0 + 13
   \   0000A1   3B           ADDC    A,R3
   \   0000A2   FB           MOV     R3,A
   \   0000A3   8A82         MOV     DPL,R2
   \   0000A5   8B83         MOV     DPH,R3
   \   0000A7   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000AA   E8           MOV     A,R0
   \   0000AB   FE           MOV     R6,A
   \   0000AC   E9           MOV     A,R1
   \   0000AD   FF           MOV     R7,A
   1090              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   12....       LCALL   ?Subroutine26 & 0xFFFF
   1091            }
   \                     ??CrossCallReturnLabel_37:
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   A882         MOV     R0,DPL
   \   0000BD   A983         MOV     R1,DPH
   \   0000BF   EC           MOV     A,R4
   \   0000C0   C3           CLR     C
   \   0000C1   95..         SUBB    A,?V0 + 5
   \   0000C3   40CF         JC      ??ZDP_EndDeviceBindReq_4
   1092          
   1093            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   E5..         MOV     A,?V0 + 6
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   E8           MOV     A,R0
   \   0000CD   FE           MOV     R6,A
   \   0000CE   E9           MOV     A,R1
   \   0000CF   FF           MOV     R7,A
   1094            for ( i = 0; i < NumOutClusters; ++i )
   \   0000D0   7C00         MOV     R4,#0x0
   \   0000D2   8014         SJMP    ??CrossCallReturnLabel_38
   1095            {
   1096              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000D4   EC           MOV     A,R4
   \   0000D5   C3           CLR     C
   \   0000D6   33           RLC     A
   \   0000D7   F8           MOV     R0,A
   \   0000D8   E4           CLR     A
   \   0000D9   33           RLC     A
   \   0000DA   F9           MOV     R1,A
   \   0000DB   E5..         MOV     A,?V0 + 10
   \   0000DD   28           ADD     A,R0
   \   0000DE   F8           MOV     R0,A
   \   0000DF   E5..         MOV     A,?V0 + 11
   \   0000E1   39           ADDC    A,R1
   \   0000E2   12....       LCALL   ?Subroutine16 & 0xFFFF
   1097              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1098            }
   \                     ??CrossCallReturnLabel_18:
   \   0000E5   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000E8   EC           MOV     A,R4
   \   0000E9   C3           CLR     C
   \   0000EA   95..         SUBB    A,?V0 + 6
   \   0000EC   40E6         JC      ??ZDP_EndDeviceBindReq_5
   1099          
   1100            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   0000EE                ; Setup parameters for call to function fillAndSend
   \   0000EE   75..20       MOV     ?V0 + 0,#0x20
   \   0000F1   75..00       MOV     ?V0 + 1,#0x0
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   A9..         MOV     R1,?V0 + 7
   \   0000FB   AC..         MOV     R4,?V0 + 14
   \   0000FD   AD..         MOV     R5,?V0 + 15
   \   0000FF   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000105                REQUIRE ?Subroutine89
   \   000105                ; // Fall through to label ?Subroutine89
   1101          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   0C           INC     R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004                REQUIRE ??Subroutine114_0
   \   000004                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   0E           INC     R6
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET
   1102          
   1103          /*********************************************************************
   1104           * @fn          ZDP_BindUnbindReq
   1105           *
   1106           * @brief       This builds and send a Bind_req or Unbind_req message
   1107           *              Depending on the ClusterID. This function
   1108           *              sends a unicast message to the local coordinator.
   1109           *
   1110           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1111           * @param       dstAddr - destination address of the message
   1112           * @param       SourceAddr - source 64 bit address of the binding
   1113           * @param       SrcEPIntf - Source endpoint/interface
   1114           * @param       ClusterID - Binding cluster ID
   1115           * @param       DestinationAddr - destination 64 bit addr of binding
   1116           * @param       DstEPIntf - destination endpoint/interface
   1117           * @param       SecurityEnable - Security Options
   1118           *
   1119           * @return      afStatus_t
   1120           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1121          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1122                                        uint8 *SourceAddr, byte SrcEndPoint,
   1123                                        cId_t ClusterID,
   1124                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1125                                        byte SecurityEnable )
   1126          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   8C..         MOV     ?V0 + 12,R4
   \   00000B   8D..         MOV     ?V0 + 13,R5
   \   00000D   89..         MOV     ?V0 + 8,R1
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FC           MOV     R4,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000021   741A         MOV     A,#0x1a
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000029   741C         MOV     A,#0x1c
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 6,A
   1127            uint8 *pBuf = ZDP_TmpBuf;
   1128            byte len;
   1129          
   1130            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1131          
   1132            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1133            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \   000031   75..0C       MOV     ?V0 + 7,#0xc
   1134            if ( destinationAddr->addrMode == Addr64Bit )
   \   000034   E5..         MOV     A,?V0 + 0
   \   000036   2408         ADD     A,#0x8
   \   000038   F5..         MOV     ?V0 + 4,A
   \   00003A   E5..         MOV     A,?V0 + 1
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   F5..         MOV     ?V0 + 5,A
   \   000040   85..82       MOV     DPL,?V0 + 4
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FA           MOV     R2,A
   \   000047   7403         MOV     A,#0x3
   \   000049   6A           XRL     A,R2
   \   00004A   7005         JNZ     ??ZDP_BindUnbindReq_0
   1135              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00004C   75..15       MOV     ?V0 + 7,#0x15
   \   00004F   8008         SJMP    ??ZDP_BindUnbindReq_1
   1136            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000051   7401         MOV     A,#0x1
   \   000053   6A           XRL     A,R2
   \   000054   7003         JNZ     ??ZDP_BindUnbindReq_1
   1137              len += sizeof ( uint16 );
   \   000056   75..0E       MOV     ?V0 + 7,#0xe
   1138          
   1139            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000059                ; Setup parameters for call to function sAddrExtCpy
   \   000059   12....       LCALL   ?Subroutine35 & 0xFFFF
   1140            *pBuf++ = SrcEndPoint;
   \                     ??CrossCallReturnLabel_54:
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   E5..         MOV     A,?V0 + 8
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   1141          
   1142            *pBuf++ = LO_UINT16( ClusterID );
   \   000064   EE           MOV     A,R6
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   1143          
   1144            *pBuf++ = HI_UINT16( ClusterID );
   \   000067   EF           MOV     A,R7
   \   000068   12....       LCALL   ?Subroutine43 & 0xFFFF
   1145            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_71:
   \   00006B   85..82       MOV     DPL,?V0 + 4
   \   00006E   85..83       MOV     DPH,?V0 + 5
   \   000071   12....       LCALL   ?Subroutine29 & 0xFFFF
   1146            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_41:
   \   000074   85..82       MOV     DPL,?V0 + 4
   \   000077   85..83       MOV     DPH,?V0 + 5
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FC           MOV     R4,A
   \   00007C   7403         MOV     A,#0x3
   \   00007E   6C           XRL     A,R4
   \   00007F   700F         JNZ     ??ZDP_BindUnbindReq_2
   1147            {
   1148              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   \   000081                ; Setup parameters for call to function sAddrExtCpy
   \   000081   AC..         MOV     R4,?V0 + 0
   \   000083   AD..         MOV     R5,?V0 + 1
   \   000085   12....       LCALL   ??sAddrExtCpy?relay
   1149              *pBuf = DstEndPoint;
   \   000088   8A82         MOV     DPL,R2
   \   00008A   8B83         MOV     DPH,R3
   \   00008C   E5..         MOV     A,?V0 + 6
   \   00008E   801A         SJMP    ??ZDP_BindUnbindReq_3
   1150            }
   1151            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000090   7401         MOV     A,#0x1
   \   000092   6C           XRL     A,R4
   \   000093   7016         JNZ     ??ZDP_BindUnbindReq_4
   1152            {
   1153              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000095   85..82       MOV     DPL,?V0 + 0
   \   000098   85..83       MOV     DPH,?V0 + 1
   \   00009B   12....       LCALL   ?Subroutine29 & 0xFFFF
   1154              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_42:
   \   00009E   85..82       MOV     DPL,?V0 + 0
   \   0000A1   85..83       MOV     DPH,?V0 + 1
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \                     ??ZDP_BindUnbindReq_3:
   \   0000AA   F0           MOVX    @DPTR,A
   1155            }
   1156          
   1157            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000AB   7410         MOV     A,#0x10
   \   0000AD   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1                ; Setup parameters for call to function fillAndSend
   \   0000B1   78..         MOV     R0,#?V0 + 2
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   A9..         MOV     R1,?V0 + 7
   \   0000B8   AC..         MOV     R4,?V0 + 12
   \   0000BA   AD..         MOV     R5,?V0 + 13
   \   0000BC   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   E4           CLR     A
   \   0000C3   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   02....       LJMP    ??Subroutine102_0 & 0xFFFF
   1158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   12....       LCALL   ??sAddrExtCpy?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   AB83         MOV     R3,DPH
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   22           RET
   1159          
   1160          /*********************************************************************
   1161           * Network Management
   1162           */
   1163          
   1164          /*********************************************************************
   1165           * @fn          ZDP_MgmtNwkDiscReq
   1166           *
   1167           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1168           *              function sends a unicast message.
   1169           *
   1170           * @param       dstAddr - destination address of the message
   1171           * @param       ScanChannels - 32 bit address bit map
   1172           * @param       StartIndex - Starting index within the reporting network
   1173           *                           list
   1174           * @param       SecurityEnable - Security Options
   1175           *
   1176           * @return      afStatus_t
   1177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1178          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1179                                         uint32 ScanChannels,
   1180                                         byte ScanDuration,
   1181                                         byte StartIndex,
   1182                                         byte SecurityEnable )
   1183          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 4,R1
   \   00000B   8C..         MOV     ?V0 + 5,R4
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?L_MOV_X
   1184            uint8 *pBuf = ZDP_TmpBuf;
   1185            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1186          
   1187            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1188          
   1189            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000017                ; Setup parameters for call to function osal_buffer_uint32
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   1190          
   1191            *pBuf++ = ScanDuration;
   \   000026   E5..         MOV     A,?V0 + 4
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   1192            *pBuf = StartIndex;
   \   00002A   E5..         MOV     A,?V0 + 5
   \   00002C   F0           MOVX    @DPTR,A
   1193          
   1194            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002D                ; Setup parameters for call to function fillAndSend
   \   00002D   75..30       MOV     ?V0 + 0,#0x30
   \   000030   75..00       MOV     ?V0 + 1,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7906         MOV     R1,#0x6
   \   00003A   EE           MOV     A,R6
   \   00003B   FC           MOV     R4,A
   \   00003C   EF           MOV     A,R7
   \   00003D   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000040   02....       LJMP    ?Subroutine81 & 0xFFFF
   1195          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   12....       LCALL   ??osal_buffer_uint32?relay
   \   000006   7404         MOV     A,#0x4
   \   000008   22           RET
   1196          
   1197          /*********************************************************************
   1198           * @fn          ZDP_MgmtDirectJoinReq
   1199           *
   1200           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1201           *              function sends a unicast message.
   1202           *
   1203           * @param       dstAddr - destination address of the message
   1204           * @param       deviceAddr - 64 bit IEEE Address
   1205           * @param       SecurityEnable - Security Options
   1206           *
   1207           * @return      afStatus_t
   1208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1209          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1210                                         uint8 *deviceAddr,
   1211                                         byte capInfo,
   1212                                         byte SecurityEnable )
   1213          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   1214            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1215          
   1216            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   12....       LCALL   ?Subroutine13 & 0xFFFF
   1217            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \                     ??CrossCallReturnLabel_104:
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   F0           MOVX    @DPTR,A
   1218          
   1219            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000018                ; Setup parameters for call to function fillAndSend
   \   000018   75..35       MOV     ?V0 + 0,#0x35
   \   00001B                REQUIRE ?Subroutine90
   \   00001B                ; // Fall through to label ?Subroutine90
   1220          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   75..00       MOV     ?V0 + 1,#0x0
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A   EE           MOV     A,R6
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000010   02....       LJMP    ??Subroutine107_0 & 0xFFFF
   1221          
   1222          /*********************************************************************
   1223           * @fn          ZDP_MgmtPermitJoinReq
   1224           *
   1225           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1226           *
   1227           * @param       dstAddr - destination address of the message
   1228           * @param       duration - Permit duration
   1229           * @param       TcSignificance - Trust Center Significance
   1230           *
   1231           * @return      afStatus_t
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1234                                            byte TcSignificance, byte SecurityEnable )
   1235          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1236            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1237          
   1238            // Build buffer
   1239            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine20 & 0xFFFF
   1240            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_134:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1241          
   1242            // Send the message
   1243            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1244                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0 + 0,#0x36
   \   000011   02....       LJMP    ?Subroutine91 & 0xFFFF
   1245          }
   1246          
   1247          /*********************************************************************
   1248           * @fn          ZDP_MgmtLeaveReq
   1249           *
   1250           * @brief       This builds and send a Mgmt_Leave_req message.
   1251           *
   1252           * @param       dstAddr - destination address of the message
   1253           *              IEEEAddr - IEEE adddress of device that is removed
   1254           *              RemoveChildren - set to 1 to remove the children of the
   1255           *                                device as well. 0 otherwise.
   1256           *              Rejoin - set to 1 if the removed device should rejoin
   1257                                   afterwards. 0 otherwise.
   1258           *
   1259           * @return      afStatus_t
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1262                           uint8 Rejoin, uint8 SecurityEnable )
   1263          
   1264          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   740A         MOV     A,#0xa
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 1,A
   1265            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1266          
   1267            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000013                ; Setup parameters for call to function sAddrExtCpy
   \   000013   12....       LCALL   ?Subroutine35 & 0xFFFF
   1268            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \                     ??CrossCallReturnLabel_55:
   \   000016   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   2408         ADD     A,#0x8
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   1269          
   1270            if ( RemoveChildren == TRUE )
   \   000024   7401         MOV     A,#0x1
   \   000026   65..         XRL     A,?V0 + 0
   \   000028   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1271            {
   1272              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00002A   7440         MOV     A,#0x40
   \   00002C   F0           MOVX    @DPTR,A
   1273            }
   1274            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00002D   7401         MOV     A,#0x1
   \   00002F   65..         XRL     A,?V0 + 1
   \   000031   7004         JNZ     ??ZDP_MgmtLeaveReq_1
   1275            {
   1276              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000033   E0           MOVX    A,@DPTR
   \   000034   D2E7         SETB    0xE0 /* A   */.7
   \   000036   F0           MOVX    @DPTR,A
   1277            }
   1278          
   1279            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..34       MOV     ?V0 + 0,#0x34
   \   00003A   02....       LJMP    ?Subroutine90 & 0xFFFF
   1280          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   02....       LJMP    ?Subroutine85 & 0xFFFF
   1281          
   1282          /*********************************************************************
   1283           * @fn          ZDP_MgmtNwkUpdateReq
   1284           *
   1285           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1286           *              function sends a unicast or broadcast message.
   1287           *
   1288           * @param       dstAddr - destination address of the message
   1289           * @param       ChannelMask - 32 bit address bit map
   1290           * @param       ScanDuration - length of time to spend scanning each channel
   1291           * @param       ScanCount - number of energy scans to be conducted
   1292           * @param       NwkUpdateId - NWk Update Id value
   1293           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1294           *                               bit set in its Node Descriptor
   1295           *
   1296           * @return      afStatus_t
   1297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1298          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1299                                           uint32 ChannelMask,
   1300                                           uint8 ScanDuration,
   1301                                           uint8 ScanCount,
   1302                                           uint8 NwkUpdateId,
   1303                                           uint16 NwkManagerAddr )
   1304          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 8,R2
   \   000007   8B..         MOV     ?V0 + 9,R3
   \   000009   89..         MOV     ?V0 + 4,R1
   \   00000B   8C..         MOV     ?V0 + 6,R4
   \   00000D   8D..         MOV     ?V0 + 5,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   7416         MOV     A,#0x16
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   1305            uint8 *pBuf = ZDP_TmpBuf;
   1306            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \                     ??CrossCallReturnLabel_261:
   \   000021   75..05       MOV     ?V0 + 7,#0x5
   1307          
   1308            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000024                ; Setup parameters for call to function osal_buffer_uint32
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   8A..         MOV     ?V0 + 0,R2
   \   000031   8B..         MOV     ?V0 + 1,R3
   \   000033   A8..         MOV     R0,?V0 + 0
   \   000035   A9..         MOV     R1,?V0 + 1
   1309          
   1310            *pBuf++ = ScanDuration;
   \   000037   12....       LCALL   ?Subroutine41 & 0xFFFF
   1311          
   1312            if ( ScanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_160:
   \   00003A   A3           INC     DPTR
   \   00003B   AB83         MOV     R3,DPH
   \   00003D   C3           CLR     C
   \   00003E   9406         SUBB    A,#0x6
   \   000040   500B         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1313            {
   1314              // Request is to scan over channelMask
   1315              len += sizeof( uint8 );
   \   000042   75..06       MOV     ?V0 + 7,#0x6
   1316          
   1317              *pBuf++ = ScanCount;
   \   000045   8882         MOV     DPL,R0
   \   000047   8983         MOV     DPH,R1
   \   000049   E5..         MOV     A,?V0 + 6
   \   00004B   802A         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1318            }
   1319            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00004D   74FE         MOV     A,#-0x2
   \   00004F   65..         XRL     A,?V0 + 4
   \   000051   6006         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   000053   74FF         MOV     A,#-0x1
   \   000055   65..         XRL     A,?V0 + 4
   \   000057   701F         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1320            {
   1321              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1322              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000059   75..06       MOV     ?V0 + 7,#0x6
   1323          
   1324              *pBuf++ = NwkUpdateId;
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   E5..         MOV     A,?V0 + 5
   \   000062   F0           MOVX    @DPTR,A
   \   000063   08           INC     R0
   \   000064   EB           MOV     A,R3
   \   000065   F9           MOV     R1,A
   1325          
   1326              if ( ScanDuration == 0xFF )
   \   000066   74FF         MOV     A,#-0x1
   \   000068   65..         XRL     A,?V0 + 4
   \   00006A   700C         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1327              {
   1328                len += sizeof( uint16 );
   \   00006C   75..08       MOV     ?V0 + 7,#0x8
   1329          
   1330                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   00006F   EE           MOV     A,R6
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   1331                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000076   EF           MOV     A,R7
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000077   F0           MOVX    @DPTR,A
   1332              }
   1333            }
   1334          
   1335            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   000078                ; Setup parameters for call to function fillAndSend
   \   000078   75..38       MOV     ?V0 + 0,#0x38
   \   00007B   75..00       MOV     ?V0 + 1,#0x0
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   A9..         MOV     R1,?V0 + 7
   \   000085   AC..         MOV     R4,?V0 + 8
   \   000087   AD..         MOV     R5,?V0 + 9
   \   000089   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00008C   02....       LJMP    ?Subroutine86 & 0xFFFF
   1336          }
   1337          
   1338          
   1339          /*********************************************************************
   1340           * Network Management Responses
   1341           */
   1342          
   1343          /*********************************************************************
   1344           * @fn          ZDP_MgmtNwkDiscRsp
   1345           *
   1346           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1347           *              function sends a unicast message.
   1348           *
   1349           * @param       dstAddr - destination address of the message
   1350           * @param       Status - message status (ZDP_SUCCESS or other)
   1351           * @param       NetworkCount - Total number of networks found
   1352           * @param       StartIndex - Starting index within the reporting network
   1353           *                           list
   1354           * @param       NetworkListCount - number of network lists included
   1355           *                                 in this message
   1356           * @param       NetworkList - List of network descriptors
   1357           * @param       SecurityEnable - Security Options
   1358           *
   1359           * @return      afStatus_t
   1360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine101_0
   \   000002                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1361          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1362                                      byte Status,
   1363                                      byte NetworkCount,
   1364                                      byte StartIndex,
   1365                                      byte NetworkListCount,
   1366                                      networkDesc_t *NetworkList,
   1367                                      byte SecurityEnable )
   1368          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 12,R2
   \   000014   8B..         MOV     ?V0 + 13,R3
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   8D..         MOV     ?V0 + 9,R5
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 10,A
   \   000022   7418         MOV     A,#0x18
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 7,A
   \   00002A   7419         MOV     A,#0x19
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1369            uint8 *buf;
   1370            uint8 *pBuf;
   1371            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1372            byte idx;
   1373          
   1374            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1375          
   1376            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \                     ??CrossCallReturnLabel_189:
   \   000032   75F00C       MOV     B,#0xc
   \   000035   E5..         MOV     A,?V0 + 7
   \   000037   A4           MUL     AB
   \   000038   2404         ADD     A,#0x4
   \   00003A   F5..         MOV     ?V0 + 8,A
   1377          
   1378            buf = osal_mem_alloc( len+1 );
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   12....       LCALL   ?Subroutine55 & 0xFFFF
   1379            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_202:
   \   00003F   7001         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   \   000041   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000042   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_1
   1380            {
   1381              return afStatus_MEM_FAIL;
   \   000044   7910         MOV     R1,#0x10
   \   000046   02....       LJMP    ??CrossCallReturnLabel_237 & 0xFFFF
   1382            }
   1383          
   1384            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   8582..       MOV     ?V0 + 4,DPL
   \   000051   8583..       MOV     ?V0 + 5,DPH
   1385          
   1386            *pBuf++ = Status;
   \   000054   E5..         MOV     A,?V0 + 6
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   1387            *pBuf++ = NetworkCount;
   \   000058   E5..         MOV     A,?V0 + 9
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   1388            *pBuf++ = StartIndex;
   \   00005C   E5..         MOV     A,?V0 + 10
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   1389            *pBuf++ = NetworkListCount;
   \   000060   E5..         MOV     A,?V0 + 7
   \   000062   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   1390          
   1391            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??CrossCallReturnLabel_212:
   \   000065   75..00       MOV     ?V0 + 6,#0x0
   \   000068   8019         SJMP    ??ZDP_MgmtNwkDiscRsp_2
   1392            {
   1393              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1394              pBuf += Z_EXTADDR_LEN;
   1395          
   1396              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1397              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1398              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1399              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1400              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1401          
   1402              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1403              {
   1404                *pBuf++ = TRUE;                         // Permit Joining
   1405              }
   1406              else
   1407              {
   1408                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   00006A   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   0E           INC     R6
   \   000071   E9           MOV     A,R1
   \   000072   FF           MOV     R7,A
   1409              }
   1410          
   1411              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000073   E5..         MOV     A,?V0 + 2
   \   000075   2416         ADD     A,#0x16
   \   000077   F582         MOV     DPL,A
   \   000079   E5..         MOV     A,?V0 + 3
   \   00007B   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00007E   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000081   05..         INC     ?V0 + 6
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000083   E5..         MOV     A,?V0 + 6
   \   000085   C3           CLR     C
   \   000086   95..         SUBB    A,?V0 + 7
   \   000088   4003         JC      $+5
   \   00008A   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_5 & 0xFFFF
   \   00008D                ; Setup parameters for call to function sAddrExtCpy
   \   00008D   E5..         MOV     A,?V0 + 2
   \   00008F   240D         ADD     A,#0xd
   \   000091   FC           MOV     R4,A
   \   000092   E5..         MOV     A,?V0 + 3
   \   000094   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000097   EE           MOV     A,R6
   \   000098   2408         ADD     A,#0x8
   \   00009A   FE           MOV     R6,A
   \   00009B   EF           MOV     A,R7
   \   00009C   3400         ADDC    A,#0x0
   \   00009E   FF           MOV     R7,A
   \   00009F   85..82       MOV     DPL,?V0 + 2
   \   0000A2   85..83       MOV     DPH,?V0 + 3
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000AA   85..82       MOV     DPL,?V0 + 2
   \   0000AD   85..83       MOV     DPH,?V0 + 3
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0000B8   EE           MOV     A,R6
   \   0000B9   F8           MOV     R0,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   0E           INC     R6
   \   0000BE   AF83         MOV     R7,DPH
   \   0000C0   85..82       MOV     DPL,?V0 + 2
   \   0000C3   85..83       MOV     DPH,?V0 + 3
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   0000CC   85..82       MOV     DPL,?V0 + 2
   \   0000CF   85..83       MOV     DPH,?V0 + 3
   \   0000D2   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0000D5   08           INC     R0
   \   0000D6   EF           MOV     A,R7
   \   0000D7   F9           MOV     R1,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   0E           INC     R6
   \   0000DA   AF83         MOV     R7,DPH
   \   0000DC   85..82       MOV     DPL,?V0 + 2
   \   0000DF   85..83       MOV     DPH,?V0 + 3
   \   0000E2   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   A3           INC     DPTR
   \   0000EA   A983         MOV     R1,DPH
   \   0000EC   85..82       MOV     DPL,?V0 + 2
   \   0000EF   85..83       MOV     DPH,?V0 + 3
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   64FE         XRL     A,#0xfe
   \   0000FE   7004         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   64FF         XRL     A,#0xff
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   000104   7003         JNZ     $+5
   \   000106   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   000109   7401         MOV     A,#0x1
   \   00010B   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1412            }
   1413          
   1414            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   00010E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000111   E5..         MOV     A,?V0 + 4
   \   000113   F0           MOVX    @DPTR,A
   \   000114   A3           INC     DPTR
   \   000115   E5..         MOV     A,?V0 + 5
   \   000117   F0           MOVX    @DPTR,A
   \   000118                ; Setup parameters for call to function fillAndSend
   \   000118   75..30       MOV     ?V0 + 2,#0x30
   \   00011B   75..80       MOV     ?V0 + 3,#-0x80
   \   00011E   78..         MOV     R0,#?V0 + 2
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000123   A9..         MOV     R1,?V0 + 8
   \   000125   AC..         MOV     R4,?V0 + 12
   \   000127   AD..         MOV     R5,?V0 + 13
   \   000129   7402         MOV     A,#0x2
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   AA82         MOV     R2,DPL
   \   000130   AB83         MOV     R3,DPH
   \   000132   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000135   12....       LCALL   ?DEALLOC_XSTACK8
   \   000138   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00013B   02....       LJMP    ?Subroutine88 & 0xFFFF
   1415          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   7401         MOV     A,#0x1
   \   000004   25..         ADD     A,?V0 + 0
   \   000006                REQUIRE ??Subroutine113_0
   \   000006                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine116_0
   \   000004                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   FA           MOV     R2,A
   \   000001   E4           CLR     A
   \   000002   3400         ADDC    A,#0x0
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_mem_alloc?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FD           MOV     R5,A
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ??sAddrExtCpy?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine117_0
   \   000002                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E9           MOV     A,R1
   \   000001   FE           MOV     R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV     R2,?V0 + 0
   \   000004   AB..         MOV     R3,?V0 + 1
   \   000006                REQUIRE ??Subroutine120_0
   \   000006                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   EE           MOV     A,R6
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ??osal_mem_free?relay
   \   000003   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000006   74..         MOV     A,#((ZDP_Buf + 1) & 0xff)
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74..         MOV     A,#(((ZDP_Buf + 1) >> 8) & 0xff)
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET
   1416          
   1417          /*********************************************************************
   1418           * @fn          ZDP_MgmtLqiRsp
   1419           *
   1420           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1421           *              function sends a unicast message.
   1422           *
   1423           * @param       dstAddr - destination address of the message
   1424           * @param       Status - message status (ZDP_SUCCESS or other)
   1425           * @param       NeighborLqiEntries - Total number of entries found
   1426           * @param       StartIndex - Starting index within the reporting list
   1427           * @param       NeighborLqiCount - number of lists included
   1428           *                                 in this message
   1429           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1430           *                is the list to be sent, not the entire list
   1431           * @param       SecurityEnable - true if secure
   1432           *
   1433           * @return      ZStatus_t
   1434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1435          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1436                                    byte Status,
   1437                                    byte NeighborLqiEntries,
   1438                                    byte StartIndex,
   1439                                    byte NeighborLqiCount,
   1440                                    ZDP_MgmtLqiItem_t* NeighborList,
   1441                                    byte SecurityEnable )
   1442          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 12,R2
   \   000014   8B..         MOV     ?V0 + 13,R3
   \   000016   8D..         MOV     ?V0 + 4,R5
   \   000018   7417         MOV     A,#0x17
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 7,A
   \   000020   7418         MOV     A,#0x18
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 5,A
   \   000028   7419         MOV     A,#0x19
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine37 & 0xFFFF
   1443            ZDP_MgmtLqiItem_t* list = NeighborList;
   1444            uint8 *buf, *pBuf;
   1445            byte len, x;
   1446          
   1447            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1448          
   1449            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_59:
   \   000030   6022         JZ      ??ZDP_MgmtLqiRsp_0
   1450            {
   1451              ZDP_TmpBuf[0] = Status;
   \   000032   12....       LCALL   ?Subroutine21 & 0xFFFF
   1452              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1453            }
   \                     ??CrossCallReturnLabel_197:
   \   000035   EC           MOV     A,R4
   \   000036   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   AC..         MOV     R4,?V0 + 12
   \   000040   AD..         MOV     R5,?V0 + 13
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AA82         MOV     R2,DPL
   \   000049   AB83         MOV     R3,DPH
   \   00004B   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   02....       LJMP    ??CrossCallReturnLabel_240 & 0xFFFF
   1454          
   1455            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1456            //  neighbor LQI data.
   1457            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000054   75F016       MOV     B,#0x16
   \   000057   E5..         MOV     A,?V0 + 5
   \   000059   A4           MUL     AB
   \   00005A   2404         ADD     A,#0x4
   \   00005C   F5..         MOV     ?V0 + 6,A
   1458          
   1459            buf = osal_mem_alloc( len+1 );
   \   00005E                ; Setup parameters for call to function osal_mem_alloc
   \   00005E   F5..         MOV     ?V0 + 2,A
   \   000060   7401         MOV     A,#0x1
   \   000062   25..         ADD     A,?V0 + 2
   \   000064   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000067   8A..         MOV     ?V0 + 2,R2
   \   000069   8B..         MOV     ?V0 + 3,R3
   1460            if ( buf == NULL )
   \   00006B   EA           MOV     A,R2
   \   00006C   7001         JNZ     ??ZDP_MgmtLqiRsp_1
   \   00006E   EB           MOV     A,R3
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00006F   7005         JNZ     ??ZDP_MgmtLqiRsp_2
   1461            {
   1462              return afStatus_MEM_FAIL;
   \   000071   7910         MOV     R1,#0x10
   \   000073   02....       LJMP    ??CrossCallReturnLabel_240 & 0xFFFF
   1463            }
   1464          
   1465            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   8582..       MOV     ?V0 + 8,DPL
   \   00007E   8583..       MOV     ?V0 + 9,DPH
   1466          
   1467            *pBuf++ = Status;
   \   000081   E4           CLR     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   1468            *pBuf++ = NeighborLqiEntries;
   \   000084   E5..         MOV     A,?V0 + 4
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   1469            *pBuf++ = StartIndex;
   \   000088   E5..         MOV     A,?V0 + 7
   \   00008A   12....       LCALL   ?Subroutine42 & 0xFFFF
   1470            *pBuf++ = NeighborLqiCount;
   1471          
   1472            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_209:
   \   00008D   75..00       MOV     ?V0 + 4,#0x0
   \   000090   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1473            {
   1474              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000093                ; Setup parameters for call to function sAddrExtCpy
   \   000093   E5..         MOV     A,?V0 + 0
   \   000095   2402         ADD     A,#0x2
   \   000097   FC           MOV     R4,A
   \   000098   E5..         MOV     A,?V0 + 1
   \   00009A   12....       LCALL   ?Subroutine58 & 0xFFFF
   1475              pBuf += Z_EXTADDR_LEN;
   1476          
   1477              // EXTADDR
   1478              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \                     ??CrossCallReturnLabel_89:
   \   00009D                ; Setup parameters for call to function sAddrExtCpy
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   240A         ADD     A,#0xa
   \   0000A1   FC           MOV     R4,A
   \   0000A2   E5..         MOV     A,?V0 + 1
   \   0000A4   3400         ADDC    A,#0x0
   \   0000A6   FD           MOV     R5,A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2408         ADD     A,#0x8
   \   0000AA   FA           MOV     R2,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   3400         ADDC    A,#0x0
   \   0000AE   FB           MOV     R3,A
   \   0000AF   12....       LCALL   ??sAddrExtCpy?relay
   \   0000B2   8A..         MOV     ?V0 + 10,R2
   \   0000B4   8B..         MOV     ?V0 + 11,R3
   \   0000B6   AE..         MOV     R6,?V0 + 10
   \   0000B8   AF..         MOV     R7,?V0 + 11
   1479          
   1480              // NWKADDR
   1481              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000BA   E5..         MOV     A,?V0 + 0
   \   0000BC   2412         ADD     A,#0x12
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E5..         MOV     A,?V0 + 1
   \   0000C1   3400         ADDC    A,#0x0
   \   0000C3   12....       LCALL   ?Subroutine16 & 0xFFFF
   1482              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   0000C6   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   1483          
   1484              // DEVICETYPE
   1485              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_228:
   \   0000C9   2414         ADD     A,#0x14
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E5..         MOV     A,?V0 + 1
   \   0000CF   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0000D2   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1486          
   1487              // RXONIDLE
   1488              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_221:
   \   0000D5   E5..         MOV     A,?V0 + 0
   \   0000D7   2415         ADD     A,#0x15
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E5..         MOV     A,?V0 + 1
   \   0000DD   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   0000E0   33           RLC     A
   \   0000E1   33           RLC     A
   \   0000E2   54FC         ANL     A,#0xfc
   \   0000E4   FA           MOV     R2,A
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   4A           ORL     A,R2
   \   0000EB   F0           MOVX    @DPTR,A
   1489          
   1490              // RELATIONSHIP
   1491              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000EC   EE           MOV     A,R6
   \   0000ED   F8           MOV     R0,A
   \   0000EE   EF           MOV     A,R7
   \   0000EF   F9           MOV     R1,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   0E           INC     R6
   \   0000F2   AF83         MOV     R7,DPH
   \   0000F4   E5..         MOV     A,?V0 + 0
   \   0000F6   2416         ADD     A,#0x16
   \   0000F8   F582         MOV     DPL,A
   \   0000FA   E5..         MOV     A,?V0 + 1
   \   0000FC   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000FF   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   1492          
   1493              // PERMITJOINING
   1494              *pBuf++ = (uint8)(list->permit);
   \                     ??CrossCallReturnLabel_216:
   \   000102   E5..         MOV     A,?V0 + 0
   \   000104   2417         ADD     A,#0x17
   \   000106   12....       LCALL   ?Subroutine1 & 0xFFFF
   1495          
   1496              // DEPTH
   1497              *pBuf++ = list->depth;
   1498          
   1499              // LQI
   1500              *pBuf++ = list->lqi;
   1501          
   1502              list++; // next list entry
   1503            }
   \                     ??CrossCallReturnLabel_225:
   \   000109   2418         ADD     A,#0x18
   \   00010B   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00010E   2419         ADD     A,#0x19
   \   000110   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000113   241A         ADD     A,#0x1a
   \   000115   F5..         MOV     ?V0 + 0,A
   \   000117   E5..         MOV     A,?V0 + 1
   \   000119   3400         ADDC    A,#0x0
   \   00011B   F5..         MOV     ?V0 + 1,A
   \   00011D   05..         INC     ?V0 + 4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   00011F   E5..         MOV     A,?V0 + 4
   \   000121   C3           CLR     C
   \   000122   95..         SUBB    A,?V0 + 5
   \   000124   5003         JNC     $+5
   \   000126   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1504          
   1505            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000129   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00012C   E5..         MOV     A,?V0 + 8
   \   00012E   F0           MOVX    @DPTR,A
   \   00012F   A3           INC     DPTR
   \   000130   E5..         MOV     A,?V0 + 9
   \   000132   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000138   A9..         MOV     R1,?V0 + 6
   \   00013A   AC..         MOV     R4,?V0 + 12
   \   00013C   AD..         MOV     R5,?V0 + 13
   \   00013E   7402         MOV     A,#0x2
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   AA82         MOV     R2,DPL
   \   000145   AB83         MOV     R3,DPH
   \   000147   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00014A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014D   E9           MOV     A,R1
   \   00014E   FE           MOV     R6,A
   \   00014F                ; Setup parameters for call to function osal_mem_free
   \   00014F   AA..         MOV     R2,?V0 + 2
   \   000151   AB..         MOV     R3,?V0 + 3
   \   000153   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000156   02....       LJMP    ?Subroutine88 & 0xFFFF
   1506          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV     ?V0 + 0,#0x31
   \   000004   75..80       MOV     ?V0 + 1,#-0x80
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008                REQUIRE ??Subroutine119_0
   \   000008                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET
   1507          
   1508          /*********************************************************************
   1509           * @fn          ZDP_MgmtRtgRsp
   1510           *
   1511           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1512           *              function sends a unicast message.
   1513           *
   1514           * @param       dstAddr - destination address of the message
   1515           * @param       Status - message status (ZDP_SUCCESS or other)
   1516           * @param       RoutingTableEntries - Total number of entries
   1517           * @param       StartIndex - Starting index within the reporting list
   1518           * @param       RoutingTableListCount - number of entries included
   1519           *                                      in this message
   1520           * @param       RoutingTableList - List of Routing Table entries
   1521           * @param       SecurityEnable - true to enable security for this message
   1522           *
   1523           * @return      ZStatus_t
   1524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1525          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1526                                      byte Status,
   1527                                      byte RoutingTableEntries,
   1528                                      byte StartIndex,
   1529                                      byte RoutingListCount,
   1530                                      rtgItem_t *RoutingTableList,
   1531                                      byte SecurityEnable )
   1532          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   8D..         MOV     ?V0 + 7,R5
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 8,A
   \   000022   7415         MOV     A,#0x15
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 9,A
   \   00002A   7416         MOV     A,#0x16
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1533            uint8 *buf;
   1534            uint8 *pBuf;
   1535            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1536            byte len = 1 + 1 + 1 + 1;
   1537            byte x;
   1538          
   1539            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1540          
   1541            // Add an array for Routing List data
   1542            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \                     ??CrossCallReturnLabel_191:
   \   000032   75F005       MOV     B,#0x5
   \   000035   E5..         MOV     A,?V0 + 9
   \   000037   A4           MUL     AB
   \   000038   2404         ADD     A,#0x4
   \   00003A   F5..         MOV     ?V0 + 10,A
   1543          
   1544            buf = osal_mem_alloc( (short)(len+1) );
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   12....       LCALL   ?Subroutine55 & 0xFFFF
   1545            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_203:
   \   00003F   7001         JNZ     ??ZDP_MgmtRtgRsp_0
   \   000041   EB           MOV     A,R3
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000042   7005         JNZ     ??ZDP_MgmtRtgRsp_1
   1546            {
   1547              return afStatus_MEM_FAIL;
   \   000044   7910         MOV     R1,#0x10
   \   000046   02....       LJMP    ??CrossCallReturnLabel_238 & 0xFFFF
   1548            }
   1549          
   1550            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   1551          
   1552            *pBuf++ = Status;
   \   000052   E5..         MOV     A,?V0 + 6
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   1553            *pBuf++ = RoutingTableEntries;
   \   000056   E5..         MOV     A,?V0 + 7
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   1554            *pBuf++ = StartIndex;
   \   00005A   E5..         MOV     A,?V0 + 8
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   1555            *pBuf++ = RoutingListCount;
   \   00005E   E5..         MOV     A,?V0 + 9
   \   000060   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   1556          
   1557            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??CrossCallReturnLabel_157:
   \   000063   75..00       MOV     ?V0 + 4,#0x0
   \   000066   8033         SJMP    ??ZDP_MgmtRtgRsp_2
   1558            {
   1559              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   000068   85..82       MOV     DPL,?V0 + 2
   \   00006B   85..83       MOV     DPH,?V0 + 3
   \   00006E   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   1560              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_251:
   \   000071   85..82       MOV     DPL,?V0 + 2
   \   000074   85..83       MOV     DPH,?V0 + 3
   \   000077   A3           INC     DPTR
   \   000078   12....       LCALL   ?Subroutine15 & 0xFFFF
   1561              *pBuf++ = RoutingTableList->status;
   \                     ??CrossCallReturnLabel_17:
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ?Subroutine23 & 0xFFFF
   1562              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??CrossCallReturnLabel_30:
   \   000083   E5..         MOV     A,?V0 + 2
   \   000085   2402         ADD     A,#0x2
   \   000087   FC           MOV     R4,A
   \   000088   E5..         MOV     A,?V0 + 3
   \   00008A   12....       LCALL   ?Subroutine6 & 0xFFFF
   1563              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   1564              RoutingTableList++;    // Move to next list entry
   \                     ??CrossCallReturnLabel_7:
   \   00008D   E5..         MOV     A,?V0 + 2
   \   00008F   2406         ADD     A,#0x6
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   E5..         MOV     A,?V0 + 3
   \   000095   3400         ADDC    A,#0x0
   \   000097   F5..         MOV     ?V0 + 3,A
   1565            }
   \   000099   05..         INC     ?V0 + 4
   \                     ??ZDP_MgmtRtgRsp_2:
   \   00009B   E5..         MOV     A,?V0 + 4
   \   00009D   C3           CLR     C
   \   00009E   95..         SUBB    A,?V0 + 9
   \   0000A0   40C6         JC      ??ZDP_MgmtRtgRsp_3
   1566          
   1567            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000A2   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000A5   EA           MOV     A,R2
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   EB           MOV     A,R3
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA                ; Setup parameters for call to function fillAndSend
   \   0000AA   75..32       MOV     ?V0 + 2,#0x32
   \   0000AD   75..80       MOV     ?V0 + 3,#-0x80
   \   0000B0   78..         MOV     R0,#?V0 + 2
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   A9..         MOV     R1,?V0 + 10
   \   0000B7   EE           MOV     A,R6
   \   0000B8   FC           MOV     R4,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   FD           MOV     R5,A
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   AA82         MOV     R2,DPL
   \   0000C2   AB83         MOV     R3,DPH
   \   0000C4   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D2   7F0B         MOV     R7,#0xb
   \   0000D4   02....       LJMP    ?BANKED_LEAVE_XDATA
   1568          }
   1569          
   1570          /*********************************************************************
   1571           * @fn          ZDP_MgmtBindRsp
   1572           *
   1573           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1574           *              function sends a unicast message.
   1575           *
   1576           * @param       dstAddr - destination address of the message
   1577           * @param       Status - message status (ZDP_SUCCESS or other)
   1578           * @param       BindingTableEntries - Total number of entries
   1579           * @param       StartIndex - Starting index within the reporting list
   1580           * @param       BindingTableListCount - number of entries included
   1581           *                                 in this message
   1582           * @param       BindingTableList - List of Binding Table entries
   1583           * @param       SecurityEnable - Security Options
   1584           *
   1585           * @return      ZStatus_t
   1586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1587          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1588                                      byte Status,
   1589                                      byte BindingTableEntries,
   1590                                      byte StartIndex,
   1591                                      byte BindingTableListCount,
   1592                                      apsBindingItem_t *BindingTableList,
   1593                                      byte SecurityEnable )
   1594          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 8,R2
   \   000014   8B..         MOV     ?V0 + 9,R3
   \   000016   8C..         MOV     ?V0 + 4,R4
   \   000018   8D..         MOV     ?V0 + 5,R5
   \   00001A   7415         MOV     A,#0x15
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 7,A
   \   000022   7416         MOV     A,#0x16
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 6,A
   \   00002A   7417         MOV     A,#0x17
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   1595            uint8 *buf;
   1596            uint8 *pBuf;
   1597            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1598            uint8 len;    // Actual length varies due to different addrMode
   1599            uint8 x;
   1600            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1601            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1602          
   1603            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1604          
   1605            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1606            maxLen = 1 + 1 + 1 + 1;
   1607            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1608            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \                     ??CrossCallReturnLabel_262:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   75F015       MOV     B,#0x15
   \   000035   E5..         MOV     A,?V0 + 6
   \   000037   A4           MUL     AB
   \   000038   2404         ADD     A,#0x4
   \   00003A   F8           MOV     R0,A
   \   00003B   7401         MOV     A,#0x1
   \   00003D   28           ADD     A,R0
   \   00003E   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   1609          
   1610            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_204:
   \   000041   7001         JNZ     ??ZDP_MgmtBindRsp_0
   \   000043   EB           MOV     A,R3
   \                     ??ZDP_MgmtBindRsp_0:
   \   000044   7005         JNZ     ??ZDP_MgmtBindRsp_1
   1611            {
   1612              return afStatus_MEM_FAIL;
   \   000046   7910         MOV     R1,#0x10
   \   000048   02....       LJMP    ??CrossCallReturnLabel_239 & 0xFFFF
   1613            }
   1614          
   1615            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   A3           INC     DPTR
   \   000050   8582..       MOV     ?V0 + 2,DPL
   \   000053   8583..       MOV     ?V0 + 3,DPH
   1616          
   1617            *pBuf++ = Status;
   \   000056   E5..         MOV     A,?V0 + 4
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   1618            *pBuf++ = BindingTableEntries;
   \   00005A   E5..         MOV     A,?V0 + 5
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   1619            *pBuf++ = StartIndex;
   \   00005E   E5..         MOV     A,?V0 + 7
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   1620            *pBuf++ = BindingTableListCount;
   \   000062   E5..         MOV     A,?V0 + 6
   \   000064   12....       LCALL   ?Subroutine43 & 0xFFFF
   1621          
   1622            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1623            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1624            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1625            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1626          
   1627            len = 1 + 1 + 1 + 1;
   \                     ??CrossCallReturnLabel_72:
   \   000067   75..04       MOV     ?V0 + 4,#0x4
   1628            for ( x = 0; x < BindingTableListCount; x++ )
   \   00006A   75..00       MOV     ?V0 + 5,#0x0
   \   00006D   8021         SJMP    ??ZDP_MgmtBindRsp_2
   1629            {
   1630              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1631              *pBuf++ = BindingTableList->srcEP;
   1632          
   1633              // Cluster ID
   1634              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1635              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1636          
   1637              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1638              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1639              {
   1640                len += extZdpBindEntrySize;
   1641                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1642                *pBuf++ = BindingTableList->dstEP;
   1643              }
   1644              else
   1645              {
   1646                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   00006F   740E         MOV     A,#0xe
   \   000071   25..         ADD     A,?V0 + 4
   \   000073   F5..         MOV     ?V0 + 4,A
   1647                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000075   8C82         MOV     DPL,R4
   \   000077   8D83         MOV     DPH,R5
   \   000079   12....       LCALL   ?Subroutine29 & 0xFFFF
   1648                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_43:
   \   00007C   8C82         MOV     DPL,R4
   \   00007E   8D83         MOV     DPH,R5
   \   000080   A3           INC     DPTR
   \   000081   12....       LCALL   ?Subroutine80 & 0xFFFF
   1649              }
   \                     ??CrossCallReturnLabel_99:
   \   000084   AB83         MOV     R3,DPH
   1650              BindingTableList++;    // Move to next list entry
   \   000086   EE           MOV     A,R6
   \   000087   2415         ADD     A,#0x15
   \   000089   FE           MOV     R6,A
   \   00008A   EF           MOV     A,R7
   \   00008B   3400         ADDC    A,#0x0
   \   00008D   FF           MOV     R7,A
   \   00008E   05..         INC     ?V0 + 5
   \                     ??ZDP_MgmtBindRsp_2:
   \   000090   E5..         MOV     A,?V0 + 5
   \   000092   C3           CLR     C
   \   000093   95..         SUBB    A,?V0 + 6
   \   000095   5055         JNC     ??ZDP_MgmtBindRsp_4
   \   000097                ; Setup parameters for call to function sAddrExtCpy
   \   000097   EE           MOV     A,R6
   \   000098   FC           MOV     R4,A
   \   000099   EF           MOV     A,R7
   \   00009A   FD           MOV     R5,A
   \   00009B   12....       LCALL   ??sAddrExtCpy?relay
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000AD   AB83         MOV     R3,DPH
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2409         ADD     A,#0x9
   \   0000B2   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   0000B5   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000B8   8882         MOV     DPL,R0
   \   0000BA   8983         MOV     DPH,R1
   \   0000BC   A3           INC     DPTR
   \   0000BD   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000C0   2413         ADD     A,#0x13
   \   0000C2   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   0000C5   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000C8   240B         ADD     A,#0xb
   \   0000CA   FC           MOV     R4,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   FD           MOV     R5,A
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   6403         XRL     A,#0x3
   \   0000D6   7097         JNZ     ??ZDP_MgmtBindRsp_3
   \   0000D8   7415         MOV     A,#0x15
   \   0000DA   25..         ADD     A,?V0 + 4
   \   0000DC   F5..         MOV     ?V0 + 4,A
   \   0000DE                ; Setup parameters for call to function sAddrExtCpy
   \   0000DE   12....       LCALL   ??sAddrExtCpy?relay
   \   0000E1   EE           MOV     A,R6
   \   0000E2   2414         ADD     A,#0x14
   \   0000E4   12....       LCALL   ?Subroutine59 & 0xFFFF
   1651            }
   \                     ??CrossCallReturnLabel_146:
   \   0000E7   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000EA   8098         SJMP    ??CrossCallReturnLabel_99
   1652          
   1653            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_4:
   \   0000EC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000EF   E5..         MOV     A,?V0 + 2
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E5..         MOV     A,?V0 + 3
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6                ; Setup parameters for call to function fillAndSend
   \   0000F6   75..33       MOV     ?V0 + 2,#0x33
   \   0000F9   75..80       MOV     ?V0 + 3,#-0x80
   \   0000FC   78..         MOV     R0,#?V0 + 2
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   A9..         MOV     R1,?V0 + 4
   \   000103   AC..         MOV     R4,?V0 + 8
   \   000105   AD..         MOV     R5,?V0 + 9
   \   000107   7402         MOV     A,#0x2
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   AA82         MOV     R2,DPL
   \   00010E   AB83         MOV     R3,DPH
   \   000110   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   \   000116   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000119   7401         MOV     A,#0x1
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011E   7F0C         MOV     R7,#0xc
   \   000120   02....       LJMP    ?BANKED_LEAVE_XDATA
   1654          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002                REQUIRE ??Subroutine128_0
   \   000002                ; // Fall through to label ??Subroutine128_0
   1655          
   1656          /*********************************************************************
   1657           * @fn          ZDP_MgmtNwkUpdateNotify
   1658           *
   1659           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1660           *              function sends a unicast message.
   1661           *
   1662           * @param       dstAddr - destination address of the message
   1663           * @param       status - message status (ZDP_SUCCESS or other)
   1664           * @param       scannedChannels - List of channels scanned by the request
   1665           * @param       totalTransmissions - Total transmissions
   1666           * @param       transmissionFailures - Sum of transmission failures
   1667           * @param       listCount - Number of records contained in the energyValues list
   1668           * @param       energyValues - List of descriptors, one for each of ListCount,
   1669           *                             of the enegry detect descriptors
   1670           * @param       txOptions - Transmit options
   1671           * @param       securityEnable - Security options
   1672           *
   1673           * @return      afStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1676                                              uint8 status, uint32 scannedChannels,
   1677                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1678                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1679                                              uint8 securityEnable )
   1680          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EA           MOV     A,R2
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   EB           MOV     A,R3
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8C..         MOV     ?V0 + 8,R4
   \   00001E   8D..         MOV     ?V0 + 3,R5
   \   000020   741B         MOV     A,#0x1b
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   78..         MOV     R0,#?V0 + 4
   \   000027   12....       LCALL   ?L_MOV_X
   \   00002A   741F         MOV     A,#0x1f
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000032   7421         MOV     A,#0x21
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00003A   7423         MOV     A,#0x23
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0 + 14,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V0 + 15,A
   \   000046   7425         MOV     A,#0x25
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V0 + 9,A
   1681            uint8 *buf;
   1682            uint8 *pBuf;
   1683            uint8 len;
   1684          
   1685            (void)securityEnable;  // Intentionally unreferenced parameter
   1686          
   1687            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1688            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00004E   740A         MOV     A,#0xa
   \   000050   25..         ADD     A,?V0 + 3
   \   000052   F5..         MOV     ?V0 + 2,A
   1689          
   1690            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000054                ; Setup parameters for call to function osal_mem_alloc
   \   000054   F5..         MOV     ?V0 + 10,A
   \   000056   7401         MOV     A,#0x1
   \   000058   25..         ADD     A,?V0 + 10
   \   00005A   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00005D   8A..         MOV     ?V0 + 12,R2
   \   00005F   8B..         MOV     ?V0 + 13,R3
   1691            if ( buf == NULL )
   \   000061   EA           MOV     A,R2
   \   000062   7001         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   \   000064   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000065   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_1
   1692            {
   1693              return afStatus_MEM_FAIL;
   \   000067   7910         MOV     R1,#0x10
   \   000069   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_2 & 0xFFFF
   1694            }
   1695          
   1696            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   A3           INC     DPTR
   \   000071   8582..       MOV     ?V0 + 10,DPL
   \   000074   8583..       MOV     ?V0 + 11,DPH
   1697          
   1698            *pBuf++ = status;
   \   000077   E5..         MOV     A,?V0 + 8
   \   000079   12....       LCALL   ?Subroutine43 & 0xFFFF
   1699          
   1700            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_73:
   \   00007C                ; Setup parameters for call to function osal_buffer_uint32
   \   00007C   78..         MOV     R0,#?V0 + 4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000081   12....       LCALL   ??osal_buffer_uint32?relay
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   1701          
   1702            *pBuf++ = LO_UINT16( totalTransmissions );
   \   000089   EE           MOV     A,R6
   \   00008A   8A82         MOV     DPL,R2
   \   00008C   8B83         MOV     DPH,R3
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   1703            *pBuf++ = HI_UINT16( totalTransmissions );
   \   000090   EF           MOV     A,R7
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   1704          
   1705            *pBuf++ = LO_UINT16( transmissionFailures );
   \   000093   E5..         MOV     A,?V0 + 0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   1706            *pBuf++ = HI_UINT16( transmissionFailures );
   \   000097   E5..         MOV     A,?V0 + 1
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   1707          
   1708            *pBuf++ = listCount;
   \   00009B   E5..         MOV     A,?V0 + 3
   \   00009D   12....       LCALL   ?Subroutine43 & 0xFFFF
   1709          
   1710            if ( listCount > 0 )
   \                     ??CrossCallReturnLabel_74:
   \   0000A0   6018         JZ      ??ZDP_MgmtNwkUpdateNotify_3
   1711              osal_memcpy( pBuf, energyValues, listCount );
   \   0000A2                ; Setup parameters for call to function osal_memcpy
   \   0000A2   85....       MOV     ?V0 + 4,?V0 + 14
   \   0000A5   85....       MOV     ?V0 + 5,?V0 + 15
   \   0000A8   75..00       MOV     ?V0 + 6,#0x0
   \   0000AB   78..         MOV     R0,#?V0 + 4
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B0   AC..         MOV     R4,?V0 + 3
   \   0000B2   7D00         MOV     R5,#0x0
   \   0000B4   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   1712          
   1713            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   0000BA   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000BD   E5..         MOV     A,?V0 + 10
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E5..         MOV     A,?V0 + 11
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   E5..         MOV     A,?V0 + 9
   \   0000C6   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA                ; Setup parameters for call to function fillAndSend
   \   0000CA   75..38       MOV     ?V0 + 0,#0x38
   \   0000CD   75..80       MOV     ?V0 + 1,#-0x80
   \   0000D0   78..         MOV     R0,#?V0 + 0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D5   A9..         MOV     R1,?V0 + 2
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FC           MOV     R4,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   FD           MOV     R5,A
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   AA82         MOV     R2,DPL
   \   0000E8   AB83         MOV     R3,DPH
   \   0000EA   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F0   E9           MOV     A,R1
   \   0000F1   FE           MOV     R6,A
   \   0000F2                ; Setup parameters for call to function osal_mem_free
   \   0000F2   AA..         MOV     R2,?V0 + 12
   \   0000F4   AB..         MOV     R3,?V0 + 13
   \   0000F6   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0000F9   E4           CLR     A
   \   0000FA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   EE           MOV     A,R6
   \   0000FF   F9           MOV     R1,A
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000100   7403         MOV     A,#0x3
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   02....       LJMP    ?Subroutine89 & 0xFFFF
   1714          }
   1715          
   1716          /*********************************************************************
   1717           * Functions to register for ZDO Over-the-air messages
   1718           */
   1719          
   1720          /*********************************************************************
   1721           * @fn          ZDO_RegisterForZDOMsg
   1722           * @brief       Call this function to register of an incoming over
   1723           *              the air ZDO message - probably a response message
   1724           *              but requests can also be received.
   1725           *              Messages are delivered to the task with ZDO_CB_MSG
   1726           *              as the message ID.
   1727           * @param       taskID - Where you would like the message delivered
   1728           *              clusterID - What message?
   1729           * @return      ZSuccess - successful, ZMemError if not
   1730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1731          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1732          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   1733            ZDO_MsgCB_t *pList;
   1734            ZDO_MsgCB_t *pLast;
   1735            ZDO_MsgCB_t *pNew;
   1736          
   1737            // Look for duplicate
   1738            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   800C         SJMP    ??ZDO_RegisterForZDOMsg_0
   1739            while ( pList )
   1740            {
   1741              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1742                return ( ZSuccess );
   1743              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000016   E8           MOV     A,R0
   \   000017   FE           MOV     R6,A
   \   000018   E9           MOV     A,R1
   \   000019   FF           MOV     R7,A
   1744              pList = (ZDO_MsgCB_t *)pList->next;
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   7001         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   000026   E9           MOV     A,R1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000027   6021         JZ      ??ZDO_RegisterForZDOMsg_3
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   65..         XRL     A,?V0 + 2
   \   000032   70E2         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   65..         XRL     A,?V0 + 0
   \   00003E   7004         JNZ     ??ZDO_RegisterForZDOMsg_4
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   65..         XRL     A,?V0 + 1
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000044   70D0         JNZ     ??ZDO_RegisterForZDOMsg_1
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000046   7900         MOV     R1,#0x0
   \   000048   804A         SJMP    ??ZDO_RegisterForZDOMsg_6
   1745            }
   1746          
   1747            // Add to the list
   1748            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00004A                ; Setup parameters for call to function osal_mem_alloc
   \   00004A   7A05         MOV     R2,#0x5
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   ??osal_mem_alloc?relay
   \   000051   8A..         MOV     ?V0 + 4,R2
   \   000053   8B..         MOV     ?V0 + 5,R3
   \   000055   A8..         MOV     R0,?V0 + 4
   \   000057   A9..         MOV     R1,?V0 + 5
   1749            if ( pNew )
   \   000059   E8           MOV     A,R0
   \   00005A   7001         JNZ     ??ZDO_RegisterForZDOMsg_7
   \   00005C   E9           MOV     A,R1
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   00005D   6033         JZ      ??ZDO_RegisterForZDOMsg_8
   1750            {
   1751              pNew->taskID = taskID;
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E5..         MOV     A,?V0 + 2
   \   000067   12....       LCALL   ?Subroutine49 & 0xFFFF
   1752              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_283:
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E5..         MOV     A,?V0 + 0
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   E5..         MOV     A,?V0 + 1
   \   000073   12....       LCALL   ?Subroutine49 & 0xFFFF
   1753              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_284:
   \   000076   E4           CLR     A
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   F0           MOVX    @DPTR,A
   1754              if ( zdoMsgCBs )
   \   00007A   90....       MOV     DPTR,#zdoMsgCBs
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   7002         JNZ     ??ZDO_RegisterForZDOMsg_9
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \                     ??ZDO_RegisterForZDOMsg_9:
   \   000082   6009         JZ      ??ZDO_RegisterForZDOMsg_10
   1755              {
   1756                pLast->next = pNew;
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   1757              }
   \                     ??ZDO_RegisterForZDOMsg_11:
   \   000088   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00008B   80B9         SJMP    ??ZDO_RegisterForZDOMsg_5
   1758              else
   1759                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_10:
   \   00008D   90....       MOV     DPTR,#zdoMsgCBs
   \   000090   80F6         SJMP    ??ZDO_RegisterForZDOMsg_11
   1760              return ( ZSuccess );
   1761            }
   1762            else
   1763              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_8:
   \   000092   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000094   02....       LJMP    ??Subroutine94_0 & 0xFFFF
   1764          }
   1765          
   1766          /*********************************************************************
   1767           * @fn          ZDO_RemoveRegisteredCB
   1768           * @brief       Call this function if you don't want to receive the
   1769           *              incoming message.
   1770           * @param       taskID - Where the messages are being delivered.
   1771           *              clusterID - What message?
   1772           * @return      ZSuccess - successful, ZFailure if not found
   1773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1774          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1775          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1776            ZDO_MsgCB_t *pList;
   1777            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1778          
   1779            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1780            while ( pList )
   1781            {
   1782              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1783              {
   1784                if ( pLast )
   1785                {
   1786                  // remove this one from the linked list
   1787                  pLast->next = pList->next;
   1788                }
   1789                else if ( pList->next )
   1790                {
   1791                  // remove the first one from the linked list
   1792                  zdoMsgCBs = pList->next;
   1793                }
   1794                else
   1795                {
   1796                  // remove the only item from the list
   1797                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1798                }
   1799                osal_mem_free( pList );
   1800                return ( ZSuccess );
   1801              }
   1802              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1803              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00001B   7001         JNZ     ??ZDO_RemoveRegisteredCB_2
   \   00001D   E9           MOV     A,R1
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00001E   6049         JZ      ??ZDO_RemoveRegisteredCB_3
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6E           XRL     A,R6
   \   000028   70E6         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6A           XRL     A,R2
   \   000033   7003         JNZ     ??ZDO_RemoveRegisteredCB_4
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000038   70D6         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000041   EC           MOV     A,R4
   \   000042   7001         JNZ     ??ZDO_RemoveRegisteredCB_5
   \   000044   ED           MOV     A,R5
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000045   600A         JZ      ??ZDO_RemoveRegisteredCB_6
   \   000047   8C82         MOV     DPL,R4
   \   000049   8D83         MOV     DPH,R5
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00004B   EA           MOV     A,R2
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   EB           MOV     A,R3
   \   00004F   800C         SJMP    ??ZDO_RemoveRegisteredCB_8
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000051   EA           MOV     A,R2
   \   000052   7001         JNZ     ??ZDO_RemoveRegisteredCB_9
   \   000054   EB           MOV     A,R3
   \                     ??ZDO_RemoveRegisteredCB_9:
   \   000055   90....       MOV     DPTR,#zdoMsgCBs
   \   000058   70F1         JNZ     ??ZDO_RemoveRegisteredCB_7
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E                ; Setup parameters for call to function osal_mem_free
   \   00005E   E8           MOV     A,R0
   \   00005F   FA           MOV     R2,A
   \   000060   E9           MOV     A,R1
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??osal_mem_free?relay
   \   000065   7900         MOV     R1,#0x0
   \   000067   8002         SJMP    ??ZDO_RemoveRegisteredCB_10
   1804            }
   1805          
   1806            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000069   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_10:
   \   00006B   7F01         MOV     R7,#0x1
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1807          }
   1808          
   1809          /*********************************************************************
   1810           * @fn          ZDO_SendMsgCBs
   1811           * @brief       This function sends messages to registered tasks.
   1812           *              Local to ZDO and shouldn't be called outside of ZDO.
   1813           * @param       inMsg - incoming message
   1814           * @return      TRUE if sent to at least 1 task, FALSE if not
   1815           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1816          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1817          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   1818            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V0 + 4,#0x0
   1819            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000012   EA           MOV     A,R2
   \   000013   2410         ADD     A,#0x10
   \   000015   F5..         MOV     ?V0 + 8,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 9,A
   \   00001C   02....       LJMP    ??CrossCallReturnLabel_65 & 0xFFFF
   1820            while ( pList )
   1821            {
   1822              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001F   85..82       MOV     DPL,?V0 + 0
   \   000022   85..83       MOV     DPH,?V0 + 1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00002B   E5..         MOV     A,?V0 + 2
   \   00002D   240C         ADD     A,#0xc
   \   00002F   F582         MOV     DPL,A
   \   000031   E5..         MOV     A,?V0 + 3
   \   000033   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_SendMsgCBs_1
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_1:
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??ZDO_SendMsgCBs_2 & 0xFFFF
   1823              {
   1824                zdoIncomingMsg_t *msgPtr;
   1825          
   1826                // Send the address to the task
   1827                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000041                ; Setup parameters for call to function osal_msg_allocate
   \   000041   85..82       MOV     DPL,?V0 + 8
   \   000044   85..83       MOV     DPH,?V0 + 9
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7415         MOV     A,#0x15
   \   00004B   28           ADD     A,R0
   \   00004C   FA           MOV     R2,A
   \   00004D   E4           CLR     A
   \   00004E   3400         ADDC    A,#0x0
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??osal_msg_allocate?relay
   \   000054   8A..         MOV     ?V0 + 6,R2
   \   000056   8B..         MOV     ?V0 + 7,R3
   \   000058   AE..         MOV     R6,?V0 + 6
   \   00005A   AF..         MOV     R7,?V0 + 7
   1828                if ( msgPtr )
   \   00005C   EE           MOV     A,R6
   \   00005D   7001         JNZ     ??ZDO_SendMsgCBs_3
   \   00005F   EF           MOV     A,R7
   \                     ??ZDO_SendMsgCBs_3:
   \   000060   6075         JZ      ??ZDO_SendMsgCBs_2
   1829                {
   1830                  // copy struct
   1831                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   85....       MOV     ?V0 + 4,?V0 + 2
   \   000065   85....       MOV     ?V0 + 5,?V0 + 3
   \   000068   75..00       MOV     ?V0 + 6,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 4
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000070   7C15         MOV     R4,#0x15
   \   000072   7D00         MOV     R5,#0x0
   \   000074   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   1832          
   1833                  if ( inMsg->asduLen )
   \   00007A   85..82       MOV     DPL,?V0 + 8
   \   00007D   85..83       MOV     DPH,?V0 + 9
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6039         JZ      ??ZDO_SendMsgCBs_4
   1834                  {
   1835                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000083   EE           MOV     A,R6
   \   000084   2415         ADD     A,#0x15
   \   000086   FA           MOV     R2,A
   \   000087   EF           MOV     A,R7
   \   000088   3400         ADDC    A,#0x0
   \   00008A   FB           MOV     R3,A
   \   00008B   EE           MOV     A,R6
   \   00008C   2413         ADD     A,#0x13
   \   00008E   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000091   EA           MOV     A,R2
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   EB           MOV     A,R3
   \   000095   F0           MOVX    @DPTR,A
   1836                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   000096                ; Setup parameters for call to function osal_memcpy
   \   000096   E5..         MOV     A,?V0 + 2
   \   000098   2413         ADD     A,#0x13
   \   00009A   F582         MOV     DPL,A
   \   00009C   E5..         MOV     A,?V0 + 3
   \   00009E   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1837                  }
   \                     ??CrossCallReturnLabel_278:
   \   0000A1   F5..         MOV     ?V0 + 4,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V0 + 5,A
   \   0000A7   78..         MOV     R0,#?V0 + 4
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AC   85..82       MOV     DPL,?V0 + 8
   \   0000AF   85..83       MOV     DPH,?V0 + 9
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   FC           MOV     R4,A
   \   0000B4   7D00         MOV     R5,#0x0
   \   0000B6   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   1838          
   1839                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000BC   74D3         MOV     A,#-0x2d
   \   0000BE   8E82         MOV     DPL,R6
   \   0000C0   8F83         MOV     DPH,R7
   \   0000C2   F0           MOVX    @DPTR,A
   1840                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000C3                ; Setup parameters for call to function osal_msg_send
   \   0000C3   EE           MOV     A,R6
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   FB           MOV     R3,A
   \   0000C7   85..82       MOV     DPL,?V0 + 0
   \   0000CA   85..83       MOV     DPH,?V0 + 1
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F9           MOV     R1,A
   \   0000D1   12....       LCALL   ??osal_msg_send?relay
   1841                  ret = TRUE;
   \   0000D4   75..01       MOV     ?V0 + 4,#0x1
   1842                }
   1843              }
   1844              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_2:
   \   0000D7   85..82       MOV     DPL,?V0 + 0
   \   0000DA   85..83       MOV     DPH,?V0 + 1
   \   0000DD   12....       LCALL   ?Subroutine38 & 0xFFFF
   1845            }
   \                     ??CrossCallReturnLabel_65:
   \   0000E0   E5..         MOV     A,?V0 + 0
   \   0000E2   7002         JNZ     ??ZDO_SendMsgCBs_5
   \   0000E4   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_SendMsgCBs_5:
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1846            return ( ret );
   \   0000EB   A9..         MOV     R1,?V0 + 4
   \   0000ED   02....       LJMP    ??Subroutine99_0 & 0xFFFF
   1847          }
   1848          
   1849          /*********************************************************************
   1850           * Incoming message processor
   1851           */
   1852          
   1853          /*********************************************************************
   1854           * @fn          ZDP_IncomingData
   1855           *
   1856           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1857           *              from the APS sub-layer to the ZDO.
   1858           *
   1859           * @param       pData - Incoming Message
   1860           *
   1861           * @return      none
   1862           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine127_0
   \   000003                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1863          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1864          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1865            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1866            uint8 handled;
   1867            zdoIncomingMsg_t inMsg;
   1868          
   1869            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine51 & 0xFFFF
   1870            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_101:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   1871            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_294:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000029   C0E0         PUSH    A
   \   00002B   740B         MOV     A,#0xb
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   12....       LCALL   ?Subroutine51 & 0xFFFF
   1872            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_102:
   \   000035   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000038   740C         MOV     A,#0xc
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   1873            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_295:
   \   000040   EA           MOV     A,R2
   \   000041   2419         ADD     A,#0x19
   \   000043   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000046   C0E0         PUSH    A
   \   000048   740E         MOV     A,#0xe
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   1874          
   1875            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000050   EA           MOV     A,R2
   \   000051   241F         ADD     A,#0x1f
   \   000053   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000056   14           DEC     A
   \   000057   C0E0         PUSH    A
   \   000059   7410         MOV     A,#0x10
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
   1876            inMsg.asdu = pData->cmd.Data+1;
   \   000061   EA           MOV     A,R2
   \   000062   2421         ADD     A,#0x21
   \   000064   F8           MOV     R0,A
   \   000065   EB           MOV     A,R3
   \   000066   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   2401         ADD     A,#0x1
   \   00006C   FC           MOV     R4,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   3400         ADDC    A,#0x0
   \   000071   FD           MOV     R5,A
   \   000072   7413         MOV     A,#0x13
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   EC           MOV     A,R4
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   ED           MOV     A,R5
   \   00007B   12....       LCALL   ?Subroutine49 & 0xFFFF
   1877            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_285:
   \   00007E   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C0E0         PUSH    A
   \   000084   740F         MOV     A,#0xf
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   D0E0         POP     A
   \   00008B   F0           MOVX    @DPTR,A
   1878            inMsg.macDestAddr = pData->macDestAddr;
   \   00008C   EA           MOV     A,R2
   \   00008D   2412         ADD     A,#0x12
   \   00008F   F582         MOV     DPL,A
   \   000091   EB           MOV     A,R3
   \   000092   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000095   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000098   7411         MOV     A,#0x11
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   12....       LCALL   ?Subroutine46 & 0xFFFF
   1879          
   1880            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_79:
   \   0000A4   AA82         MOV     R2,DPL
   \   0000A6   AB83         MOV     R3,DPH
   \   0000A8   12....       LCALL   ??ZDO_SendMsgCBs?relay
   \   0000AB   E9           MOV     A,R1
   \   0000AC   FC           MOV     R4,A
   \   0000AD   8001         SJMP    ??ZDP_IncomingData_0
   1881          
   1882          #if (defined MT_ZDO_CB_FUNC)
   1883          #if !defined MT_TASK
   1884            if (zgZdoDirectCB)
   1885          #endif
   1886            {
   1887              MT_ZdoDirectCB( pData, &inMsg );
   1888            }
   1889          #endif
   1890          
   1891            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1892            {
   1893              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1894              {
   1895                zdpMsgProcs[x].pFn( &inMsg );
   1896                return;
   1897              }
   1898              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000AF   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000B0   8E..         MOV     ?V0 + 0,R6
   \   0000B2   75..00       MOV     ?V0 + 1,#0x0
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   78..         MOV     R0,#?V0 + 0
   \   0000B9   12....       LCALL   ?S_SHL
   \   0000BC   E5..         MOV     A,?V0 + 0
   \   0000BE   24..         ADD     A,#(zdpMsgProcs & 0xff)
   \   0000C0   F8           MOV     R0,A
   \   0000C1   E5..         MOV     A,?V0 + 1
   \   0000C3   34..         ADDC    A,#((zdpMsgProcs >> 8) & 0xff)
   \   0000C5   F9           MOV     R1,A
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   E4           CLR     A
   \   0000CB   93           MOVC    A,@A+DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   93           MOVC    A,@A+DPTR
   \   0000D1   F583         MOV     DPH,A
   \   0000D3   D082         POP     DPL
   \   0000D5   AA82         MOV     R2,DPL
   \   0000D7   AB83         MOV     R3,DPH
   \   0000D9   74FF         MOV     A,#-0x1
   \   0000DB   6A           XRL     A,R2
   \   0000DC   7003         JNZ     ??ZDP_IncomingData_2
   \   0000DE   74FF         MOV     A,#-0x1
   \   0000E0   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   0000E1   602E         JZ      ??ZDP_IncomingData_3
   \   0000E3   740C         MOV     A,#0xc
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   6A           XRL     A,R2
   \   0000EA   7003         JNZ     ??ZDP_IncomingData_4
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   0000EF   70BE         JNZ     ??ZDP_IncomingData_1
   \   0000F1                ; Setup parameters for indirect call
   \   0000F1   85..82       MOV     DPL,?XSP + 0
   \   0000F4   85..83       MOV     DPH,?XSP + 1
   \   0000F7   AA82         MOV     R2,DPL
   \   0000F9   AB83         MOV     R3,DPH
   \   0000FB   8882         MOV     DPL,R0
   \   0000FD   8983         MOV     DPH,R1
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   E4           CLR     A
   \   000102   93           MOVC    A,@A+DPTR
   \   000103   C0E0         PUSH    A
   \   000105   7401         MOV     A,#0x1
   \   000107   93           MOVC    A,@A+DPTR
   \   000108   F583         MOV     DPH,A
   \   00010A   D082         POP     DPL
   \   00010C   12....       LCALL   ?CALL_IND
   \   00010F   8010         SJMP    ??ZDP_IncomingData_5
   1899            }
   1900          
   1901            // Handle unhandled messages
   1902            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000111   EC           MOV     A,R4
   \   000112   700D         JNZ     ??ZDP_IncomingData_5
   1903              ZDApp_InMsgCB( &inMsg );
   \   000114                ; Setup parameters for call to function ZDApp_InMsgCB
   \   000114   85..82       MOV     DPL,?XSP + 0
   \   000117   85..83       MOV     DPH,?XSP + 1
   \   00011A   AA82         MOV     R2,DPL
   \   00011C   AB83         MOV     R3,DPH
   \   00011E   12....       LCALL   ??ZDApp_InMsgCB?relay
   \                     ??ZDP_IncomingData_5:
   \   000121   7415         MOV     A,#0x15
   \   000123   02....       LJMP    ??Subroutine107_0 & 0xFFFF
   1904          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   02....       LJMP    ?Subroutine83 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1905          
   1906          /*********************************************************************
   1907          *********************************************************************/
   1908          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     ZDO_RegisterForZDOMsg        1      0     14
       -> osal_mem_alloc          0      0     28
     ZDO_RemoveRegisteredCB       0      0      9
       -> osal_mem_free           0      0     18
     ZDO_SendMsgCBs               1      0     52
       -> osal_msg_allocate       0      0     36
       -> osal_memcpy             0      0     42
       -> osal_memcpy             0      0     42
       -> osal_msg_send           0      0     36
     ZDP_BindUnbindReq            1      0     32
       -> sAddrExtCpy             0      0     44
       -> sAddrExtCpy             0      0     44
       -> fillAndSend             0      0     48
     ZDP_DeviceAnnce              1      0     22
       -> sAddrExtCpy             0      0     38
       -> fillAndSend             0      0     42
     ZDP_EPRsp                    1      0     26
       -> osal_memcpy             0      0     38
       -> fillAndSend             0      0     36
     ZDP_EndDeviceBindReq         1      0     35
       -> NLME_GetShortAddr       0      0     48
       -> NLME_GetExtAddr         0      0     48
       -> sAddrExtCpy             0      0     48
       -> fillAndSend             0      0     52
     ZDP_GenericRsp               1      0     17
       -> fillAndSend             0      0     26
     ZDP_IEEEAddrReq              1      0     21
       -> fillAndSend             0      0     42
     ZDP_IncomingData             1      0     31
       -> ZDO_SendMsgCBs          0      0     62
       -> ZDApp_InMsgCB           0      0     62
     ZDP_MatchDescReq             1      0     28
       -> fillAndSend             0      0     40
     ZDP_MgmtBindRsp              1      0     28
       -> osal_mem_alloc          0      0     42
       -> sAddrExtCpy             0      0     42
       -> sAddrExtCpy             0      0     42
       -> fillAndSend             0      0     46
       -> osal_mem_free           0      0     42
     ZDP_MgmtDirectJoinReq        1      0     13
       -> sAddrExtCpy             0      0     20
       -> fillAndSend             0      0     24
     ZDP_MgmtLeaveReq             1      0     14
       -> sAddrExtCpy             0      0     20
       -> fillAndSend             0      0     24
     ZDP_MgmtLqiRsp               1      0     30
       -> fillAndSend             0      0     50
       -> osal_mem_alloc          0      0     46
       -> sAddrExtCpy             0      0     46
       -> sAddrExtCpy             0      0     46
       -> fillAndSend             0      0     50
       -> osal_mem_free           0      0     46
     ZDP_MgmtNwkDiscReq           1      0     22
       -> osal_buffer_uint32      0      0     36
       -> fillAndSend             0      0     32
     ZDP_MgmtNwkDiscRsp           1      0     30
       -> osal_mem_alloc          0      0     46
       -> sAddrExtCpy             0      0     46
       -> fillAndSend             0      0     50
       -> osal_mem_free           0      0     46
     ZDP_MgmtNwkUpdateNotify      1      0     43
       -> osal_mem_alloc          0      0     54
       -> osal_buffer_uint32      0      0     62
       -> osal_memcpy             0      0     60
       -> fillAndSend             0      0     58
       -> osal_mem_free           0      0     54
     ZDP_MgmtNwkUpdateReq         1      0     28
       -> osal_buffer_uint32      0      0     44
       -> fillAndSend             0      0     40
     ZDP_MgmtPermitJoinReq        1      0     12
       -> fillAndSend             0      0     24
     ZDP_MgmtRtgRsp               1      0     27
       -> osal_mem_alloc          0      0     40
       -> fillAndSend             0      0     44
       -> osal_mem_free           0      0     40
     ZDP_NWKAddrOfInterestReq     1      0     13
       -> fillAndSend             0      0     24
     ZDP_NodeDescMsg              1      0     14
       -> fillAndSend             0      0     24
     ZDP_NwkAddrReq               1      0     25
       -> sAddrExtCmp             0      0     46
       -> sAddrExtCpy             0      0     46
       -> fillAndSend             0      0     50
     ZDP_PowerDescMsg             1      0     14
       -> fillAndSend             0      0     24
     ZDP_SendData                 1      0     21
       -> fillAndSend             0      0     32
     ZDP_ServerDiscReq            1      0     21
       -> fillAndSend             0      0     42
     ZDP_ServerDiscRsp            1      0     17
       -> fillAndSend             0      0     26
     ZDP_SimpleDescMsg            1      0     20
       -> fillAndSend             0      0     40
     ZDP_SimpleDescReq            1      0     13
       -> fillAndSend             0      0     24
     ZDP_UserDescRsp              1      0     25
       -> osal_memcpy             0      0     44
       -> fillAndSend             0      0     42
     ZDP_UserDescSet              1      0     20
       -> osal_memcpy             0      0     36
       -> osal_memset             0      0     30
       -> fillAndSend             0      0     34
     fillAndSend                  1      0     75
       -> osal_memset             0      0     56
       -> AF_DataRequest          0      0     74
     zdpProcessAddrReq            1      0     38
       -> sAddrExtCmp             0      0     72
       -> AssocGetWithExt         0      0     72
       -> AssocGetWithShort       0      0     72
       -> AddrMgrEntryGet         0      0     72
       -> sAddrExtCpy             0      0     72
       -> AssocMakeList           0      0     72
       -> osal_mem_free           0      0     72
       -> fillAndSend             0      0     76


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     ZDP_AF_ENDPOINT                     1
     ZDP_TransID                         1
     ZDP_Buf                            80
     ZDP_TmpBuf                          2
     ZDP_TxOptions                       1
     zdoMsgCBs                           2
     zdpMsgProcs                        48
     fillAndSend                       188
     ?Subroutine17                      14
     ?Subroutine73                       6
     ?Subroutine38                       4
     ?Subroutine70                       8
     ZDP_SendData                      114
     ??Subroutine94_0                    5
     ??Subroutine98_0                    6
     ?Subroutine24                       7
     ?Subroutine34                       3
     ??Subroutine110_0                   4
     ??Subroutine111_0                   8
     ??Subroutine125_0                   6
     ZDP_NWKAddrOfInterestReq           10
     ?Subroutine91                      14
     ?Subroutine53                       2
     ??Subroutine95_0                    3
     ??Subroutine96_0                    1
     ??Subroutine97_0                    4
     ?Subroutine7                       14
     ?Subroutine68                       8
     ??Subroutine107_0                   8
     ?Subroutine74                       4
     ?Subroutine79                       9
     ?Subroutine81                       3
     ZDP_NwkAddrReq                    126
     ?Subroutine46                       8
     ZDP_IEEEAddrReq                    59
     ?Subroutine48                       6
     ?Subroutine82                      15
     ??Subroutine106_0                   2
     ZDP_MatchDescReq                  228
     ??Subroutine99_0                    5
     ?Subroutine2                       16
     ?Subroutine41                       6
     ??Subroutine108_0                   4
     ?Subroutine66                       4
     ??Subroutine121_0                   1
     ??Subroutine122_0                  11
     ?Subroutine64                       5
     ??Subroutine124_0                   7
     ZDP_SimpleDescReq                  30
     ?Subroutine19                       7
     ZDP_UserDescSet                    93
     ?Subroutine87                       8
     ?Subroutine40                      27
     ?Subroutine18                      12
     ?Subroutine61                       6
     ??Subroutine126_0                   6
     ZDP_ServerDiscReq                  82
     ?Subroutine45                      17
     ZDP_DeviceAnnce                    63
     ?Subroutine20                       1
     ??Subroutine100_0                   4
     ?Subroutine13                      10
     ?Subroutine83                       5
     ?Subroutine21                       3
     ??Subroutine112_0                   4
     zdpProcessAddrReq                 715
     ??Subroutine101_0                   3
     ??Subroutine102_0                   5
     ?Subroutine33                       5
     ??Subroutine109_0                   6
     ?Subroutine60                      11
     ?Subroutine84                       5
     ?Subroutine0                        3
     ??Subroutine114_0                   4
     ?Subroutine25                       4
     ?Subroutine67                       3
     ??Subroutine115_0                   7
     ??Subroutine117_0                   1
     ??Subroutine118_0                   5
     ?Subroutine78                       4
     ?Subroutine8                        3
     ?Subroutine49                       1
     ?Subroutine85                       5
     ??Subroutine127_0                   6
     ??Subroutine129_0                   6
     ZDP_NodeDescMsg                    97
     ?Subroutine92                       8
     ?Subroutine59                       3
     ??Subroutine103_0                   5
     ?Subroutine14                       5
     ?Subroutine63                       1
     ??Subroutine104_0                   4
     ?Subroutine77                      15
     ?Subroutine12                       4
     ?Subroutine62                       8
     ?Subroutine11                       1
     ??Subroutine105_0                   5
     ?Subroutine10                       6
     ?Subroutine54                      17
     ?Subroutine47                       4
     ?Subroutine3                       27
     ?Subroutine6                       14
     ZDP_PowerDescMsg                   39
     ZDP_SimpleDescMsg                 316
     ?Subroutine32                      17
     ?Subroutine31                      15
     ?Subroutine22                       8
     ?Subroutine5                        7
     ?Subroutine23                       4
     ?Subroutine15                       5
     ?Subroutine65                      16
     ?Subroutine4                        2
     ??Subroutine123_0                   4
     ZDP_EPRsp                         164
     ?Subroutine69                       3
     ?Subroutine43                       7
     ?Subroutine52                       2
     ?Subroutine86                       3
     ZDP_UserDescRsp                   128
     ZDP_ServerDiscRsp                  80
     ?Subroutine93                       5
     ZDP_GenericRsp                     86
     ?Subroutine39                      12
     ?Subroutine37                       5
     ZDP_EndDeviceBindReq              261
     ?Subroutine89                       5
     ?Subroutine26                       5
     ?Subroutine42                       4
     ?Subroutine16                      14
     ?Subroutine71                       9
     ZDP_BindUnbindReq                 202
     ?Subroutine35                       7
     ?Subroutine29                       4
     ?Subroutine72                       6
     ?Subroutine80                       9
     ZDP_MgmtNwkDiscReq                 67
     ?Subroutine30                       9
     ZDP_MgmtDirectJoinReq              27
     ?Subroutine90                      19
     ZDP_MgmtPermitJoinReq              20
     ZDP_MgmtLeaveReq                   61
     ??Subroutine128_0                   6
     ZDP_MgmtNwkUpdateReq              143
     ?Subroutine88                       2
     ZDP_MgmtNwkDiscRsp                318
     ?Subroutine55                       6
     ??Subroutine113_0                   9
     ?Subroutine9                        4
     ??Subroutine116_0                  13
     ?Subroutine75                       9
     ?Subroutine58                      11
     ?Subroutine27                       2
     ?Subroutine44                       6
     ??Subroutine120_0                   6
     ?Subroutine76                      14
     ZDP_MgmtLqiRsp                    345
     ?Subroutine50                      10
     ?Subroutine1                        8
     ??Subroutine119_0                   6
     ZDP_MgmtRtgRsp                    215
     ZDP_MgmtBindRsp                   291
     ?Subroutine36                      10
     ?Subroutine28                       5
     ?Subroutine57                       2
     ZDP_MgmtNwkUpdateNotify           264
     ZDO_RegisterForZDOMsg             151
     ZDO_RemoveRegisteredCB            112
     ZDO_SendMsgCBs                    240
     ?Subroutine56                       3
     ZDP_IncomingData                  294
     ?Subroutine51                       8
     ?<Initializer for ZDP_TmpBuf>       2
     ??fillAndSend?relay                 6
     ??ZDP_SendData?relay                6
     ??ZDP_NWKAddrOfInterestReq?relay    6
     ??ZDP_NwkAddrReq?relay              6
     ??ZDP_IEEEAddrReq?relay             6
     ??ZDP_MatchDescReq?relay            6
     ??ZDP_SimpleDescReq?relay           6
     ??ZDP_UserDescSet?relay             6
     ??ZDP_ServerDiscReq?relay           6
     ??ZDP_DeviceAnnce?relay             6
     ??zdpProcessAddrReq?relay           6
     ??ZDP_NodeDescMsg?relay             6
     ??ZDP_PowerDescMsg?relay            6
     ??ZDP_SimpleDescMsg?relay           6
     ??ZDP_EPRsp?relay                   6
     ??ZDP_UserDescRsp?relay             6
     ??ZDP_ServerDiscRsp?relay           6
     ??ZDP_GenericRsp?relay              6
     ??ZDP_EndDeviceBindReq?relay        6
     ??ZDP_BindUnbindReq?relay           6
     ??ZDP_MgmtNwkDiscReq?relay          6
     ??ZDP_MgmtDirectJoinReq?relay       6
     ??ZDP_MgmtPermitJoinReq?relay       6
     ??ZDP_MgmtLeaveReq?relay            6
     ??ZDP_MgmtNwkUpdateReq?relay        6
     ??ZDP_MgmtNwkDiscRsp?relay          6
     ??ZDP_MgmtLqiRsp?relay              6
     ??ZDP_MgmtRtgRsp?relay              6
     ??ZDP_MgmtBindRsp?relay             6
     ??ZDP_MgmtNwkUpdateNotify?relay     6
     ??ZDO_RegisterForZDOMsg?relay       6
     ??ZDO_RemoveRegisteredCB?relay      6
     ??ZDO_SendMsgCBs?relay              6
     ??ZDP_IncomingData?relay            6

 
 6 530 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    49 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 785 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
