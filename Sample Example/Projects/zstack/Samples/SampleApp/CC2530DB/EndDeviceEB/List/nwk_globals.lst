###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                27/Jul/2010  10:09:18 #
# Copyright 2004-2009 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\R.D Dept\程式開發\TI Zigbee                     #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Components\sta #
#                          ck\nwk\nwk_globals.c                               #
#    Command line       =  -f "D:\R.D Dept\程式開發\TI Zigbee                 #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func    #
#                          -DBLINK_LEDS) -f "D:\R.D Dept\程式開發\TI Zigbee   #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg" (-DSECURE=0                      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE      #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\R.D Dept\程式開發\TI Zigbee                    #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Components\sta #
#                          ck\nwk\nwk_globals.c" -D NWK_AUTO_POLL -D          #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC "D:\R.D                 #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\EndDeviceEB\List\" -lA "D:\R.D                  #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\EndDeviceEB\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\R.D Dept\程式開發\TI Zigbee                 #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\" -e  #
#                          --require_prototypes --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\R.D Dept\程式開發\TI   #
#                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC #
#                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\" -I "D:\R.D   #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\SOURCE\" -I "D:\R.D Dept\程式開發\TI Zigbee  #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530 #
#                          DB\" -I "D:\R.D Dept\程式開發\TI Zigbee            #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MT\" -I "D:\R.D Dept\程式開發\TI Zigbee       #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\HAL\INCLUDE\" -I "D:\R.D Dept\程式開發\TI     #
#                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC #
#                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\HAL\TARGET\CC2530EB\" -I "D:\R.D       #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\" -I   #
#                          "D:\R.D Dept\程式開發\TI Zigbee                    #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\OSAL\INCLUDE\" -I "D:\R.D Dept\程式開發\TI    #
#                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC #
#                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\AF\" -I "D:\R.D                  #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I        #
#                          "D:\R.D Dept\程式開發\TI Zigbee                    #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SEC\" -I "D:\R.D Dept\程式開發\TI       #
#                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC #
#                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\SAPI\" -I "D:\R.D                #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SYS\" -I        #
#                          "D:\R.D Dept\程式開發\TI Zigbee                    #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\ZDO\" -I "D:\R.D Dept\程式開發\TI       #
#                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC #
#                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\ZMAC\F8W\" -I "D:\R.D                  #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I "D:\R.D     #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\" -I   #
#                          "D:\R.D Dept\程式開發\TI Zigbee                    #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\SERVICES\SDATA\" -I "D:\R.D Dept\程式開發\TI  #
#                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC #
#                          2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MAC\INCLUDE\" -I "D:\R.D               #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I   #
#                          "D:\R.D Dept\程式開發\TI Zigbee                    #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\" -I "D:\R.D              #
#                          Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. #
#                          0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\S #
#                          INGLE_CHIP\" -I "C:\IAR Systems\Embedded           #
#                          Workbench 5.3\8051\INC\" -I "C:\IAR                #
#                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  D:\R.D Dept\程式開發\TI Zigbee                     #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\EndDeviceEB\List\nwk_ #
#                          globals.lst                                        #
#    Object file        =  D:\R.D Dept\程式開發\TI Zigbee                     #
#                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2. #
#                          3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\nwk_g #
#                          lobals.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\R.D Dept\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\ZStack-CC2530-2.3.0-1.4.0\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2010-01-11 09:24:44 -0800 (Mon, 11 Jan 2010) $
      4            Revision:       $Revision: 21474 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
      9          
     10            Should you have any questions regarding your right to use this Software,
     11            contact Texas Instruments Incorporated at www.TI.com. 
     12          **************************************************************************************************/
     13          
     14          /*********************************************************************
     15           * INCLUDES
     16           */
     17          #include "ZComdef.h"
     18          #include "OSAL.h"
     19          #include "AddrMgr.h"
     20          #include "AssocList.h"
     21          #include "BindingTable.h"
     22          
     23          /* NWK */
     24          #include "nwk_util.h"
     25          #include "nwk_globals.h"
     26          #include "APS.h"
     27          
     28          /* Security */
     29          #include "ssp.h"
     30          
     31          /* ZDO */
     32          #include "rtg.h"
     33          #include "ZDConfig.h"
     34          #include "ZGlobals.h"
     35          
     36          /* ZMain */
     37          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     38          
     39          /* HAL */
     40          #include "hal_lcd.h"
     41          #include "hal_timer.h"
     42          
     43          /*********************************************************************
     44           * MACROS
     45           */
     46          
     47          /*********************************************************************
     48           * CONSTANTS
     49           */
     50          
     51          // Maximums for the data buffer queue
     52          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     53          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     54          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     55          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     56          
     57          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     58          // A known shortcoming is that when a message is enqueued as "hold" for a
     59          // sleeping device, the timer tick may have counted down to 1, so that msg
     60          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     61          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     62          // So the hold time will vary within this interval:
     63          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     64          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     65          #define NWK_INDIRECT_CNT_RTG_TMR    1
     66          // To hold msg for sleeping end devices for 30 secs:
     67          // #define CNT_RTG_TIMER            1
     68          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     69          // To hold msg for sleeping end devices for 30 mins:
     70          // #define CNT_RTG_TIMER            60
     71          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     72          // To hold msg for sleeping end devices for 30 days:
     73          // #define CNT_RTG_TIMER            60
     74          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     75          // Maximum msgs to hold per associated device.
     76          #define NWK_INDIRECT_MSG_MAX_PER    3
     77          // Maximum total msgs to hold for all associated devices.
     78          #define NWK_INDIRECT_MSG_MAX_ALL    \
     79                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
     80          
     81          /*********************************************************************
     82           * TYPEDEFS
     83           */
     84          
     85          /*********************************************************************
     86           * NWK GLOBAL VARIABLES
     87           */
     88          
     89          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
     90          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
     91          
     92          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
     93          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
     94          
     95          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
     96          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
     97          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
     98          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
     99          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    100          

   \                                 In  segment CODE_C, align 1
    101          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    102          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    103          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    104          
    105          // change this if using a different stack profile...
    106          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    108          
    109          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )
    110            uint8 CskipRtrs[1] = {0};
    111            uint8 CskipChldrn[1] = {0};
    112          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )

   \                                 In  segment XDATA_I, align 1, keep-with-next
    113            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
   \                     CskipRtrs:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipRtrs>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    114            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
   \                     CskipChldrn:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipChldrn>`
   \   000006                REQUIRE __INIT_XDATA_I
    115          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    116            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    117            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    118          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    119            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    120            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    121          #endif // STACK_PROFILE_ID
    122          
    123          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    125          
    126          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 378
   \   00017A                REQUIRE __INIT_XDATA_Z
    128          

   \                                 In  segment CODE_C, align 1
    129          CONST uint8 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    130          CONST uint8 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    131          CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    132          

   \                                 In  segment CODE_C, align 1
    133          CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   04           DB 4
    134          
    135           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 92
   \   00005C                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment CODE_C, align 1
    138          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    139          

   \                                 In  segment CODE_C, align 1
    140          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    141          
    142          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    144          
    145          #if defined ( ZIGBEE_SOURCE_ROUTING )
    146            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
    147            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
    148          #endif
    149          
    150          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    152          
    153          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    155          
    156          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment CODE_C, align 1
    160          CONST uint8 gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    161          
    162          // For tree addressing, this switch allows the allocation of a 
    163          // router address to an end device when end device address are 
    164          // all used up.  If this option is enabled, address space
    165          // could be limited.

   \                                 In  segment CODE_C, align 1
    166          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    167          
    168          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    169          // number of link status periods after the last received address conflict report
    170          // (network status command)
    171          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
    172          #endif
    173          
    174          #if defined ( ZIGBEE_FREQ_AGILITY )
    175          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
    176          #endif
    177            
    178          /*********************************************************************
    179           * APS GLOBAL VARIABLES
    180           */
    181          
    182          // The Maximum number of binding records
    183          // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    184          CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   0400         DW 4
    185          
    186          #if defined ( REFLECTOR )
    187            // The Maximum number of cluster IDs in a binding record
    188            // This number is defined in BindingTable.h - change it there.

   \                                 In  segment CODE_C, align 1
    189            CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    190          

   \                                 In  segment CODE_C, align 1
    191            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    192          
    193            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    195          #endif
    196          
    197          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    198          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    199          
    200          // APS End Device Broadcast Table
    201          #if ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
   \                     apsEndDeviceBroadcastTable:
   \   000000                DS 90
   \   00005A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    203            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
   \                     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
   \   000001                REQUIRE __INIT_XDATA_I
    204          #endif
    205          
    206          /*********************************************************************
    207           * SECURITY GLOBAL VARIABLES
    208           */
    209          
    210          // This is the default pre-configured key,
    211          // change this to make a unique key
    212          // SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    213          CONST uint8 defaultKey[SEC_KEY_LEN] =
   \                     defaultKey:
   \   000000   00010203     DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
   \            04050607
   \            08090A0B
   \            0C0D0E0F
    214          {
    215          #if defined ( APP_TP ) || defined ( APP_TP2 )
    216            // Key for ZigBee Conformance Testing
    217            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    218            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    219          #else
    220            // Key for In-House Testing
    221            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    222            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    223          #endif
    224          };
    225          
    226          // This is the default pre-configured Trust Center Link key,
    227          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    228          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] =
   \                     defaultTCLinkKey:
   \   000000   56777777     DB 86, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119
   \            77777777
   \            77777777
   \            7777    
   \   00000E   7777         DB 119, 119
    229          {
    230            0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    231            0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
    232          };
    233          
    234          /*********************************************************************
    235           * STATUS STRINGS
    236           */
    237          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    238            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    239            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    240            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    241            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    242            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    243            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    244            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    245            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    246            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    247            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    248            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    249            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    250            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    251            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    252            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    253            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    254          #endif
    255          
    256          /*********************************************************************
    257           * @fn       nwk_globals_init()
    258           * @brief    Initialize nwk layer globals.  These are the system defaults and
    259           *           should be changed by the user here.  The default definitions are
    260           *           defined in nwk.h or NLMEDE.h.
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void nwk_globals_init( void )
   \                     nwk_globals_init:
    263          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    264            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    265            
    266          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    267            if ( ZSTACK_ROUTER_BUILD )
    268            {
    269              // Initialize the Cskip Table
    270              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    271              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    272            }
    273          #endif
    274            
    275            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    276            // to 0 (compiler flag).
    277            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    278            {
    279              NLME_InitLinkStatus();
    280            }
    281            
    282          #if defined ( ZIGBEE_FREQ_AGILITY )
    283            NwkFreqAgilityInit();
    284          #endif
    285          }
   \   00000B                REQUIRE ?Subroutine0
   \   00000B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    286          
    287          /*********************************************************************
    288           * @fn       NIB_init()
    289           *
    290           * @brief
    291           *
    292           *   Initialize attribute values in NIB
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void NIB_init()
   \                     NIB_init:
    295          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    296            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   ??osal_rand?relay
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    297          
    298            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   7402         MOV     A,#0x2
   \   00000E   90....       MOV     DPTR,#(_NIB + 17)
   \   000011   F0           MOVX    @DPTR,A
    299            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   7405         MOV     A,#0x5
   \   000014   90....       MOV     DPTR,#(_NIB + 4)
   \   000017   F0           MOVX    @DPTR,A
    300          
    301          #if ( NWK_MODE == NWK_MODE_MESH )
    302            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   740F         MOV     A,#0xf
   \   00001A   90....       MOV     DPTR,#(_NIB + 40)
   \   00001D   F0           MOVX    @DPTR,A
    303            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   90....       MOV     DPTR,#(_NIB + 41)
   \   000021   F0           MOVX    @DPTR,A
    304          #endif
    305          
    306            // BROADCAST SETTINGS:
    307            // ************************************************************************************************************
    308            //   Broadcast Delivery Time - set to multiples of 100ms 
    309            //                           - should be 500ms more than the retry time
    310            //                           - "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1) Passive Ack Timeout
    311            //                           - set to multiples of 100ms 
    312            //
    313            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000022   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#(_NIB + 7)
   \   000029   F0           MOVX    @DPTR,A
    314            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   00002A   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#(_NIB + 1)
   \   000031   F0           MOVX    @DPTR,A
    315            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000032   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000035   E0           MOVX    A,@DPTR
   \   000036   90....       MOV     DPTR,#(_NIB + 2)
   \   000039   F0           MOVX    @DPTR,A
    316          
    317            _NIB.ReportConstantCost = 0;
   \   00003A   E4           CLR     A
   \   00003B   90....       MOV     DPTR,#(_NIB + 8)
   \   00003E   F0           MOVX    @DPTR,A
    318            _NIB.RouteDiscRetries = 0;
   \   00003F   90....       MOV     DPTR,#(_NIB + 9)
   \   000042   F0           MOVX    @DPTR,A
    319            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000043   90....       MOV     DPTR,#(_NIB + 11)
   \   000046   F0           MOVX    @DPTR,A
    320            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000047   7401         MOV     A,#0x1
   \   000049   90....       MOV     DPTR,#(_NIB + 104)
   \   00004C   F0           MOVX    @DPTR,A
    321             
    322            if ( ZG_SECURE_ENABLED )
    323            {
    324              _NIB.SecurityLevel = SECURITY_LEVEL;
    325            }
    326            else
    327            {
    328              _NIB.SecurityLevel = 0;
   \   00004D   E4           CLR     A
   \   00004E   90....       MOV     DPTR,#(_NIB + 12)
   \   000051   F0           MOVX    @DPTR,A
    329            }
    330             
    331          #if defined ( ZIGBEEPRO )
    332            _NIB.SymLink = FALSE;
    333          #else
    334            _NIB.SymLink = TRUE;
   \   000052   7401         MOV     A,#0x1
   \   000054   90....       MOV     DPTR,#(_NIB + 13)
   \   000057   F0           MOVX    @DPTR,A
    335          #endif  
    336            
    337            _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000058   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   90....       MOV     DPTR,#(_NIB + 14)
   \   00005F   F0           MOVX    @DPTR,A
    338          
    339            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000060   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   000063   E0           MOVX    A,@DPTR
   \   000064   90....       MOV     DPTR,#(_NIB + 15)
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
    340          
    341            _NIB.RouteDiscoveryTime = 5;
   \   00006B   7405         MOV     A,#0x5
   \   00006D   90....       MOV     DPTR,#(_NIB + 18)
   \   000070   F0           MOVX    @DPTR,A
    342            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   000071   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000074   E0           MOVX    A,@DPTR
   \   000075   90....       MOV     DPTR,#(_NIB + 19)
   \   000078   F0           MOVX    @DPTR,A
    343          
    344            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000079   90....       MOV     DPTR,#(_NIB + 20)
   \   00007C   74FE         MOV     A,#-0x2
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   74FF         MOV     A,#-0x1
   \   000082   F0           MOVX    @DPTR,A
    345            _NIB.nwkLogicalChannel = 0;
   \   000083   E4           CLR     A
   \   000084   90....       MOV     DPTR,#(_NIB + 22)
   \   000087   F0           MOVX    @DPTR,A
    346            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000088   90....       MOV     DPTR,#(_NIB + 23)
   \   00008B   74FE         MOV     A,#-0x2
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   74FF         MOV     A,#-0x1
   \   000091   F0           MOVX    @DPTR,A
    347            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \   000092                ; Setup parameters for call to function osal_memset
   \   000092   7C08         MOV     R4,#0x8
   \   000094   7D00         MOV     R5,#0x0
   \   000096   7900         MOV     R1,#0x0
   \   000098   7A..         MOV     R2,#((_NIB + 25) & 0xff)
   \   00009A   7B..         MOV     R3,#(((_NIB + 25) >> 8) & 0xff)
   \   00009C   12....       LCALL   ??osal_memset?relay
    348            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   00009F   90....       MOV     DPTR,#(_NIB + 33)
   \   0000A2   74FE         MOV     A,#-0x2
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   74FF         MOV     A,#-0x1
   \   0000A8   F0           MOVX    @DPTR,A
    349          
    350            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   0000A9                ; Setup parameters for call to function sAddrExtCpy
   \   0000A9   7C..         MOV     R4,#(zgExtendedPANID & 0xff)
   \   0000AB   7D..         MOV     R5,#((zgExtendedPANID >> 8) & 0xff)
   \   0000AD   7A..         MOV     R2,#((_NIB + 53) & 0xff)
   \   0000AF   7B..         MOV     R3,#(((_NIB + 53) >> 8) & 0xff)
   \   0000B1   12....       LCALL   ??sAddrExtCpy?relay
    351             
    352            _NIB.nwkKeyLoaded = FALSE;
   \   0000B4   E4           CLR     A
   \   0000B5   90....       MOV     DPTR,#(_NIB + 61)
   \   0000B8   F0           MOVX    @DPTR,A
    353             
    354          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    355            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
    356            _NIB.nwkUniqueAddr = FALSE;
    357          #else
    358            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
   \   0000B9   90....       MOV     DPTR,#(_NIB + 96)
   \   0000BC   F0           MOVX    @DPTR,A
    359            _NIB.nwkUniqueAddr = TRUE;
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   90....       MOV     DPTR,#(_NIB + 97)
   \   0000C2   F0           MOVX    @DPTR,A
    360          #endif
    361          
    362            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD; 
   \   0000C3   E4           CLR     A
   \   0000C4   90....       MOV     DPTR,#(_NIB + 98)
   \   0000C7   F0           MOVX    @DPTR,A
    363            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   90....       MOV     DPTR,#(_NIB + 99)
   \   0000CD   F0           MOVX    @DPTR,A
    364           
    365            //MTO and source routing
    366            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000CE   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   90....       MOV     DPTR,#(_NIB + 102)
   \   0000D5   F0           MOVX    @DPTR,A
    367            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000D6   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   90....       MOV     DPTR,#(_NIB + 101)
   \   0000DD   F0           MOVX    @DPTR,A
    368            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000DE   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   90....       MOV     DPTR,#(_NIB + 103)
   \   0000E5   F0           MOVX    @DPTR,A
    369            _NIB.nwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \   0000E6   740A         MOV     A,#0xa
   \   0000E8   90....       MOV     DPTR,#(_NIB + 105)
   \   0000EB   F0           MOVX    @DPTR,A
    370          
    371          #if defined ( ZIGBEE_MULTICAST )
    372            _NIB.nwkUseMultiCast = TRUE;
    373          #else
    374            _NIB.nwkUseMultiCast = FALSE;
   \   0000EC   E4           CLR     A
   \   0000ED   90....       MOV     DPTR,#(_NIB + 100)
   \   0000F0   F0           MOVX    @DPTR,A
    375          #endif  
    376            _NIB.nwkManagerAddr = 0x0000;
   \   0000F1   90....       MOV     DPTR,#(_NIB + 106)
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   F0           MOVX    @DPTR,A
    377            _NIB.nwkUpdateId = 0;
   \   0000F7   90....       MOV     DPTR,#(_NIB + 110)
   \   0000FA   F0           MOVX    @DPTR,A
    378            _NIB.nwkTotalTransmissions = 0;
   \   0000FB   90....       MOV     DPTR,#(_NIB + 108)
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   F0           MOVX    @DPTR,A
    379          
    380            if ( ZSTACK_ROUTER_BUILD )
    381            {
    382          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    383              NLME_InitStochasticAddressing();
    384          #else
    385              NLME_InitTreeAddressing();
    386          #endif
    387            }
    388          }
   \   000101   02....       LJMP    ?Subroutine0 & 0xFFFF
    389          
    390          /*********************************************************************
    391           * @fn       nwk_Status()
    392           *
    393           * @brief
    394           *
    395           *   Status report.
    396           *
    397           * @param   statusCode
    398           * @param   statusValue
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    401          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 2,R4
   \   000007   8D..         MOV     ?V0 + 3,R5
    402            switch ( statusCode )
   \   000009   8A..         MOV     ?V0 + 0,R2
   \   00000B   8B..         MOV     ?V0 + 1,R3
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   000012   0000         DW        0
   \   000014   0500         DW        5
   \   000016   0200         DW        2
   \   000018   ....         DW        ??nwk_Status_0
   \   00001A   0300         DW        3
   \   00001C   ....         DW        ??nwk_Status_1
   \   00001E   0400         DW        4
   \   000020   ....         DW        ??nwk_Status_2
   \   000022   0310         DW        4099
   \   000024   ....         DW        ??nwk_Status_3
   \   000026   0410         DW        4100
   \   000028   ....         DW        ??nwk_Status_4
   \   00002A   ....         DW        ??nwk_Status_5
    403            {
    404              case NWK_STATUS_COORD_ADDR: // The state is coordinator addr
    405                if ( ZSTACK_ROUTER_BUILD )
    406                {
    407                  #if defined (LCD_SUPPORTED) 
    408                      HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
    409                      HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    410                      #if defined (Location) // The location initilization display state
    411                          halMcuWaitMs(300);
    412                          HalLcd_HW_Clear();
    413                          #if defined (CoordinatorKB)
    414                              HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_1);
    415                              HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_2);
    416                          #endif
    417                          #if defined (CoordinatorEB)
    418                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_1);
    419                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_2);
    420                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_3);
    421                              HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_4);
    422                          #endif
    423                      #endif
    424                  #endif
    425                }
    426                break;
    427          
    428              case NWK_STATUS_ROUTER_ADDR: // The state is router addr
    429                if ( ZSTACK_ROUTER_BUILD )
    430                {
    431                  #if defined (LCD_SUPPORTED)
    432                      HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 ); 
    433                  #endif
    434                }
    435                break;
    436          
    437              case NWK_STATUS_ORPHAN_RSP:
    438                if ( ZSTACK_ROUTER_BUILD )
    439                {
    440                  #if defined (LCD_SUPPORTED)
    441                  if ( statusValue == ZSuccess )
    442                      HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
    443                  else
    444                      HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
    445                  #endif
    446                }
    447                break;
    448          
    449              case NWK_ERROR_ASSOC_RSP:
    450                if ( ZSTACK_ROUTER_BUILD )
    451                {
    452                  #if defined (LCD_SUPPORTED)
    453                      HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
    454                      HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    455                  #endif
    456                }
    457                break;
    458                
    459              case NWK_STATUS_ED_ADDR: // The state is end-device addr
    460                if ( ZSTACK_END_DEVICE_BUILD )
    461                {
    462                  #if defined (LCD_SUPPORTED)
    463                      HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_1:
   \   00002C                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00002C   75..01       MOV     ?V0 + 0,#0x1
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   7910         MOV     R1,#0x10
   \   000036   7A..         MOV     R2,#(EndDeviceStr & 0xff)
   \   000038   7B..         MOV     R3,#((EndDeviceStr >> 8) & 0xff)
   \                     ??nwk_Status_6:
   \   00003A   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   00003D   7401         MOV     A,#0x1
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   8057         SJMP    ??nwk_Status_5
    464                  #endif
    465                }
    466                break;
    467          
    468              case NWK_STATUS_PARENT_ADDR: // The state is parent addr
    469                #if defined (LCD_SUPPORTED)      
    470                    HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??nwk_Status_2:
   \   000044                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000044   75..02       MOV     ?V0 + 0,#0x2
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   7910         MOV     R1,#0x10
   \   00004E   7A..         MOV     R2,#(ParentStr & 0xff)
   \   000050   7B..         MOV     R3,#((ParentStr >> 8) & 0xff)
   \   000052   80E6         SJMP    ??nwk_Status_6
    471                    #if defined (Location)
    472                        halMcuWaitMs(300);
    473                        HalLcd_HW_Clear();
    474                        #if defined (RouterKB)
    475                            HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_1);
    476                            HalLcdWriteString("[  ,   ][  ,   ]", HAL_LCD_LINE_2);
    477                        #endif
    478                        #if defined (RouterEB)
    479                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_1);
    480                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_2);
    481                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_3);
    482                            HalLcdWriteString("ID:     ,[     ]", HAL_LCD_LINE_4);
    483                        #endif
    484                    #endif 
    485                #endif
    486                break;
    487          
    488              case NWK_STATUS_ASSOC_CNF:
    489                #if defined (LCD_SUPPORTED)
    490                    HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_0:
   \   000054                ; Setup parameters for call to function HalLcdWriteScreen
   \   000054   7C..         MOV     R4,#(SuccessStr & 0xff)
   \   000056   7D..         MOV     R5,#((SuccessStr >> 8) & 0xff)
   \   000058   7A..         MOV     R2,#(AssocCnfStr & 0xff)
   \   00005A   7B..         MOV     R3,#((AssocCnfStr >> 8) & 0xff)
   \   00005C   803A         SJMP    ??nwk_Status_7
    491                #endif
    492                break;
    493          
    494              case NWK_ERROR_ASSOC_CNF_DENIED:
    495                #if defined (LCD_SUPPORTED)
    496                    HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_3:
   \   00005E                ; Setup parameters for call to function HalLcdWriteString
   \   00005E   7901         MOV     R1,#0x1
   \   000060   7A..         MOV     R2,#(AssocCnfFailStr & 0xff)
   \   000062   7B..         MOV     R3,#((AssocCnfFailStr >> 8) & 0xff)
   \   000064   12....       LCALL   ??HalLcdWriteString?relay
    497                    HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
   \   000067                ; Setup parameters for call to function HalLcdWriteValue
   \   000067   75..02       MOV     ?V0 + 0,#0x2
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006F   7910         MOV     R1,#0x10
   \   000071   AA..         MOV     R2,?V0 + 2
   \   000073   AB..         MOV     R3,?V0 + 3
   \   000075   7C00         MOV     R4,#0x0
   \   000077   7D00         MOV     R5,#0x0
   \   000079   12....       LCALL   ??HalLcdWriteValue?relay
   \   00007C   7401         MOV     A,#0x1
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
    498                #endif
    499                    halMcuWaitMs(5000); // delay 5 seconds
   \   000081                ; Setup parameters for call to function halMcuWaitMs
   \   000081   7A88         MOV     R2,#-0x78
   \   000083   7B13         MOV     R3,#0x13
   \   000085   12....       LCALL   ??halMcuWaitMs?relay
    500                    WatchDogEnable( WDTISH ); // Use watch dog to reset the system
   \   000088   75C9AB       MOV     0xc9,#-0x55
   \   00008B   75C95B       MOV     0xc9,#0x5b
   \   00008E   800B         SJMP    ??nwk_Status_5
    501                break;
    502          
    503              case NWK_ERROR_ENERGY_SCAN_FAILED: // The state is scan failed
    504                #if defined (LCD_SUPPORTED)
    505                    HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_4:
   \   000090                ; Setup parameters for call to function HalLcdWriteScreen
   \   000090   7C..         MOV     R4,#(ScanFailedStr & 0xff)
   \   000092   7D..         MOV     R5,#((ScanFailedStr >> 8) & 0xff)
   \   000094   7A..         MOV     R2,#(EnergyLevelStr & 0xff)
   \   000096   7B..         MOV     R3,#((EnergyLevelStr >> 8) & 0xff)
   \                     ??nwk_Status_7:
   \   000098   12....       LCALL   ??HalLcdWriteScreen?relay
    506                #endif
    507                break;
    508            }
    509          }
   \                     ??nwk_Status_5:
   \   00009B   7F04         MOV     R7,#0x4
   \   00009D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A0                REQUIRE WDCTL

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipRtrs>`:
   \   000000   06060606     DB 6, 6, 6, 6, 6, 0
   \            0600    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipChldrn>`:
   \   000000   14141414     DB 20, 20, 20, 20, 20, 0
   \            1400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
   \   000000   12           DB 18

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status
    510          
    511          /*********************************************************************
    512          *********************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     NIB_init                        2      0      0
       -> osal_rand                  4      0      0
       -> osal_memset                4      0      0
       -> sAddrExtCpy                4      0      0
     nwk_Status                      0      0     13
       -> HalLcdWriteStringValue     0      0     26
       -> HalLcdWriteStringValue     0      0     26
       -> HalLcdWriteScreen          0      0     24
       -> HalLcdWriteString          0      0     24
       -> HalLcdWriteValue           0      0     26
       -> halMcuWaitMs               0      0     24
       -> HalLcdWriteScreen          0      0     24
     nwk_globals_init                2      0      0
       -> AddrMgrInit                4      0      0


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     WDCTL                                             1
     gNWK_MAX_DEVICE_LIST                              2
     gNWK_MAX_SLEEPING_END_DEVICES                     1
     gNWK_MAX_DATABUFS_WAITING                         1
     gNWK_MAX_DATABUFS_SCHEDULED                       1
     gNWK_MAX_DATABUFS_CONFIRMED                       1
     gNWK_MAX_DATABUFS_TOTAL                           1
     gNWK_INDIRECT_CNT_RTG_TMR                         1
     gNWK_INDIRECT_MSG_MAX_PER                         1
     gNWK_INDIRECT_MSG_MAX_ALL                         1
     Cskip                                             2
     CskipRtrs                                         6
     CskipChldrn                                       6
     gMIN_TREE_LINK_COST                               1
     AssociatedDevList                               378
     gMAX_RTG_ENTRIES                                  1
     gMAX_RTG_SRC_ENTRIES                              1
     gMAX_RREQ_ENTRIES                                 1
     gMAX_NEIGHBOR_ENTRIES                             1
     neighborTable                                    92
     gMAX_SOURCE_ROUTE                                 1
     gMAX_BROADCAST_QUEUED                             1
     rtgTable                                        280
     rtDiscTable                                      64
     bcastTable                                       72
     bcastHoldHandle                                   9
     bcastHoldAckMask                                 36
     gMAX_BCAST                                        1
     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
                                                       1
     gNWK_MAX_BINDING_ENTRIES                          2
     gMAX_BINDING_CLUSTER_IDS                          1
     gBIND_REC_SIZE                                    2
     BindingTable                                     56
     gAPS_MAX_GROUPS                                   1
     apsEndDeviceBroadcastTable                       90
     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
                                                       1
     defaultKey                                       16
     defaultTCLinkKey                                 16
     PingStr                                          15
     AssocCnfStr                                      10
     SuccessStr                                        8
     EndDeviceStr                                     11
     ParentStr                                         8
     ZigbeeCoordStr                                   13
     NetworkIDStr                                     12
     RouterStr                                         8
     OrphanRspStr                                     16
     SentStr                                           5
     FailedStr                                         7
     AssocRspFailStr                                  15
     AssocIndStr                                      10
     AssocCnfFailStr                                  15
     EnergyLevelStr                                   13
     ScanFailedStr                                    12
     nwk_globals_init                                 11
     ?Subroutine0                                      7
     NIB_init                                        260
     nwk_Status                                      160
     ?<Initializer for CskipRtrs>                      6
     ?<Initializer for CskipChldrn>                    6
     ?<Initializer for gMIN_TREE_LINK_COST>            1
     ?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST    1
     ??nwk_globals_init?relay                          6
     ??NIB_init?relay                                  6
     ??nwk_Status?relay                                6

 
   438 bytes in segment BANKED_CODE
    18 bytes in segment BANK_RELAYS
    56 bytes in segment CODE_C
     1 byte  in segment SFR_AN
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
 1 079 bytes in segment XDATA_Z
 
   526 bytes of CODE  memory
   178 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
 1 093 bytes of XDATA memory

Errors: none
Warnings: none
