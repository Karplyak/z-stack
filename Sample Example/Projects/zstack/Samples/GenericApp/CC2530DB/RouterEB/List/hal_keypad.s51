///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               14/Apr/2010  08:32:37 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Components\hal\target\CC2530EB\hal_keypad. /
//                          c                                                 /
//    Command line       =  -f "D:\程式開發\TI Zigbee                         /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\Tools\CC253 /
//                          0DB\f8wRouter.cfg" (-DCPU32MHZ                    /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DRTR_NWK -DBLINK_LEDS) -f "D:\程式開發\TI     /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wConfig.cfg" (-DSECURE=0             /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\程式開發\TI Zigbee     /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Components\hal\ /
//                          target\CC2530EB\hal_keypad.c" -D ZTOOL_P1 -D      /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC "D:\程式開發\TI Zigbee    /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\RouterEB\List\" -lA  /
//                          "D:\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530 /
//                          DB\RouterEB\List\" --diag_suppress Pe001,Pa010    /
//                          -o "D:\程式開發\TI Zigbee                         /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\RouterEB\Obj\" -e    /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\程式開發\TI Zigbee    /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\" -I                 /
//                          "D:\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3. /
//                          0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530 /
//                          DB\..\SOURCE\" -I "D:\程式開發\TI Zigbee          /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\ZMAIN\TI253 /
//                          0DB\" -I "D:\程式開發\TI Zigbee                   /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MT\" -I "D:\程式開發\TI Zigbee              /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\HAL\INCLUDE\" -I "D:\程式開發\TI Zigbee     /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\HAL\TARGET\CC2530EB\" -I "D:\程式開發\TI    /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\MCU\CCSOC\" -I "D:\程式開發\TI  /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\INCLUDE\" -I "D:\程式開發\TI    /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\AF\" -I "D:\程式開發\TI        /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\NWK\" -I "D:\程式開發\TI       /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SEC\" -I "D:\程式開發\TI       /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SAPI\" -I "D:\程式開發\TI      /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SYS\" -I "D:\程式開發\TI       /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\ZDO\" -I "D:\程式開發\TI       /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\F8W\" -I "D:\程式開發\TI        /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\" -I "D:\程式開發\TI Zigbee     /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\SERVICES\SADDR\" -I "D:\程式開發\TI Zigbee  /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\SERVICES\SDATA\" -I "D:\程式開發\TI Zigbee  /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\INCLUDE\" -I "D:\程式開發\TI Zigbee     /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\HIGH_LEVEL\" -I "D:\程式開發\TI Zigbee  /
//                          Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack /
//                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\LOW_LEVEL\srf04\" -I "D:\程式開發\TI    /
//                          Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"    /
//                          -I "C:\IAR Systems\Embedded Workbench             /
//                          5.3\8051\INC\" -I "C:\IAR Systems\Embedded        /
//                          Workbench 5.3\8051\INC\CLIB\" -Ohz                /
//    List file          =  D:\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\GenericApp\CC2530D /
//                          B\RouterEB\List\hal_keypad.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_keypad

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??halKeypadI2cAck?relay
        EXTERN ??halKeypadI2cNack?relay
        EXTERN ??halKeypadI2cRead?relay
        EXTERN ??halKeypadI2cStart?relay
        EXTERN ??halKeypadI2cStop?relay
        EXTERN ??halKeypadI2cWrite?relay
        EXTERN ??halKeypadSensorData?relay
        EXTERN ??halKeypadWriteRegister?relay
        EXTERN ??halMcuWaitMs?relay
        EXTERN ??halMcuWaitUs?relay
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??halKeypadI2cAck?relay
        FUNCTION ??halKeypadI2cAck?relay,0203H
        PUBLIC ??halKeypadI2cNack?relay
        FUNCTION ??halKeypadI2cNack?relay,0203H
        PUBLIC ??halKeypadI2cRead?relay
        FUNCTION ??halKeypadI2cRead?relay,0203H
        PUBLIC ??halKeypadI2cStart?relay
        FUNCTION ??halKeypadI2cStart?relay,0203H
        PUBLIC ??halKeypadI2cStop?relay
        FUNCTION ??halKeypadI2cStop?relay,0203H
        PUBLIC ??halKeypadI2cWrite?relay
        FUNCTION ??halKeypadI2cWrite?relay,0203H
        PUBLIC ??halKeypadInit?relay
        FUNCTION ??halKeypadInit?relay,0203H
        PUBLIC ??halKeypadPushed?relay
        FUNCTION ??halKeypadPushed?relay,0203H
        PUBLIC ??halKeypadReadRegister?relay
        FUNCTION ??halKeypadReadRegister?relay,0203H
        PUBLIC ??halKeypadSensorData?relay
        FUNCTION ??halKeypadSensorData?relay,0203H
        PUBLIC ??halKeypadWriteRegister?relay
        FUNCTION ??halKeypadWriteRegister?relay,0203H
        PUBLIC ??halMcuWaitMs?relay
        FUNCTION ??halMcuWaitMs?relay,0203H
        PUBLIC ??halMcuWaitUs?relay
        FUNCTION ??halMcuWaitUs?relay,0203H
        PUBWEAK P2DIR
        PUBWEAK P2SEL
        PUBWEAK _A_P2
        PUBLIC halKeypadI2cAck
        FUNCTION halKeypadI2cAck,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halKeypadI2cNack
        FUNCTION halKeypadI2cNack,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halKeypadI2cRead
        FUNCTION halKeypadI2cRead,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halKeypadI2cStart
        FUNCTION halKeypadI2cStart,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halKeypadI2cStop
        FUNCTION halKeypadI2cStop,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halKeypadI2cWrite
        FUNCTION halKeypadI2cWrite,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halKeypadInit
        FUNCTION halKeypadInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halKeypadPushed
        FUNCTION halKeypadPushed,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC halKeypadReadRegister
        FUNCTION halKeypadReadRegister,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halKeypadResetCount
        PUBLIC halKeypadSensorData
        FUNCTION halKeypadSensorData,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halKeypadWriteRegister
        FUNCTION halKeypadWriteRegister,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halMcuWaitMs
        FUNCTION halMcuWaitMs,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halMcuWaitUs
        FUNCTION halMcuWaitUs,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
halKeypadI2cAck     SYMBOL "halKeypadI2cAck"
??halKeypadI2cAck?relay SYMBOL "?relay", halKeypadI2cAck
halKeypadI2cNack    SYMBOL "halKeypadI2cNack"
??halKeypadI2cNack?relay SYMBOL "?relay", halKeypadI2cNack
halKeypadI2cRead    SYMBOL "halKeypadI2cRead"
??halKeypadI2cRead?relay SYMBOL "?relay", halKeypadI2cRead
halKeypadI2cStart   SYMBOL "halKeypadI2cStart"
??halKeypadI2cStart?relay SYMBOL "?relay", halKeypadI2cStart
halKeypadI2cStop    SYMBOL "halKeypadI2cStop"
??halKeypadI2cStop?relay SYMBOL "?relay", halKeypadI2cStop
halKeypadI2cWrite   SYMBOL "halKeypadI2cWrite"
??halKeypadI2cWrite?relay SYMBOL "?relay", halKeypadI2cWrite
halKeypadInit       SYMBOL "halKeypadInit"
??halKeypadInit?relay SYMBOL "?relay", halKeypadInit
halKeypadPushed     SYMBOL "halKeypadPushed"
??halKeypadPushed?relay SYMBOL "?relay", halKeypadPushed
halKeypadReadRegister SYMBOL "halKeypadReadRegister"
??halKeypadReadRegister?relay SYMBOL "?relay", halKeypadReadRegister
halKeypadSensorData SYMBOL "halKeypadSensorData"
??halKeypadSensorData?relay SYMBOL "?relay", halKeypadSensorData
halKeypadWriteRegister SYMBOL "halKeypadWriteRegister"
??halKeypadWriteRegister?relay SYMBOL "?relay", halKeypadWriteRegister
halMcuWaitMs        SYMBOL "halMcuWaitMs"
??halMcuWaitMs?relay SYMBOL "?relay", halMcuWaitMs
halMcuWaitUs        SYMBOL "halMcuWaitUs"
??halMcuWaitUs?relay SYMBOL "?relay", halMcuWaitUs

// D:\程式開發\TI Zigbee Z-Stack\ZStack-CC2530-2.3.0-1.4.0\Components\hal\target\CC2530EB\hal_keypad.c
//    1 //-------------------------------------------------------------------
//    2 // Filename: hal_keypad.c
//    3 // Description: HAL keypad control implementation file
//    4 //-------------------------------------------------------------------
//    5 //-------------------------------------------------------------------
//    6 // INCLUDES
//    7 //-------------------------------------------------------------------
//    8 #include "hal_defs.h"
//    9 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DS 1
//   10 #include "hal_board.h"
//   11 #include "hal_lcd.h"
//   12 #include "hal_key.h"
//   13 #include "hal_keypad.h"
//   14 
//   15 //-------------------------------------------------------------------
//   16 // LOCAL VARIABLES
//   17 //-------------------------------------------------------------------

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   18 uint8 halKeypadResetCount;
halKeypadResetCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   19 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   20 void halKeypadI2cStart(void)
halKeypadI2cStart:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function halKeypadI2cStart
//   21 {
        FUNCALL halKeypadI2cStart, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cStart, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cStart, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   22     HAL_KEY_SCL_SET();
        SETB    0xa0.4
//   23     HAL_KEY_SDA_SET();
        SETB    0xa0.3
//   24     halMcuWaitUs(2);
        ; Setup parameters for call to function halMcuWaitUs
        LCALL   ??Subroutine13_0 & 0xFFFF
//   25     HAL_KEY_SDA_CLR();
//   26     halMcuWaitUs(2);
//   27     HAL_KEY_SCL_CLR();
??CrossCallReturnLabel_21:
        CLR     0xa0.3
//   28     halMcuWaitUs(2);
        ; Setup parameters for call to function halMcuWaitUs
        SJMP    ?Subroutine9
        CFI EndBlock cfiBlock0
        REQUIRE _A_P2
//   29 }
//   30 
//   31 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   32 void halKeypadI2cStop(void)
halKeypadI2cStop:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function halKeypadI2cStop
//   33 {
        FUNCALL halKeypadI2cStop, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cStop, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cStop, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   34     HAL_KEY_SDA_CLR();
        CLR     0xa0.3
//   35     halMcuWaitUs(2);
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//   36     HAL_KEY_SCL_SET();
        SETB    0xa0.4
//   37     halMcuWaitUs(2);
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//   38     HAL_KEY_SDA_SET();
        SETB    0xa0.3
//   39     halMcuWaitUs(2);
        ; Setup parameters for call to function halMcuWaitUs
        SJMP    ?Subroutine9
        CFI EndBlock cfiBlock1
        REQUIRE _A_P2
//   40 }
//   41 
//   42 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   43 void halKeypadI2cAck(void)
halKeypadI2cAck:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function halKeypadI2cAck
//   44 {
        FUNCALL halKeypadI2cAck, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cAck, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   45     HAL_KEY_SDA_CLR();
        CLR     0xa0.3
        CFI EndBlock cfiBlock2
//   46     HAL_KEY_SCL_SET();
        REQUIRE ?Subroutine11
        REQUIRE _A_P2
        ; // Fall through to label ?Subroutine11
//   47     halMcuWaitUs(2);
//   48     HAL_KEY_SCL_CLR();
//   49     halMcuWaitUs(2);
//   50 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_20:
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
        CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        SETB    0xa0.4
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
        ; Setup parameters for call to function halMcuWaitUs
        ; Setup parameters for call to function halMcuWaitUs
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond10) CFA_SP SP+-5
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_22:
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_21
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_4
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_5
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
        CLR     0xa0.3
        ; Setup parameters for call to function halMcuWaitUs
        ; Setup parameters for call to function halMcuWaitUs
        ; Setup parameters for call to function halMcuWaitUs
        ; Setup parameters for call to function halMcuWaitUs
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//   51 
//   52 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   53 void halKeypadI2cNack(void)
halKeypadI2cNack:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function halKeypadI2cNack
//   54 {
        FUNCALL halKeypadI2cNack, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cNack, halMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   55     HAL_KEY_SDA_SET();
        SETB    0xa0.3
//   56     HAL_KEY_SCL_SET();
        SJMP    ?Subroutine11
        CFI EndBlock cfiBlock19
        REQUIRE _A_P2
//   57     halMcuWaitUs(2);
//   58     HAL_KEY_SCL_CLR();
//   59     halMcuWaitUs(2);
//   60 }
//   61 
//   62 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   63 void halKeypadI2cWrite(uint8 d)
halKeypadI2cWrite:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function halKeypadI2cWrite
//   64 {
        FUNCALL halKeypadI2cWrite, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cWrite, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   65     uint8 i;
//   66 
//   67     for (i = 0; i < 8; i++)
        MOV     R6,#0x8
//   68     {
//   69         if (d &0x80)
??halKeypadI2cWrite_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??halKeypadI2cWrite_1
//   70         {
//   71             HAL_KEY_SDA_SET();
        SETB    0xa0.3
        SJMP    ??halKeypadI2cWrite_2
//   72         }
//   73         else
//   74         {
//   75             HAL_KEY_SDA_CLR();
??halKeypadI2cWrite_1:
        CLR     0xa0.3
//   76         }
//   77         HAL_KEY_SCL_SET();
??halKeypadI2cWrite_2:
        SETB    0xa0.4
//   78         d = d << 1;
        CLR     C
        RLC     A
        MOV     R7,A
//   79         halMcuWaitUs(2);
        ; Setup parameters for call to function halMcuWaitUs
        LCALL   ?Subroutine2 & 0xFFFF
//   80         HAL_KEY_SCL_CLR();
//   81         halMcuWaitUs(2);
//   82     }
??CrossCallReturnLabel_4:
        JNZ     ??halKeypadI2cWrite_0
//   83 }
        SJMP    ??Subroutine14_0
        CFI EndBlock cfiBlock20
        REQUIRE _A_P2
//   84 
//   85 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 uint8 halKeypadI2cRead(void)
halKeypadI2cRead:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function halKeypadI2cRead
//   87 {
        FUNCALL halKeypadI2cRead, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cRead, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadI2cRead, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   88     uint8 res = 0;
        MOV     R7,#0x0
//   89     uint8 cnt;
//   90 
//   91     HAL_KEY_SDA_SET();
        SETB    0xa0.3
//   92     HAL_KEY_SDA_DIR_IN();
        LCALL   ?Subroutine5 & 0xFFFF
//   93     halMcuWaitUs(2);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??halMcuWaitUs?relay
//   94     for (cnt = 0; cnt < 8; cnt++)
        MOV     R6,#0x8
//   95     {
//   96         HAL_KEY_SCL_SET();
??halKeypadI2cRead_0:
        SETB    0xa0.4
//   97         res <<= 1;
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R7,A
//   98         if (HAL_KEY_SDA_VAL())
        MOV     C,0xa0.3
        JNC     ??halKeypadI2cRead_1
//   99         {
//  100             res |= 0x01;
        SETB    0xE0 /* A   */.0
        MOV     R7,A
//  101         }
//  102         halMcuWaitUs(2);
??halKeypadI2cRead_1:
        ; Setup parameters for call to function halMcuWaitUs
        LCALL   ?Subroutine2 & 0xFFFF
//  103         HAL_KEY_SDA_CLR();
//  104         halMcuWaitUs(2);
//  105     }
??CrossCallReturnLabel_5:
        JNZ     ??halKeypadI2cRead_0
//  106     HAL_KEY_SDA_DIR_OUT();
        LCALL   ?Subroutine6 & 0xFFFF
//  107     return res;
??CrossCallReturnLabel_13:
        MOV     A,R7
        SJMP    ?Subroutine10
        CFI EndBlock cfiBlock21
        REQUIRE _A_P2
        REQUIRE P2SEL
        REQUIRE P2DIR
//  108 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_23:
        DEC     R6
        MOV     A,R6
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
//  109 
//  110 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  111 void halKeypadWriteRegister(uint8 addr, uint8 ch)
halKeypadWriteRegister:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function halKeypadWriteRegister
//  112 {
        FUNCALL halKeypadWriteRegister, halKeypadI2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadWriteRegister, halKeypadI2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  113     halKeypadI2cStart();
        ; Setup parameters for call to function halKeypadI2cStart
        LCALL   ?Subroutine0 & 0xFFFF
//  114     halKeypadI2cWrite(0xE0);
//  115     halKeypadI2cAck();
//  116     halKeypadI2cWrite(0x00);
//  117     halKeypadI2cAck();
//  118     halKeypadI2cWrite(addr); //addr
//  119     halKeypadI2cAck();
//  120     halKeypadI2cWrite(ch); //data
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     A,R7
        MOV     R1,A
        LCALL   ?Subroutine4 & 0xFFFF
//  121     halKeypadI2cAck();
//  122     halKeypadI2cStop();
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function halKeypadI2cStop
        LCALL   ??halKeypadI2cStop?relay
//  123 }
        SJMP    ??Subroutine14_0
        CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,A
        CFI EndBlock cfiBlock26
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock27
//  124 
//  125 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  126 uint8 halKeypadReadRegister(uint8 addr)
halKeypadReadRegister:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function halKeypadReadRegister
//  127 {
        FUNCALL halKeypadReadRegister, halKeypadI2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cNack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadReadRegister, halKeypadI2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  128     uint8 ch;
//  129 
//  130     halKeypadI2cStart();
        ; Setup parameters for call to function halKeypadI2cStart
        LCALL   ?Subroutine0 & 0xFFFF
//  131     halKeypadI2cWrite(0xE0);
//  132     halKeypadI2cAck();
//  133     halKeypadI2cWrite(0x00);
//  134     halKeypadI2cAck();
//  135     halKeypadI2cWrite(addr);
//  136     halKeypadI2cAck();
//  137     halKeypadI2cStop();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function halKeypadI2cStop
        LCALL   ?Subroutine1 & 0xFFFF
//  138 
//  139     halKeypadI2cStart();
//  140     halKeypadI2cWrite(0xE1);
//  141     halKeypadI2cAck();
//  142     ch = halKeypadI2cRead();
//  143     halKeypadI2cNack();
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function halKeypadI2cNack
        LCALL   ??halKeypadI2cNack?relay
//  144     halKeypadI2cStop();
        ; Setup parameters for call to function halKeypadI2cStop
        LCALL   ??halKeypadI2cStop?relay
//  145 
//  146     return ch;
        MOV     A,R6
        SJMP    ?Subroutine10
        CFI EndBlock cfiBlock28
//  147 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ??halKeypadI2cStart?relay
        ; Setup parameters for call to function halKeypadI2cWrite
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     R1,#-0x20
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function halKeypadI2cWrite
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     R1,#0x0
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function halKeypadI2cWrite
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     A,R6
        MOV     R1,A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  148 
//  149 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  150 uint16 halKeypadSensorData(void)
halKeypadSensorData:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function halKeypadSensorData
//  151 {
        FUNCALL halKeypadSensorData, halKeypadI2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cNack
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadSensorData, halKeypadI2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  152     uint16 val;
//  153     halKeypadI2cStart();
        ; Setup parameters for call to function halKeypadI2cStart
        LCALL   ??halKeypadI2cStart?relay
//  154     halKeypadI2cWrite(0xE0);
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     R1,#-0x20
        LCALL   ?Subroutine4 & 0xFFFF
//  155     halKeypadI2cAck();
//  156     halKeypadI2cWrite(0x00);
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     R1,#0x0
        LCALL   ?Subroutine4 & 0xFFFF
//  157     halKeypadI2cAck();
//  158     halKeypadI2cWrite(0x08);
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     R1,#0x8
        LCALL   ?Subroutine4 & 0xFFFF
//  159     halKeypadI2cAck();
//  160     halKeypadI2cStop();
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function halKeypadI2cStop
        LCALL   ?Subroutine1 & 0xFFFF
//  161 
//  162     halKeypadI2cStart();
//  163     halKeypadI2cWrite(0xE1);
//  164     halKeypadI2cAck();
//  165     val = halKeypadI2cRead();
//  166     halKeypadI2cAck();
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function halKeypadI2cAck
        LCALL   ??halKeypadI2cAck?relay
//  167     val = (val << 8) | halKeypadI2cRead();
        MOV     A,R6
        MOV     R7,A
        ; Setup parameters for call to function halKeypadI2cRead
        LCALL   ??halKeypadI2cRead?relay
        MOV     A,R1
        MOV     R6,A
//  168     halKeypadI2cNack();
        ; Setup parameters for call to function halKeypadI2cNack
        LCALL   ??halKeypadI2cNack?relay
//  169     halKeypadI2cStop();
        ; Setup parameters for call to function halKeypadI2cStop
        LCALL   ??halKeypadI2cStop?relay
//  170 
//  171     return val;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??Subroutine14_0
        CFI EndBlock cfiBlock32
//  172 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_1
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_0
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_1
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_0
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_1
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_6
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_8
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_9
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_2
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_3
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        LCALL   ??halKeypadI2cWrite?relay
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        ; Setup parameters for call to function halKeypadI2cAck
        LCALL   ??halKeypadI2cAck?relay
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        LCALL   ??halKeypadI2cStop?relay
        ; Setup parameters for call to function halKeypadI2cStart
        ; Setup parameters for call to function halKeypadI2cStart
        LCALL   ??halKeypadI2cStart?relay
        ; Setup parameters for call to function halKeypadI2cWrite
        ; Setup parameters for call to function halKeypadI2cWrite
        MOV     R1,#-0x1f
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function halKeypadI2cRead
        ; Setup parameters for call to function halKeypadI2cRead
        LCALL   ??halKeypadI2cRead?relay
        MOV     A,R1
        MOV     R6,A
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
//  173 
//  174 //-------------------------------------------------------------------
//  175 // @fn      halKeypadInit
//  176 // @brief   Initializes the keypad functionality
//  177 // @param  void
//  178 // @return void
//  179 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 void halKeypadInit(void)
halKeypadInit:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function halKeypadInit
//  181 {
        FUNCALL halKeypadInit, halKeypadWriteRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadInit, halKeypadWriteRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadInit, halKeypadWriteRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadInit, halKeypadWriteRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadInit, halKeypadWriteRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadInit, halKeypadWriteRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadInit, halKeypadWriteRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  182     HAL_KEY_SCL_DIR_OUT();
        ANL     0xf5,#0xef
        ORL     0xff,#0xef
        MOV     A,0xff
//  183     HAL_KEY_SDA_DIR_OUT();
        LCALL   ?Subroutine6 & 0xFFFF
//  184     HAL_KEY_SDA_DIR_IN();
??CrossCallReturnLabel_14:
        LCALL   ?Subroutine5 & 0xFFFF
//  185   
//  186     halKeypadWriteRegister(0x00, 0x62);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#0x62
        MOV     R1,#0x0
        LCALL   ??halKeypadWriteRegister?relay
//  187     halKeypadWriteRegister(0x02, 0xF7); // Sense1 bit0-3
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#-0x9
        MOV     R1,#0x2
        LCALL   ??halKeypadWriteRegister?relay
//  188     halKeypadWriteRegister(0x03, 0x07); // Sense2 bit0-3
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#0x7
        MOV     R1,#0x3
        LCALL   ??halKeypadWriteRegister?relay
//  189     halKeypadWriteRegister(0x04, 0x00);
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#0x0
        MOV     R1,#0x4
        LCALL   ??halKeypadWriteRegister?relay
//  190     halKeypadWriteRegister(0x05, 0x00);
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#0x0
        MOV     R1,#0x5
        LCALL   ??halKeypadWriteRegister?relay
//  191     halKeypadWriteRegister(0x0E, 0x30);
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#0x30
        MOV     R1,#0xe
        LCALL   ??halKeypadWriteRegister?relay
//  192     halKeypadWriteRegister(0x00, 0x6A); //Reset
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#0x6a
        MOV     R1,#0x0
        LCALL   ??halKeypadWriteRegister?relay
//  193     
//  194     HAL_KEY_SCL_DIR_IN();
        ANL     0xf5,#0xef
        ANL     0xff,#0xef
//  195     HAL_KEY_SDA_DIR_IN();
        LCALL   ?Subroutine5 & 0xFFFF
//  196 }
??CrossCallReturnLabel_12:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock54
        REQUIRE P2SEL
        REQUIRE P2DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond56) CFA_SP SP+-5
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        ANL     0xf5,#0xf7
        ORL     0xff,#0xf7
        MOV     A,0xff
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond59) CFA_SP SP+-5
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond60) CFA_SP SP+-5
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        ANL     0xf5,#0xf7
        ANL     0xff,#0xf7
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61
//  197 
//  198 //-------------------------------------------------------------------
//  199 // @fn  halKeypadPushed
//  200 // @brief
//  201 //      This function detects if the keypad is being pushed. 
//  202 // Parameters:
//  203 // @param  void
//  204 // @return uint8
//  205 //         '0'~'9' 'A' 'B' 'C' 'D' 'E' 'F' 'U' 'N' '#' '*' : keypad is being pushed
//  206 //          0: Button is not being pushed
//  207 //-------------------------------------------------------------------

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  208 uint8 halKeypadPushed(void)
halKeypadPushed:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI Function halKeypadPushed
//  209 {
        FUNCALL halKeypadPushed, halKeypadSensorData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadPushed, halKeypadWriteRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halKeypadPushed, halMcuWaitMs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  210     uint16 val;
//  211     uint8 ch;
//  212     uint8 key=0;
        MOV     R6,#0x0
//  213     
//  214     val = halKeypadSensorData();
//  215     //halLcdDisplayUint16(HAL_LCD_LINE_4,0,HAL_LCD_RADIX_HEX,val);
//  216     switch (val)
        ; Setup parameters for call to function halKeypadSensorData
        LCALL   ??halKeypadSensorData?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for halKeypadPushed>_0`:
        DATA
        DW        0
        DW        20
        DW        130
        DW        ??halKeypadPushed_0
        DW        132
        DW        ??halKeypadPushed_1
        DW        136
        DW        ??halKeypadPushed_2
        DW        144
        DW        ??halKeypadPushed_3
        DW        160
        DW        ??halKeypadPushed_4
        DW        258
        DW        ??halKeypadPushed_5
        DW        260
        DW        ??halKeypadPushed_6
        DW        264
        DW        ??halKeypadPushed_7
        DW        272
        DW        ??halKeypadPushed_8
        DW        288
        DW        ??halKeypadPushed_9
        DW        514
        DW        ??halKeypadPushed_10
        DW        516
        DW        ??halKeypadPushed_11
        DW        520
        DW        ??halKeypadPushed_12
        DW        528
        DW        ??halKeypadPushed_13
        DW        544
        DW        ??halKeypadPushed_14
        DW        1026
        DW        ??halKeypadPushed_15
        DW        1028
        DW        ??halKeypadPushed_16
        DW        1032
        DW        ??halKeypadPushed_17
        DW        1040
        DW        ??halKeypadPushed_18
        DW        1056
        DW        ??halKeypadPushed_19
        DW        ??halKeypadPushed_20
        CODE
//  217     {
//  218         case 0x0404:
//  219             //0
//  220             ch = '0';
??halKeypadPushed_16:
        MOV     R7,#0x30
        SJMP    ??halKeypadPushed_21
//  221             break;
//  222         case 0x0082:
//  223             //1
//  224             ch = '1';
??halKeypadPushed_0:
        MOV     R7,#0x31
        SJMP    ??halKeypadPushed_21
//  225             break;
//  226         case 0x0084:
//  227             //2
//  228             ch = '2';
??halKeypadPushed_1:
        MOV     R7,#0x32
//  229             key |= HAL_KEY_SW_1; // Keypad button2(Joystick up)
??halKeypadPushed_22:
        INC     R6
        SJMP    ??halKeypadPushed_21
//  230             break;
//  231         case 0x0088:
//  232             //3
//  233             ch = '3';
??halKeypadPushed_2:
        MOV     R7,#0x33
        SJMP    ??halKeypadPushed_21
//  234             break;
//  235         case 0x0102:
//  236             //4
//  237             ch = '4';
??halKeypadPushed_5:
        MOV     R7,#0x34
//  238             key |= HAL_KEY_SW_4; // Keypad button4(Joystick left)
        MOV     R6,#0x8
        SJMP    ??halKeypadPushed_21
//  239             break;
//  240         case 0x0104:
//  241             //5
//  242             ch = '5';
??halKeypadPushed_6:
        MOV     R7,#0x35
//  243             key |= HAL_KEY_SW_5; // Keypad button5(Joystick center)
        MOV     R6,#0x4
        SJMP    ??halKeypadPushed_21
//  244             break;
//  245         case 0x0108:
//  246             //6
//  247             ch = '6';
??halKeypadPushed_7:
        MOV     R7,#0x36
//  248             key |= HAL_KEY_SW_2; // Keypad button6(Joystick right)
        INC     R6
        SJMP    ??halKeypadPushed_22
//  249             break;
//  250         case 0x0202:
//  251             //7
//  252             ch = '7';
??halKeypadPushed_10:
        MOV     R7,#0x37
        SJMP    ??halKeypadPushed_21
//  253             break;
//  254         case 0x0204:
//  255             //8
//  256             ch = '8';
??halKeypadPushed_11:
        MOV     R7,#0x38
//  257             key |= HAL_KEY_SW_3; // Keypad button8(Joystick down)
        MOV     R6,#0x10
        SJMP    ??halKeypadPushed_21
//  258             break;
//  259         case 0x0208:
//  260             //9
//  261             ch = '9';
??halKeypadPushed_12:
        MOV     R7,#0x39
        SJMP    ??halKeypadPushed_21
//  262             break;
//  263         case 0x0402:
//  264             //*
//  265             ch = '*';
??halKeypadPushed_15:
        MOV     R7,#0x2a
        SJMP    ??halKeypadPushed_21
//  266             break;
//  267         case 0x0408:
//  268             //#
//  269             ch = '#';
??halKeypadPushed_17:
        MOV     R7,#0x23
        SJMP    ??halKeypadPushed_21
//  270             break;
//  271         case 0x0090:
//  272             //A
//  273             ch = 'A';
??halKeypadPushed_3:
        MOV     R7,#0x41
        SJMP    ??halKeypadPushed_21
//  274             break;
//  275         case 0x0110:
//  276             //B
//  277             ch = 'B';
??halKeypadPushed_8:
        MOV     R7,#0x42
        SJMP    ??halKeypadPushed_21
//  278             break;
//  279         case 0x0210:
//  280             //C
//  281             ch = 'C';
??halKeypadPushed_13:
        MOV     R7,#0x43
        SJMP    ??halKeypadPushed_21
//  282             break;
//  283         case 0x00A0:
//  284             //D
//  285             ch = 'D';
??halKeypadPushed_4:
        MOV     R7,#0x44
        SJMP    ??halKeypadPushed_21
//  286             break;
//  287         case 0x0120:
//  288             //E
//  289             ch = 'E';
??halKeypadPushed_9:
        MOV     R7,#0x45
        SJMP    ??halKeypadPushed_21
//  290             break;
//  291         case 0x0220:
//  292             //F
//  293             ch = 'F';
??halKeypadPushed_14:
        MOV     R7,#0x46
        SJMP    ??halKeypadPushed_21
//  294             break;
//  295         case 0x0410:
//  296             //U
//  297             ch = 'U';
??halKeypadPushed_18:
        MOV     R7,#0x55
        SJMP    ??halKeypadPushed_21
//  298             break;
//  299         case 0x0420:
//  300             //N
//  301             ch = 'N';
??halKeypadPushed_19:
        MOV     R7,#0x4e
        SJMP    ??halKeypadPushed_21
//  302             break;
//  303         default:
//  304             ch = 0;
??halKeypadPushed_20:
        MOV     R7,#0x0
//  305             break;
//  306     }
//  307     halKeypadResetCount++;
??halKeypadPushed_21:
        MOV     DPTR,#halKeypadResetCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  308     if (halKeypadResetCount > 200)
        CLR     C
        SUBB    A,#-0x37
        JC      ??halKeypadPushed_23
//  309     {
//  310         halKeypadResetCount = 0;
        CLR     A
        MOVX    @DPTR,A
//  311         halKeypadWriteRegister(0x00, 0x6A); //Reset
        ; Setup parameters for call to function halKeypadWriteRegister
        MOV     R2,#0x6a
        MOV     R1,A
        LCALL   ??halKeypadWriteRegister?relay
//  312     }
//  313     if (ch > 0)
??halKeypadPushed_23:
        MOV     A,R7
        JZ      ??halKeypadPushed_24
//  314     {
//  315 		//halBuzzerOn(BUZZER_FREQ);
//  316 		halMcuWaitMs(20);
        ; Setup parameters for call to function halMcuWaitMs
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ??halMcuWaitMs?relay
//  317 		//halBuzzerOff();
//  318     }
//  319     return key;
??halKeypadPushed_24:
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock62
//  320 }
//  321 
//  322 
//  323 /*******************************************************************************
//  324 // @fn          halMcuWaitUs
//  325 // @brief       Busy wait function. Waits the specified number of microseconds. Use
//  326 //              assumptions about number of clock cycles needed for the various
//  327 //              instructions. This function assumes a 32 MHz clock.
//  328 //              NB! This function is highly dependent on architecture and compiler!
//  329 // @param       uint16 usec - number of microseconds delays
//  330 // @return      none
//  331  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 void halMcuWaitUs(uint16 usec)
halMcuWaitUs:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function halMcuWaitUs
//  333 {
        ; Saved register size: 0
        ; Auto size: 0
//  334     usec >>= 1;
        MOV     A,R3
        CLR     C
        RRC     A
        MOV     R3,A
        MOV     A,R2
        RRC     A
        MOV     R2,A
        SJMP    ??halMcuWaitUs_0
//  335     while (usec--)
//  336     {
//  337         asm("NOP");
??halMcuWaitUs_1:
        NOP
//  338         asm("NOP");
        NOP
//  339         asm("NOP");
        NOP
//  340         asm("NOP");
        NOP
//  341         asm("NOP");
        NOP
//  342         asm("NOP");
        NOP
//  343         asm("NOP");
        NOP
//  344         asm("NOP");
        NOP
//  345         asm("NOP");
        NOP
//  346         asm("NOP");
        NOP
//  347         asm("NOP");
        NOP
//  348         asm("NOP");
        NOP
//  349         asm("NOP");
        NOP
//  350         asm("NOP");
        NOP
//  351         asm("NOP");
        NOP
//  352         asm("NOP");
        NOP
//  353     }
??halMcuWaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R0
        JNZ     ??halMcuWaitUs_2
        MOV     A,R1
??halMcuWaitUs_2:
        JNZ     ??halMcuWaitUs_1
//  354 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock63
//  355 
//  356 /*******************************************************************************
//  357 // @fn          halMcuWaitMs
//  358 // @brief       Busy wait function. Waits the specified number of milliseconds. Use
//  359 //              assumptions about number of clock cycles needed for the various
//  360 //              instructions.
//  361 //              NB! This function is highly dependent on architecture and compiler!
//  362 // @param       uint16 millisec - number of milliseconds delay
//  363 // @return      none
//  364  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  365 void halMcuWaitMs(uint16 msec)
halMcuWaitMs:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function halMcuWaitMs
//  366 {
        FUNCALL halMcuWaitMs, halMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        SJMP    ??halMcuWaitMs_0
//  367     while (msec--)
//  368     {
//  369         halMcuWaitUs(1000);
??halMcuWaitMs_1:
        ; Setup parameters for call to function halMcuWaitUs
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??halMcuWaitUs?relay
//  370     }
??halMcuWaitMs_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R6
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R7,A
        MOV     A,R0
        JNZ     ??halMcuWaitMs_2
        MOV     A,R1
??halMcuWaitMs_2:
        JNZ     ??halMcuWaitMs_1
//  371 }
        LJMP    ??Subroutine14_0 & 0xFFFF
        CFI EndBlock cfiBlock64

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadI2cStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadI2cStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadI2cStop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadI2cStop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadI2cAck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadI2cAck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadI2cNack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadI2cNack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadI2cWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadI2cWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadI2cRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadI2cRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadWriteRegister?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadWriteRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadReadRegister?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadReadRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadSensorData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadSensorData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halKeypadPushed?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halKeypadPushed

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halMcuWaitUs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halMcuWaitUs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halMcuWaitMs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halMcuWaitMs

        END
// 
// 736 bytes in segment BANKED_CODE
//  78 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//   1 byte  in segment XDATA_Z
// 
// 814 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 3 bytes shared)
//   1 byte  of XDATA memory
//
//Errors: none
//Warnings: none
